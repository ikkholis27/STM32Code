
testHW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ddd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce8  0801df68  0801df68  0002df68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc50  0801fc50  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc50  0801fc50  0002fc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc58  0801fc58  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc58  0801fc58  0002fc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc5c  0801fc5c  0002fc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0801fc60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b694  20000380  0801ffe0  00030380  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ba14  0801ffe0  0003ba14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ef55  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ef1  00000000  00000000  0006f305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003198  00000000  00000000  000751f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003090  00000000  00000000  00078390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002afbb  00000000  00000000  0007b420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024db3  00000000  00000000  000a63db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcdab  00000000  00000000  000cb18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c7f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e6ac  00000000  00000000  001c7fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801df50 	.word	0x0801df50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	0801df50 	.word	0x0801df50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <clearCrc>:

//---------------------------------------------------
// Initialize crc calculation
//---------------------------------------------------
void clearCrc()
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	_crc = _xorIn;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <clearCrc+0x14>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	801a      	strh	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	2000039c 	.word	0x2000039c

08000f20 <fastCrc>:
// Modbus: 		width=16 poly=0x8005 init=0xffff refin=true  refout=true  xorout=0x0000 check=0x4b37
// XModem: 		width=16 poly=0x1021 init=0x0000 refin=false refout=false xorout=0x0000 check=0x31c3
// CCITT-False:	width=16 poly=0x1021 init=0xffff refin=false refout=false xorout=0x0000 check=0x29b1
//---------------------------------------------------
unsigned int fastCrc(uint8_t data[], uint8_t start, uint16_t length, uint8_t reflectIn, uint8_t reflectOut, uint16_t polynomial, uint16_t xorIn, uint16_t xorOut, uint16_t msbMask, uint16_t mask)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	70fb      	strb	r3, [r7, #3]
 8000f32:	460b      	mov	r3, r1
 8000f34:	803b      	strh	r3, [r7, #0]
 8000f36:	4613      	mov	r3, r2
 8000f38:	70bb      	strb	r3, [r7, #2]
  uint16_t crc = xorIn;
 8000f3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f3c:	83fb      	strh	r3, [r7, #30]

	int j;
	uint8_t c;
	unsigned int bit;

	if (length == 0) return crc;
 8000f3e:	883b      	ldrh	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <fastCrc+0x28>
 8000f44:	8bfb      	ldrh	r3, [r7, #30]
 8000f46:	e04b      	b.n	8000fe0 <fastCrc+0xc0>

	for (int i = start; i < (start + length); i++)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e031      	b.n	8000fb2 <fastCrc+0x92>
	{
		c = data[i];
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	75fb      	strb	r3, [r7, #23]

		if (reflectIn != 0)
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <fastCrc+0x4a>
			c = (uint8_t) reflect(c);
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f841 	bl	8000fe8 <reflect>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75fb      	strb	r3, [r7, #23]

		j = 0x80;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	61bb      	str	r3, [r7, #24]

		while (j > 0)
 8000f6e:	e01a      	b.n	8000fa6 <fastCrc+0x86>
		{
			bit = (unsigned int)(crc & msbMask);
 8000f70:	8bfa      	ldrh	r2, [r7, #30]
 8000f72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f74:	4013      	ands	r3, r2
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	613b      	str	r3, [r7, #16]
			crc <<= 1;
 8000f7a:	8bfb      	ldrh	r3, [r7, #30]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	83fb      	strh	r3, [r7, #30]

			if ((c & j) != 0)
 8000f80:	7dfa      	ldrb	r2, [r7, #23]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <fastCrc+0x72>
			{
				bit = (unsigned int)(bit ^ msbMask);
 8000f8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
			}

			if (bit != 0)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <fastCrc+0x80>
			{
				crc ^= polynomial;
 8000f98:	8bfa      	ldrh	r2, [r7, #30]
 8000f9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	83fb      	strh	r3, [r7, #30]
			}

			j >>= 1;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	105b      	asrs	r3, r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
		while (j > 0)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dce1      	bgt.n	8000f70 <fastCrc+0x50>
	for (int i = start; i < (start + length); i++)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbc7      	blt.n	8000f4e <fastCrc+0x2e>
		}
	}

  if (reflectOut != 0)
 8000fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <fastCrc+0xbe>
    crc = (unsigned int)((reflect16((uint16_t) crc) ^ xorOut) & mask);
 8000fc6:	8bfb      	ldrh	r3, [r7, #30]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f83b 	bl	8001044 <reflect16>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fd4:	4053      	eors	r3, r2
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000fda:	4013      	ands	r3, r2
 8000fdc:	83fb      	strh	r3, [r7, #30]

	return crc;
 8000fde:	8bfb      	ldrh	r3, [r7, #30]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <reflect>:

//-------------------------------------------------------
// Reflects bit in a uint8_t
//-------------------------------------------------------
uint8_t reflect(uint8_t data)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  const uint8_t bits = 8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	72bb      	strb	r3, [r7, #10]
	unsigned long reflection = 0x00000000;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	// Reflect the data about the center bit.
	for (uint8_t bit = 0; bit < bits; bit++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	72fb      	strb	r3, [r7, #11]
 8000ffe:	e015      	b.n	800102c <reflect+0x44>
	{
		// If the LSB bit is set, set the reflection of it.
		if ((data & 0x01) != 0)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00a      	beq.n	8001020 <reflect+0x38>
		{
			reflection |= (unsigned long)(1 << ((bits - 1) - bit));
 800100a:	7abb      	ldrb	r3, [r7, #10]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2201      	movs	r2, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
		}

		data = (uint8_t)(data >> 1);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	085b      	lsrs	r3, r3, #1
 8001024:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bit = 0; bit < bits; bit++)
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	3301      	adds	r3, #1
 800102a:	72fb      	strb	r3, [r7, #11]
 800102c:	7afa      	ldrb	r2, [r7, #11]
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3e5      	bcc.n	8001000 <reflect+0x18>
	}

	return reflection;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <reflect16>:
//-------------------------------------------------------
// Reflects bit in a uint16_t
//-------------------------------------------------------
uint16_t reflect16(uint16_t data)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  const uint8_t bits = 16;
 800104e:	2310      	movs	r3, #16
 8001050:	72bb      	strb	r3, [r7, #10]
  unsigned long reflection = 0x00000000;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  // Reflect the data about the center bit.
  for (uint8_t bit = 0; bit < bits; bit++)
 8001056:	2300      	movs	r3, #0
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	e015      	b.n	8001088 <reflect16+0x44>
  {
    // If the LSB bit is set, set the reflection of it.
    if ((data & 0x01) != 0)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <reflect16+0x38>
    {
      reflection |= (unsigned long)(1 << ((bits - 1) - bit));
 8001066:	7abb      	ldrb	r3, [r7, #10]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2201      	movs	r2, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
    }

    data = (uint16_t)(data >> 1);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	80fb      	strh	r3, [r7, #6]
  for (uint8_t bit = 0; bit < bits; bit++)
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	3301      	adds	r3, #1
 8001086:	72fb      	strb	r3, [r7, #11]
 8001088:	7afa      	ldrb	r2, [r7, #11]
 800108a:	7abb      	ldrb	r3, [r7, #10]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3e5      	bcc.n	800105c <reflect16+0x18>
  }

  return reflection;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b29b      	uxth	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <XModemCrc>:

unsigned int XModemCrc(uint8_t data[], uint8_t start, uint16_t length){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af06      	add	r7, sp, #24
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	4613      	mov	r3, r2
 80010ae:	803b      	strh	r3, [r7, #0]
            //  XModem parameters: poly=0x1021 init=0x0000 refin=false refout=false xorout=0x0000
    return fastCrc(data, start, length, false, false, 0x1021, 0x0000, 0x0000, 0x8000, 0xffff);
 80010b0:	883a      	ldrh	r2, [r7, #0]
 80010b2:	78f9      	ldrb	r1, [r7, #3]
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	9305      	str	r3, [sp, #20]
 80010ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010be:	9304      	str	r3, [sp, #16]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9303      	str	r3, [sp, #12]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	f241 0321 	movw	r3, #4129	; 0x1021
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff23 	bl	8000f20 <fastCrc>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <dataallclearMK6N>:
char datastrMK6N[1500];
unsigned char dataMK6N[BUFFSIZEMK6N];
char data2MK6N[100];

void dataallclearMK6N(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK6N; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e007      	b.n	8001100 <dataallclearMK6N+0x1c>
	{
		dataMK6N[i] = '\0';
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <dataallclearMK6N+0x70>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK6N; i++)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f240 424b 	movw	r2, #1099	; 0x44b
 8001106:	4293      	cmp	r3, r2
 8001108:	ddf2      	ble.n	80010f0 <dataallclearMK6N+0xc>
	}
	for (int i=0; i < 100; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	e007      	b.n	8001120 <dataallclearMK6N+0x3c>
	{
		data2MK6N[i] = '\0';
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <dataallclearMK6N+0x74>)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 100; i++)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b63      	cmp	r3, #99	; 0x63
 8001124:	ddf4      	ble.n	8001110 <dataallclearMK6N+0x2c>
	}
	for (int i=0; i < 1500; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	e007      	b.n	800113c <dataallclearMK6N+0x58>
	{
		datastrMK6N[i] = '\0';
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <dataallclearMK6N+0x78>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1500; i++)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001142:	4293      	cmp	r3, r2
 8001144:	ddf2      	ble.n	800112c <dataallclearMK6N+0x48>
	}
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200039c0 	.word	0x200039c0
 8001158:	20002644 	.word	0x20002644
 800115c:	20001fe8 	.word	0x20001fe8

08001160 <datastrclearMK6N>:

void datastrclearMK6N(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
	for (int i=0; i < 1500; i++)
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	e007      	b.n	800117c <datastrclearMK6N+0x1c>
	{
		datastrMK6N[i] = '\0';
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <datastrclearMK6N+0x34>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1500; i++)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001182:	4293      	cmp	r3, r2
 8001184:	ddf2      	ble.n	800116c <datastrclearMK6N+0xc>
	}
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20001fe8 	.word	0x20001fe8

08001198 <datasizestrMK6N>:

int datasizestrMK6N(char buf[])
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	int i = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 80011a4:	e002      	b.n	80011ac <datasizestrMK6N+0x14>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3301      	adds	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f6      	bne.n	80011a6 <datasizestrMK6N+0xe>
	return i+1;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <data2clearMK6N>:

void data2clearMK6N(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
	for (int i=0; i < 100; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	e007      	b.n	80011e4 <data2clearMK6N+0x1c>
	{
		data2MK6N[i] = '\0';
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <data2clearMK6N+0x30>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 100; i++)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3301      	adds	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	ddf4      	ble.n	80011d4 <data2clearMK6N+0xc>
	}
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20002644 	.word	0x20002644

080011fc <setPaddingMK6N>:
//  time_t pctime = makeTime(myElements);
//  setTime(pctime); // Sync Arduino clock to the time received on the serial port
//}


void setPaddingMK6N(){
 80011fc:	b4b0      	push	{r4, r5, r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	466b      	mov	r3, sp
 8001204:	461d      	mov	r5, r3
  unsigned int lentemp=data_lenMK6N, idx=0;
 8001206:	4b61      	ldr	r3, [pc, #388]	; (800138c <setPaddingMK6N+0x190>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  uint8_t datatemp[data_lenMK6N];
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <setPaddingMK6N+0x190>)
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	1e43      	subs	r3, r0, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	f04f 0400 	mov.w	r4, #0
 8001228:	00d4      	lsls	r4, r2, #3
 800122a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800122e:	00cb      	lsls	r3, r1, #3
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	f04f 0400 	mov.w	r4, #0
 8001240:	00d4      	lsls	r4, r2, #3
 8001242:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001246:	00cb      	lsls	r3, r1, #3
 8001248:	4603      	mov	r3, r0
 800124a:	3307      	adds	r3, #7
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	ebad 0d03 	sub.w	sp, sp, r3
 8001254:	466b      	mov	r3, sp
 8001256:	3300      	adds	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	e00b      	b.n	8001278 <setPaddingMK6N+0x7c>
    datatemp[i]=data2MK6N[i];
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <setPaddingMK6N+0x194>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4413      	add	r3, r2
 800126e:	460a      	mov	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3301      	adds	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <setPaddingMK6N+0x190>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4293      	cmp	r3, r2
 8001282:	d3ed      	bcc.n	8001260 <setPaddingMK6N+0x64>
  }
  for(unsigned int i=0;i<lentemp;i++){
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e073      	b.n	8001372 <setPaddingMK6N+0x176>
    if(i==0){
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <setPaddingMK6N+0xa0>
      data2MK6N[idx]=0x02;
 8001290:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <setPaddingMK6N+0x194>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	2202      	movs	r2, #2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e064      	b.n	8001366 <setPaddingMK6N+0x16a>
    }
    else if(i==lentemp-1){
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3b01      	subs	r3, #1
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d105      	bne.n	80012b2 <setPaddingMK6N+0xb6>
      data2MK6N[idx]=0x03;
 80012a6:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <setPaddingMK6N+0x194>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e059      	b.n	8001366 <setPaddingMK6N+0x16a>
    }
    else if((datatemp[i]==0x13 && (i<lentemp-1 && i>0)) || datatemp[i]==0x02 || datatemp[i]==0x10 || datatemp[i]==0x11){
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b13      	cmp	r3, #19
 80012bc:	d107      	bne.n	80012ce <setPaddingMK6N+0xd2>
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d202      	bcs.n	80012ce <setPaddingMK6N+0xd2>
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d111      	bne.n	80012f2 <setPaddingMK6N+0xf6>
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d00b      	beq.n	80012f2 <setPaddingMK6N+0xf6>
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d005      	beq.n	80012f2 <setPaddingMK6N+0xf6>
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d112      	bne.n	8001318 <setPaddingMK6N+0x11c>
      data2MK6N[idx++]=0x10;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60fa      	str	r2, [r7, #12]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <setPaddingMK6N+0x194>)
 80012fa:	2110      	movs	r1, #16
 80012fc:	54d1      	strb	r1, [r2, r3]
      data2MK6N[idx]=datatemp[i]|0x40;
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130a:	b2d9      	uxtb	r1, r3
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <setPaddingMK6N+0x194>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e026      	b.n	8001366 <setPaddingMK6N+0x16a>
    }
    else if(i<lentemp-1 && datatemp[i]==0x03){
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	429a      	cmp	r2, r3
 8001320:	d218      	bcs.n	8001354 <setPaddingMK6N+0x158>
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d112      	bne.n	8001354 <setPaddingMK6N+0x158>
      data2MK6N[idx++]=0x10;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	4a16      	ldr	r2, [pc, #88]	; (8001390 <setPaddingMK6N+0x194>)
 8001336:	2110      	movs	r1, #16
 8001338:	54d1      	strb	r1, [r2, r3]
      data2MK6N[idx]=datatemp[i]|0x40;
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <setPaddingMK6N+0x194>)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e008      	b.n	8001366 <setPaddingMK6N+0x16a>
    }
    else    data2MK6N[idx]=datatemp[i];
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	7819      	ldrb	r1, [r3, #0]
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <setPaddingMK6N+0x194>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	460a      	mov	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
    idx++;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3301      	adds	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<lentemp;i++){
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	429a      	cmp	r2, r3
 8001378:	d387      	bcc.n	800128a <setPaddingMK6N+0x8e>
  }
  data_lenMK6N = idx;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a03      	ldr	r2, [pc, #12]	; (800138c <setPaddingMK6N+0x190>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	46ad      	mov	sp, r5
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	bcb0      	pop	{r4, r5, r7}
 800138a:	4770      	bx	lr
 800138c:	20002968 	.word	0x20002968
 8001390:	20002644 	.word	0x20002644

08001394 <removePaddingMK6N>:

void removePaddingMK6N(){
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
  unsigned int lentemp=data_lenMK6N;
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <removePaddingMK6N+0x90>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
//  char mydata[lentemp];
//  memcpy(mydata,dataMK6N,data_lenMK6N);
//  dataallclearMK6N();
  for(unsigned int i=0;i<data_lenMK6N;i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e02e      	b.n	8001404 <removePaddingMK6N+0x70>
    if(dataMK6N[i]==0x10){
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <removePaddingMK6N+0x94>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d125      	bne.n	80013fe <removePaddingMK6N+0x6a>
      dataMK6N[i]=dataMK6N[i+1]^0x40;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <removePaddingMK6N+0x94>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80013be:	b2d9      	uxtb	r1, r3
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <removePaddingMK6N+0x94>)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	4413      	add	r3, r2
 80013c6:	460a      	mov	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK6N-1;j++){
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e00b      	b.n	80013ea <removePaddingMK6N+0x56>
    	  dataMK6N[j]=dataMK6N[j+1];
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <removePaddingMK6N+0x94>)
 80013d8:	5cd1      	ldrb	r1, [r2, r3]
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <removePaddingMK6N+0x94>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	460a      	mov	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK6N-1;j++){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <removePaddingMK6N+0x90>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d3ec      	bcc.n	80013d2 <removePaddingMK6N+0x3e>
      }
      lentemp--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <removePaddingMK6N+0x90>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4293      	cmp	r3, r2
 800140e:	d3ca      	bcc.n	80013a6 <removePaddingMK6N+0x12>
    }
  }
  data_lenMK6N = lentemp;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <removePaddingMK6N+0x90>)
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20002968 	.word	0x20002968
 8001428:	200039c0 	.word	0x200039c0

0800142c <getRawDataMK6N>:

bool getRawDataMK6N(int headcmd){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    clearCrc();
 8001434:	f7ff fd68 	bl	8000f08 <clearCrc>
    data_lenMK6N = datasize(dataMK6N);
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <getRawDataMK6N+0x2c>)
 800143a:	f004 f9c9 	bl	80057d0 <datasize>
 800143e:	4602      	mov	r2, r0
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <getRawDataMK6N+0x30>)
 8001442:	601a      	str	r2, [r3, #0]
    removePaddingMK6N();
 8001444:	f7ff ffa6 	bl	8001394 <removePaddingMK6N>
    removeheadcrctailMK6N(headcmd);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f809 	bl	8001460 <removeheadcrctailMK6N>
//    valuecrc = XModemCrc(dataMK10E,0,data_lenMK10E-3);
//    if(checkcrcMK10E()){
//      SerialMonprintln("RemoveHeadCRCTail");
//      printData(dataMK10E,data_lenMK10E);
//      osDelay(100);
      return true;
 800144e:	2301      	movs	r3, #1
//    }
    return true;
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200039c0 	.word	0x200039c0
 800145c:	20002968 	.word	0x20002968

08001460 <removeheadcrctailMK6N>:
		datastr[i] = ptr++;
	}
	return len+sizeof(ptr);
}

void removeheadcrctailMK6N(int sizeheadcmd){
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  // remove CRC and Tail
  dataMK6N[data_lenMK6N-1]='\0';
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <removeheadcrctailMK6N+0x8c>)
 8001470:	2100      	movs	r1, #0
 8001472:	54d1      	strb	r1, [r2, r3]
  dataMK6N[data_lenMK6N-2]='\0';
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b02      	subs	r3, #2
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <removeheadcrctailMK6N+0x8c>)
 800147c:	2100      	movs	r1, #0
 800147e:	54d1      	strb	r1, [r2, r3]
  dataMK6N[data_lenMK6N-3]='\0';
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3b03      	subs	r3, #3
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <removeheadcrctailMK6N+0x8c>)
 8001488:	2100      	movs	r1, #0
 800148a:	54d1      	strb	r1, [r2, r3]
  data_lenMK6N=data_lenMK6N-3;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3b03      	subs	r3, #3
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 8001494:	6013      	str	r3, [r2, #0]
  //remove head
  for(unsigned int i=0;i<data_lenMK6N;i++){
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e013      	b.n	80014c4 <removeheadcrctailMK6N+0x64>
    if(i+sizeheadcmd<=BUFFSIZEMK6N){
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	f240 424c 	movw	r2, #1100	; 0x44c
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d809      	bhi.n	80014be <removeheadcrctailMK6N+0x5e>
      dataMK6N[i]=dataMK6N[i+sizeheadcmd];
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <removeheadcrctailMK6N+0x8c>)
 80014b2:	5cd1      	ldrb	r1, [r2, r3]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <removeheadcrctailMK6N+0x8c>)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4413      	add	r3, r2
 80014ba:	460a      	mov	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d3e5      	bcc.n	800149c <removeheadcrctailMK6N+0x3c>
    }
  }
  // update data_lenMK6N
  data_lenMK6N=data_lenMK6N-sizeheadcmd;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <removeheadcrctailMK6N+0x88>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20002968 	.word	0x20002968
 80014ec:	200039c0 	.word	0x200039c0

080014f0 <setSNMK6N>:
//        return 1;
    }
    return meterSNMK6N;
}

void setSNMK6N(char * datain, int len){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	dataallclearMK6N();
 80014fa:	f7ff fdf3 	bl	80010e4 <dataallclearMK6N>
	data_lenMK6N=len;
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <setSNMK6N+0x28>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6013      	str	r3, [r2, #0]
	memcpy(meterSNMK6N,datain, len);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <setSNMK6N+0x2c>)
 800150c:	f019 fec0 	bl	801b290 <memcpy>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20002968 	.word	0x20002968
 800151c:	200003a0 	.word	0x200003a0

08001520 <setCommandMK6N>:

void setCommandMK6N(char array[], uint16_t sizearr){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  for(int i=0;i<sizearr;i++){
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e00b      	b.n	800154a <setCommandMK6N+0x2a>
    data2MK6N[i]=array[i];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	7819      	ldrb	r1, [r3, #0]
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <setCommandMK6N+0x94>)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<sizearr;i++){
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3301      	adds	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbef      	blt.n	8001532 <setCommandMK6N+0x12>
  }
  data_lenMK6N = sizearr;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <setCommandMK6N+0x98>)
 8001556:	6013      	str	r3, [r2, #0]
  clearCrc();
 8001558:	f7ff fcd6 	bl	8000f08 <clearCrc>
   valuecrc = XModemCrc(array,0,sizearr);
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	461a      	mov	r2, r3
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fd9c 	bl	80010a0 <XModemCrc>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <setCommandMK6N+0x9c>)
 800156e:	801a      	strh	r2, [r3, #0]
   data2MK6N[sizearr+2]=0x03;
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	3302      	adds	r3, #2
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <setCommandMK6N+0x94>)
 8001576:	2103      	movs	r1, #3
 8001578:	54d1      	strb	r1, [r2, r3]
   data2MK6N[sizearr+1]= (uint8_t) valuecrc;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <setCommandMK6N+0x9c>)
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	3301      	adds	r3, #1
 8001582:	b2d1      	uxtb	r1, r2
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <setCommandMK6N+0x94>)
 8001586:	54d1      	strb	r1, [r2, r3]
   valuecrc  = valuecrc >> 8;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <setCommandMK6N+0x9c>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <setCommandMK6N+0x9c>)
 8001592:	801a      	strh	r2, [r3, #0]
   data2MK6N[sizearr]  = (uint8_t)valuecrc;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <setCommandMK6N+0x9c>)
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	b2d1      	uxtb	r1, r2
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <setCommandMK6N+0x94>)
 800159e:	54d1      	strb	r1, [r2, r3]
   data_lenMK6N = sizearr+3;
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	3303      	adds	r3, #3
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <setCommandMK6N+0x98>)
 80015a6:	6013      	str	r3, [r2, #0]
   setPaddingMK6N();
 80015a8:	f7ff fe28 	bl	80011fc <setPaddingMK6N>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20002644 	.word	0x20002644
 80015b8:	20002968 	.word	0x20002968
 80015bc:	200028b6 	.word	0x200028b6

080015c0 <txInstantMK6N>:
		  *outstr++=datastrMK6N[i];
	  }
  }
}

void txInstantMK6N(int i){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
	dataallclearMK6N();
 80015c8:	f7ff fd8c 	bl	80010e4 <dataallclearMK6N>
  char mychar[sizeof(instant)];
//  for(int i=0;i<3;i++){
    for(int j=0;j<sizeof(instant);j++){
 80015cc:	2300      	movs	r3, #0
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
 80015d0:	e031      	b.n	8001636 <txInstantMK6N+0x76>
      mychar[j]=instant[j];
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <txInstantMK6N+0xa0>)
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	4413      	add	r3, r2
 80015d8:	7819      	ldrb	r1, [r3, #0]
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e0:	4413      	add	r3, r2
 80015e2:	460a      	mov	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
      if(j==9 || j==13 || j==17 || j==21 || j==25 || j==29 || j==33){
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d011      	beq.n	8001610 <txInstantMK6N+0x50>
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	2b0d      	cmp	r3, #13
 80015f0:	d00e      	beq.n	8001610 <txInstantMK6N+0x50>
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f4:	2b11      	cmp	r3, #17
 80015f6:	d00b      	beq.n	8001610 <txInstantMK6N+0x50>
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	2b15      	cmp	r3, #21
 80015fc:	d008      	beq.n	8001610 <txInstantMK6N+0x50>
 80015fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001600:	2b19      	cmp	r3, #25
 8001602:	d005      	beq.n	8001610 <txInstantMK6N+0x50>
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	2b1d      	cmp	r3, #29
 8001608:	d002      	beq.n	8001610 <txInstantMK6N+0x50>
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	2b21      	cmp	r3, #33	; 0x21
 800160e:	d10f      	bne.n	8001630 <txInstantMK6N+0x70>
        mychar[j]=instant[j] | i;
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <txInstantMK6N+0xa0>)
 8001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b25a      	sxtb	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b25b      	sxtb	r3, r3
 8001622:	b2d9      	uxtb	r1, r3
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	4413      	add	r3, r2
 800162c:	460a      	mov	r2, r1
 800162e:	701a      	strb	r2, [r3, #0]
    for(int j=0;j<sizeof(instant);j++){
 8001630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001632:	3301      	adds	r3, #1
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	2b25      	cmp	r3, #37	; 0x25
 800163a:	d9ca      	bls.n	80015d2 <txInstantMK6N+0x12>
      }
    }
    setCommandMK6N(mychar, sizeof(mychar));
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2126      	movs	r1, #38	; 0x26
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff6c 	bl	8001520 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 200);
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <txInstantMK6N+0xa4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	23c8      	movs	r3, #200	; 0xc8
 8001650:	4905      	ldr	r1, [pc, #20]	; (8001668 <txInstantMK6N+0xa8>)
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <txInstantMK6N+0xac>)
 8001654:	f012 fc1a 	bl	8013e8c <HAL_UART_Transmit>
}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000068 	.word	0x20000068
 8001664:	20002968 	.word	0x20002968
 8001668:	20002644 	.word	0x20002644
 800166c:	20002770 	.word	0x20002770

08001670 <parsingDataRawInstantMK6N>:

void parsingDataRawInstantMK6N(unsigned char buf[],int len,int i){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
	dataallclearMK6N();
 800167c:	f7ff fd32 	bl	80010e4 <dataallclearMK6N>
	memcpy(dataMK6N,buf,len);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	461a      	mov	r2, r3
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <parsingDataRawInstantMK6N+0x9c>)
 8001688:	f019 fe02 	bl	801b290 <memcpy>
	data_lenMK6N=0;
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <parsingDataRawInstantMK6N+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 8001692:	481e      	ldr	r0, [pc, #120]	; (800170c <parsingDataRawInstantMK6N+0x9c>)
 8001694:	f004 f89c 	bl	80057d0 <datasize>
 8001698:	4602      	mov	r2, r0
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <parsingDataRawInstantMK6N+0xa0>)
 800169c:	601a      	str	r2, [r3, #0]
    if(getRawDataMK6N(6)){
 800169e:	2006      	movs	r0, #6
 80016a0:	f7ff fec4 	bl	800142c <getRawDataMK6N>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d02b      	beq.n	8001702 <parsingDataRawInstantMK6N+0x92>
//      eoblenMK6N=9;
      for(int k=0;k<8;k++){
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e025      	b.n	80016fc <parsingDataRawInstantMK6N+0x8c>
        hex2Float(dataMK6N,4*k);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4619      	mov	r1, r3
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <parsingDataRawInstantMK6N+0x9c>)
 80016b8:	f004 f9aa 	bl	8005a10 <hex2Float>
        if(i==0) instantA[k]=myFloat.f;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <parsingDataRawInstantMK6N+0x62>
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <parsingDataRawInstantMK6N+0xa4>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <parsingDataRawInstantMK6N+0xa8>)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e011      	b.n	80016f6 <parsingDataRawInstantMK6N+0x86>
        else if(i==1) instantB[k]=myFloat.f;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <parsingDataRawInstantMK6N+0x78>
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <parsingDataRawInstantMK6N+0xa4>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	490f      	ldr	r1, [pc, #60]	; (800171c <parsingDataRawInstantMK6N+0xac>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e006      	b.n	80016f6 <parsingDataRawInstantMK6N+0x86>
        else instantC[k]=myFloat.f;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <parsingDataRawInstantMK6N+0xa4>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <parsingDataRawInstantMK6N+0xb0>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	601a      	str	r2, [r3, #0]
      for(int k=0;k<8;k++){
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b07      	cmp	r3, #7
 8001700:	ddd6      	ble.n	80016b0 <parsingDataRawInstantMK6N+0x40>
//    	printf(" %.5f ",myFloat.f);
      }
//      printf(" \r\n");
    }
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200039c0 	.word	0x200039c0
 8001710:	20002968 	.word	0x20002968
 8001714:	20003f64 	.word	0x20003f64
 8001718:	20002894 	.word	0x20002894
 800171c:	20003840 	.word	0x20003840
 8001720:	20002700 	.word	0x20002700

08001724 <decodeJsonInstantMK6N>:

void decodeJsonInstantMK6N(char * outstr){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	  if(decodeInstant()) {
 800172c:	f000 f944 	bl	80019b8 <decodeInstant>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d014      	beq.n	8001760 <decodeJsonInstantMK6N+0x3c>
		  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e00a      	b.n	8001752 <decodeJsonInstantMK6N+0x2e>
			  *outstr++=datastrMK6N[i];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	4909      	ldr	r1, [pc, #36]	; (8001768 <decodeJsonInstantMK6N+0x44>)
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	440a      	add	r2, r1
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <decodeJsonInstantMK6N+0x44>)
 8001754:	f7ff fd20 	bl	8001198 <datasizestrMK6N>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4293      	cmp	r3, r2
 800175e:	dbed      	blt.n	800173c <decodeJsonInstantMK6N+0x18>
		  }
	  }
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20001fe8 	.word	0x20001fe8

0800176c <checkregInstant>:

const char * checkregInstant(uint8_t reg){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b60      	cmp	r3, #96	; 0x60
 800177a:	f200 80ed 	bhi.w	8001958 <checkregInstant+0x1ec>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <checkregInstant+0x18>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001909 	.word	0x08001909
 8001788:	0800190d 	.word	0x0800190d
 800178c:	08001911 	.word	0x08001911
 8001790:	08001959 	.word	0x08001959
 8001794:	08001959 	.word	0x08001959
 8001798:	08001959 	.word	0x08001959
 800179c:	08001959 	.word	0x08001959
 80017a0:	08001959 	.word	0x08001959
 80017a4:	08001959 	.word	0x08001959
 80017a8:	08001959 	.word	0x08001959
 80017ac:	08001959 	.word	0x08001959
 80017b0:	08001959 	.word	0x08001959
 80017b4:	08001959 	.word	0x08001959
 80017b8:	08001959 	.word	0x08001959
 80017bc:	08001959 	.word	0x08001959
 80017c0:	08001959 	.word	0x08001959
 80017c4:	08001915 	.word	0x08001915
 80017c8:	08001919 	.word	0x08001919
 80017cc:	0800191d 	.word	0x0800191d
 80017d0:	08001959 	.word	0x08001959
 80017d4:	08001959 	.word	0x08001959
 80017d8:	08001959 	.word	0x08001959
 80017dc:	08001959 	.word	0x08001959
 80017e0:	08001959 	.word	0x08001959
 80017e4:	08001959 	.word	0x08001959
 80017e8:	08001959 	.word	0x08001959
 80017ec:	08001959 	.word	0x08001959
 80017f0:	08001959 	.word	0x08001959
 80017f4:	08001959 	.word	0x08001959
 80017f8:	08001959 	.word	0x08001959
 80017fc:	08001959 	.word	0x08001959
 8001800:	08001959 	.word	0x08001959
 8001804:	08001921 	.word	0x08001921
 8001808:	08001925 	.word	0x08001925
 800180c:	08001929 	.word	0x08001929
 8001810:	08001959 	.word	0x08001959
 8001814:	08001959 	.word	0x08001959
 8001818:	08001955 	.word	0x08001955
 800181c:	08001959 	.word	0x08001959
 8001820:	08001959 	.word	0x08001959
 8001824:	08001959 	.word	0x08001959
 8001828:	08001959 	.word	0x08001959
 800182c:	08001959 	.word	0x08001959
 8001830:	08001959 	.word	0x08001959
 8001834:	08001959 	.word	0x08001959
 8001838:	08001959 	.word	0x08001959
 800183c:	08001959 	.word	0x08001959
 8001840:	08001959 	.word	0x08001959
 8001844:	0800192d 	.word	0x0800192d
 8001848:	08001931 	.word	0x08001931
 800184c:	08001935 	.word	0x08001935
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001939 	.word	0x08001939
 8001888:	0800193d 	.word	0x0800193d
 800188c:	08001941 	.word	0x08001941
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001959 	.word	0x08001959
 80018a4:	08001959 	.word	0x08001959
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001945 	.word	0x08001945
 80018c8:	08001949 	.word	0x08001949
 80018cc:	0800194d 	.word	0x0800194d
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001951 	.word	0x08001951
    case 0x00:
            return "\"3P59\"";
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <checkregInstant+0x1fc>)
 800190a:	e026      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x01:
            return "\"3P60\"";
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <checkregInstant+0x200>)
 800190e:	e024      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x02:
            return "\"3P61\"";
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <checkregInstant+0x204>)
 8001912:	e022      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x10:
            return "\"3P09\"";
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <checkregInstant+0x208>)
 8001916:	e020      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x11:
            return "\"3P10\"";
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <checkregInstant+0x20c>)
 800191a:	e01e      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x12:
            return "\"3P11\"";
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <checkregInstant+0x210>)
 800191e:	e01c      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x20:
            return "\"3P62\""; // phase angle A
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <checkregInstant+0x214>)
 8001922:	e01a      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x21:
            return "\"3P63\""; // phase angle B
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <checkregInstant+0x218>)
 8001926:	e018      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x22:
            return "\"3P64\""; // phase angle C
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <checkregInstant+0x21c>)
 800192a:	e016      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x30:
            return "\"3P01\""; // phase A Watts
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <checkregInstant+0x220>)
 800192e:	e014      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x31:
            return "\"3P02\""; // phase B Watts
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <checkregInstant+0x224>)
 8001932:	e012      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x32:
            return "\"3P03\""; // phase C Watts
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <checkregInstant+0x228>)
 8001936:	e010      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x40:
            return "\"3P43\""; // phase A Vars
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <checkregInstant+0x22c>)
 800193a:	e00e      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x41:
            return "\"3P44\""; // phase B Vars
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <checkregInstant+0x230>)
 800193e:	e00c      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x42:
            return "\"3P45\""; // phase C Vars
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <checkregInstant+0x234>)
 8001942:	e00a      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x50:
            return "\"3P05\""; // Total Apparent Power of A
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <checkregInstant+0x238>)
 8001946:	e008      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x51:
            return "\"3P06\""; // Total Apparent Power of B
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <checkregInstant+0x23c>)
 800194a:	e006      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x52:
            return "\"3P07\""; // Total Apparent Power of C
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <checkregInstant+0x240>)
 800194e:	e004      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x60:
            return "\"3P13\""; // Freq
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <checkregInstant+0x244>)
 8001952:	e002      	b.n	800195a <checkregInstant+0x1ee>
            break;
    case 0x25:
            return "\"3P42\""; 	// PF
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <checkregInstant+0x248>)
 8001956:	e000      	b.n	800195a <checkregInstant+0x1ee>
            break;
    default:
    		return "\"3P42\""; 	// PF
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <checkregInstant+0x248>)
            break;
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	0801df74 	.word	0x0801df74
 800196c:	0801df7c 	.word	0x0801df7c
 8001970:	0801df84 	.word	0x0801df84
 8001974:	0801df8c 	.word	0x0801df8c
 8001978:	0801df94 	.word	0x0801df94
 800197c:	0801df9c 	.word	0x0801df9c
 8001980:	0801dfa4 	.word	0x0801dfa4
 8001984:	0801dfac 	.word	0x0801dfac
 8001988:	0801dfb4 	.word	0x0801dfb4
 800198c:	0801dfbc 	.word	0x0801dfbc
 8001990:	0801dfc4 	.word	0x0801dfc4
 8001994:	0801dfcc 	.word	0x0801dfcc
 8001998:	0801dfd4 	.word	0x0801dfd4
 800199c:	0801dfdc 	.word	0x0801dfdc
 80019a0:	0801dfe4 	.word	0x0801dfe4
 80019a4:	0801dfec 	.word	0x0801dfec
 80019a8:	0801dff4 	.word	0x0801dff4
 80019ac:	0801dffc 	.word	0x0801dffc
 80019b0:	0801e004 	.word	0x0801e004
 80019b4:	0801e00c 	.word	0x0801e00c

080019b8 <decodeInstant>:


bool decodeInstant(){
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	data_lenMK6N = 0;
 80019be:	4ba2      	ldr	r3, [pc, #648]	; (8001c48 <decodeInstant+0x290>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 80019c4:	f7ff fbcc 	bl	8001160 <datastrclearMK6N>
//	printf("decodeInstant begin \r\n");

	strcpy(datastrMK6N,"{\"mid\":");
 80019c8:	4aa0      	ldr	r2, [pc, #640]	; (8001c4c <decodeInstant+0x294>)
 80019ca:	4ba1      	ldr	r3, [pc, #644]	; (8001c50 <decodeInstant+0x298>)
 80019cc:	cb03      	ldmia	r3!, {r0, r1}
 80019ce:	6010      	str	r0, [r2, #0]
 80019d0:	6051      	str	r1, [r2, #4]
	strcat(datastrMK6N, meterSNMK6N);
 80019d2:	49a0      	ldr	r1, [pc, #640]	; (8001c54 <decodeInstant+0x29c>)
 80019d4:	489d      	ldr	r0, [pc, #628]	; (8001c4c <decodeInstant+0x294>)
 80019d6:	f01a fa1f 	bl	801be18 <strcat>
	strcat(datastrMK6N, ",\"pid\":\"InstantMK6N\",");
 80019da:	489c      	ldr	r0, [pc, #624]	; (8001c4c <decodeInstant+0x294>)
 80019dc:	f7fe fc02 	bl	80001e4 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b99      	ldr	r3, [pc, #612]	; (8001c4c <decodeInstant+0x294>)
 80019e6:	4413      	add	r3, r2
 80019e8:	4a9b      	ldr	r2, [pc, #620]	; (8001c58 <decodeInstant+0x2a0>)
 80019ea:	461d      	mov	r5, r3
 80019ec:	4614      	mov	r4, r2
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	6028      	str	r0, [r5, #0]
 80019f2:	6069      	str	r1, [r5, #4]
 80019f4:	60aa      	str	r2, [r5, #8]
 80019f6:	60eb      	str	r3, [r5, #12]
 80019f8:	6820      	ldr	r0, [r4, #0]
 80019fa:	6128      	str	r0, [r5, #16]
 80019fc:	88a3      	ldrh	r3, [r4, #4]
 80019fe:	82ab      	strh	r3, [r5, #20]
//	  data2clearMK10E();
//	  sprintf(data2MK10E,"%d,",timestamp_now);
//	  strcat(datastrMK6N, data2MK10E);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
//  datastr+="123456789,";
  for(int i=0;i<8;i++){
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e116      	b.n	8001c34 <decodeInstant+0x27c>
    if(i==7){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b07      	cmp	r3, #7
 8001a0a:	d17e      	bne.n	8001b0a <decodeInstant+0x152>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001a0c:	2025      	movs	r0, #37	; 0x25
 8001a0e:	f7ff fead 	bl	800176c <checkregInstant>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	488d      	ldr	r0, [pc, #564]	; (8001c4c <decodeInstant+0x294>)
 8001a18:	f01a f9fe 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001a1c:	488b      	ldr	r0, [pc, #556]	; (8001c4c <decodeInstant+0x294>)
 8001a1e:	f7fe fbe1 	bl	80001e4 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <decodeInstant+0x294>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	498c      	ldr	r1, [pc, #560]	; (8001c5c <decodeInstant+0x2a4>)
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	460b      	mov	r3, r1
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001a34:	f7ff fbc8 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantA[i]);
 8001a38:	4a89      	ldr	r2, [pc, #548]	; (8001c60 <decodeInstant+0x2a8>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd90 	bl	8000568 <__aeabi_f2d>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	4984      	ldr	r1, [pc, #528]	; (8001c64 <decodeInstant+0x2ac>)
 8001a52:	4885      	ldr	r0, [pc, #532]	; (8001c68 <decodeInstant+0x2b0>)
 8001a54:	f01a f9c0 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001a58:	4983      	ldr	r1, [pc, #524]	; (8001c68 <decodeInstant+0x2b0>)
 8001a5a:	487c      	ldr	r0, [pc, #496]	; (8001c4c <decodeInstant+0x294>)
 8001a5c:	f01a f9dc 	bl	801be18 <strcat>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001a60:	2025      	movs	r0, #37	; 0x25
 8001a62:	f7ff fe83 	bl	800176c <checkregInstant>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4878      	ldr	r0, [pc, #480]	; (8001c4c <decodeInstant+0x294>)
 8001a6c:	f01a f9d4 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001a70:	4876      	ldr	r0, [pc, #472]	; (8001c4c <decodeInstant+0x294>)
 8001a72:	f7fe fbb7 	bl	80001e4 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <decodeInstant+0x294>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4977      	ldr	r1, [pc, #476]	; (8001c5c <decodeInstant+0x2a4>)
 8001a80:	461a      	mov	r2, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001a88:	f7ff fb9e 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantB[i]);
 8001a8c:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <decodeInstant+0x2b4>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd66 	bl	8000568 <__aeabi_f2d>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	496f      	ldr	r1, [pc, #444]	; (8001c64 <decodeInstant+0x2ac>)
 8001aa6:	4870      	ldr	r0, [pc, #448]	; (8001c68 <decodeInstant+0x2b0>)
 8001aa8:	f01a f996 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001aac:	496e      	ldr	r1, [pc, #440]	; (8001c68 <decodeInstant+0x2b0>)
 8001aae:	4867      	ldr	r0, [pc, #412]	; (8001c4c <decodeInstant+0x294>)
 8001ab0:	f01a f9b2 	bl	801be18 <strcat>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001ab4:	2025      	movs	r0, #37	; 0x25
 8001ab6:	f7ff fe59 	bl	800176c <checkregInstant>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4863      	ldr	r0, [pc, #396]	; (8001c4c <decodeInstant+0x294>)
 8001ac0:	f01a f9aa 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001ac4:	4861      	ldr	r0, [pc, #388]	; (8001c4c <decodeInstant+0x294>)
 8001ac6:	f7fe fb8d 	bl	80001e4 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <decodeInstant+0x294>)
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4962      	ldr	r1, [pc, #392]	; (8001c5c <decodeInstant+0x2a4>)
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001adc:	f7ff fb74 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f}",instantC[i]);
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <decodeInstant+0x2b8>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd3c 	bl	8000568 <__aeabi_f2d>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	495e      	ldr	r1, [pc, #376]	; (8001c74 <decodeInstant+0x2bc>)
 8001afa:	485b      	ldr	r0, [pc, #364]	; (8001c68 <decodeInstant+0x2b0>)
 8001afc:	f01a f96c 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001b00:	4959      	ldr	r1, [pc, #356]	; (8001c68 <decodeInstant+0x2b0>)
 8001b02:	4852      	ldr	r0, [pc, #328]	; (8001c4c <decodeInstant+0x294>)
 8001b04:	f01a f988 	bl	801be18 <strcat>
 8001b08:	e091      	b.n	8001c2e <decodeInstant+0x276>
//      datastr+="}";
    }
    else {
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe2a 	bl	800176c <checkregInstant>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	484b      	ldr	r0, [pc, #300]	; (8001c4c <decodeInstant+0x294>)
 8001b1e:	f01a f97b 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001b22:	484a      	ldr	r0, [pc, #296]	; (8001c4c <decodeInstant+0x294>)
 8001b24:	f7fe fb5e 	bl	80001e4 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <decodeInstant+0x294>)
 8001b2e:	4413      	add	r3, r2
 8001b30:	494a      	ldr	r1, [pc, #296]	; (8001c5c <decodeInstant+0x2a4>)
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001b3a:	f7ff fb45 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantA[i]);
 8001b3e:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <decodeInstant+0x2a8>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd0d 	bl	8000568 <__aeabi_f2d>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	461a      	mov	r2, r3
 8001b54:	4623      	mov	r3, r4
 8001b56:	4943      	ldr	r1, [pc, #268]	; (8001c64 <decodeInstant+0x2ac>)
 8001b58:	4843      	ldr	r0, [pc, #268]	; (8001c68 <decodeInstant+0x2b0>)
 8001b5a:	f01a f93d 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001b5e:	4942      	ldr	r1, [pc, #264]	; (8001c68 <decodeInstant+0x2b0>)
 8001b60:	483a      	ldr	r0, [pc, #232]	; (8001c4c <decodeInstant+0x294>)
 8001b62:	f01a f959 	bl	801be18 <strcat>
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4 | 0x01));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fdf8 	bl	800176c <checkregInstant>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4832      	ldr	r0, [pc, #200]	; (8001c4c <decodeInstant+0x294>)
 8001b82:	f01a f949 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001b86:	4831      	ldr	r0, [pc, #196]	; (8001c4c <decodeInstant+0x294>)
 8001b88:	f7fe fb2c 	bl	80001e4 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <decodeInstant+0x294>)
 8001b92:	4413      	add	r3, r2
 8001b94:	4931      	ldr	r1, [pc, #196]	; (8001c5c <decodeInstant+0x2a4>)
 8001b96:	461a      	mov	r2, r3
 8001b98:	460b      	mov	r3, r1
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001b9e:	f7ff fb13 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantB[i]);
 8001ba2:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <decodeInstant+0x2b4>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcdb 	bl	8000568 <__aeabi_f2d>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4623      	mov	r3, r4
 8001bba:	492a      	ldr	r1, [pc, #168]	; (8001c64 <decodeInstant+0x2ac>)
 8001bbc:	482a      	ldr	r0, [pc, #168]	; (8001c68 <decodeInstant+0x2b0>)
 8001bbe:	f01a f90b 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001bc2:	4929      	ldr	r1, [pc, #164]	; (8001c68 <decodeInstant+0x2b0>)
 8001bc4:	4821      	ldr	r0, [pc, #132]	; (8001c4c <decodeInstant+0x294>)
 8001bc6:	f01a f927 	bl	801be18 <strcat>
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4 | 0x02));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fdc6 	bl	800176c <checkregInstant>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <decodeInstant+0x294>)
 8001be6:	f01a f917 	bl	801be18 <strcat>
    	strcat(datastrMK6N, ":");
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <decodeInstant+0x294>)
 8001bec:	f7fe fafa 	bl	80001e4 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <decodeInstant+0x294>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4918      	ldr	r1, [pc, #96]	; (8001c5c <decodeInstant+0x2a4>)
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001c02:	f7ff fae1 	bl	80011c8 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantC[i]);
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <decodeInstant+0x2b8>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fca9 	bl	8000568 <__aeabi_f2d>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	4911      	ldr	r1, [pc, #68]	; (8001c64 <decodeInstant+0x2ac>)
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <decodeInstant+0x2b0>)
 8001c22:	f01a f8d9 	bl	801bdd8 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001c26:	4910      	ldr	r1, [pc, #64]	; (8001c68 <decodeInstant+0x2b0>)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <decodeInstant+0x294>)
 8001c2a:	f01a f8f5 	bl	801be18 <strcat>
  for(int i=0;i<8;i++){
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	f77f aee5 	ble.w	8001a06 <decodeInstant+0x4e>
    }
  }
//  SerialMonprintlnMK6N(datastrMK6N);
    return true;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bdb0      	pop	{r4, r5, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20002968 	.word	0x20002968
 8001c4c:	20001fe8 	.word	0x20001fe8
 8001c50:	0801e014 	.word	0x0801e014
 8001c54:	200003a0 	.word	0x200003a0
 8001c58:	0801e01c 	.word	0x0801e01c
 8001c5c:	0801e034 	.word	0x0801e034
 8001c60:	20002894 	.word	0x20002894
 8001c64:	0801e038 	.word	0x0801e038
 8001c68:	20002644 	.word	0x20002644
 8001c6c:	20003840 	.word	0x20003840
 8001c70:	20002700 	.word	0x20002700
 8001c74:	0801e040 	.word	0x0801e040

08001c78 <checkregLPMK6N>:

// ----------------------- LP --------------------------------
const char * checkregLPMK6N(uint8_t reg){
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b60      	cmp	r3, #96	; 0x60
 8001c86:	f200 80ed 	bhi.w	8001e64 <checkregLPMK6N+0x1ec>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <checkregLPMK6N+0x18>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001e15 	.word	0x08001e15
 8001c94:	08001e19 	.word	0x08001e19
 8001c98:	08001e1d 	.word	0x08001e1d
 8001c9c:	08001e21 	.word	0x08001e21
 8001ca0:	08001e25 	.word	0x08001e25
 8001ca4:	08001e29 	.word	0x08001e29
 8001ca8:	08001e2d 	.word	0x08001e2d
 8001cac:	08001e31 	.word	0x08001e31
 8001cb0:	08001e35 	.word	0x08001e35
 8001cb4:	08001e39 	.word	0x08001e39
 8001cb8:	08001e3d 	.word	0x08001e3d
 8001cbc:	08001e41 	.word	0x08001e41
 8001cc0:	08001e45 	.word	0x08001e45
 8001cc4:	08001e49 	.word	0x08001e49
 8001cc8:	08001e4d 	.word	0x08001e4d
 8001ccc:	08001e51 	.word	0x08001e51
 8001cd0:	08001e65 	.word	0x08001e65
 8001cd4:	08001e65 	.word	0x08001e65
 8001cd8:	08001e65 	.word	0x08001e65
 8001cdc:	08001e65 	.word	0x08001e65
 8001ce0:	08001e65 	.word	0x08001e65
 8001ce4:	08001e65 	.word	0x08001e65
 8001ce8:	08001e65 	.word	0x08001e65
 8001cec:	08001e65 	.word	0x08001e65
 8001cf0:	08001e65 	.word	0x08001e65
 8001cf4:	08001e65 	.word	0x08001e65
 8001cf8:	08001e65 	.word	0x08001e65
 8001cfc:	08001e65 	.word	0x08001e65
 8001d00:	08001e65 	.word	0x08001e65
 8001d04:	08001e65 	.word	0x08001e65
 8001d08:	08001e65 	.word	0x08001e65
 8001d0c:	08001e65 	.word	0x08001e65
 8001d10:	08001e65 	.word	0x08001e65
 8001d14:	08001e65 	.word	0x08001e65
 8001d18:	08001e65 	.word	0x08001e65
 8001d1c:	08001e65 	.word	0x08001e65
 8001d20:	08001e65 	.word	0x08001e65
 8001d24:	08001e61 	.word	0x08001e61
 8001d28:	08001e65 	.word	0x08001e65
 8001d2c:	08001e65 	.word	0x08001e65
 8001d30:	08001e65 	.word	0x08001e65
 8001d34:	08001e65 	.word	0x08001e65
 8001d38:	08001e65 	.word	0x08001e65
 8001d3c:	08001e65 	.word	0x08001e65
 8001d40:	08001e65 	.word	0x08001e65
 8001d44:	08001e65 	.word	0x08001e65
 8001d48:	08001e65 	.word	0x08001e65
 8001d4c:	08001e65 	.word	0x08001e65
 8001d50:	08001e65 	.word	0x08001e65
 8001d54:	08001e65 	.word	0x08001e65
 8001d58:	08001e65 	.word	0x08001e65
 8001d5c:	08001e65 	.word	0x08001e65
 8001d60:	08001e65 	.word	0x08001e65
 8001d64:	08001e65 	.word	0x08001e65
 8001d68:	08001e65 	.word	0x08001e65
 8001d6c:	08001e65 	.word	0x08001e65
 8001d70:	08001e65 	.word	0x08001e65
 8001d74:	08001e65 	.word	0x08001e65
 8001d78:	08001e65 	.word	0x08001e65
 8001d7c:	08001e65 	.word	0x08001e65
 8001d80:	08001e65 	.word	0x08001e65
 8001d84:	08001e65 	.word	0x08001e65
 8001d88:	08001e65 	.word	0x08001e65
 8001d8c:	08001e65 	.word	0x08001e65
 8001d90:	08001e65 	.word	0x08001e65
 8001d94:	08001e65 	.word	0x08001e65
 8001d98:	08001e65 	.word	0x08001e65
 8001d9c:	08001e65 	.word	0x08001e65
 8001da0:	08001e65 	.word	0x08001e65
 8001da4:	08001e65 	.word	0x08001e65
 8001da8:	08001e65 	.word	0x08001e65
 8001dac:	08001e65 	.word	0x08001e65
 8001db0:	08001e65 	.word	0x08001e65
 8001db4:	08001e65 	.word	0x08001e65
 8001db8:	08001e65 	.word	0x08001e65
 8001dbc:	08001e65 	.word	0x08001e65
 8001dc0:	08001e65 	.word	0x08001e65
 8001dc4:	08001e65 	.word	0x08001e65
 8001dc8:	08001e65 	.word	0x08001e65
 8001dcc:	08001e65 	.word	0x08001e65
 8001dd0:	08001e65 	.word	0x08001e65
 8001dd4:	08001e55 	.word	0x08001e55
 8001dd8:	08001e59 	.word	0x08001e59
 8001ddc:	08001e65 	.word	0x08001e65
 8001de0:	08001e65 	.word	0x08001e65
 8001de4:	08001e65 	.word	0x08001e65
 8001de8:	08001e65 	.word	0x08001e65
 8001dec:	08001e65 	.word	0x08001e65
 8001df0:	08001e65 	.word	0x08001e65
 8001df4:	08001e65 	.word	0x08001e65
 8001df8:	08001e65 	.word	0x08001e65
 8001dfc:	08001e65 	.word	0x08001e65
 8001e00:	08001e65 	.word	0x08001e65
 8001e04:	08001e65 	.word	0x08001e65
 8001e08:	08001e65 	.word	0x08001e65
 8001e0c:	08001e65 	.word	0x08001e65
 8001e10:	08001e5d 	.word	0x08001e5d
    case 0x00:
            return "\"3P59\"";
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <checkregLPMK6N+0x1fc>)
 8001e16:	e026      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x01:
            return "\"3P60\"";
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <checkregLPMK6N+0x200>)
 8001e1a:	e024      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x02:
            return "\"3P61\"";
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <checkregLPMK6N+0x204>)
 8001e1e:	e022      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x03:
            return "\"3P09\"";
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <checkregLPMK6N+0x208>)
 8001e22:	e020      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x04:
            return "\"3P10\"";
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <checkregLPMK6N+0x20c>)
 8001e26:	e01e      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x05:
            return "\"3P11\"";
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <checkregLPMK6N+0x210>)
 8001e2a:	e01c      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x06:
            return "\"3P62\""; // phase angle A
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <checkregLPMK6N+0x214>)
 8001e2e:	e01a      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x07:
            return "\"3P63\""; // phase angle B
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <checkregLPMK6N+0x218>)
 8001e32:	e018      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x08:
            return "\"3P64\""; // phase angle C
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <checkregLPMK6N+0x21c>)
 8001e36:	e016      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x09:
            return "\"3P01\""; // phase A Watts
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <checkregLPMK6N+0x220>)
 8001e3a:	e014      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0A:
            return "\"3P02\""; // phase B Watts
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <checkregLPMK6N+0x224>)
 8001e3e:	e012      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0B:
            return "\"3P03\""; // phase C Watts
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <checkregLPMK6N+0x228>)
 8001e42:	e010      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0C:
            return "\"3P43\""; // phase A Vars
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <checkregLPMK6N+0x22c>)
 8001e46:	e00e      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0D:
            return "\"3P44\""; // phase B Vars
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <checkregLPMK6N+0x230>)
 8001e4a:	e00c      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0E:
            return "\"3P45\""; // phase C Vars
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <checkregLPMK6N+0x234>)
 8001e4e:	e00a      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x0F:
            return "\"3P05\""; // Total Apparent Power of A
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <checkregLPMK6N+0x238>)
 8001e52:	e008      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x51:
            return "\"3P06\""; // Total Apparent Power of B
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <checkregLPMK6N+0x23c>)
 8001e56:	e006      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x52:
            return "\"3P07\""; // Total Apparent Power of C
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <checkregLPMK6N+0x240>)
 8001e5a:	e004      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x60:
            return "\"3P13\""; // Freq
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <checkregLPMK6N+0x244>)
 8001e5e:	e002      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    case 0x25:
            return "\"3P42\"";   // PF
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <checkregLPMK6N+0x248>)
 8001e62:	e000      	b.n	8001e66 <checkregLPMK6N+0x1ee>
            break;
    default:
            return "\"3P42\"";   // PF
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <checkregLPMK6N+0x248>)
            break;
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	0801df74 	.word	0x0801df74
 8001e78:	0801df7c 	.word	0x0801df7c
 8001e7c:	0801df84 	.word	0x0801df84
 8001e80:	0801df8c 	.word	0x0801df8c
 8001e84:	0801df94 	.word	0x0801df94
 8001e88:	0801df9c 	.word	0x0801df9c
 8001e8c:	0801dfa4 	.word	0x0801dfa4
 8001e90:	0801dfac 	.word	0x0801dfac
 8001e94:	0801dfb4 	.word	0x0801dfb4
 8001e98:	0801dfbc 	.word	0x0801dfbc
 8001e9c:	0801dfc4 	.word	0x0801dfc4
 8001ea0:	0801dfcc 	.word	0x0801dfcc
 8001ea4:	0801dfd4 	.word	0x0801dfd4
 8001ea8:	0801dfdc 	.word	0x0801dfdc
 8001eac:	0801dfe4 	.word	0x0801dfe4
 8001eb0:	0801dfec 	.word	0x0801dfec
 8001eb4:	0801dff4 	.word	0x0801dff4
 8001eb8:	0801dffc 	.word	0x0801dffc
 8001ebc:	0801e004 	.word	0x0801e004
 8001ec0:	0801e00c 	.word	0x0801e00c

08001ec4 <decodelpdata>:

int decodelpdata(){
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
//    uint8_t mylpdata[data_lenMK6N+1];

  for(int i=0;i<jmlchannelMK6N;i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	e067      	b.n	8001fa0 <decodelpdata+0xdc>
    hex2Long(dataMK6N,i*4+2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4837      	ldr	r0, [pc, #220]	; (8001fb8 <decodelpdata+0xf4>)
 8001eda:	f003 fddf 	bl	8005a9c <hex2Long>
    lpdatalong[i]=myFloat.l;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <decodelpdata+0xf8>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <decodelpdata+0xfc>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdataulong[i]=myFloat.ul;
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <decodelpdata+0xf8>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <decodelpdata+0x100>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if(lptype[i+1]==0x4F){
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <decodelpdata+0x104>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	2b4f      	cmp	r3, #79	; 0x4f
 8001f00:	d120      	bne.n	8001f44 <decodelpdata+0x80>
      lpdata[i]=(double) lpdatalong[i]*lpscaleMK6N[i+1];    
 8001f02:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <decodelpdata+0xfc>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb1a 	bl	8000544 <__aeabi_i2d>
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <decodelpdata+0x108>)
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb21 	bl	8000568 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f7fe fb73 	bl	8000618 <__aeabi_dmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	4926      	ldr	r1, [pc, #152]	; (8001fd0 <decodelpdata+0x10c>)
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	00d2      	lsls	r2, r2, #3
 8001f3c:	440a      	add	r2, r1
 8001f3e:	e9c2 3400 	strd	r3, r4, [r2]
 8001f42:	e02a      	b.n	8001f9a <decodelpdata+0xd6>
    }
    else if(lptype[i+1]==0x46){
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <decodelpdata+0x104>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	2b46      	cmp	r3, #70	; 0x46
 8001f4e:	d124      	bne.n	8001f9a <decodelpdata+0xd6>
      hex2Float(dataMK6N,i*4+2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	4619      	mov	r1, r3
 8001f58:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <decodelpdata+0xf4>)
 8001f5a:	f003 fd59 	bl	8005a10 <hex2Float>
      lpdata[i]=(double) myFloat.f*lpscaleMK6N[i+1];
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <decodelpdata+0xf8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fb00 	bl	8000568 <__aeabi_f2d>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	460d      	mov	r5, r1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <decodelpdata+0x108>)
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe faf5 	bl	8000568 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe fb47 	bl	8000618 <__aeabi_dmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	4910      	ldr	r1, [pc, #64]	; (8001fd0 <decodelpdata+0x10c>)
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	00d2      	lsls	r2, r2, #3
 8001f94:	440a      	add	r2, r1
 8001f96:	e9c2 3400 	strd	r3, r4, [r2]
  for(int i=0;i<jmlchannelMK6N;i++){
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <decodelpdata+0x110>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	db91      	blt.n	8001ed0 <decodelpdata+0xc>
    }
//    printf("%d %.5f %.5f\r\n",lpdatalong[i],lpscaleMK6N[i+1],lpdata[i]);
  }
  return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200039c0 	.word	0x200039c0
 8001fbc:	20003f64 	.word	0x20003f64
 8001fc0:	20002930 	.word	0x20002930
 8001fc4:	20002838 	.word	0x20002838
 8001fc8:	20002f7c 	.word	0x20002f7c
 8001fcc:	200037b0 	.word	0x200037b0
 8001fd0:	20003740 	.word	0x20003740
 8001fd4:	200036f8 	.word	0x200036f8

08001fd8 <txlpMK6NRec>:
      }
  }
//  return "{\"nodata\":0}";
}

void txlpMK6NRec(int lp_index){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	dataallclearMK6N();
 8001fe0:	f7ff f880 	bl	80010e4 <dataallclearMK6N>
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  unsigned long lpindex = lp_index;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]
  lprecordMK6N = lpindex;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <txlpMK6NRec+0xbc>)
 8001fec:	6013      	str	r3, [r2, #0]
  char mydata[17];
  mydata[0]=0x02;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	723b      	strb	r3, [r7, #8]
  mydata[1]=0x46;
 8001ff2:	2346      	movs	r3, #70	; 0x46
 8001ff4:	727b      	strb	r3, [r7, #9]
  mydata[2]=0x52;
 8001ff6:	2352      	movs	r3, #82	; 0x52
 8001ff8:	72bb      	strb	r3, [r7, #10]
  mydata[3]=0x03;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	72fb      	strb	r3, [r7, #11]
  mydata[4]=0x05;
 8001ffe:	2305      	movs	r3, #5
 8002000:	733b      	strb	r3, [r7, #12]
  mydata[5]=0xF0;
 8002002:	23f0      	movs	r3, #240	; 0xf0
 8002004:	737b      	strb	r3, [r7, #13]
  mydata[6]=0x08;
 8002006:	2308      	movs	r3, #8
 8002008:	73bb      	strb	r3, [r7, #14]
  if(lpindex<65536){
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d20b      	bcs.n	800202a <txlpMK6NRec+0x52>
  mydata[7]=0;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  mydata[8]=0;
 8002016:	2300      	movs	r3, #0
 8002018:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b2db      	uxtb	r3, r3
 8002020:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	74bb      	strb	r3, [r7, #18]
 8002028:	e00e      	b.n	8002048 <txlpMK6NRec+0x70>
  }
  else {
  mydata[7]=lpindex>>24;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	0e1b      	lsrs	r3, r3, #24
 800202e:	b2db      	uxtb	r3, r3
 8002030:	73fb      	strb	r3, [r7, #15]
  mydata[8]=lpindex>>16;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b2db      	uxtb	r3, r3
 8002040:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	74bb      	strb	r3, [r7, #18]
  }
  mydata[11]=0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	74fb      	strb	r3, [r7, #19]
  mydata[12]=0x01;
 800204c:	2301      	movs	r3, #1
 800204e:	753b      	strb	r3, [r7, #20]
  mydata[13]=0x00;
 8002050:	2300      	movs	r3, #0
 8002052:	757b      	strb	r3, [r7, #21]
  mydata[14]=0x00;
 8002054:	2300      	movs	r3, #0
 8002056:	75bb      	strb	r3, [r7, #22]
  mydata[15]=0x05;
 8002058:	2305      	movs	r3, #5
 800205a:	75fb      	strb	r3, [r7, #23]
  mydata[16]=0xDC;
 800205c:	23dc      	movs	r3, #220	; 0xdc
 800205e:	763b      	strb	r3, [r7, #24]
  data_lenMK6N = 17;
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <txlpMK6NRec+0xc0>)
 8002062:	2211      	movs	r2, #17
 8002064:	601a      	str	r2, [r3, #0]
  setCommandMK6N(mydata, data_lenMK6N);
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <txlpMK6NRec+0xc0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fa54 	bl	8001520 <setCommandMK6N>
  	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <txlpMK6NRec+0xc0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29a      	uxth	r2, r3
 800207e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002082:	4906      	ldr	r1, [pc, #24]	; (800209c <txlpMK6NRec+0xc4>)
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <txlpMK6NRec+0xc8>)
 8002086:	f011 ff01 	bl	8013e8c <HAL_UART_Transmit>
}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200038e0 	.word	0x200038e0
 8002098:	20002968 	.word	0x20002968
 800209c:	20002644 	.word	0x20002644
 80020a0:	20002770 	.word	0x20002770

080020a4 <txlpMK6N>:

void txlpMK6N(int indexmin1){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	dataallclearMK6N();
 80020ac:	f7ff f81a 	bl	80010e4 <dataallclearMK6N>
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  unsigned long lpindex = lplastentryMK6N-indexmin1;
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <txlpMK6N+0xc0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]
  lprecordMK6N = lpindex;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <txlpMK6N+0xc4>)
 80020be:	6013      	str	r3, [r2, #0]
  char mydata[17];
  mydata[0]=0x02;
 80020c0:	2302      	movs	r3, #2
 80020c2:	723b      	strb	r3, [r7, #8]
  mydata[1]=0x46;
 80020c4:	2346      	movs	r3, #70	; 0x46
 80020c6:	727b      	strb	r3, [r7, #9]
  mydata[2]=0x52;
 80020c8:	2352      	movs	r3, #82	; 0x52
 80020ca:	72bb      	strb	r3, [r7, #10]
  mydata[3]=0x03;
 80020cc:	2303      	movs	r3, #3
 80020ce:	72fb      	strb	r3, [r7, #11]
  mydata[4]=0x05;
 80020d0:	2305      	movs	r3, #5
 80020d2:	733b      	strb	r3, [r7, #12]
  mydata[5]=0xF0;
 80020d4:	23f0      	movs	r3, #240	; 0xf0
 80020d6:	737b      	strb	r3, [r7, #13]
  mydata[6]=0x08;
 80020d8:	2308      	movs	r3, #8
 80020da:	73bb      	strb	r3, [r7, #14]
  if(lpindex<65536){
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d20b      	bcs.n	80020fc <txlpMK6N+0x58>
  mydata[7]=0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  mydata[8]=0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	74bb      	strb	r3, [r7, #18]
 80020fa:	e00e      	b.n	800211a <txlpMK6N+0x76>
  }
  else {
  mydata[7]=lpindex>>24;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	0e1b      	lsrs	r3, r3, #24
 8002100:	b2db      	uxtb	r3, r3
 8002102:	73fb      	strb	r3, [r7, #15]
  mydata[8]=lpindex>>16;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	b2db      	uxtb	r3, r3
 800210a:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	b2db      	uxtb	r3, r3
 8002112:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	74bb      	strb	r3, [r7, #18]
  }
  mydata[11]=0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	74fb      	strb	r3, [r7, #19]
  mydata[12]=0x01;
 800211e:	2301      	movs	r3, #1
 8002120:	753b      	strb	r3, [r7, #20]
  mydata[13]=0x00;
 8002122:	2300      	movs	r3, #0
 8002124:	757b      	strb	r3, [r7, #21]
  mydata[14]=0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	75bb      	strb	r3, [r7, #22]
  mydata[15]=0x05;
 800212a:	2305      	movs	r3, #5
 800212c:	75fb      	strb	r3, [r7, #23]
  mydata[16]=0xDC;
 800212e:	23dc      	movs	r3, #220	; 0xdc
 8002130:	763b      	strb	r3, [r7, #24]
  data_lenMK6N = 17;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <txlpMK6N+0xc8>)
 8002134:	2211      	movs	r2, #17
 8002136:	601a      	str	r2, [r3, #0]
  setCommandMK6N(mydata, data_lenMK6N);
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <txlpMK6N+0xc8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29a      	uxth	r2, r3
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f9eb 	bl	8001520 <setCommandMK6N>
  	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <txlpMK6N+0xc8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29a      	uxth	r2, r3
 8002150:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002154:	4906      	ldr	r1, [pc, #24]	; (8002170 <txlpMK6N+0xcc>)
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <txlpMK6N+0xd0>)
 8002158:	f011 fe98 	bl	8013e8c <HAL_UART_Transmit>
}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20002fdc 	.word	0x20002fdc
 8002168:	200038e0 	.word	0x200038e0
 800216c:	20002968 	.word	0x20002968
 8002170:	20002644 	.word	0x20002644
 8002174:	20002770 	.word	0x20002770

08002178 <rxlpMK6N>:

void rxlpMK6N(char* outstr,char* datain, int len){
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	461a      	mov	r2, r3
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <rxlpMK6N+0x70>)
 800218c:	f019 f880 	bl	801b290 <memcpy>
  	data_lenMK6N=datasize(dataMK6N);
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <rxlpMK6N+0x70>)
 8002192:	f003 fb1d 	bl	80057d0 <datasize>
 8002196:	4602      	mov	r2, r0
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <rxlpMK6N+0x74>)
 800219a:	601a      	str	r2, [r3, #0]
  if(getRawDataMK6N(17)){
 800219c:	2011      	movs	r0, #17
 800219e:	f7ff f945 	bl	800142c <getRawDataMK6N>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <rxlpMK6N+0x68>
      if(decodelpdata())   {
 80021a8:	f7ff fe8c 	bl	8001ec4 <decodelpdata>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <rxlpMK6N+0x68>
    	  lp2JsonMK6N();
 80021b2:	f000 f81f 	bl	80021f4 <lp2JsonMK6N>
    	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e00a      	b.n	80021d2 <rxlpMK6N+0x5a>
    		  *outstr++=datastrMK6N[i];
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	60fa      	str	r2, [r7, #12]
 80021c2:	490b      	ldr	r1, [pc, #44]	; (80021f0 <rxlpMK6N+0x78>)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	440a      	add	r2, r1
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	701a      	strb	r2, [r3, #0]
    	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <rxlpMK6N+0x78>)
 80021d4:	f7fe ffe0 	bl	8001198 <datasizestrMK6N>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4293      	cmp	r3, r2
 80021de:	dbed      	blt.n	80021bc <rxlpMK6N+0x44>
    	  }
      }
  }
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200039c0 	.word	0x200039c0
 80021ec:	20002968 	.word	0x20002968
 80021f0:	20001fe8 	.word	0x20001fe8

080021f4 <lp2JsonMK6N>:

void lp2JsonMK6N(){
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	data_lenMK6N = 0;
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <lp2JsonMK6N+0x11c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 8002200:	f7fe ffae 	bl	8001160 <datastrclearMK6N>
	strcpy(datastrMK6N,"{\"mid\":");
 8002204:	4a43      	ldr	r2, [pc, #268]	; (8002314 <lp2JsonMK6N+0x120>)
 8002206:	4b44      	ldr	r3, [pc, #272]	; (8002318 <lp2JsonMK6N+0x124>)
 8002208:	cb03      	ldmia	r3!, {r0, r1}
 800220a:	6010      	str	r0, [r2, #0]
 800220c:	6051      	str	r1, [r2, #4]
	  strcat(datastrMK6N, meterSNMK6N);
 800220e:	4943      	ldr	r1, [pc, #268]	; (800231c <lp2JsonMK6N+0x128>)
 8002210:	4840      	ldr	r0, [pc, #256]	; (8002314 <lp2JsonMK6N+0x120>)
 8002212:	f019 fe01 	bl	801be18 <strcat>
	  strcat(datastrMK6N, ",\"pid\":\"LPMK6N\",");
 8002216:	483f      	ldr	r0, [pc, #252]	; (8002314 <lp2JsonMK6N+0x120>)
 8002218:	f7fd ffe4 	bl	80001e4 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <lp2JsonMK6N+0x120>)
 8002222:	4413      	add	r3, r2
 8002224:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <lp2JsonMK6N+0x12c>)
 8002226:	461d      	mov	r5, r3
 8002228:	4614      	mov	r4, r2
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	6028      	str	r0, [r5, #0]
 800222e:	6069      	str	r1, [r5, #4]
 8002230:	60aa      	str	r2, [r5, #8]
 8002232:	60eb      	str	r3, [r5, #12]
 8002234:	7823      	ldrb	r3, [r4, #0]
 8002236:	742b      	strb	r3, [r5, #16]
//  data_lenMK6N = setdatastr(",\"pid\":\"LPMK6N\",\"readdate\":",data_lenMK6N);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
	  strcat(datastrMK6N, "\"3P9B\":");
 8002238:	4836      	ldr	r0, [pc, #216]	; (8002314 <lp2JsonMK6N+0x120>)
 800223a:	f7fd ffd3 	bl	80001e4 <strlen>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <lp2JsonMK6N+0x120>)
 8002244:	4413      	add	r3, r2
 8002246:	4937      	ldr	r1, [pc, #220]	; (8002324 <lp2JsonMK6N+0x130>)
 8002248:	461a      	mov	r2, r3
 800224a:	460b      	mov	r3, r1
 800224c:	cb03      	ldmia	r3!, {r0, r1}
 800224e:	6010      	str	r0, [r2, #0]
 8002250:	6051      	str	r1, [r2, #4]

  	data2clearMK6N();
 8002252:	f7fe ffb9 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%ld,",lprecordMK6N);
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <lp2JsonMK6N+0x134>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4933      	ldr	r1, [pc, #204]	; (800232c <lp2JsonMK6N+0x138>)
 800225e:	4834      	ldr	r0, [pc, #208]	; (8002330 <lp2JsonMK6N+0x13c>)
 8002260:	f019 fdba 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 8002264:	4932      	ldr	r1, [pc, #200]	; (8002330 <lp2JsonMK6N+0x13c>)
 8002266:	482b      	ldr	r0, [pc, #172]	; (8002314 <lp2JsonMK6N+0x120>)
 8002268:	f019 fdd6 	bl	801be18 <strcat>
//  datastr+=",\"3P9B\":";
//  datastr+=String(lplastentry-1);
//  datastr+=",";
  for(int i=0;i<jmlchannelMK6N;i++){
 800226c:	2300      	movs	r3, #0
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	e043      	b.n	80022fa <lp2JsonMK6N+0x106>
	strcat(datastrMK6N, checkregLPMK6N(reglpinit1[i]));
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <lp2JsonMK6N+0x140>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcfc 	bl	8001c78 <checkregLPMK6N>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	4823      	ldr	r0, [pc, #140]	; (8002314 <lp2JsonMK6N+0x120>)
 8002286:	f019 fdc7 	bl	801be18 <strcat>
	strcat(datastrMK6N, ":");
 800228a:	4822      	ldr	r0, [pc, #136]	; (8002314 <lp2JsonMK6N+0x120>)
 800228c:	f7fd ffaa 	bl	80001e4 <strlen>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <lp2JsonMK6N+0x120>)
 8002296:	4413      	add	r3, r2
 8002298:	4927      	ldr	r1, [pc, #156]	; (8002338 <lp2JsonMK6N+0x144>)
 800229a:	461a      	mov	r2, r3
 800229c:	460b      	mov	r3, r1
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	8013      	strh	r3, [r2, #0]
    data2clearMK6N();
 80022a2:	f7fe ff91 	bl	80011c8 <data2clearMK6N>
    if(i<jmlchannelMK6N-1){
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <lp2JsonMK6N+0x148>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	da10      	bge.n	80022d4 <lp2JsonMK6N+0xe0>
      	sprintf(data2MK6N,"%.5f,",lpdata[i]);
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <lp2JsonMK6N+0x14c>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022be:	461a      	mov	r2, r3
 80022c0:	4623      	mov	r3, r4
 80022c2:	4920      	ldr	r1, [pc, #128]	; (8002344 <lp2JsonMK6N+0x150>)
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <lp2JsonMK6N+0x13c>)
 80022c6:	f019 fd87 	bl	801bdd8 <siprintf>
      	strcat(datastrMK6N, data2MK6N);
 80022ca:	4919      	ldr	r1, [pc, #100]	; (8002330 <lp2JsonMK6N+0x13c>)
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <lp2JsonMK6N+0x120>)
 80022ce:	f019 fda3 	bl	801be18 <strcat>
 80022d2:	e00f      	b.n	80022f4 <lp2JsonMK6N+0x100>
    }
    else {
      	sprintf(data2MK6N,"%.5f}",lpdata[i]);
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <lp2JsonMK6N+0x14c>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	4918      	ldr	r1, [pc, #96]	; (8002348 <lp2JsonMK6N+0x154>)
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <lp2JsonMK6N+0x13c>)
 80022e8:	f019 fd76 	bl	801bdd8 <siprintf>
      	strcat(datastrMK6N, data2MK6N);
 80022ec:	4910      	ldr	r1, [pc, #64]	; (8002330 <lp2JsonMK6N+0x13c>)
 80022ee:	4809      	ldr	r0, [pc, #36]	; (8002314 <lp2JsonMK6N+0x120>)
 80022f0:	f019 fd92 	bl	801be18 <strcat>
  for(int i=0;i<jmlchannelMK6N;i++){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <lp2JsonMK6N+0x148>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4293      	cmp	r3, r2
 8002304:	dbb5      	blt.n	8002272 <lp2JsonMK6N+0x7e>
    }
  }
//  SerialMonprintlnMK6N(datastrMK6N);
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bdb0      	pop	{r4, r5, r7, pc}
 800230e:	bf00      	nop
 8002310:	20002968 	.word	0x20002968
 8002314:	20001fe8 	.word	0x20001fe8
 8002318:	0801e014 	.word	0x0801e014
 800231c:	200003a0 	.word	0x200003a0
 8002320:	0801e048 	.word	0x0801e048
 8002324:	0801e05c 	.word	0x0801e05c
 8002328:	200038e0 	.word	0x200038e0
 800232c:	0801e064 	.word	0x0801e064
 8002330:	20002644 	.word	0x20002644
 8002334:	200030f0 	.word	0x200030f0
 8002338:	0801e034 	.word	0x0801e034
 800233c:	200036f8 	.word	0x200036f8
 8002340:	20003740 	.word	0x20003740
 8002344:	0801e038 	.word	0x0801e038
 8002348:	0801e040 	.word	0x0801e040

0800234c <txlpInit1MK6N>:
//      return 1;
    }
    return 0;
}

void txlpInit1MK6N(){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 8002352:	f7fe fec7 	bl	80010e4 <dataallclearMK6N>
  data2MK6N[0]=0x02;
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <txlpInit1MK6N+0x80>)
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
  data2MK6N[1]=0x4D;
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <txlpInit1MK6N+0x80>)
 800235e:	224d      	movs	r2, #77	; 0x4d
 8002360:	705a      	strb	r2, [r3, #1]
  data2MK6N[2]=0x00;
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <txlpInit1MK6N+0x80>)
 8002364:	2200      	movs	r2, #0
 8002366:	709a      	strb	r2, [r3, #2]
  data2MK6N[3]=0x00;
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <txlpInit1MK6N+0x80>)
 800236a:	2200      	movs	r2, #0
 800236c:	70da      	strb	r2, [r3, #3]
  data2MK6N[4]=0xFF;
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <txlpInit1MK6N+0x80>)
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	711a      	strb	r2, [r3, #4]
  data2MK6N[5]=0xF0;
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <txlpInit1MK6N+0x80>)
 8002376:	22f0      	movs	r2, #240	; 0xf0
 8002378:	715a      	strb	r2, [r3, #5]
    for(int j=0;j<sizeof(lpinit1);j++){
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e00a      	b.n	8002396 <txlpInit1MK6N+0x4a>
      data2MK6N[j+6]=lpinit1[j];
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3306      	adds	r3, #6
 8002384:	4912      	ldr	r1, [pc, #72]	; (80023d0 <txlpInit1MK6N+0x84>)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	440a      	add	r2, r1
 800238a:	7811      	ldrb	r1, [r2, #0]
 800238c:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <txlpInit1MK6N+0x80>)
 800238e:	54d1      	strb	r1, [r2, r3]
    for(int j=0;j<sizeof(lpinit1);j++){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b13      	cmp	r3, #19
 800239a:	d9f1      	bls.n	8002380 <txlpInit1MK6N+0x34>
    }
    data_lenMK6N=sizeof(lpinit1)+6;
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <txlpInit1MK6N+0x88>)
 800239e:	221a      	movs	r2, #26
 80023a0:	601a      	str	r2, [r3, #0]
    setCommandMK6N(data2MK6N, data_lenMK6N);
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <txlpInit1MK6N+0x88>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <txlpInit1MK6N+0x80>)
 80023ac:	f7ff f8b8 	bl	8001520 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <txlpInit1MK6N+0x88>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023ba:	4904      	ldr	r1, [pc, #16]	; (80023cc <txlpInit1MK6N+0x80>)
 80023bc:	4806      	ldr	r0, [pc, #24]	; (80023d8 <txlpInit1MK6N+0x8c>)
 80023be:	f011 fd65 	bl	8013e8c <HAL_UART_Transmit>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20002644 	.word	0x20002644
 80023d0:	20000090 	.word	0x20000090
 80023d4:	20002968 	.word	0x20002968
 80023d8:	20002770 	.word	0x20002770

080023dc <rxlpInit1MK6N>:

void rxlpInit1MK6N(char* datain, int len){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <rxlpInit1MK6N+0x44>)
 80023ee:	f018 ff4f 	bl	801b290 <memcpy>
	data_lenMK6N=0;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <rxlpInit1MK6N+0x48>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 80023f8:	4809      	ldr	r0, [pc, #36]	; (8002420 <rxlpInit1MK6N+0x44>)
 80023fa:	f003 f9e9 	bl	80057d0 <datasize>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <rxlpInit1MK6N+0x48>)
 8002402:	601a      	str	r2, [r3, #0]
    if(getRawDataMK6N(6)){
 8002404:	2006      	movs	r0, #6
 8002406:	f7ff f811 	bl	800142c <getRawDataMK6N>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <rxlpInit1MK6N+0x3a>
      decodelpinit1MK6N(dataMK6N);
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <rxlpInit1MK6N+0x44>)
 8002412:	f000 f809 	bl	8002428 <decodelpinit1MK6N>
    }
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200039c0 	.word	0x200039c0
 8002424:	20002968 	.word	0x20002968

08002428 <decodelpinit1MK6N>:

int decodelpinit1MK6N(unsigned char datalpinit[]){
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af04      	add	r7, sp, #16
 800242e:	6078      	str	r0, [r7, #4]
  dateTgl = datalpinit[0];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <decodelpinit1MK6N+0xc8>)
 8002436:	701a      	strb	r2, [r3, #0]
  dateBln = datalpinit[1];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	785a      	ldrb	r2, [r3, #1]
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <decodelpinit1MK6N+0xcc>)
 800243e:	701a      	strb	r2, [r3, #0]
  dateThn = datalpinit[2];
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	789a      	ldrb	r2, [r3, #2]
 8002444:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <decodelpinit1MK6N+0xd0>)
 8002446:	701a      	strb	r2, [r3, #0]
  dateJam = datalpinit[3];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	78da      	ldrb	r2, [r3, #3]
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <decodelpinit1MK6N+0xd4>)
 800244e:	701a      	strb	r2, [r3, #0]
  dateMnt = datalpinit[4];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791a      	ldrb	r2, [r3, #4]
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <decodelpinit1MK6N+0xd8>)
 8002456:	701a      	strb	r2, [r3, #0]
  dateDtk = datalpinit[5];
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	795a      	ldrb	r2, [r3, #5]
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <decodelpinit1MK6N+0xdc>)
 800245e:	701a      	strb	r2, [r3, #0]
  lpintervalMK6N = hex2ULong(dataMK6N,6);
 8002460:	2106      	movs	r1, #6
 8002462:	4829      	ldr	r0, [pc, #164]	; (8002508 <decodelpinit1MK6N+0xe0>)
 8002464:	f003 fb5e 	bl	8005b24 <hex2ULong>
 8002468:	4602      	mov	r2, r0
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <decodelpinit1MK6N+0xe4>)
 800246c:	601a      	str	r2, [r3, #0]
  lplastentryMK6N = hex2Long(dataMK6N,10);
 800246e:	210a      	movs	r1, #10
 8002470:	4825      	ldr	r0, [pc, #148]	; (8002508 <decodelpinit1MK6N+0xe0>)
 8002472:	f003 fb13 	bl	8005a9c <hex2Long>
 8002476:	4602      	mov	r2, r0
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <decodelpinit1MK6N+0xe8>)
 800247a:	601a      	str	r2, [r3, #0]
  lpmaxentryMK6N = hex2Long(dataMK6N,14);
 800247c:	210e      	movs	r1, #14
 800247e:	4822      	ldr	r0, [pc, #136]	; (8002508 <decodelpinit1MK6N+0xe0>)
 8002480:	f003 fb0c 	bl	8005a9c <hex2Long>
 8002484:	4602      	mov	r2, r0
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <decodelpinit1MK6N+0xec>)
 8002488:	601a      	str	r2, [r3, #0]
  jmlchannelMK6N = dataMK6N[data_lenMK6N-1];
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <decodelpinit1MK6N+0xf0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3b01      	subs	r3, #1
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <decodelpinit1MK6N+0xe0>)
 8002492:	5cd2      	ldrb	r2, [r2, r3]
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <decodelpinit1MK6N+0xf4>)
 8002496:	701a      	strb	r2, [r3, #0]
  printf("%d %d %d %d %d %d\r\n", dateTgl,dateBln,dateThn,dateJam,dateMnt,dateDtk);
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <decodelpinit1MK6N+0xc8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <decodelpinit1MK6N+0xcc>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461c      	mov	r4, r3
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <decodelpinit1MK6N+0xd0>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461d      	mov	r5, r3
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <decodelpinit1MK6N+0xd4>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <decodelpinit1MK6N+0xd8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <decodelpinit1MK6N+0xdc>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	9101      	str	r1, [sp, #4]
 80024be:	9200      	str	r2, [sp, #0]
 80024c0:	462b      	mov	r3, r5
 80024c2:	4622      	mov	r2, r4
 80024c4:	4601      	mov	r1, r0
 80024c6:	4816      	ldr	r0, [pc, #88]	; (8002520 <decodelpinit1MK6N+0xf8>)
 80024c8:	f019 fbfa 	bl	801bcc0 <iprintf>
  printf("%ld %ld %ld %d\r\n", lpintervalMK6N,lplastentryMK6N,lpmaxentryMK6N,jmlchannelMK6N);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <decodelpinit1MK6N+0xe4>)
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <decodelpinit1MK6N+0xe8>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <decodelpinit1MK6N+0xec>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <decodelpinit1MK6N+0xf4>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4603      	mov	r3, r0
 80024e0:	4810      	ldr	r0, [pc, #64]	; (8002524 <decodelpinit1MK6N+0xfc>)
 80024e2:	f019 fbed 	bl	801bcc0 <iprintf>
  return 1;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}
 80024f0:	20002f78 	.word	0x20002f78
 80024f4:	200038d4 	.word	0x200038d4
 80024f8:	200028b4 	.word	0x200028b4
 80024fc:	20003684 	.word	0x20003684
 8002500:	20003685 	.word	0x20003685
 8002504:	200037ec 	.word	0x200037ec
 8002508:	200039c0 	.word	0x200039c0
 800250c:	20003738 	.word	0x20003738
 8002510:	20002fdc 	.word	0x20002fdc
 8002514:	2000288c 	.word	0x2000288c
 8002518:	20002968 	.word	0x20002968
 800251c:	200036f8 	.word	0x200036f8
 8002520:	0801e06c 	.word	0x0801e06c
 8002524:	0801e080 	.word	0x0801e080

08002528 <txlpMK6NInit2>:
    }
	
  return 1;
}

void txlpMK6NInit2(){
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 800252e:	f7fe fdd9 	bl	80010e4 <dataallclearMK6N>
	int idxnow;
	data2MK6N[0]=0x02;
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
  data2MK6N[1]=0x4D;
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <txlpMK6NInit2+0xc0>)
 800253a:	224d      	movs	r2, #77	; 0x4d
 800253c:	705a      	strb	r2, [r3, #1]
  data2MK6N[2]=0x00;
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002540:	2200      	movs	r2, #0
 8002542:	709a      	strb	r2, [r3, #2]
  data2MK6N[3]=0x00;
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002546:	2200      	movs	r2, #0
 8002548:	70da      	strb	r2, [r3, #3]
  data2MK6N[4]=0xFF;
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <txlpMK6NInit2+0xc0>)
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	711a      	strb	r2, [r3, #4]
  data2MK6N[5]=0xF0;
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002552:	22f0      	movs	r2, #240	; 0xf0
 8002554:	715a      	strb	r2, [r3, #5]
  idxnow = 6;
 8002556:	2306      	movs	r3, #6
 8002558:	60fb      	str	r3, [r7, #12]
  for(int i=0;i<8;i++){
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	e029      	b.n	80025b4 <txlpMK6NInit2+0x8c>
    for(int j=0;j<sizeof(lpinit2);j++){
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	e020      	b.n	80025a8 <txlpMK6NInit2+0x80>
      data2MK6N[idxnow]=lpinit2[j];
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <txlpMK6NInit2+0xc4>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	7819      	ldrb	r1, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	460a      	mov	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
      if(j==3) data2MK6N[idxnow]=lpinit2[j] | i;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d10e      	bne.n	800259c <txlpMK6NInit2+0x74>
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <txlpMK6NInit2+0xc4>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b25a      	sxtb	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	b25b      	sxtb	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b25b      	sxtb	r3, r3
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <txlpMK6NInit2+0xc0>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	460a      	mov	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
	  idxnow++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
    for(int j=0;j<sizeof(lpinit2);j++){
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3301      	adds	r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d9db      	bls.n	8002566 <txlpMK6NInit2+0x3e>
  for(int i=0;i<8;i++){
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	ddd2      	ble.n	8002560 <txlpMK6NInit2+0x38>
    }
  }
    data_lenMK6N=idxnow;
 80025ba:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <txlpMK6NInit2+0xc8>)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6013      	str	r3, [r2, #0]
    setCommandMK6N(data2MK6N, data_lenMK6N);
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <txlpMK6NInit2+0xc8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <txlpMK6NInit2+0xc0>)
 80025ca:	f7fe ffa9 	bl	8001520 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <txlpMK6NInit2+0xc8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <txlpMK6NInit2+0xc0>)
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <txlpMK6NInit2+0xcc>)
 80025dc:	f011 fc56 	bl	8013e8c <HAL_UART_Transmit>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20002644 	.word	0x20002644
 80025ec:	200000a4 	.word	0x200000a4
 80025f0:	20002968 	.word	0x20002968
 80025f4:	20002770 	.word	0x20002770

080025f8 <rxlpMK6NInit2>:

void rxlpMK6NInit2(char* datain, int len){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4814      	ldr	r0, [pc, #80]	; (800265c <rxlpMK6NInit2+0x64>)
 800260a:	f018 fe41 	bl	801b290 <memcpy>
	data_lenMK6N=0;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <rxlpMK6NInit2+0x68>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 8002614:	4811      	ldr	r0, [pc, #68]	; (800265c <rxlpMK6NInit2+0x64>)
 8002616:	f003 f8db 	bl	80057d0 <datasize>
 800261a:	4602      	mov	r2, r0
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <rxlpMK6NInit2+0x68>)
 800261e:	601a      	str	r2, [r3, #0]
//    printData(dataMK6N,data_lenMK6N);
    if(getRawDataMK6N(6)){
 8002620:	2006      	movs	r0, #6
 8002622:	f7fe ff03 	bl	800142c <getRawDataMK6N>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <rxlpMK6NInit2+0x5a>
//		printData(dataMK6N,data_lenMK6N);
    	for(int i=0;i<8;i++){
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e00c      	b.n	800264c <rxlpMK6NInit2+0x54>
    		reglpinit1[i]=dataMK6N[4*i+3];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	3303      	adds	r3, #3
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <rxlpMK6NInit2+0x64>)
 800263a:	5cd1      	ldrb	r1, [r2, r3]
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <rxlpMK6NInit2+0x6c>)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	460a      	mov	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
    	for(int i=0;i<8;i++){
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b07      	cmp	r3, #7
 8002650:	ddef      	ble.n	8002632 <rxlpMK6NInit2+0x3a>
//    		printf("0x%X ",reglpinit1[i]);
    	}
//    	printf("\r\n");
    }
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200039c0 	.word	0x200039c0
 8002660:	20002968 	.word	0x20002968
 8002664:	200030f0 	.word	0x200030f0

08002668 <getJumlahChannelMK6N>:
//  for(int i=0;i<jmlchannelMK6N;i++){
//      printf("0x%X %.7f\r\n",lptype[i],lpscaleMK6N[i]);
//  }
  return 1;
}
int getJumlahChannelMK6N(){
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
	return jmlchannelMK6N;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <getJumlahChannelMK6N+0x14>)
 800266e:	781b      	ldrb	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200036f8 	.word	0x200036f8

08002680 <txlpMK6NInit2a>:
void txlpMK6NInit2a(int i){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  int idxnow;
  data[0]=0x02;
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <txlpMK6NInit2a+0xb0>)
 800268a:	2202      	movs	r2, #2
 800268c:	701a      	strb	r2, [r3, #0]
  data[1]=0x4D;
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <txlpMK6NInit2a+0xb0>)
 8002690:	224d      	movs	r2, #77	; 0x4d
 8002692:	705a      	strb	r2, [r3, #1]
  data[2]=0x00;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <txlpMK6NInit2a+0xb0>)
 8002696:	2200      	movs	r2, #0
 8002698:	709a      	strb	r2, [r3, #2]
  data[3]=0x00;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <txlpMK6NInit2a+0xb0>)
 800269c:	2200      	movs	r2, #0
 800269e:	70da      	strb	r2, [r3, #3]
  data[4]=0xFF;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <txlpMK6NInit2a+0xb0>)
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	711a      	strb	r2, [r3, #4]
  data[5]=0xF0;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <txlpMK6NInit2a+0xb0>)
 80026a8:	22f0      	movs	r2, #240	; 0xf0
 80026aa:	715a      	strb	r2, [r3, #5]
    for(int j=0;j<sizeof(lpinit2a);j++){
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e023      	b.n	80026fa <txlpMK6NInit2a+0x7a>
      idxnow = j+6;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3306      	adds	r3, #6
 80026b6:	60bb      	str	r3, [r7, #8]
      data[idxnow]=lpinit2a[j];
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <txlpMK6NInit2a+0xb4>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	7819      	ldrb	r1, [r3, #0]
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <txlpMK6NInit2a+0xb0>)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	460a      	mov	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
      if(j==3 || j==7){
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d002      	beq.n	80026d6 <txlpMK6NInit2a+0x56>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b07      	cmp	r3, #7
 80026d4:	d10e      	bne.n	80026f4 <txlpMK6NInit2a+0x74>
        data[idxnow]=lpinit2a[j] | i;
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <txlpMK6NInit2a+0xb4>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b25a      	sxtb	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b25b      	sxtb	r3, r3
 80026e8:	b2d9      	uxtb	r1, r3
 80026ea:	4a11      	ldr	r2, [pc, #68]	; (8002730 <txlpMK6NInit2a+0xb0>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4413      	add	r3, r2
 80026f0:	460a      	mov	r2, r1
 80026f2:	701a      	strb	r2, [r3, #0]
    for(int j=0;j<sizeof(lpinit2a);j++){
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b07      	cmp	r3, #7
 80026fe:	d9d8      	bls.n	80026b2 <txlpMK6NInit2a+0x32>
      }
    }
    data_lenMK6N=sizeof(lpinit2a)+6;
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <txlpMK6NInit2a+0xb8>)
 8002702:	220e      	movs	r2, #14
 8002704:	601a      	str	r2, [r3, #0]
    setCommandMK6N(data, data_lenMK6N);
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <txlpMK6NInit2a+0xb8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	4808      	ldr	r0, [pc, #32]	; (8002730 <txlpMK6NInit2a+0xb0>)
 8002710:	f7fe ff06 	bl	8001520 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <txlpMK6NInit2a+0xb8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800271e:	4907      	ldr	r1, [pc, #28]	; (800273c <txlpMK6NInit2a+0xbc>)
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <txlpMK6NInit2a+0xc0>)
 8002722:	f011 fbb3 	bl	8013e8c <HAL_UART_Transmit>
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20003670 	.word	0x20003670
 8002734:	200000a8 	.word	0x200000a8
 8002738:	20002968 	.word	0x20002968
 800273c:	20002644 	.word	0x20002644
 8002740:	20002770 	.word	0x20002770

08002744 <rxlpMK6NInit2a>:

void rxlpMK6NInit2a(char* datain, int len, int i){
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4814      	ldr	r0, [pc, #80]	; (80027a8 <rxlpMK6NInit2a+0x64>)
 8002758:	f018 fd9a 	bl	801b290 <memcpy>
	data_lenMK6N=datasize(dataMK6N);
 800275c:	4812      	ldr	r0, [pc, #72]	; (80027a8 <rxlpMK6NInit2a+0x64>)
 800275e:	f003 f837 	bl	80057d0 <datasize>
 8002762:	4602      	mov	r2, r0
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <rxlpMK6NInit2a+0x68>)
 8002766:	601a      	str	r2, [r3, #0]
    if(getRawDataMK6N(6)){
 8002768:	2006      	movs	r0, #6
 800276a:	f7fe fe5f 	bl	800142c <getRawDataMK6N>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d014      	beq.n	800279e <rxlpMK6NInit2a+0x5a>
      hex2Float(dataMK6N,0);
 8002774:	2100      	movs	r1, #0
 8002776:	480c      	ldr	r0, [pc, #48]	; (80027a8 <rxlpMK6NInit2a+0x64>)
 8002778:	f003 f94a 	bl	8005a10 <hex2Float>
      lpscaleMK6N[i]=myFloat.f;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <rxlpMK6NInit2a+0x6c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <rxlpMK6NInit2a+0x70>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	601a      	str	r2, [r3, #0]
      lptype[i]=dataMK6N[data_lenMK6N-1];
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <rxlpMK6NInit2a+0x68>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <rxlpMK6NInit2a+0x64>)
 8002792:	5cd1      	ldrb	r1, [r2, r3]
 8002794:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <rxlpMK6NInit2a+0x74>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	460a      	mov	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
    }
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200039c0 	.word	0x200039c0
 80027ac:	20002968 	.word	0x20002968
 80027b0:	20003f64 	.word	0x20003f64
 80027b4:	200037b0 	.word	0x200037b0
 80027b8:	20002f7c 	.word	0x20002f7c

080027bc <checkregEoBRate9>:
    		return "\"3P68\""; //"Total ABS VAh";
            break;
  }
}

const char * checkregEoBRate9(uint8_t reg){
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b97      	cmp	r3, #151	; 0x97
 80027ca:	d01b      	beq.n	8002804 <checkregEoBRate9+0x48>
 80027cc:	2b97      	cmp	r3, #151	; 0x97
 80027ce:	dc0b      	bgt.n	80027e8 <checkregEoBRate9+0x2c>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d023      	beq.n	800281c <checkregEoBRate9+0x60>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	dc02      	bgt.n	80027de <checkregEoBRate9+0x22>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01d      	beq.n	8002818 <checkregEoBRate9+0x5c>
 80027dc:	e022      	b.n	8002824 <checkregEoBRate9+0x68>
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d01e      	beq.n	8002820 <checkregEoBRate9+0x64>
 80027e2:	2b93      	cmp	r3, #147	; 0x93
 80027e4:	d00c      	beq.n	8002800 <checkregEoBRate9+0x44>
 80027e6:	e01d      	b.n	8002824 <checkregEoBRate9+0x68>
 80027e8:	2b9f      	cmp	r3, #159	; 0x9f
 80027ea:	d00f      	beq.n	800280c <checkregEoBRate9+0x50>
 80027ec:	2b9f      	cmp	r3, #159	; 0x9f
 80027ee:	dc02      	bgt.n	80027f6 <checkregEoBRate9+0x3a>
 80027f0:	2b9b      	cmp	r3, #155	; 0x9b
 80027f2:	d009      	beq.n	8002808 <checkregEoBRate9+0x4c>
 80027f4:	e016      	b.n	8002824 <checkregEoBRate9+0x68>
 80027f6:	2be3      	cmp	r3, #227	; 0xe3
 80027f8:	d00a      	beq.n	8002810 <checkregEoBRate9+0x54>
 80027fa:	2be7      	cmp	r3, #231	; 0xe7
 80027fc:	d00a      	beq.n	8002814 <checkregEoBRate9+0x58>
 80027fe:	e011      	b.n	8002824 <checkregEoBRate9+0x68>
    case 0x93:
            return "\"3P76\""; //"Total Import Wh";
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <checkregEoBRate9+0x78>)
 8002802:	e010      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x97:
            return "\"3P70\""; //"Total Export Wh";
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <checkregEoBRate9+0x7c>)
 8002806:	e00e      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x9B:
            return "\"3P88\""; //"Total Import varh";
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <checkregEoBRate9+0x80>)
 800280a:	e00c      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x9F:
            return "\"3P82\""; //"Total Export varh";
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <checkregEoBRate9+0x84>)
 800280e:	e00a      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0xE3:
            return "\"3P0A\""; //"Total Import VAh";
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <checkregEoBRate9+0x88>)
 8002812:	e008      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0xE7:
            return "\"3P94\""; //"Total Export VAh";
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <checkregEoBRate9+0x8c>)
 8002816:	e006      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x00:
            return "\"3P6A\""; //"Total ABS Wh";
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <checkregEoBRate9+0x90>)
 800281a:	e004      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x01:
            return "\"3PCA\""; //"Total ABS varh";
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <checkregEoBRate9+0x94>)
 800281e:	e002      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    case 0x02:
            return "\"3P2B\""; //"Total ABS VAh";
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <checkregEoBRate9+0x98>)
 8002822:	e000      	b.n	8002826 <checkregEoBRate9+0x6a>
            break;
    default:
    		return "\"3P2B\""; //"Total ABS VAh";
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <checkregEoBRate9+0x98>)
            break;
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	0801e0e0 	.word	0x0801e0e0
 8002838:	0801e0e8 	.word	0x0801e0e8
 800283c:	0801e0f0 	.word	0x0801e0f0
 8002840:	0801e0f8 	.word	0x0801e0f8
 8002844:	0801e100 	.word	0x0801e100
 8002848:	0801e108 	.word	0x0801e108
 800284c:	0801e110 	.word	0x0801e110
 8002850:	0801e118 	.word	0x0801e118
 8002854:	0801e120 	.word	0x0801e120

08002858 <checkregEoBRate1>:

const char * checkregEoBRate1(uint8_t reg){
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2b97      	cmp	r3, #151	; 0x97
 8002866:	d01b      	beq.n	80028a0 <checkregEoBRate1+0x48>
 8002868:	2b97      	cmp	r3, #151	; 0x97
 800286a:	dc0b      	bgt.n	8002884 <checkregEoBRate1+0x2c>
 800286c:	2b01      	cmp	r3, #1
 800286e:	d023      	beq.n	80028b8 <checkregEoBRate1+0x60>
 8002870:	2b01      	cmp	r3, #1
 8002872:	dc02      	bgt.n	800287a <checkregEoBRate1+0x22>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01d      	beq.n	80028b4 <checkregEoBRate1+0x5c>
 8002878:	e022      	b.n	80028c0 <checkregEoBRate1+0x68>
 800287a:	2b02      	cmp	r3, #2
 800287c:	d01e      	beq.n	80028bc <checkregEoBRate1+0x64>
 800287e:	2b93      	cmp	r3, #147	; 0x93
 8002880:	d00c      	beq.n	800289c <checkregEoBRate1+0x44>
 8002882:	e01d      	b.n	80028c0 <checkregEoBRate1+0x68>
 8002884:	2b9f      	cmp	r3, #159	; 0x9f
 8002886:	d00f      	beq.n	80028a8 <checkregEoBRate1+0x50>
 8002888:	2b9f      	cmp	r3, #159	; 0x9f
 800288a:	dc02      	bgt.n	8002892 <checkregEoBRate1+0x3a>
 800288c:	2b9b      	cmp	r3, #155	; 0x9b
 800288e:	d009      	beq.n	80028a4 <checkregEoBRate1+0x4c>
 8002890:	e016      	b.n	80028c0 <checkregEoBRate1+0x68>
 8002892:	2be3      	cmp	r3, #227	; 0xe3
 8002894:	d00a      	beq.n	80028ac <checkregEoBRate1+0x54>
 8002896:	2be7      	cmp	r3, #231	; 0xe7
 8002898:	d00a      	beq.n	80028b0 <checkregEoBRate1+0x58>
 800289a:	e011      	b.n	80028c0 <checkregEoBRate1+0x68>
    case 0x93:
            return "\"3P77\""; //"Total Import Wh";
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <checkregEoBRate1+0x78>)
 800289e:	e010      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x97:
            return "\"3P71\""; //"Total Export Wh";
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <checkregEoBRate1+0x7c>)
 80028a2:	e00e      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x9B:
            return "\"3P89\""; //"Total Import varh";
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <checkregEoBRate1+0x80>)
 80028a6:	e00c      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x9F:
            return "\"3P83\""; //"Total Export varh";
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <checkregEoBRate1+0x84>)
 80028aa:	e00a      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0xE3:
            return "\"3P1A\""; //"Total Import VAh";
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <checkregEoBRate1+0x88>)
 80028ae:	e008      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0xE7:
            return "\"3P95\""; //"Total Export VAh";
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <checkregEoBRate1+0x8c>)
 80028b2:	e006      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x00:
            return "\"3P7A\""; //"Total ABS Wh";
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <checkregEoBRate1+0x90>)
 80028b6:	e004      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x01:
            return "\"3PDA\""; //"Total ABS varh";
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <checkregEoBRate1+0x94>)
 80028ba:	e002      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    case 0x02:
            return "\"3P3B\""; //"Total ABS VAh";
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <checkregEoBRate1+0x98>)
 80028be:	e000      	b.n	80028c2 <checkregEoBRate1+0x6a>
            break;
    default:
    		return "\"3P3B\""; //"Total ABS VAh";
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <checkregEoBRate1+0x98>)
            break;
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	0801e128 	.word	0x0801e128
 80028d4:	0801e130 	.word	0x0801e130
 80028d8:	0801e138 	.word	0x0801e138
 80028dc:	0801e140 	.word	0x0801e140
 80028e0:	0801e148 	.word	0x0801e148
 80028e4:	0801e150 	.word	0x0801e150
 80028e8:	0801e158 	.word	0x0801e158
 80028ec:	0801e160 	.word	0x0801e160
 80028f0:	0801e168 	.word	0x0801e168

080028f4 <checkregEoBRate2>:

const char * checkregEoBRate2(uint8_t reg){
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b97      	cmp	r3, #151	; 0x97
 8002902:	d01b      	beq.n	800293c <checkregEoBRate2+0x48>
 8002904:	2b97      	cmp	r3, #151	; 0x97
 8002906:	dc0b      	bgt.n	8002920 <checkregEoBRate2+0x2c>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d023      	beq.n	8002954 <checkregEoBRate2+0x60>
 800290c:	2b01      	cmp	r3, #1
 800290e:	dc02      	bgt.n	8002916 <checkregEoBRate2+0x22>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01d      	beq.n	8002950 <checkregEoBRate2+0x5c>
 8002914:	e022      	b.n	800295c <checkregEoBRate2+0x68>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d01e      	beq.n	8002958 <checkregEoBRate2+0x64>
 800291a:	2b93      	cmp	r3, #147	; 0x93
 800291c:	d00c      	beq.n	8002938 <checkregEoBRate2+0x44>
 800291e:	e01d      	b.n	800295c <checkregEoBRate2+0x68>
 8002920:	2b9f      	cmp	r3, #159	; 0x9f
 8002922:	d00f      	beq.n	8002944 <checkregEoBRate2+0x50>
 8002924:	2b9f      	cmp	r3, #159	; 0x9f
 8002926:	dc02      	bgt.n	800292e <checkregEoBRate2+0x3a>
 8002928:	2b9b      	cmp	r3, #155	; 0x9b
 800292a:	d009      	beq.n	8002940 <checkregEoBRate2+0x4c>
 800292c:	e016      	b.n	800295c <checkregEoBRate2+0x68>
 800292e:	2be3      	cmp	r3, #227	; 0xe3
 8002930:	d00a      	beq.n	8002948 <checkregEoBRate2+0x54>
 8002932:	2be7      	cmp	r3, #231	; 0xe7
 8002934:	d00a      	beq.n	800294c <checkregEoBRate2+0x58>
 8002936:	e011      	b.n	800295c <checkregEoBRate2+0x68>
    case 0x93:
            return "\"3P78\""; //"Total Import Wh";
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <checkregEoBRate2+0x78>)
 800293a:	e010      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x97:
            return "\"3P72\""; //"Total Export Wh";
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <checkregEoBRate2+0x7c>)
 800293e:	e00e      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x9B:
            return "\"3P90\""; //"Total Import varh";
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <checkregEoBRate2+0x80>)
 8002942:	e00c      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x9F:
            return "\"3P84\""; //"Total Export varh";
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <checkregEoBRate2+0x84>)
 8002946:	e00a      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0xE3:
            return "\"3P2A\""; //"Total Import VAh";
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <checkregEoBRate2+0x88>)
 800294a:	e008      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0xE7:
            return "\"3P96\""; //"Total Export VAh";
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <checkregEoBRate2+0x8c>)
 800294e:	e006      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x00:
            return "\"3P8A\""; //"Total ABS Wh";
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <checkregEoBRate2+0x90>)
 8002952:	e004      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x01:
            return "\"3PEA\""; //"Total ABS varh";
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <checkregEoBRate2+0x94>)
 8002956:	e002      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    case 0x02:
            return "\"3P4B\""; //"Total ABS VAh";
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <checkregEoBRate2+0x98>)
 800295a:	e000      	b.n	800295e <checkregEoBRate2+0x6a>
            break;
    default:
    		return "\"3P4B\""; //"Total ABS VAh";
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <checkregEoBRate2+0x98>)
            break;
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	0801e170 	.word	0x0801e170
 8002970:	0801e178 	.word	0x0801e178
 8002974:	0801e180 	.word	0x0801e180
 8002978:	0801e188 	.word	0x0801e188
 800297c:	0801e190 	.word	0x0801e190
 8002980:	0801e198 	.word	0x0801e198
 8002984:	0801e1a0 	.word	0x0801e1a0
 8002988:	0801e1a8 	.word	0x0801e1a8
 800298c:	0801e1b0 	.word	0x0801e1b0

08002990 <checkregEoBRate3>:

const char * checkregEoBRate3(uint8_t reg){
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b97      	cmp	r3, #151	; 0x97
 800299e:	d01b      	beq.n	80029d8 <checkregEoBRate3+0x48>
 80029a0:	2b97      	cmp	r3, #151	; 0x97
 80029a2:	dc0b      	bgt.n	80029bc <checkregEoBRate3+0x2c>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d023      	beq.n	80029f0 <checkregEoBRate3+0x60>
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	dc02      	bgt.n	80029b2 <checkregEoBRate3+0x22>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01d      	beq.n	80029ec <checkregEoBRate3+0x5c>
 80029b0:	e022      	b.n	80029f8 <checkregEoBRate3+0x68>
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d01e      	beq.n	80029f4 <checkregEoBRate3+0x64>
 80029b6:	2b93      	cmp	r3, #147	; 0x93
 80029b8:	d00c      	beq.n	80029d4 <checkregEoBRate3+0x44>
 80029ba:	e01d      	b.n	80029f8 <checkregEoBRate3+0x68>
 80029bc:	2b9f      	cmp	r3, #159	; 0x9f
 80029be:	d00f      	beq.n	80029e0 <checkregEoBRate3+0x50>
 80029c0:	2b9f      	cmp	r3, #159	; 0x9f
 80029c2:	dc02      	bgt.n	80029ca <checkregEoBRate3+0x3a>
 80029c4:	2b9b      	cmp	r3, #155	; 0x9b
 80029c6:	d009      	beq.n	80029dc <checkregEoBRate3+0x4c>
 80029c8:	e016      	b.n	80029f8 <checkregEoBRate3+0x68>
 80029ca:	2be3      	cmp	r3, #227	; 0xe3
 80029cc:	d00a      	beq.n	80029e4 <checkregEoBRate3+0x54>
 80029ce:	2be7      	cmp	r3, #231	; 0xe7
 80029d0:	d00a      	beq.n	80029e8 <checkregEoBRate3+0x58>
 80029d2:	e011      	b.n	80029f8 <checkregEoBRate3+0x68>
    case 0x93:
            return "\"3P79\""; //"Total Import Wh";
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <checkregEoBRate3+0x78>)
 80029d6:	e010      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x97:
            return "\"3P73\""; //"Total Export Wh";
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <checkregEoBRate3+0x7c>)
 80029da:	e00e      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x9B:
            return "\"3P91\""; //"Total Import varh";
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <checkregEoBRate3+0x80>)
 80029de:	e00c      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x9F:
            return "\"3P85\""; //"Total Export varh";
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <checkregEoBRate3+0x84>)
 80029e2:	e00a      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0xE3:
            return "\"3P3A\""; //"Total Import VAh";
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <checkregEoBRate3+0x88>)
 80029e6:	e008      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0xE7:
            return "\"3P97\""; //"Total Export VAh";
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <checkregEoBRate3+0x8c>)
 80029ea:	e006      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x00:
            return "\"3P9A\""; //"Total ABS Wh";
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <checkregEoBRate3+0x90>)
 80029ee:	e004      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x01:
            return "\"3PFA\""; //"Total ABS varh";
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <checkregEoBRate3+0x94>)
 80029f2:	e002      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    case 0x02:
            return "\"3P5B\""; //"Total ABS VAh";
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <checkregEoBRate3+0x98>)
 80029f6:	e000      	b.n	80029fa <checkregEoBRate3+0x6a>
            break;
    default:
    		return "\"3P5B\""; //"Total ABS VAh";
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <checkregEoBRate3+0x98>)
            break;
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	0801e1b8 	.word	0x0801e1b8
 8002a0c:	0801e1c0 	.word	0x0801e1c0
 8002a10:	0801e1c8 	.word	0x0801e1c8
 8002a14:	0801e1d0 	.word	0x0801e1d0
 8002a18:	0801e1d8 	.word	0x0801e1d8
 8002a1c:	0801e1e0 	.word	0x0801e1e0
 8002a20:	0801e1e8 	.word	0x0801e1e8
 8002a24:	0801e1f0 	.word	0x0801e1f0
 8002a28:	0801e1f8 	.word	0x0801e1f8

08002a2c <checkregEoBRate4>:

const char * checkregEoBRate4(uint8_t reg){
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b97      	cmp	r3, #151	; 0x97
 8002a3a:	d01b      	beq.n	8002a74 <checkregEoBRate4+0x48>
 8002a3c:	2b97      	cmp	r3, #151	; 0x97
 8002a3e:	dc0b      	bgt.n	8002a58 <checkregEoBRate4+0x2c>
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d023      	beq.n	8002a8c <checkregEoBRate4+0x60>
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	dc02      	bgt.n	8002a4e <checkregEoBRate4+0x22>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01d      	beq.n	8002a88 <checkregEoBRate4+0x5c>
 8002a4c:	e022      	b.n	8002a94 <checkregEoBRate4+0x68>
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d01e      	beq.n	8002a90 <checkregEoBRate4+0x64>
 8002a52:	2b93      	cmp	r3, #147	; 0x93
 8002a54:	d00c      	beq.n	8002a70 <checkregEoBRate4+0x44>
 8002a56:	e01d      	b.n	8002a94 <checkregEoBRate4+0x68>
 8002a58:	2b9f      	cmp	r3, #159	; 0x9f
 8002a5a:	d00f      	beq.n	8002a7c <checkregEoBRate4+0x50>
 8002a5c:	2b9f      	cmp	r3, #159	; 0x9f
 8002a5e:	dc02      	bgt.n	8002a66 <checkregEoBRate4+0x3a>
 8002a60:	2b9b      	cmp	r3, #155	; 0x9b
 8002a62:	d009      	beq.n	8002a78 <checkregEoBRate4+0x4c>
 8002a64:	e016      	b.n	8002a94 <checkregEoBRate4+0x68>
 8002a66:	2be3      	cmp	r3, #227	; 0xe3
 8002a68:	d00a      	beq.n	8002a80 <checkregEoBRate4+0x54>
 8002a6a:	2be7      	cmp	r3, #231	; 0xe7
 8002a6c:	d00a      	beq.n	8002a84 <checkregEoBRate4+0x58>
 8002a6e:	e011      	b.n	8002a94 <checkregEoBRate4+0x68>
    case 0x93:
            return "\"3P80\""; //"Total Import Wh";
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <checkregEoBRate4+0x78>)
 8002a72:	e010      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x97:
            return "\"3P74\""; //"Total Export Wh";
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <checkregEoBRate4+0x7c>)
 8002a76:	e00e      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x9B:
            return "\"3P92\""; //"Total Import varh";
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <checkregEoBRate4+0x80>)
 8002a7a:	e00c      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x9F:
            return "\"3P86\""; //"Total Export varh";
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <checkregEoBRate4+0x84>)
 8002a7e:	e00a      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0xE3:
            return "\"3P4A\""; //"Total Import VAh";
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <checkregEoBRate4+0x88>)
 8002a82:	e008      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0xE7:
            return "\"3P98\""; //"Total Export VAh";
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <checkregEoBRate4+0x8c>)
 8002a86:	e006      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x00:
            return "\"3PAA\""; //"Total ABS Wh";
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <checkregEoBRate4+0x90>)
 8002a8a:	e004      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x01:
            return "\"3P0B\""; //"Total ABS varh";
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <checkregEoBRate4+0x94>)
 8002a8e:	e002      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    case 0x02:
            return "\"3P6B\""; //"Total ABS VAh";
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <checkregEoBRate4+0x98>)
 8002a92:	e000      	b.n	8002a96 <checkregEoBRate4+0x6a>
            break;
    default:
    		return "\"3P6B\""; //"Total ABS VAh";
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <checkregEoBRate4+0x98>)
            break;
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	0801e200 	.word	0x0801e200
 8002aa8:	0801e208 	.word	0x0801e208
 8002aac:	0801e210 	.word	0x0801e210
 8002ab0:	0801e218 	.word	0x0801e218
 8002ab4:	0801e220 	.word	0x0801e220
 8002ab8:	0801e228 	.word	0x0801e228
 8002abc:	0801e230 	.word	0x0801e230
 8002ac0:	0801e238 	.word	0x0801e238
 8002ac4:	0801e240 	.word	0x0801e240

08002ac8 <checkregEoBRate5>:

const char * checkregEoBRate5(uint8_t reg){
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b97      	cmp	r3, #151	; 0x97
 8002ad6:	d01b      	beq.n	8002b10 <checkregEoBRate5+0x48>
 8002ad8:	2b97      	cmp	r3, #151	; 0x97
 8002ada:	dc0b      	bgt.n	8002af4 <checkregEoBRate5+0x2c>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d023      	beq.n	8002b28 <checkregEoBRate5+0x60>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	dc02      	bgt.n	8002aea <checkregEoBRate5+0x22>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01d      	beq.n	8002b24 <checkregEoBRate5+0x5c>
 8002ae8:	e022      	b.n	8002b30 <checkregEoBRate5+0x68>
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d01e      	beq.n	8002b2c <checkregEoBRate5+0x64>
 8002aee:	2b93      	cmp	r3, #147	; 0x93
 8002af0:	d00c      	beq.n	8002b0c <checkregEoBRate5+0x44>
 8002af2:	e01d      	b.n	8002b30 <checkregEoBRate5+0x68>
 8002af4:	2b9f      	cmp	r3, #159	; 0x9f
 8002af6:	d00f      	beq.n	8002b18 <checkregEoBRate5+0x50>
 8002af8:	2b9f      	cmp	r3, #159	; 0x9f
 8002afa:	dc02      	bgt.n	8002b02 <checkregEoBRate5+0x3a>
 8002afc:	2b9b      	cmp	r3, #155	; 0x9b
 8002afe:	d009      	beq.n	8002b14 <checkregEoBRate5+0x4c>
 8002b00:	e016      	b.n	8002b30 <checkregEoBRate5+0x68>
 8002b02:	2be3      	cmp	r3, #227	; 0xe3
 8002b04:	d00a      	beq.n	8002b1c <checkregEoBRate5+0x54>
 8002b06:	2be7      	cmp	r3, #231	; 0xe7
 8002b08:	d00a      	beq.n	8002b20 <checkregEoBRate5+0x58>
 8002b0a:	e011      	b.n	8002b30 <checkregEoBRate5+0x68>
    case 0x93:
            return "\"3P85\""; //"Total Import Wh";
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <checkregEoBRate5+0x78>)
 8002b0e:	e010      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x97:
            return "\"3P75\""; //"Total Export Wh";
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <checkregEoBRate5+0x7c>)
 8002b12:	e00e      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x9B:
            return "\"3P93\""; //"Total Import varh";
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <checkregEoBRate5+0x80>)
 8002b16:	e00c      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x9F:
            return "\"3P87\""; //"Total Export varh";
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <checkregEoBRate5+0x84>)
 8002b1a:	e00a      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0xE3:
            return "\"3P5A\""; //"Total Import VAh";
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <checkregEoBRate5+0x88>)
 8002b1e:	e008      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0xE7:
            return "\"3P99\""; //"Total Export VAh";
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <checkregEoBRate5+0x8c>)
 8002b22:	e006      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x00:
            return "\"3PBA\""; //"Total ABS Wh";
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <checkregEoBRate5+0x90>)
 8002b26:	e004      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x01:
            return "\"3P1B\""; //"Total ABS varh";
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <checkregEoBRate5+0x94>)
 8002b2a:	e002      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    case 0x02:
            return "\"3P7B\""; //"Total ABS VAh";
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <checkregEoBRate5+0x98>)
 8002b2e:	e000      	b.n	8002b32 <checkregEoBRate5+0x6a>
            break;
    default:
    		return "\"3P7B\""; //"Total ABS VAh";
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <checkregEoBRate5+0x98>)
            break;
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	0801e1d0 	.word	0x0801e1d0
 8002b44:	0801e248 	.word	0x0801e248
 8002b48:	0801e250 	.word	0x0801e250
 8002b4c:	0801e258 	.word	0x0801e258
 8002b50:	0801e260 	.word	0x0801e260
 8002b54:	0801e268 	.word	0x0801e268
 8002b58:	0801e270 	.word	0x0801e270
 8002b5c:	0801e278 	.word	0x0801e278
 8002b60:	0801e280 	.word	0x0801e280

08002b64 <readEoB2>:
  }
//  return "{\"nodata\":0}";
//    return 0;
}

void readEoB2(int i){
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
  char mychar[sizeof(eobuser0)];
  memcpy(mychar,eobuser0,sizeof(eobuser0));
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <readEoB2+0xb0>)
 8002b6e:	f107 0408 	add.w	r4, r7, #8
 8002b72:	461d      	mov	r5, r3
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b7c:	c407      	stmia	r4!, {r0, r1, r2}
 8002b7e:	8023      	strh	r3, [r4, #0]
  mychar[8] = eobuser0[8] | i;
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <readEoB2+0xb0>)
 8002b82:	7a1b      	ldrb	r3, [r3, #8]
 8002b84:	b25a      	sxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	743b      	strb	r3, [r7, #16]
  mychar[12] = eobuser0[12] | i;
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <readEoB2+0xb0>)
 8002b94:	7b1b      	ldrb	r3, [r3, #12]
 8002b96:	b25a      	sxtb	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	753b      	strb	r3, [r7, #20]
  mychar[16] = eobuser0[16] | i;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <readEoB2+0xb0>)
 8002ba6:	7c1b      	ldrb	r3, [r3, #16]
 8002ba8:	b25a      	sxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	763b      	strb	r3, [r7, #24]
  mychar[20] = eobuser0[20] | i;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <readEoB2+0xb0>)
 8002bb8:	7d1b      	ldrb	r3, [r3, #20]
 8002bba:	b25a      	sxtb	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	773b      	strb	r3, [r7, #28]
  mychar[24] = eobuser0[24] | i;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <readEoB2+0xb0>)
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b25b      	sxtb	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f887 3020 	strb.w	r3, [r7, #32]
  mychar[28] = eobuser0[28] | i;
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <readEoB2+0xb0>)
 8002bde:	7f1b      	ldrb	r3, [r3, #28]
 8002be0:	b25a      	sxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
//      if(j==8 || j==12 || j==16 || j==20 || j==24 || j==28){
//    	eobuser0[j]=eobuser0[j] | i;
//      }
//    }

    setCommandMK6N(mychar, sizeof(mychar));
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	211e      	movs	r1, #30
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc92 	bl	8001520 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 200);
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <readEoB2+0xb4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	23c8      	movs	r3, #200	; 0xc8
 8002c04:	4905      	ldr	r1, [pc, #20]	; (8002c1c <readEoB2+0xb8>)
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <readEoB2+0xbc>)
 8002c08:	f011 f940 	bl	8013e8c <HAL_UART_Transmit>
}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}
 8002c14:	20000048 	.word	0x20000048
 8002c18:	20002968 	.word	0x20002968
 8002c1c:	20002644 	.word	0x20002644
 8002c20:	20002770 	.word	0x20002770

08002c24 <readEoB3>:

void readEoB3(char* datain, int len, int i){
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	4837      	ldr	r0, [pc, #220]	; (8002d14 <readEoB3+0xf0>)
 8002c38:	f018 fb2a 	bl	801b290 <memcpy>
	data_lenMK6N=datasize(dataMK6N);
 8002c3c:	4835      	ldr	r0, [pc, #212]	; (8002d14 <readEoB3+0xf0>)
 8002c3e:	f002 fdc7 	bl	80057d0 <datasize>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <readEoB3+0xf4>)
 8002c46:	601a      	str	r2, [r3, #0]
    if(getRawDataMK6N(6)){
 8002c48:	2006      	movs	r0, #6
 8002c4a:	f7fe fbef 	bl	800142c <getRawDataMK6N>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05b      	beq.n	8002d0c <readEoB3+0xe8>
//    	printData(dataMK6N, data_lenMK6N);
      eoblen=9;
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <readEoB3+0xf8>)
 8002c56:	2209      	movs	r2, #9
 8002c58:	601a      	str	r2, [r3, #0]
//      printf("datasize: %d,readEoB: ",data_lenMK6N);
      for(int k=0;k<6;k++){
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e052      	b.n	8002d06 <readEoB3+0xe2>
        hex2Double(dataMK6N,8*k);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4619      	mov	r1, r3
 8002c66:	482b      	ldr	r0, [pc, #172]	; (8002d14 <readEoB3+0xf0>)
 8002c68:	f002 fdca 	bl	8005800 <hex2Double>
        if(k==0) eob0MK6N[i]=ulf.f;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <readEoB3+0x62>
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <readEoB3+0xfc>)
 8002c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c78:	492a      	ldr	r1, [pc, #168]	; (8002d24 <readEoB3+0x100>)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	00d2      	lsls	r2, r2, #3
 8002c7e:	440a      	add	r2, r1
 8002c80:	e9c2 3400 	strd	r3, r4, [r2]
 8002c84:	e03c      	b.n	8002d00 <readEoB3+0xdc>
        else if(k==1) eob1MK6N[i]=ulf.f;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d109      	bne.n	8002ca0 <readEoB3+0x7c>
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <readEoB3+0xfc>)
 8002c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c92:	4925      	ldr	r1, [pc, #148]	; (8002d28 <readEoB3+0x104>)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	00d2      	lsls	r2, r2, #3
 8002c98:	440a      	add	r2, r1
 8002c9a:	e9c2 3400 	strd	r3, r4, [r2]
 8002c9e:	e02f      	b.n	8002d00 <readEoB3+0xdc>
        else if(k==2) eob2MK6N[i]=ulf.f;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d109      	bne.n	8002cba <readEoB3+0x96>
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <readEoB3+0xfc>)
 8002ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cac:	491f      	ldr	r1, [pc, #124]	; (8002d2c <readEoB3+0x108>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	00d2      	lsls	r2, r2, #3
 8002cb2:	440a      	add	r2, r1
 8002cb4:	e9c2 3400 	strd	r3, r4, [r2]
 8002cb8:	e022      	b.n	8002d00 <readEoB3+0xdc>
        else if(k==3) eob3MK6N[i]=ulf.f;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d109      	bne.n	8002cd4 <readEoB3+0xb0>
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <readEoB3+0xfc>)
 8002cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cc6:	491a      	ldr	r1, [pc, #104]	; (8002d30 <readEoB3+0x10c>)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	00d2      	lsls	r2, r2, #3
 8002ccc:	440a      	add	r2, r1
 8002cce:	e9c2 3400 	strd	r3, r4, [r2]
 8002cd2:	e015      	b.n	8002d00 <readEoB3+0xdc>
        else if(k==4) eob4MK6N[i]=ulf.f;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d109      	bne.n	8002cee <readEoB3+0xca>
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <readEoB3+0xfc>)
 8002cdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ce0:	4914      	ldr	r1, [pc, #80]	; (8002d34 <readEoB3+0x110>)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	00d2      	lsls	r2, r2, #3
 8002ce6:	440a      	add	r2, r1
 8002ce8:	e9c2 3400 	strd	r3, r4, [r2]
 8002cec:	e008      	b.n	8002d00 <readEoB3+0xdc>
        else eob9MK6N[i]=ulf.f;
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <readEoB3+0xfc>)
 8002cf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cf4:	4910      	ldr	r1, [pc, #64]	; (8002d38 <readEoB3+0x114>)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	00d2      	lsls	r2, r2, #3
 8002cfa:	440a      	add	r2, r1
 8002cfc:	e9c2 3400 	strd	r3, r4, [r2]
      for(int k=0;k<6;k++){
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	dda9      	ble.n	8002c60 <readEoB3+0x3c>
//        printf("%.5f ",ulf.f);
      }
//      printf("\r\n");
    }
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	200039c0 	.word	0x200039c0
 8002d18:	20002968 	.word	0x20002968
 8002d1c:	20002640 	.word	0x20002640
 8002d20:	200038d8 	.word	0x200038d8
 8002d24:	20003e48 	.word	0x20003e48
 8002d28:	20003548 	.word	0x20003548
 8002d2c:	200026a8 	.word	0x200026a8
 8002d30:	200035c0 	.word	0x200035c0
 8002d34:	20003618 	.word	0x20003618
 8002d38:	20003968 	.word	0x20003968

08002d3c <decodeEoB3>:

void decodeEoB3(char* outstr){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  if(decodeEoB()) {
 8002d44:	f000 f896 	bl	8002e74 <decodeEoB>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <decodeEoB3+0x4c>
	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e00a      	b.n	8002d6a <decodeEoB3+0x2e>
		  *outstr++=datastrMK6N[i];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <decodeEoB3+0x54>)
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	440a      	add	r2, r1
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4809      	ldr	r0, [pc, #36]	; (8002d90 <decodeEoB3+0x54>)
 8002d6c:	f7fe fa14 	bl	8001198 <datasizestrMK6N>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4293      	cmp	r3, r2
 8002d76:	dbed      	blt.n	8002d54 <decodeEoB3+0x18>
	  }
	  printf("%d\r\n",datasizestrMK6N(datastrMK6N));
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <decodeEoB3+0x54>)
 8002d7a:	f7fe fa0d 	bl	8001198 <datasizestrMK6N>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4619      	mov	r1, r3
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <decodeEoB3+0x58>)
 8002d84:	f018 ff9c 	bl	801bcc0 <iprintf>
//	  return d;
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20001fe8 	.word	0x20001fe8
 8002d94:	0801e288 	.word	0x0801e288

08002d98 <txEoBInit1>:
      saveEoBInit1();
      return 1;
    }
    return 0;
}
void txEoBInit1(){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 8002d9c:	f7fe f9a2 	bl	80010e4 <dataallclearMK6N>
    setCommandMK6N(eobinit1, sizeof(eobinit1));
 8002da0:	212a      	movs	r1, #42	; 0x2a
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <txEoBInit1+0x28>)
 8002da4:	f7fe fbbc 	bl	8001520 <setCommandMK6N>
//    printData(data2MK6N, data_lenMK6N);
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <txEoBInit1+0x2c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002db2:	4905      	ldr	r1, [pc, #20]	; (8002dc8 <txEoBInit1+0x30>)
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <txEoBInit1+0x34>)
 8002db6:	f011 f869 	bl	8013e8c <HAL_UART_Transmit>
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20002968 	.word	0x20002968
 8002dc8:	20002644 	.word	0x20002644
 8002dcc:	20002770 	.word	0x20002770

08002dd0 <rxEoBInit1>:
void rxEoBInit1(char* datain, int len){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <rxEoBInit1+0x48>)
 8002de2:	f018 fa55 	bl	801b290 <memcpy>
	data_lenMK6N=0;
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <rxEoBInit1+0x4c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 8002dec:	480a      	ldr	r0, [pc, #40]	; (8002e18 <rxEoBInit1+0x48>)
 8002dee:	f002 fcef 	bl	80057d0 <datasize>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <rxEoBInit1+0x4c>)
 8002df6:	601a      	str	r2, [r3, #0]
//	printf("datasize: %d 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",data_lenMK6N,dataMK6N[3],dataMK6N[7],dataMK6N[11],dataMK6N[15],dataMK6N[19],dataMK6N[23],dataMK6N[27],dataMK6N[31]);
    if(getRawDataMK6N(6)){
 8002df8:	2006      	movs	r0, #6
 8002dfa:	f7fe fb17 	bl	800142c <getRawDataMK6N>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <rxEoBInit1+0x3e>
      eoblen=9;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <rxEoBInit1+0x50>)
 8002e06:	2209      	movs	r2, #9
 8002e08:	601a      	str	r2, [r3, #0]
//      printData(dataMK6N,data_lenMK6N);
      saveEoBInit1();
 8002e0a:	f000 f80b 	bl	8002e24 <saveEoBInit1>
    }
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200039c0 	.word	0x200039c0
 8002e1c:	20002968 	.word	0x20002968
 8002e20:	20002640 	.word	0x20002640

08002e24 <saveEoBInit1>:
      return 1;
    }
    return 0;
}

void saveEoBInit1(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
	for(int i=0;i<9;i++){
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e014      	b.n	8002e5a <saveEoBInit1+0x36>
	    regeobinit1[i]=dataMK6N[i*4+3];
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3303      	adds	r3, #3
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <saveEoBInit1+0x44>)
 8002e38:	5cd1      	ldrb	r1, [r2, r3]
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <saveEoBInit1+0x48>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	460a      	mov	r2, r1
 8002e42:	701a      	strb	r2, [r3, #0]
	    printf("0x%X ",regeobinit1[i]);
 8002e44:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <saveEoBInit1+0x48>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4808      	ldr	r0, [pc, #32]	; (8002e70 <saveEoBInit1+0x4c>)
 8002e50:	f018 ff36 	bl	801bcc0 <iprintf>
	for(int i=0;i<9;i++){
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3301      	adds	r3, #1
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	dde7      	ble.n	8002e30 <saveEoBInit1+0xc>
//	    temp=i*4+3;
	  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200039c0 	.word	0x200039c0
 8002e6c:	20002f90 	.word	0x20002f90
 8002e70:	0801e094 	.word	0x0801e094

08002e74 <decodeEoB>:

bool decodeEoB(){
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	int maxloop=8;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	603b      	str	r3, [r7, #0]
	data_lenMK6N = 0;
 8002e7e:	4ba7      	ldr	r3, [pc, #668]	; (800311c <decodeEoB+0x2a8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 8002e84:	f7fe f96c 	bl	8001160 <datastrclearMK6N>

	strcpy(datastrMK6N,"{\"mid\":");
 8002e88:	4aa5      	ldr	r2, [pc, #660]	; (8003120 <decodeEoB+0x2ac>)
 8002e8a:	4ba6      	ldr	r3, [pc, #664]	; (8003124 <decodeEoB+0x2b0>)
 8002e8c:	cb03      	ldmia	r3!, {r0, r1}
 8002e8e:	6010      	str	r0, [r2, #0]
 8002e90:	6051      	str	r1, [r2, #4]
	strcat(datastrMK6N, meterSNMK6N);
 8002e92:	49a5      	ldr	r1, [pc, #660]	; (8003128 <decodeEoB+0x2b4>)
 8002e94:	48a2      	ldr	r0, [pc, #648]	; (8003120 <decodeEoB+0x2ac>)
 8002e96:	f018 ffbf 	bl	801be18 <strcat>
	strcat(datastrMK6N, ",\"pid\":\"EoBMK6N\",");
 8002e9a:	48a1      	ldr	r0, [pc, #644]	; (8003120 <decodeEoB+0x2ac>)
 8002e9c:	f7fd f9a2 	bl	80001e4 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b9e      	ldr	r3, [pc, #632]	; (8003120 <decodeEoB+0x2ac>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4aa0      	ldr	r2, [pc, #640]	; (800312c <decodeEoB+0x2b8>)
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4614      	mov	r4, r2
 8002eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb0:	6028      	str	r0, [r5, #0]
 8002eb2:	6069      	str	r1, [r5, #4]
 8002eb4:	60aa      	str	r2, [r5, #8]
 8002eb6:	60eb      	str	r3, [r5, #12]
 8002eb8:	8823      	ldrh	r3, [r4, #0]
 8002eba:	822b      	strh	r3, [r5, #16]
//	SerialMonprintlnMK6N(datastrMK6N);
//  data_lenMK6N = setdatastr(",\"pid\":\"EOBMK6N\",\"readdate\":",data_lenMK6N);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
//  datastr+=",";
  for(int i=0;i<maxloop;i++){
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e121      	b.n	8003106 <decodeEoB+0x292>
//	  printf("%d\r\n",i);
  	strcat(datastrMK6N, checkregEoBRate1(regeobinit1[i]));
 8002ec2:	4a9b      	ldr	r2, [pc, #620]	; (8003130 <decodeEoB+0x2bc>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fcc4 	bl	8002858 <checkregEoBRate1>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4892      	ldr	r0, [pc, #584]	; (8003120 <decodeEoB+0x2ac>)
 8002ed6:	f018 ff9f 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 8002eda:	4891      	ldr	r0, [pc, #580]	; (8003120 <decodeEoB+0x2ac>)
 8002edc:	f7fd f982 	bl	80001e4 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <decodeEoB+0x2ac>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4992      	ldr	r1, [pc, #584]	; (8003134 <decodeEoB+0x2c0>)
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8002ef2:	f7fe f969 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob0MK6N[i]);
 8002ef6:	4a90      	ldr	r2, [pc, #576]	; (8003138 <decodeEoB+0x2c4>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f02:	461a      	mov	r2, r3
 8002f04:	4623      	mov	r3, r4
 8002f06:	498d      	ldr	r1, [pc, #564]	; (800313c <decodeEoB+0x2c8>)
 8002f08:	488d      	ldr	r0, [pc, #564]	; (8003140 <decodeEoB+0x2cc>)
 8002f0a:	f018 ff65 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 8002f0e:	498c      	ldr	r1, [pc, #560]	; (8003140 <decodeEoB+0x2cc>)
 8002f10:	4883      	ldr	r0, [pc, #524]	; (8003120 <decodeEoB+0x2ac>)
 8002f12:	f018 ff81 	bl	801be18 <strcat>
  	strcat(datastrMK6N, checkregEoBRate2(regeobinit1[i]));
 8002f16:	4a86      	ldr	r2, [pc, #536]	; (8003130 <decodeEoB+0x2bc>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fce8 	bl	80028f4 <checkregEoBRate2>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	487d      	ldr	r0, [pc, #500]	; (8003120 <decodeEoB+0x2ac>)
 8002f2a:	f018 ff75 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 8002f2e:	487c      	ldr	r0, [pc, #496]	; (8003120 <decodeEoB+0x2ac>)
 8002f30:	f7fd f958 	bl	80001e4 <strlen>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <decodeEoB+0x2ac>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	497d      	ldr	r1, [pc, #500]	; (8003134 <decodeEoB+0x2c0>)
 8002f3e:	461a      	mov	r2, r3
 8002f40:	460b      	mov	r3, r1
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8002f46:	f7fe f93f 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob1MK6N[i]);
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <decodeEoB+0x2d0>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	4978      	ldr	r1, [pc, #480]	; (800313c <decodeEoB+0x2c8>)
 8002f5c:	4878      	ldr	r0, [pc, #480]	; (8003140 <decodeEoB+0x2cc>)
 8002f5e:	f018 ff3b 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 8002f62:	4977      	ldr	r1, [pc, #476]	; (8003140 <decodeEoB+0x2cc>)
 8002f64:	486e      	ldr	r0, [pc, #440]	; (8003120 <decodeEoB+0x2ac>)
 8002f66:	f018 ff57 	bl	801be18 <strcat>
  	strcat(datastrMK6N, checkregEoBRate3(regeobinit1[i]));
 8002f6a:	4a71      	ldr	r2, [pc, #452]	; (8003130 <decodeEoB+0x2bc>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd0c 	bl	8002990 <checkregEoBRate3>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4868      	ldr	r0, [pc, #416]	; (8003120 <decodeEoB+0x2ac>)
 8002f7e:	f018 ff4b 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 8002f82:	4867      	ldr	r0, [pc, #412]	; (8003120 <decodeEoB+0x2ac>)
 8002f84:	f7fd f92e 	bl	80001e4 <strlen>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <decodeEoB+0x2ac>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	4968      	ldr	r1, [pc, #416]	; (8003134 <decodeEoB+0x2c0>)
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8002f9a:	f7fe f915 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob2MK6N[i]);
 8002f9e:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <decodeEoB+0x2d4>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002faa:	461a      	mov	r2, r3
 8002fac:	4623      	mov	r3, r4
 8002fae:	4963      	ldr	r1, [pc, #396]	; (800313c <decodeEoB+0x2c8>)
 8002fb0:	4863      	ldr	r0, [pc, #396]	; (8003140 <decodeEoB+0x2cc>)
 8002fb2:	f018 ff11 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 8002fb6:	4962      	ldr	r1, [pc, #392]	; (8003140 <decodeEoB+0x2cc>)
 8002fb8:	4859      	ldr	r0, [pc, #356]	; (8003120 <decodeEoB+0x2ac>)
 8002fba:	f018 ff2d 	bl	801be18 <strcat>
  	strcat(datastrMK6N, checkregEoBRate4(regeobinit1[i]));
 8002fbe:	4a5c      	ldr	r2, [pc, #368]	; (8003130 <decodeEoB+0x2bc>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fd30 	bl	8002a2c <checkregEoBRate4>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4853      	ldr	r0, [pc, #332]	; (8003120 <decodeEoB+0x2ac>)
 8002fd2:	f018 ff21 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 8002fd6:	4852      	ldr	r0, [pc, #328]	; (8003120 <decodeEoB+0x2ac>)
 8002fd8:	f7fd f904 	bl	80001e4 <strlen>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <decodeEoB+0x2ac>)
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4953      	ldr	r1, [pc, #332]	; (8003134 <decodeEoB+0x2c0>)
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8002fee:	f7fe f8eb 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob3MK6N[i]);
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <decodeEoB+0x2d8>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4623      	mov	r3, r4
 8003002:	494e      	ldr	r1, [pc, #312]	; (800313c <decodeEoB+0x2c8>)
 8003004:	484e      	ldr	r0, [pc, #312]	; (8003140 <decodeEoB+0x2cc>)
 8003006:	f018 fee7 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800300a:	494d      	ldr	r1, [pc, #308]	; (8003140 <decodeEoB+0x2cc>)
 800300c:	4844      	ldr	r0, [pc, #272]	; (8003120 <decodeEoB+0x2ac>)
 800300e:	f018 ff03 	bl	801be18 <strcat>
  	strcat(datastrMK6N, checkregEoBRate5(regeobinit1[i]));
 8003012:	4a47      	ldr	r2, [pc, #284]	; (8003130 <decodeEoB+0x2bc>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fd54 	bl	8002ac8 <checkregEoBRate5>
 8003020:	4603      	mov	r3, r0
 8003022:	4619      	mov	r1, r3
 8003024:	483e      	ldr	r0, [pc, #248]	; (8003120 <decodeEoB+0x2ac>)
 8003026:	f018 fef7 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 800302a:	483d      	ldr	r0, [pc, #244]	; (8003120 <decodeEoB+0x2ac>)
 800302c:	f7fd f8da 	bl	80001e4 <strlen>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <decodeEoB+0x2ac>)
 8003036:	4413      	add	r3, r2
 8003038:	493e      	ldr	r1, [pc, #248]	; (8003134 <decodeEoB+0x2c0>)
 800303a:	461a      	mov	r2, r3
 800303c:	460b      	mov	r3, r1
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003042:	f7fe f8c1 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob4MK6N[i]);
 8003046:	4a42      	ldr	r2, [pc, #264]	; (8003150 <decodeEoB+0x2dc>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003052:	461a      	mov	r2, r3
 8003054:	4623      	mov	r3, r4
 8003056:	4939      	ldr	r1, [pc, #228]	; (800313c <decodeEoB+0x2c8>)
 8003058:	4839      	ldr	r0, [pc, #228]	; (8003140 <decodeEoB+0x2cc>)
 800305a:	f018 febd 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800305e:	4938      	ldr	r1, [pc, #224]	; (8003140 <decodeEoB+0x2cc>)
 8003060:	482f      	ldr	r0, [pc, #188]	; (8003120 <decodeEoB+0x2ac>)
 8003062:	f018 fed9 	bl	801be18 <strcat>
  	strcat(datastrMK6N, checkregEoBRate9(regeobinit1[i]));
 8003066:	4a32      	ldr	r2, [pc, #200]	; (8003130 <decodeEoB+0x2bc>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fba4 	bl	80027bc <checkregEoBRate9>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4829      	ldr	r0, [pc, #164]	; (8003120 <decodeEoB+0x2ac>)
 800307a:	f018 fecd 	bl	801be18 <strcat>
  	strcat(datastrMK6N, ":");
 800307e:	4828      	ldr	r0, [pc, #160]	; (8003120 <decodeEoB+0x2ac>)
 8003080:	f7fd f8b0 	bl	80001e4 <strlen>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <decodeEoB+0x2ac>)
 800308a:	4413      	add	r3, r2
 800308c:	4929      	ldr	r1, [pc, #164]	; (8003134 <decodeEoB+0x2c0>)
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003096:	f7fe f897 	bl	80011c8 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f",eob9MK6N[i]);
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <decodeEoB+0x2e0>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	492b      	ldr	r1, [pc, #172]	; (8003158 <decodeEoB+0x2e4>)
 80030ac:	4824      	ldr	r0, [pc, #144]	; (8003140 <decodeEoB+0x2cc>)
 80030ae:	f018 fe93 	bl	801bdd8 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 80030b2:	4923      	ldr	r1, [pc, #140]	; (8003140 <decodeEoB+0x2cc>)
 80030b4:	481a      	ldr	r0, [pc, #104]	; (8003120 <decodeEoB+0x2ac>)
 80030b6:	f018 feaf 	bl	801be18 <strcat>
    if(i<maxloop-1){
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	da0c      	bge.n	80030de <decodeEoB+0x26a>
      	strcat(datastrMK6N,",");
 80030c4:	4816      	ldr	r0, [pc, #88]	; (8003120 <decodeEoB+0x2ac>)
 80030c6:	f7fd f88d 	bl	80001e4 <strlen>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <decodeEoB+0x2ac>)
 80030d0:	4413      	add	r3, r2
 80030d2:	4922      	ldr	r1, [pc, #136]	; (800315c <decodeEoB+0x2e8>)
 80030d4:	461a      	mov	r2, r3
 80030d6:	460b      	mov	r3, r1
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	8013      	strh	r3, [r2, #0]
 80030dc:	e010      	b.n	8003100 <decodeEoB+0x28c>
    }
    else if(i==maxloop-1){
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d10b      	bne.n	8003100 <decodeEoB+0x28c>
      	strcat(datastrMK6N,"}");
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <decodeEoB+0x2ac>)
 80030ea:	f7fd f87b 	bl	80001e4 <strlen>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <decodeEoB+0x2ac>)
 80030f4:	4413      	add	r3, r2
 80030f6:	491a      	ldr	r1, [pc, #104]	; (8003160 <decodeEoB+0x2ec>)
 80030f8:	461a      	mov	r2, r3
 80030fa:	460b      	mov	r3, r1
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	8013      	strh	r3, [r2, #0]
  for(int i=0;i<maxloop;i++){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	f6ff aed9 	blt.w	8002ec2 <decodeEoB+0x4e>
    }
  }
//    SerialMonprintlnMK6N(datastrMK6N);
    return true;
 8003110:	2301      	movs	r3, #1
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	bf00      	nop
 800311c:	20002968 	.word	0x20002968
 8003120:	20001fe8 	.word	0x20001fe8
 8003124:	0801e014 	.word	0x0801e014
 8003128:	200003a0 	.word	0x200003a0
 800312c:	0801e290 	.word	0x0801e290
 8003130:	20002f90 	.word	0x20002f90
 8003134:	0801e034 	.word	0x0801e034
 8003138:	20003e48 	.word	0x20003e48
 800313c:	0801e038 	.word	0x0801e038
 8003140:	20002644 	.word	0x20002644
 8003144:	20003548 	.word	0x20003548
 8003148:	200026a8 	.word	0x200026a8
 800314c:	200035c0 	.word	0x200035c0
 8003150:	20003618 	.word	0x20003618
 8003154:	20003968 	.word	0x20003968
 8003158:	0801e2a4 	.word	0x0801e2a4
 800315c:	0801e2ac 	.word	0x0801e2ac
 8003160:	0801e2b0 	.word	0x0801e2b0

08003164 <datasizestrMK10E>:

void saveEoBDataMK10E();
void saveSNMK10E();

int datasizestrMK10E(char buf[])
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 8003170:	e002      	b.n	8003178 <datasizestrMK10E+0x14>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f6      	bne.n	8003172 <datasizestrMK10E+0xe>
	return i+1;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <SerialMonprintlnMK10E>:

void SerialMonprintlnMK10E(char * ptr){
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	466b      	mov	r3, sp
 800319e:	461d      	mov	r5, r3
	uint32_t len=strlen(ptr);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd f81f 	bl	80001e4 <strlen>
 80031a6:	6178      	str	r0, [r7, #20]
	uint8_t ptr1[len+2];
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1c98      	adds	r0, r3, #2
 80031ac:	4603      	mov	r3, r0
 80031ae:	3b01      	subs	r3, #1
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4601      	mov	r1, r0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	00d4      	lsls	r4, r2, #3
 80031c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80031c6:	00cb      	lsls	r3, r1, #3
 80031c8:	4601      	mov	r1, r0
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	00d4      	lsls	r4, r2, #3
 80031d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80031dc:	00cb      	lsls	r3, r1, #3
 80031de:	1dc3      	adds	r3, r0, #7
 80031e0:	08db      	lsrs	r3, r3, #3
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	ebad 0d03 	sub.w	sp, sp, r3
 80031e8:	466b      	mov	r3, sp
 80031ea:	3300      	adds	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
	memcpy(ptr1, (uint8_t *)ptr, len);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f018 f84b 	bl	801b290 <memcpy>
	ptr1[len]= 0x0D;
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	4413      	add	r3, r2
 8003200:	220d      	movs	r2, #13
 8003202:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	210a      	movs	r1, #10
 800320c:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, ptr1, len+2, 3000);
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	b29b      	uxth	r3, r3
 8003214:	3302      	adds	r3, #2
 8003216:	b29a      	uxth	r2, r3
 8003218:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800321c:	4803      	ldr	r0, [pc, #12]	; (800322c <SerialMonprintlnMK10E+0x98>)
 800321e:	f010 fe35 	bl	8013e8c <HAL_UART_Transmit>
 8003222:	46ad      	mov	sp, r5
}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bdb0      	pop	{r4, r5, r7, pc}
 800322c:	20002fe0 	.word	0x20002fe0

08003230 <dataallclearMK10E>:
	while(*buf++ != '\0') i++;
	return i;
}

void dataallclearMK10E(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e007      	b.n	800324c <dataallclearMK10E+0x1c>
	{
		dataMK10E[i] = '\0';
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <dataallclearMK10E+0x74>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3301      	adds	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f240 424b 	movw	r2, #1099	; 0x44b
 8003252:	4293      	cmp	r3, r2
 8003254:	ddf2      	ble.n	800323c <dataallclearMK10E+0xc>
	}
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	e007      	b.n	800326c <dataallclearMK10E+0x3c>
	{
		data2MK10E[i] = '\0';
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <dataallclearMK10E+0x78>)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4413      	add	r3, r2
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f240 424b 	movw	r2, #1099	; 0x44b
 8003272:	4293      	cmp	r3, r2
 8003274:	ddf2      	ble.n	800325c <dataallclearMK10E+0x2c>
	}
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	e007      	b.n	800328c <dataallclearMK10E+0x5c>
	{
		datastrMK10E[i] = '\0';
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <dataallclearMK10E+0x7c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3301      	adds	r3, #1
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f240 424b 	movw	r2, #1099	; 0x44b
 8003292:	4293      	cmp	r3, r2
 8003294:	ddf2      	ble.n	800327c <dataallclearMK10E+0x4c>
	}
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200030fc 	.word	0x200030fc
 80032a8:	20003060 	.word	0x20003060
 80032ac:	20002974 	.word	0x20002974

080032b0 <data2clearMK10E>:
		dataMK10E[i] = '\0';
	}
}

void data2clearMK10E(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
	for (int i=0; i < 20; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	e007      	b.n	80032cc <data2clearMK10E+0x1c>
	{
		data2MK10E[i] = '\0';
 80032bc:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <data2clearMK10E+0x30>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 20; i++)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3301      	adds	r3, #1
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b13      	cmp	r3, #19
 80032d0:	ddf4      	ble.n	80032bc <data2clearMK10E+0xc>
	}
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20003060 	.word	0x20003060

080032e4 <datastrclearMK10E>:

void datastrclearMK10E(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK10E; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	e007      	b.n	8003300 <datastrclearMK10E+0x1c>
	{
		datastrMK10E[i] = '\0';
 80032f0:	4a09      	ldr	r2, [pc, #36]	; (8003318 <datastrclearMK10E+0x34>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3301      	adds	r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f240 424b 	movw	r2, #1099	; 0x44b
 8003306:	4293      	cmp	r3, r2
 8003308:	ddf2      	ble.n	80032f0 <datastrclearMK10E+0xc>
	}
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20002974 	.word	0x20002974

0800331c <setPaddingMK10ELP>:
    idx++;
  }
  data_lenMK10E = idx;
}

void setPaddingMK10ELP(){
 800331c:	b4b0      	push	{r4, r5, r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	466b      	mov	r3, sp
 8003324:	461d      	mov	r5, r3
  unsigned int lentemp=data_lenMK10E, idx=0;
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <setPaddingMK10ELP+0x190>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  uint8_t datatemp[data_lenMK10E];
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <setPaddingMK10ELP+0x190>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	1e43      	subs	r3, r0, #1
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	4603      	mov	r3, r0
 800333a:	4619      	mov	r1, r3
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f04f 0400 	mov.w	r4, #0
 8003348:	00d4      	lsls	r4, r2, #3
 800334a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	00d4      	lsls	r4, r2, #3
 8003362:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003366:	00cb      	lsls	r3, r1, #3
 8003368:	4603      	mov	r3, r0
 800336a:	3307      	adds	r3, #7
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	ebad 0d03 	sub.w	sp, sp, r3
 8003374:	466b      	mov	r3, sp
 8003376:	3300      	adds	r3, #0
 8003378:	603b      	str	r3, [r7, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e00b      	b.n	8003398 <setPaddingMK10ELP+0x7c>
    datatemp[i]=data2MK10E[i];
 8003380:	4a4b      	ldr	r2, [pc, #300]	; (80034b0 <setPaddingMK10ELP+0x194>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	7819      	ldrb	r1, [r3, #0]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	460a      	mov	r2, r1
 8003390:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3301      	adds	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	4b44      	ldr	r3, [pc, #272]	; (80034ac <setPaddingMK10ELP+0x190>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d3ed      	bcc.n	8003380 <setPaddingMK10ELP+0x64>
  }
  for(unsigned int i=0;i<lentemp;i++){
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e073      	b.n	8003492 <setPaddingMK10ELP+0x176>
    if(i==0){
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <setPaddingMK10ELP+0xa0>
      data2MK10E[idx]=0x02;
 80033b0:	4a3f      	ldr	r2, [pc, #252]	; (80034b0 <setPaddingMK10ELP+0x194>)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e064      	b.n	8003486 <setPaddingMK10ELP+0x16a>
    }
    else if(i==lentemp-1){
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3b01      	subs	r3, #1
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d105      	bne.n	80033d2 <setPaddingMK10ELP+0xb6>
      data2MK10E[idx]=0x03;
 80033c6:	4a3a      	ldr	r2, [pc, #232]	; (80034b0 <setPaddingMK10ELP+0x194>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	2203      	movs	r2, #3
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e059      	b.n	8003486 <setPaddingMK10ELP+0x16a>
    }
    else if((datatemp[i]==0x13 && (i<lentemp-1 && i>0)) || datatemp[i]==0x02 || datatemp[i]==0x10 || datatemp[i]==0x11){
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4413      	add	r3, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b13      	cmp	r3, #19
 80033dc:	d107      	bne.n	80033ee <setPaddingMK10ELP+0xd2>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d202      	bcs.n	80033ee <setPaddingMK10ELP+0xd2>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d111      	bne.n	8003412 <setPaddingMK10ELP+0xf6>
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d00b      	beq.n	8003412 <setPaddingMK10ELP+0xf6>
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d005      	beq.n	8003412 <setPaddingMK10ELP+0xf6>
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b11      	cmp	r3, #17
 8003410:	d112      	bne.n	8003438 <setPaddingMK10ELP+0x11c>
      data2MK10E[idx++]=0x10;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <setPaddingMK10ELP+0x194>)
 800341a:	2110      	movs	r1, #16
 800341c:	54d1      	strb	r1, [r2, r3]
      data2MK10E[idx]=datatemp[i]|0x40;
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342a:	b2d9      	uxtb	r1, r3
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <setPaddingMK10ELP+0x194>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4413      	add	r3, r2
 8003432:	460a      	mov	r2, r1
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e026      	b.n	8003486 <setPaddingMK10ELP+0x16a>
    }
    else if(i<lentemp-1 && datatemp[i]==0x03){
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3b01      	subs	r3, #1
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	429a      	cmp	r2, r3
 8003440:	d218      	bcs.n	8003474 <setPaddingMK10ELP+0x158>
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d112      	bne.n	8003474 <setPaddingMK10ELP+0x158>
      data2MK10E[idx++]=0x10;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <setPaddingMK10ELP+0x194>)
 8003456:	2110      	movs	r1, #16
 8003458:	54d1      	strb	r1, [r2, r3]
      data2MK10E[idx]=datatemp[i]|0x40;
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003466:	b2d9      	uxtb	r1, r3
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <setPaddingMK10ELP+0x194>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	460a      	mov	r2, r1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e008      	b.n	8003486 <setPaddingMK10ELP+0x16a>
    }
    else    data2MK10E[idx]=datatemp[i];
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4413      	add	r3, r2
 800347a:	7819      	ldrb	r1, [r3, #0]
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <setPaddingMK10ELP+0x194>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	460a      	mov	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
    idx++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3301      	adds	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<lentemp;i++){
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3301      	adds	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d387      	bcc.n	80033aa <setPaddingMK10ELP+0x8e>
  }
  data_lenMK10E = idx;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a03      	ldr	r2, [pc, #12]	; (80034ac <setPaddingMK10ELP+0x190>)
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	46ad      	mov	sp, r5
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bcb0      	pop	{r4, r5, r7}
 80034aa:	4770      	bx	lr
 80034ac:	20002970 	.word	0x20002970
 80034b0:	20003060 	.word	0x20003060

080034b4 <setCommandLPMK10E>:
   dataMK10E[sizearr]  = (uint8_t)valuecrc;
   data_lenMK10E = sizearr+3;
   setPaddingMK10E();
}

void setCommandLPMK10E(char array[], unsigned int sizearr){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  for(int i=0;i<sizearr;i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e00b      	b.n	80034dc <setCommandLPMK10E+0x28>
    data2MK10E[i]=array[i];
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	7819      	ldrb	r1, [r3, #0]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <setCommandLPMK10E+0x9c>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	460a      	mov	r2, r1
 80034d4:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<sizearr;i++){
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3301      	adds	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8ef      	bhi.n	80034c4 <setCommandLPMK10E+0x10>
  }
  data_lenMK10E = sizearr;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <setCommandLPMK10E+0xa0>)
 80034e8:	6013      	str	r3, [r2, #0]
  clearCrc();
 80034ea:	f7fd fd0d 	bl	8000f08 <clearCrc>
   valuecrc = XModemCrc(array,0,sizearr);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fdd2 	bl	80010a0 <XModemCrc>
 80034fc:	4603      	mov	r3, r0
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <setCommandLPMK10E+0xa4>)
 8003502:	801a      	strh	r2, [r3, #0]
   data2MK10E[sizearr+2]=0x03;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	3302      	adds	r3, #2
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <setCommandLPMK10E+0x9c>)
 800350a:	2103      	movs	r1, #3
 800350c:	54d1      	strb	r1, [r2, r3]
   data2MK10E[sizearr+1]= (uint8_t) valuecrc;
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <setCommandLPMK10E+0xa4>)
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b2d1      	uxtb	r1, r2
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <setCommandLPMK10E+0x9c>)
 800351a:	54d1      	strb	r1, [r2, r3]
   valuecrc  = valuecrc >> 8;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <setCommandLPMK10E+0xa4>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	b29a      	uxth	r2, r3
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <setCommandLPMK10E+0xa4>)
 8003526:	801a      	strh	r2, [r3, #0]
   data2MK10E[sizearr]  = (uint8_t)valuecrc;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <setCommandLPMK10E+0xa4>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b2d9      	uxtb	r1, r3
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <setCommandLPMK10E+0x9c>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4413      	add	r3, r2
 8003534:	460a      	mov	r2, r1
 8003536:	701a      	strb	r2, [r3, #0]
   data_lenMK10E = sizearr+3;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	3303      	adds	r3, #3
 800353c:	461a      	mov	r2, r3
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <setCommandLPMK10E+0xa0>)
 8003540:	601a      	str	r2, [r3, #0]
   setPaddingMK10ELP();
 8003542:	f7ff feeb 	bl	800331c <setPaddingMK10ELP>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20003060 	.word	0x20003060
 8003554:	20002970 	.word	0x20002970
 8003558:	200028b6 	.word	0x200028b6

0800355c <removePaddingMK10E>:

void removePaddingMK10E(){
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
  unsigned int lentemp=data_lenMK10E;
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <removePaddingMK10E+0x90>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	e02e      	b.n	80035cc <removePaddingMK10E+0x70>
    if(dataMK10E[i]==0x10){
 800356e:	4a20      	ldr	r2, [pc, #128]	; (80035f0 <removePaddingMK10E+0x94>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4413      	add	r3, r2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b10      	cmp	r3, #16
 8003578:	d125      	bne.n	80035c6 <removePaddingMK10E+0x6a>
    	dataMK10E[i]=dataMK10E[i+1]^0x40;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <removePaddingMK10E+0x94>)
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003586:	b2d9      	uxtb	r1, r3
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <removePaddingMK10E+0x94>)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	460a      	mov	r2, r1
 8003590:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK10E-1;j++){
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	e00b      	b.n	80035b2 <removePaddingMK10E+0x56>
    	  dataMK10E[j]=dataMK10E[j+1];
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3301      	adds	r3, #1
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <removePaddingMK10E+0x94>)
 80035a0:	5cd1      	ldrb	r1, [r2, r3]
 80035a2:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <removePaddingMK10E+0x94>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	460a      	mov	r2, r1
 80035aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK10E-1;j++){
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3301      	adds	r3, #1
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <removePaddingMK10E+0x90>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4293      	cmp	r3, r2
 80035be:	d3ec      	bcc.n	800359a <removePaddingMK10E+0x3e>
      }
      lentemp--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <removePaddingMK10E+0x90>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d3ca      	bcc.n	800356e <removePaddingMK10E+0x12>
    }
  }
  data_lenMK10E = lentemp;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <removePaddingMK10E+0x90>)
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20002970 	.word	0x20002970
 80035f0:	200030fc 	.word	0x200030fc

080035f4 <removeheadcrctailMK10E>:


void removeheadcrctailMK10E(int sizeheadcmd){
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  // remove CRC and Tail
  dataMK10E[data_lenMK10E-1]=0;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <removeheadcrctailMK10E+0x88>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <removeheadcrctailMK10E+0x8c>)
 8003604:	2100      	movs	r1, #0
 8003606:	54d1      	strb	r1, [r2, r3]
  dataMK10E[data_lenMK10E-2]=0;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <removeheadcrctailMK10E+0x88>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3b02      	subs	r3, #2
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <removeheadcrctailMK10E+0x8c>)
 8003610:	2100      	movs	r1, #0
 8003612:	54d1      	strb	r1, [r2, r3]
  dataMK10E[data_lenMK10E-3]=0;
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <removeheadcrctailMK10E+0x88>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b03      	subs	r3, #3
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <removeheadcrctailMK10E+0x8c>)
 800361c:	2100      	movs	r1, #0
 800361e:	54d1      	strb	r1, [r2, r3]
  data_lenMK10E=data_lenMK10E-3;
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <removeheadcrctailMK10E+0x88>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3b03      	subs	r3, #3
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <removeheadcrctailMK10E+0x88>)
 8003628:	6013      	str	r3, [r2, #0]
  //remove head
  for(unsigned int i=0;i<data_lenMK10E;i++){
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e013      	b.n	8003658 <removeheadcrctailMK10E+0x64>
    if(i+sizeheadcmd<=BUFFSIZEMK10E){
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	f240 424c 	movw	r2, #1100	; 0x44c
 800363a:	4293      	cmp	r3, r2
 800363c:	d809      	bhi.n	8003652 <removeheadcrctailMK10E+0x5e>
      dataMK10E[i]=dataMK10E[i+sizeheadcmd];
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	4a0e      	ldr	r2, [pc, #56]	; (8003680 <removeheadcrctailMK10E+0x8c>)
 8003646:	5cd1      	ldrb	r1, [r2, r3]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <removeheadcrctailMK10E+0x8c>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	460a      	mov	r2, r1
 8003650:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3301      	adds	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <removeheadcrctailMK10E+0x88>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4293      	cmp	r3, r2
 8003662:	d3e5      	bcc.n	8003630 <removeheadcrctailMK10E+0x3c>
    }
  }
  // update data_lenMK10E
  data_lenMK10E=data_lenMK10E-sizeheadcmd;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <removeheadcrctailMK10E+0x88>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a03      	ldr	r2, [pc, #12]	; (800367c <removeheadcrctailMK10E+0x88>)
 800366e:	6013      	str	r3, [r2, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	20002970 	.word	0x20002970
 8003680:	200030fc 	.word	0x200030fc

08003684 <getRawDataMK10E>:
      return true;
    }
    else return false;
}

bool getRawDataMK10E(int headcmd){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    clearCrc();
 800368c:	f7fd fc3c 	bl	8000f08 <clearCrc>
    data_lenMK10E = datasize(dataMK10E);
 8003690:	4807      	ldr	r0, [pc, #28]	; (80036b0 <getRawDataMK10E+0x2c>)
 8003692:	f002 f89d 	bl	80057d0 <datasize>
 8003696:	4602      	mov	r2, r0
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <getRawDataMK10E+0x30>)
 800369a:	601a      	str	r2, [r3, #0]
    removePaddingMK10E();
 800369c:	f7ff ff5e 	bl	800355c <removePaddingMK10E>
//    valuecrc = XModemCrc(dataMK10E,0,data_lenMK10E-3);
//    if(checkcrcMK10E()){
//      SerialMonprintln("RemoveHeadCRCTail");
//      printData(dataMK10E,data_lenMK10E);
      removeheadcrctailMK10E(headcmd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffa7 	bl	80035f4 <removeheadcrctailMK10E>
      return true;
 80036a6:	2301      	movs	r3, #1
//    }
    return true;
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200030fc 	.word	0x200030fc
 80036b4:	20002970 	.word	0x20002970

080036b8 <saveSNMK10E>:

void saveSNMK10E(){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  if(data_lenMK10E>11) removeheadcrctailMK10E(5);
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <saveSNMK10E+0x44>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b0b      	cmp	r3, #11
 80036c4:	dd02      	ble.n	80036cc <saveSNMK10E+0x14>
 80036c6:	2005      	movs	r0, #5
 80036c8:	f7ff ff94 	bl	80035f4 <removeheadcrctailMK10E>
  for(int i=0;i<data_lenMK10E;i++){
 80036cc:	2300      	movs	r3, #0
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	e00b      	b.n	80036ea <saveSNMK10E+0x32>
    meterSNMK10E[i] = dataMK10E[i];
 80036d2:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <saveSNMK10E+0x48>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	7819      	ldrb	r1, [r3, #0]
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <saveSNMK10E+0x4c>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	460a      	mov	r2, r1
 80036e2:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<data_lenMK10E;i++){
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3301      	adds	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <saveSNMK10E+0x44>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	dbee      	blt.n	80036d2 <saveSNMK10E+0x1a>
  }
//  printf("SN: %s\r\n",meterSNMK10E);
//  HAL_Delay(100);
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20002970 	.word	0x20002970
 8003700:	200030fc 	.word	0x200030fc
 8003704:	200000b0 	.word	0x200000b0

08003708 <txSNMK10E_rtos>:
//    	SerialMonprintln((char *)dataMK10E);
    }
    return meterSNMK10E;
}

void txSNMK10E_rtos(){
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 800370c:	f7ff fd90 	bl	8003230 <dataallclearMK10E>
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )meterreq, sizeof(meterreq), 100);
 8003710:	2364      	movs	r3, #100	; 0x64
 8003712:	2208      	movs	r2, #8
 8003714:	4904      	ldr	r1, [pc, #16]	; (8003728 <txSNMK10E_rtos+0x20>)
 8003716:	4805      	ldr	r0, [pc, #20]	; (800372c <txSNMK10E_rtos+0x24>)
 8003718:	f010 fbb8 	bl	8013e8c <HAL_UART_Transmit>
	osDelay(2000);
 800371c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003720:	f014 ff8a 	bl	8018638 <osDelay>
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000014 	.word	0x20000014
 800372c:	20002770 	.word	0x20002770

08003730 <rxSNMK10E_rtos>:

const char* rxSNMK10E_rtos(unsigned char buf[],int len){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	dataallclearMK10E();
 800373a:	f7ff fd79 	bl	8003230 <dataallclearMK10E>
	memcpy(dataMK10E,buf,len);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <rxSNMK10E_rtos+0x4c>)
 8003746:	f017 fda3 	bl	801b290 <memcpy>
  data_lenMK10E=0;
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <rxSNMK10E_rtos+0x50>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
  data_lenMK10E=datasize(dataMK10E);
 8003750:	480a      	ldr	r0, [pc, #40]	; (800377c <rxSNMK10E_rtos+0x4c>)
 8003752:	f002 f83d 	bl	80057d0 <datasize>
 8003756:	4602      	mov	r2, r0
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <rxSNMK10E_rtos+0x50>)
 800375a:	601a      	str	r2, [r3, #0]
    if(data_lenMK10E>4){
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <rxSNMK10E_rtos+0x50>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	dd06      	ble.n	8003772 <rxSNMK10E_rtos+0x42>
    	SerialMtrFlag=true;
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <rxSNMK10E_rtos+0x54>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
    	saveSNMK10E();
 800376a:	f7ff ffa5 	bl	80036b8 <saveSNMK10E>
        return meterSNMK10E;
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <rxSNMK10E_rtos+0x58>)
 8003770:	e000      	b.n	8003774 <rxSNMK10E_rtos+0x44>
//    	printf("0x%X 0x%X 0x%X 0x%X 0x%X ",dataMK10E[0],dataMK10E[1],dataMK10E[2],dataMK10E[3],dataMK10E[4]);
//    	printf("0x%X 0x%X 0x%X 0x%X 0x%X \r\n",dataMK10E[5],dataMK10E[6],dataMK10E[7],dataMK10E[8],dataMK10E[9]);
//    	SerialMonprintln((char *)dataMK10E);
    }
    return meterSNMK10E;
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <rxSNMK10E_rtos+0x58>)
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200030fc 	.word	0x200030fc
 8003780:	20002970 	.word	0x20002970
 8003784:	2000039e 	.word	0x2000039e
 8003788:	200000b0 	.word	0x200000b0

0800378c <formatInstantMK10E>:
    }
    return timestamp_now;
}
// ---------- Decoding and Formating Functions

const char * formatInstantMK10E(uint8_t reg){
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b19      	cmp	r3, #25
 800379a:	d85f      	bhi.n	800385c <formatInstantMK10E+0xd0>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <formatInstantMK10E+0x18>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	08003811 	.word	0x08003811
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003819 	.word	0x08003819
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	08003821 	.word	0x08003821
 80037bc:	08003825 	.word	0x08003825
 80037c0:	08003829 	.word	0x08003829
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	0800385d 	.word	0x0800385d
 80037cc:	0800385d 	.word	0x0800385d
 80037d0:	0800385d 	.word	0x0800385d
 80037d4:	0800385d 	.word	0x0800385d
 80037d8:	0800385d 	.word	0x0800385d
 80037dc:	0800385d 	.word	0x0800385d
 80037e0:	08003831 	.word	0x08003831
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003839 	.word	0x08003839
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	08003841 	.word	0x08003841
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003849 	.word	0x08003849
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	08003851 	.word	0x08003851
 8003804:	08003855 	.word	0x08003855
 8003808:	08003859 	.word	0x08003859
    case 0:
            return "\"3P59\""; // volt A
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <formatInstantMK10E+0xe0>)
 800380e:	e026      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 1:
    		return  "\"3P60\""; // volt B
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <formatInstantMK10E+0xe4>)
 8003812:	e024      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 2:
    		return "\"3P61\""; // volt C
 8003814:	4b17      	ldr	r3, [pc, #92]	; (8003874 <formatInstantMK10E+0xe8>)
 8003816:	e022      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 3:
    		return "\"3P09\""; // current A
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <formatInstantMK10E+0xec>)
 800381a:	e020      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 4:
    		return "\"3P10\""; // current B
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <formatInstantMK10E+0xf0>)
 800381e:	e01e      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 5:
    		return "\"3P11\""; // current C
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <formatInstantMK10E+0xf4>)
 8003822:	e01c      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 6:
    		return "\"3P62\""; // phase angle A
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <formatInstantMK10E+0xf8>)
 8003826:	e01a      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 7:
			return "\"3P63\""; // phase angle B
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <formatInstantMK10E+0xfc>)
 800382a:	e018      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 8:
			return "\"3P64\""; // phase angle C
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <formatInstantMK10E+0x100>)
 800382e:	e016      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 15:
			return "\"3P01\""; // phase A Watts
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <formatInstantMK10E+0x104>)
 8003832:	e014      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 16:
			return "\"3P02\""; // Phase B Watts
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <formatInstantMK10E+0x108>)
 8003836:	e012      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 17:
            return "\"3P03\""; // phase C Watts
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <formatInstantMK10E+0x10c>)
 800383a:	e010      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 18:
            return "\"3P43\""; // phase A Vars
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <formatInstantMK10E+0x110>)
 800383e:	e00e      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 19:
            return "\"3P44\""; // phase B Vars
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <formatInstantMK10E+0x114>)
 8003842:	e00c      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 20:
            return "\"3P45\""; // phase C Vars
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <formatInstantMK10E+0x118>)
 8003846:	e00a      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 21:
            return "\"3P05\""; // phase A VA
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <formatInstantMK10E+0x11c>)
 800384a:	e008      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 22:
            return "\"3P06\""; // phase B VA
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <formatInstantMK10E+0x120>)
 800384e:	e006      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 23:
            return "\"3P07\""; // phase C VA
 8003850:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <formatInstantMK10E+0x124>)
 8003852:	e004      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 24:
            return "\"3P13\""; // Freq
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <formatInstantMK10E+0x128>)
 8003856:	e002      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    case 25:
            return "PF";
 8003858:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <formatInstantMK10E+0x12c>)
 800385a:	e000      	b.n	800385e <formatInstantMK10E+0xd2>
            break;
    default:
            return "\"3P13\""; // Freq
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <formatInstantMK10E+0x128>)
            break;
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	0801df74 	.word	0x0801df74
 8003870:	0801df7c 	.word	0x0801df7c
 8003874:	0801df84 	.word	0x0801df84
 8003878:	0801df8c 	.word	0x0801df8c
 800387c:	0801df94 	.word	0x0801df94
 8003880:	0801df9c 	.word	0x0801df9c
 8003884:	0801dfa4 	.word	0x0801dfa4
 8003888:	0801dfac 	.word	0x0801dfac
 800388c:	0801dfb4 	.word	0x0801dfb4
 8003890:	0801dfbc 	.word	0x0801dfbc
 8003894:	0801dfc4 	.word	0x0801dfc4
 8003898:	0801dfcc 	.word	0x0801dfcc
 800389c:	0801dfd4 	.word	0x0801dfd4
 80038a0:	0801dfdc 	.word	0x0801dfdc
 80038a4:	0801dfe4 	.word	0x0801dfe4
 80038a8:	0801dfec 	.word	0x0801dfec
 80038ac:	0801dff4 	.word	0x0801dff4
 80038b0:	0801dffc 	.word	0x0801dffc
 80038b4:	0801e004 	.word	0x0801e004
 80038b8:	0801e2e8 	.word	0x0801e2e8

080038bc <formatLPRegMK10E>:
            return "\"3P42\"";
            break;
  }
}

const char * formatLPRegMK10E(int a){
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  switch (a){
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f24b 4280 	movw	r2, #46208	; 0xb480
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d051      	beq.n	8003972 <formatLPRegMK10E+0xb6>
 80038ce:	f24b 4280 	movw	r2, #46208	; 0xb480
 80038d2:	4293      	cmp	r3, r2
 80038d4:	dc1d      	bgt.n	8003912 <formatLPRegMK10E+0x56>
 80038d6:	f243 4213 	movw	r2, #13331	; 0x3413
 80038da:	4293      	cmp	r3, r2
 80038dc:	d039      	beq.n	8003952 <formatLPRegMK10E+0x96>
 80038de:	f243 4213 	movw	r2, #13331	; 0x3413
 80038e2:	4293      	cmp	r3, r2
 80038e4:	dc08      	bgt.n	80038f8 <formatLPRegMK10E+0x3c>
 80038e6:	f243 4203 	movw	r2, #13315	; 0x3403
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02f      	beq.n	800394e <formatLPRegMK10E+0x92>
 80038ee:	f243 4207 	movw	r2, #13319	; 0x3407
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <formatLPRegMK10E+0x9e>
 80038f6:	e044      	b.n	8003982 <formatLPRegMK10E+0xc6>
 80038f8:	f243 4223 	movw	r2, #13347	; 0x3423
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02a      	beq.n	8003956 <formatLPRegMK10E+0x9a>
 8003900:	f243 4227 	movw	r2, #13351	; 0x3427
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <formatLPRegMK10E+0xa6>
 8003908:	f243 4217 	movw	r2, #13335	; 0x3417
 800390c:	4293      	cmp	r3, r2
 800390e:	d026      	beq.n	800395e <formatLPRegMK10E+0xa2>
 8003910:	e037      	b.n	8003982 <formatLPRegMK10E+0xc6>
 8003912:	f24b 4283 	movw	r2, #46211	; 0xb483
 8003916:	4293      	cmp	r3, r2
 8003918:	d025      	beq.n	8003966 <formatLPRegMK10E+0xaa>
 800391a:	f24b 4283 	movw	r2, #46211	; 0xb483
 800391e:	4293      	cmp	r3, r2
 8003920:	dc08      	bgt.n	8003934 <formatLPRegMK10E+0x78>
 8003922:	f24b 4281 	movw	r2, #46209	; 0xb481
 8003926:	4293      	cmp	r3, r2
 8003928:	d025      	beq.n	8003976 <formatLPRegMK10E+0xba>
 800392a:	f24b 4282 	movw	r2, #46210	; 0xb482
 800392e:	4293      	cmp	r3, r2
 8003930:	d023      	beq.n	800397a <formatLPRegMK10E+0xbe>
 8003932:	e026      	b.n	8003982 <formatLPRegMK10E+0xc6>
 8003934:	f24b 4285 	movw	r2, #46213	; 0xb485
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <formatLPRegMK10E+0xb2>
 800393c:	f24b 4285 	movw	r2, #46213	; 0xb485
 8003940:	4293      	cmp	r3, r2
 8003942:	db12      	blt.n	800396a <formatLPRegMK10E+0xae>
 8003944:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <formatLPRegMK10E+0xc2>
 800394c:	e019      	b.n	8003982 <formatLPRegMK10E+0xc6>
    case 13315:  return "\"3P66\""; // abs total wh
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <formatLPRegMK10E+0xd4>)
 8003950:	e018      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 13331:  return "\"3P33\""; // total export wh
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <formatLPRegMK10E+0xd8>)
 8003954:	e016      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 13347:  return "\"3P37\""; // total import wh
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <formatLPRegMK10E+0xdc>)
 8003958:	e014      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 13319:  return "\"3P67\""; // abs total varh 0x3407
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <formatLPRegMK10E+0xe0>)
 800395c:	e012      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 13335:  return "\"3P25\""; // total export wh 0x3417
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <formatLPRegMK10E+0xe4>)
 8003960:	e010      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 13351:  return "\"3P29\""; // total import wh 0x3427
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <formatLPRegMK10E+0xe8>)
 8003964:	e00e      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46211:  return "\"3P59\""; // tegangan R
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <formatLPRegMK10E+0xec>)
 8003968:	e00c      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46212:  return "\"3P60\""; // tegangan S
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <formatLPRegMK10E+0xf0>)
 800396c:	e00a      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46213:  return "\"3P61\""; // tegangan T
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <formatLPRegMK10E+0xf4>)
 8003970:	e008      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46208:  return "\"3P09\""; // Arus R
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <formatLPRegMK10E+0xf8>)
 8003974:	e006      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46209:  return "\"3P10\""; // Arus S
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <formatLPRegMK10E+0xfc>)
 8003978:	e004      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46210:  return "\"3P11\""; // Arus T
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <formatLPRegMK10E+0x100>)
 800397c:	e002      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    case 46323  :  return "\"3P42\""; // PF
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <formatLPRegMK10E+0x104>)
 8003980:	e000      	b.n	8003984 <formatLPRegMK10E+0xc8>
                break;
    default   :  return "\"3P42\""; // PF
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <formatLPRegMK10E+0x104>)
                break;
    
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	0801e0c8 	.word	0x0801e0c8
 8003994:	0801e0a8 	.word	0x0801e0a8
 8003998:	0801e0a0 	.word	0x0801e0a0
 800399c:	0801e0d0 	.word	0x0801e0d0
 80039a0:	0801e0b8 	.word	0x0801e0b8
 80039a4:	0801e0b0 	.word	0x0801e0b0
 80039a8:	0801df74 	.word	0x0801df74
 80039ac:	0801df7c 	.word	0x0801df7c
 80039b0:	0801df84 	.word	0x0801df84
 80039b4:	0801df8c 	.word	0x0801df8c
 80039b8:	0801df94 	.word	0x0801df94
 80039bc:	0801df9c 	.word	0x0801df9c
 80039c0:	0801e00c 	.word	0x0801e00c

080039c4 <decodeEobLpinitMK10E>:
        return "\"3P42\"";
            break;
  }
}

void decodeEobLpinitMK10E(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
  int index = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
  if(getRawDataMK10E(4)){
 80039ce:	2004      	movs	r0, #4
 80039d0:	f7ff fe58 	bl	8003684 <getRawDataMK10E>
//    SerialMonprintlnMK10E();
  }
  hex2Long(dataMK10E,0);
 80039d4:	2100      	movs	r1, #0
 80039d6:	487b      	ldr	r0, [pc, #492]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 80039d8:	f002 f860 	bl	8005a9c <hex2Long>
  lpfirstentrydate = myFloat.l;
 80039dc:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7a      	ldr	r2, [pc, #488]	; (8003bcc <decodeEobLpinitMK10E+0x208>)
 80039e2:	6013      	str	r3, [r2, #0]
  lpfirstentrydate += 820454400L;
 80039e4:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <decodeEobLpinitMK10E+0x208>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <decodeEobLpinitMK10E+0x20c>)
 80039ea:	4413      	add	r3, r2
 80039ec:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <decodeEobLpinitMK10E+0x208>)
 80039ee:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lpfirstentrydate);
  index += 8;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3308      	adds	r3, #8
 80039f4:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	4872      	ldr	r0, [pc, #456]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 80039fa:	f002 f84f 	bl	8005a9c <hex2Long>
  lpfirstentry = myFloat.l;
 80039fe:	4b72      	ldr	r3, [pc, #456]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a74      	ldr	r2, [pc, #464]	; (8003bd4 <decodeEobLpinitMK10E+0x210>)
 8003a04:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lpfirstentry);
  index += 8;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	486d      	ldr	r0, [pc, #436]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a10:	f002 f844 	bl	8005a9c <hex2Long>
  lplastentry = myFloat.l;
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6f      	ldr	r2, [pc, #444]	; (8003bd8 <decodeEobLpinitMK10E+0x214>)
 8003a1a:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lplastentry);
  index += 8;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3308      	adds	r3, #8
 8003a20:	60bb      	str	r3, [r7, #8]
//  hex2Long(dataMK10E,index);
  uint8_t temp = dataMK10E[index+1];
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	71fb      	strb	r3, [r7, #7]
//  printf("\ntemp:%x ",temp);
  temp = temp & 0x3F;
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a32:	71fb      	strb	r3, [r7, #7]
//  printf("%x ",temp);
  jmlchannel = (uint8_t)temp;
 8003a34:	4a69      	ldr	r2, [pc, #420]	; (8003bdc <decodeEobLpinitMK10E+0x218>)
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	7013      	strb	r3, [r2, #0]
//  printf("jmlch:%d ",jmlchannel);
  temp = dataMK10E[index] << 4;
 8003a3a:	4a62      	ldr	r2, [pc, #392]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	71fb      	strb	r3, [r7, #7]
//  printf("\ntemp:%x ",temp);
  temp = temp >> 2;
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	71fb      	strb	r3, [r7, #7]
//  printf("%x ",temp);
  uint8_t temp1 = dataMK10E[index+1] >> 6;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	4a5c      	ldr	r2, [pc, #368]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	71bb      	strb	r3, [r7, #6]
//  printf("temp1:%x ",temp1);
  temp = temp | temp1;
 8003a58:	79fa      	ldrb	r2, [r7, #7]
 8003a5a:	79bb      	ldrb	r3, [r7, #6]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
//  SerialMonprintlnMK10E(temp);
  lpintervalMK10E = (uint8_t)temp;
 8003a60:	4a5f      	ldr	r2, [pc, #380]	; (8003be0 <decodeEobLpinitMK10E+0x21c>)
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	7013      	strb	r3, [r2, #0]
//  printf("%d \n",lpintervalMK10E);
  index += 4;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4855      	ldr	r0, [pc, #340]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a70:	f002 f814 	bl	8005a9c <hex2Long>
  commonscale[0]=myFloat.f;
 8003a74:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5a      	ldr	r2, [pc, #360]	; (8003be4 <decodeEobLpinitMK10E+0x220>)
 8003a7a:	6013      	str	r3, [r2, #0]
  index += 4;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	484f      	ldr	r0, [pc, #316]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a86:	f002 f809 	bl	8005a9c <hex2Long>
  commonscale[1]=myFloat.f;
 8003a8a:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <decodeEobLpinitMK10E+0x220>)
 8003a90:	6053      	str	r3, [r2, #4]
  index += 4;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3304      	adds	r3, #4
 8003a96:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	484a      	ldr	r0, [pc, #296]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003a9c:	f001 fffe 	bl	8005a9c <hex2Long>
  commonscale[2]=myFloat.f;
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a4f      	ldr	r2, [pc, #316]	; (8003be4 <decodeEobLpinitMK10E+0x220>)
 8003aa6:	6093      	str	r3, [r2, #8]
  index += 4;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4844      	ldr	r0, [pc, #272]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003ab2:	f001 fff3 	bl	8005a9c <hex2Long>
  commonscale[3]=myFloat.f;
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a4a      	ldr	r2, [pc, #296]	; (8003be4 <decodeEobLpinitMK10E+0x220>)
 8003abc:	60d3      	str	r3, [r2, #12]
  index += 4;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	483f      	ldr	r0, [pc, #252]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003ac8:	f001 ffe8 	bl	8005a9c <hex2Long>
  commonscale[4]=myFloat.f;
 8003acc:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <decodeEobLpinitMK10E+0x204>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a44      	ldr	r2, [pc, #272]	; (8003be4 <decodeEobLpinitMK10E+0x220>)
 8003ad2:	6113      	str	r3, [r2, #16]
  for(int i=0;i<5;i++){
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	e002      	b.n	8003ae0 <decodeEobLpinitMK10E+0x11c>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	ddf9      	ble.n	8003ada <decodeEobLpinitMK10E+0x116>
//	  printf("%.5f ",commonscale[i]);
  }
//  printf("\r\n");
  index = 118;
 8003ae6:	2376      	movs	r3, #118	; 0x76
 8003ae8:	60bb      	str	r3, [r7, #8]
  for(int i=0;i<jmlchannel;i++){
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e02e      	b.n	8003b4e <decodeEobLpinitMK10E+0x18a>
    lpreg[i]=dataMK10E[2*i+index];
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	005a      	lsls	r2, r3, #1
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	4619      	mov	r1, r3
 8003afe:	4a3a      	ldr	r2, [pc, #232]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    lpreg[i]=lpreg[i]<<8;
 8003b06:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	021a      	lsls	r2, r3, #8
 8003b10:	4935      	ldr	r1, [pc, #212]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpreg[i]=lpreg[i] | dataMK10E[2*i+index+1];
 8003b18:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	0051      	lsls	r1, r2, #1
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	440a      	add	r2, r1
 8003b28:	3201      	adds	r2, #1
 8003b2a:	4926      	ldr	r1, [pc, #152]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003b2c:	5c8a      	ldrb	r2, [r1, r2]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	492d      	ldr	r1, [pc, #180]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpregm[i]=lpreg[i];
 8003b38:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <decodeEobLpinitMK10E+0x224>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b40:	492a      	ldr	r1, [pc, #168]	; (8003bec <decodeEobLpinitMK10E+0x228>)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<jmlchannel;i++){
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <decodeEobLpinitMK10E+0x218>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4293      	cmp	r3, r2
 8003b58:	dbca      	blt.n	8003af0 <decodeEobLpinitMK10E+0x12c>
//    SerialMon.print(" ");
//    SerialMon.print(lpreg[i]);
  }
//  printf("\r\n");
//  SerialMonprintlnMK10E(" ");
  index = 246;
 8003b5a:	23f6      	movs	r3, #246	; 0xf6
 8003b5c:	60bb      	str	r3, [r7, #8]
  for(int i=0;i<7;i++){
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e026      	b.n	8003bb2 <decodeEobLpinitMK10E+0x1ee>
    eobreg[i]=dataMK10E[2*i+index];
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	005a      	lsls	r2, r3, #1
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	4619      	mov	r1, r3
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <decodeEobLpinitMK10E+0x22c>)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    eobreg[i]=eobreg[i]<<8;
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <decodeEobLpinitMK10E+0x22c>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <decodeEobLpinitMK10E+0x22c>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    eobreg[i]=eobreg[i] | dataMK10E[2*i+index+1];
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <decodeEobLpinitMK10E+0x22c>)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	0051      	lsls	r1, r2, #1
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	3201      	adds	r2, #1
 8003b9e:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <decodeEobLpinitMK10E+0x200>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <decodeEobLpinitMK10E+0x22c>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<7;i++){
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	ddd5      	ble.n	8003b64 <decodeEobLpinitMK10E+0x1a0>
//    checkregEoBInit1MK10E(eobreg[i]);
//    SerialMonprint(datastrMK10E);
  }
//  printf("\r\n");
//  SerialMonprintlnMK10E();
  decodelpinitMK10E();
 8003bb8:	f000 fbf0 	bl	800439c <decodelpinitMK10E>
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	200030fc 	.word	0x200030fc
 8003bc8:	20003f64 	.word	0x20003f64
 8003bcc:	200030ec 	.word	0x200030ec
 8003bd0:	30e72400 	.word	0x30e72400
 8003bd4:	20002884 	.word	0x20002884
 8003bd8:	200025c4 	.word	0x200025c4
 8003bdc:	200027f8 	.word	0x200027f8
 8003be0:	2000296c 	.word	0x2000296c
 8003be4:	20002870 	.word	0x20002870
 8003be8:	20003074 	.word	0x20003074
 8003bec:	200089c0 	.word	0x200089c0
 8003bf0:	200035a0 	.word	0x200035a0

08003bf4 <decodeInstantMK10E>:
  	strcat(datastrMK10E, "}");
        int3++;
    SerialMonprintlnMK10E(datastrMK10E);
}

bool decodeInstantMK10E(){
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
	//int index=0;
  myFloat.f = 0;
 8003bfa:	4bb0      	ldr	r3, [pc, #704]	; (8003ebc <decodeInstantMK10E+0x2c8>)
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
  printf("decode Instant ");
 8003c02:	48af      	ldr	r0, [pc, #700]	; (8003ec0 <decodeInstantMK10E+0x2cc>)
 8003c04:	f018 f85c 	bl	801bcc0 <iprintf>
  for(int i=0;i<25;i++){    
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e01f      	b.n	8003c4e <decodeInstantMK10E+0x5a>
	  instantF530[i]=hex2Float(dataMK10E,i*4);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4619      	mov	r1, r3
 8003c14:	48ab      	ldr	r0, [pc, #684]	; (8003ec4 <decodeInstantMK10E+0x2d0>)
 8003c16:	f001 fefb 	bl	8005a10 <hex2Float>
 8003c1a:	eef0 7a40 	vmov.f32	s15, s0
 8003c1e:	4aaa      	ldr	r2, [pc, #680]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	edc3 7a00 	vstr	s15, [r3]
      printf("%.5f ",instantF530[i]);
 8003c2a:	4aa7      	ldr	r2, [pc, #668]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fc97 	bl	8000568 <__aeabi_f2d>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	48a2      	ldr	r0, [pc, #648]	; (8003ecc <decodeInstantMK10E+0x2d8>)
 8003c44:	f018 f83c 	bl	801bcc0 <iprintf>
  for(int i=0;i<25;i++){    
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b18      	cmp	r3, #24
 8003c52:	dddc      	ble.n	8003c0e <decodeInstantMK10E+0x1a>
  }
  printf("%.5f \r\n",instantF530[0]);
 8003c54:	4b9c      	ldr	r3, [pc, #624]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc85 	bl	8000568 <__aeabi_f2d>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460c      	mov	r4, r1
 8003c62:	461a      	mov	r2, r3
 8003c64:	4623      	mov	r3, r4
 8003c66:	489a      	ldr	r0, [pc, #616]	; (8003ed0 <decodeInstantMK10E+0x2dc>)
 8003c68:	f018 f82a 	bl	801bcc0 <iprintf>
  HAL_Delay(1000);
 8003c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c70:	f00a ff3e 	bl	800eaf0 <HAL_Delay>
  int1=0;
 8003c74:	4b97      	ldr	r3, [pc, #604]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
  int2=0;
 8003c7a:	4b97      	ldr	r3, [pc, #604]	; (8003ed8 <decodeInstantMK10E+0x2e4>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
  int3=0;
 8003c80:	4b96      	ldr	r3, [pc, #600]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
  datastrclearMK10E();
 8003c86:	f7ff fb2d 	bl	80032e4 <datastrclearMK10E>
  strcpy(datastrMK10E,"{\"mid\":");
 8003c8a:	4a95      	ldr	r2, [pc, #596]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003c8c:	4b95      	ldr	r3, [pc, #596]	; (8003ee4 <decodeInstantMK10E+0x2f0>)
 8003c8e:	cb03      	ldmia	r3!, {r0, r1}
 8003c90:	6010      	str	r0, [r2, #0]
 8003c92:	6051      	str	r1, [r2, #4]
  strcat(datastrMK10E, meterSNMK10E);
 8003c94:	4994      	ldr	r1, [pc, #592]	; (8003ee8 <decodeInstantMK10E+0x2f4>)
 8003c96:	4892      	ldr	r0, [pc, #584]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003c98:	f018 f8be 	bl	801be18 <strcat>
  strcat(datastrMK10E, ",\"pid\":\"InstantMK10E\",");
 8003c9c:	4890      	ldr	r0, [pc, #576]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003c9e:	f7fc faa1 	bl	80001e4 <strlen>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b8e      	ldr	r3, [pc, #568]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a90      	ldr	r2, [pc, #576]	; (8003eec <decodeInstantMK10E+0x2f8>)
 8003cac:	461c      	mov	r4, r3
 8003cae:	4615      	mov	r5, r2
 8003cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb2:	6020      	str	r0, [r4, #0]
 8003cb4:	6061      	str	r1, [r4, #4]
 8003cb6:	60a2      	str	r2, [r4, #8]
 8003cb8:	60e3      	str	r3, [r4, #12]
 8003cba:	6828      	ldr	r0, [r5, #0]
 8003cbc:	6120      	str	r0, [r4, #16]
 8003cbe:	88ab      	ldrh	r3, [r5, #4]
 8003cc0:	79aa      	ldrb	r2, [r5, #6]
 8003cc2:	82a3      	strh	r3, [r4, #20]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	75a3      	strb	r3, [r4, #22]
//  strcat(datastrMK10E, ",\"pid\":\"InstantMK10E\",\"readdate\":");
//  data2clearMK10E();
//  sprintf(data2MK10E,"%d,",timestamp_now);
//  strcat(datastrMK10E, data2MK10E);
  for(int i=0; i<9;i++){
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	e045      	b.n	8003d5a <decodeInstantMK10E+0x166>
	strcat(datastrMK10E, formatInstantMK10E(i));
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fd5a 	bl	800378c <formatInstantMK10E>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4880      	ldr	r0, [pc, #512]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003cde:	f018 f89b 	bl	801be18 <strcat>
	strcat(datastrMK10E, ":");
 8003ce2:	487f      	ldr	r0, [pc, #508]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003ce4:	f7fc fa7e 	bl	80001e4 <strlen>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b7c      	ldr	r3, [pc, #496]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	497f      	ldr	r1, [pc, #508]	; (8003ef0 <decodeInstantMK10E+0x2fc>)
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	8013      	strh	r3, [r2, #0]
	data2clearMK10E();
 8003cfa:	f7ff fad9 	bl	80032b0 <data2clearMK10E>
	sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003cfe:	4b77      	ldr	r3, [pc, #476]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a71      	ldr	r2, [pc, #452]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc2c 	bl	8000568 <__aeabi_f2d>
 8003d10:	4603      	mov	r3, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	461a      	mov	r2, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	4976      	ldr	r1, [pc, #472]	; (8003ef4 <decodeInstantMK10E+0x300>)
 8003d1a:	4877      	ldr	r0, [pc, #476]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003d1c:	f018 f85c 	bl	801bdd8 <siprintf>
//	int2 = bufsizeMK10E(data2MK10E);
	strcat(datastrMK10E, data2MK10E);
 8003d20:	4975      	ldr	r1, [pc, #468]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003d22:	486f      	ldr	r0, [pc, #444]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003d24:	f018 f878 	bl	801be18 <strcat>
	strcat(datastrMK10E, ",");
 8003d28:	486d      	ldr	r0, [pc, #436]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003d2a:	f7fc fa5b 	bl	80001e4 <strlen>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b6b      	ldr	r3, [pc, #428]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003d34:	4413      	add	r3, r2
 8003d36:	4971      	ldr	r1, [pc, #452]	; (8003efc <decodeInstantMK10E+0x308>)
 8003d38:	461a      	mov	r2, r3
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	8013      	strh	r3, [r2, #0]
    int1+=4;
 8003d40:	4b64      	ldr	r3, [pc, #400]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3304      	adds	r3, #4
 8003d46:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003d48:	6013      	str	r3, [r2, #0]
    int3++;
 8003d4a:	4b64      	ldr	r3, [pc, #400]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a62      	ldr	r2, [pc, #392]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d52:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	ddb6      	ble.n	8003cce <decodeInstantMK10E+0xda>
  }
  for(int i=0;i<6;i++){
 8003d60:	2300      	movs	r3, #0
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e00c      	b.n	8003d80 <decodeInstantMK10E+0x18c>
    int1+=4;
 8003d66:	4b5b      	ldr	r3, [pc, #364]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4a59      	ldr	r2, [pc, #356]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003d6e:	6013      	str	r3, [r2, #0]
    int3++;
 8003d70:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a59      	ldr	r2, [pc, #356]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d78:	6013      	str	r3, [r2, #0]
  for(int i=0;i<6;i++){
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	ddef      	ble.n	8003d66 <decodeInstantMK10E+0x172>
  }
  int2 = int1;
 8003d86:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a53      	ldr	r2, [pc, #332]	; (8003ed8 <decodeInstantMK10E+0x2e4>)
 8003d8c:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	e046      	b.n	8003e22 <decodeInstantMK10E+0x22e>
	strcat(datastrMK10E, formatInstantMK10E(int3));
 8003d94:	4b51      	ldr	r3, [pc, #324]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fcf6 	bl	800378c <formatInstantMK10E>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4619      	mov	r1, r3
 8003da4:	484e      	ldr	r0, [pc, #312]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003da6:	f018 f837 	bl	801be18 <strcat>
	strcat(datastrMK10E, ":");
 8003daa:	484d      	ldr	r0, [pc, #308]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003dac:	f7fc fa1a 	bl	80001e4 <strlen>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003db6:	4413      	add	r3, r2
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <decodeInstantMK10E+0x2fc>)
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	8013      	strh	r3, [r2, #0]
	data2clearMK10E();
 8003dc2:	f7ff fa75 	bl	80032b0 <data2clearMK10E>
	sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003dc6:	4b45      	ldr	r3, [pc, #276]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a3f      	ldr	r2, [pc, #252]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fbc8 	bl	8000568 <__aeabi_f2d>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	4944      	ldr	r1, [pc, #272]	; (8003ef4 <decodeInstantMK10E+0x300>)
 8003de2:	4845      	ldr	r0, [pc, #276]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003de4:	f017 fff8 	bl	801bdd8 <siprintf>
//	int2 = bufsizeMK10E(data2);
	strcat(datastrMK10E, data2MK10E);
 8003de8:	4943      	ldr	r1, [pc, #268]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003dea:	483d      	ldr	r0, [pc, #244]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003dec:	f018 f814 	bl	801be18 <strcat>
	strcat(datastrMK10E, ",");
 8003df0:	483b      	ldr	r0, [pc, #236]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003df2:	f7fc f9f7 	bl	80001e4 <strlen>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003dfc:	4413      	add	r3, r2
 8003dfe:	493f      	ldr	r1, [pc, #252]	; (8003efc <decodeInstantMK10E+0x308>)
 8003e00:	461a      	mov	r2, r3
 8003e02:	460b      	mov	r3, r1
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	8013      	strh	r3, [r2, #0]
    int1+=4;
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003e10:	6013      	str	r3, [r2, #0]
    int3++;
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003e1a:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	ddb5      	ble.n	8003d94 <decodeInstantMK10E+0x1a0>
  }
  strcat(datastrMK10E, formatInstantMK10E(int3));
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fcac 	bl	800378c <formatInstantMK10E>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4619      	mov	r1, r3
 8003e38:	4829      	ldr	r0, [pc, #164]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e3a:	f017 ffed 	bl	801be18 <strcat>
  strcat(datastrMK10E, ":");
 8003e3e:	4828      	ldr	r0, [pc, #160]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e40:	f7fc f9d0 	bl	80001e4 <strlen>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4928      	ldr	r1, [pc, #160]	; (8003ef0 <decodeInstantMK10E+0x2fc>)
 8003e4e:	461a      	mov	r2, r3
 8003e50:	460b      	mov	r3, r1
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	8013      	strh	r3, [r2, #0]
  data2clearMK10E();
 8003e56:	f7ff fa2b 	bl	80032b0 <data2clearMK10E>
  sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <decodeInstantMK10E+0x2d4>)
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb7e 	bl	8000568 <__aeabi_f2d>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	461a      	mov	r2, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	491f      	ldr	r1, [pc, #124]	; (8003ef4 <decodeInstantMK10E+0x300>)
 8003e76:	4820      	ldr	r0, [pc, #128]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003e78:	f017 ffae 	bl	801bdd8 <siprintf>
//  int2 = bufsizeMK10E(data2);
  strcat(datastrMK10E, data2MK10E);
 8003e7c:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <decodeInstantMK10E+0x304>)
 8003e7e:	4818      	ldr	r0, [pc, #96]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e80:	f017 ffca 	bl	801be18 <strcat>
  strcat(datastrMK10E, "}");
 8003e84:	4816      	ldr	r0, [pc, #88]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e86:	f7fc f9ad 	bl	80001e4 <strlen>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <decodeInstantMK10E+0x2ec>)
 8003e90:	4413      	add	r3, r2
 8003e92:	491b      	ldr	r1, [pc, #108]	; (8003f00 <decodeInstantMK10E+0x30c>)
 8003e94:	461a      	mov	r2, r3
 8003e96:	460b      	mov	r3, r1
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	8013      	strh	r3, [r2, #0]
  int1+=4;
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4a0c      	ldr	r2, [pc, #48]	; (8003ed4 <decodeInstantMK10E+0x2e0>)
 8003ea4:	6013      	str	r3, [r2, #0]
  int3++;
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <decodeInstantMK10E+0x2e8>)
 8003eae:	6013      	str	r3, [r2, #0]
  return true;
 8003eb0:	2301      	movs	r3, #1
//  SerialMonprintln(datastrMK10E);
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20003f64 	.word	0x20003f64
 8003ec0:	0801e320 	.word	0x0801e320
 8003ec4:	200030fc 	.word	0x200030fc
 8003ec8:	20003f68 	.word	0x20003f68
 8003ecc:	0801e330 	.word	0x0801e330
 8003ed0:	0801e338 	.word	0x0801e338
 8003ed4:	20002f8c 	.word	0x20002f8c
 8003ed8:	200036fc 	.word	0x200036fc
 8003edc:	20003f60 	.word	0x20003f60
 8003ee0:	20002974 	.word	0x20002974
 8003ee4:	0801e014 	.word	0x0801e014
 8003ee8:	200000b0 	.word	0x200000b0
 8003eec:	0801e340 	.word	0x0801e340
 8003ef0:	0801e034 	.word	0x0801e034
 8003ef4:	0801e2a4 	.word	0x0801e2a4
 8003ef8:	20003060 	.word	0x20003060
 8003efc:	0801e2ac 	.word	0x0801e2ac
 8003f00:	0801e2b0 	.word	0x0801e2b0

08003f04 <txInstantMK10E>:
	  }
  }
//  return "0";
}

void txInstantMK10E(){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  dataallclearMK10E();
 8003f08:	f7ff f992 	bl	8003230 <dataallclearMK10E>
  dataMK10E[0]=0x02;
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <txInstantMK10E+0x44>)
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
  dataMK10E[1]=0x52;
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <txInstantMK10E+0x44>)
 8003f14:	2252      	movs	r2, #82	; 0x52
 8003f16:	705a      	strb	r2, [r3, #1]
  dataMK10E[2]=0xF5;
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <txInstantMK10E+0x44>)
 8003f1a:	22f5      	movs	r2, #245	; 0xf5
 8003f1c:	709a      	strb	r2, [r3, #2]
  dataMK10E[3]=0x30;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <txInstantMK10E+0x44>)
 8003f20:	2230      	movs	r2, #48	; 0x30
 8003f22:	70da      	strb	r2, [r3, #3]
  dataMK10E[4]=0x07;
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <txInstantMK10E+0x44>)
 8003f26:	2207      	movs	r2, #7
 8003f28:	711a      	strb	r2, [r3, #4]
  dataMK10E[5]=0xA1;
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <txInstantMK10E+0x44>)
 8003f2c:	22a1      	movs	r2, #161	; 0xa1
 8003f2e:	715a      	strb	r2, [r3, #5]
  dataMK10E[6]=0x03;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <txInstantMK10E+0x44>)
 8003f32:	2203      	movs	r2, #3
 8003f34:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SerialMtr, (uint8_t * )dataMK10E, 7, 200);
 8003f36:	23c8      	movs	r3, #200	; 0xc8
 8003f38:	2207      	movs	r2, #7
 8003f3a:	4903      	ldr	r1, [pc, #12]	; (8003f48 <txInstantMK10E+0x44>)
 8003f3c:	4803      	ldr	r0, [pc, #12]	; (8003f4c <txInstantMK10E+0x48>)
 8003f3e:	f00f ffa5 	bl	8013e8c <HAL_UART_Transmit>
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200030fc 	.word	0x200030fc
 8003f4c:	20002770 	.word	0x20002770

08003f50 <rxInstantMK10E>:

void rxInstantMK10E(char* outstr, unsigned char buf[],int len){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
	dataallclearMK10E();
 8003f5c:	f7ff f968 	bl	8003230 <dataallclearMK10E>
	memcpy(dataMK10E,buf,len);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	4818      	ldr	r0, [pc, #96]	; (8003fc8 <rxInstantMK10E+0x78>)
 8003f68:	f017 f992 	bl	801b290 <memcpy>
  data_lenMK10E=0;
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <rxInstantMK10E+0x7c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
  data_lenMK10E=datasize(dataMK10E);
 8003f72:	4815      	ldr	r0, [pc, #84]	; (8003fc8 <rxInstantMK10E+0x78>)
 8003f74:	f001 fc2c 	bl	80057d0 <datasize>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <rxInstantMK10E+0x7c>)
 8003f7c:	601a      	str	r2, [r3, #0]
  if(data_lenMK10E>5){
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <rxInstantMK10E+0x7c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	dd1c      	ble.n	8003fc0 <rxInstantMK10E+0x70>
	  removeheadcrctailMK10E(4);
 8003f86:	2004      	movs	r0, #4
 8003f88:	f7ff fb34 	bl	80035f4 <removeheadcrctailMK10E>
	  if(decodeInstantMK10E()){
 8003f8c:	f7ff fe32 	bl	8003bf4 <decodeInstantMK10E>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d014      	beq.n	8003fc0 <rxInstantMK10E+0x70>
//		  printf("datasizestrMK10E: %d \r\n",datasizestrMK10E(datastrMK10E));
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e00a      	b.n	8003fb2 <rxInstantMK10E+0x62>
			  *outstr++=datastrMK10E[i];
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	60fa      	str	r2, [r7, #12]
 8003fa2:	490b      	ldr	r1, [pc, #44]	; (8003fd0 <rxInstantMK10E+0x80>)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <rxInstantMK10E+0x80>)
 8003fb4:	f7ff f8d6 	bl	8003164 <datasizestrMK10E>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	dbed      	blt.n	8003f9c <rxInstantMK10E+0x4c>
		  }
//		  printf(outstr);
	  }
  }
//  return "0";
}
 8003fc0:	bf00      	nop
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200030fc 	.word	0x200030fc
 8003fcc:	20002970 	.word	0x20002970
 8003fd0:	20002974 	.word	0x20002974

08003fd4 <txLPMK10ERec>:
  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
	  *outstr++=datastrMK10E[i];
  }
}

void txLPMK10ERec(int lp_index){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	dataallclearMK10E();
 8003fdc:	f7ff f928 	bl	8003230 <dataallclearMK10E>
	data_lenMK10E = 0;
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <txLPMK10ERec+0x90>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  long lpindex = lp_index;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
  lprecord = lpindex;
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <txLPMK10ERec+0x94>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]
  data2MK10E[0]=0x02;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <txLPMK10ERec+0x98>)
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	701a      	strb	r2, [r3, #0]
  data2MK10E[1]=0x46;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <txLPMK10ERec+0x98>)
 8003ff8:	2246      	movs	r2, #70	; 0x46
 8003ffa:	705a      	strb	r2, [r3, #1]
  data2MK10E[2]=0x30;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <txLPMK10ERec+0x98>)
 8003ffe:	2230      	movs	r2, #48	; 0x30
 8004000:	709a      	strb	r2, [r3, #2]
  data2MK10E[3]=0x00;
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <txLPMK10ERec+0x98>)
 8004004:	2200      	movs	r2, #0
 8004006:	70da      	strb	r2, [r3, #3]
  data2MK10E[4]=lpindex>>24;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	161b      	asrs	r3, r3, #24
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b17      	ldr	r3, [pc, #92]	; (800406c <txLPMK10ERec+0x98>)
 8004010:	711a      	strb	r2, [r3, #4]
  data2MK10E[5]=lpindex>>16;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	141b      	asrs	r3, r3, #16
 8004016:	b2da      	uxtb	r2, r3
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <txLPMK10ERec+0x98>)
 800401a:	715a      	strb	r2, [r3, #5]
  data2MK10E[6]=lpindex>>8;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	121b      	asrs	r3, r3, #8
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <txLPMK10ERec+0x98>)
 8004024:	719a      	strb	r2, [r3, #6]
  data2MK10E[7]=(uint8_t) lpindex;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <txLPMK10ERec+0x98>)
 800402c:	71da      	strb	r2, [r3, #7]
  data2MK10E[8]=0x00;
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <txLPMK10ERec+0x98>)
 8004030:	2200      	movs	r2, #0
 8004032:	721a      	strb	r2, [r3, #8]
  data2MK10E[9]=0x01;
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <txLPMK10ERec+0x98>)
 8004036:	2201      	movs	r2, #1
 8004038:	725a      	strb	r2, [r3, #9]
  data_lenMK10E = 10;
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <txLPMK10ERec+0x90>)
 800403c:	220a      	movs	r2, #10
 800403e:	601a      	str	r2, [r3, #0]
  setCommandLPMK10E(data2MK10E, data_lenMK10E);
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <txLPMK10ERec+0x90>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	4809      	ldr	r0, [pc, #36]	; (800406c <txLPMK10ERec+0x98>)
 8004048:	f7ff fa34 	bl	80034b4 <setCommandLPMK10E>
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)data2MK10E, data_lenMK10E, 100);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <txLPMK10ERec+0x90>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	2364      	movs	r3, #100	; 0x64
 8004054:	4905      	ldr	r1, [pc, #20]	; (800406c <txLPMK10ERec+0x98>)
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <txLPMK10ERec+0x9c>)
 8004058:	f00f ff18 	bl	8013e8c <HAL_UART_Transmit>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20002970 	.word	0x20002970
 8004068:	200038d0 	.word	0x200038d0
 800406c:	20003060 	.word	0x20003060
 8004070:	20002770 	.word	0x20002770

08004074 <txLPMK10E>:

void txLPMK10E(int indexmin1){
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	dataallclearMK10E();
 800407c:	f7ff f8d8 	bl	8003230 <dataallclearMK10E>
	data_lenMK10E = 0;
 8004080:	4b22      	ldr	r3, [pc, #136]	; (800410c <txLPMK10E+0x98>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  long lpindex = (long)lplastentry-indexmin1;
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <txLPMK10E+0x9c>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	60fb      	str	r3, [r7, #12]
  lprecord = lpindex;
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <txLPMK10E+0xa0>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6013      	str	r3, [r2, #0]
  data2MK10E[0]=0x02;
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <txLPMK10E+0xa4>)
 8004098:	2202      	movs	r2, #2
 800409a:	701a      	strb	r2, [r3, #0]
  data2MK10E[1]=0x46;
 800409c:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <txLPMK10E+0xa4>)
 800409e:	2246      	movs	r2, #70	; 0x46
 80040a0:	705a      	strb	r2, [r3, #1]
  data2MK10E[2]=0x30;
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <txLPMK10E+0xa4>)
 80040a4:	2230      	movs	r2, #48	; 0x30
 80040a6:	709a      	strb	r2, [r3, #2]
  data2MK10E[3]=0x00;
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <txLPMK10E+0xa4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	70da      	strb	r2, [r3, #3]
  data2MK10E[4]=lpindex>>24;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	161b      	asrs	r3, r3, #24
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	4b18      	ldr	r3, [pc, #96]	; (8004118 <txLPMK10E+0xa4>)
 80040b6:	711a      	strb	r2, [r3, #4]
  data2MK10E[5]=lpindex>>16;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	141b      	asrs	r3, r3, #16
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b16      	ldr	r3, [pc, #88]	; (8004118 <txLPMK10E+0xa4>)
 80040c0:	715a      	strb	r2, [r3, #5]
  data2MK10E[6]=lpindex>>8;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	121b      	asrs	r3, r3, #8
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <txLPMK10E+0xa4>)
 80040ca:	719a      	strb	r2, [r3, #6]
  data2MK10E[7]=(uint8_t) lpindex;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <txLPMK10E+0xa4>)
 80040d2:	71da      	strb	r2, [r3, #7]
  data2MK10E[8]=0x00;
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <txLPMK10E+0xa4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	721a      	strb	r2, [r3, #8]
  data2MK10E[9]=0x01;
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <txLPMK10E+0xa4>)
 80040dc:	2201      	movs	r2, #1
 80040de:	725a      	strb	r2, [r3, #9]
  data_lenMK10E = 10;
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <txLPMK10E+0x98>)
 80040e2:	220a      	movs	r2, #10
 80040e4:	601a      	str	r2, [r3, #0]
  setCommandLPMK10E(data2MK10E, data_lenMK10E);
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <txLPMK10E+0x98>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	480a      	ldr	r0, [pc, #40]	; (8004118 <txLPMK10E+0xa4>)
 80040ee:	f7ff f9e1 	bl	80034b4 <setCommandLPMK10E>
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)data2MK10E, data_lenMK10E, 100);
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <txLPMK10E+0x98>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	2364      	movs	r3, #100	; 0x64
 80040fa:	4907      	ldr	r1, [pc, #28]	; (8004118 <txLPMK10E+0xa4>)
 80040fc:	4807      	ldr	r0, [pc, #28]	; (800411c <txLPMK10E+0xa8>)
 80040fe:	f00f fec5 	bl	8013e8c <HAL_UART_Transmit>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20002970 	.word	0x20002970
 8004110:	200025c4 	.word	0x200025c4
 8004114:	200038d0 	.word	0x200038d0
 8004118:	20003060 	.word	0x20003060
 800411c:	20002770 	.word	0x20002770

08004120 <rxLPMK10E>:

void rxLPMK10E(char* outstr,char* datain, int len){
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
	memcpy(dataMK10E,datain,len);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	461a      	mov	r2, r3
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	4816      	ldr	r0, [pc, #88]	; (800418c <rxLPMK10E+0x6c>)
 8004134:	f017 f8ac 	bl	801b290 <memcpy>
  data_lenMK10E = datasize(dataMK10E);
 8004138:	4814      	ldr	r0, [pc, #80]	; (800418c <rxLPMK10E+0x6c>)
 800413a:	f001 fb49 	bl	80057d0 <datasize>
 800413e:	4602      	mov	r2, r0
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <rxLPMK10E+0x70>)
 8004142:	601a      	str	r2, [r3, #0]
  if(getRawDataMK10E(10)){
 8004144:	200a      	movs	r0, #10
 8004146:	f7ff fa9d 	bl	8003684 <getRawDataMK10E>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d018      	beq.n	8004182 <rxLPMK10E+0x62>
	  decodelpdataMK10E();
 8004150:	f000 f946 	bl	80043e0 <decodelpdataMK10E>
	  lp2JsonMK10E();
 8004154:	f000 f9c6 	bl	80044e4 <lp2JsonMK10E>
	  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e00a      	b.n	8004174 <rxLPMK10E+0x54>
		  *outstr++=datastrMK10E[i];
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	60fa      	str	r2, [r7, #12]
 8004164:	490b      	ldr	r1, [pc, #44]	; (8004194 <rxLPMK10E+0x74>)
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	440a      	add	r2, r1
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3301      	adds	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	4807      	ldr	r0, [pc, #28]	; (8004194 <rxLPMK10E+0x74>)
 8004176:	f7fe fff5 	bl	8003164 <datasizestrMK10E>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	4293      	cmp	r3, r2
 8004180:	dbed      	blt.n	800415e <rxLPMK10E+0x3e>
	  }
  }
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200030fc 	.word	0x200030fc
 8004190:	20002970 	.word	0x20002970
 8004194:	20002974 	.word	0x20002974

08004198 <decodelpscaleMK10E>:

void decodelpscaleMK10E(int a, uint8_t index){
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  switch (a){
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f24b 4280 	movw	r2, #46208	; 0xb480
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f000 80a9 	beq.w	8004302 <decodelpscaleMK10E+0x16a>
 80041b0:	f24b 4280 	movw	r2, #46208	; 0xb480
 80041b4:	4293      	cmp	r3, r2
 80041b6:	dc1d      	bgt.n	80041f4 <decodelpscaleMK10E+0x5c>
 80041b8:	f243 4213 	movw	r2, #13331	; 0x3413
 80041bc:	4293      	cmp	r3, r2
 80041be:	d044      	beq.n	800424a <decodelpscaleMK10E+0xb2>
 80041c0:	f243 4213 	movw	r2, #13331	; 0x3413
 80041c4:	4293      	cmp	r3, r2
 80041c6:	dc08      	bgt.n	80041da <decodelpscaleMK10E+0x42>
 80041c8:	f243 4203 	movw	r2, #13315	; 0x3403
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d032      	beq.n	8004236 <decodelpscaleMK10E+0x9e>
 80041d0:	f243 4207 	movw	r2, #13319	; 0x3407
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04c      	beq.n	8004272 <decodelpscaleMK10E+0xda>
 80041d8:	e0cb      	b.n	8004372 <decodelpscaleMK10E+0x1da>
 80041da:	f243 4227 	movw	r2, #13351	; 0x3427
 80041de:	4293      	cmp	r3, r2
 80041e0:	d05b      	beq.n	800429a <decodelpscaleMK10E+0x102>
 80041e2:	f647 521b 	movw	r2, #32027	; 0x7d1b
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04d      	beq.n	8004286 <decodelpscaleMK10E+0xee>
 80041ea:	f243 4223 	movw	r2, #13347	; 0x3423
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d035      	beq.n	800425e <decodelpscaleMK10E+0xc6>
 80041f2:	e0be      	b.n	8004372 <decodelpscaleMK10E+0x1da>
 80041f4:	f24b 4283 	movw	r2, #46211	; 0xb483
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d058      	beq.n	80042ae <decodelpscaleMK10E+0x116>
 80041fc:	f24b 4283 	movw	r2, #46211	; 0xb483
 8004200:	4293      	cmp	r3, r2
 8004202:	dc0a      	bgt.n	800421a <decodelpscaleMK10E+0x82>
 8004204:	f24b 4281 	movw	r2, #46209	; 0xb481
 8004208:	4293      	cmp	r3, r2
 800420a:	f000 8088 	beq.w	800431e <decodelpscaleMK10E+0x186>
 800420e:	f24b 4282 	movw	r2, #46210	; 0xb482
 8004212:	4293      	cmp	r3, r2
 8004214:	f000 8091 	beq.w	800433a <decodelpscaleMK10E+0x1a2>
 8004218:	e0ab      	b.n	8004372 <decodelpscaleMK10E+0x1da>
 800421a:	f24b 4285 	movw	r2, #46213	; 0xb485
 800421e:	4293      	cmp	r3, r2
 8004220:	d061      	beq.n	80042e6 <decodelpscaleMK10E+0x14e>
 8004222:	f24b 4285 	movw	r2, #46213	; 0xb485
 8004226:	4293      	cmp	r3, r2
 8004228:	db4f      	blt.n	80042ca <decodelpscaleMK10E+0x132>
 800422a:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 800422e:	4293      	cmp	r3, r2
 8004230:	f000 8091 	beq.w	8004356 <decodelpscaleMK10E+0x1be>
 8004234:	e09d      	b.n	8004372 <decodelpscaleMK10E+0x1da>
    case 13315:  lpscaleMK10E[index]=1;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	4a55      	ldr	r2, [pc, #340]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	441a      	add	r2, r3
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	4c54      	ldr	r4, [pc, #336]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 8004244:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004248:	e09d      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 13331:  lpscaleMK10E[index]=1;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	4a50      	ldr	r2, [pc, #320]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	441a      	add	r2, r3
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	4c4f      	ldr	r4, [pc, #316]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 8004258:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 800425c:	e093      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 13347:  lpscaleMK10E[index]=1;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	4a4b      	ldr	r2, [pc, #300]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	441a      	add	r2, r3
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	4c4a      	ldr	r4, [pc, #296]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 800426c:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004270:	e089      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 13319:  lpscaleMK10E[index]=1;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	4a46      	ldr	r2, [pc, #280]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	441a      	add	r2, r3
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	4c45      	ldr	r4, [pc, #276]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 8004280:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004284:	e07f      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 32027:  lpscaleMK10E[index]=1;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	4a41      	ldr	r2, [pc, #260]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	441a      	add	r2, r3
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	4c40      	ldr	r4, [pc, #256]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 8004294:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004298:	e075      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 13351:  lpscaleMK10E[index]=1;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	441a      	add	r2, r3
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	4c3b      	ldr	r4, [pc, #236]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 80042a8:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 80042ac:	e06b      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46211:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <decodelpscaleMK10E+0x200>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	78fd      	ldrb	r5, [r7, #3]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc f957 	bl	8000568 <__aeabi_f2d>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	4934      	ldr	r1, [pc, #208]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 80042c0:	00ea      	lsls	r2, r5, #3
 80042c2:	440a      	add	r2, r1
 80042c4:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 80042c8:	e05d      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46212:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <decodelpscaleMK10E+0x200>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	78fd      	ldrb	r5, [r7, #3]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc f949 	bl	8000568 <__aeabi_f2d>
 80042d6:	4603      	mov	r3, r0
 80042d8:	460c      	mov	r4, r1
 80042da:	492d      	ldr	r1, [pc, #180]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 80042dc:	00ea      	lsls	r2, r5, #3
 80042de:	440a      	add	r2, r1
 80042e0:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 80042e4:	e04f      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46213:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <decodelpscaleMK10E+0x200>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	78fd      	ldrb	r5, [r7, #3]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc f93b 	bl	8000568 <__aeabi_f2d>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	4926      	ldr	r1, [pc, #152]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 80042f8:	00ea      	lsls	r2, r5, #3
 80042fa:	440a      	add	r2, r1
 80042fc:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004300:	e041      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46208:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 8004302:	4b25      	ldr	r3, [pc, #148]	; (8004398 <decodelpscaleMK10E+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	78fd      	ldrb	r5, [r7, #3]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc f92d 	bl	8000568 <__aeabi_f2d>
 800430e:	4603      	mov	r3, r0
 8004310:	460c      	mov	r4, r1
 8004312:	491f      	ldr	r1, [pc, #124]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004314:	00ea      	lsls	r2, r5, #3
 8004316:	440a      	add	r2, r1
 8004318:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 800431c:	e033      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46209:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <decodelpscaleMK10E+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	78fd      	ldrb	r5, [r7, #3]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f91f 	bl	8000568 <__aeabi_f2d>
 800432a:	4603      	mov	r3, r0
 800432c:	460c      	mov	r4, r1
 800432e:	4918      	ldr	r1, [pc, #96]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004330:	00ea      	lsls	r2, r5, #3
 8004332:	440a      	add	r2, r1
 8004334:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004338:	e025      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46210:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <decodelpscaleMK10E+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	78fd      	ldrb	r5, [r7, #3]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc f911 	bl	8000568 <__aeabi_f2d>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	4911      	ldr	r1, [pc, #68]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 800434c:	00ea      	lsls	r2, r5, #3
 800434e:	440a      	add	r2, r1
 8004350:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004354:	e017      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    case 46323  :  lpscaleMK10E[index]=(double)commonscale[PFSCALEIDX];
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <decodelpscaleMK10E+0x200>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	78fd      	ldrb	r5, [r7, #3]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc f903 	bl	8000568 <__aeabi_f2d>
 8004362:	4603      	mov	r3, r0
 8004364:	460c      	mov	r4, r1
 8004366:	490a      	ldr	r1, [pc, #40]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004368:	00ea      	lsls	r2, r5, #3
 800436a:	440a      	add	r2, r1
 800436c:	e9c2 3400 	strd	r3, r4, [r2]
                break;
 8004370:	e009      	b.n	8004386 <decodelpscaleMK10E+0x1ee>
    default:  lpscaleMK10E[index]=1;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <decodelpscaleMK10E+0x1f8>)
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	441a      	add	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	4c05      	ldr	r4, [pc, #20]	; (8004394 <decodelpscaleMK10E+0x1fc>)
 8004380:	e9c2 3400 	strd	r3, r4, [r2]
                break;    
 8004384:	bf00      	nop
  }
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bdb0      	pop	{r4, r5, r7, pc}
 800438e:	bf00      	nop
 8004390:	20002f50 	.word	0x20002f50
 8004394:	3ff00000 	.word	0x3ff00000
 8004398:	20002870 	.word	0x20002870

0800439c <decodelpinitMK10E>:

void decodelpinitMK10E(){
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
//	printf("\nDecode LPInit MK10E\n");
  for(int i=0;i<jmlchannel;i++){
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	e00c      	b.n	80043c2 <decodelpinitMK10E+0x26>
    // scale decode
    decodelpscaleMK10E(lpregm[i],i);
 80043a8:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <decodelpinitMK10E+0x3c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff feee 	bl	8004198 <decodelpscaleMK10E>
  for(int i=0;i<jmlchannel;i++){
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <decodelpinitMK10E+0x40>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	dbec      	blt.n	80043a8 <decodelpinitMK10E+0xc>
//    SerialMon.print(lpreg[i]);
//    SerialMon.print(" ");
//    SerialMonprintlnMK10E(lpscaleMK10E[i],7);
  }
//  printf("\r\n");
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	200089c0 	.word	0x200089c0
 80043dc:	200027f8 	.word	0x200027f8

080043e0 <decodelpdataMK10E>:

int decodelpdataMK10E(){
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
  double temp;//, temp1;
  //int dataint;
  for(int i=0;i<jmlchannel;i++){
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e05d      	b.n	80044a8 <decodelpdataMK10E+0xc8>
//    decodelpscaleMK10E(lpreg[i],i);
    decodelpscaleMK10E(lpregm[i],i);
 80043ec:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <decodelpdataMK10E+0xe0>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fecc 	bl	8004198 <decodelpscaleMK10E>
    myInt.i = 0;
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
    myInt.i = (int)(dataMK10E[i*2+1]);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	3301      	adds	r3, #1
 800440c:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <decodelpdataMK10E+0xe8>)
 800440e:	5cd3      	ldrb	r3, [r2, r3]
 8004410:	461a      	mov	r2, r3
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004414:	601a      	str	r2, [r3, #0]
    myInt.i = myInt.i<<8;
 8004416:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <decodelpdataMK10E+0xe4>)
 800441e:	6013      	str	r3, [r2, #0]
    myInt.i = myInt.i | (int)(dataMK10E[i*2]);
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	0052      	lsls	r2, r2, #1
 8004428:	4927      	ldr	r1, [pc, #156]	; (80044c8 <decodelpdataMK10E+0xe8>)
 800442a:	5c8a      	ldrb	r2, [r1, r2]
 800442c:	4313      	orrs	r3, r2
 800442e:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004430:	6013      	str	r3, [r2, #0]
    lpdataint[i] = myInt.i;
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4925      	ldr	r1, [pc, #148]	; (80044cc <decodelpdataMK10E+0xec>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdatauint[i] = myInt.ui;
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <decodelpdataMK10E+0xe4>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4923      	ldr	r1, [pc, #140]	; (80044d0 <decodelpdataMK10E+0xf0>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdataf[i]=(float) lpdatauint[i];
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <decodelpdataMK10E+0xf0>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <decodelpdataMK10E+0xf4>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	edc3 7a00 	vstr	s15, [r3]
    temp=(double)lpdataf[i];
 8004466:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <decodelpdataMK10E+0xf4>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc f879 	bl	8000568 <__aeabi_f2d>
 8004476:	4603      	mov	r3, r0
 8004478:	460c      	mov	r4, r1
 800447a:	e9c7 3400 	strd	r3, r4, [r7]
    lpdatad[i]=temp*lpscaleMK10E[i];
 800447e:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <decodelpdataMK10E+0xf8>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800448a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448e:	f7fc f8c3 	bl	8000618 <__aeabi_dmul>
 8004492:	4603      	mov	r3, r0
 8004494:	460c      	mov	r4, r1
 8004496:	4911      	ldr	r1, [pc, #68]	; (80044dc <decodelpdataMK10E+0xfc>)
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	00d2      	lsls	r2, r2, #3
 800449c:	440a      	add	r2, r1
 800449e:	e9c2 3400 	strd	r3, r4, [r2]
  for(int i=0;i<jmlchannel;i++){
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <decodelpdataMK10E+0x100>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	db9b      	blt.n	80043ec <decodelpdataMK10E+0xc>
//    printf("0x%X %.5f %d %.5f %.5f\r\n",lpreg[i],lpscaleMK10E[i],lpdataint[i],lpdataf[i],lpdatad[i]);
  }
  return 1;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	200089c0 	.word	0x200089c0
 80044c4:	200027f4 	.word	0x200027f4
 80044c8:	200030fc 	.word	0x200030fc
 80044cc:	20003e0c 	.word	0x20003e0c
 80044d0:	20003700 	.word	0x20003700
 80044d4:	20002fa4 	.word	0x20002fa4
 80044d8:	20002f50 	.word	0x20002f50
 80044dc:	200025c8 	.word	0x200025c8
 80044e0:	200027f8 	.word	0x200027f8

080044e4 <lp2JsonMK10E>:

void lp2JsonMK10E(){
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
//  printData(dataMK10E, data_lenMK10E);
	datastrclearMK10E();
 80044ea:	f7fe fefb 	bl	80032e4 <datastrclearMK10E>
    strcpy(datastrMK10E,"{\"mid\":");
 80044ee:	4a43      	ldr	r2, [pc, #268]	; (80045fc <lp2JsonMK10E+0x118>)
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <lp2JsonMK10E+0x11c>)
 80044f2:	cb03      	ldmia	r3!, {r0, r1}
 80044f4:	6010      	str	r0, [r2, #0]
 80044f6:	6051      	str	r1, [r2, #4]
    strcat(datastrMK10E, meterSNMK10E);
 80044f8:	4942      	ldr	r1, [pc, #264]	; (8004604 <lp2JsonMK10E+0x120>)
 80044fa:	4840      	ldr	r0, [pc, #256]	; (80045fc <lp2JsonMK10E+0x118>)
 80044fc:	f017 fc8c 	bl	801be18 <strcat>
    strcat(datastrMK10E, ",\"pid\":\"LPMK10E\",");
 8004500:	483e      	ldr	r0, [pc, #248]	; (80045fc <lp2JsonMK10E+0x118>)
 8004502:	f7fb fe6f 	bl	80001e4 <strlen>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b3c      	ldr	r3, [pc, #240]	; (80045fc <lp2JsonMK10E+0x118>)
 800450c:	4413      	add	r3, r2
 800450e:	4a3e      	ldr	r2, [pc, #248]	; (8004608 <lp2JsonMK10E+0x124>)
 8004510:	461d      	mov	r5, r3
 8004512:	4614      	mov	r4, r2
 8004514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004516:	6028      	str	r0, [r5, #0]
 8004518:	6069      	str	r1, [r5, #4]
 800451a:	60aa      	str	r2, [r5, #8]
 800451c:	60eb      	str	r3, [r5, #12]
 800451e:	8823      	ldrh	r3, [r4, #0]
 8004520:	822b      	strh	r3, [r5, #16]
//    strcat(datastrMK10E, ",\"pid\":\"LPMK10E\",\"readdate\":");
//      data2clearMK10E();
//      sprintf(data2MK10E,"%d,",timestamp_now);
//      strcat(datastrMK10E, data2MK10E);
      strcat(datastrMK10E, "\"3P65\":");
 8004522:	4836      	ldr	r0, [pc, #216]	; (80045fc <lp2JsonMK10E+0x118>)
 8004524:	f7fb fe5e 	bl	80001e4 <strlen>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <lp2JsonMK10E+0x118>)
 800452e:	4413      	add	r3, r2
 8004530:	4936      	ldr	r1, [pc, #216]	; (800460c <lp2JsonMK10E+0x128>)
 8004532:	461a      	mov	r2, r3
 8004534:	460b      	mov	r3, r1
 8004536:	cb03      	ldmia	r3!, {r0, r1}
 8004538:	6010      	str	r0, [r2, #0]
 800453a:	6051      	str	r1, [r2, #4]
      data2clearMK10E();
 800453c:	f7fe feb8 	bl	80032b0 <data2clearMK10E>
	sprintf(data2MK10E,"%ld,",lprecord);
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <lp2JsonMK10E+0x12c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4933      	ldr	r1, [pc, #204]	; (8004614 <lp2JsonMK10E+0x130>)
 8004548:	4833      	ldr	r0, [pc, #204]	; (8004618 <lp2JsonMK10E+0x134>)
 800454a:	f017 fc45 	bl	801bdd8 <siprintf>
    strcat(datastrMK10E, data2MK10E);
 800454e:	4932      	ldr	r1, [pc, #200]	; (8004618 <lp2JsonMK10E+0x134>)
 8004550:	482a      	ldr	r0, [pc, #168]	; (80045fc <lp2JsonMK10E+0x118>)
 8004552:	f017 fc61 	bl	801be18 <strcat>
  for(int i=0;i<jmlchannel;i++){
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	e045      	b.n	80045e8 <lp2JsonMK10E+0x104>
    if(i<jmlchannel-1){
 800455c:	4b2f      	ldr	r3, [pc, #188]	; (800461c <lp2JsonMK10E+0x138>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	da1e      	bge.n	80045a6 <lp2JsonMK10E+0xc2>
//      strcat(datastrMK10E, formatLPRegMK10E(lpreg[i]));
      strcat(datastrMK10E, formatLPRegMK10E(lpregm[i]));
 8004568:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <lp2JsonMK10E+0x13c>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff f9a3 	bl	80038bc <formatLPRegMK10E>
 8004576:	4603      	mov	r3, r0
 8004578:	4619      	mov	r1, r3
 800457a:	4820      	ldr	r0, [pc, #128]	; (80045fc <lp2JsonMK10E+0x118>)
 800457c:	f017 fc4c 	bl	801be18 <strcat>
      data2clearMK10E();
 8004580:	f7fe fe96 	bl	80032b0 <data2clearMK10E>
      sprintf(data2MK10E,":%.5f,",lpdatad[i]);
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <lp2JsonMK10E+0x140>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004590:	461a      	mov	r2, r3
 8004592:	4623      	mov	r3, r4
 8004594:	4924      	ldr	r1, [pc, #144]	; (8004628 <lp2JsonMK10E+0x144>)
 8004596:	4820      	ldr	r0, [pc, #128]	; (8004618 <lp2JsonMK10E+0x134>)
 8004598:	f017 fc1e 	bl	801bdd8 <siprintf>
      strcat(datastrMK10E, data2MK10E);
 800459c:	491e      	ldr	r1, [pc, #120]	; (8004618 <lp2JsonMK10E+0x134>)
 800459e:	4817      	ldr	r0, [pc, #92]	; (80045fc <lp2JsonMK10E+0x118>)
 80045a0:	f017 fc3a 	bl	801be18 <strcat>
 80045a4:	e01d      	b.n	80045e2 <lp2JsonMK10E+0xfe>
    }
    else {
//        strcat(datastrMK10E, formatLPRegMK10E(lpreg[i]));
        strcat(datastrMK10E, formatLPRegMK10E(lpregm[i]));
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <lp2JsonMK10E+0x13c>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f984 	bl	80038bc <formatLPRegMK10E>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4810      	ldr	r0, [pc, #64]	; (80045fc <lp2JsonMK10E+0x118>)
 80045ba:	f017 fc2d 	bl	801be18 <strcat>
        data2clearMK10E();
 80045be:	f7fe fe77 	bl	80032b0 <data2clearMK10E>
        sprintf(data2MK10E,":%.5f}",lpdatad[i]);
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <lp2JsonMK10E+0x140>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045ce:	461a      	mov	r2, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	4916      	ldr	r1, [pc, #88]	; (800462c <lp2JsonMK10E+0x148>)
 80045d4:	4810      	ldr	r0, [pc, #64]	; (8004618 <lp2JsonMK10E+0x134>)
 80045d6:	f017 fbff 	bl	801bdd8 <siprintf>
        strcat(datastrMK10E, data2MK10E);
 80045da:	490f      	ldr	r1, [pc, #60]	; (8004618 <lp2JsonMK10E+0x134>)
 80045dc:	4807      	ldr	r0, [pc, #28]	; (80045fc <lp2JsonMK10E+0x118>)
 80045de:	f017 fc1b 	bl	801be18 <strcat>
  for(int i=0;i<jmlchannel;i++){
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3301      	adds	r3, #1
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <lp2JsonMK10E+0x138>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4293      	cmp	r3, r2
 80045f2:	dbb3      	blt.n	800455c <lp2JsonMK10E+0x78>
    }
  }
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bdb0      	pop	{r4, r5, r7, pc}
 80045fc:	20002974 	.word	0x20002974
 8004600:	0801e014 	.word	0x0801e014
 8004604:	200000b0 	.word	0x200000b0
 8004608:	0801e3c0 	.word	0x0801e3c0
 800460c:	0801e3d4 	.word	0x0801e3d4
 8004610:	200038d0 	.word	0x200038d0
 8004614:	0801e064 	.word	0x0801e064
 8004618:	20003060 	.word	0x20003060
 800461c:	200027f8 	.word	0x200027f8
 8004620:	200089c0 	.word	0x200089c0
 8004624:	200025c8 	.word	0x200025c8
 8004628:	0801e3dc 	.word	0x0801e3dc
 800462c:	0801e3e4 	.word	0x0801e3e4

08004630 <txEobLpInitMK10E>:
//  printData(dataMK10E,data_lenMK10E);
//  HAL_Delay(1000);
  return 0;
}

void txEobLpInitMK10E(){
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 8004634:	f7fe fdfc 	bl	8003230 <dataallclearMK10E>
	data_lenMK10E = 0;
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <txEobLpInitMK10E+0x48>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
	dataMK10E[0]=0x02;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <txEobLpInitMK10E+0x4c>)
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]
	dataMK10E[1]=0x52;
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <txEobLpInitMK10E+0x4c>)
 8004646:	2252      	movs	r2, #82	; 0x52
 8004648:	705a      	strb	r2, [r3, #1]
	dataMK10E[2]=0xF5;
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <txEobLpInitMK10E+0x4c>)
 800464c:	22f5      	movs	r2, #245	; 0xf5
 800464e:	709a      	strb	r2, [r3, #2]
	dataMK10E[3]=0x32;
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <txEobLpInitMK10E+0x4c>)
 8004652:	2232      	movs	r2, #50	; 0x32
 8004654:	70da      	strb	r2, [r3, #3]
	dataMK10E[4]=0x27;
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <txEobLpInitMK10E+0x4c>)
 8004658:	2227      	movs	r2, #39	; 0x27
 800465a:	711a      	strb	r2, [r3, #4]
	dataMK10E[5]=0xE3;
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <txEobLpInitMK10E+0x4c>)
 800465e:	22e3      	movs	r2, #227	; 0xe3
 8004660:	715a      	strb	r2, [r3, #5]
	dataMK10E[6]=0x03;
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <txEobLpInitMK10E+0x4c>)
 8004664:	2203      	movs	r2, #3
 8004666:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)dataMK10E, 7, 100);
 8004668:	2364      	movs	r3, #100	; 0x64
 800466a:	2207      	movs	r2, #7
 800466c:	4903      	ldr	r1, [pc, #12]	; (800467c <txEobLpInitMK10E+0x4c>)
 800466e:	4804      	ldr	r0, [pc, #16]	; (8004680 <txEobLpInitMK10E+0x50>)
 8004670:	f00f fc0c 	bl	8013e8c <HAL_UART_Transmit>
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20002970 	.word	0x20002970
 800467c:	200030fc 	.word	0x200030fc
 8004680:	20002770 	.word	0x20002770

08004684 <rxEobLpInitMK10E>:

void rxEobLpInitMK10E(char* datain, int len){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  memcpy(dataMK10E,datain,len);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4807      	ldr	r0, [pc, #28]	; (80046b4 <rxEobLpInitMK10E+0x30>)
 8004696:	f016 fdfb 	bl	801b290 <memcpy>
  data_lenMK10E = datasize(dataMK10E);
 800469a:	4806      	ldr	r0, [pc, #24]	; (80046b4 <rxEobLpInitMK10E+0x30>)
 800469c:	f001 f898 	bl	80057d0 <datasize>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <rxEobLpInitMK10E+0x34>)
 80046a4:	601a      	str	r2, [r3, #0]
  decodeEobLpinitMK10E();
 80046a6:	f7ff f98d 	bl	80039c4 <decodeEobLpinitMK10E>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200030fc 	.word	0x200030fc
 80046b8:	20002970 	.word	0x20002970

080046bc <checkregEoBUnifiedMK10E>:
            return 0;
            break;
  }
}

const char *checkregEoBUnifiedMK10E(int reg){
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  switch(reg){
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f646 1227 	movw	r2, #26919	; 0x6927
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d06f      	beq.n	80047ae <checkregEoBUnifiedMK10E+0xf2>
 80046ce:	f646 1227 	movw	r2, #26919	; 0x6927
 80046d2:	4293      	cmp	r3, r2
 80046d4:	dc31      	bgt.n	800473a <checkregEoBUnifiedMK10E+0x7e>
 80046d6:	f646 1203 	movw	r2, #26883	; 0x6903
 80046da:	4293      	cmp	r3, r2
 80046dc:	d06d      	beq.n	80047ba <checkregEoBUnifiedMK10E+0xfe>
 80046de:	f646 1203 	movw	r2, #26883	; 0x6903
 80046e2:	4293      	cmp	r3, r2
 80046e4:	dc13      	bgt.n	800470e <checkregEoBUnifiedMK10E+0x52>
 80046e6:	f646 0217 	movw	r2, #26647	; 0x6817
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d05d      	beq.n	80047aa <checkregEoBUnifiedMK10E+0xee>
 80046ee:	f646 0217 	movw	r2, #26647	; 0x6817
 80046f2:	4293      	cmp	r3, r2
 80046f4:	dc02      	bgt.n	80046fc <checkregEoBUnifiedMK10E+0x40>
 80046f6:	2bff      	cmp	r3, #255	; 0xff
 80046f8:	d065      	beq.n	80047c6 <checkregEoBUnifiedMK10E+0x10a>
 80046fa:	e066      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 80046fc:	f646 0227 	movw	r2, #26663	; 0x6827
 8004700:	4293      	cmp	r3, r2
 8004702:	d054      	beq.n	80047ae <checkregEoBUnifiedMK10E+0xf2>
 8004704:	f646 0264 	movw	r2, #26724	; 0x6864
 8004708:	4293      	cmp	r3, r2
 800470a:	d05a      	beq.n	80047c2 <checkregEoBUnifiedMK10E+0x106>
 800470c:	e05d      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 800470e:	f646 1217 	movw	r2, #26903	; 0x6917
 8004712:	4293      	cmp	r3, r2
 8004714:	d049      	beq.n	80047aa <checkregEoBUnifiedMK10E+0xee>
 8004716:	f646 1217 	movw	r2, #26903	; 0x6917
 800471a:	4293      	cmp	r3, r2
 800471c:	dc04      	bgt.n	8004728 <checkregEoBUnifiedMK10E+0x6c>
 800471e:	f646 1213 	movw	r2, #26899	; 0x6913
 8004722:	4293      	cmp	r3, r2
 8004724:	d03d      	beq.n	80047a2 <checkregEoBUnifiedMK10E+0xe6>
 8004726:	e050      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 8004728:	f646 121b 	movw	r2, #26907	; 0x691b
 800472c:	4293      	cmp	r3, r2
 800472e:	d040      	beq.n	80047b2 <checkregEoBUnifiedMK10E+0xf6>
 8004730:	f646 1223 	movw	r2, #26915	; 0x6923
 8004734:	4293      	cmp	r3, r2
 8004736:	d036      	beq.n	80047a6 <checkregEoBUnifiedMK10E+0xea>
 8004738:	e047      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 800473a:	f646 2217 	movw	r2, #27159	; 0x6a17
 800473e:	4293      	cmp	r3, r2
 8004740:	d033      	beq.n	80047aa <checkregEoBUnifiedMK10E+0xee>
 8004742:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004746:	4293      	cmp	r3, r2
 8004748:	dc15      	bgt.n	8004776 <checkregEoBUnifiedMK10E+0xba>
 800474a:	f646 2203 	movw	r2, #27139	; 0x6a03
 800474e:	4293      	cmp	r3, r2
 8004750:	d033      	beq.n	80047ba <checkregEoBUnifiedMK10E+0xfe>
 8004752:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004756:	4293      	cmp	r3, r2
 8004758:	dc04      	bgt.n	8004764 <checkregEoBUnifiedMK10E+0xa8>
 800475a:	f646 122b 	movw	r2, #26923	; 0x692b
 800475e:	4293      	cmp	r3, r2
 8004760:	d029      	beq.n	80047b6 <checkregEoBUnifiedMK10E+0xfa>
 8004762:	e032      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 8004764:	f646 2207 	movw	r2, #27143	; 0x6a07
 8004768:	4293      	cmp	r3, r2
 800476a:	d028      	beq.n	80047be <checkregEoBUnifiedMK10E+0x102>
 800476c:	f646 2213 	movw	r2, #27155	; 0x6a13
 8004770:	4293      	cmp	r3, r2
 8004772:	d016      	beq.n	80047a2 <checkregEoBUnifiedMK10E+0xe6>
 8004774:	e029      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 8004776:	f646 2223 	movw	r2, #27171	; 0x6a23
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <checkregEoBUnifiedMK10E+0xea>
 800477e:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004782:	4293      	cmp	r3, r2
 8004784:	dc04      	bgt.n	8004790 <checkregEoBUnifiedMK10E+0xd4>
 8004786:	f646 221b 	movw	r2, #27163	; 0x6a1b
 800478a:	4293      	cmp	r3, r2
 800478c:	d011      	beq.n	80047b2 <checkregEoBUnifiedMK10E+0xf6>
 800478e:	e01c      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
 8004790:	f646 2227 	movw	r2, #27175	; 0x6a27
 8004794:	4293      	cmp	r3, r2
 8004796:	d00a      	beq.n	80047ae <checkregEoBUnifiedMK10E+0xf2>
 8004798:	f646 222b 	movw	r2, #27179	; 0x6a2b
 800479c:	4293      	cmp	r3, r2
 800479e:	d00a      	beq.n	80047b6 <checkregEoBUnifiedMK10E+0xfa>
 80047a0:	e013      	b.n	80047ca <checkregEoBUnifiedMK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P70\"";
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <checkregEoBUnifiedMK10E+0x11c>)
 80047a4:	e012      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P76\"";
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <checkregEoBUnifiedMK10E+0x120>)
 80047a8:	e010      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P82\"";
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <checkregEoBUnifiedMK10E+0x124>)
 80047ac:	e00e      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P88\"";
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <checkregEoBUnifiedMK10E+0x128>)
 80047b0:	e00c      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P94\"";
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <checkregEoBUnifiedMK10E+0x12c>)
 80047b4:	e00a      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P0A\"";
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <checkregEoBUnifiedMK10E+0x130>)
 80047b8:	e008      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P6A\"";
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <checkregEoBUnifiedMK10E+0x134>)
 80047bc:	e006      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PCA\"";
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <checkregEoBUnifiedMK10E+0x138>)
 80047c0:	e004      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <checkregEoBUnifiedMK10E+0x13c>)
 80047c4:	e002      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <checkregEoBUnifiedMK10E+0x140>)
 80047c8:	e000      	b.n	80047cc <checkregEoBUnifiedMK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <checkregEoBUnifiedMK10E+0x140>)
            return 0;
            break;
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	0801e0e8 	.word	0x0801e0e8
 80047dc:	0801e0e0 	.word	0x0801e0e0
 80047e0:	0801e0f8 	.word	0x0801e0f8
 80047e4:	0801e0f0 	.word	0x0801e0f0
 80047e8:	0801e108 	.word	0x0801e108
 80047ec:	0801e100 	.word	0x0801e100
 80047f0:	0801e110 	.word	0x0801e110
 80047f4:	0801e118 	.word	0x0801e118
 80047f8:	0801e41c 	.word	0x0801e41c
 80047fc:	0801e414 	.word	0x0801e414

08004800 <checkregEoBRate1MK10E>:

const char * checkregEoBRate1MK10E(int reg){
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f646 1227 	movw	r2, #26919	; 0x6927
 800480e:	4293      	cmp	r3, r2
 8004810:	d06f      	beq.n	80048f2 <checkregEoBRate1MK10E+0xf2>
 8004812:	f646 1227 	movw	r2, #26919	; 0x6927
 8004816:	4293      	cmp	r3, r2
 8004818:	dc31      	bgt.n	800487e <checkregEoBRate1MK10E+0x7e>
 800481a:	f646 1203 	movw	r2, #26883	; 0x6903
 800481e:	4293      	cmp	r3, r2
 8004820:	d06d      	beq.n	80048fe <checkregEoBRate1MK10E+0xfe>
 8004822:	f646 1203 	movw	r2, #26883	; 0x6903
 8004826:	4293      	cmp	r3, r2
 8004828:	dc13      	bgt.n	8004852 <checkregEoBRate1MK10E+0x52>
 800482a:	f646 0217 	movw	r2, #26647	; 0x6817
 800482e:	4293      	cmp	r3, r2
 8004830:	d05d      	beq.n	80048ee <checkregEoBRate1MK10E+0xee>
 8004832:	f646 0217 	movw	r2, #26647	; 0x6817
 8004836:	4293      	cmp	r3, r2
 8004838:	dc02      	bgt.n	8004840 <checkregEoBRate1MK10E+0x40>
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d065      	beq.n	800490a <checkregEoBRate1MK10E+0x10a>
 800483e:	e066      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 8004840:	f646 0227 	movw	r2, #26663	; 0x6827
 8004844:	4293      	cmp	r3, r2
 8004846:	d054      	beq.n	80048f2 <checkregEoBRate1MK10E+0xf2>
 8004848:	f646 0264 	movw	r2, #26724	; 0x6864
 800484c:	4293      	cmp	r3, r2
 800484e:	d05a      	beq.n	8004906 <checkregEoBRate1MK10E+0x106>
 8004850:	e05d      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 8004852:	f646 1217 	movw	r2, #26903	; 0x6917
 8004856:	4293      	cmp	r3, r2
 8004858:	d049      	beq.n	80048ee <checkregEoBRate1MK10E+0xee>
 800485a:	f646 1217 	movw	r2, #26903	; 0x6917
 800485e:	4293      	cmp	r3, r2
 8004860:	dc04      	bgt.n	800486c <checkregEoBRate1MK10E+0x6c>
 8004862:	f646 1213 	movw	r2, #26899	; 0x6913
 8004866:	4293      	cmp	r3, r2
 8004868:	d03d      	beq.n	80048e6 <checkregEoBRate1MK10E+0xe6>
 800486a:	e050      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 800486c:	f646 121b 	movw	r2, #26907	; 0x691b
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <checkregEoBRate1MK10E+0xf6>
 8004874:	f646 1223 	movw	r2, #26915	; 0x6923
 8004878:	4293      	cmp	r3, r2
 800487a:	d036      	beq.n	80048ea <checkregEoBRate1MK10E+0xea>
 800487c:	e047      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 800487e:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004882:	4293      	cmp	r3, r2
 8004884:	d033      	beq.n	80048ee <checkregEoBRate1MK10E+0xee>
 8004886:	f646 2217 	movw	r2, #27159	; 0x6a17
 800488a:	4293      	cmp	r3, r2
 800488c:	dc15      	bgt.n	80048ba <checkregEoBRate1MK10E+0xba>
 800488e:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004892:	4293      	cmp	r3, r2
 8004894:	d033      	beq.n	80048fe <checkregEoBRate1MK10E+0xfe>
 8004896:	f646 2203 	movw	r2, #27139	; 0x6a03
 800489a:	4293      	cmp	r3, r2
 800489c:	dc04      	bgt.n	80048a8 <checkregEoBRate1MK10E+0xa8>
 800489e:	f646 122b 	movw	r2, #26923	; 0x692b
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d029      	beq.n	80048fa <checkregEoBRate1MK10E+0xfa>
 80048a6:	e032      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 80048a8:	f646 2207 	movw	r2, #27143	; 0x6a07
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d028      	beq.n	8004902 <checkregEoBRate1MK10E+0x102>
 80048b0:	f646 2213 	movw	r2, #27155	; 0x6a13
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d016      	beq.n	80048e6 <checkregEoBRate1MK10E+0xe6>
 80048b8:	e029      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 80048ba:	f646 2223 	movw	r2, #27171	; 0x6a23
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <checkregEoBRate1MK10E+0xea>
 80048c2:	f646 2223 	movw	r2, #27171	; 0x6a23
 80048c6:	4293      	cmp	r3, r2
 80048c8:	dc04      	bgt.n	80048d4 <checkregEoBRate1MK10E+0xd4>
 80048ca:	f646 221b 	movw	r2, #27163	; 0x6a1b
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d011      	beq.n	80048f6 <checkregEoBRate1MK10E+0xf6>
 80048d2:	e01c      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
 80048d4:	f646 2227 	movw	r2, #27175	; 0x6a27
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00a      	beq.n	80048f2 <checkregEoBRate1MK10E+0xf2>
 80048dc:	f646 222b 	movw	r2, #27179	; 0x6a2b
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00a      	beq.n	80048fa <checkregEoBRate1MK10E+0xfa>
 80048e4:	e013      	b.n	800490e <checkregEoBRate1MK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P71\"";
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <checkregEoBRate1MK10E+0x11c>)
 80048e8:	e012      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P77\"";
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <checkregEoBRate1MK10E+0x120>)
 80048ec:	e010      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P83\"";
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <checkregEoBRate1MK10E+0x124>)
 80048f0:	e00e      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P89\"";
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <checkregEoBRate1MK10E+0x128>)
 80048f4:	e00c      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P95\"";
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <checkregEoBRate1MK10E+0x12c>)
 80048f8:	e00a      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P1A\"";
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <checkregEoBRate1MK10E+0x130>)
 80048fc:	e008      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P7A\"";
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <checkregEoBRate1MK10E+0x134>)
 8004900:	e006      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PDA\"";
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <checkregEoBRate1MK10E+0x138>)
 8004904:	e004      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <checkregEoBRate1MK10E+0x13c>)
 8004908:	e002      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 800490a:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <checkregEoBRate1MK10E+0x140>)
 800490c:	e000      	b.n	8004910 <checkregEoBRate1MK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <checkregEoBRate1MK10E+0x140>)
            return 0;
            break;
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	0801e130 	.word	0x0801e130
 8004920:	0801e128 	.word	0x0801e128
 8004924:	0801e140 	.word	0x0801e140
 8004928:	0801e138 	.word	0x0801e138
 800492c:	0801e150 	.word	0x0801e150
 8004930:	0801e148 	.word	0x0801e148
 8004934:	0801e158 	.word	0x0801e158
 8004938:	0801e160 	.word	0x0801e160
 800493c:	0801e41c 	.word	0x0801e41c
 8004940:	0801e414 	.word	0x0801e414

08004944 <checkregEoBRate2MK10E>:

const char * checkregEoBRate2MK10E(int reg){
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  switch(reg){
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f646 1227 	movw	r2, #26919	; 0x6927
 8004952:	4293      	cmp	r3, r2
 8004954:	d06f      	beq.n	8004a36 <checkregEoBRate2MK10E+0xf2>
 8004956:	f646 1227 	movw	r2, #26919	; 0x6927
 800495a:	4293      	cmp	r3, r2
 800495c:	dc31      	bgt.n	80049c2 <checkregEoBRate2MK10E+0x7e>
 800495e:	f646 1203 	movw	r2, #26883	; 0x6903
 8004962:	4293      	cmp	r3, r2
 8004964:	d06d      	beq.n	8004a42 <checkregEoBRate2MK10E+0xfe>
 8004966:	f646 1203 	movw	r2, #26883	; 0x6903
 800496a:	4293      	cmp	r3, r2
 800496c:	dc13      	bgt.n	8004996 <checkregEoBRate2MK10E+0x52>
 800496e:	f646 0217 	movw	r2, #26647	; 0x6817
 8004972:	4293      	cmp	r3, r2
 8004974:	d05d      	beq.n	8004a32 <checkregEoBRate2MK10E+0xee>
 8004976:	f646 0217 	movw	r2, #26647	; 0x6817
 800497a:	4293      	cmp	r3, r2
 800497c:	dc02      	bgt.n	8004984 <checkregEoBRate2MK10E+0x40>
 800497e:	2bff      	cmp	r3, #255	; 0xff
 8004980:	d065      	beq.n	8004a4e <checkregEoBRate2MK10E+0x10a>
 8004982:	e066      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 8004984:	f646 0227 	movw	r2, #26663	; 0x6827
 8004988:	4293      	cmp	r3, r2
 800498a:	d054      	beq.n	8004a36 <checkregEoBRate2MK10E+0xf2>
 800498c:	f646 0264 	movw	r2, #26724	; 0x6864
 8004990:	4293      	cmp	r3, r2
 8004992:	d05a      	beq.n	8004a4a <checkregEoBRate2MK10E+0x106>
 8004994:	e05d      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 8004996:	f646 1217 	movw	r2, #26903	; 0x6917
 800499a:	4293      	cmp	r3, r2
 800499c:	d049      	beq.n	8004a32 <checkregEoBRate2MK10E+0xee>
 800499e:	f646 1217 	movw	r2, #26903	; 0x6917
 80049a2:	4293      	cmp	r3, r2
 80049a4:	dc04      	bgt.n	80049b0 <checkregEoBRate2MK10E+0x6c>
 80049a6:	f646 1213 	movw	r2, #26899	; 0x6913
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03d      	beq.n	8004a2a <checkregEoBRate2MK10E+0xe6>
 80049ae:	e050      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 80049b0:	f646 121b 	movw	r2, #26907	; 0x691b
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d040      	beq.n	8004a3a <checkregEoBRate2MK10E+0xf6>
 80049b8:	f646 1223 	movw	r2, #26915	; 0x6923
 80049bc:	4293      	cmp	r3, r2
 80049be:	d036      	beq.n	8004a2e <checkregEoBRate2MK10E+0xea>
 80049c0:	e047      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 80049c2:	f646 2217 	movw	r2, #27159	; 0x6a17
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d033      	beq.n	8004a32 <checkregEoBRate2MK10E+0xee>
 80049ca:	f646 2217 	movw	r2, #27159	; 0x6a17
 80049ce:	4293      	cmp	r3, r2
 80049d0:	dc15      	bgt.n	80049fe <checkregEoBRate2MK10E+0xba>
 80049d2:	f646 2203 	movw	r2, #27139	; 0x6a03
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d033      	beq.n	8004a42 <checkregEoBRate2MK10E+0xfe>
 80049da:	f646 2203 	movw	r2, #27139	; 0x6a03
 80049de:	4293      	cmp	r3, r2
 80049e0:	dc04      	bgt.n	80049ec <checkregEoBRate2MK10E+0xa8>
 80049e2:	f646 122b 	movw	r2, #26923	; 0x692b
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d029      	beq.n	8004a3e <checkregEoBRate2MK10E+0xfa>
 80049ea:	e032      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 80049ec:	f646 2207 	movw	r2, #27143	; 0x6a07
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d028      	beq.n	8004a46 <checkregEoBRate2MK10E+0x102>
 80049f4:	f646 2213 	movw	r2, #27155	; 0x6a13
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d016      	beq.n	8004a2a <checkregEoBRate2MK10E+0xe6>
 80049fc:	e029      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 80049fe:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <checkregEoBRate2MK10E+0xea>
 8004a06:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	dc04      	bgt.n	8004a18 <checkregEoBRate2MK10E+0xd4>
 8004a0e:	f646 221b 	movw	r2, #27163	; 0x6a1b
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d011      	beq.n	8004a3a <checkregEoBRate2MK10E+0xf6>
 8004a16:	e01c      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
 8004a18:	f646 2227 	movw	r2, #27175	; 0x6a27
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00a      	beq.n	8004a36 <checkregEoBRate2MK10E+0xf2>
 8004a20:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00a      	beq.n	8004a3e <checkregEoBRate2MK10E+0xfa>
 8004a28:	e013      	b.n	8004a52 <checkregEoBRate2MK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P72\"";
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <checkregEoBRate2MK10E+0x11c>)
 8004a2c:	e012      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P78\"";
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <checkregEoBRate2MK10E+0x120>)
 8004a30:	e010      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P84\"";
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <checkregEoBRate2MK10E+0x124>)
 8004a34:	e00e      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P90\"";
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <checkregEoBRate2MK10E+0x128>)
 8004a38:	e00c      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P96\"";
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <checkregEoBRate2MK10E+0x12c>)
 8004a3c:	e00a      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P2A\"";
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <checkregEoBRate2MK10E+0x130>)
 8004a40:	e008      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P8A\"";
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <checkregEoBRate2MK10E+0x134>)
 8004a44:	e006      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PEA\"";
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <checkregEoBRate2MK10E+0x138>)
 8004a48:	e004      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <checkregEoBRate2MK10E+0x13c>)
 8004a4c:	e002      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <checkregEoBRate2MK10E+0x140>)
 8004a50:	e000      	b.n	8004a54 <checkregEoBRate2MK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <checkregEoBRate2MK10E+0x140>)
            return 0;
            break;
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	0801e178 	.word	0x0801e178
 8004a64:	0801e170 	.word	0x0801e170
 8004a68:	0801e188 	.word	0x0801e188
 8004a6c:	0801e180 	.word	0x0801e180
 8004a70:	0801e198 	.word	0x0801e198
 8004a74:	0801e190 	.word	0x0801e190
 8004a78:	0801e1a0 	.word	0x0801e1a0
 8004a7c:	0801e1a8 	.word	0x0801e1a8
 8004a80:	0801e41c 	.word	0x0801e41c
 8004a84:	0801e414 	.word	0x0801e414

08004a88 <checkregEoBRate3MK10E>:

const char * checkregEoBRate3MK10E(int reg){
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f646 1227 	movw	r2, #26919	; 0x6927
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d06f      	beq.n	8004b7a <checkregEoBRate3MK10E+0xf2>
 8004a9a:	f646 1227 	movw	r2, #26919	; 0x6927
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	dc31      	bgt.n	8004b06 <checkregEoBRate3MK10E+0x7e>
 8004aa2:	f646 1203 	movw	r2, #26883	; 0x6903
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d06d      	beq.n	8004b86 <checkregEoBRate3MK10E+0xfe>
 8004aaa:	f646 1203 	movw	r2, #26883	; 0x6903
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	dc13      	bgt.n	8004ada <checkregEoBRate3MK10E+0x52>
 8004ab2:	f646 0217 	movw	r2, #26647	; 0x6817
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d05d      	beq.n	8004b76 <checkregEoBRate3MK10E+0xee>
 8004aba:	f646 0217 	movw	r2, #26647	; 0x6817
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	dc02      	bgt.n	8004ac8 <checkregEoBRate3MK10E+0x40>
 8004ac2:	2bff      	cmp	r3, #255	; 0xff
 8004ac4:	d065      	beq.n	8004b92 <checkregEoBRate3MK10E+0x10a>
 8004ac6:	e066      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004ac8:	f646 0227 	movw	r2, #26663	; 0x6827
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d054      	beq.n	8004b7a <checkregEoBRate3MK10E+0xf2>
 8004ad0:	f646 0264 	movw	r2, #26724	; 0x6864
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d05a      	beq.n	8004b8e <checkregEoBRate3MK10E+0x106>
 8004ad8:	e05d      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004ada:	f646 1217 	movw	r2, #26903	; 0x6917
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d049      	beq.n	8004b76 <checkregEoBRate3MK10E+0xee>
 8004ae2:	f646 1217 	movw	r2, #26903	; 0x6917
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	dc04      	bgt.n	8004af4 <checkregEoBRate3MK10E+0x6c>
 8004aea:	f646 1213 	movw	r2, #26899	; 0x6913
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d03d      	beq.n	8004b6e <checkregEoBRate3MK10E+0xe6>
 8004af2:	e050      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004af4:	f646 121b 	movw	r2, #26907	; 0x691b
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d040      	beq.n	8004b7e <checkregEoBRate3MK10E+0xf6>
 8004afc:	f646 1223 	movw	r2, #26915	; 0x6923
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d036      	beq.n	8004b72 <checkregEoBRate3MK10E+0xea>
 8004b04:	e047      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004b06:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d033      	beq.n	8004b76 <checkregEoBRate3MK10E+0xee>
 8004b0e:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004b12:	4293      	cmp	r3, r2
 8004b14:	dc15      	bgt.n	8004b42 <checkregEoBRate3MK10E+0xba>
 8004b16:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d033      	beq.n	8004b86 <checkregEoBRate3MK10E+0xfe>
 8004b1e:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004b22:	4293      	cmp	r3, r2
 8004b24:	dc04      	bgt.n	8004b30 <checkregEoBRate3MK10E+0xa8>
 8004b26:	f646 122b 	movw	r2, #26923	; 0x692b
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d029      	beq.n	8004b82 <checkregEoBRate3MK10E+0xfa>
 8004b2e:	e032      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004b30:	f646 2207 	movw	r2, #27143	; 0x6a07
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d028      	beq.n	8004b8a <checkregEoBRate3MK10E+0x102>
 8004b38:	f646 2213 	movw	r2, #27155	; 0x6a13
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d016      	beq.n	8004b6e <checkregEoBRate3MK10E+0xe6>
 8004b40:	e029      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004b42:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <checkregEoBRate3MK10E+0xea>
 8004b4a:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	dc04      	bgt.n	8004b5c <checkregEoBRate3MK10E+0xd4>
 8004b52:	f646 221b 	movw	r2, #27163	; 0x6a1b
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d011      	beq.n	8004b7e <checkregEoBRate3MK10E+0xf6>
 8004b5a:	e01c      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
 8004b5c:	f646 2227 	movw	r2, #27175	; 0x6a27
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00a      	beq.n	8004b7a <checkregEoBRate3MK10E+0xf2>
 8004b64:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00a      	beq.n	8004b82 <checkregEoBRate3MK10E+0xfa>
 8004b6c:	e013      	b.n	8004b96 <checkregEoBRate3MK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P73\"";
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <checkregEoBRate3MK10E+0x11c>)
 8004b70:	e012      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P79\"";
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <checkregEoBRate3MK10E+0x120>)
 8004b74:	e010      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P85\"";
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <checkregEoBRate3MK10E+0x124>)
 8004b78:	e00e      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P91\"";
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <checkregEoBRate3MK10E+0x128>)
 8004b7c:	e00c      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P97\"";
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <checkregEoBRate3MK10E+0x12c>)
 8004b80:	e00a      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P3A\"";
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <checkregEoBRate3MK10E+0x130>)
 8004b84:	e008      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P9A\"";
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <checkregEoBRate3MK10E+0x134>)
 8004b88:	e006      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PFA\"";
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <checkregEoBRate3MK10E+0x138>)
 8004b8c:	e004      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <checkregEoBRate3MK10E+0x13c>)
 8004b90:	e002      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <checkregEoBRate3MK10E+0x140>)
 8004b94:	e000      	b.n	8004b98 <checkregEoBRate3MK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <checkregEoBRate3MK10E+0x140>)
            return 0;
            break;
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	0801e1c0 	.word	0x0801e1c0
 8004ba8:	0801e1b8 	.word	0x0801e1b8
 8004bac:	0801e1d0 	.word	0x0801e1d0
 8004bb0:	0801e1c8 	.word	0x0801e1c8
 8004bb4:	0801e1e0 	.word	0x0801e1e0
 8004bb8:	0801e1d8 	.word	0x0801e1d8
 8004bbc:	0801e1e8 	.word	0x0801e1e8
 8004bc0:	0801e1f0 	.word	0x0801e1f0
 8004bc4:	0801e41c 	.word	0x0801e41c
 8004bc8:	0801e414 	.word	0x0801e414

08004bcc <checkregEoBRate4MK10E>:

const char * checkregEoBRate4MK10E(int reg){
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f646 1227 	movw	r2, #26919	; 0x6927
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d06f      	beq.n	8004cbe <checkregEoBRate4MK10E+0xf2>
 8004bde:	f646 1227 	movw	r2, #26919	; 0x6927
 8004be2:	4293      	cmp	r3, r2
 8004be4:	dc31      	bgt.n	8004c4a <checkregEoBRate4MK10E+0x7e>
 8004be6:	f646 1203 	movw	r2, #26883	; 0x6903
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d06d      	beq.n	8004cca <checkregEoBRate4MK10E+0xfe>
 8004bee:	f646 1203 	movw	r2, #26883	; 0x6903
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	dc13      	bgt.n	8004c1e <checkregEoBRate4MK10E+0x52>
 8004bf6:	f646 0217 	movw	r2, #26647	; 0x6817
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d05d      	beq.n	8004cba <checkregEoBRate4MK10E+0xee>
 8004bfe:	f646 0217 	movw	r2, #26647	; 0x6817
 8004c02:	4293      	cmp	r3, r2
 8004c04:	dc02      	bgt.n	8004c0c <checkregEoBRate4MK10E+0x40>
 8004c06:	2bff      	cmp	r3, #255	; 0xff
 8004c08:	d065      	beq.n	8004cd6 <checkregEoBRate4MK10E+0x10a>
 8004c0a:	e066      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c0c:	f646 0227 	movw	r2, #26663	; 0x6827
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d054      	beq.n	8004cbe <checkregEoBRate4MK10E+0xf2>
 8004c14:	f646 0264 	movw	r2, #26724	; 0x6864
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d05a      	beq.n	8004cd2 <checkregEoBRate4MK10E+0x106>
 8004c1c:	e05d      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c1e:	f646 1217 	movw	r2, #26903	; 0x6917
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d049      	beq.n	8004cba <checkregEoBRate4MK10E+0xee>
 8004c26:	f646 1217 	movw	r2, #26903	; 0x6917
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	dc04      	bgt.n	8004c38 <checkregEoBRate4MK10E+0x6c>
 8004c2e:	f646 1213 	movw	r2, #26899	; 0x6913
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d03d      	beq.n	8004cb2 <checkregEoBRate4MK10E+0xe6>
 8004c36:	e050      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c38:	f646 121b 	movw	r2, #26907	; 0x691b
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <checkregEoBRate4MK10E+0xf6>
 8004c40:	f646 1223 	movw	r2, #26915	; 0x6923
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d036      	beq.n	8004cb6 <checkregEoBRate4MK10E+0xea>
 8004c48:	e047      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c4a:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d033      	beq.n	8004cba <checkregEoBRate4MK10E+0xee>
 8004c52:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004c56:	4293      	cmp	r3, r2
 8004c58:	dc15      	bgt.n	8004c86 <checkregEoBRate4MK10E+0xba>
 8004c5a:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d033      	beq.n	8004cca <checkregEoBRate4MK10E+0xfe>
 8004c62:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004c66:	4293      	cmp	r3, r2
 8004c68:	dc04      	bgt.n	8004c74 <checkregEoBRate4MK10E+0xa8>
 8004c6a:	f646 122b 	movw	r2, #26923	; 0x692b
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d029      	beq.n	8004cc6 <checkregEoBRate4MK10E+0xfa>
 8004c72:	e032      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c74:	f646 2207 	movw	r2, #27143	; 0x6a07
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d028      	beq.n	8004cce <checkregEoBRate4MK10E+0x102>
 8004c7c:	f646 2213 	movw	r2, #27155	; 0x6a13
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d016      	beq.n	8004cb2 <checkregEoBRate4MK10E+0xe6>
 8004c84:	e029      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004c86:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <checkregEoBRate4MK10E+0xea>
 8004c8e:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004c92:	4293      	cmp	r3, r2
 8004c94:	dc04      	bgt.n	8004ca0 <checkregEoBRate4MK10E+0xd4>
 8004c96:	f646 221b 	movw	r2, #27163	; 0x6a1b
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d011      	beq.n	8004cc2 <checkregEoBRate4MK10E+0xf6>
 8004c9e:	e01c      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
 8004ca0:	f646 2227 	movw	r2, #27175	; 0x6a27
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00a      	beq.n	8004cbe <checkregEoBRate4MK10E+0xf2>
 8004ca8:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00a      	beq.n	8004cc6 <checkregEoBRate4MK10E+0xfa>
 8004cb0:	e013      	b.n	8004cda <checkregEoBRate4MK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P74\"";
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <checkregEoBRate4MK10E+0x11c>)
 8004cb4:	e012      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P80\"";
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <checkregEoBRate4MK10E+0x120>)
 8004cb8:	e010      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P86\"";
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <checkregEoBRate4MK10E+0x124>)
 8004cbc:	e00e      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P92\"";
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <checkregEoBRate4MK10E+0x128>)
 8004cc0:	e00c      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P98\"";
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <checkregEoBRate4MK10E+0x12c>)
 8004cc4:	e00a      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P4A\"";
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <checkregEoBRate4MK10E+0x130>)
 8004cc8:	e008      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3PAA\"";
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <checkregEoBRate4MK10E+0x134>)
 8004ccc:	e006      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3P0B\"";
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <checkregEoBRate4MK10E+0x138>)
 8004cd0:	e004      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <checkregEoBRate4MK10E+0x13c>)
 8004cd4:	e002      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <checkregEoBRate4MK10E+0x140>)
 8004cd8:	e000      	b.n	8004cdc <checkregEoBRate4MK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <checkregEoBRate4MK10E+0x140>)
            return 0;
            break;
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	0801e208 	.word	0x0801e208
 8004cec:	0801e200 	.word	0x0801e200
 8004cf0:	0801e218 	.word	0x0801e218
 8004cf4:	0801e210 	.word	0x0801e210
 8004cf8:	0801e228 	.word	0x0801e228
 8004cfc:	0801e220 	.word	0x0801e220
 8004d00:	0801e230 	.word	0x0801e230
 8004d04:	0801e238 	.word	0x0801e238
 8004d08:	0801e41c 	.word	0x0801e41c
 8004d0c:	0801e414 	.word	0x0801e414

08004d10 <checkregEoBRate5MK10E>:

const char * checkregEoBRate5MK10E(int reg){
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f646 1227 	movw	r2, #26919	; 0x6927
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d06f      	beq.n	8004e02 <checkregEoBRate5MK10E+0xf2>
 8004d22:	f646 1227 	movw	r2, #26919	; 0x6927
 8004d26:	4293      	cmp	r3, r2
 8004d28:	dc31      	bgt.n	8004d8e <checkregEoBRate5MK10E+0x7e>
 8004d2a:	f646 1203 	movw	r2, #26883	; 0x6903
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d06d      	beq.n	8004e0e <checkregEoBRate5MK10E+0xfe>
 8004d32:	f646 1203 	movw	r2, #26883	; 0x6903
 8004d36:	4293      	cmp	r3, r2
 8004d38:	dc13      	bgt.n	8004d62 <checkregEoBRate5MK10E+0x52>
 8004d3a:	f646 0217 	movw	r2, #26647	; 0x6817
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d05d      	beq.n	8004dfe <checkregEoBRate5MK10E+0xee>
 8004d42:	f646 0217 	movw	r2, #26647	; 0x6817
 8004d46:	4293      	cmp	r3, r2
 8004d48:	dc02      	bgt.n	8004d50 <checkregEoBRate5MK10E+0x40>
 8004d4a:	2bff      	cmp	r3, #255	; 0xff
 8004d4c:	d065      	beq.n	8004e1a <checkregEoBRate5MK10E+0x10a>
 8004d4e:	e066      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004d50:	f646 0227 	movw	r2, #26663	; 0x6827
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d054      	beq.n	8004e02 <checkregEoBRate5MK10E+0xf2>
 8004d58:	f646 0264 	movw	r2, #26724	; 0x6864
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d05a      	beq.n	8004e16 <checkregEoBRate5MK10E+0x106>
 8004d60:	e05d      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004d62:	f646 1217 	movw	r2, #26903	; 0x6917
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d049      	beq.n	8004dfe <checkregEoBRate5MK10E+0xee>
 8004d6a:	f646 1217 	movw	r2, #26903	; 0x6917
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	dc04      	bgt.n	8004d7c <checkregEoBRate5MK10E+0x6c>
 8004d72:	f646 1213 	movw	r2, #26899	; 0x6913
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d03d      	beq.n	8004df6 <checkregEoBRate5MK10E+0xe6>
 8004d7a:	e050      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004d7c:	f646 121b 	movw	r2, #26907	; 0x691b
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d040      	beq.n	8004e06 <checkregEoBRate5MK10E+0xf6>
 8004d84:	f646 1223 	movw	r2, #26915	; 0x6923
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <checkregEoBRate5MK10E+0xea>
 8004d8c:	e047      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004d8e:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d033      	beq.n	8004dfe <checkregEoBRate5MK10E+0xee>
 8004d96:	f646 2217 	movw	r2, #27159	; 0x6a17
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	dc15      	bgt.n	8004dca <checkregEoBRate5MK10E+0xba>
 8004d9e:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d033      	beq.n	8004e0e <checkregEoBRate5MK10E+0xfe>
 8004da6:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004daa:	4293      	cmp	r3, r2
 8004dac:	dc04      	bgt.n	8004db8 <checkregEoBRate5MK10E+0xa8>
 8004dae:	f646 122b 	movw	r2, #26923	; 0x692b
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d029      	beq.n	8004e0a <checkregEoBRate5MK10E+0xfa>
 8004db6:	e032      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004db8:	f646 2207 	movw	r2, #27143	; 0x6a07
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d028      	beq.n	8004e12 <checkregEoBRate5MK10E+0x102>
 8004dc0:	f646 2213 	movw	r2, #27155	; 0x6a13
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d016      	beq.n	8004df6 <checkregEoBRate5MK10E+0xe6>
 8004dc8:	e029      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004dca:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <checkregEoBRate5MK10E+0xea>
 8004dd2:	f646 2223 	movw	r2, #27171	; 0x6a23
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	dc04      	bgt.n	8004de4 <checkregEoBRate5MK10E+0xd4>
 8004dda:	f646 221b 	movw	r2, #27163	; 0x6a1b
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d011      	beq.n	8004e06 <checkregEoBRate5MK10E+0xf6>
 8004de2:	e01c      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
 8004de4:	f646 2227 	movw	r2, #27175	; 0x6a27
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00a      	beq.n	8004e02 <checkregEoBRate5MK10E+0xf2>
 8004dec:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00a      	beq.n	8004e0a <checkregEoBRate5MK10E+0xfa>
 8004df4:	e013      	b.n	8004e1e <checkregEoBRate5MK10E+0x10e>
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P75\"";
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <checkregEoBRate5MK10E+0x11c>)
 8004df8:	e012      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P81\"";
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <checkregEoBRate5MK10E+0x120>)
 8004dfc:	e010      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P87\"";
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <checkregEoBRate5MK10E+0x124>)
 8004e00:	e00e      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P93\"";
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <checkregEoBRate5MK10E+0x128>)
 8004e04:	e00c      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P99\"";
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <checkregEoBRate5MK10E+0x12c>)
 8004e08:	e00a      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P5A\"";
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <checkregEoBRate5MK10E+0x130>)
 8004e0c:	e008      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3PBA\"";
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <checkregEoBRate5MK10E+0x134>)
 8004e10:	e006      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3P1B\"";
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <checkregEoBRate5MK10E+0x138>)
 8004e14:	e004      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <checkregEoBRate5MK10E+0x13c>)
 8004e18:	e002      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    case 255:
            return "\"00FF\"";
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <checkregEoBRate5MK10E+0x140>)
 8004e1c:	e000      	b.n	8004e20 <checkregEoBRate5MK10E+0x110>

            break;
    default:
            return "\"00FF\"";
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <checkregEoBRate5MK10E+0x140>)
            return 0;
            break;
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	0801e248 	.word	0x0801e248
 8004e30:	0801e424 	.word	0x0801e424
 8004e34:	0801e258 	.word	0x0801e258
 8004e38:	0801e250 	.word	0x0801e250
 8004e3c:	0801e268 	.word	0x0801e268
 8004e40:	0801e260 	.word	0x0801e260
 8004e44:	0801e270 	.word	0x0801e270
 8004e48:	0801e278 	.word	0x0801e278
 8004e4c:	0801e41c 	.word	0x0801e41c
 8004e50:	0801e414 	.word	0x0801e414

08004e54 <decodeEoBMK10E>:

void decodeEoBMK10E(){
 8004e54:	b5b0      	push	{r4, r5, r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	int1=7;
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <decodeEoBMK10E+0x50>)
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	601a      	str	r2, [r3, #0]
	datastrclearMK10E();
 8004e60:	f7fe fa40 	bl	80032e4 <datastrclearMK10E>
    strcpy(datastrMK10E,"{\"mid\":");
 8004e64:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <decodeEoBMK10E+0x54>)
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <decodeEoBMK10E+0x58>)
 8004e68:	cb03      	ldmia	r3!, {r0, r1}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	6051      	str	r1, [r2, #4]
    strcat(datastrMK10E, meterSNMK10E);
 8004e6e:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <decodeEoBMK10E+0x5c>)
 8004e70:	480d      	ldr	r0, [pc, #52]	; (8004ea8 <decodeEoBMK10E+0x54>)
 8004e72:	f016 ffd1 	bl	801be18 <strcat>
    strcat(datastrMK10E, ",\"pid\":\"EoBMK10E\",");
 8004e76:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <decodeEoBMK10E+0x54>)
 8004e78:	f7fb f9b4 	bl	80001e4 <strlen>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <decodeEoBMK10E+0x54>)
 8004e82:	4413      	add	r3, r2
 8004e84:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <decodeEoBMK10E+0x60>)
 8004e86:	461d      	mov	r5, r3
 8004e88:	4614      	mov	r4, r2
 8004e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8c:	6028      	str	r0, [r5, #0]
 8004e8e:	6069      	str	r1, [r5, #4]
 8004e90:	60aa      	str	r2, [r5, #8]
 8004e92:	60eb      	str	r3, [r5, #12]
 8004e94:	8823      	ldrh	r3, [r4, #0]
 8004e96:	78a2      	ldrb	r2, [r4, #2]
 8004e98:	822b      	strh	r3, [r5, #16]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	74ab      	strb	r3, [r5, #18]
//    strcat(datastrMK10E, ",\"pid\":\"EoBMK10E\",\"readdate\":");
//  data2clearMK10E();
//  sprintf(data2MK10E,"%d,",timestamp_now);
//  strcat(datastrMK10E, data2MK10E);
  for(int i=0;i<int1;i++){
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e2be      	b.n	8005422 <decodeEoBMK10E+0x5ce>
 8004ea4:	20002f8c 	.word	0x20002f8c
 8004ea8:	20002974 	.word	0x20002974
 8004eac:	0801e014 	.word	0x0801e014
 8004eb0:	200000b0 	.word	0x200000b0
 8004eb4:	0801e42c 	.word	0x0801e42c
      int3=0;
 8004eb8:	4bad      	ldr	r3, [pc, #692]	; (8005170 <decodeEoBMK10E+0x31c>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
    if(i==int1-1){
 8004ebe:	4bad      	ldr	r3, [pc, #692]	; (8005174 <decodeEoBMK10E+0x320>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	f040 8170 	bne.w	80051ac <decodeEoBMK10E+0x358>
    	strcat(datastrMK10E, checkregEoBRate1MK10E(eobreg[int1-1]));
 8004ecc:	4ba9      	ldr	r3, [pc, #676]	; (8005174 <decodeEoBMK10E+0x320>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4aa9      	ldr	r2, [pc, #676]	; (8005178 <decodeEoBMK10E+0x324>)
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc91 	bl	8004800 <checkregEoBRate1MK10E>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	48a6      	ldr	r0, [pc, #664]	; (800517c <decodeEoBMK10E+0x328>)
 8004ee4:	f016 ff98 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8004ee8:	48a4      	ldr	r0, [pc, #656]	; (800517c <decodeEoBMK10E+0x328>)
 8004eea:	f7fb f97b 	bl	80001e4 <strlen>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4ba2      	ldr	r3, [pc, #648]	; (800517c <decodeEoBMK10E+0x328>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	49a2      	ldr	r1, [pc, #648]	; (8005180 <decodeEoBMK10E+0x32c>)
 8004ef8:	461a      	mov	r2, r3
 8004efa:	460b      	mov	r3, r1
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob0[int1-1]);
 8004f00:	4b9c      	ldr	r3, [pc, #624]	; (8005174 <decodeEoBMK10E+0x320>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4a9f      	ldr	r2, [pc, #636]	; (8005184 <decodeEoBMK10E+0x330>)
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4623      	mov	r3, r4
 8004f14:	499c      	ldr	r1, [pc, #624]	; (8005188 <decodeEoBMK10E+0x334>)
 8004f16:	489d      	ldr	r0, [pc, #628]	; (800518c <decodeEoBMK10E+0x338>)
 8004f18:	f016 ff5e 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8004f1c:	499b      	ldr	r1, [pc, #620]	; (800518c <decodeEoBMK10E+0x338>)
 8004f1e:	4897      	ldr	r0, [pc, #604]	; (800517c <decodeEoBMK10E+0x328>)
 8004f20:	f016 ff7a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8004f24:	4895      	ldr	r0, [pc, #596]	; (800517c <decodeEoBMK10E+0x328>)
 8004f26:	f7fb f95d 	bl	80001e4 <strlen>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b93      	ldr	r3, [pc, #588]	; (800517c <decodeEoBMK10E+0x328>)
 8004f30:	4413      	add	r3, r2
 8004f32:	4997      	ldr	r1, [pc, #604]	; (8005190 <decodeEoBMK10E+0x33c>)
 8004f34:	461a      	mov	r2, r3
 8004f36:	460b      	mov	r3, r1
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate2MK10E(eobreg[int1-1]));
 8004f3c:	4b8d      	ldr	r3, [pc, #564]	; (8005174 <decodeEoBMK10E+0x320>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	4a8d      	ldr	r2, [pc, #564]	; (8005178 <decodeEoBMK10E+0x324>)
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fcfb 	bl	8004944 <checkregEoBRate2MK10E>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4619      	mov	r1, r3
 8004f52:	488a      	ldr	r0, [pc, #552]	; (800517c <decodeEoBMK10E+0x328>)
 8004f54:	f016 ff60 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8004f58:	4888      	ldr	r0, [pc, #544]	; (800517c <decodeEoBMK10E+0x328>)
 8004f5a:	f7fb f943 	bl	80001e4 <strlen>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b86      	ldr	r3, [pc, #536]	; (800517c <decodeEoBMK10E+0x328>)
 8004f64:	4413      	add	r3, r2
 8004f66:	4986      	ldr	r1, [pc, #536]	; (8005180 <decodeEoBMK10E+0x32c>)
 8004f68:	461a      	mov	r2, r3
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob1[int1-1]);
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <decodeEoBMK10E+0x320>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4a87      	ldr	r2, [pc, #540]	; (8005194 <decodeEoBMK10E+0x340>)
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f80:	461a      	mov	r2, r3
 8004f82:	4623      	mov	r3, r4
 8004f84:	4980      	ldr	r1, [pc, #512]	; (8005188 <decodeEoBMK10E+0x334>)
 8004f86:	4881      	ldr	r0, [pc, #516]	; (800518c <decodeEoBMK10E+0x338>)
 8004f88:	f016 ff26 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8004f8c:	497f      	ldr	r1, [pc, #508]	; (800518c <decodeEoBMK10E+0x338>)
 8004f8e:	487b      	ldr	r0, [pc, #492]	; (800517c <decodeEoBMK10E+0x328>)
 8004f90:	f016 ff42 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8004f94:	4879      	ldr	r0, [pc, #484]	; (800517c <decodeEoBMK10E+0x328>)
 8004f96:	f7fb f925 	bl	80001e4 <strlen>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b77      	ldr	r3, [pc, #476]	; (800517c <decodeEoBMK10E+0x328>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	497b      	ldr	r1, [pc, #492]	; (8005190 <decodeEoBMK10E+0x33c>)
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate3MK10E(eobreg[int1-1]));
 8004fac:	4b71      	ldr	r3, [pc, #452]	; (8005174 <decodeEoBMK10E+0x320>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4a71      	ldr	r2, [pc, #452]	; (8005178 <decodeEoBMK10E+0x324>)
 8004fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fd65 	bl	8004a88 <checkregEoBRate3MK10E>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	486e      	ldr	r0, [pc, #440]	; (800517c <decodeEoBMK10E+0x328>)
 8004fc4:	f016 ff28 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8004fc8:	486c      	ldr	r0, [pc, #432]	; (800517c <decodeEoBMK10E+0x328>)
 8004fca:	f7fb f90b 	bl	80001e4 <strlen>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	; (800517c <decodeEoBMK10E+0x328>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	496a      	ldr	r1, [pc, #424]	; (8005180 <decodeEoBMK10E+0x32c>)
 8004fd8:	461a      	mov	r2, r3
 8004fda:	460b      	mov	r3, r1
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob2[int1-1]);
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <decodeEoBMK10E+0x320>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	4a6c      	ldr	r2, [pc, #432]	; (8005198 <decodeEoBMK10E+0x344>)
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	4964      	ldr	r1, [pc, #400]	; (8005188 <decodeEoBMK10E+0x334>)
 8004ff6:	4865      	ldr	r0, [pc, #404]	; (800518c <decodeEoBMK10E+0x338>)
 8004ff8:	f016 feee 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8004ffc:	4963      	ldr	r1, [pc, #396]	; (800518c <decodeEoBMK10E+0x338>)
 8004ffe:	485f      	ldr	r0, [pc, #380]	; (800517c <decodeEoBMK10E+0x328>)
 8005000:	f016 ff0a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8005004:	485d      	ldr	r0, [pc, #372]	; (800517c <decodeEoBMK10E+0x328>)
 8005006:	f7fb f8ed 	bl	80001e4 <strlen>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <decodeEoBMK10E+0x328>)
 8005010:	4413      	add	r3, r2
 8005012:	495f      	ldr	r1, [pc, #380]	; (8005190 <decodeEoBMK10E+0x33c>)
 8005014:	461a      	mov	r2, r3
 8005016:	460b      	mov	r3, r1
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate4MK10E(eobreg[int1-1]));
 800501c:	4b55      	ldr	r3, [pc, #340]	; (8005174 <decodeEoBMK10E+0x320>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	4a55      	ldr	r2, [pc, #340]	; (8005178 <decodeEoBMK10E+0x324>)
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fdcf 	bl	8004bcc <checkregEoBRate4MK10E>
 800502e:	4603      	mov	r3, r0
 8005030:	4619      	mov	r1, r3
 8005032:	4852      	ldr	r0, [pc, #328]	; (800517c <decodeEoBMK10E+0x328>)
 8005034:	f016 fef0 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8005038:	4850      	ldr	r0, [pc, #320]	; (800517c <decodeEoBMK10E+0x328>)
 800503a:	f7fb f8d3 	bl	80001e4 <strlen>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	4b4e      	ldr	r3, [pc, #312]	; (800517c <decodeEoBMK10E+0x328>)
 8005044:	4413      	add	r3, r2
 8005046:	494e      	ldr	r1, [pc, #312]	; (8005180 <decodeEoBMK10E+0x32c>)
 8005048:	461a      	mov	r2, r3
 800504a:	460b      	mov	r3, r1
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob3[int1-1]);
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <decodeEoBMK10E+0x320>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3b01      	subs	r3, #1
 8005056:	4a51      	ldr	r2, [pc, #324]	; (800519c <decodeEoBMK10E+0x348>)
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005060:	461a      	mov	r2, r3
 8005062:	4623      	mov	r3, r4
 8005064:	4948      	ldr	r1, [pc, #288]	; (8005188 <decodeEoBMK10E+0x334>)
 8005066:	4849      	ldr	r0, [pc, #292]	; (800518c <decodeEoBMK10E+0x338>)
 8005068:	f016 feb6 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 800506c:	4947      	ldr	r1, [pc, #284]	; (800518c <decodeEoBMK10E+0x338>)
 800506e:	4843      	ldr	r0, [pc, #268]	; (800517c <decodeEoBMK10E+0x328>)
 8005070:	f016 fed2 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8005074:	4841      	ldr	r0, [pc, #260]	; (800517c <decodeEoBMK10E+0x328>)
 8005076:	f7fb f8b5 	bl	80001e4 <strlen>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <decodeEoBMK10E+0x328>)
 8005080:	4413      	add	r3, r2
 8005082:	4943      	ldr	r1, [pc, #268]	; (8005190 <decodeEoBMK10E+0x33c>)
 8005084:	461a      	mov	r2, r3
 8005086:	460b      	mov	r3, r1
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate5MK10E(eobreg[int1-1]));
 800508c:	4b39      	ldr	r3, [pc, #228]	; (8005174 <decodeEoBMK10E+0x320>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3b01      	subs	r3, #1
 8005092:	4a39      	ldr	r2, [pc, #228]	; (8005178 <decodeEoBMK10E+0x324>)
 8005094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fe39 	bl	8004d10 <checkregEoBRate5MK10E>
 800509e:	4603      	mov	r3, r0
 80050a0:	4619      	mov	r1, r3
 80050a2:	4836      	ldr	r0, [pc, #216]	; (800517c <decodeEoBMK10E+0x328>)
 80050a4:	f016 feb8 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 80050a8:	4834      	ldr	r0, [pc, #208]	; (800517c <decodeEoBMK10E+0x328>)
 80050aa:	f7fb f89b 	bl	80001e4 <strlen>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b32      	ldr	r3, [pc, #200]	; (800517c <decodeEoBMK10E+0x328>)
 80050b4:	4413      	add	r3, r2
 80050b6:	4932      	ldr	r1, [pc, #200]	; (8005180 <decodeEoBMK10E+0x32c>)
 80050b8:	461a      	mov	r2, r3
 80050ba:	460b      	mov	r3, r1
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob4[int1-1]);
 80050c0:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <decodeEoBMK10E+0x320>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <decodeEoBMK10E+0x34c>)
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050d0:	461a      	mov	r2, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	492c      	ldr	r1, [pc, #176]	; (8005188 <decodeEoBMK10E+0x334>)
 80050d6:	482d      	ldr	r0, [pc, #180]	; (800518c <decodeEoBMK10E+0x338>)
 80050d8:	f016 fe7e 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80050dc:	492b      	ldr	r1, [pc, #172]	; (800518c <decodeEoBMK10E+0x338>)
 80050de:	4827      	ldr	r0, [pc, #156]	; (800517c <decodeEoBMK10E+0x328>)
 80050e0:	f016 fe9a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 80050e4:	4825      	ldr	r0, [pc, #148]	; (800517c <decodeEoBMK10E+0x328>)
 80050e6:	f7fb f87d 	bl	80001e4 <strlen>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b23      	ldr	r3, [pc, #140]	; (800517c <decodeEoBMK10E+0x328>)
 80050f0:	4413      	add	r3, r2
 80050f2:	4927      	ldr	r1, [pc, #156]	; (8005190 <decodeEoBMK10E+0x33c>)
 80050f4:	461a      	mov	r2, r3
 80050f6:	460b      	mov	r3, r1
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBUnifiedMK10E(eobreg[int1-1]));
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <decodeEoBMK10E+0x320>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3b01      	subs	r3, #1
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <decodeEoBMK10E+0x324>)
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fad7 	bl	80046bc <checkregEoBUnifiedMK10E>
 800510e:	4603      	mov	r3, r0
 8005110:	4619      	mov	r1, r3
 8005112:	481a      	ldr	r0, [pc, #104]	; (800517c <decodeEoBMK10E+0x328>)
 8005114:	f016 fe80 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8005118:	4818      	ldr	r0, [pc, #96]	; (800517c <decodeEoBMK10E+0x328>)
 800511a:	f7fb f863 	bl	80001e4 <strlen>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <decodeEoBMK10E+0x328>)
 8005124:	4413      	add	r3, r2
 8005126:	4916      	ldr	r1, [pc, #88]	; (8005180 <decodeEoBMK10E+0x32c>)
 8005128:	461a      	mov	r2, r3
 800512a:	460b      	mov	r3, r1
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob9[int1-1]);
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <decodeEoBMK10E+0x320>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <decodeEoBMK10E+0x350>)
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005140:	461a      	mov	r2, r3
 8005142:	4623      	mov	r3, r4
 8005144:	4910      	ldr	r1, [pc, #64]	; (8005188 <decodeEoBMK10E+0x334>)
 8005146:	4811      	ldr	r0, [pc, #68]	; (800518c <decodeEoBMK10E+0x338>)
 8005148:	f016 fe46 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 800514c:	490f      	ldr	r1, [pc, #60]	; (800518c <decodeEoBMK10E+0x338>)
 800514e:	480b      	ldr	r0, [pc, #44]	; (800517c <decodeEoBMK10E+0x328>)
 8005150:	f016 fe62 	bl	801be18 <strcat>
    	strcat(datastrMK10E, "}");
 8005154:	4809      	ldr	r0, [pc, #36]	; (800517c <decodeEoBMK10E+0x328>)
 8005156:	f7fb f845 	bl	80001e4 <strlen>
 800515a:	4603      	mov	r3, r0
 800515c:	461a      	mov	r2, r3
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <decodeEoBMK10E+0x328>)
 8005160:	4413      	add	r3, r2
 8005162:	4911      	ldr	r1, [pc, #68]	; (80051a8 <decodeEoBMK10E+0x354>)
 8005164:	461a      	mov	r2, r3
 8005166:	460b      	mov	r3, r1
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	8013      	strh	r3, [r2, #0]
 800516c:	e156      	b.n	800541c <decodeEoBMK10E+0x5c8>
 800516e:	bf00      	nop
 8005170:	20003f60 	.word	0x20003f60
 8005174:	20002f8c 	.word	0x20002f8c
 8005178:	200035a0 	.word	0x200035a0
 800517c:	20002974 	.word	0x20002974
 8005180:	0801e034 	.word	0x0801e034
 8005184:	20003898 	.word	0x20003898
 8005188:	0801e2a4 	.word	0x0801e2a4
 800518c:	20003060 	.word	0x20003060
 8005190:	0801e2ac 	.word	0x0801e2ac
 8005194:	20003688 	.word	0x20003688
 8005198:	20003f18 	.word	0x20003f18
 800519c:	200028f8 	.word	0x200028f8
 80051a0:	200036c0 	.word	0x200036c0
 80051a4:	20003ea8 	.word	0x20003ea8
 80051a8:	0801e2b0 	.word	0x0801e2b0
    }
    else {
    	strcat(datastrMK10E, checkregEoBRate1MK10E(eobreg[i]));
 80051ac:	4aa3      	ldr	r2, [pc, #652]	; (800543c <decodeEoBMK10E+0x5e8>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fb23 	bl	8004800 <checkregEoBRate1MK10E>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4619      	mov	r1, r3
 80051be:	48a0      	ldr	r0, [pc, #640]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80051c0:	f016 fe2a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 80051c4:	489e      	ldr	r0, [pc, #632]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80051c6:	f7fb f80d 	bl	80001e4 <strlen>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b9c      	ldr	r3, [pc, #624]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80051d0:	4413      	add	r3, r2
 80051d2:	499c      	ldr	r1, [pc, #624]	; (8005444 <decodeEoBMK10E+0x5f0>)
 80051d4:	461a      	mov	r2, r3
 80051d6:	460b      	mov	r3, r1
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob0[i]);
 80051dc:	4a9a      	ldr	r2, [pc, #616]	; (8005448 <decodeEoBMK10E+0x5f4>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	4997      	ldr	r1, [pc, #604]	; (800544c <decodeEoBMK10E+0x5f8>)
 80051ee:	4898      	ldr	r0, [pc, #608]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80051f0:	f016 fdf2 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80051f4:	4996      	ldr	r1, [pc, #600]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80051f6:	4892      	ldr	r0, [pc, #584]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80051f8:	f016 fe0e 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 80051fc:	4890      	ldr	r0, [pc, #576]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80051fe:	f7fa fff1 	bl	80001e4 <strlen>
 8005202:	4603      	mov	r3, r0
 8005204:	461a      	mov	r2, r3
 8005206:	4b8e      	ldr	r3, [pc, #568]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005208:	4413      	add	r3, r2
 800520a:	4992      	ldr	r1, [pc, #584]	; (8005454 <decodeEoBMK10E+0x600>)
 800520c:	461a      	mov	r2, r3
 800520e:	460b      	mov	r3, r1
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate2MK10E(eobreg[i]));
 8005214:	4a89      	ldr	r2, [pc, #548]	; (800543c <decodeEoBMK10E+0x5e8>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fb91 	bl	8004944 <checkregEoBRate2MK10E>
 8005222:	4603      	mov	r3, r0
 8005224:	4619      	mov	r1, r3
 8005226:	4886      	ldr	r0, [pc, #536]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005228:	f016 fdf6 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 800522c:	4884      	ldr	r0, [pc, #528]	; (8005440 <decodeEoBMK10E+0x5ec>)
 800522e:	f7fa ffd9 	bl	80001e4 <strlen>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	4b82      	ldr	r3, [pc, #520]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005238:	4413      	add	r3, r2
 800523a:	4982      	ldr	r1, [pc, #520]	; (8005444 <decodeEoBMK10E+0x5f0>)
 800523c:	461a      	mov	r2, r3
 800523e:	460b      	mov	r3, r1
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob1[i]);
 8005244:	4a84      	ldr	r2, [pc, #528]	; (8005458 <decodeEoBMK10E+0x604>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005250:	461a      	mov	r2, r3
 8005252:	4623      	mov	r3, r4
 8005254:	497d      	ldr	r1, [pc, #500]	; (800544c <decodeEoBMK10E+0x5f8>)
 8005256:	487e      	ldr	r0, [pc, #504]	; (8005450 <decodeEoBMK10E+0x5fc>)
 8005258:	f016 fdbe 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 800525c:	497c      	ldr	r1, [pc, #496]	; (8005450 <decodeEoBMK10E+0x5fc>)
 800525e:	4878      	ldr	r0, [pc, #480]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005260:	f016 fdda 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8005264:	4876      	ldr	r0, [pc, #472]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005266:	f7fa ffbd 	bl	80001e4 <strlen>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	4b74      	ldr	r3, [pc, #464]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005270:	4413      	add	r3, r2
 8005272:	4978      	ldr	r1, [pc, #480]	; (8005454 <decodeEoBMK10E+0x600>)
 8005274:	461a      	mov	r2, r3
 8005276:	460b      	mov	r3, r1
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate3MK10E(eobreg[i]));
 800527c:	4a6f      	ldr	r2, [pc, #444]	; (800543c <decodeEoBMK10E+0x5e8>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fbff 	bl	8004a88 <checkregEoBRate3MK10E>
 800528a:	4603      	mov	r3, r0
 800528c:	4619      	mov	r1, r3
 800528e:	486c      	ldr	r0, [pc, #432]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005290:	f016 fdc2 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8005294:	486a      	ldr	r0, [pc, #424]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005296:	f7fa ffa5 	bl	80001e4 <strlen>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	4b68      	ldr	r3, [pc, #416]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052a0:	4413      	add	r3, r2
 80052a2:	4968      	ldr	r1, [pc, #416]	; (8005444 <decodeEoBMK10E+0x5f0>)
 80052a4:	461a      	mov	r2, r3
 80052a6:	460b      	mov	r3, r1
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob2[i]);
 80052ac:	4a6b      	ldr	r2, [pc, #428]	; (800545c <decodeEoBMK10E+0x608>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4623      	mov	r3, r4
 80052bc:	4963      	ldr	r1, [pc, #396]	; (800544c <decodeEoBMK10E+0x5f8>)
 80052be:	4864      	ldr	r0, [pc, #400]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80052c0:	f016 fd8a 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80052c4:	4962      	ldr	r1, [pc, #392]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80052c6:	485e      	ldr	r0, [pc, #376]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052c8:	f016 fda6 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 80052cc:	485c      	ldr	r0, [pc, #368]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052ce:	f7fa ff89 	bl	80001e4 <strlen>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b5a      	ldr	r3, [pc, #360]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052d8:	4413      	add	r3, r2
 80052da:	495e      	ldr	r1, [pc, #376]	; (8005454 <decodeEoBMK10E+0x600>)
 80052dc:	461a      	mov	r2, r3
 80052de:	460b      	mov	r3, r1
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate4MK10E(eobreg[i]));
 80052e4:	4a55      	ldr	r2, [pc, #340]	; (800543c <decodeEoBMK10E+0x5e8>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff fc6d 	bl	8004bcc <checkregEoBRate4MK10E>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4619      	mov	r1, r3
 80052f6:	4852      	ldr	r0, [pc, #328]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052f8:	f016 fd8e 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 80052fc:	4850      	ldr	r0, [pc, #320]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80052fe:	f7fa ff71 	bl	80001e4 <strlen>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005308:	4413      	add	r3, r2
 800530a:	494e      	ldr	r1, [pc, #312]	; (8005444 <decodeEoBMK10E+0x5f0>)
 800530c:	461a      	mov	r2, r3
 800530e:	460b      	mov	r3, r1
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob3[i]);
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <decodeEoBMK10E+0x60c>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005320:	461a      	mov	r2, r3
 8005322:	4623      	mov	r3, r4
 8005324:	4949      	ldr	r1, [pc, #292]	; (800544c <decodeEoBMK10E+0x5f8>)
 8005326:	484a      	ldr	r0, [pc, #296]	; (8005450 <decodeEoBMK10E+0x5fc>)
 8005328:	f016 fd56 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 800532c:	4948      	ldr	r1, [pc, #288]	; (8005450 <decodeEoBMK10E+0x5fc>)
 800532e:	4844      	ldr	r0, [pc, #272]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005330:	f016 fd72 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8005334:	4842      	ldr	r0, [pc, #264]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005336:	f7fa ff55 	bl	80001e4 <strlen>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005340:	4413      	add	r3, r2
 8005342:	4944      	ldr	r1, [pc, #272]	; (8005454 <decodeEoBMK10E+0x600>)
 8005344:	461a      	mov	r2, r3
 8005346:	460b      	mov	r3, r1
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate5MK10E(eobreg[i]));
 800534c:	4a3b      	ldr	r2, [pc, #236]	; (800543c <decodeEoBMK10E+0x5e8>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fcdb 	bl	8004d10 <checkregEoBRate5MK10E>
 800535a:	4603      	mov	r3, r0
 800535c:	4619      	mov	r1, r3
 800535e:	4838      	ldr	r0, [pc, #224]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005360:	f016 fd5a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 8005364:	4836      	ldr	r0, [pc, #216]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005366:	f7fa ff3d 	bl	80001e4 <strlen>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005370:	4413      	add	r3, r2
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <decodeEoBMK10E+0x5f0>)
 8005374:	461a      	mov	r2, r3
 8005376:	460b      	mov	r3, r1
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob4[i]);
 800537c:	4a39      	ldr	r2, [pc, #228]	; (8005464 <decodeEoBMK10E+0x610>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005388:	461a      	mov	r2, r3
 800538a:	4623      	mov	r3, r4
 800538c:	492f      	ldr	r1, [pc, #188]	; (800544c <decodeEoBMK10E+0x5f8>)
 800538e:	4830      	ldr	r0, [pc, #192]	; (8005450 <decodeEoBMK10E+0x5fc>)
 8005390:	f016 fd22 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005394:	492e      	ldr	r1, [pc, #184]	; (8005450 <decodeEoBMK10E+0x5fc>)
 8005396:	482a      	ldr	r0, [pc, #168]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005398:	f016 fd3e 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 800539c:	4828      	ldr	r0, [pc, #160]	; (8005440 <decodeEoBMK10E+0x5ec>)
 800539e:	f7fa ff21 	bl	80001e4 <strlen>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b26      	ldr	r3, [pc, #152]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80053a8:	4413      	add	r3, r2
 80053aa:	492a      	ldr	r1, [pc, #168]	; (8005454 <decodeEoBMK10E+0x600>)
 80053ac:	461a      	mov	r2, r3
 80053ae:	460b      	mov	r3, r1
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBUnifiedMK10E(eobreg[i]));
 80053b4:	4a21      	ldr	r2, [pc, #132]	; (800543c <decodeEoBMK10E+0x5e8>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff f97d 	bl	80046bc <checkregEoBUnifiedMK10E>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4619      	mov	r1, r3
 80053c6:	481e      	ldr	r0, [pc, #120]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80053c8:	f016 fd26 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ":");
 80053cc:	481c      	ldr	r0, [pc, #112]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80053ce:	f7fa ff09 	bl	80001e4 <strlen>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <decodeEoBMK10E+0x5ec>)
 80053d8:	4413      	add	r3, r2
 80053da:	491a      	ldr	r1, [pc, #104]	; (8005444 <decodeEoBMK10E+0x5f0>)
 80053dc:	461a      	mov	r2, r3
 80053de:	460b      	mov	r3, r1
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob9[i]);
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <decodeEoBMK10E+0x614>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	4915      	ldr	r1, [pc, #84]	; (800544c <decodeEoBMK10E+0x5f8>)
 80053f6:	4816      	ldr	r0, [pc, #88]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80053f8:	f016 fcee 	bl	801bdd8 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80053fc:	4914      	ldr	r1, [pc, #80]	; (8005450 <decodeEoBMK10E+0x5fc>)
 80053fe:	4810      	ldr	r0, [pc, #64]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005400:	f016 fd0a 	bl	801be18 <strcat>
    	strcat(datastrMK10E, ",");
 8005404:	480e      	ldr	r0, [pc, #56]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005406:	f7fa feed 	bl	80001e4 <strlen>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005410:	4413      	add	r3, r2
 8005412:	4910      	ldr	r1, [pc, #64]	; (8005454 <decodeEoBMK10E+0x600>)
 8005414:	461a      	mov	r2, r3
 8005416:	460b      	mov	r3, r1
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	8013      	strh	r3, [r2, #0]
  for(int i=0;i<int1;i++){
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <decodeEoBMK10E+0x618>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	f6ff ad45 	blt.w	8004eb8 <decodeEoBMK10E+0x64>
    }
  }
    SerialMonprintlnMK10E(datastrMK10E);
 800542e:	4804      	ldr	r0, [pc, #16]	; (8005440 <decodeEoBMK10E+0x5ec>)
 8005430:	f7fd feb0 	bl	8003194 <SerialMonprintlnMK10E>
}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bdb0      	pop	{r4, r5, r7, pc}
 800543c:	200035a0 	.word	0x200035a0
 8005440:	20002974 	.word	0x20002974
 8005444:	0801e034 	.word	0x0801e034
 8005448:	20003898 	.word	0x20003898
 800544c:	0801e2a4 	.word	0x0801e2a4
 8005450:	20003060 	.word	0x20003060
 8005454:	0801e2ac 	.word	0x0801e2ac
 8005458:	20003688 	.word	0x20003688
 800545c:	20003f18 	.word	0x20003f18
 8005460:	200028f8 	.word	0x200028f8
 8005464:	200036c0 	.word	0x200036c0
 8005468:	20003ea8 	.word	0x20003ea8
 800546c:	20002f8c 	.word	0x20002f8c

08005470 <txEoBCurrentMK10E>:
		  }
	  }
//	  return "0";
}

void txEoBCurrentMK10E(){
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 8005474:	f7fd fedc 	bl	8003230 <dataallclearMK10E>
	dataMK10E[0]=0x02;
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 800547a:	2202      	movs	r2, #2
 800547c:	701a      	strb	r2, [r3, #0]
	dataMK10E[1]=0x52;
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 8005480:	2252      	movs	r2, #82	; 0x52
 8005482:	705a      	strb	r2, [r3, #1]
	dataMK10E[2]=0xF5;
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 8005486:	22f5      	movs	r2, #245	; 0xf5
 8005488:	709a      	strb	r2, [r3, #2]
	dataMK10E[3]=0x40;
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	70da      	strb	r2, [r3, #3]
	dataMK10E[4]=0x79;
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 8005492:	2279      	movs	r2, #121	; 0x79
 8005494:	711a      	strb	r2, [r3, #4]
	dataMK10E[5]=0x36;
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 8005498:	2236      	movs	r2, #54	; 0x36
 800549a:	715a      	strb	r2, [r3, #5]
	dataMK10E[6]=0x03;
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 800549e:	2203      	movs	r2, #3
 80054a0:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )dataMK10E, 7, 100);
 80054a2:	2364      	movs	r3, #100	; 0x64
 80054a4:	2207      	movs	r2, #7
 80054a6:	4903      	ldr	r1, [pc, #12]	; (80054b4 <txEoBCurrentMK10E+0x44>)
 80054a8:	4803      	ldr	r0, [pc, #12]	; (80054b8 <txEoBCurrentMK10E+0x48>)
 80054aa:	f00e fcef 	bl	8013e8c <HAL_UART_Transmit>
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200030fc 	.word	0x200030fc
 80054b8:	20002770 	.word	0x20002770

080054bc <rxEoBCurrentMK10E>:

void rxEoBCurrentMK10E(char* outstr,char* datain, int len){
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	  memcpy(dataMK10E,datain,len);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	4818      	ldr	r0, [pc, #96]	; (8005530 <rxEoBCurrentMK10E+0x74>)
 80054d0:	f015 fede 	bl	801b290 <memcpy>
	data_lenMK10E=0;
 80054d4:	4b17      	ldr	r3, [pc, #92]	; (8005534 <rxEoBCurrentMK10E+0x78>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
	data_lenMK10E=datasize(dataMK10E);
 80054da:	4815      	ldr	r0, [pc, #84]	; (8005530 <rxEoBCurrentMK10E+0x74>)
 80054dc:	f000 f978 	bl	80057d0 <datasize>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <rxEoBCurrentMK10E+0x78>)
 80054e4:	601a      	str	r2, [r3, #0]
	if(data_lenMK10E>5){
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <rxEoBCurrentMK10E+0x78>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	dd1b      	ble.n	8005526 <rxEoBCurrentMK10E+0x6a>
		getRawDataMK10E(4);
 80054ee:	2004      	movs	r0, #4
 80054f0:	f7fe f8c8 	bl	8003684 <getRawDataMK10E>
		saveEoBDataMK10E();
 80054f4:	f000 f822 	bl	800553c <saveEoBDataMK10E>
		decodeEoBMK10E();
 80054f8:	f7ff fcac 	bl	8004e54 <decodeEoBMK10E>
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e00a      	b.n	8005518 <rxEoBCurrentMK10E+0x5c>
			  *outstr++=datastrMK10E[i];
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	490b      	ldr	r1, [pc, #44]	; (8005538 <rxEoBCurrentMK10E+0x7c>)
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	440a      	add	r2, r1
 800550e:	7812      	ldrb	r2, [r2, #0]
 8005510:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	3301      	adds	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	4807      	ldr	r0, [pc, #28]	; (8005538 <rxEoBCurrentMK10E+0x7c>)
 800551a:	f7fd fe23 	bl	8003164 <datasizestrMK10E>
 800551e:	4602      	mov	r2, r0
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4293      	cmp	r3, r2
 8005524:	dbed      	blt.n	8005502 <rxEoBCurrentMK10E+0x46>
		  }
	  }
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	200030fc 	.word	0x200030fc
 8005534:	20002970 	.word	0x20002970
 8005538:	20002974 	.word	0x20002974

0800553c <saveEoBDataMK10E>:
	  }
	  return "0";

}

void saveEoBDataMK10E(){
 800553c:	b598      	push	{r3, r4, r7, lr}
 800553e:	af00      	add	r7, sp, #0
//  removeheadcrctailMK10E(4);
//  printData(dataMK10E, data_lenMK10E);
  SerialMonprintlnMK10E(" ");
 8005540:	489c      	ldr	r0, [pc, #624]	; (80057b4 <saveEoBDataMK10E+0x278>)
 8005542:	f7fd fe27 	bl	8003194 <SerialMonprintlnMK10E>
  // exp wh
  hex2Float(dataMK10E,0);
 8005546:	2100      	movs	r1, #0
 8005548:	489b      	ldr	r0, [pc, #620]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800554a:	f000 fa61 	bl	8005a10 <hex2Float>
  eob9[0]=(double)(myFloat.f);
 800554e:	4b9b      	ldr	r3, [pc, #620]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb f808 	bl	8000568 <__aeabi_f2d>
 8005558:	4603      	mov	r3, r0
 800555a:	460c      	mov	r4, r1
 800555c:	4a98      	ldr	r2, [pc, #608]	; (80057c0 <saveEoBDataMK10E+0x284>)
 800555e:	e9c2 3400 	strd	r3, r4, [r2]
  hex2Float(dataMK10E,4);
 8005562:	2104      	movs	r1, #4
 8005564:	4894      	ldr	r0, [pc, #592]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005566:	f000 fa53 	bl	8005a10 <hex2Float>
  eob0[0]=(double)(myFloat.f);
 800556a:	4b94      	ldr	r3, [pc, #592]	; (80057bc <saveEoBDataMK10E+0x280>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fa fffa 	bl	8000568 <__aeabi_f2d>
 8005574:	4603      	mov	r3, r0
 8005576:	460c      	mov	r4, r1
 8005578:	4a92      	ldr	r2, [pc, #584]	; (80057c4 <saveEoBDataMK10E+0x288>)
 800557a:	e9c2 3400 	strd	r3, r4, [r2]
  hex2Float(dataMK10E,8);
 800557e:	2108      	movs	r1, #8
 8005580:	488d      	ldr	r0, [pc, #564]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005582:	f000 fa45 	bl	8005a10 <hex2Float>
  eob1[0]=(double)(myFloat.f);
 8005586:	4b8d      	ldr	r3, [pc, #564]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f7fa ffec 	bl	8000568 <__aeabi_f2d>
 8005590:	4603      	mov	r3, r0
 8005592:	460c      	mov	r4, r1
 8005594:	4a8c      	ldr	r2, [pc, #560]	; (80057c8 <saveEoBDataMK10E+0x28c>)
 8005596:	e9c2 3400 	strd	r3, r4, [r2]
  hex2Float(dataMK10E,12);
 800559a:	210c      	movs	r1, #12
 800559c:	4886      	ldr	r0, [pc, #536]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800559e:	f000 fa37 	bl	8005a10 <hex2Float>
  eob2[0]=(double)(myFloat.f);
 80055a2:	4b86      	ldr	r3, [pc, #536]	; (80057bc <saveEoBDataMK10E+0x280>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fa ffde 	bl	8000568 <__aeabi_f2d>
 80055ac:	4603      	mov	r3, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4a86      	ldr	r2, [pc, #536]	; (80057cc <saveEoBDataMK10E+0x290>)
 80055b2:	e9c2 3400 	strd	r3, r4, [r2]
  // imp wh
  hex2Float(dataMK10E,16);
 80055b6:	2110      	movs	r1, #16
 80055b8:	487f      	ldr	r0, [pc, #508]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80055ba:	f000 fa29 	bl	8005a10 <hex2Float>
  eob9[1]=(double)(myFloat.f);
 80055be:	4b7f      	ldr	r3, [pc, #508]	; (80057bc <saveEoBDataMK10E+0x280>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fa ffd0 	bl	8000568 <__aeabi_f2d>
 80055c8:	4603      	mov	r3, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4a7c      	ldr	r2, [pc, #496]	; (80057c0 <saveEoBDataMK10E+0x284>)
 80055ce:	e9c2 3402 	strd	r3, r4, [r2, #8]
  hex2Float(dataMK10E,20);
 80055d2:	2114      	movs	r1, #20
 80055d4:	4878      	ldr	r0, [pc, #480]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80055d6:	f000 fa1b 	bl	8005a10 <hex2Float>
  eob0[1]=(double)(myFloat.f);
 80055da:	4b78      	ldr	r3, [pc, #480]	; (80057bc <saveEoBDataMK10E+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fa ffc2 	bl	8000568 <__aeabi_f2d>
 80055e4:	4603      	mov	r3, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	4a76      	ldr	r2, [pc, #472]	; (80057c4 <saveEoBDataMK10E+0x288>)
 80055ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  hex2Float(dataMK10E,24);
 80055ee:	2118      	movs	r1, #24
 80055f0:	4871      	ldr	r0, [pc, #452]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80055f2:	f000 fa0d 	bl	8005a10 <hex2Float>
  eob1[1]=(double)(myFloat.f);
 80055f6:	4b71      	ldr	r3, [pc, #452]	; (80057bc <saveEoBDataMK10E+0x280>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fa ffb4 	bl	8000568 <__aeabi_f2d>
 8005600:	4603      	mov	r3, r0
 8005602:	460c      	mov	r4, r1
 8005604:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <saveEoBDataMK10E+0x28c>)
 8005606:	e9c2 3402 	strd	r3, r4, [r2, #8]
  hex2Float(dataMK10E,28);
 800560a:	211c      	movs	r1, #28
 800560c:	486a      	ldr	r0, [pc, #424]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800560e:	f000 f9ff 	bl	8005a10 <hex2Float>
  eob2[1]=(double)(myFloat.f);
 8005612:	4b6a      	ldr	r3, [pc, #424]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fa ffa6 	bl	8000568 <__aeabi_f2d>
 800561c:	4603      	mov	r3, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4a6a      	ldr	r2, [pc, #424]	; (80057cc <saveEoBDataMK10E+0x290>)
 8005622:	e9c2 3402 	strd	r3, r4, [r2, #8]
  // exp varh
  hex2Float(dataMK10E,32);
 8005626:	2120      	movs	r1, #32
 8005628:	4863      	ldr	r0, [pc, #396]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800562a:	f000 f9f1 	bl	8005a10 <hex2Float>
  eob9[2]=(double)(myFloat.f);
 800562e:	4b63      	ldr	r3, [pc, #396]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa ff98 	bl	8000568 <__aeabi_f2d>
 8005638:	4603      	mov	r3, r0
 800563a:	460c      	mov	r4, r1
 800563c:	4a60      	ldr	r2, [pc, #384]	; (80057c0 <saveEoBDataMK10E+0x284>)
 800563e:	e9c2 3404 	strd	r3, r4, [r2, #16]
  hex2Float(dataMK10E,36);
 8005642:	2124      	movs	r1, #36	; 0x24
 8005644:	485c      	ldr	r0, [pc, #368]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005646:	f000 f9e3 	bl	8005a10 <hex2Float>
  eob0[2]=(double)(myFloat.f);
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <saveEoBDataMK10E+0x280>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ff8a 	bl	8000568 <__aeabi_f2d>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	4a5a      	ldr	r2, [pc, #360]	; (80057c4 <saveEoBDataMK10E+0x288>)
 800565a:	e9c2 3404 	strd	r3, r4, [r2, #16]
  // imp varh
  hex2Float(dataMK10E,40);
 800565e:	2128      	movs	r1, #40	; 0x28
 8005660:	4855      	ldr	r0, [pc, #340]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005662:	f000 f9d5 	bl	8005a10 <hex2Float>
  eob9[3]=(double)(myFloat.f);
 8005666:	4b55      	ldr	r3, [pc, #340]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fa ff7c 	bl	8000568 <__aeabi_f2d>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	4a52      	ldr	r2, [pc, #328]	; (80057c0 <saveEoBDataMK10E+0x284>)
 8005676:	e9c2 3406 	strd	r3, r4, [r2, #24]
  hex2Float(dataMK10E,44);
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	484e      	ldr	r0, [pc, #312]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800567e:	f000 f9c7 	bl	8005a10 <hex2Float>
  eob0[3]=(double)(myFloat.f);
 8005682:	4b4e      	ldr	r3, [pc, #312]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa ff6e 	bl	8000568 <__aeabi_f2d>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4a4c      	ldr	r2, [pc, #304]	; (80057c4 <saveEoBDataMK10E+0x288>)
 8005692:	e9c2 3406 	strd	r3, r4, [r2, #24]
  // abs wh
  hex2Float(dataMK10E,48);
 8005696:	2130      	movs	r1, #48	; 0x30
 8005698:	4847      	ldr	r0, [pc, #284]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800569a:	f000 f9b9 	bl	8005a10 <hex2Float>
  eob9[4]=(double)(myFloat.f);
 800569e:	4b47      	ldr	r3, [pc, #284]	; (80057bc <saveEoBDataMK10E+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fa ff60 	bl	8000568 <__aeabi_f2d>
 80056a8:	4603      	mov	r3, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4a44      	ldr	r2, [pc, #272]	; (80057c0 <saveEoBDataMK10E+0x284>)
 80056ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
  hex2Float(dataMK10E,52);
 80056b2:	2134      	movs	r1, #52	; 0x34
 80056b4:	4840      	ldr	r0, [pc, #256]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80056b6:	f000 f9ab 	bl	8005a10 <hex2Float>
  eob0[4]=(double)(myFloat.f);
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <saveEoBDataMK10E+0x280>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fa ff52 	bl	8000568 <__aeabi_f2d>
 80056c4:	4603      	mov	r3, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4a3e      	ldr	r2, [pc, #248]	; (80057c4 <saveEoBDataMK10E+0x288>)
 80056ca:	e9c2 3408 	strd	r3, r4, [r2, #32]
  hex2Float(dataMK10E,56);
 80056ce:	2138      	movs	r1, #56	; 0x38
 80056d0:	4839      	ldr	r0, [pc, #228]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80056d2:	f000 f99d 	bl	8005a10 <hex2Float>
  eob1[4]=(double)(myFloat.f);
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <saveEoBDataMK10E+0x280>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fa ff44 	bl	8000568 <__aeabi_f2d>
 80056e0:	4603      	mov	r3, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	4a38      	ldr	r2, [pc, #224]	; (80057c8 <saveEoBDataMK10E+0x28c>)
 80056e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
  hex2Float(dataMK10E,60);
 80056ea:	213c      	movs	r1, #60	; 0x3c
 80056ec:	4832      	ldr	r0, [pc, #200]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 80056ee:	f000 f98f 	bl	8005a10 <hex2Float>
  eob2[4]=(double)(myFloat.f);
 80056f2:	4b32      	ldr	r3, [pc, #200]	; (80057bc <saveEoBDataMK10E+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fa ff36 	bl	8000568 <__aeabi_f2d>
 80056fc:	4603      	mov	r3, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <saveEoBDataMK10E+0x290>)
 8005702:	e9c2 3408 	strd	r3, r4, [r2, #32]
  // abs varh
  hex2Float(dataMK10E,64);
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	482b      	ldr	r0, [pc, #172]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800570a:	f000 f981 	bl	8005a10 <hex2Float>
  eob9[5]=(double)(myFloat.f);
 800570e:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fa ff28 	bl	8000568 <__aeabi_f2d>
 8005718:	4603      	mov	r3, r0
 800571a:	460c      	mov	r4, r1
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <saveEoBDataMK10E+0x284>)
 800571e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  hex2Float(dataMK10E,68);
 8005722:	2144      	movs	r1, #68	; 0x44
 8005724:	4824      	ldr	r0, [pc, #144]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005726:	f000 f973 	bl	8005a10 <hex2Float>
  eob0[5]=(double)(myFloat.f);
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <saveEoBDataMK10E+0x280>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fa ff1a 	bl	8000568 <__aeabi_f2d>
 8005734:	4603      	mov	r3, r0
 8005736:	460c      	mov	r4, r1
 8005738:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <saveEoBDataMK10E+0x288>)
 800573a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  hex2Float(dataMK10E,72);
 800573e:	2148      	movs	r1, #72	; 0x48
 8005740:	481d      	ldr	r0, [pc, #116]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005742:	f000 f965 	bl	8005a10 <hex2Float>
  eob1[5]=(double)(myFloat.f);
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fa ff0c 	bl	8000568 <__aeabi_f2d>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <saveEoBDataMK10E+0x28c>)
 8005756:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  hex2Float(dataMK10E,76);
 800575a:	214c      	movs	r1, #76	; 0x4c
 800575c:	4816      	ldr	r0, [pc, #88]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800575e:	f000 f957 	bl	8005a10 <hex2Float>
  eob2[5]=(double)(myFloat.f);
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fa fefe 	bl	8000568 <__aeabi_f2d>
 800576c:	4603      	mov	r3, r0
 800576e:	460c      	mov	r4, r1
 8005770:	4a16      	ldr	r2, [pc, #88]	; (80057cc <saveEoBDataMK10E+0x290>)
 8005772:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  // varh penalty
  hex2Float(dataMK10E,80);
 8005776:	2150      	movs	r1, #80	; 0x50
 8005778:	480f      	ldr	r0, [pc, #60]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 800577a:	f000 f949 	bl	8005a10 <hex2Float>
  eob9[6]=(double)(myFloat.f);
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <saveEoBDataMK10E+0x280>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fef0 	bl	8000568 <__aeabi_f2d>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	4a0c      	ldr	r2, [pc, #48]	; (80057c0 <saveEoBDataMK10E+0x284>)
 800578e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  hex2Float(dataMK10E,84);
 8005792:	2154      	movs	r1, #84	; 0x54
 8005794:	4808      	ldr	r0, [pc, #32]	; (80057b8 <saveEoBDataMK10E+0x27c>)
 8005796:	f000 f93b 	bl	8005a10 <hex2Float>
  eob0[6]=(double)(myFloat.f);
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <saveEoBDataMK10E+0x280>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fee2 	bl	8000568 <__aeabi_f2d>
 80057a4:	4603      	mov	r3, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	4a06      	ldr	r2, [pc, #24]	; (80057c4 <saveEoBDataMK10E+0x288>)
 80057aa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
//    Serial.print(" ");
//    Serial.print(eob1[i], 7);
//    Serial.print(" ");
//    Serial.println(eob2[i], 7);
//  }
}
 80057ae:	bf00      	nop
 80057b0:	bd98      	pop	{r3, r4, r7, pc}
 80057b2:	bf00      	nop
 80057b4:	0801e4dc 	.word	0x0801e4dc
 80057b8:	200030fc 	.word	0x200030fc
 80057bc:	20003f64 	.word	0x20003f64
 80057c0:	20003ea8 	.word	0x20003ea8
 80057c4:	20003898 	.word	0x20003898
 80057c8:	20003688 	.word	0x20003688
 80057cc:	20003f18 	.word	0x20003f18

080057d0 <datasize>:
//// Variable Meter Serial Number
uint8_t meterreq[] = {0x02,0x52,0xF0,0x10,0x42,0xEE,0x45,0x03};
uint8_t meterSN[] = {'0','0','0','0','0','0','0','0','0','0'};

int datasize(unsigned char buf[])
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
	while(buf[i] != 0x03) i++;
 80057dc:	e002      	b.n	80057e4 <datasize+0x14>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4413      	add	r3, r2
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d1f6      	bne.n	80057de <datasize+0xe>
	return i+1;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <hex2Double>:
		datastr[i] = '\0';
	}
}

// Convert Hex 8 uint8_ts to Double
double hex2Double(uint8_t myhex[], int from){
 8005800:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
//  double temp;
  ulf.ul = myhex[from];
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f04f 0400 	mov.w	r4, #0
 800581a:	4a7c      	ldr	r2, [pc, #496]	; (8005a0c <hex2Double+0x20c>)
 800581c:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 8005820:	4b7a      	ldr	r3, [pc, #488]	; (8005a0c <hex2Double+0x20c>)
 8005822:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	f04f 0400 	mov.w	r4, #0
 800582e:	0214      	lsls	r4, r2, #8
 8005830:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005834:	020b      	lsls	r3, r1, #8
 8005836:	4a75      	ldr	r2, [pc, #468]	; (8005a0c <hex2Double+0x20c>)
 8005838:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+1];
 800583c:	4b73      	ldr	r3, [pc, #460]	; (8005a0c <hex2Double+0x20c>)
 800583e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4403      	add	r3, r0
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	fa5f fb83 	uxtb.w	fp, r3
 8005850:	f04f 0c00 	mov.w	ip, #0
 8005854:	ea4b 0301 	orr.w	r3, fp, r1
 8005858:	ea4c 0402 	orr.w	r4, ip, r2
 800585c:	4a6b      	ldr	r2, [pc, #428]	; (8005a0c <hex2Double+0x20c>)
 800585e:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 8005862:	4b6a      	ldr	r3, [pc, #424]	; (8005a0c <hex2Double+0x20c>)
 8005864:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	0214      	lsls	r4, r2, #8
 8005872:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005876:	020b      	lsls	r3, r1, #8
 8005878:	4a64      	ldr	r2, [pc, #400]	; (8005a0c <hex2Double+0x20c>)
 800587a:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+2];
 800587e:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <hex2Double+0x20c>)
 8005880:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	3302      	adds	r3, #2
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4403      	add	r3, r0
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	fa5f fb83 	uxtb.w	fp, r3
 8005892:	f04f 0c00 	mov.w	ip, #0
 8005896:	ea4b 0301 	orr.w	r3, fp, r1
 800589a:	ea4c 0402 	orr.w	r4, ip, r2
 800589e:	4a5b      	ldr	r2, [pc, #364]	; (8005a0c <hex2Double+0x20c>)
 80058a0:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 80058a4:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <hex2Double+0x20c>)
 80058a6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	0214      	lsls	r4, r2, #8
 80058b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058b8:	020b      	lsls	r3, r1, #8
 80058ba:	4a54      	ldr	r2, [pc, #336]	; (8005a0c <hex2Double+0x20c>)
 80058bc:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+3];
 80058c0:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <hex2Double+0x20c>)
 80058c2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	3303      	adds	r3, #3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4403      	add	r3, r0
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	fa5f fb83 	uxtb.w	fp, r3
 80058d4:	f04f 0c00 	mov.w	ip, #0
 80058d8:	ea4b 0301 	orr.w	r3, fp, r1
 80058dc:	ea4c 0402 	orr.w	r4, ip, r2
 80058e0:	4a4a      	ldr	r2, [pc, #296]	; (8005a0c <hex2Double+0x20c>)
 80058e2:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 80058e6:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <hex2Double+0x20c>)
 80058e8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	0214      	lsls	r4, r2, #8
 80058f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058fa:	020b      	lsls	r3, r1, #8
 80058fc:	4a43      	ldr	r2, [pc, #268]	; (8005a0c <hex2Double+0x20c>)
 80058fe:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+4];
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <hex2Double+0x20c>)
 8005904:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3304      	adds	r3, #4
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4403      	add	r3, r0
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	fa5f fb83 	uxtb.w	fp, r3
 8005916:	f04f 0c00 	mov.w	ip, #0
 800591a:	ea4b 0301 	orr.w	r3, fp, r1
 800591e:	ea4c 0402 	orr.w	r4, ip, r2
 8005922:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <hex2Double+0x20c>)
 8005924:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 8005928:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <hex2Double+0x20c>)
 800592a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	f04f 0400 	mov.w	r4, #0
 8005936:	0214      	lsls	r4, r2, #8
 8005938:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800593c:	020b      	lsls	r3, r1, #8
 800593e:	4a33      	ldr	r2, [pc, #204]	; (8005a0c <hex2Double+0x20c>)
 8005940:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+5];
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <hex2Double+0x20c>)
 8005946:	e9d3 1200 	ldrd	r1, r2, [r3]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	3305      	adds	r3, #5
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4403      	add	r3, r0
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	fa5f fb83 	uxtb.w	fp, r3
 8005958:	f04f 0c00 	mov.w	ip, #0
 800595c:	ea4b 0301 	orr.w	r3, fp, r1
 8005960:	ea4c 0402 	orr.w	r4, ip, r2
 8005964:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <hex2Double+0x20c>)
 8005966:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <hex2Double+0x20c>)
 800596c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	0214      	lsls	r4, r2, #8
 800597a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800597e:	020b      	lsls	r3, r1, #8
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <hex2Double+0x20c>)
 8005982:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+6];
 8005986:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <hex2Double+0x20c>)
 8005988:	e9d3 1200 	ldrd	r1, r2, [r3]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	3306      	adds	r3, #6
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4403      	add	r3, r0
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	fa5f fb83 	uxtb.w	fp, r3
 800599a:	f04f 0c00 	mov.w	ip, #0
 800599e:	ea4b 0301 	orr.w	r3, fp, r1
 80059a2:	ea4c 0402 	orr.w	r4, ip, r2
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <hex2Double+0x20c>)
 80059a8:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul<<8;
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <hex2Double+0x20c>)
 80059ae:	e9d3 1200 	ldrd	r1, r2, [r3]
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f04f 0400 	mov.w	r4, #0
 80059ba:	0214      	lsls	r4, r2, #8
 80059bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059c0:	020b      	lsls	r3, r1, #8
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <hex2Double+0x20c>)
 80059c4:	e9c2 3400 	strd	r3, r4, [r2]
  ulf.ul = ulf.ul | myhex[from+7];
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <hex2Double+0x20c>)
 80059ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	3307      	adds	r3, #7
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4403      	add	r3, r0
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	fa5f fb83 	uxtb.w	fp, r3
 80059dc:	f04f 0c00 	mov.w	ip, #0
 80059e0:	ea4b 0301 	orr.w	r3, fp, r1
 80059e4:	ea4c 0402 	orr.w	r4, ip, r2
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <hex2Double+0x20c>)
 80059ea:	e9c2 3400 	strd	r3, r4, [r2]
  return ulf.f;
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <hex2Double+0x20c>)
 80059f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059f4:	ec44 3b17 	vmov	d7, r3, r4
}
 80059f8:	eeb0 0a47 	vmov.f32	s0, s14
 80059fc:	eef0 0a67 	vmov.f32	s1, s15
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	200038d8 	.word	0x200038d8

08005a10 <hex2Float>:

// Convert Hex 4 uint8_ts to Float
float hex2Float(uint8_t myhex[], int from){
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <hex2Float+0x88>)
 8005a26:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <hex2Float+0x88>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <hex2Float+0x88>)
 8005a30:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <hex2Float+0x88>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	3201      	adds	r2, #1
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <hex2Float+0x88>)
 8005a44:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <hex2Float+0x88>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <hex2Float+0x88>)
 8005a4e:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 8005a50:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <hex2Float+0x88>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	3202      	adds	r2, #2
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <hex2Float+0x88>)
 8005a62:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <hex2Float+0x88>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <hex2Float+0x88>)
 8005a6c:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <hex2Float+0x88>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	3203      	adds	r2, #3
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	440a      	add	r2, r1
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4a06      	ldr	r2, [pc, #24]	; (8005a98 <hex2Float+0x88>)
 8005a80:	6013      	str	r3, [r2, #0]
  return myFloat.f;
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <hex2Float+0x88>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	ee07 3a90 	vmov	s15, r3
}
 8005a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20003f64 	.word	0x20003f64

08005a9c <hex2Long>:

long hex2Long(uint8_t myhex[], int from){
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <hex2Long+0x84>)
 8005ab2:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <hex2Long+0x84>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <hex2Long+0x84>)
 8005abc:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 8005abe:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <hex2Long+0x84>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	440a      	add	r2, r1
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <hex2Long+0x84>)
 8005ad0:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005ad2:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <hex2Long+0x84>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <hex2Long+0x84>)
 8005ada:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <hex2Long+0x84>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	3202      	adds	r2, #2
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <hex2Long+0x84>)
 8005aee:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <hex2Long+0x84>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <hex2Long+0x84>)
 8005af8:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <hex2Long+0x84>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	3203      	adds	r2, #3
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	440a      	add	r2, r1
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <hex2Long+0x84>)
 8005b0c:	6013      	str	r3, [r2, #0]
  return myFloat.l;
 8005b0e:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <hex2Long+0x84>)
 8005b10:	681b      	ldr	r3, [r3, #0]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20003f64 	.word	0x20003f64

08005b24 <hex2ULong>:

unsigned long hex2ULong(uint8_t myhex[], int from){
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <hex2ULong+0x84>)
 8005b3a:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <hex2ULong+0x84>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <hex2ULong+0x84>)
 8005b44:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <hex2ULong+0x84>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	440a      	add	r2, r1
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <hex2ULong+0x84>)
 8005b58:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <hex2ULong+0x84>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <hex2ULong+0x84>)
 8005b62:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 8005b64:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <hex2ULong+0x84>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	3202      	adds	r2, #2
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	440a      	add	r2, r1
 8005b70:	7812      	ldrb	r2, [r2, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <hex2ULong+0x84>)
 8005b76:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <hex2ULong+0x84>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ba8 <hex2ULong+0x84>)
 8005b80:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <hex2ULong+0x84>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	3203      	adds	r2, #3
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <hex2ULong+0x84>)
 8005b94:	6013      	str	r3, [r2, #0]
  return myFloat.ul;
 8005b96:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <hex2ULong+0x84>)
 8005b98:	681b      	ldr	r3, [r3, #0]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20003f64 	.word	0x20003f64

08005bac <SerialMonprintln>:
  myInt.i = myInt.i<<8;
  myInt.i = myInt.i | myhex[from];
  return myInt.ui;
}

void SerialMonprintln(char * ptr){
 8005bac:	b5b0      	push	{r4, r5, r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	466b      	mov	r3, sp
 8005bb6:	461d      	mov	r5, r3
	uint32_t len=strlen(ptr);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fa fb13 	bl	80001e4 <strlen>
 8005bbe:	6178      	str	r0, [r7, #20]
	uint8_t ptr1[len+2];
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1c98      	adds	r0, r3, #2
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	4601      	mov	r1, r0
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	00d4      	lsls	r4, r2, #3
 8005bda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005bde:	00cb      	lsls	r3, r1, #3
 8005be0:	4601      	mov	r1, r0
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	f04f 0400 	mov.w	r4, #0
 8005bee:	00d4      	lsls	r4, r2, #3
 8005bf0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8005bf4:	00cb      	lsls	r3, r1, #3
 8005bf6:	1dc3      	adds	r3, r0, #7
 8005bf8:	08db      	lsrs	r3, r3, #3
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	ebad 0d03 	sub.w	sp, sp, r3
 8005c00:	466b      	mov	r3, sp
 8005c02:	3300      	adds	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
	memcpy(ptr1, (uint8_t *)ptr, len);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f015 fb3f 	bl	801b290 <memcpy>
	ptr1[len]= 0x0D;
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	220d      	movs	r2, #13
 8005c1a:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	210a      	movs	r1, #10
 8005c24:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, ptr1, len+2, 3000);
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005c34:	4803      	ldr	r0, [pc, #12]	; (8005c44 <SerialMonprintln+0x98>)
 8005c36:	f00e f929 	bl	8013e8c <HAL_UART_Transmit>
 8005c3a:	46ad      	mov	sp, r5
}
 8005c3c:	bf00      	nop
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdb0      	pop	{r4, r5, r7, pc}
 8005c44:	20002fe0 	.word	0x20002fe0

08005c48 <loginToMeterRTOS>:
        return 1;
    }
    return 0;
}

void loginToMeterRTOS(){
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )loginreq, sizeof(loginreq), 100);
 8005c4c:	2364      	movs	r3, #100	; 0x64
 8005c4e:	2213      	movs	r2, #19
 8005c50:	4904      	ldr	r1, [pc, #16]	; (8005c64 <loginToMeterRTOS+0x1c>)
 8005c52:	4805      	ldr	r0, [pc, #20]	; (8005c68 <loginToMeterRTOS+0x20>)
 8005c54:	f00e f91a 	bl	8013e8c <HAL_UART_Transmit>
	osDelay(1000);
 8005c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c5c:	f012 fcec 	bl	8018638 <osDelay>
}
 8005c60:	bf00      	nop
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000000 	.word	0x20000000
 8005c68:	20002770 	.word	0x20002770

08005c6c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8005c70:	2200      	movs	r2, #0
 8005c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c76:	4802      	ldr	r0, [pc, #8]	; (8005c80 <SELECT+0x14>)
 8005c78:	f00a fb46 	bl	8010308 <HAL_GPIO_WritePin>
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	48000400 	.word	0x48000400

08005c84 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c8e:	4802      	ldr	r0, [pc, #8]	; (8005c98 <DESELECT+0x14>)
 8005c90:	f00a fb3a 	bl	8010308 <HAL_GPIO_WritePin>
}
 8005c94:	bf00      	nop
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	48000400 	.word	0x48000400

08005c9c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8005ca6:	bf00      	nop
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <SPI_TxByte+0x30>)
 8005caa:	f00d fd4d 	bl	8013748 <HAL_SPI_GetState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d1f9      	bne.n	8005ca8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8005cb4:	1df9      	adds	r1, r7, #7
 8005cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4803      	ldr	r0, [pc, #12]	; (8005ccc <SPI_TxByte+0x30>)
 8005cbe:	f00d f9ca 	bl	8013056 <HAL_SPI_Transmit>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20004294 	.word	0x20004294

08005cd0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8005cd6:	23ff      	movs	r3, #255	; 0xff
 8005cd8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8005cde:	bf00      	nop
 8005ce0:	4809      	ldr	r0, [pc, #36]	; (8005d08 <SPI_RxByte+0x38>)
 8005ce2:	f00d fd31 	bl	8013748 <HAL_SPI_GetState>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d1f9      	bne.n	8005ce0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8005cec:	1dba      	adds	r2, r7, #6
 8005cee:	1df9      	adds	r1, r7, #7
 8005cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4803      	ldr	r0, [pc, #12]	; (8005d08 <SPI_RxByte+0x38>)
 8005cfa:	f00d fb12 	bl	8013322 <HAL_SPI_TransmitReceive>
  
  return data;
 8005cfe:	79bb      	ldrb	r3, [r7, #6]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20004294 	.word	0x20004294

08005d0c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8005d14:	f7ff ffdc 	bl	8005cd0 <SPI_RxByte>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	701a      	strb	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <SD_ReadyWait+0x34>)
 8005d30:	2232      	movs	r2, #50	; 0x32
 8005d32:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8005d34:	f7ff ffcc 	bl	8005cd0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8005d38:	f7ff ffca 	bl	8005cd0 <SPI_RxByte>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2bff      	cmp	r3, #255	; 0xff
 8005d44:	d004      	beq.n	8005d50 <SD_ReadyWait+0x28>
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <SD_ReadyWait+0x34>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f3      	bne.n	8005d38 <SD_ReadyWait+0x10>
  
  return res;
 8005d50:	79fb      	ldrb	r3, [r7, #7]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000b558 	.word	0x2000b558

08005d60 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8005d66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005d6a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8005d6c:	f7ff ff8a 	bl	8005c84 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	e005      	b.n	8005d82 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8005d76:	20ff      	movs	r0, #255	; 0xff
 8005d78:	f7ff ff90 	bl	8005c9c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	ddf6      	ble.n	8005d76 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8005d88:	f7ff ff70 	bl	8005c6c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8005da0:	2395      	movs	r3, #149	; 0x95
 8005da2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e009      	b.n	8005dbe <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8005daa:	1d3a      	adds	r2, r7, #4
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff ff72 	bl	8005c9c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	ddf2      	ble.n	8005daa <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8005dc4:	e002      	b.n	8005dcc <SD_PowerOn+0x6c>
  {
    Count--;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8005dcc:	f7ff ff80 	bl	8005cd0 <SPI_RxByte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d002      	beq.n	8005ddc <SD_PowerOn+0x7c>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f4      	bne.n	8005dc6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8005ddc:	f7ff ff52 	bl	8005c84 <DESELECT>
  SPI_TxByte(0XFF);
 8005de0:	20ff      	movs	r0, #255	; 0xff
 8005de2:	f7ff ff5b 	bl	8005c9c <SPI_TxByte>
  
  PowerFlag = 1;
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <SD_PowerOn+0x94>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	701a      	strb	r2, [r3, #0]
}
 8005dec:	bf00      	nop
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200003ab 	.word	0x200003ab

08005df8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <SD_PowerOff+0x14>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	200003ab 	.word	0x200003ab

08005e10 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8005e14:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <SD_CheckPower+0x14>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200003ab 	.word	0x200003ab

08005e28 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <SD_RxDataBlock+0x68>)
 8005e34:	220a      	movs	r2, #10
 8005e36:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8005e38:	f7ff ff4a 	bl	8005cd0 <SPI_RxByte>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	d104      	bne.n	8005e50 <SD_RxDataBlock+0x28>
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <SD_RxDataBlock+0x68>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f3      	bne.n	8005e38 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2bfe      	cmp	r3, #254	; 0xfe
 8005e54:	d001      	beq.n	8005e5a <SD_RxDataBlock+0x32>
    return FALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e016      	b.n	8005e88 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff53 	bl	8005d0c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff4d 	bl	8005d0c <SPI_RxBytePtr>
  } while(btr -= 2);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3b02      	subs	r3, #2
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1ed      	bne.n	8005e5a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8005e7e:	f7ff ff27 	bl	8005cd0 <SPI_RxByte>
  SPI_RxByte();
 8005e82:	f7ff ff25 	bl	8005cd0 <SPI_RxByte>
  
  return TRUE;
 8005e86:	2301      	movs	r3, #1
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2000b559 	.word	0x2000b559

08005e94 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8005ea4:	f7ff ff40 	bl	8005d28 <SD_ReadyWait>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2bff      	cmp	r3, #255	; 0xff
 8005eac:	d001      	beq.n	8005eb2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e040      	b.n	8005f34 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fef1 	bl	8005c9c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2bfd      	cmp	r3, #253	; 0xfd
 8005ebe:	d031      	beq.n	8005f24 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fee5 	bl	8005c9c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fede 	bl	8005c9c <SPI_TxByte>
    } while (--wc);
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	73bb      	strb	r3, [r7, #14]
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1eb      	bne.n	8005ec4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8005eec:	f7ff fef0 	bl	8005cd0 <SPI_RxByte>
    SPI_RxByte();
 8005ef0:	f7ff feee 	bl	8005cd0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8005ef4:	e00b      	b.n	8005f0e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8005ef6:	f7ff feeb 	bl	8005cd0 <SPI_RxByte>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d006      	beq.n	8005f16 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8005f08:	7b7b      	ldrb	r3, [r7, #13]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8005f0e:	7b7b      	ldrb	r3, [r7, #13]
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d9f0      	bls.n	8005ef6 <SD_TxDataBlock+0x62>
 8005f14:	e000      	b.n	8005f18 <SD_TxDataBlock+0x84>
        break;
 8005f16:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8005f18:	bf00      	nop
 8005f1a:	f7ff fed9 	bl	8005cd0 <SPI_RxByte>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0fa      	beq.n	8005f1a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d101      	bne.n	8005f32 <SD_TxDataBlock+0x9e>
    return TRUE;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8005f48:	f7ff feee 	bl	8005d28 <SD_ReadyWait>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2bff      	cmp	r3, #255	; 0xff
 8005f50:	d001      	beq.n	8005f56 <SD_SendCmd+0x1a>
    return 0xFF;
 8005f52:	23ff      	movs	r3, #255	; 0xff
 8005f54:	e040      	b.n	8005fd8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fe9f 	bl	8005c9c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fe99 	bl	8005c9c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fe93 	bl	8005c9c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fe8d 	bl	8005c9c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fe88 	bl	8005c9c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b40      	cmp	r3, #64	; 0x40
 8005f94:	d101      	bne.n	8005f9a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8005f96:	2395      	movs	r3, #149	; 0x95
 8005f98:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	2b48      	cmp	r3, #72	; 0x48
 8005f9e:	d101      	bne.n	8005fa4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8005fa0:	2387      	movs	r3, #135	; 0x87
 8005fa2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fe78 	bl	8005c9c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	2b4c      	cmp	r3, #76	; 0x4c
 8005fb0:	d101      	bne.n	8005fb6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8005fb2:	f7ff fe8d 	bl	8005cd0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8005fba:	f7ff fe89 	bl	8005cd0 <SPI_RxByte>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8005fc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da05      	bge.n	8005fd6 <SD_SendCmd+0x9a>
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	73bb      	strb	r3, [r7, #14]
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f1      	bne.n	8005fba <SD_SendCmd+0x7e>
  
  return res;
 8005fd6:	7b7b      	ldrb	r3, [r7, #13]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0d5      	b.n	80061a0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8005ff4:	4b6c      	ldr	r3, [pc, #432]	; (80061a8 <SD_disk_initialize+0x1c8>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <SD_disk_initialize+0x2a>
    return Stat;        
 8006002:	4b69      	ldr	r3, [pc, #420]	; (80061a8 <SD_disk_initialize+0x1c8>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	e0ca      	b.n	80061a0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800600a:	f7ff fea9 	bl	8005d60 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800600e:	f7ff fe2d 	bl	8005c6c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8006016:	2100      	movs	r1, #0
 8006018:	2040      	movs	r0, #64	; 0x40
 800601a:	f7ff ff8f 	bl	8005f3c <SD_SendCmd>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 80a5 	bne.w	8006170 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8006026:	4b61      	ldr	r3, [pc, #388]	; (80061ac <SD_disk_initialize+0x1cc>)
 8006028:	2264      	movs	r2, #100	; 0x64
 800602a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800602c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006030:	2048      	movs	r0, #72	; 0x48
 8006032:	f7ff ff83 	bl	8005f3c <SD_SendCmd>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d158      	bne.n	80060ee <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
 8006040:	e00c      	b.n	800605c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8006042:	7bfc      	ldrb	r4, [r7, #15]
 8006044:	f7ff fe44 	bl	8005cd0 <SPI_RxByte>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	4423      	add	r3, r4
 8006052:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	3301      	adds	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d9ef      	bls.n	8006042 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8006062:	7abb      	ldrb	r3, [r7, #10]
 8006064:	2b01      	cmp	r3, #1
 8006066:	f040 8083 	bne.w	8006170 <SD_disk_initialize+0x190>
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	2baa      	cmp	r3, #170	; 0xaa
 800606e:	d17f      	bne.n	8006170 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8006070:	2100      	movs	r1, #0
 8006072:	2077      	movs	r0, #119	; 0x77
 8006074:	f7ff ff62 	bl	8005f3c <SD_SendCmd>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d807      	bhi.n	800608e <SD_disk_initialize+0xae>
 800607e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006082:	2069      	movs	r0, #105	; 0x69
 8006084:	f7ff ff5a 	bl	8005f3c <SD_SendCmd>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800608e:	4b47      	ldr	r3, [pc, #284]	; (80061ac <SD_disk_initialize+0x1cc>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1eb      	bne.n	8006070 <SD_disk_initialize+0x90>
 8006098:	e000      	b.n	800609c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800609a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800609c:	4b43      	ldr	r3, [pc, #268]	; (80061ac <SD_disk_initialize+0x1cc>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d064      	beq.n	8006170 <SD_disk_initialize+0x190>
 80060a6:	2100      	movs	r1, #0
 80060a8:	207a      	movs	r0, #122	; 0x7a
 80060aa:	f7ff ff47 	bl	8005f3c <SD_SendCmd>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d15d      	bne.n	8006170 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
 80060b8:	e00c      	b.n	80060d4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80060ba:	7bfc      	ldrb	r4, [r7, #15]
 80060bc:	f7ff fe08 	bl	8005cd0 <SPI_RxByte>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4423      	add	r3, r4
 80060ca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	3301      	adds	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d9ef      	bls.n	80060ba <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80060da:	7a3b      	ldrb	r3, [r7, #8]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <SD_disk_initialize+0x108>
 80060e4:	2306      	movs	r3, #6
 80060e6:	e000      	b.n	80060ea <SD_disk_initialize+0x10a>
 80060e8:	2302      	movs	r3, #2
 80060ea:	73bb      	strb	r3, [r7, #14]
 80060ec:	e040      	b.n	8006170 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80060ee:	2100      	movs	r1, #0
 80060f0:	2077      	movs	r0, #119	; 0x77
 80060f2:	f7ff ff23 	bl	8005f3c <SD_SendCmd>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d808      	bhi.n	800610e <SD_disk_initialize+0x12e>
 80060fc:	2100      	movs	r1, #0
 80060fe:	2069      	movs	r0, #105	; 0x69
 8006100:	f7ff ff1c 	bl	8005f3c <SD_SendCmd>
 8006104:	4603      	mov	r3, r0
 8006106:	2b01      	cmp	r3, #1
 8006108:	d801      	bhi.n	800610e <SD_disk_initialize+0x12e>
 800610a:	2302      	movs	r3, #2
 800610c:	e000      	b.n	8006110 <SD_disk_initialize+0x130>
 800610e:	2301      	movs	r3, #1
 8006110:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10e      	bne.n	8006136 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8006118:	2100      	movs	r1, #0
 800611a:	2077      	movs	r0, #119	; 0x77
 800611c:	f7ff ff0e 	bl	8005f3c <SD_SendCmd>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d80e      	bhi.n	8006144 <SD_disk_initialize+0x164>
 8006126:	2100      	movs	r1, #0
 8006128:	2069      	movs	r0, #105	; 0x69
 800612a:	f7ff ff07 	bl	8005f3c <SD_SendCmd>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8006134:	e00d      	b.n	8006152 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8006136:	2100      	movs	r1, #0
 8006138:	2041      	movs	r0, #65	; 0x41
 800613a:	f7ff feff 	bl	8005f3c <SD_SendCmd>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8006144:	4b19      	ldr	r3, [pc, #100]	; (80061ac <SD_disk_initialize+0x1cc>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e1      	bne.n	8006112 <SD_disk_initialize+0x132>
 800614e:	e000      	b.n	8006152 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8006150:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <SD_disk_initialize+0x1cc>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <SD_disk_initialize+0x18c>
 800615c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006160:	2050      	movs	r0, #80	; 0x50
 8006162:	f7ff feeb 	bl	8005f3c <SD_SendCmd>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8006170:	4a0f      	ldr	r2, [pc, #60]	; (80061b0 <SD_disk_initialize+0x1d0>)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8006176:	f7ff fd85 	bl	8005c84 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800617a:	f7ff fda9 	bl	8005cd0 <SPI_RxByte>
  
  if (type) 
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <SD_disk_initialize+0x1c8>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <SD_disk_initialize+0x1c8>)
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e001      	b.n	800619a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8006196:	f7ff fe2f 	bl	8005df8 <SD_PowerOff>
  }
  
  return Stat;
 800619a:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <SD_disk_initialize+0x1c8>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b2db      	uxtb	r3, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd90      	pop	{r4, r7, pc}
 80061a8:	200000ba 	.word	0x200000ba
 80061ac:	2000b559 	.word	0x2000b559
 80061b0:	200003aa 	.word	0x200003aa

080061b4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80061c4:	2301      	movs	r3, #1
 80061c6:	e002      	b.n	80061ce <SD_disk_status+0x1a>
  
  return Stat;
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <SD_disk_status+0x28>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	200000ba 	.word	0x200000ba

080061e0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <SD_disk_read+0x1c>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <SD_disk_read+0x20>
    return RES_PARERR;
 80061fc:	2304      	movs	r3, #4
 80061fe:	e051      	b.n	80062a4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8006200:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <SD_disk_read+0xcc>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800620e:	2303      	movs	r3, #3
 8006210:	e048      	b.n	80062a4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8006212:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <SD_disk_read+0xd0>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	025b      	lsls	r3, r3, #9
 8006222:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8006224:	f7ff fd22 	bl	8005c6c <SELECT>
  
  if (count == 1) 
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d111      	bne.n	8006252 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	2051      	movs	r0, #81	; 0x51
 8006232:	f7ff fe83 	bl	8005f3c <SD_SendCmd>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d129      	bne.n	8006290 <SD_disk_read+0xb0>
 800623c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006240:	68b8      	ldr	r0, [r7, #8]
 8006242:	f7ff fdf1 	bl	8005e28 <SD_RxDataBlock>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d021      	beq.n	8006290 <SD_disk_read+0xb0>
      count = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	e01e      	b.n	8006290 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	2052      	movs	r0, #82	; 0x52
 8006256:	f7ff fe71 	bl	8005f3c <SD_SendCmd>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d117      	bne.n	8006290 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8006260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006264:	68b8      	ldr	r0, [r7, #8]
 8006266:	f7ff fddf 	bl	8005e28 <SD_RxDataBlock>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006276:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ed      	bne.n	8006260 <SD_disk_read+0x80>
 8006284:	e000      	b.n	8006288 <SD_disk_read+0xa8>
          break;
 8006286:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8006288:	2100      	movs	r1, #0
 800628a:	204c      	movs	r0, #76	; 0x4c
 800628c:	f7ff fe56 	bl	8005f3c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8006290:	f7ff fcf8 	bl	8005c84 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8006294:	f7ff fd1c 	bl	8005cd0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	200000ba 	.word	0x200000ba
 80062b0:	200003aa 	.word	0x200003aa

080062b4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <SD_disk_write+0x1c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <SD_disk_write+0x20>
    return RES_PARERR;
 80062d0:	2304      	movs	r3, #4
 80062d2:	e06b      	b.n	80063ac <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80062d4:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <SD_disk_write+0x100>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e062      	b.n	80063ac <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80062e6:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <SD_disk_write+0x100>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80062f4:	2302      	movs	r3, #2
 80062f6:	e059      	b.n	80063ac <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80062f8:	4b2f      	ldr	r3, [pc, #188]	; (80063b8 <SD_disk_write+0x104>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	025b      	lsls	r3, r3, #9
 8006308:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800630a:	f7ff fcaf 	bl	8005c6c <SELECT>
  
  if (count == 1) 
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d110      	bne.n	8006336 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	2058      	movs	r0, #88	; 0x58
 8006318:	f7ff fe10 	bl	8005f3c <SD_SendCmd>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d13a      	bne.n	8006398 <SD_disk_write+0xe4>
 8006322:	21fe      	movs	r1, #254	; 0xfe
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f7ff fdb5 	bl	8005e94 <SD_TxDataBlock>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d033      	beq.n	8006398 <SD_disk_write+0xe4>
      count = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	e030      	b.n	8006398 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <SD_disk_write+0x104>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8006342:	2100      	movs	r1, #0
 8006344:	2077      	movs	r0, #119	; 0x77
 8006346:	f7ff fdf9 	bl	8005f3c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	2057      	movs	r0, #87	; 0x57
 800634e:	f7ff fdf5 	bl	8005f3c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	2059      	movs	r0, #89	; 0x59
 8006356:	f7ff fdf1 	bl	8005f3c <SD_SendCmd>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11b      	bne.n	8006398 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8006360:	21fc      	movs	r1, #252	; 0xfc
 8006362:	68b8      	ldr	r0, [r7, #8]
 8006364:	f7ff fd96 	bl	8005e94 <SD_TxDataBlock>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006374:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	3b01      	subs	r3, #1
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1ee      	bne.n	8006360 <SD_disk_write+0xac>
 8006382:	e000      	b.n	8006386 <SD_disk_write+0xd2>
          break;
 8006384:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8006386:	21fd      	movs	r1, #253	; 0xfd
 8006388:	2000      	movs	r0, #0
 800638a:	f7ff fd83 	bl	8005e94 <SD_TxDataBlock>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <SD_disk_write+0xe4>
      {        
        count = 1;
 8006394:	2301      	movs	r3, #1
 8006396:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8006398:	f7ff fc74 	bl	8005c84 <DESELECT>
  SPI_RxByte();
 800639c:	f7ff fc98 	bl	8005cd0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf14      	ite	ne
 80063a6:	2301      	movne	r3, #1
 80063a8:	2300      	moveq	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	200000ba 	.word	0x200000ba
 80063b8:	200003aa 	.word	0x200003aa

080063bc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b08b      	sub	sp, #44	; 0x2c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	603a      	str	r2, [r7, #0]
 80063c6:	71fb      	strb	r3, [r7, #7]
 80063c8:	460b      	mov	r3, r1
 80063ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80063d6:	2304      	movs	r3, #4
 80063d8:	e117      	b.n	800660a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80063e0:	79bb      	ldrb	r3, [r7, #6]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d126      	bne.n	8006434 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d00e      	beq.n	800640c <SD_disk_ioctl+0x50>
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d012      	beq.n	8006418 <SD_disk_ioctl+0x5c>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11a      	bne.n	800642c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80063f6:	f7ff fd0b 	bl	8005e10 <SD_CheckPower>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8006400:	f7ff fcfa 	bl	8005df8 <SD_PowerOff>
      res = RES_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800640a:	e0fc      	b.n	8006606 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800640c:	f7ff fca8 	bl	8005d60 <SD_PowerOn>
      res = RES_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006416:	e0f6      	b.n	8006606 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	1c5c      	adds	r4, r3, #1
 800641c:	f7ff fcf8 	bl	8005e10 <SD_CheckPower>
 8006420:	4603      	mov	r3, r0
 8006422:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800642a:	e0ec      	b.n	8006606 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800642c:	2304      	movs	r3, #4
 800642e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006432:	e0e8      	b.n	8006606 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8006434:	4b77      	ldr	r3, [pc, #476]	; (8006614 <SD_disk_ioctl+0x258>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8006442:	2303      	movs	r3, #3
 8006444:	e0e1      	b.n	800660a <SD_disk_ioctl+0x24e>
    
    SELECT();
 8006446:	f7ff fc11 	bl	8005c6c <SELECT>
    
    switch (ctrl) 
 800644a:	79bb      	ldrb	r3, [r7, #6]
 800644c:	2b0d      	cmp	r3, #13
 800644e:	f200 80cb 	bhi.w	80065e8 <SD_disk_ioctl+0x22c>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <SD_disk_ioctl+0x9c>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006553 	.word	0x08006553
 800645c:	08006491 	.word	0x08006491
 8006460:	08006543 	.word	0x08006543
 8006464:	080065e9 	.word	0x080065e9
 8006468:	080065e9 	.word	0x080065e9
 800646c:	080065e9 	.word	0x080065e9
 8006470:	080065e9 	.word	0x080065e9
 8006474:	080065e9 	.word	0x080065e9
 8006478:	080065e9 	.word	0x080065e9
 800647c:	080065e9 	.word	0x080065e9
 8006480:	080065e9 	.word	0x080065e9
 8006484:	08006565 	.word	0x08006565
 8006488:	08006589 	.word	0x08006589
 800648c:	080065ad 	.word	0x080065ad
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8006490:	2100      	movs	r1, #0
 8006492:	2049      	movs	r0, #73	; 0x49
 8006494:	f7ff fd52 	bl	8005f3c <SD_SendCmd>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	f040 80a8 	bne.w	80065f0 <SD_disk_ioctl+0x234>
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	2110      	movs	r1, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fcbe 	bl	8005e28 <SD_RxDataBlock>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 809e 	beq.w	80065f0 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80064b4:	7b3b      	ldrb	r3, [r7, #12]
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d10e      	bne.n	80064dc <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80064be:	7d7b      	ldrb	r3, [r7, #21]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	7d3b      	ldrb	r3, [r7, #20]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3301      	adds	r3, #1
 80064d0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80064d2:	8bfb      	ldrh	r3, [r7, #30]
 80064d4:	029a      	lsls	r2, r3, #10
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e02e      	b.n	800653a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80064dc:	7c7b      	ldrb	r3, [r7, #17]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
 80064e6:	09db      	lsrs	r3, r3, #7
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	4413      	add	r3, r2
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	7d7b      	ldrb	r3, [r7, #21]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0306 	and.w	r3, r3, #6
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	3302      	adds	r3, #2
 8006500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006504:	7d3b      	ldrb	r3, [r7, #20]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	b2db      	uxtb	r3, r3
 800650a:	b29a      	uxth	r2, r3
 800650c:	7cfb      	ldrb	r3, [r7, #19]
 800650e:	b29b      	uxth	r3, r3
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	b29b      	uxth	r3, r3
 8006514:	4413      	add	r3, r2
 8006516:	b29a      	uxth	r2, r3
 8006518:	7cbb      	ldrb	r3, [r7, #18]
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006522:	b29b      	uxth	r3, r3
 8006524:	4413      	add	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	3301      	adds	r3, #1
 800652a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800652c:	8bfa      	ldrh	r2, [r7, #30]
 800652e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006532:	3b09      	subs	r3, #9
 8006534:	409a      	lsls	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8006540:	e056      	b.n	80065f0 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006548:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006550:	e055      	b.n	80065fe <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8006552:	f7ff fbe9 	bl	8005d28 <SD_ReadyWait>
 8006556:	4603      	mov	r3, r0
 8006558:	2bff      	cmp	r3, #255	; 0xff
 800655a:	d14b      	bne.n	80065f4 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006562:	e047      	b.n	80065f4 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006564:	2100      	movs	r1, #0
 8006566:	2049      	movs	r0, #73	; 0x49
 8006568:	f7ff fce8 	bl	8005f3c <SD_SendCmd>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d142      	bne.n	80065f8 <SD_disk_ioctl+0x23c>
 8006572:	2110      	movs	r1, #16
 8006574:	6a38      	ldr	r0, [r7, #32]
 8006576:	f7ff fc57 	bl	8005e28 <SD_RxDataBlock>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d03b      	beq.n	80065f8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006586:	e037      	b.n	80065f8 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006588:	2100      	movs	r1, #0
 800658a:	204a      	movs	r0, #74	; 0x4a
 800658c:	f7ff fcd6 	bl	8005f3c <SD_SendCmd>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d132      	bne.n	80065fc <SD_disk_ioctl+0x240>
 8006596:	2110      	movs	r1, #16
 8006598:	6a38      	ldr	r0, [r7, #32]
 800659a:	f7ff fc45 	bl	8005e28 <SD_RxDataBlock>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02b      	beq.n	80065fc <SD_disk_ioctl+0x240>
        res = RES_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80065aa:	e027      	b.n	80065fc <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80065ac:	2100      	movs	r1, #0
 80065ae:	207a      	movs	r0, #122	; 0x7a
 80065b0:	f7ff fcc4 	bl	8005f3c <SD_SendCmd>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d116      	bne.n	80065e8 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80065c0:	e00b      	b.n	80065da <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80065c2:	6a3c      	ldr	r4, [r7, #32]
 80065c4:	1c63      	adds	r3, r4, #1
 80065c6:	623b      	str	r3, [r7, #32]
 80065c8:	f7ff fb82 	bl	8005cd0 <SPI_RxByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80065d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065d4:	3301      	adds	r3, #1
 80065d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80065da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d9ef      	bls.n	80065c2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065ee:	e006      	b.n	80065fe <SD_disk_ioctl+0x242>
      break;
 80065f0:	bf00      	nop
 80065f2:	e004      	b.n	80065fe <SD_disk_ioctl+0x242>
      break;
 80065f4:	bf00      	nop
 80065f6:	e002      	b.n	80065fe <SD_disk_ioctl+0x242>
      break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <SD_disk_ioctl+0x242>
      break;
 80065fc:	bf00      	nop
    }
    
    DESELECT();
 80065fe:	f7ff fb41 	bl	8005c84 <DESELECT>
    SPI_RxByte();
 8006602:	f7ff fb65 	bl	8005cd0 <SPI_RxByte>
  }
  
  return res;
 8006606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800660a:	4618      	mov	r0, r3
 800660c:	372c      	adds	r7, #44	; 0x2c
 800660e:	46bd      	mov	sp, r7
 8006610:	bd90      	pop	{r4, r7, pc}
 8006612:	bf00      	nop
 8006614:	200000ba 	.word	0x200000ba

08006618 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a07      	ldr	r2, [pc, #28]	; (8006644 <vApplicationGetIdleTaskMemory+0x2c>)
 8006628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4a06      	ldr	r2, [pc, #24]	; (8006648 <vApplicationGetIdleTaskMemory+0x30>)
 800662e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200003ac 	.word	0x200003ac
 8006648:	20000400 	.word	0x20000400

0800664c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	461a      	mov	r2, r3
 8006658:	460b      	mov	r3, r1
 800665a:	72fb      	strb	r3, [r7, #11]
 800665c:	4613      	mov	r3, r2
 800665e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685c      	ldr	r4, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6898      	ldr	r0, [r3, #8]
 8006668:	893b      	ldrh	r3, [r7, #8]
 800666a:	7af9      	ldrb	r1, [r7, #11]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	47a0      	blx	r4
 8006670:	6178      	str	r0, [r7, #20]
  return ret;
 8006672:	697b      	ldr	r3, [r7, #20]
}
 8006674:	4618      	mov	r0, r3
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd90      	pop	{r4, r7, pc}

0800667c <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	461a      	mov	r2, r3
 8006688:	460b      	mov	r3, r1
 800668a:	72fb      	strb	r3, [r7, #11]
 800668c:	4613      	mov	r3, r2
 800668e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681c      	ldr	r4, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6898      	ldr	r0, [r3, #8]
 8006698:	893b      	ldrh	r3, [r7, #8]
 800669a:	7af9      	ldrb	r1, [r7, #11]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	47a0      	blx	r4
 80066a0:	6178      	str	r0, [r7, #20]
  return ret;
 80066a2:	697b      	ldr	r3, [r7, #20]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd90      	pop	{r4, r7, pc}

080066ac <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80066b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80066d8 <lsm6dsl_from_fs2g_to_mg+0x2c>
 80066c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80066ca:	eeb0 0a67 	vmov.f32	s0, s15
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	3d79db23 	.word	0x3d79db23

080066dc <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80066e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006708 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80066f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80066fa:	eeb0 0a67 	vmov.f32	s0, s15
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	428c0000 	.word	0x428c0000

0800670c <lsm6dsl_from_lsb_to_celsius>:

float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006722:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006740 <lsm6dsl_from_lsb_to_celsius+0x34>
 8006726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800672a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800672e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006732:	eeb0 0a67 	vmov.f32	s0, s15
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	43800000 	.word	0x43800000

08006744 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006750:	f107 0208 	add.w	r2, r7, #8
 8006754:	2301      	movs	r3, #1
 8006756:	2110      	movs	r1, #16
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ff77 	bl	800664c <lsm6dsl_read_reg>
 800675e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10f      	bne.n	8006786 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	b2da      	uxtb	r2, r3
 800676e:	7a3b      	ldrb	r3, [r7, #8]
 8006770:	f362 0383 	bfi	r3, r2, #2, #2
 8006774:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006776:	f107 0208 	add.w	r2, r7, #8
 800677a:	2301      	movs	r3, #1
 800677c:	2110      	movs	r1, #16
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ff7c 	bl	800667c <lsm6dsl_write_reg>
 8006784:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800679c:	f107 0208 	add.w	r2, r7, #8
 80067a0:	2301      	movs	r3, #1
 80067a2:	2110      	movs	r1, #16
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff51 	bl	800664c <lsm6dsl_read_reg>
 80067aa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10f      	bne.n	80067d2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	7a3b      	ldrb	r3, [r7, #8]
 80067bc:	f362 1307 	bfi	r3, r2, #4, #4
 80067c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	2301      	movs	r3, #1
 80067c8:	2110      	movs	r1, #16
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ff56 	bl	800667c <lsm6dsl_write_reg>
 80067d0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80067e8:	f107 0208 	add.w	r2, r7, #8
 80067ec:	2301      	movs	r3, #1
 80067ee:	2111      	movs	r1, #17
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff2b 	bl	800664c <lsm6dsl_read_reg>
 80067f6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10f      	bne.n	800681e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	b2da      	uxtb	r2, r3
 8006806:	7a3b      	ldrb	r3, [r7, #8]
 8006808:	f362 0343 	bfi	r3, r2, #1, #3
 800680c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800680e:	f107 0208 	add.w	r2, r7, #8
 8006812:	2301      	movs	r3, #1
 8006814:	2111      	movs	r1, #17
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff30 	bl	800667c <lsm6dsl_write_reg>
 800681c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006834:	f107 0208 	add.w	r2, r7, #8
 8006838:	2301      	movs	r3, #1
 800683a:	2111      	movs	r1, #17
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff05 	bl	800664c <lsm6dsl_read_reg>
 8006842:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10f      	bne.n	800686a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	b2da      	uxtb	r2, r3
 8006852:	7a3b      	ldrb	r3, [r7, #8]
 8006854:	f362 1307 	bfi	r3, r2, #4, #4
 8006858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	2301      	movs	r3, #1
 8006860:	2111      	movs	r1, #17
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff0a 	bl	800667c <lsm6dsl_write_reg>
 8006868:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006880:	f107 0208 	add.w	r2, r7, #8
 8006884:	2301      	movs	r3, #1
 8006886:	2112      	movs	r1, #18
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fedf 	bl	800664c <lsm6dsl_read_reg>
 800688e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	b2da      	uxtb	r2, r3
 800689e:	7a3b      	ldrb	r3, [r7, #8]
 80068a0:	f362 1386 	bfi	r3, r2, #6, #1
 80068a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80068a6:	f107 0208 	add.w	r2, r7, #8
 80068aa:	2301      	movs	r3, #1
 80068ac:	2112      	movs	r1, #18
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff fee4 	bl	800667c <lsm6dsl_write_reg>
 80068b4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 80068ca:	2301      	movs	r3, #1
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	211e      	movs	r1, #30
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff febb 	bl	800664c <lsm6dsl_read_reg>
 80068d6:	60f8      	str	r0, [r7, #12]
  return ret;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <lsm6dsl_timestamp_res_set>:
  * @param  val    Change the values of timer_hr in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_timestamp_res_set(stmdev_ctx_t *ctx, lsm6dsl_timer_hr_t val)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 80068ee:	f107 0208 	add.w	r2, r7, #8
 80068f2:	2301      	movs	r3, #1
 80068f4:	215c      	movs	r1, #92	; 0x5c
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fea8 	bl	800664c <lsm6dsl_read_reg>
 80068fc:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10f      	bne.n	8006924 <lsm6dsl_timestamp_res_set+0x42>
    wake_up_dur.timer_hr = (uint8_t) val;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	7a3b      	ldrb	r3, [r7, #8]
 800690e:	f362 1304 	bfi	r3, r2, #4, #1
 8006912:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8006914:	f107 0208 	add.w	r2, r7, #8
 8006918:	2301      	movs	r3, #1
 800691a:	215c      	movs	r1, #92	; 0x5c
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fead 	bl	800667c <lsm6dsl_write_reg>
 8006922:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 8006924:	68fb      	ldr	r3, [r7, #12]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <lsm6dsl_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
 8006938:	2302      	movs	r3, #2
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	2120      	movs	r1, #32
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fe84 	bl	800664c <lsm6dsl_read_reg>
 8006944:	60f8      	str	r0, [r7, #12]
  return ret;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800695a:	2306      	movs	r3, #6
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	2122      	movs	r1, #34	; 0x22
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fe73 	bl	800664c <lsm6dsl_read_reg>
 8006966:	60f8      	str	r0, [r7, #12]
  return ret;
 8006968:	68fb      	ldr	r3, [r7, #12]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800697c:	2306      	movs	r3, #6
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	2128      	movs	r1, #40	; 0x28
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fe62 	bl	800664c <lsm6dsl_read_reg>
 8006988:	60f8      	str	r0, [r7, #12]
  return ret;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800699e:	2301      	movs	r3, #1
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	210f      	movs	r1, #15
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fe51 	bl	800664c <lsm6dsl_read_reg>
 80069aa:	60f8      	str	r0, [r7, #12]
  return ret;
 80069ac:	68fb      	ldr	r3, [r7, #12]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80069c2:	f107 0208 	add.w	r2, r7, #8
 80069c6:	2301      	movs	r3, #1
 80069c8:	2112      	movs	r1, #18
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fe3e 	bl	800664c <lsm6dsl_read_reg>
 80069d0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	7a3b      	ldrb	r3, [r7, #8]
 80069e2:	f362 0300 	bfi	r3, r2, #0, #1
 80069e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80069e8:	f107 0208 	add.w	r2, r7, #8
 80069ec:	2301      	movs	r3, #1
 80069ee:	2112      	movs	r1, #18
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fe43 	bl	800667c <lsm6dsl_write_reg>
 80069f6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80069f8:	68fb      	ldr	r3, [r7, #12]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006a0c:	f107 0208 	add.w	r2, r7, #8
 8006a10:	2301      	movs	r3, #1
 8006a12:	2112      	movs	r1, #18
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fe19 	bl	800664c <lsm6dsl_read_reg>
 8006a1a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006a1c:	7a3b      	ldrb	r3, [r7, #8]
 8006a1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	701a      	strb	r2, [r3, #0]

  return ret;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006a40:	f107 0208 	add.w	r2, r7, #8
 8006a44:	2301      	movs	r3, #1
 8006a46:	2110      	movs	r1, #16
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff fdff 	bl	800664c <lsm6dsl_read_reg>
 8006a4e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	7a3b      	ldrb	r3, [r7, #8]
 8006a60:	f362 0300 	bfi	r3, r2, #0, #1
 8006a64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006a66:	f107 0208 	add.w	r2, r7, #8
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	2110      	movs	r1, #16
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fe04 	bl	800667c <lsm6dsl_write_reg>
 8006a74:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	2301      	movs	r3, #1
 8006a92:	2117      	movs	r1, #23
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fdd9 	bl	800664c <lsm6dsl_read_reg>
 8006a9a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d120      	bne.n	8006ae4 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	7a3b      	ldrb	r3, [r7, #8]
 8006aae:	f362 03c3 	bfi	r3, r2, #3, #1
 8006ab2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	7a3b      	ldrb	r3, [r7, #8]
 8006abe:	f362 1346 	bfi	r3, r2, #5, #2
 8006ac2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8006ac4:	7a3b      	ldrb	r3, [r7, #8]
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8006acc:	7a3b      	ldrb	r3, [r7, #8]
 8006ace:	f36f 0382 	bfc	r3, #2, #1
 8006ad2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006ad4:	f107 0208 	add.w	r2, r7, #8
 8006ad8:	2301      	movs	r3, #1
 8006ada:	2117      	movs	r1, #23
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fdcd 	bl	800667c <lsm6dsl_write_reg>
 8006ae2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8006afa:	f107 0208 	add.w	r2, r7, #8
 8006afe:	2301      	movs	r3, #1
 8006b00:	2116      	movs	r1, #22
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fda2 	bl	800664c <lsm6dsl_read_reg>
 8006b08:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d157      	bne.n	8006bc0 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	7a3b      	ldrb	r3, [r7, #8]
 8006b1c:	f362 1305 	bfi	r3, r2, #4, #2
 8006b20:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	09db      	lsrs	r3, r3, #7
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	7a3b      	ldrb	r3, [r7, #8]
 8006b30:	f362 1386 	bfi	r3, r2, #6, #1
 8006b34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8006b36:	f107 0208 	add.w	r2, r7, #8
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	2116      	movs	r1, #22
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fd9c 	bl	800667c <lsm6dsl_write_reg>
 8006b44:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d139      	bne.n	8006bc0 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8006b4c:	f107 020c 	add.w	r2, r7, #12
 8006b50:	2301      	movs	r3, #1
 8006b52:	2115      	movs	r1, #21
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff fd79 	bl	800664c <lsm6dsl_read_reg>
 8006b5a:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d12e      	bne.n	8006bc0 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	7b3b      	ldrb	r3, [r7, #12]
 8006b6c:	f362 0301 	bfi	r3, r2, #0, #2
 8006b70:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8006b72:	f107 020c 	add.w	r2, r7, #12
 8006b76:	2301      	movs	r3, #1
 8006b78:	2115      	movs	r1, #21
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fd7e 	bl	800667c <lsm6dsl_write_reg>
 8006b80:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11b      	bne.n	8006bc0 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8006b88:	f107 0210 	add.w	r2, r7, #16
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	2113      	movs	r1, #19
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fd5b 	bl	800664c <lsm6dsl_read_reg>
 8006b96:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d110      	bne.n	8006bc0 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	7c3b      	ldrb	r3, [r7, #16]
 8006baa:	f362 0341 	bfi	r3, r2, #1, #1
 8006bae:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8006bb0:	f107 0210 	add.w	r2, r7, #16
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	2113      	movs	r1, #19
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fd5f 	bl	800667c <lsm6dsl_write_reg>
 8006bbe:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8006bc0:	697b      	ldr	r3, [r7, #20]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08a      	sub	sp, #40	; 0x28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8006bd4:	f107 021c 	add.w	r2, r7, #28
 8006bd8:	2301      	movs	r3, #1
 8006bda:	210d      	movs	r1, #13
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff fd35 	bl	800664c <lsm6dsl_read_reg>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d147      	bne.n	8006c7a <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8006bea:	783b      	ldrb	r3, [r7, #0]
 8006bec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	7f3b      	ldrb	r3, [r7, #28]
 8006bf4:	f362 0300 	bfi	r3, r2, #0, #1
 8006bf8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8006bfa:	783b      	ldrb	r3, [r7, #0]
 8006bfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	7f3b      	ldrb	r3, [r7, #28]
 8006c04:	f362 0341 	bfi	r3, r2, #1, #1
 8006c08:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8006c0a:	783b      	ldrb	r3, [r7, #0]
 8006c0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	7f3b      	ldrb	r3, [r7, #28]
 8006c14:	f362 0382 	bfi	r3, r2, #2, #1
 8006c18:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8006c1a:	783b      	ldrb	r3, [r7, #0]
 8006c1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	7f3b      	ldrb	r3, [r7, #28]
 8006c24:	f362 03c3 	bfi	r3, r2, #3, #1
 8006c28:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8006c2a:	783b      	ldrb	r3, [r7, #0]
 8006c2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	7f3b      	ldrb	r3, [r7, #28]
 8006c34:	f362 1304 	bfi	r3, r2, #4, #1
 8006c38:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8006c3a:	783b      	ldrb	r3, [r7, #0]
 8006c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	7f3b      	ldrb	r3, [r7, #28]
 8006c44:	f362 1345 	bfi	r3, r2, #5, #1
 8006c48:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8006c4a:	783b      	ldrb	r3, [r7, #0]
 8006c4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	7f3b      	ldrb	r3, [r7, #28]
 8006c54:	f362 1386 	bfi	r3, r2, #6, #1
 8006c58:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8006c5a:	783b      	ldrb	r3, [r7, #0]
 8006c5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	7f3b      	ldrb	r3, [r7, #28]
 8006c64:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c68:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8006c6a:	f107 021c 	add.w	r2, r7, #28
 8006c6e:	2301      	movs	r3, #1
 8006c70:	210d      	movs	r1, #13
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fd02 	bl	800667c <lsm6dsl_write_reg>
 8006c78:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8006c80:	f107 0218 	add.w	r2, r7, #24
 8006c84:	2301      	movs	r3, #1
 8006c86:	215e      	movs	r1, #94	; 0x5e
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fcdf 	bl	800664c <lsm6dsl_read_reg>
 8006c8e:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8006c96:	f107 0214 	add.w	r2, r7, #20
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	215f      	movs	r1, #95	; 0x5f
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fcd4 	bl	800664c <lsm6dsl_read_reg>
 8006ca4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d147      	bne.n	8006d3c <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8006cac:	787b      	ldrb	r3, [r7, #1]
 8006cae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	7e3b      	ldrb	r3, [r7, #24]
 8006cb6:	f362 0300 	bfi	r3, r2, #0, #1
 8006cba:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8006cbc:	787b      	ldrb	r3, [r7, #1]
 8006cbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	7e3b      	ldrb	r3, [r7, #24]
 8006cc6:	f362 0341 	bfi	r3, r2, #1, #1
 8006cca:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8006ccc:	787b      	ldrb	r3, [r7, #1]
 8006cce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	7e3b      	ldrb	r3, [r7, #24]
 8006cd6:	f362 0382 	bfi	r3, r2, #2, #1
 8006cda:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8006cdc:	787b      	ldrb	r3, [r7, #1]
 8006cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	7e3b      	ldrb	r3, [r7, #24]
 8006ce6:	f362 03c3 	bfi	r3, r2, #3, #1
 8006cea:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8006cec:	787b      	ldrb	r3, [r7, #1]
 8006cee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	7e3b      	ldrb	r3, [r7, #24]
 8006cf6:	f362 1304 	bfi	r3, r2, #4, #1
 8006cfa:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8006cfc:	787b      	ldrb	r3, [r7, #1]
 8006cfe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	7e3b      	ldrb	r3, [r7, #24]
 8006d06:	f362 1345 	bfi	r3, r2, #5, #1
 8006d0a:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8006d0c:	787b      	ldrb	r3, [r7, #1]
 8006d0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	7e3b      	ldrb	r3, [r7, #24]
 8006d16:	f362 1386 	bfi	r3, r2, #6, #1
 8006d1a:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8006d1c:	787b      	ldrb	r3, [r7, #1]
 8006d1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	7e3b      	ldrb	r3, [r7, #24]
 8006d26:	f362 13c7 	bfi	r3, r2, #7, #1
 8006d2a:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8006d2c:	f107 0218 	add.w	r2, r7, #24
 8006d30:	2301      	movs	r3, #1
 8006d32:	215e      	movs	r1, #94	; 0x5e
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fca1 	bl	800667c <lsm6dsl_write_reg>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d107      	bne.n	8006d52 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006d42:	f107 0210 	add.w	r2, r7, #16
 8006d46:	2301      	movs	r3, #1
 8006d48:	2113      	movs	r1, #19
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff fc7e 	bl	800664c <lsm6dsl_read_reg>
 8006d50:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10f      	bne.n	8006d78 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8006d58:	78bb      	ldrb	r3, [r7, #2]
 8006d5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	7c3b      	ldrb	r3, [r7, #16]
 8006d62:	f362 1304 	bfi	r3, r2, #4, #1
 8006d66:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006d68:	f107 0210 	add.w	r2, r7, #16
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	2113      	movs	r1, #19
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fc83 	bl	800667c <lsm6dsl_write_reg>
 8006d76:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d107      	bne.n	8006d8e <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8006d7e:	f107 0220 	add.w	r2, r7, #32
 8006d82:	2301      	movs	r3, #1
 8006d84:	211a      	movs	r1, #26
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fc60 	bl	800664c <lsm6dsl_read_reg>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d111      	bne.n	8006db8 <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8006d94:	78bb      	ldrb	r3, [r7, #2]
 8006d96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006da0:	f362 13c7 	bfi	r3, r2, #7, #1
 8006da4:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8006da8:	f107 0220 	add.w	r2, r7, #32
 8006dac:	2301      	movs	r3, #1
 8006dae:	211a      	movs	r1, #26
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fc63 	bl	800667c <lsm6dsl_write_reg>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d158      	bne.n	8006e70 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006dbe:	f107 020c 	add.w	r2, r7, #12
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	2158      	movs	r1, #88	; 0x58
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fc40 	bl	800664c <lsm6dsl_read_reg>
 8006dcc:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8006dce:	787b      	ldrb	r3, [r7, #1]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d141      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8006dda:	787b      	ldrb	r3, [r7, #1]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d13b      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8006de6:	787b      	ldrb	r3, [r7, #1]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d135      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8006df2:	787b      	ldrb	r3, [r7, #1]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d12f      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8006dfe:	787b      	ldrb	r3, [r7, #1]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d129      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8006e0a:	787b      	ldrb	r3, [r7, #1]
 8006e0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e10:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d123      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8006e16:	7d3b      	ldrb	r3, [r7, #20]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d11d      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8006e22:	7d3b      	ldrb	r3, [r7, #20]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d117      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8006e2e:	7d3b      	ldrb	r3, [r7, #20]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d111      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8006e3a:	7d3b      	ldrb	r3, [r7, #20]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8006e46:	7d3b      	ldrb	r3, [r7, #20]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d105      	bne.n	8006e5e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8006e52:	7d3b      	ldrb	r3, [r7, #20]
 8006e54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e58:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8006e5e:	7b3b      	ldrb	r3, [r7, #12]
 8006e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e64:	733b      	strb	r3, [r7, #12]
 8006e66:	e003      	b.n	8006e70 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8006e68:	7b3b      	ldrb	r3, [r7, #12]
 8006e6a:	f36f 13c7 	bfc	r3, #7, #1
 8006e6e:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006e76:	f107 020c 	add.w	r2, r7, #12
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	2158      	movs	r1, #88	; 0x58
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fbfc 	bl	800667c <lsm6dsl_write_reg>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <lsm6dsl_all_on_int1_set>:
  * @param  val    Change the values of int2_on_int1 in reg CTRL4_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_all_on_int1_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006e9c:	f107 0208 	add.w	r2, r7, #8
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	2113      	movs	r1, #19
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fbd1 	bl	800664c <lsm6dsl_read_reg>
 8006eaa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10f      	bne.n	8006ed2 <lsm6dsl_all_on_int1_set+0x42>
    ctrl4_c.int2_on_int1 = val;
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	7a3b      	ldrb	r3, [r7, #8]
 8006ebc:	f362 1345 	bfi	r3, r2, #5, #1
 8006ec0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006ec2:	f107 0208 	add.w	r2, r7, #8
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	2113      	movs	r1, #19
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fbd6 	bl	800667c <lsm6dsl_write_reg>
 8006ed0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <lsm6dsl_wkup_dur_set>:
  * @param  val    Change the values of wake_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 8006ee8:	f107 0208 	add.w	r2, r7, #8
 8006eec:	2301      	movs	r3, #1
 8006eee:	215c      	movs	r1, #92	; 0x5c
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fbab 	bl	800664c <lsm6dsl_read_reg>
 8006ef6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10f      	bne.n	8006f1e <lsm6dsl_wkup_dur_set+0x42>
    wake_up_dur.wake_dur = val;
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	7a3b      	ldrb	r3, [r7, #8]
 8006f08:	f362 1346 	bfi	r3, r2, #5, #2
 8006f0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8006f0e:	f107 0208 	add.w	r2, r7, #8
 8006f12:	2301      	movs	r3, #1
 8006f14:	215c      	movs	r1, #92	; 0x5c
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fbb0 	bl	800667c <lsm6dsl_write_reg>
 8006f1c:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <lsm6dsl_act_sleep_dur_set>:
  * @param  val    Change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 8006f34:	f107 0208 	add.w	r2, r7, #8
 8006f38:	2301      	movs	r3, #1
 8006f3a:	215c      	movs	r1, #92	; 0x5c
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff fb85 	bl	800664c <lsm6dsl_read_reg>
 8006f42:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10f      	bne.n	8006f6a <lsm6dsl_act_sleep_dur_set+0x42>
    wake_up_dur.sleep_dur = val;
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	7a3b      	ldrb	r3, [r7, #8]
 8006f54:	f362 0303 	bfi	r3, r2, #0, #4
 8006f58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8006f5a:	f107 0208 	add.w	r2, r7, #8
 8006f5e:	2301      	movs	r3, #1
 8006f60:	215c      	movs	r1, #92	; 0x5c
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fb8a 	bl	800667c <lsm6dsl_write_reg>
 8006f68:	60f8      	str	r0, [r7, #12]
          (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <lsm6dsl_tap_detection_on_z_set>:
  * @param  ctx    Read / write interface definitions
  * @param  val    Change the values of tap_z_en in reg TAP_CFG
  *
  */
int32_t lsm6dsl_tap_detection_on_z_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006f80:	f107 0208 	add.w	r2, r7, #8
 8006f84:	2301      	movs	r3, #1
 8006f86:	2158      	movs	r1, #88	; 0x58
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fb5f 	bl	800664c <lsm6dsl_read_reg>
 8006f8e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10f      	bne.n	8006fb6 <lsm6dsl_tap_detection_on_z_set+0x42>
    tap_cfg.tap_z_en = val;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	7a3b      	ldrb	r3, [r7, #8]
 8006fa0:	f362 0341 	bfi	r3, r2, #1, #1
 8006fa4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006fa6:	f107 0208 	add.w	r2, r7, #8
 8006faa:	2301      	movs	r3, #1
 8006fac:	2158      	movs	r1, #88	; 0x58
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fb64 	bl	800667c <lsm6dsl_write_reg>
 8006fb4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <lsm6dsl_tap_detection_on_y_set>:
  * @param  val    Change the values of tap_y_en in reg TAP_CFG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_detection_on_y_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006fcc:	f107 0208 	add.w	r2, r7, #8
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	2158      	movs	r1, #88	; 0x58
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fb39 	bl	800664c <lsm6dsl_read_reg>
 8006fda:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10f      	bne.n	8007002 <lsm6dsl_tap_detection_on_y_set+0x42>
    tap_cfg.tap_y_en = val;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	7a3b      	ldrb	r3, [r7, #8]
 8006fec:	f362 0382 	bfi	r3, r2, #2, #1
 8006ff0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8006ff2:	f107 0208 	add.w	r2, r7, #8
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	2158      	movs	r1, #88	; 0x58
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fb3e 	bl	800667c <lsm6dsl_write_reg>
 8007000:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007002:	68fb      	ldr	r3, [r7, #12]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <lsm6dsl_tap_detection_on_x_set>:
  * @param  val    Change the values of tap_x_en in reg TAP_CFG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_detection_on_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8007018:	f107 0208 	add.w	r2, r7, #8
 800701c:	2301      	movs	r3, #1
 800701e:	2158      	movs	r1, #88	; 0x58
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fb13 	bl	800664c <lsm6dsl_read_reg>
 8007026:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10f      	bne.n	800704e <lsm6dsl_tap_detection_on_x_set+0x42>
    tap_cfg.tap_x_en = val;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	7a3b      	ldrb	r3, [r7, #8]
 8007038:	f362 03c3 	bfi	r3, r2, #3, #1
 800703c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	2301      	movs	r3, #1
 8007044:	2158      	movs	r1, #88	; 0x58
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fb18 	bl	800667c <lsm6dsl_write_reg>
 800704c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800704e:	68fb      	ldr	r3, [r7, #12]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <lsm6dsl_tap_threshold_x_set>:
  * @param  val    Change the values of tap_ths in reg TAP_THS_6D
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_threshold_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_ths_6d_t tap_ths_6d;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
 8007064:	f107 0208 	add.w	r2, r7, #8
 8007068:	2301      	movs	r3, #1
 800706a:	2159      	movs	r1, #89	; 0x59
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff faed 	bl	800664c <lsm6dsl_read_reg>
 8007072:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <lsm6dsl_tap_threshold_x_set+0x42>
    tap_ths_6d.tap_ths = val;
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	b2da      	uxtb	r2, r3
 8007082:	7a3b      	ldrb	r3, [r7, #8]
 8007084:	f362 0304 	bfi	r3, r2, #0, #5
 8007088:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D,
 800708a:	f107 0208 	add.w	r2, r7, #8
 800708e:	2301      	movs	r3, #1
 8007090:	2159      	movs	r1, #89	; 0x59
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff faf2 	bl	800667c <lsm6dsl_write_reg>
 8007098:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&tap_ths_6d, 1);
  }
  return ret;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <lsm6dsl_tap_shock_set>:
  * @param  val    Change the values of shock in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_shock_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 80070b0:	f107 0208 	add.w	r2, r7, #8
 80070b4:	2301      	movs	r3, #1
 80070b6:	215a      	movs	r1, #90	; 0x5a
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fac7 	bl	800664c <lsm6dsl_read_reg>
 80070be:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10f      	bne.n	80070e6 <lsm6dsl_tap_shock_set+0x42>
    int_dur2.shock = val;
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	7a3b      	ldrb	r3, [r7, #8]
 80070d0:	f362 0301 	bfi	r3, r2, #0, #2
 80070d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 80070d6:	f107 0208 	add.w	r2, r7, #8
 80070da:	2301      	movs	r3, #1
 80070dc:	215a      	movs	r1, #90	; 0x5a
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff facc 	bl	800667c <lsm6dsl_write_reg>
 80070e4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <lsm6dsl_tap_quiet_set>:
  * @param  val    Change the values of quiet in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_quiet_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 80070fc:	f107 0208 	add.w	r2, r7, #8
 8007100:	2301      	movs	r3, #1
 8007102:	215a      	movs	r1, #90	; 0x5a
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff faa1 	bl	800664c <lsm6dsl_read_reg>
 800710a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <lsm6dsl_tap_quiet_set+0x42>
    int_dur2.quiet = val;
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	b2da      	uxtb	r2, r3
 800711a:	7a3b      	ldrb	r3, [r7, #8]
 800711c:	f362 0383 	bfi	r3, r2, #2, #2
 8007120:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 8007122:	f107 0208 	add.w	r2, r7, #8
 8007126:	2301      	movs	r3, #1
 8007128:	215a      	movs	r1, #90	; 0x5a
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff faa6 	bl	800667c <lsm6dsl_write_reg>
 8007130:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <lsm6dsl_tap_dur_set>:
  * @param  val    Change the values of dur in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 8007148:	f107 0208 	add.w	r2, r7, #8
 800714c:	2301      	movs	r3, #1
 800714e:	215a      	movs	r1, #90	; 0x5a
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fa7b 	bl	800664c <lsm6dsl_read_reg>
 8007156:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10f      	bne.n	800717e <lsm6dsl_tap_dur_set+0x42>
    int_dur2.dur = val;
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	b2da      	uxtb	r2, r3
 8007166:	7a3b      	ldrb	r3, [r7, #8]
 8007168:	f362 1307 	bfi	r3, r2, #4, #4
 800716c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 800716e:	f107 0208 	add.w	r2, r7, #8
 8007172:	2301      	movs	r3, #1
 8007174:	215a      	movs	r1, #90	; 0x5a
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fa80 	bl	800667c <lsm6dsl_write_reg>
 800717c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <lsm6dsl_tap_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_mode_set(stmdev_ctx_t *ctx,
                             lsm6dsl_single_double_tap_t val)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
 8007194:	f107 0208 	add.w	r2, r7, #8
 8007198:	2301      	movs	r3, #1
 800719a:	215b      	movs	r1, #91	; 0x5b
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fa55 	bl	800664c <lsm6dsl_read_reg>
 80071a2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <lsm6dsl_tap_mode_set+0x42>
    wake_up_ths.single_double_tap = (uint8_t) val;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	7a3b      	ldrb	r3, [r7, #8]
 80071b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80071b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_THS,
 80071ba:	f107 0208 	add.w	r2, r7, #8
 80071be:	2301      	movs	r3, #1
 80071c0:	215b      	movs	r1, #91	; 0x5b
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fa5a 	bl	800667c <lsm6dsl_write_reg>
 80071c8:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_ths, 1);
  }
  return ret;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <lsm6dsl_ff_dur_set>:
  * @param  val    Change the values of ff_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_ff_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  lsm6dsl_free_fall_t free_fall;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 80071e0:	f107 020c 	add.w	r2, r7, #12
 80071e4:	2301      	movs	r3, #1
 80071e6:	215d      	movs	r1, #93	; 0x5d
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fa2f 	bl	800664c <lsm6dsl_read_reg>
 80071ee:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d12e      	bne.n	8007254 <lsm6dsl_ff_dur_set+0x80>
    free_fall.ff_dur = (val & 0x1FU);
 80071f6:	78fb      	ldrb	r3, [r7, #3]
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	7b3b      	ldrb	r3, [r7, #12]
 8007200:	f362 03c7 	bfi	r3, r2, #3, #5
 8007204:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 8007206:	f107 020c 	add.w	r2, r7, #12
 800720a:	2301      	movs	r3, #1
 800720c:	215d      	movs	r1, #93	; 0x5d
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fa34 	bl	800667c <lsm6dsl_write_reg>
 8007214:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11b      	bne.n	8007254 <lsm6dsl_ff_dur_set+0x80>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 800721c:	f107 0210 	add.w	r2, r7, #16
 8007220:	2301      	movs	r3, #1
 8007222:	215c      	movs	r1, #92	; 0x5c
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fa11 	bl	800664c <lsm6dsl_read_reg>
 800722a:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&wake_up_dur, 1);
      if(ret == 0){
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d110      	bne.n	8007254 <lsm6dsl_ff_dur_set+0x80>
        wake_up_dur.ff_dur = (val & 0x20U) >> 5;
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	7c3b      	ldrb	r3, [r7, #16]
 800723e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007242:	743b      	strb	r3, [r7, #16]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8007244:	f107 0210 	add.w	r2, r7, #16
 8007248:	2301      	movs	r3, #1
 800724a:	215c      	movs	r1, #92	; 0x5c
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fa15 	bl	800667c <lsm6dsl_write_reg>
 8007252:	6178      	str	r0, [r7, #20]
                                (uint8_t*)&wake_up_dur, 1);
      }
    }
  }
  return ret;
 8007254:	697b      	ldr	r3, [r7, #20]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <lsm6dsl_ff_threshold_set>:
  * @param  val    Change the values of ff_ths in reg FREE_FALL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_ff_threshold_set(stmdev_ctx_t *ctx, lsm6dsl_ff_ths_t val)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_free_fall_t free_fall;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	2301      	movs	r3, #1
 8007270:	215d      	movs	r1, #93	; 0x5d
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff f9ea 	bl	800664c <lsm6dsl_read_reg>
 8007278:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10f      	bne.n	80072a0 <lsm6dsl_ff_threshold_set+0x42>
    free_fall.ff_ths = (uint8_t) val;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	b2da      	uxtb	r2, r3
 8007288:	7a3b      	ldrb	r3, [r7, #8]
 800728a:	f362 0302 	bfi	r3, r2, #0, #3
 800728e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 8007290:	f107 0208 	add.w	r2, r7, #8
 8007294:	2301      	movs	r3, #1
 8007296:	215d      	movs	r1, #93	; 0x5d
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff f9ef 	bl	800667c <lsm6dsl_write_reg>
 800729e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80072a0:	68fb      	ldr	r3, [r7, #12]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <lsm6dsl_motion_sens_set>:
  * @param  val    Change the values of sign_motion_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_motion_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 80072b6:	f107 0208 	add.w	r2, r7, #8
 80072ba:	2301      	movs	r3, #1
 80072bc:	2119      	movs	r1, #25
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff f9c4 	bl	800664c <lsm6dsl_read_reg>
 80072c4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11a      	bne.n	8007302 <lsm6dsl_motion_sens_set+0x58>
    ctrl10_c.sign_motion_en = val;
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	7a3b      	ldrb	r3, [r7, #8]
 80072d6:	f362 0300 	bfi	r3, r2, #0, #1
 80072da:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00f      	beq.n	8007302 <lsm6dsl_motion_sens_set+0x58>
      ctrl10_c.func_en = val;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	7a3b      	ldrb	r3, [r7, #8]
 80072ec:	f362 0382 	bfi	r3, r2, #2, #1
 80072f0:	723b      	strb	r3, [r7, #8]
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 80072f2:	f107 0208 	add.w	r2, r7, #8
 80072f6:	2301      	movs	r3, #1
 80072f8:	2119      	movs	r1, #25
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff f9be 	bl	800667c <lsm6dsl_write_reg>
 8007300:	60f8      	str	r0, [r7, #12]
    }
  }
  return ret;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <lsm6dsl_tilt_sens_set>:
  * @param  val    Change the values of tilt_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tilt_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007318:	f107 0208 	add.w	r2, r7, #8
 800731c:	2301      	movs	r3, #1
 800731e:	2119      	movs	r1, #25
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff f993 	bl	800664c <lsm6dsl_read_reg>
 8007326:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11a      	bne.n	8007364 <lsm6dsl_tilt_sens_set+0x58>
    ctrl10_c.tilt_en = val;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	7a3b      	ldrb	r3, [r7, #8]
 8007338:	f362 03c3 	bfi	r3, r2, #3, #1
 800733c:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <lsm6dsl_tilt_sens_set+0x48>
      ctrl10_c.func_en = val;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	b2da      	uxtb	r2, r3
 800734c:	7a3b      	ldrb	r3, [r7, #8]
 800734e:	f362 0382 	bfi	r3, r2, #2, #1
 8007352:	723b      	strb	r3, [r7, #8]
    }
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007354:	f107 0208 	add.w	r2, r7, #8
 8007358:	2301      	movs	r3, #1
 800735a:	2119      	movs	r1, #25
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff f98d 	bl	800667c <lsm6dsl_write_reg>
 8007362:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <lsm6dsl_wrist_tilt_sens_set>:
  * @param  val    Change the values of tilt_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_wrist_tilt_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 800737a:	f107 0208 	add.w	r2, r7, #8
 800737e:	2301      	movs	r3, #1
 8007380:	2119      	movs	r1, #25
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff f962 	bl	800664c <lsm6dsl_read_reg>
 8007388:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d11a      	bne.n	80073c6 <lsm6dsl_wrist_tilt_sens_set+0x58>
    ctrl10_c.wrist_tilt_en = val;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	7a3b      	ldrb	r3, [r7, #8]
 800739a:	f362 13c7 	bfi	r3, r2, #7, #1
 800739e:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <lsm6dsl_wrist_tilt_sens_set+0x48>
      ctrl10_c.func_en = val;
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	7a3b      	ldrb	r3, [r7, #8]
 80073b0:	f362 0382 	bfi	r3, r2, #2, #1
 80073b4:	723b      	strb	r3, [r7, #8]
    }
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 80073b6:	f107 0208 	add.w	r2, r7, #8
 80073ba:	2301      	movs	r3, #1
 80073bc:	2119      	movs	r1, #25
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff f95c 	bl	800667c <lsm6dsl_write_reg>
 80073c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80073c6:	68fb      	ldr	r3, [r7, #12]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <set_rtc_time>:
    Error_Handler();
  }
}
*/

void set_rtc_time(char *data){
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

  uint8_t year, month, date;
  uint8_t hour, minute, second;

  RTC_TimeTypeDef sTime = {0};
 80073d8:	f107 0310 	add.w	r3, r7, #16
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
  printf("%s\n", data);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f014 fcdb 	bl	801bda8 <puts>

  char *token = strtok(data, "0");
 80073f2:	495f      	ldr	r1, [pc, #380]	; (8007570 <set_rtc_time+0x1a0>)
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f014 fd41 	bl	801be7c <strtok>
 80073fa:	62b8      	str	r0, [r7, #40]	; 0x28
  token = strtok(NULL, "/");
 80073fc:	495d      	ldr	r1, [pc, #372]	; (8007574 <set_rtc_time+0x1a4>)
 80073fe:	2000      	movs	r0, #0
 8007400:	f014 fd3c 	bl	801be7c <strtok>
 8007404:	62b8      	str	r0, [r7, #40]	; 0x28
  year = atoi(token);
 8007406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007408:	f013 ff08 	bl	801b21c <atoi>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  printf( " %d\n", year );
 8007412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007416:	4619      	mov	r1, r3
 8007418:	4857      	ldr	r0, [pc, #348]	; (8007578 <set_rtc_time+0x1a8>)
 800741a:	f014 fc51 	bl	801bcc0 <iprintf>
  token = strtok(NULL, "/");
 800741e:	4955      	ldr	r1, [pc, #340]	; (8007574 <set_rtc_time+0x1a4>)
 8007420:	2000      	movs	r0, #0
 8007422:	f014 fd2b 	bl	801be7c <strtok>
 8007426:	62b8      	str	r0, [r7, #40]	; 0x28
  month = atoi(token);
 8007428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800742a:	f013 fef7 	bl	801b21c <atoi>
 800742e:	4603      	mov	r3, r0
 8007430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  printf( " %d\n", month );
 8007434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007438:	4619      	mov	r1, r3
 800743a:	484f      	ldr	r0, [pc, #316]	; (8007578 <set_rtc_time+0x1a8>)
 800743c:	f014 fc40 	bl	801bcc0 <iprintf>
  token = strtok(NULL, ",");
 8007440:	494e      	ldr	r1, [pc, #312]	; (800757c <set_rtc_time+0x1ac>)
 8007442:	2000      	movs	r0, #0
 8007444:	f014 fd1a 	bl	801be7c <strtok>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
  date = atoi(token);
 800744a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744c:	f013 fee6 	bl	801b21c <atoi>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  printf( " %d\n", date );
 8007456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800745a:	4619      	mov	r1, r3
 800745c:	4846      	ldr	r0, [pc, #280]	; (8007578 <set_rtc_time+0x1a8>)
 800745e:	f014 fc2f 	bl	801bcc0 <iprintf>
  token = strtok(NULL, ":");
 8007462:	4947      	ldr	r1, [pc, #284]	; (8007580 <set_rtc_time+0x1b0>)
 8007464:	2000      	movs	r0, #0
 8007466:	f014 fd09 	bl	801be7c <strtok>
 800746a:	62b8      	str	r0, [r7, #40]	; 0x28
//  hour = atoi(token)+7;
  hour = atoi(token)+7;
 800746c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746e:	f013 fed5 	bl	801b21c <atoi>
 8007472:	4603      	mov	r3, r0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3307      	adds	r3, #7
 8007478:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  printf( " %d\n", hour );
 800747c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007480:	4619      	mov	r1, r3
 8007482:	483d      	ldr	r0, [pc, #244]	; (8007578 <set_rtc_time+0x1a8>)
 8007484:	f014 fc1c 	bl	801bcc0 <iprintf>
  token = strtok(NULL, ":");
 8007488:	493d      	ldr	r1, [pc, #244]	; (8007580 <set_rtc_time+0x1b0>)
 800748a:	2000      	movs	r0, #0
 800748c:	f014 fcf6 	bl	801be7c <strtok>
 8007490:	62b8      	str	r0, [r7, #40]	; 0x28
  minute = atoi(token);
 8007492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007494:	f013 fec2 	bl	801b21c <atoi>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  printf( " %d\n", minute );
 800749e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80074a2:	4619      	mov	r1, r3
 80074a4:	4834      	ldr	r0, [pc, #208]	; (8007578 <set_rtc_time+0x1a8>)
 80074a6:	f014 fc0b 	bl	801bcc0 <iprintf>
  token = strtok(NULL, "\"");
 80074aa:	4936      	ldr	r1, [pc, #216]	; (8007584 <set_rtc_time+0x1b4>)
 80074ac:	2000      	movs	r0, #0
 80074ae:	f014 fce5 	bl	801be7c <strtok>
 80074b2:	62b8      	str	r0, [r7, #40]	; 0x28
  second = atoi(token)+3;
 80074b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b6:	f013 feb1 	bl	801b21c <atoi>
 80074ba:	4603      	mov	r3, r0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	3303      	adds	r3, #3
 80074c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  printf( " %d\n", second );
 80074c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80074c8:	4619      	mov	r1, r3
 80074ca:	482b      	ldr	r0, [pc, #172]	; (8007578 <set_rtc_time+0x1a8>)
 80074cc:	f014 fbf8 	bl	801bcc0 <iprintf>

  if(hour > 23){
 80074d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074d4:	2b17      	cmp	r3, #23
 80074d6:	d909      	bls.n	80074ec <set_rtc_time+0x11c>
	  hour = hour - 24;
 80074d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074dc:	3b18      	subs	r3, #24
 80074de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  date++;
 80074e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e6:	3301      	adds	r3, #1
 80074e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  sTime.Hours = hour;
 80074ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074f0:	743b      	strb	r3, [r7, #16]
  printf( " %d\n", sTime.Hours );
 80074f2:	7c3b      	ldrb	r3, [r7, #16]
 80074f4:	4619      	mov	r1, r3
 80074f6:	4820      	ldr	r0, [pc, #128]	; (8007578 <set_rtc_time+0x1a8>)
 80074f8:	f014 fbe2 	bl	801bcc0 <iprintf>
  sTime.Minutes = minute;
 80074fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007500:	747b      	strb	r3, [r7, #17]
  printf( " %d\n", sTime.Minutes );
 8007502:	7c7b      	ldrb	r3, [r7, #17]
 8007504:	4619      	mov	r1, r3
 8007506:	481c      	ldr	r0, [pc, #112]	; (8007578 <set_rtc_time+0x1a8>)
 8007508:	f014 fbda 	bl	801bcc0 <iprintf>
  sTime.Seconds = second;
 800750c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007510:	74bb      	strb	r3, [r7, #18]
  printf( " %d\n", sTime.Seconds );
 8007512:	7cbb      	ldrb	r3, [r7, #18]
 8007514:	4619      	mov	r1, r3
 8007516:	4818      	ldr	r0, [pc, #96]	; (8007578 <set_rtc_time+0x1a8>)
 8007518:	f014 fbd2 	bl	801bcc0 <iprintf>
//  sTime.Hours = 0x19U;
//  sTime.Minutes = 0x30U;
//  sTime.Seconds = 0x00U;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007520:	2300      	movs	r3, #0
 8007522:	623b      	str	r3, [r7, #32]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007524:	f107 0310 	add.w	r3, r7, #16
 8007528:	2200      	movs	r2, #0
 800752a:	4619      	mov	r1, r3
 800752c:	4816      	ldr	r0, [pc, #88]	; (8007588 <set_rtc_time+0x1b8>)
 800752e:	f00b fa50 	bl	80129d2 <HAL_RTC_SetTime>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <set_rtc_time+0x16c>
  {
    Error_Handler();
 8007538:	f006 ff1b 	bl	800e372 <Error_Handler>
  }
//  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
  sDate.Month = month;
 800753c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007540:	737b      	strb	r3, [r7, #13]
  sDate.Date = date;
 8007542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007546:	73bb      	strb	r3, [r7, #14]
  sDate.Year = year;
 8007548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800754c:	73fb      	strb	r3, [r7, #15]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800754e:	f107 030c 	add.w	r3, r7, #12
 8007552:	2200      	movs	r2, #0
 8007554:	4619      	mov	r1, r3
 8007556:	480c      	ldr	r0, [pc, #48]	; (8007588 <set_rtc_time+0x1b8>)
 8007558:	f00b fb34 	bl	8012bc4 <HAL_RTC_SetDate>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <set_rtc_time+0x196>
  {
    Error_Handler();
 8007562:	f006 ff06 	bl	800e372 <Error_Handler>
  }
}
 8007566:	bf00      	nop
 8007568:	3730      	adds	r7, #48	; 0x30
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	0801e4e4 	.word	0x0801e4e4
 8007574:	0801e4e8 	.word	0x0801e4e8
 8007578:	0801e4ec 	.word	0x0801e4ec
 800757c:	0801e4f4 	.word	0x0801e4f4
 8007580:	0801e4f8 	.word	0x0801e4f8
 8007584:	0801e4fc 	.word	0x0801e4fc
 8007588:	20008190 	.word	0x20008190

0800758c <set_rtc_time_cclk>:

void set_rtc_time_cclk(char *data){
 800758c:	b580      	push	{r7, lr}
 800758e:	b08c      	sub	sp, #48	; 0x30
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]

  uint8_t year, month, date;
  uint8_t hour, minute, second;

  RTC_TimeTypeDef sTime = {0};
 8007594:	f107 0310 	add.w	r3, r7, #16
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	605a      	str	r2, [r3, #4]
 800759e:	609a      	str	r2, [r3, #8]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
  printf("%s\n", data);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f014 fbfd 	bl	801bda8 <puts>

  char *token = strtok(data, "\"");
 80075ae:	4961      	ldr	r1, [pc, #388]	; (8007734 <set_rtc_time_cclk+0x1a8>)
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f014 fc63 	bl	801be7c <strtok>
 80075b6:	62b8      	str	r0, [r7, #40]	; 0x28
  token = strtok(NULL, "/");
 80075b8:	495f      	ldr	r1, [pc, #380]	; (8007738 <set_rtc_time_cclk+0x1ac>)
 80075ba:	2000      	movs	r0, #0
 80075bc:	f014 fc5e 	bl	801be7c <strtok>
 80075c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (atoi(token) != 0) {
 80075c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c4:	f013 fe2a 	bl	801b21c <atoi>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80ae 	beq.w	800772c <set_rtc_time_cclk+0x1a0>
	  year = atoi(token);
 80075d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d2:	f013 fe23 	bl	801b21c <atoi>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  printf( " %d\n", year );
 80075dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e0:	4619      	mov	r1, r3
 80075e2:	4856      	ldr	r0, [pc, #344]	; (800773c <set_rtc_time_cclk+0x1b0>)
 80075e4:	f014 fb6c 	bl	801bcc0 <iprintf>
	  token = strtok(NULL, "/");
 80075e8:	4953      	ldr	r1, [pc, #332]	; (8007738 <set_rtc_time_cclk+0x1ac>)
 80075ea:	2000      	movs	r0, #0
 80075ec:	f014 fc46 	bl	801be7c <strtok>
 80075f0:	62b8      	str	r0, [r7, #40]	; 0x28
	  month = atoi(token);
 80075f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f4:	f013 fe12 	bl	801b21c <atoi>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  printf( " %d\n", month );
 80075fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007602:	4619      	mov	r1, r3
 8007604:	484d      	ldr	r0, [pc, #308]	; (800773c <set_rtc_time_cclk+0x1b0>)
 8007606:	f014 fb5b 	bl	801bcc0 <iprintf>
	  token = strtok(NULL, ",");
 800760a:	494d      	ldr	r1, [pc, #308]	; (8007740 <set_rtc_time_cclk+0x1b4>)
 800760c:	2000      	movs	r0, #0
 800760e:	f014 fc35 	bl	801be7c <strtok>
 8007612:	62b8      	str	r0, [r7, #40]	; 0x28
	  date = atoi(token);
 8007614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007616:	f013 fe01 	bl	801b21c <atoi>
 800761a:	4603      	mov	r3, r0
 800761c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  printf( " %d\n", date );
 8007620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007624:	4619      	mov	r1, r3
 8007626:	4845      	ldr	r0, [pc, #276]	; (800773c <set_rtc_time_cclk+0x1b0>)
 8007628:	f014 fb4a 	bl	801bcc0 <iprintf>
	  token = strtok(NULL, ":");
 800762c:	4945      	ldr	r1, [pc, #276]	; (8007744 <set_rtc_time_cclk+0x1b8>)
 800762e:	2000      	movs	r0, #0
 8007630:	f014 fc24 	bl	801be7c <strtok>
 8007634:	62b8      	str	r0, [r7, #40]	; 0x28
	  hour = atoi(token);
 8007636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007638:	f013 fdf0 	bl	801b21c <atoi>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  printf( " %d\n", hour );
 8007642:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007646:	4619      	mov	r1, r3
 8007648:	483c      	ldr	r0, [pc, #240]	; (800773c <set_rtc_time_cclk+0x1b0>)
 800764a:	f014 fb39 	bl	801bcc0 <iprintf>
	  token = strtok(NULL, ":");
 800764e:	493d      	ldr	r1, [pc, #244]	; (8007744 <set_rtc_time_cclk+0x1b8>)
 8007650:	2000      	movs	r0, #0
 8007652:	f014 fc13 	bl	801be7c <strtok>
 8007656:	62b8      	str	r0, [r7, #40]	; 0x28
	  minute = atoi(token);
 8007658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765a:	f013 fddf 	bl	801b21c <atoi>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  printf( " %d\n", minute );
 8007664:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007668:	4619      	mov	r1, r3
 800766a:	4834      	ldr	r0, [pc, #208]	; (800773c <set_rtc_time_cclk+0x1b0>)
 800766c:	f014 fb28 	bl	801bcc0 <iprintf>
	  token = strtok(NULL, "\"");
 8007670:	4930      	ldr	r1, [pc, #192]	; (8007734 <set_rtc_time_cclk+0x1a8>)
 8007672:	2000      	movs	r0, #0
 8007674:	f014 fc02 	bl	801be7c <strtok>
 8007678:	62b8      	str	r0, [r7, #40]	; 0x28
	  second = atoi(token)+3;
 800767a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767c:	f013 fdce 	bl	801b21c <atoi>
 8007680:	4603      	mov	r3, r0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	3303      	adds	r3, #3
 8007686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  printf( " %d\n", second );
 800768a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800768e:	4619      	mov	r1, r3
 8007690:	482a      	ldr	r0, [pc, #168]	; (800773c <set_rtc_time_cclk+0x1b0>)
 8007692:	f014 fb15 	bl	801bcc0 <iprintf>

	  if(hour > 23){
 8007696:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800769a:	2b17      	cmp	r3, #23
 800769c:	d909      	bls.n	80076b2 <set_rtc_time_cclk+0x126>
		  hour = hour - 24;
 800769e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80076a2:	3b18      	subs	r3, #24
 80076a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  date++;
 80076a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ac:	3301      	adds	r3, #1
 80076ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }

	  sTime.Hours = hour;
 80076b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80076b6:	743b      	strb	r3, [r7, #16]
	  printf( " %d\n", sTime.Hours );
 80076b8:	7c3b      	ldrb	r3, [r7, #16]
 80076ba:	4619      	mov	r1, r3
 80076bc:	481f      	ldr	r0, [pc, #124]	; (800773c <set_rtc_time_cclk+0x1b0>)
 80076be:	f014 faff 	bl	801bcc0 <iprintf>
	  sTime.Minutes = minute;
 80076c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80076c6:	747b      	strb	r3, [r7, #17]
	  printf( " %d\n", sTime.Minutes );
 80076c8:	7c7b      	ldrb	r3, [r7, #17]
 80076ca:	4619      	mov	r1, r3
 80076cc:	481b      	ldr	r0, [pc, #108]	; (800773c <set_rtc_time_cclk+0x1b0>)
 80076ce:	f014 faf7 	bl	801bcc0 <iprintf>
	  sTime.Seconds = second;
 80076d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076d6:	74bb      	strb	r3, [r7, #18]
	  printf( " %d\n", sTime.Seconds );
 80076d8:	7cbb      	ldrb	r3, [r7, #18]
 80076da:	4619      	mov	r1, r3
 80076dc:	4817      	ldr	r0, [pc, #92]	; (800773c <set_rtc_time_cclk+0x1b0>)
 80076de:	f014 faef 	bl	801bcc0 <iprintf>
	//  sTime.Hours = 0x19U;
	//  sTime.Minutes = 0x30U;
	//  sTime.Seconds = 0x00U;
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80076ea:	f107 0310 	add.w	r3, r7, #16
 80076ee:	2200      	movs	r2, #0
 80076f0:	4619      	mov	r1, r3
 80076f2:	4815      	ldr	r0, [pc, #84]	; (8007748 <set_rtc_time_cclk+0x1bc>)
 80076f4:	f00b f96d 	bl	80129d2 <HAL_RTC_SetTime>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <set_rtc_time_cclk+0x176>
	  {
		Error_Handler();
 80076fe:	f006 fe38 	bl	800e372 <Error_Handler>
	  }
	//  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
	  sDate.Month = month;
 8007702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007706:	737b      	strb	r3, [r7, #13]
	  sDate.Date = date;
 8007708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800770c:	73bb      	strb	r3, [r7, #14]
	  sDate.Year = year;
 800770e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007712:	73fb      	strb	r3, [r7, #15]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	2200      	movs	r2, #0
 800771a:	4619      	mov	r1, r3
 800771c:	480a      	ldr	r0, [pc, #40]	; (8007748 <set_rtc_time_cclk+0x1bc>)
 800771e:	f00b fa51 	bl	8012bc4 <HAL_RTC_SetDate>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <set_rtc_time_cclk+0x1a0>
	  {
		Error_Handler();
 8007728:	f006 fe23 	bl	800e372 <Error_Handler>
	  }
  }
}
 800772c:	bf00      	nop
 800772e:	3730      	adds	r7, #48	; 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	0801e4fc 	.word	0x0801e4fc
 8007738:	0801e4e8 	.word	0x0801e4e8
 800773c:	0801e4ec 	.word	0x0801e4ec
 8007740:	0801e4f4 	.word	0x0801e4f4
 8007744:	0801e4f8 	.word	0x0801e4f8
 8007748:	20008190 	.word	0x20008190

0800774c <buffclearSIM>:
	while(buf[i] != '\0') i++;
	return i;
}

void buffclearSIM(void)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
	for (int i=0; i < 1024; i++)
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e007      	b.n	8007768 <buffclearSIM+0x1c>
	{
		datarxSIM[i] = '\0';
 8007758:	4a08      	ldr	r2, [pc, #32]	; (800777c <buffclearSIM+0x30>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1024; i++)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3301      	adds	r3, #1
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776e:	dbf3      	blt.n	8007758 <buffclearSIM+0xc>
	}
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	2000b008 	.word	0x2000b008

08007780 <SerialMonprintlnSIM>:

void SerialMonprintlnSIM(char ptr[], uint32_t len, uint32_t timeout){
 8007780:	b5b0      	push	{r4, r5, r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	466b      	mov	r3, sp
 800778e:	461d      	mov	r5, r3
	uint8_t ptr1[len+2];
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	1c98      	adds	r0, r3, #2
 8007794:	4603      	mov	r3, r0
 8007796:	3b01      	subs	r3, #1
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	4601      	mov	r1, r0
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	00d4      	lsls	r4, r2, #3
 80077aa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80077ae:	00cb      	lsls	r3, r1, #3
 80077b0:	4601      	mov	r1, r0
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	f04f 0400 	mov.w	r4, #0
 80077be:	00d4      	lsls	r4, r2, #3
 80077c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80077c4:	00cb      	lsls	r3, r1, #3
 80077c6:	1dc3      	adds	r3, r0, #7
 80077c8:	08db      	lsrs	r3, r3, #3
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	ebad 0d03 	sub.w	sp, sp, r3
 80077d0:	466b      	mov	r3, sp
 80077d2:	3300      	adds	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
	memcpy(ptr1, (uint8_t *) ptr, len);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	4618      	mov	r0, r3
 80077de:	f013 fd57 	bl	801b290 <memcpy>
	ptr1[len]= 0x0D;
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	3301      	adds	r3, #1
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	210a      	movs	r1, #10
 80077f4:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, (uint8_t *) ptr1, len+2, timeout);
 80077f6:	6939      	ldr	r1, [r7, #16]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3302      	adds	r3, #2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4804      	ldr	r0, [pc, #16]	; (8007814 <SerialMonprintlnSIM+0x94>)
 8007804:	f00c fb42 	bl	8013e8c <HAL_UART_Transmit>
 8007808:	46ad      	mov	sp, r5
}
 800780a:	bf00      	nop
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}
 8007812:	bf00      	nop
 8007814:	20002fe0 	.word	0x20002fe0

08007818 <SerialATprintln>:

void SerialATprintln(char ptr[], uint32_t len, uint32_t timeout){
 8007818:	b5b0      	push	{r4, r5, r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	466b      	mov	r3, sp
 8007826:	461d      	mov	r5, r3
	uint8_t ptr1[len+2];
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	1c98      	adds	r0, r3, #2
 800782c:	4603      	mov	r3, r0
 800782e:	3b01      	subs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	4601      	mov	r1, r0
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	f04f 0400 	mov.w	r4, #0
 8007840:	00d4      	lsls	r4, r2, #3
 8007842:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007846:	00cb      	lsls	r3, r1, #3
 8007848:	4601      	mov	r1, r0
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	00d4      	lsls	r4, r2, #3
 8007858:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800785c:	00cb      	lsls	r3, r1, #3
 800785e:	1dc3      	adds	r3, r0, #7
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	ebad 0d03 	sub.w	sp, sp, r3
 8007868:	466b      	mov	r3, sp
 800786a:	3300      	adds	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
	memcpy(ptr1, ptr, len);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	4618      	mov	r0, r3
 8007876:	f013 fd0b 	bl	801b290 <memcpy>
	ptr1[len]= '\r';
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4413      	add	r3, r2
 8007880:	220d      	movs	r2, #13
 8007882:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= '\n';
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3301      	adds	r3, #1
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	210a      	movs	r1, #10
 800788c:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t *) ptr1, len+2, timeout);
 800788e:	6939      	ldr	r1, [r7, #16]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	b29b      	uxth	r3, r3
 8007894:	3302      	adds	r3, #2
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4804      	ldr	r0, [pc, #16]	; (80078ac <SerialATprintln+0x94>)
 800789c:	f00c faf6 	bl	8013e8c <HAL_UART_Transmit>
 80078a0:	46ad      	mov	sp, r5
}
 80078a2:	bf00      	nop
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bdb0      	pop	{r4, r5, r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200038e4 	.word	0x200038e4

080078b0 <setup_modem_1st>:
  SerialATprintln("AT+CGATT=1",10,0xff);
  SerialATreadString(datarxSIM,BUFFSIZESIM,1000);
  SerialMonprintlnSIM(datarxSIM,100,1000);
}

void setup_modem_1st(){
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
//  enable_modem();
	 buffclearSIM();
 80078b6:	f7ff ff49 	bl	800774c <buffclearSIM>
  SerialATprintln("AT",2,0xff);
 80078ba:	22ff      	movs	r2, #255	; 0xff
 80078bc:	2102      	movs	r1, #2
 80078be:	4850      	ldr	r0, [pc, #320]	; (8007a00 <setup_modem_1st+0x150>)
 80078c0:	f7ff ffaa 	bl	8007818 <SerialATprintln>
  osDelay(500);
 80078c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078c8:	f010 feb6 	bl	8018638 <osDelay>

  SerialATprintln("AT+CSQ",6,0xff);
 80078cc:	22ff      	movs	r2, #255	; 0xff
 80078ce:	2106      	movs	r1, #6
 80078d0:	484c      	ldr	r0, [pc, #304]	; (8007a04 <setup_modem_1st+0x154>)
 80078d2:	f7ff ffa1 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 80078d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078da:	f010 fead 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 80078de:	22ff      	movs	r2, #255	; 0xff
 80078e0:	210b      	movs	r1, #11
 80078e2:	4849      	ldr	r0, [pc, #292]	; (8007a08 <setup_modem_1st+0x158>)
 80078e4:	f7ff ff98 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 80078e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078ec:	f010 fea4 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0",44,0xff);
 80078f0:	22ff      	movs	r2, #255	; 0xff
 80078f2:	212c      	movs	r1, #44	; 0x2c
 80078f4:	4845      	ldr	r0, [pc, #276]	; (8007a0c <setup_modem_1st+0x15c>)
 80078f6:	f7ff ff8f 	bl	8007818 <SerialATprintln>
//  osSignalWait( BIT_1 | BIT_2, 100);
//  osSignalSet( sendDataToServeHandle, BIT_1);
  osDelay(1000);
 80078fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078fe:	f010 fe9b 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 8007902:	22ff      	movs	r2, #255	; 0xff
 8007904:	210b      	movs	r1, #11
 8007906:	4840      	ldr	r0, [pc, #256]	; (8007a08 <setup_modem_1st+0x158>)
 8007908:	f7ff ff86 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 800790c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007910:	f010 fe92 	bl	8018638 <osDelay>

  SerialATprintln("AT+CREG=1",9,0xff);
 8007914:	22ff      	movs	r2, #255	; 0xff
 8007916:	2109      	movs	r1, #9
 8007918:	483d      	ldr	r0, [pc, #244]	; (8007a10 <setup_modem_1st+0x160>)
 800791a:	f7ff ff7d 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 800791e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007922:	f010 fe89 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGREG=1",10,0xff);
 8007926:	22ff      	movs	r2, #255	; 0xff
 8007928:	210a      	movs	r1, #10
 800792a:	483a      	ldr	r0, [pc, #232]	; (8007a14 <setup_modem_1st+0x164>)
 800792c:	f7ff ff74 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007934:	f010 fe80 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGATT?",9,0xff);
 8007938:	22ff      	movs	r2, #255	; 0xff
 800793a:	2109      	movs	r1, #9
 800793c:	4836      	ldr	r0, [pc, #216]	; (8007a18 <setup_modem_1st+0x168>)
 800793e:	f7ff ff6b 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007942:	463b      	mov	r3, r7
 8007944:	2264      	movs	r2, #100	; 0x64
 8007946:	2106      	movs	r1, #6
 8007948:	4618      	mov	r0, r3
 800794a:	f010 fec9 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800794e:	4b33      	ldr	r3, [pc, #204]	; (8007a1c <setup_modem_1st+0x16c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2102      	movs	r1, #2
 8007954:	4618      	mov	r0, r3
 8007956:	f010 fe83 	bl	8018660 <osSignalSet>
  osDelay(1000);
 800795a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800795e:	f010 fe6b 	bl	8018638 <osDelay>
  SerialATprintln("AT+CGATT=1",10,0xff);
 8007962:	22ff      	movs	r2, #255	; 0xff
 8007964:	210a      	movs	r1, #10
 8007966:	482e      	ldr	r0, [pc, #184]	; (8007a20 <setup_modem_1st+0x170>)
 8007968:	f7ff ff56 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800796c:	463b      	mov	r3, r7
 800796e:	2264      	movs	r2, #100	; 0x64
 8007970:	2106      	movs	r1, #6
 8007972:	4618      	mov	r0, r3
 8007974:	f010 feb4 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <setup_modem_1st+0x16c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f010 fe6e 	bl	8018660 <osSignalSet>
  osDelay(2000);
 8007984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007988:	f010 fe56 	bl	8018638 <osDelay>

  SerialATprintln("AT+CNMP?", 8, 0xff);
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	2108      	movs	r1, #8
 8007990:	4824      	ldr	r0, [pc, #144]	; (8007a24 <setup_modem_1st+0x174>)
 8007992:	f7ff ff41 	bl	8007818 <SerialATprintln>
  	osDelay(2000);
 8007996:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800799a:	f010 fe4d 	bl	8018638 <osDelay>

    SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 800799e:	22ff      	movs	r2, #255	; 0xff
 80079a0:	210c      	movs	r1, #12
 80079a2:	4821      	ldr	r0, [pc, #132]	; (8007a28 <setup_modem_1st+0x178>)
 80079a4:	f7ff ff38 	bl	8007818 <SerialATprintln>
    osDelay(2000);
 80079a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80079ac:	f010 fe44 	bl	8018638 <osDelay>

	SerialATprintln("AT+CNACT?", 9, 0xff);
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	2109      	movs	r1, #9
 80079b4:	481d      	ldr	r0, [pc, #116]	; (8007a2c <setup_modem_1st+0x17c>)
 80079b6:	f7ff ff2f 	bl	8007818 <SerialATprintln>
	osDelay(500);
 80079ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079be:	f010 fe3b 	bl	8018638 <osDelay>

     SerialATprintln("AT+CNTPCID=0", 12, 0xff);
 80079c2:	22ff      	movs	r2, #255	; 0xff
 80079c4:	210c      	movs	r1, #12
 80079c6:	481a      	ldr	r0, [pc, #104]	; (8007a30 <setup_modem_1st+0x180>)
 80079c8:	f7ff ff26 	bl	8007818 <SerialATprintln>
     osDelay(1000);
 80079cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079d0:	f010 fe32 	bl	8018638 <osDelay>

//  SerialATprintln("AT+CNTP=\"id.pool.ntp.org\",7,0,2", 29, 0xff);
//  SerialATprintln("AT+CNTP=\"173.249.41.186\",7,0,2", 30, 0xff);
//  SerialATprintln("AT+CNTP=\"ntppool.org\",28,1,2", 28, 0xff);
     SerialATprintln("AT+CNTP=\"173.249.41.186\",28,0,2", 35, 0xff);
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	2123      	movs	r1, #35	; 0x23
 80079d8:	4816      	ldr	r0, [pc, #88]	; (8007a34 <setup_modem_1st+0x184>)
 80079da:	f7ff ff1d 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 80079de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079e2:	f010 fe29 	bl	8018638 <osDelay>

  SerialATprintln("AT+CNTP", 7, 0xff);
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	2107      	movs	r1, #7
 80079ea:	4813      	ldr	r0, [pc, #76]	; (8007a38 <setup_modem_1st+0x188>)
 80079ec:	f7ff ff14 	bl	8007818 <SerialATprintln>
  osDelay(3000);
 80079f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80079f4:	f010 fe20 	bl	8018638 <osDelay>
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	0801e718 	.word	0x0801e718
 8007a04:	0801e740 	.word	0x0801e740
 8007a08:	0801e580 	.word	0x0801e580
 8007a0c:	0801e748 	.word	0x0801e748
 8007a10:	0801e71c 	.word	0x0801e71c
 8007a14:	0801e728 	.word	0x0801e728
 8007a18:	0801e500 	.word	0x0801e500
 8007a1c:	20008188 	.word	0x20008188
 8007a20:	0801e734 	.word	0x0801e734
 8007a24:	0801e778 	.word	0x0801e778
 8007a28:	0801e58c 	.word	0x0801e58c
 8007a2c:	0801e59c 	.word	0x0801e59c
 8007a30:	0801e784 	.word	0x0801e784
 8007a34:	0801e794 	.word	0x0801e794
 8007a38:	0801e7b4 	.word	0x0801e7b4

08007a3c <set_cntp>:

void set_cntp(){
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
	    SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 8007a42:	22ff      	movs	r2, #255	; 0xff
 8007a44:	210c      	movs	r1, #12
 8007a46:	481d      	ldr	r0, [pc, #116]	; (8007abc <set_cntp+0x80>)
 8007a48:	f7ff fee6 	bl	8007818 <SerialATprintln>
	    osDelay(500);
 8007a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a50:	f010 fdf2 	bl	8018638 <osDelay>

		SerialATprintln("AT+CNACT?", 9, 0xff);
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	2109      	movs	r1, #9
 8007a58:	4819      	ldr	r0, [pc, #100]	; (8007ac0 <set_cntp+0x84>)
 8007a5a:	f7ff fedd 	bl	8007818 <SerialATprintln>
		osSignalWait( BIT_1 | BIT_2, 100);
 8007a5e:	463b      	mov	r3, r7
 8007a60:	2264      	movs	r2, #100	; 0x64
 8007a62:	2106      	movs	r1, #6
 8007a64:	4618      	mov	r0, r3
 8007a66:	f010 fe3b 	bl	80186e0 <osSignalWait>
		osSignalSet( sendDataToServeHandle, BIT_1);
 8007a6a:	4b16      	ldr	r3, [pc, #88]	; (8007ac4 <set_cntp+0x88>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f010 fdf5 	bl	8018660 <osSignalSet>
		osDelay(500);
 8007a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a7a:	f010 fddd 	bl	8018638 <osDelay>

	     SerialATprintln("AT+CNTPCID=0", 12, 0xff);
 8007a7e:	22ff      	movs	r2, #255	; 0xff
 8007a80:	210c      	movs	r1, #12
 8007a82:	4811      	ldr	r0, [pc, #68]	; (8007ac8 <set_cntp+0x8c>)
 8007a84:	f7ff fec8 	bl	8007818 <SerialATprintln>
	     osDelay(500);
 8007a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a8c:	f010 fdd4 	bl	8018638 <osDelay>

//	  SerialATprintln("AT+CNTP=\"id.pool.ntp.org\",7,0,2", 29, 0xff);
//	  SerialATprintln("AT+CNTP=\"173.249.41.186\",7,0,2", 30, 0xff);
	//  SerialATprintln("AT+CNTP=\"ntppool.org\",28,1,2", 28, 0xff);
	     SerialATprintln("AT+CNTP=\"173.249.41.186\",28,0,2", 35, 0xff);
 8007a90:	22ff      	movs	r2, #255	; 0xff
 8007a92:	2123      	movs	r1, #35	; 0x23
 8007a94:	480d      	ldr	r0, [pc, #52]	; (8007acc <set_cntp+0x90>)
 8007a96:	f7ff febf 	bl	8007818 <SerialATprintln>
	     	  osDelay(1000);
 8007a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a9e:	f010 fdcb 	bl	8018638 <osDelay>

	  SerialATprintln("AT+CNTP", 7, 0xff);
 8007aa2:	22ff      	movs	r2, #255	; 0xff
 8007aa4:	2107      	movs	r1, #7
 8007aa6:	480a      	ldr	r0, [pc, #40]	; (8007ad0 <set_cntp+0x94>)
 8007aa8:	f7ff feb6 	bl	8007818 <SerialATprintln>
	  osDelay(3000);
 8007aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ab0:	f010 fdc2 	bl	8018638 <osDelay>

}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	0801e58c 	.word	0x0801e58c
 8007ac0:	0801e59c 	.word	0x0801e59c
 8007ac4:	20008188 	.word	0x20008188
 8007ac8:	0801e784 	.word	0x0801e784
 8007acc:	0801e794 	.word	0x0801e794
 8007ad0:	0801e7b4 	.word	0x0801e7b4

08007ad4 <setup_RTC_periode>:
void setup_RTC_periode() {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
	SerialATprintln("AT+CCLK?", 8, 0xff);
 8007ad8:	22ff      	movs	r2, #255	; 0xff
 8007ada:	2108      	movs	r1, #8
 8007adc:	4804      	ldr	r0, [pc, #16]	; (8007af0 <setup_RTC_periode+0x1c>)
 8007ade:	f7ff fe9b 	bl	8007818 <SerialATprintln>
	osDelay(3000);
 8007ae2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007ae6:	f010 fda7 	bl	8018638 <osDelay>
}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	0801e7bc 	.word	0x0801e7bc

08007af4 <setup_modem>:
void setup_modem(){
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
//  enable_modem();
//  SerialATreadString(datarxSIM,BUFFSIZESIM,5000);
//  SerialMonprintlnSIM(" ",1,1000);

	buffclearSIM();
 8007afa:	f7ff fe27 	bl	800774c <buffclearSIM>
  SerialATprintln("AT",2,0xff);
 8007afe:	22ff      	movs	r2, #255	; 0xff
 8007b00:	2102      	movs	r1, #2
 8007b02:	483a      	ldr	r0, [pc, #232]	; (8007bec <setup_modem+0xf8>)
 8007b04:	f7ff fe88 	bl	8007818 <SerialATprintln>
  osDelay(500);
 8007b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b0c:	f010 fd94 	bl	8018638 <osDelay>
//  SerialATreadString(datarxSIM,BUFFSIZESIM,2000);
//  SerialMonprintlnSIM(datarxSIM,buffsizeSIM(datarxSIM),500);
//  osDelay(500);
  buffclearSIM();
 8007b10:	f7ff fe1c 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CSQ",6,0xff);
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	2106      	movs	r1, #6
 8007b18:	4835      	ldr	r0, [pc, #212]	; (8007bf0 <setup_modem+0xfc>)
 8007b1a:	f7ff fe7d 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007b1e:	463b      	mov	r3, r7
 8007b20:	2264      	movs	r2, #100	; 0x64
 8007b22:	2106      	movs	r1, #6
 8007b24:	4618      	mov	r0, r3
 8007b26:	f010 fddb 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007b2a:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <setup_modem+0x100>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2102      	movs	r1, #2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f010 fd95 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b3a:	f010 fd7d 	bl	8018638 <osDelay>

	buffclearSIM();
 8007b3e:	f7ff fe05 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0,0",44,0xff);
 8007b42:	22ff      	movs	r2, #255	; 0xff
 8007b44:	212c      	movs	r1, #44	; 0x2c
 8007b46:	482c      	ldr	r0, [pc, #176]	; (8007bf8 <setup_modem+0x104>)
 8007b48:	f7ff fe66 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	2264      	movs	r2, #100	; 0x64
 8007b50:	2106      	movs	r1, #6
 8007b52:	4618      	mov	r0, r3
 8007b54:	f010 fdc4 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007b58:	4b26      	ldr	r3, [pc, #152]	; (8007bf4 <setup_modem+0x100>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f010 fd7e 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b68:	f010 fd66 	bl	8018638 <osDelay>

	buffclearSIM();
 8007b6c:	f7ff fdee 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGDCONT?",11,0xff);
 8007b70:	22ff      	movs	r2, #255	; 0xff
 8007b72:	210b      	movs	r1, #11
 8007b74:	4821      	ldr	r0, [pc, #132]	; (8007bfc <setup_modem+0x108>)
 8007b76:	f7ff fe4f 	bl	8007818 <SerialATprintln>
  osDelay(2000);
 8007b7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b7e:	f010 fd5b 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGATT=1",10,0xff);
 8007b82:	22ff      	movs	r2, #255	; 0xff
 8007b84:	210a      	movs	r1, #10
 8007b86:	481e      	ldr	r0, [pc, #120]	; (8007c00 <setup_modem+0x10c>)
 8007b88:	f7ff fe46 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	2264      	movs	r2, #100	; 0x64
 8007b90:	2106      	movs	r1, #6
 8007b92:	4618      	mov	r0, r3
 8007b94:	f010 fda4 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007b98:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <setup_modem+0x100>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f010 fd5e 	bl	8018660 <osSignalSet>
  osDelay(2000);
 8007ba4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ba8:	f010 fd46 	bl	8018638 <osDelay>

  SerialATprintln("AT+SHCONF=\"URL\",\"http://dev-tayra.digitalisasi-project.com\"",59,0xff);
 8007bac:	22ff      	movs	r2, #255	; 0xff
 8007bae:	213b      	movs	r1, #59	; 0x3b
 8007bb0:	4814      	ldr	r0, [pc, #80]	; (8007c04 <setup_modem+0x110>)
 8007bb2:	f7ff fe31 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bba:	f010 fd3d 	bl	8018638 <osDelay>

  SerialATprintln("AT+SHCONF=\"BODYLEN\",1100",24,0xff);
 8007bbe:	22ff      	movs	r2, #255	; 0xff
 8007bc0:	2118      	movs	r1, #24
 8007bc2:	4811      	ldr	r0, [pc, #68]	; (8007c08 <setup_modem+0x114>)
 8007bc4:	f7ff fe28 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bcc:	f010 fd34 	bl	8018638 <osDelay>

  SerialATprintln("AT+SHCONF=\"HEADERLEN\",350",25,0xff);
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	2119      	movs	r1, #25
 8007bd4:	480d      	ldr	r0, [pc, #52]	; (8007c0c <setup_modem+0x118>)
 8007bd6:	f7ff fe1f 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bde:	f010 fd2b 	bl	8018638 <osDelay>
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	0801e718 	.word	0x0801e718
 8007bf0:	0801e740 	.word	0x0801e740
 8007bf4:	20008188 	.word	0x20008188
 8007bf8:	0801e550 	.word	0x0801e550
 8007bfc:	0801e580 	.word	0x0801e580
 8007c00:	0801e734 	.word	0x0801e734
 8007c04:	0801e7c8 	.word	0x0801e7c8
 8007c08:	0801e518 	.word	0x0801e518
 8007c0c:	0801e534 	.word	0x0801e534

08007c10 <sendToServer>:

void sendToServer(char * datastr, int leng){
 8007c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c12:	b08d      	sub	sp, #52	; 0x34
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6178      	str	r0, [r7, #20]
 8007c18:	6139      	str	r1, [r7, #16]
 8007c1a:	466b      	mov	r3, sp
 8007c1c:	461e      	mov	r6, r3

//	buffclearSIM();
	SerialMonprintlnSIM("Send To Server", 14, 500);
 8007c1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007c22:	210e      	movs	r1, #14
 8007c24:	48bf      	ldr	r0, [pc, #764]	; (8007f24 <sendToServer+0x314>)
 8007c26:	f7ff fdab 	bl	8007780 <SerialMonprintlnSIM>
  SerialATprintln("AT+CGDCONT?",11,700);
 8007c2a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007c2e:	210b      	movs	r1, #11
 8007c30:	48bd      	ldr	r0, [pc, #756]	; (8007f28 <sendToServer+0x318>)
 8007c32:	f7ff fdf1 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007c36:	463b      	mov	r3, r7
 8007c38:	2264      	movs	r2, #100	; 0x64
 8007c3a:	2106      	movs	r1, #6
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f010 fd4f 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007c42:	4bba      	ldr	r3, [pc, #744]	; (8007f2c <sendToServer+0x31c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2102      	movs	r1, #2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f010 fd09 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c52:	f010 fcf1 	bl	8018638 <osDelay>

	buffclearSIM();
 8007c56:	f7ff fd79 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0,0",44,1000);
 8007c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c5e:	212c      	movs	r1, #44	; 0x2c
 8007c60:	48b3      	ldr	r0, [pc, #716]	; (8007f30 <sendToServer+0x320>)
 8007c62:	f7ff fdd9 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007c66:	463b      	mov	r3, r7
 8007c68:	2264      	movs	r2, #100	; 0x64
 8007c6a:	2106      	movs	r1, #6
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f010 fd37 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007c72:	4bae      	ldr	r3, [pc, #696]	; (8007f2c <sendToServer+0x31c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f010 fcf1 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c82:	f010 fcd9 	bl	8018638 <osDelay>
//
  SerialATprintln("AT+CNACT=0,1",12,1000);
 8007c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c8a:	210c      	movs	r1, #12
 8007c8c:	48a9      	ldr	r0, [pc, #676]	; (8007f34 <sendToServer+0x324>)
 8007c8e:	f7ff fdc3 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007c92:	463b      	mov	r3, r7
 8007c94:	2264      	movs	r2, #100	; 0x64
 8007c96:	2106      	movs	r1, #6
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f010 fd21 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007c9e:	4ba3      	ldr	r3, [pc, #652]	; (8007f2c <sendToServer+0x31c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f010 fcdb 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cae:	f010 fcc3 	bl	8018638 <osDelay>

//	buffclearSIM();
  SerialATprintln("AT+CNACT?",9,700);
 8007cb2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007cb6:	2109      	movs	r1, #9
 8007cb8:	489f      	ldr	r0, [pc, #636]	; (8007f38 <sendToServer+0x328>)
 8007cba:	f7ff fdad 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	2264      	movs	r2, #100	; 0x64
 8007cc2:	2106      	movs	r1, #6
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f010 fd0b 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007cca:	4b98      	ldr	r3, [pc, #608]	; (8007f2c <sendToServer+0x31c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2102      	movs	r1, #2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f010 fcc5 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cda:	f010 fcad 	bl	8018638 <osDelay>

//	buffclearSIM();
  SerialATprintln("AT+SHCONN",9,700);
 8007cde:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8007ce2:	2109      	movs	r1, #9
 8007ce4:	4895      	ldr	r0, [pc, #596]	; (8007f3c <sendToServer+0x32c>)
 8007ce6:	f7ff fd97 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007cea:	463b      	mov	r3, r7
 8007cec:	2264      	movs	r2, #100	; 0x64
 8007cee:	2106      	movs	r1, #6
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f010 fcf5 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007cf6:	4b8d      	ldr	r3, [pc, #564]	; (8007f2c <sendToServer+0x31c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f010 fcaf 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d06:	f010 fc97 	bl	8018638 <osDelay>

//	buffclearSIM();
  SerialATprintln(ATSHSTATE,sizeof(ATSHSTATE),1000);
 8007d0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d0e:	210c      	movs	r1, #12
 8007d10:	488b      	ldr	r0, [pc, #556]	; (8007f40 <sendToServer+0x330>)
 8007d12:	f7ff fd81 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007d16:	463b      	mov	r3, r7
 8007d18:	2264      	movs	r2, #100	; 0x64
 8007d1a:	2106      	movs	r1, #6
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f010 fcdf 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007d22:	4b82      	ldr	r3, [pc, #520]	; (8007f2c <sendToServer+0x31c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2102      	movs	r1, #2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f010 fc99 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d32:	f010 fc81 	bl	8018638 <osDelay>

//	buffclearSIM();
  SerialATprintln(ATSHAHEAD2,sizeof(ATSHAHEAD2),1000);
 8007d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d3a:	2125      	movs	r1, #37	; 0x25
 8007d3c:	4881      	ldr	r0, [pc, #516]	; (8007f44 <sendToServer+0x334>)
 8007d3e:	f7ff fd6b 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007d42:	463b      	mov	r3, r7
 8007d44:	2264      	movs	r2, #100	; 0x64
 8007d46:	2106      	movs	r1, #6
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f010 fcc9 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007d4e:	4b77      	ldr	r3, [pc, #476]	; (8007f2c <sendToServer+0x31c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f010 fc83 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d5e:	f010 fc6b 	bl	8018638 <osDelay>

	buffclearSIM();
 8007d62:	f7ff fcf3 	bl	800774c <buffclearSIM>
    SerialATprintln(ATSHAHEAD3,sizeof(ATSHAHEAD3),1000);
 8007d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d6a:	213e      	movs	r1, #62	; 0x3e
 8007d6c:	4876      	ldr	r0, [pc, #472]	; (8007f48 <sendToServer+0x338>)
 8007d6e:	f7ff fd53 	bl	8007818 <SerialATprintln>
    osSignalWait( BIT_1 | BIT_2, 100);
 8007d72:	463b      	mov	r3, r7
 8007d74:	2264      	movs	r2, #100	; 0x64
 8007d76:	2106      	movs	r1, #6
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f010 fcb1 	bl	80186e0 <osSignalWait>
    osSignalSet( sendDataToServeHandle, BIT_1);
 8007d7e:	4b6b      	ldr	r3, [pc, #428]	; (8007f2c <sendToServer+0x31c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2102      	movs	r1, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f010 fc6b 	bl	8018660 <osSignalSet>
    osDelay(1000);
 8007d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d8e:	f010 fc53 	bl	8018638 <osDelay>

  int sizedatastr;
  if(leng>10 && leng<100)sizedatastr=2;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b0a      	cmp	r3, #10
 8007d96:	dd05      	ble.n	8007da4 <sendToServer+0x194>
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b63      	cmp	r3, #99	; 0x63
 8007d9c:	dc02      	bgt.n	8007da4 <sendToServer+0x194>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da2:	e00b      	b.n	8007dbc <sendToServer+0x1ac>
  else if(leng>100 && leng<1000)sizedatastr=3;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b64      	cmp	r3, #100	; 0x64
 8007da8:	dd06      	ble.n	8007db8 <sendToServer+0x1a8>
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007db0:	da02      	bge.n	8007db8 <sendToServer+0x1a8>
 8007db2:	2303      	movs	r3, #3
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db6:	e001      	b.n	8007dbc <sendToServer+0x1ac>
  else sizedatastr=1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  char ATSHBOD1[sizeof(ATSHBOD)+sizedatastr+7];
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	f103 0511 	add.w	r5, r3, #17
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f04f 0200 	mov.w	r2, #0
 8007dce:	f04f 0300 	mov.w	r3, #0
 8007dd2:	f04f 0400 	mov.w	r4, #0
 8007dd6:	00d4      	lsls	r4, r2, #3
 8007dd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007ddc:	00cb      	lsls	r3, r1, #3
 8007dde:	4629      	mov	r1, r5
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	f04f 0400 	mov.w	r4, #0
 8007dec:	00d4      	lsls	r4, r2, #3
 8007dee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007df2:	00cb      	lsls	r3, r1, #3
 8007df4:	1deb      	adds	r3, r5, #7
 8007df6:	08db      	lsrs	r3, r3, #3
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	ebad 0d03 	sub.w	sp, sp, r3
 8007dfe:	466b      	mov	r3, sp
 8007e00:	3300      	adds	r3, #0
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
  char lengthdatastr[sizedatastr];
 8007e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e06:	1e43      	subs	r3, r0, #1
 8007e08:	623b      	str	r3, [r7, #32]
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	f04f 0400 	mov.w	r4, #0
 8007e1a:	00d4      	lsls	r4, r2, #3
 8007e1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007e20:	00cb      	lsls	r3, r1, #3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4619      	mov	r1, r3
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	f04f 0400 	mov.w	r4, #0
 8007e32:	00d4      	lsls	r4, r2, #3
 8007e34:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007e38:	00cb      	lsls	r3, r1, #3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	3307      	adds	r3, #7
 8007e3e:	08db      	lsrs	r3, r3, #3
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	ebad 0d03 	sub.w	sp, sp, r3
 8007e46:	466b      	mov	r3, sp
 8007e48:	3300      	adds	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
  strcat(ATSHBOD1,ATSHBOD);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	493f      	ldr	r1, [pc, #252]	; (8007f4c <sendToServer+0x33c>)
 8007e50:	4618      	mov	r0, r3
 8007e52:	f013 ffe1 	bl	801be18 <strcat>
  sprintf(lengthdatastr,"%d",leng);
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	493d      	ldr	r1, [pc, #244]	; (8007f50 <sendToServer+0x340>)
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f013 ffbb 	bl	801bdd8 <siprintf>
  strcat(ATSHBOD1,lengthdatastr);
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	4611      	mov	r1, r2
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f013 ffd5 	bl	801be18 <strcat>
  strcat(ATSHBOD1,",10000");
 8007e6e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7f8 f9b7 	bl	80001e4 <strlen>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4423      	add	r3, r4
 8007e7a:	4a36      	ldr	r2, [pc, #216]	; (8007f54 <sendToServer+0x344>)
 8007e7c:	6810      	ldr	r0, [r2, #0]
 8007e7e:	6018      	str	r0, [r3, #0]
 8007e80:	8891      	ldrh	r1, [r2, #4]
 8007e82:	7992      	ldrb	r2, [r2, #6]
 8007e84:	8099      	strh	r1, [r3, #4]
 8007e86:	719a      	strb	r2, [r3, #6]
//  SerialMonprintlnSIM(ATSHBOD1,sizeof(ATSHBOD1),1000);

  buffclearSIM();
 8007e88:	f7ff fc60 	bl	800774c <buffclearSIM>
  SerialATprintln(ATSHBOD1,sizeof(ATSHBOD1),1000);
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e92:	4629      	mov	r1, r5
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fcbf 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	2264      	movs	r2, #100	; 0x64
 8007e9e:	2106      	movs	r1, #6
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f010 fc1d 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007ea6:	4b21      	ldr	r3, [pc, #132]	; (8007f2c <sendToServer+0x31c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2102      	movs	r1, #2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f010 fbd7 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007eb6:	f010 fbbf 	bl	8018638 <osDelay>

// Send DataSTR
  buffclearSIM();
 8007eba:	f7ff fc47 	bl	800774c <buffclearSIM>
  SerialATprintln(datastr,leng,1000);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6978      	ldr	r0, [r7, #20]
 8007ec8:	f7ff fca6 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ed0:	f010 fbb2 	bl	8018638 <osDelay>

    buffclearSIM();
 8007ed4:	f7ff fc3a 	bl	800774c <buffclearSIM>
  SerialATprintln(ATSHREQ,sizeof(ATSHREQ),800);
 8007ed8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007edc:	2146      	movs	r1, #70	; 0x46
 8007ede:	481e      	ldr	r0, [pc, #120]	; (8007f58 <sendToServer+0x348>)
 8007ee0:	f7ff fc9a 	bl	8007818 <SerialATprintln>

  osDelay(8000);
 8007ee4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007ee8:	f010 fba6 	bl	8018638 <osDelay>
	buffclearSIM();
 8007eec:	f7ff fc2e 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+SHDISC",9,0xff);
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	2109      	movs	r1, #9
 8007ef4:	4819      	ldr	r0, [pc, #100]	; (8007f5c <sendToServer+0x34c>)
 8007ef6:	f7ff fc8f 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007efa:	463b      	mov	r3, r7
 8007efc:	2264      	movs	r2, #100	; 0x64
 8007efe:	2106      	movs	r1, #6
 8007f00:	4618      	mov	r0, r3
 8007f02:	f010 fbed 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <sendToServer+0x31c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f010 fba7 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f16:	f010 fb8f 	bl	8018638 <osDelay>
 8007f1a:	46b5      	mov	sp, r6
}
 8007f1c:	bf00      	nop
 8007f1e:	3734      	adds	r7, #52	; 0x34
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f24:	0801e804 	.word	0x0801e804
 8007f28:	0801e580 	.word	0x0801e580
 8007f2c:	20008188 	.word	0x20008188
 8007f30:	0801e550 	.word	0x0801e550
 8007f34:	0801e58c 	.word	0x0801e58c
 8007f38:	0801e59c 	.word	0x0801e59c
 8007f3c:	0801e5a8 	.word	0x0801e5a8
 8007f40:	200000bc 	.word	0x200000bc
 8007f44:	200000c8 	.word	0x200000c8
 8007f48:	200000f0 	.word	0x200000f0
 8007f4c:	20000178 	.word	0x20000178
 8007f50:	0801e814 	.word	0x0801e814
 8007f54:	0801e818 	.word	0x0801e818
 8007f58:	20000130 	.word	0x20000130
 8007f5c:	0801e688 	.word	0x0801e688

08007f60 <mqtt_demo>:
  osDelay(1000);
}

// Subscribe to MQTT Topic
void mqtt_demo(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0

  SerialATprintln("AT+CGNAPN",9,0xff);
 8007f66:	22ff      	movs	r2, #255	; 0xff
 8007f68:	2109      	movs	r1, #9
 8007f6a:	48a4      	ldr	r0, [pc, #656]	; (80081fc <mqtt_demo+0x29c>)
 8007f6c:	f7ff fc54 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007f70:	463b      	mov	r3, r7
 8007f72:	2264      	movs	r2, #100	; 0x64
 8007f74:	2106      	movs	r1, #6
 8007f76:	4618      	mov	r0, r3
 8007f78:	f010 fbb2 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007f7c:	4ba0      	ldr	r3, [pc, #640]	; (8008200 <mqtt_demo+0x2a0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2102      	movs	r1, #2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f010 fb6c 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f8c:	f010 fb54 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	210b      	movs	r1, #11
 8007f94:	489b      	ldr	r0, [pc, #620]	; (8008204 <mqtt_demo+0x2a4>)
 8007f96:	f7ff fc3f 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f9e:	f010 fb4b 	bl	8018638 <osDelay>

  buffclearSIM();
 8007fa2:	f7ff fbd3 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0",44,0xff);
 8007fa6:	22ff      	movs	r2, #255	; 0xff
 8007fa8:	212c      	movs	r1, #44	; 0x2c
 8007faa:	4897      	ldr	r0, [pc, #604]	; (8008208 <mqtt_demo+0x2a8>)
 8007fac:	f7ff fc34 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	2264      	movs	r2, #100	; 0x64
 8007fb4:	2106      	movs	r1, #6
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f010 fb92 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8007fbc:	4b90      	ldr	r3, [pc, #576]	; (8008200 <mqtt_demo+0x2a0>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f010 fb4c 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8007fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fcc:	f010 fb34 	bl	8018638 <osDelay>

  buffclearSIM();
 8007fd0:	f7ff fbbc 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGDCONT?",11,0xff);;
 8007fd4:	22ff      	movs	r2, #255	; 0xff
 8007fd6:	210b      	movs	r1, #11
 8007fd8:	488a      	ldr	r0, [pc, #552]	; (8008204 <mqtt_demo+0x2a4>)
 8007fda:	f7ff fc1d 	bl	8007818 <SerialATprintln>

  buffclearSIM();
 8007fde:	f7ff fbb5 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CREG=1",9,0xff);
 8007fe2:	22ff      	movs	r2, #255	; 0xff
 8007fe4:	2109      	movs	r1, #9
 8007fe6:	4889      	ldr	r0, [pc, #548]	; (800820c <mqtt_demo+0x2ac>)
 8007fe8:	f7ff fc16 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8007fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ff0:	f010 fb22 	bl	8018638 <osDelay>

  buffclearSIM();
 8007ff4:	f7ff fbaa 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CGREG=1",10,0xff);
 8007ff8:	22ff      	movs	r2, #255	; 0xff
 8007ffa:	210a      	movs	r1, #10
 8007ffc:	4884      	ldr	r0, [pc, #528]	; (8008210 <mqtt_demo+0x2b0>)
 8007ffe:	f7ff fc0b 	bl	8007818 <SerialATprintln>
  osDelay(1000);
 8008002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008006:	f010 fb17 	bl	8018638 <osDelay>

  SerialATprintln("AT+CGATT?",9,0xff);
 800800a:	22ff      	movs	r2, #255	; 0xff
 800800c:	2109      	movs	r1, #9
 800800e:	4881      	ldr	r0, [pc, #516]	; (8008214 <mqtt_demo+0x2b4>)
 8008010:	f7ff fc02 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008014:	463b      	mov	r3, r7
 8008016:	2264      	movs	r2, #100	; 0x64
 8008018:	2106      	movs	r1, #6
 800801a:	4618      	mov	r0, r3
 800801c:	f010 fb60 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008020:	4b77      	ldr	r3, [pc, #476]	; (8008200 <mqtt_demo+0x2a0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2102      	movs	r1, #2
 8008026:	4618      	mov	r0, r3
 8008028:	f010 fb1a 	bl	8018660 <osSignalSet>
  osDelay(1000);
 800802c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008030:	f010 fb02 	bl	8018638 <osDelay>

  buffclearSIM();
 8008034:	f7ff fb8a 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	210c      	movs	r1, #12
 800803c:	4876      	ldr	r0, [pc, #472]	; (8008218 <mqtt_demo+0x2b8>)
 800803e:	f7ff fbeb 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008042:	463b      	mov	r3, r7
 8008044:	2264      	movs	r2, #100	; 0x64
 8008046:	2106      	movs	r1, #6
 8008048:	4618      	mov	r0, r3
 800804a:	f010 fb49 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800804e:	4b6c      	ldr	r3, [pc, #432]	; (8008200 <mqtt_demo+0x2a0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2102      	movs	r1, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f010 fb03 	bl	8018660 <osSignalSet>
  osDelay(500);
 800805a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800805e:	f010 faeb 	bl	8018638 <osDelay>

  buffclearSIM();
 8008062:	f7ff fb73 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+CNACT?",9,0xff);
 8008066:	22ff      	movs	r2, #255	; 0xff
 8008068:	2109      	movs	r1, #9
 800806a:	486c      	ldr	r0, [pc, #432]	; (800821c <mqtt_demo+0x2bc>)
 800806c:	f7ff fbd4 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008070:	463b      	mov	r3, r7
 8008072:	2264      	movs	r2, #100	; 0x64
 8008074:	2106      	movs	r1, #6
 8008076:	4618      	mov	r0, r3
 8008078:	f010 fb32 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800807c:	4b60      	ldr	r3, [pc, #384]	; (8008200 <mqtt_demo+0x2a0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2102      	movs	r1, #2
 8008082:	4618      	mov	r0, r3
 8008084:	f010 faec 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8008088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800808c:	f010 fad4 	bl	8018638 <osDelay>

  buffclearSIM();
 8008090:	f7ff fb5c 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+SMDISC",11,0xff);
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	210b      	movs	r1, #11
 8008098:	4861      	ldr	r0, [pc, #388]	; (8008220 <mqtt_demo+0x2c0>)
 800809a:	f7ff fbbd 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800809e:	463b      	mov	r3, r7
 80080a0:	2264      	movs	r2, #100	; 0x64
 80080a2:	2106      	movs	r1, #6
 80080a4:	4618      	mov	r0, r3
 80080a6:	f010 fb1b 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80080aa:	4b55      	ldr	r3, [pc, #340]	; (8008200 <mqtt_demo+0x2a0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2102      	movs	r1, #2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f010 fad5 	bl	8018660 <osSignalSet>
  osDelay(1000);
 80080b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080ba:	f010 fabd 	bl	8018638 <osDelay>

  buffclearSIM();
 80080be:	f7ff fb45 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+SMSTATE?",11,0xff);
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	210b      	movs	r1, #11
 80080c6:	4857      	ldr	r0, [pc, #348]	; (8008224 <mqtt_demo+0x2c4>)
 80080c8:	f7ff fba6 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80080cc:	463b      	mov	r3, r7
 80080ce:	2264      	movs	r2, #100	; 0x64
 80080d0:	2106      	movs	r1, #6
 80080d2:	4618      	mov	r0, r3
 80080d4:	f010 fb04 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80080d8:	4b49      	ldr	r3, [pc, #292]	; (8008200 <mqtt_demo+0x2a0>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f010 fabe 	bl	8018660 <osSignalSet>
  osDelay(1000);
 80080e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080e8:	f010 faa6 	bl	8018638 <osDelay>

//  SerialATprintln("AT+SMCONF=\"URL\",\"broker.mqttdashboard.com\",1883",47,0xff);
  SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	2126      	movs	r1, #38	; 0x26
 80080f0:	484d      	ldr	r0, [pc, #308]	; (8008228 <mqtt_demo+0x2c8>)
 80080f2:	f7ff fb91 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80080f6:	463b      	mov	r3, r7
 80080f8:	2264      	movs	r2, #100	; 0x64
 80080fa:	2106      	movs	r1, #6
 80080fc:	4618      	mov	r0, r3
 80080fe:	f010 faef 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008102:	4b3f      	ldr	r3, [pc, #252]	; (8008200 <mqtt_demo+0x2a0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2102      	movs	r1, #2
 8008108:	4618      	mov	r0, r3
 800810a:	f010 faa9 	bl	8018660 <osSignalSet>
  osDelay(500);
 800810e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008112:	f010 fa91 	bl	8018638 <osDelay>

  SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 8008116:	22ff      	movs	r2, #255	; 0xff
 8008118:	2117      	movs	r1, #23
 800811a:	4844      	ldr	r0, [pc, #272]	; (800822c <mqtt_demo+0x2cc>)
 800811c:	f7ff fb7c 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008120:	463b      	mov	r3, r7
 8008122:	2264      	movs	r2, #100	; 0x64
 8008124:	2106      	movs	r1, #6
 8008126:	4618      	mov	r0, r3
 8008128:	f010 fada 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800812c:	4b34      	ldr	r3, [pc, #208]	; (8008200 <mqtt_demo+0x2a0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2102      	movs	r1, #2
 8008132:	4618      	mov	r0, r3
 8008134:	f010 fa94 	bl	8018660 <osSignalSet>
  osDelay(500);
 8008138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800813c:	f010 fa7c 	bl	8018638 <osDelay>

  SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 8008140:	22ff      	movs	r2, #255	; 0xff
 8008142:	2115      	movs	r1, #21
 8008144:	483a      	ldr	r0, [pc, #232]	; (8008230 <mqtt_demo+0x2d0>)
 8008146:	f7ff fb67 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800814a:	463b      	mov	r3, r7
 800814c:	2264      	movs	r2, #100	; 0x64
 800814e:	2106      	movs	r1, #6
 8008150:	4618      	mov	r0, r3
 8008152:	f010 fac5 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008156:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <mqtt_demo+0x2a0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2102      	movs	r1, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f010 fa7f 	bl	8018660 <osSignalSet>
  osDelay(1000);
 8008162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008166:	f010 fa67 	bl	8018638 <osDelay>
//  SerialATprintln("AT+SMCONF=\"CLIENTID\",\"clientId-RjE651foVf\"",42,0xff);
//  osSignalWait( BIT_1 | BIT_2, 100);
//  osSignalSet( sendDataToServeHandle, BIT_1);
//  osDelay(2000);

  buffclearSIM();
 800816a:	f7ff faef 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+SMCONN",9,0xff);
 800816e:	22ff      	movs	r2, #255	; 0xff
 8008170:	2109      	movs	r1, #9
 8008172:	4830      	ldr	r0, [pc, #192]	; (8008234 <mqtt_demo+0x2d4>)
 8008174:	f7ff fb50 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008178:	463b      	mov	r3, r7
 800817a:	2264      	movs	r2, #100	; 0x64
 800817c:	2106      	movs	r1, #6
 800817e:	4618      	mov	r0, r3
 8008180:	f010 faae 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008184:	4b1e      	ldr	r3, [pc, #120]	; (8008200 <mqtt_demo+0x2a0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2102      	movs	r1, #2
 800818a:	4618      	mov	r0, r3
 800818c:	f010 fa68 	bl	8018660 <osSignalSet>
  osDelay(10000);
 8008190:	f242 7010 	movw	r0, #10000	; 0x2710
 8008194:	f010 fa50 	bl	8018638 <osDelay>

  buffclearSIM();
 8008198:	f7ff fad8 	bl	800774c <buffclearSIM>
  SerialATprintln("AT+SMSTATE?",11,0xff);
 800819c:	22ff      	movs	r2, #255	; 0xff
 800819e:	210b      	movs	r1, #11
 80081a0:	4820      	ldr	r0, [pc, #128]	; (8008224 <mqtt_demo+0x2c4>)
 80081a2:	f7ff fb39 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80081a6:	463b      	mov	r3, r7
 80081a8:	2264      	movs	r2, #100	; 0x64
 80081aa:	2106      	movs	r1, #6
 80081ac:	4618      	mov	r0, r3
 80081ae:	f010 fa97 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <mqtt_demo+0x2a0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2102      	movs	r1, #2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f010 fa51 	bl	8018660 <osSignalSet>
  osDelay(1000);
 80081be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081c2:	f010 fa39 	bl	8018638 <osDelay>

  buffclearSIM();
 80081c6:	f7ff fac1 	bl	800774c <buffclearSIM>
//  SerialATprintln("AT+SMSUB=\"testtopic/Flooerp\",1", 30, 0xff);
//  SerialATprintln("AT+SMSUB=\"tayra/message\",1", 26, 0xff); //tayra/message
//  SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
  SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 80081ca:	22ff      	movs	r2, #255	; 0xff
 80081cc:	2119      	movs	r1, #25
 80081ce:	481a      	ldr	r0, [pc, #104]	; (8008238 <mqtt_demo+0x2d8>)
 80081d0:	f7ff fb22 	bl	8007818 <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80081d4:	463b      	mov	r3, r7
 80081d6:	2264      	movs	r2, #100	; 0x64
 80081d8:	2106      	movs	r1, #6
 80081da:	4618      	mov	r0, r3
 80081dc:	f010 fa80 	bl	80186e0 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80081e0:	4b07      	ldr	r3, [pc, #28]	; (8008200 <mqtt_demo+0x2a0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2102      	movs	r1, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f010 fa3a 	bl	8018660 <osSignalSet>
  osDelay(3000);
 80081ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80081f0:	f010 fa22 	bl	8018638 <osDelay>
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	0801e8a8 	.word	0x0801e8a8
 8008200:	20008188 	.word	0x20008188
 8008204:	0801e580 	.word	0x0801e580
 8008208:	0801e748 	.word	0x0801e748
 800820c:	0801e71c 	.word	0x0801e71c
 8008210:	0801e728 	.word	0x0801e728
 8008214:	0801e500 	.word	0x0801e500
 8008218:	0801e58c 	.word	0x0801e58c
 800821c:	0801e59c 	.word	0x0801e59c
 8008220:	0801e850 	.word	0x0801e850
 8008224:	0801e8b4 	.word	0x0801e8b4
 8008228:	0801e85c 	.word	0x0801e85c
 800822c:	0801e884 	.word	0x0801e884
 8008230:	0801e8c0 	.word	0x0801e8c0
 8008234:	0801e89c 	.word	0x0801e89c
 8008238:	0801e8d8 	.word	0x0801e8d8

0800823c <_write>:
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
//  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}
int _write(int file, char *ptr, int len){
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 0xFFFF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	b29a      	uxth	r2, r3
 800824c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	4804      	ldr	r0, [pc, #16]	; (8008264 <_write+0x28>)
 8008254:	f00b fe1a 	bl	8013e8c <HAL_UART_Transmit>
  return len;
 8008258:	687b      	ldr	r3, [r7, #4]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20002fe0 	.word	0x20002fe0

08008268 <runGyro>:
	enable_modem();
	if(onlineMode)  setup_modem();
}

void runGyro()
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  osSignalSet( readGyroHandle, BIT_1 | BIT_2);
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <runGyro+0x14>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2106      	movs	r1, #6
 8008272:	4618      	mov	r0, r3
 8008274:	f010 f9f4 	bl	8018660 <osSignalSet>
}
 8008278:	bf00      	nop
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20009128 	.word	0x20009128

08008280 <datauart3size>:

int datauart3size(char buf[])
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	int i = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
	while(buf[i] != 0x03) i++;
 800828c:	e002      	b.n	8008294 <datauart3size+0x14>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d1f6      	bne.n	800828e <datauart3size+0xe>
	return i+1;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <bufsizechararray>:
	while(*buf++ != '\0') i++;
	return i;
}

int bufsizechararray(char buf[])
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 80082bc:	e002      	b.n	80082c4 <bufsizechararray+0x14>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4413      	add	r3, r2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f6      	bne.n	80082be <bufsizechararray+0xe>
	return i+1;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <bufclear>:

void bufclear(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
	for (int i=0; i < 1024; i++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	e00c      	b.n	8008306 <bufclear+0x26>
	{
		buffer[i] = '\0';
 80082ec:	4a0b      	ldr	r2, [pc, #44]	; (800831c <bufclear+0x3c>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
		mydata[i] = '\0';
 80082f6:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <bufclear+0x40>)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4413      	add	r3, r2
 80082fc:	2200      	movs	r2, #0
 80082fe:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1024; i++)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3301      	adds	r3, #1
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830c:	dbee      	blt.n	80082ec <bufclear+0xc>
	}
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20007248 	.word	0x20007248
 8008320:	200046c8 	.word	0x200046c8

08008324 <charToInt>:

int charToInt(char c){
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	71fb      	strb	r3, [r7, #7]

return c - '0';
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	3b30      	subs	r3, #48	; 0x30
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <tx_com>:

static void tx_com( uint8_t *tx_buffer, uint16_t len )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit( &huart1, tx_buffer, len, 1000 );
 800834c:	887a      	ldrh	r2, [r7, #2]
 800834e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4803      	ldr	r0, [pc, #12]	; (8008364 <tx_com+0x24>)
 8008356:	f00b fd99 	bl	8013e8c <HAL_UART_Transmit>
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20002fe0 	.word	0x20002fe0

08008368 <platform_write>:

static int32_t platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
                              uint16_t len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af04      	add	r7, sp, #16
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	72fb      	strb	r3, [r7, #11]
 8008378:	4613      	mov	r3, r2
 800837a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg,
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	b29a      	uxth	r2, r3
 8008380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008384:	9302      	str	r3, [sp, #8]
 8008386:	893b      	ldrh	r3, [r7, #8]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2301      	movs	r3, #1
 8008390:	21d7      	movs	r1, #215	; 0xd7
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f008 fa6c 	bl	8010870 <HAL_I2C_Mem_Write>
					  I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <platform_read>:

static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
                             uint16_t len)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b088      	sub	sp, #32
 80083a6:	af04      	add	r7, sp, #16
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	461a      	mov	r2, r3
 80083ae:	460b      	mov	r3, r1
 80083b0:	72fb      	strb	r3, [r7, #11]
 80083b2:	4613      	mov	r3, r2
 80083b4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg,
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	893b      	ldrh	r3, [r7, #8]
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	2301      	movs	r3, #1
 80083ca:	21d7      	movs	r1, #215	; 0xd7
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f008 fb63 	bl	8010a98 <HAL_I2C_Mem_Read>
				   I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <sendMQTTMAIN>:

void sendMQTTMAIN(){
 80083dc:	b590      	push	{r4, r7, lr}
 80083de:	b08f      	sub	sp, #60	; 0x3c
 80083e0:	af00      	add	r7, sp, #0
	uart2done = false;
 80083e2:	4ba7      	ldr	r3, [pc, #668]	; (8008680 <sendMQTTMAIN+0x2a4>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	701a      	strb	r2, [r3, #0]
	sprintf(uart2_at,"AT+CPSI?");
 80083e8:	4aa6      	ldr	r2, [pc, #664]	; (8008684 <sendMQTTMAIN+0x2a8>)
 80083ea:	4ba7      	ldr	r3, [pc, #668]	; (8008688 <sendMQTTMAIN+0x2ac>)
 80083ec:	cb03      	ldmia	r3!, {r0, r1}
 80083ee:	6010      	str	r0, [r2, #0]
 80083f0:	6051      	str	r1, [r2, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	7213      	strb	r3, [r2, #8]
	printf(uart2_at);
 80083f6:	48a3      	ldr	r0, [pc, #652]	; (8008684 <sendMQTTMAIN+0x2a8>)
 80083f8:	f013 fc62 	bl	801bcc0 <iprintf>
	SerialATprintln("AT+CPSI?", 8, 0xff);
 80083fc:	22ff      	movs	r2, #255	; 0xff
 80083fe:	2108      	movs	r1, #8
 8008400:	48a1      	ldr	r0, [pc, #644]	; (8008688 <sendMQTTMAIN+0x2ac>)
 8008402:	f7ff fa09 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 8008406:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800840a:	f010 f915 	bl	8018638 <osDelay>
	for(int y=0;y<30;y++){
 800840e:	2300      	movs	r3, #0
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
 8008412:	e009      	b.n	8008428 <sendMQTTMAIN+0x4c>
				osDelay(200);
 8008414:	20c8      	movs	r0, #200	; 0xc8
 8008416:	f010 f90f 	bl	8018638 <osDelay>
				if(uart2done)break;
 800841a:	4b99      	ldr	r3, [pc, #612]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <sendMQTTMAIN+0x54>
	for(int y=0;y<30;y++){
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	3301      	adds	r3, #1
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
 8008428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842a:	2b1d      	cmp	r3, #29
 800842c:	ddf2      	ble.n	8008414 <sendMQTTMAIN+0x38>
 800842e:	e000      	b.n	8008432 <sendMQTTMAIN+0x56>
				if(uart2done)break;
 8008430:	bf00      	nop
			}
	int cmpint=strcmp(networkstr," GSM");
 8008432:	4b96      	ldr	r3, [pc, #600]	; (800868c <sendMQTTMAIN+0x2b0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4996      	ldr	r1, [pc, #600]	; (8008690 <sendMQTTMAIN+0x2b4>)
 8008438:	4618      	mov	r0, r3
 800843a:	f7f7 fec9 	bl	80001d0 <strcmp>
 800843e:	6078      	str	r0, [r7, #4]
	if(cmpint != 0){
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d028      	beq.n	8008498 <sendMQTTMAIN+0xbc>
		if(signal<-115){
 8008446:	4b93      	ldr	r3, [pc, #588]	; (8008694 <sendMQTTMAIN+0x2b8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f113 0f73 	cmn.w	r3, #115	; 0x73
 800844e:	da5c      	bge.n	800850a <sendMQTTMAIN+0x12e>
				SerialATprintln("AT+CNMP=13", 10, 0xff);
 8008450:	22ff      	movs	r2, #255	; 0xff
 8008452:	210a      	movs	r1, #10
 8008454:	4890      	ldr	r0, [pc, #576]	; (8008698 <sendMQTTMAIN+0x2bc>)
 8008456:	f7ff f9df 	bl	8007818 <SerialATprintln>
				osDelay(2000);
 800845a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800845e:	f010 f8eb 	bl	8018638 <osDelay>
				reset_mqtt();
 8008462:	f001 f815 	bl	8009490 <reset_mqtt>
				SerialATprintln("AT+SMCONN",9,0xff);
 8008466:	22ff      	movs	r2, #255	; 0xff
 8008468:	2109      	movs	r1, #9
 800846a:	488c      	ldr	r0, [pc, #560]	; (800869c <sendMQTTMAIN+0x2c0>)
 800846c:	f7ff f9d4 	bl	8007818 <SerialATprintln>
				uart2done = false;
 8008470:	4b83      	ldr	r3, [pc, #524]	; (8008680 <sendMQTTMAIN+0x2a4>)
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
				for(int y=0;y<30;y++){
 8008476:	2300      	movs	r3, #0
 8008478:	633b      	str	r3, [r7, #48]	; 0x30
 800847a:	e009      	b.n	8008490 <sendMQTTMAIN+0xb4>
					osDelay(200);
 800847c:	20c8      	movs	r0, #200	; 0xc8
 800847e:	f010 f8db 	bl	8018638 <osDelay>
					if(uart2done)break;
 8008482:	4b7f      	ldr	r3, [pc, #508]	; (8008680 <sendMQTTMAIN+0x2a4>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d13c      	bne.n	8008504 <sendMQTTMAIN+0x128>
				for(int y=0;y<30;y++){
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	3301      	adds	r3, #1
 800848e:	633b      	str	r3, [r7, #48]	; 0x30
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	2b1d      	cmp	r3, #29
 8008494:	ddf2      	ble.n	800847c <sendMQTTMAIN+0xa0>
 8008496:	e038      	b.n	800850a <sendMQTTMAIN+0x12e>
				}
			}
	}
	else {
		if(signal<=-100){
 8008498:	4b7e      	ldr	r3, [pc, #504]	; (8008694 <sendMQTTMAIN+0x2b8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80084a0:	da33      	bge.n	800850a <sendMQTTMAIN+0x12e>
			for(int z=0;z<3;z++){
 80084a2:	2300      	movs	r3, #0
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a6:	e029      	b.n	80084fc <sendMQTTMAIN+0x120>
				printf("modem reboot\n");
 80084a8:	487d      	ldr	r0, [pc, #500]	; (80086a0 <sendMQTTMAIN+0x2c4>)
 80084aa:	f013 fc7d 	bl	801bda8 <puts>
				modem_reset_rtos();
 80084ae:	f001 f8b1 	bl	8009614 <modem_reset_rtos>
				reset_mqtt();
 80084b2:	f000 ffed 	bl	8009490 <reset_mqtt>
				SerialATprintln("AT+CPSI?", 8, 0xff);
 80084b6:	22ff      	movs	r2, #255	; 0xff
 80084b8:	2108      	movs	r1, #8
 80084ba:	4873      	ldr	r0, [pc, #460]	; (8008688 <sendMQTTMAIN+0x2ac>)
 80084bc:	f7ff f9ac 	bl	8007818 <SerialATprintln>
				osDelay(2000);
 80084c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80084c4:	f010 f8b8 	bl	8018638 <osDelay>
				for(int y=0;y<30;y++){
 80084c8:	2300      	movs	r3, #0
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80084cc:	e009      	b.n	80084e2 <sendMQTTMAIN+0x106>
					osDelay(200);
 80084ce:	20c8      	movs	r0, #200	; 0xc8
 80084d0:	f010 f8b2 	bl	8018638 <osDelay>
					if(uart2done)break;
 80084d4:	4b6a      	ldr	r3, [pc, #424]	; (8008680 <sendMQTTMAIN+0x2a4>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <sendMQTTMAIN+0x10e>
				for(int y=0;y<30;y++){
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	3301      	adds	r3, #1
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	2b1d      	cmp	r3, #29
 80084e6:	ddf2      	ble.n	80084ce <sendMQTTMAIN+0xf2>
 80084e8:	e000      	b.n	80084ec <sendMQTTMAIN+0x110>
					if(uart2done)break;
 80084ea:	bf00      	nop
				}
				if(signal > -100) break;
 80084ec:	4b69      	ldr	r3, [pc, #420]	; (8008694 <sendMQTTMAIN+0x2b8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80084f4:	da08      	bge.n	8008508 <sendMQTTMAIN+0x12c>
			for(int z=0;z<3;z++){
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	3301      	adds	r3, #1
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	2b02      	cmp	r3, #2
 8008500:	ddd2      	ble.n	80084a8 <sendMQTTMAIN+0xcc>
 8008502:	e002      	b.n	800850a <sendMQTTMAIN+0x12e>
					if(uart2done)break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <sendMQTTMAIN+0x12e>
				if(signal > -100) break;
 8008508:	bf00      	nop
			}

		}
	}
	SerialATprintln("AT+CNMP?", 8, 0xff);
 800850a:	22ff      	movs	r2, #255	; 0xff
 800850c:	2108      	movs	r1, #8
 800850e:	4865      	ldr	r0, [pc, #404]	; (80086a4 <sendMQTTMAIN+0x2c8>)
 8008510:	f7ff f982 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 8008514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008518:	f010 f88e 	bl	8018638 <osDelay>
	memset(ATSMPUB,0,48);
 800851c:	4b62      	ldr	r3, [pc, #392]	; (80086a8 <sendMQTTMAIN+0x2cc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2230      	movs	r2, #48	; 0x30
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f012 febe 	bl	801b2a6 <memset>
	memset(smstatestr,0,11);
 800852a:	4b60      	ldr	r3, [pc, #384]	; (80086ac <sendMQTTMAIN+0x2d0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	220b      	movs	r2, #11
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f012 feb7 	bl	801b2a6 <memset>
	len_mydata = bufsizechararray(mydata);
 8008538:	485d      	ldr	r0, [pc, #372]	; (80086b0 <sendMQTTMAIN+0x2d4>)
 800853a:	f7ff feb9 	bl	80082b0 <bufsizechararray>
 800853e:	4602      	mov	r2, r0
 8008540:	4b5c      	ldr	r3, [pc, #368]	; (80086b4 <sendMQTTMAIN+0x2d8>)
 8008542:	601a      	str	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
	for(int z=0;z<3;z++){
 8008544:	2300      	movs	r3, #0
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
 8008548:	e061      	b.n	800860e <sendMQTTMAIN+0x232>
		uart2done = false;
 800854a:	4b4d      	ldr	r3, [pc, #308]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800854c:	2200      	movs	r2, #0
 800854e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 8008550:	4b59      	ldr	r3, [pc, #356]	; (80086b8 <sendMQTTMAIN+0x2dc>)
 8008552:	681c      	ldr	r4, [r3, #0]
 8008554:	4b58      	ldr	r3, [pc, #352]	; (80086b8 <sendMQTTMAIN+0x2dc>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f7f7 fe43 	bl	80001e4 <strlen>
 800855e:	4603      	mov	r3, r0
 8008560:	b29a      	uxth	r2, r3
 8008562:	23ff      	movs	r3, #255	; 0xff
 8008564:	4621      	mov	r1, r4
 8008566:	4855      	ldr	r0, [pc, #340]	; (80086bc <sendMQTTMAIN+0x2e0>)
 8008568:	f00b fc90 	bl	8013e8c <HAL_UART_Transmit>
		for(int y=0;y<30;y++){
 800856c:	2300      	movs	r3, #0
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	e009      	b.n	8008586 <sendMQTTMAIN+0x1aa>
				osDelay(200);
 8008572:	20c8      	movs	r0, #200	; 0xc8
 8008574:	f010 f860 	bl	8018638 <osDelay>
				if(uart2done)break;
 8008578:	4b41      	ldr	r3, [pc, #260]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <sendMQTTMAIN+0x1b2>
		for(int y=0;y<30;y++){
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	3301      	adds	r3, #1
 8008584:	623b      	str	r3, [r7, #32]
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	2b1d      	cmp	r3, #29
 800858a:	ddf2      	ble.n	8008572 <sendMQTTMAIN+0x196>
 800858c:	e000      	b.n	8008590 <sendMQTTMAIN+0x1b4>
				if(uart2done)break;
 800858e:	bf00      	nop
			}
		temp_data =strstr((char *)buffer2,"+SMSTATE:");
 8008590:	494b      	ldr	r1, [pc, #300]	; (80086c0 <sendMQTTMAIN+0x2e4>)
 8008592:	484c      	ldr	r0, [pc, #304]	; (80086c4 <sendMQTTMAIN+0x2e8>)
 8008594:	f013 fc57 	bl	801be46 <strstr>
 8008598:	4602      	mov	r2, r0
 800859a:	4b4b      	ldr	r3, [pc, #300]	; (80086c8 <sendMQTTMAIN+0x2ec>)
 800859c:	601a      	str	r2, [r3, #0]
		memcpy(smstatestr,temp_data,11);
 800859e:	4b43      	ldr	r3, [pc, #268]	; (80086ac <sendMQTTMAIN+0x2d0>)
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	4b49      	ldr	r3, [pc, #292]	; (80086c8 <sendMQTTMAIN+0x2ec>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	220b      	movs	r2, #11
 80085a8:	4619      	mov	r1, r3
 80085aa:	f012 fe71 	bl	801b290 <memcpy>
		smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 80085ae:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <sendMQTTMAIN+0x2d0>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4946      	ldr	r1, [pc, #280]	; (80086cc <sendMQTTMAIN+0x2f0>)
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 fe0b 	bl	80001d0 <strcmp>
 80085ba:	4603      	mov	r3, r0
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b44      	ldr	r3, [pc, #272]	; (80086d0 <sendMQTTMAIN+0x2f4>)
 80085c0:	701a      	strb	r2, [r3, #0]
		uart2done = false;
 80085c2:	4b2f      	ldr	r3, [pc, #188]	; (8008680 <sendMQTTMAIN+0x2a4>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]
		if(smstateint!=0) break;
 80085c8:	4b41      	ldr	r3, [pc, #260]	; (80086d0 <sendMQTTMAIN+0x2f4>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d122      	bne.n	8008616 <sendMQTTMAIN+0x23a>
		reset_mqtt();
 80085d0:	f000 ff5e 	bl	8009490 <reset_mqtt>
		SerialATprintln("AT+SMCONN",9,0xff);
 80085d4:	22ff      	movs	r2, #255	; 0xff
 80085d6:	2109      	movs	r1, #9
 80085d8:	4830      	ldr	r0, [pc, #192]	; (800869c <sendMQTTMAIN+0x2c0>)
 80085da:	f7ff f91d 	bl	8007818 <SerialATprintln>
		uart2done = false;
 80085de:	4b28      	ldr	r3, [pc, #160]	; (8008680 <sendMQTTMAIN+0x2a4>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
		for(int y=0;y<30;y++){
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e009      	b.n	80085fe <sendMQTTMAIN+0x222>
			osDelay(200);
 80085ea:	20c8      	movs	r0, #200	; 0xc8
 80085ec:	f010 f824 	bl	8018638 <osDelay>
			if(uart2done)break;
 80085f0:	4b23      	ldr	r3, [pc, #140]	; (8008680 <sendMQTTMAIN+0x2a4>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <sendMQTTMAIN+0x22a>
		for(int y=0;y<30;y++){
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3301      	adds	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	2b1d      	cmp	r3, #29
 8008602:	ddf2      	ble.n	80085ea <sendMQTTMAIN+0x20e>
 8008604:	e000      	b.n	8008608 <sendMQTTMAIN+0x22c>
			if(uart2done)break;
 8008606:	bf00      	nop
	for(int z=0;z<3;z++){
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	3301      	adds	r3, #1
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	2b02      	cmp	r3, #2
 8008612:	dd9a      	ble.n	800854a <sendMQTTMAIN+0x16e>
 8008614:	e000      	b.n	8008618 <sendMQTTMAIN+0x23c>
		if(smstateint!=0) break;
 8008616:	bf00      	nop
		}
	}
	uart2done = false;
 8008618:	4b19      	ldr	r3, [pc, #100]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+SMCONN",9,0xff);
 800861e:	22ff      	movs	r2, #255	; 0xff
 8008620:	2109      	movs	r1, #9
 8008622:	481e      	ldr	r0, [pc, #120]	; (800869c <sendMQTTMAIN+0x2c0>)
 8008624:	f7ff f8f8 	bl	8007818 <SerialATprintln>
	for(int i=0;i<20;i++){
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	e009      	b.n	8008642 <sendMQTTMAIN+0x266>
		osDelay(200);
 800862e:	20c8      	movs	r0, #200	; 0xc8
 8008630:	f010 f802 	bl	8018638 <osDelay>
		if(uart2done)break;
 8008634:	4b12      	ldr	r3, [pc, #72]	; (8008680 <sendMQTTMAIN+0x2a4>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <sendMQTTMAIN+0x26e>
	for(int i=0;i<20;i++){
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	3301      	adds	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b13      	cmp	r3, #19
 8008646:	ddf2      	ble.n	800862e <sendMQTTMAIN+0x252>
 8008648:	e000      	b.n	800864c <sendMQTTMAIN+0x270>
		if(uart2done)break;
 800864a:	bf00      	nop
	}
	uart2done = false;
 800864c:	4b0c      	ldr	r3, [pc, #48]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
//		SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	2119      	movs	r1, #25
 8008656:	481f      	ldr	r0, [pc, #124]	; (80086d4 <sendMQTTMAIN+0x2f8>)
 8008658:	f7ff f8de 	bl	8007818 <SerialATprintln>
		for(int i=0;i<25;i++){
 800865c:	2300      	movs	r3, #0
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e009      	b.n	8008676 <sendMQTTMAIN+0x29a>
			osDelay(200);
 8008662:	20c8      	movs	r0, #200	; 0xc8
 8008664:	f00f ffe8 	bl	8018638 <osDelay>
			if(uart2done)break;
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <sendMQTTMAIN+0x2a4>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d133      	bne.n	80086d8 <sendMQTTMAIN+0x2fc>
		for(int i=0;i<25;i++){
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	3301      	adds	r3, #1
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b18      	cmp	r3, #24
 800867a:	ddf2      	ble.n	8008662 <sendMQTTMAIN+0x286>
 800867c:	e02d      	b.n	80086da <sendMQTTMAIN+0x2fe>
 800867e:	bf00      	nop
 8008680:	20003fe4 	.word	0x20003fe4
 8008684:	20003fd0 	.word	0x20003fd0
 8008688:	0801e910 	.word	0x0801e910
 800868c:	20005314 	.word	0x20005314
 8008690:	0801e91c 	.word	0x0801e91c
 8008694:	20007244 	.word	0x20007244
 8008698:	0801e924 	.word	0x0801e924
 800869c:	0801e89c 	.word	0x0801e89c
 80086a0:	0801e930 	.word	0x0801e930
 80086a4:	0801e778 	.word	0x0801e778
 80086a8:	20004308 	.word	0x20004308
 80086ac:	2000b000 	.word	0x2000b000
 80086b0:	200046c8 	.word	0x200046c8
 80086b4:	20009124 	.word	0x20009124
 80086b8:	20000184 	.word	0x20000184
 80086bc:	200038e4 	.word	0x200038e4
 80086c0:	0801e940 	.word	0x0801e940
 80086c4:	20006d80 	.word	0x20006d80
 80086c8:	200045f4 	.word	0x200045f4
 80086cc:	0801e94c 	.word	0x0801e94c
 80086d0:	2000430c 	.word	0x2000430c
 80086d4:	0801e958 	.word	0x0801e958
			if(uart2done)break;
 80086d8:	bf00      	nop
		}
	uart2done = false;
 80086da:	4b40      	ldr	r3, [pc, #256]	; (80087dc <sendMQTTMAIN+0x400>)
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]
	sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 80086e0:	4b3f      	ldr	r3, [pc, #252]	; (80087e0 <sendMQTTMAIN+0x404>)
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	4b3f      	ldr	r3, [pc, #252]	; (80087e4 <sendMQTTMAIN+0x408>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	493f      	ldr	r1, [pc, #252]	; (80087e8 <sendMQTTMAIN+0x40c>)
 80086ec:	f013 fb74 	bl	801bdd8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 80086f0:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <sendMQTTMAIN+0x404>)
 80086f2:	681c      	ldr	r4, [r3, #0]
 80086f4:	4b3a      	ldr	r3, [pc, #232]	; (80087e0 <sendMQTTMAIN+0x404>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7f7 fd73 	bl	80001e4 <strlen>
 80086fe:	4603      	mov	r3, r0
 8008700:	b29a      	uxth	r2, r3
 8008702:	23ff      	movs	r3, #255	; 0xff
 8008704:	4621      	mov	r1, r4
 8008706:	4839      	ldr	r0, [pc, #228]	; (80087ec <sendMQTTMAIN+0x410>)
 8008708:	f00b fbc0 	bl	8013e8c <HAL_UART_Transmit>
	for(int y=0;y<20;y++){
 800870c:	2300      	movs	r3, #0
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	e009      	b.n	8008726 <sendMQTTMAIN+0x34a>
		osDelay(200);
 8008712:	20c8      	movs	r0, #200	; 0xc8
 8008714:	f00f ff90 	bl	8018638 <osDelay>
		if(uart2done)break;
 8008718:	4b30      	ldr	r3, [pc, #192]	; (80087dc <sendMQTTMAIN+0x400>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <sendMQTTMAIN+0x352>
	for(int y=0;y<20;y++){
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3301      	adds	r3, #1
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b13      	cmp	r3, #19
 800872a:	ddf2      	ble.n	8008712 <sendMQTTMAIN+0x336>
 800872c:	e000      	b.n	8008730 <sendMQTTMAIN+0x354>
		if(uart2done)break;
 800872e:	bf00      	nop
	}
	uart2done = false;
 8008730:	4b2a      	ldr	r3, [pc, #168]	; (80087dc <sendMQTTMAIN+0x400>)
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
		printf("mydata: %s\r\n",mydata);
 8008736:	492e      	ldr	r1, [pc, #184]	; (80087f0 <sendMQTTMAIN+0x414>)
 8008738:	482e      	ldr	r0, [pc, #184]	; (80087f4 <sendMQTTMAIN+0x418>)
 800873a:	f013 fac1 	bl	801bcc0 <iprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 800873e:	4b29      	ldr	r3, [pc, #164]	; (80087e4 <sendMQTTMAIN+0x408>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008748:	4929      	ldr	r1, [pc, #164]	; (80087f0 <sendMQTTMAIN+0x414>)
 800874a:	4828      	ldr	r0, [pc, #160]	; (80087ec <sendMQTTMAIN+0x410>)
 800874c:	f00b fb9e 	bl	8013e8c <HAL_UART_Transmit>
		for(int y=0;y<20;y++){
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e009      	b.n	800876a <sendMQTTMAIN+0x38e>
			osDelay(200);
 8008756:	20c8      	movs	r0, #200	; 0xc8
 8008758:	f00f ff6e 	bl	8018638 <osDelay>
			if(uart2done)break;
 800875c:	4b1f      	ldr	r3, [pc, #124]	; (80087dc <sendMQTTMAIN+0x400>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <sendMQTTMAIN+0x396>
		for(int y=0;y<20;y++){
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b13      	cmp	r3, #19
 800876e:	ddf2      	ble.n	8008756 <sendMQTTMAIN+0x37a>
 8008770:	e000      	b.n	8008774 <sendMQTTMAIN+0x398>
			if(uart2done)break;
 8008772:	bf00      	nop
		}
	uart2done = false;
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <sendMQTTMAIN+0x400>)
 8008776:	2200      	movs	r2, #0
 8008778:	701a      	strb	r2, [r3, #0]
//		SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
		SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	2119      	movs	r1, #25
 800877e:	481e      	ldr	r0, [pc, #120]	; (80087f8 <sendMQTTMAIN+0x41c>)
 8008780:	f7ff f84a 	bl	8007818 <SerialATprintln>
		for(int i=0;i<20;i++){
 8008784:	2300      	movs	r3, #0
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	e009      	b.n	800879e <sendMQTTMAIN+0x3c2>
			osDelay(200);
 800878a:	20c8      	movs	r0, #200	; 0xc8
 800878c:	f00f ff54 	bl	8018638 <osDelay>
			if(uart2done)break;
 8008790:	4b12      	ldr	r3, [pc, #72]	; (80087dc <sendMQTTMAIN+0x400>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <sendMQTTMAIN+0x3ca>
		for(int i=0;i<20;i++){
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3301      	adds	r3, #1
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b13      	cmp	r3, #19
 80087a2:	ddf2      	ble.n	800878a <sendMQTTMAIN+0x3ae>
 80087a4:	e000      	b.n	80087a8 <sendMQTTMAIN+0x3cc>
			if(uart2done)break;
 80087a6:	bf00      	nop
		}
	// change cnmp to 2 (nbiot)
		uart2done = false;
 80087a8:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <sendMQTTMAIN+0x400>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
		SerialATprintln("AT+CNMP=2", 9, 0xff);
 80087ae:	22ff      	movs	r2, #255	; 0xff
 80087b0:	2109      	movs	r1, #9
 80087b2:	4812      	ldr	r0, [pc, #72]	; (80087fc <sendMQTTMAIN+0x420>)
 80087b4:	f7ff f830 	bl	8007818 <SerialATprintln>
		osDelay(2000);
 80087b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087bc:	f00f ff3c 	bl	8018638 <osDelay>
		SerialATprintln("AT+CNMP?", 8, 0xff);
 80087c0:	22ff      	movs	r2, #255	; 0xff
 80087c2:	2108      	movs	r1, #8
 80087c4:	480e      	ldr	r0, [pc, #56]	; (8008800 <sendMQTTMAIN+0x424>)
 80087c6:	f7ff f827 	bl	8007818 <SerialATprintln>
		osDelay(2000);
 80087ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087ce:	f00f ff33 	bl	8018638 <osDelay>
}
 80087d2:	bf00      	nop
 80087d4:	373c      	adds	r7, #60	; 0x3c
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd90      	pop	{r4, r7, pc}
 80087da:	bf00      	nop
 80087dc:	20003fe4 	.word	0x20003fe4
 80087e0:	20004308 	.word	0x20004308
 80087e4:	20009124 	.word	0x20009124
 80087e8:	0801e974 	.word	0x0801e974
 80087ec:	200038e4 	.word	0x200038e4
 80087f0:	200046c8 	.word	0x200046c8
 80087f4:	0801e998 	.word	0x0801e998
 80087f8:	0801e8d8 	.word	0x0801e8d8
 80087fc:	0801e9a8 	.word	0x0801e9a8
 8008800:	0801e778 	.word	0x0801e778

08008804 <sendMQTTpwr>:

void sendMQTTpwr(){
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b08f      	sub	sp, #60	; 0x3c
 8008808:	af00      	add	r7, sp, #0
	bufclear();
 800880a:	f7ff fd69 	bl	80082e0 <bufclear>
//	temp_data=malloc(200);
//	temp_data2=malloc(50);
	memset((char *)mydata,0,1100);
 800880e:	f240 424c 	movw	r2, #1100	; 0x44c
 8008812:	2100      	movs	r1, #0
 8008814:	48a9      	ldr	r0, [pc, #676]	; (8008abc <sendMQTTpwr+0x2b8>)
 8008816:	f012 fd46 	bl	801b2a6 <memset>
	uart2done = false;
 800881a:	4ba9      	ldr	r3, [pc, #676]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
		sprintf(uart2_at,"AT+CPSI?");
 8008820:	4aa8      	ldr	r2, [pc, #672]	; (8008ac4 <sendMQTTpwr+0x2c0>)
 8008822:	4ba9      	ldr	r3, [pc, #676]	; (8008ac8 <sendMQTTpwr+0x2c4>)
 8008824:	cb03      	ldmia	r3!, {r0, r1}
 8008826:	6010      	str	r0, [r2, #0]
 8008828:	6051      	str	r1, [r2, #4]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	7213      	strb	r3, [r2, #8]
		printf(uart2_at);
 800882e:	48a5      	ldr	r0, [pc, #660]	; (8008ac4 <sendMQTTpwr+0x2c0>)
 8008830:	f013 fa46 	bl	801bcc0 <iprintf>
		SerialATprintln("AT+CPSI?", 8, 0xff);
 8008834:	22ff      	movs	r2, #255	; 0xff
 8008836:	2108      	movs	r1, #8
 8008838:	48a3      	ldr	r0, [pc, #652]	; (8008ac8 <sendMQTTpwr+0x2c4>)
 800883a:	f7fe ffed 	bl	8007818 <SerialATprintln>
		osDelay(4000);
 800883e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008842:	f00f fef9 	bl	8018638 <osDelay>
		for(int y=0;y<40;y++){
 8008846:	2300      	movs	r3, #0
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
 800884a:	e009      	b.n	8008860 <sendMQTTpwr+0x5c>
					osDelay(200);
 800884c:	20c8      	movs	r0, #200	; 0xc8
 800884e:	f00f fef3 	bl	8018638 <osDelay>
					if(uart2done)break;
 8008852:	4b9b      	ldr	r3, [pc, #620]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <sendMQTTpwr+0x64>
		for(int y=0;y<40;y++){
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	3301      	adds	r3, #1
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
 8008860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008862:	2b27      	cmp	r3, #39	; 0x27
 8008864:	ddf2      	ble.n	800884c <sendMQTTpwr+0x48>
 8008866:	e000      	b.n	800886a <sendMQTTpwr+0x66>
					if(uart2done)break;
 8008868:	bf00      	nop
				}
		int cmpint=strcmp(networkstr," GSM");
 800886a:	4b98      	ldr	r3, [pc, #608]	; (8008acc <sendMQTTpwr+0x2c8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4998      	ldr	r1, [pc, #608]	; (8008ad0 <sendMQTTpwr+0x2cc>)
 8008870:	4618      	mov	r0, r3
 8008872:	f7f7 fcad 	bl	80001d0 <strcmp>
 8008876:	6038      	str	r0, [r7, #0]
			if(cmpint != 0){
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d028      	beq.n	80088d0 <sendMQTTpwr+0xcc>
				if(signal<-115){
 800887e:	4b95      	ldr	r3, [pc, #596]	; (8008ad4 <sendMQTTpwr+0x2d0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f113 0f73 	cmn.w	r3, #115	; 0x73
 8008886:	da5c      	bge.n	8008942 <sendMQTTpwr+0x13e>
						SerialATprintln("AT+CNMP=13", 10, 0xff);
 8008888:	22ff      	movs	r2, #255	; 0xff
 800888a:	210a      	movs	r1, #10
 800888c:	4892      	ldr	r0, [pc, #584]	; (8008ad8 <sendMQTTpwr+0x2d4>)
 800888e:	f7fe ffc3 	bl	8007818 <SerialATprintln>
						osDelay(2000);
 8008892:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008896:	f00f fecf 	bl	8018638 <osDelay>
						reset_mqtt();
 800889a:	f000 fdf9 	bl	8009490 <reset_mqtt>
						SerialATprintln("AT+SMCONN",9,0xff);
 800889e:	22ff      	movs	r2, #255	; 0xff
 80088a0:	2109      	movs	r1, #9
 80088a2:	488e      	ldr	r0, [pc, #568]	; (8008adc <sendMQTTpwr+0x2d8>)
 80088a4:	f7fe ffb8 	bl	8007818 <SerialATprintln>
						uart2done = false;
 80088a8:	4b85      	ldr	r3, [pc, #532]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]
						for(int y=0;y<30;y++){
 80088ae:	2300      	movs	r3, #0
 80088b0:	633b      	str	r3, [r7, #48]	; 0x30
 80088b2:	e009      	b.n	80088c8 <sendMQTTpwr+0xc4>
							osDelay(200);
 80088b4:	20c8      	movs	r0, #200	; 0xc8
 80088b6:	f00f febf 	bl	8018638 <osDelay>
							if(uart2done)break;
 80088ba:	4b81      	ldr	r3, [pc, #516]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d13c      	bne.n	800893c <sendMQTTpwr+0x138>
						for(int y=0;y<30;y++){
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	3301      	adds	r3, #1
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2b1d      	cmp	r3, #29
 80088cc:	ddf2      	ble.n	80088b4 <sendMQTTpwr+0xb0>
 80088ce:	e038      	b.n	8008942 <sendMQTTpwr+0x13e>
						}
					}
			}
			else {
				if(signal<=-100){
 80088d0:	4b80      	ldr	r3, [pc, #512]	; (8008ad4 <sendMQTTpwr+0x2d0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80088d8:	da33      	bge.n	8008942 <sendMQTTpwr+0x13e>
					for(int z=0;z<3;z++){
 80088da:	2300      	movs	r3, #0
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088de:	e029      	b.n	8008934 <sendMQTTpwr+0x130>
						printf("modem reboot\n");
 80088e0:	487f      	ldr	r0, [pc, #508]	; (8008ae0 <sendMQTTpwr+0x2dc>)
 80088e2:	f013 fa61 	bl	801bda8 <puts>
						modem_reset_rtos();
 80088e6:	f000 fe95 	bl	8009614 <modem_reset_rtos>
						reset_mqtt();
 80088ea:	f000 fdd1 	bl	8009490 <reset_mqtt>
						SerialATprintln("AT+CPSI?", 8, 0xff);
 80088ee:	22ff      	movs	r2, #255	; 0xff
 80088f0:	2108      	movs	r1, #8
 80088f2:	4875      	ldr	r0, [pc, #468]	; (8008ac8 <sendMQTTpwr+0x2c4>)
 80088f4:	f7fe ff90 	bl	8007818 <SerialATprintln>
						osDelay(2000);
 80088f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80088fc:	f00f fe9c 	bl	8018638 <osDelay>
						for(int y=0;y<30;y++){
 8008900:	2300      	movs	r3, #0
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
 8008904:	e009      	b.n	800891a <sendMQTTpwr+0x116>
							osDelay(200);
 8008906:	20c8      	movs	r0, #200	; 0xc8
 8008908:	f00f fe96 	bl	8018638 <osDelay>
							if(uart2done)break;
 800890c:	4b6c      	ldr	r3, [pc, #432]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <sendMQTTpwr+0x11e>
						for(int y=0;y<30;y++){
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	3301      	adds	r3, #1
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	2b1d      	cmp	r3, #29
 800891e:	ddf2      	ble.n	8008906 <sendMQTTpwr+0x102>
 8008920:	e000      	b.n	8008924 <sendMQTTpwr+0x120>
							if(uart2done)break;
 8008922:	bf00      	nop
						}
						if(signal > -100) break;
 8008924:	4b6b      	ldr	r3, [pc, #428]	; (8008ad4 <sendMQTTpwr+0x2d0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800892c:	da08      	bge.n	8008940 <sendMQTTpwr+0x13c>
					for(int z=0;z<3;z++){
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	3301      	adds	r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	2b02      	cmp	r3, #2
 8008938:	ddd2      	ble.n	80088e0 <sendMQTTpwr+0xdc>
 800893a:	e002      	b.n	8008942 <sendMQTTpwr+0x13e>
							if(uart2done)break;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <sendMQTTpwr+0x13e>
						if(signal > -100) break;
 8008940:	bf00      	nop
					}

				}
			}
		SerialATprintln("AT+CNMP?", 8, 0xff);
 8008942:	22ff      	movs	r2, #255	; 0xff
 8008944:	2108      	movs	r1, #8
 8008946:	4867      	ldr	r0, [pc, #412]	; (8008ae4 <sendMQTTpwr+0x2e0>)
 8008948:	f7fe ff66 	bl	8007818 <SerialATprintln>
		osDelay(2000);
 800894c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008950:	f00f fe72 	bl	8018638 <osDelay>
	memset((char *)mydata,0,1100);
 8008954:	f240 424c 	movw	r2, #1100	; 0x44c
 8008958:	2100      	movs	r1, #0
 800895a:	4858      	ldr	r0, [pc, #352]	; (8008abc <sendMQTTpwr+0x2b8>)
 800895c:	f012 fca3 	bl	801b2a6 <memset>
	cmpint = strcmp(snMeter, "00000000");
 8008960:	4b61      	ldr	r3, [pc, #388]	; (8008ae8 <sendMQTTpwr+0x2e4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4961      	ldr	r1, [pc, #388]	; (8008aec <sendMQTTpwr+0x2e8>)
 8008966:	4618      	mov	r0, r3
 8008968:	f7f7 fc32 	bl	80001d0 <strcmp>
 800896c:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <sendMQTTpwr+0x174>
 8008974:	f002 fe7a 	bl	800b66c <read_sn_edmi>
	if(typemeter==6) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\"",snMeter);
 8008978:	4b5d      	ldr	r3, [pc, #372]	; (8008af0 <sendMQTTpwr+0x2ec>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b06      	cmp	r3, #6
 800897e:	d108      	bne.n	8008992 <sendMQTTpwr+0x18e>
 8008980:	4b5c      	ldr	r3, [pc, #368]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4b58      	ldr	r3, [pc, #352]	; (8008ae8 <sendMQTTpwr+0x2e4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	495b      	ldr	r1, [pc, #364]	; (8008af8 <sendMQTTpwr+0x2f4>)
 800898c:	f013 fa24 	bl	801bdd8 <siprintf>
 8008990:	e007      	b.n	80089a2 <sendMQTTpwr+0x19e>
	else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\"",snMeter);
 8008992:	4b58      	ldr	r3, [pc, #352]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	4b54      	ldr	r3, [pc, #336]	; (8008ae8 <sendMQTTpwr+0x2e4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	4957      	ldr	r1, [pc, #348]	; (8008afc <sendMQTTpwr+0x2f8>)
 800899e:	f013 fa1b 	bl	801bdd8 <siprintf>
	sprintf(temp_data2,",\"net\":\"");
 80089a2:	4b57      	ldr	r3, [pc, #348]	; (8008b00 <sendMQTTpwr+0x2fc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4957      	ldr	r1, [pc, #348]	; (8008b04 <sendMQTTpwr+0x300>)
 80089a8:	461a      	mov	r2, r3
 80089aa:	460b      	mov	r3, r1
 80089ac:	cb03      	ldmia	r3!, {r0, r1}
 80089ae:	6010      	str	r0, [r2, #0]
 80089b0:	6051      	str	r1, [r2, #4]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	7213      	strb	r3, [r2, #8]
	strcat(temp_data, temp_data2);
 80089b6:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <sendMQTTpwr+0x2f0>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b51      	ldr	r3, [pc, #324]	; (8008b00 <sendMQTTpwr+0x2fc>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f013 fa29 	bl	801be18 <strcat>
	strcat(temp_data, networkstr);
 80089c6:	4b4b      	ldr	r3, [pc, #300]	; (8008af4 <sendMQTTpwr+0x2f0>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b40      	ldr	r3, [pc, #256]	; (8008acc <sendMQTTpwr+0x2c8>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f013 fa21 	bl	801be18 <strcat>
	strcat(temp_data, "\"");
 80089d6:	4b47      	ldr	r3, [pc, #284]	; (8008af4 <sendMQTTpwr+0x2f0>)
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	4620      	mov	r0, r4
 80089dc:	f7f7 fc02 	bl	80001e4 <strlen>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4423      	add	r3, r4
 80089e4:	4948      	ldr	r1, [pc, #288]	; (8008b08 <sendMQTTpwr+0x304>)
 80089e6:	461a      	mov	r2, r3
 80089e8:	460b      	mov	r3, r1
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	8013      	strh	r3, [r2, #0]
	sprintf(temp_data2,",\"sig\":\"%d\"",signal);
 80089ee:	4b44      	ldr	r3, [pc, #272]	; (8008b00 <sendMQTTpwr+0x2fc>)
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	4b38      	ldr	r3, [pc, #224]	; (8008ad4 <sendMQTTpwr+0x2d0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4944      	ldr	r1, [pc, #272]	; (8008b0c <sendMQTTpwr+0x308>)
 80089fa:	f013 f9ed 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 80089fe:	4b3d      	ldr	r3, [pc, #244]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b3f      	ldr	r3, [pc, #252]	; (8008b00 <sendMQTTpwr+0x2fc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f013 fa05 	bl	801be18 <strcat>
	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 8008a0e:	4b3c      	ldr	r3, [pc, #240]	; (8008b00 <sendMQTTpwr+0x2fc>)
 8008a10:	681c      	ldr	r4, [r3, #0]
 8008a12:	4b3f      	ldr	r3, [pc, #252]	; (8008b10 <sendMQTTpwr+0x30c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7f7 fda6 	bl	8000568 <__aeabi_f2d>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	493c      	ldr	r1, [pc, #240]	; (8008b14 <sendMQTTpwr+0x310>)
 8008a22:	4620      	mov	r0, r4
 8008a24:	f013 f9d8 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 8008a28:	4b32      	ldr	r3, [pc, #200]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <sendMQTTpwr+0x2fc>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f013 f9f0 	bl	801be18 <strcat>
	sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <sendMQTTpwr+0x2fc>)
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	4b36      	ldr	r3, [pc, #216]	; (8008b18 <sendMQTTpwr+0x314>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	4936      	ldr	r1, [pc, #216]	; (8008b1c <sendMQTTpwr+0x318>)
 8008a44:	f013 f9c8 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 8008a48:	4b2a      	ldr	r3, [pc, #168]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <sendMQTTpwr+0x2fc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f013 f9e0 	bl	801be18 <strcat>
	strcpy(mydata,temp_data);
 8008a58:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <sendMQTTpwr+0x2f0>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4817      	ldr	r0, [pc, #92]	; (8008abc <sendMQTTpwr+0x2b8>)
 8008a60:	f013 f9e9 	bl	801be36 <strcpy>
	uart2done = false;
 8008a64:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
	memset(ATSMPUB,0,48);
 8008a6a:	4b2d      	ldr	r3, [pc, #180]	; (8008b20 <sendMQTTpwr+0x31c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2230      	movs	r2, #48	; 0x30
 8008a70:	2100      	movs	r1, #0
 8008a72:	4618      	mov	r0, r3
 8008a74:	f012 fc17 	bl	801b2a6 <memset>
	memset(smstatestr,0,11);
 8008a78:	4b2a      	ldr	r3, [pc, #168]	; (8008b24 <sendMQTTpwr+0x320>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	220b      	movs	r2, #11
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f012 fc10 	bl	801b2a6 <memset>
	len_mydata = bufsizechararray(mydata);
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <sendMQTTpwr+0x2b8>)
 8008a88:	f7ff fc12 	bl	80082b0 <bufsizechararray>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <sendMQTTpwr+0x324>)
 8008a90:	601a      	str	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
	for(int i=0;i<10;i++){
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
 8008a96:	e009      	b.n	8008aac <sendMQTTpwr+0x2a8>
			osDelay(200);
 8008a98:	20c8      	movs	r0, #200	; 0xc8
 8008a9a:	f00f fdcd 	bl	8018638 <osDelay>
			if(uart2done)break;
 8008a9e:	4b08      	ldr	r3, [pc, #32]	; (8008ac0 <sendMQTTpwr+0x2bc>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <sendMQTTpwr+0x2b0>
	for(int i=0;i<10;i++){
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	ddf2      	ble.n	8008a98 <sendMQTTpwr+0x294>
 8008ab2:	e000      	b.n	8008ab6 <sendMQTTpwr+0x2b2>
			if(uart2done)break;
 8008ab4:	bf00      	nop
		}
	for(int z=0;z<3;z++){
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	623b      	str	r3, [r7, #32]
 8008aba:	e099      	b.n	8008bf0 <sendMQTTpwr+0x3ec>
 8008abc:	200046c8 	.word	0x200046c8
 8008ac0:	20003fe4 	.word	0x20003fe4
 8008ac4:	20003fd0 	.word	0x20003fd0
 8008ac8:	0801e910 	.word	0x0801e910
 8008acc:	20005314 	.word	0x20005314
 8008ad0:	0801e91c 	.word	0x0801e91c
 8008ad4:	20007244 	.word	0x20007244
 8008ad8:	0801e924 	.word	0x0801e924
 8008adc:	0801e89c 	.word	0x0801e89c
 8008ae0:	0801e930 	.word	0x0801e930
 8008ae4:	0801e778 	.word	0x0801e778
 8008ae8:	20000188 	.word	0x20000188
 8008aec:	0801e9b4 	.word	0x0801e9b4
 8008af0:	2000b50c 	.word	0x2000b50c
 8008af4:	200045f4 	.word	0x200045f4
 8008af8:	0801e9c0 	.word	0x0801e9c0
 8008afc:	0801e9e8 	.word	0x0801e9e8
 8008b00:	20008a00 	.word	0x20008a00
 8008b04:	0801ea10 	.word	0x0801ea10
 8008b08:	0801e4fc 	.word	0x0801e4fc
 8008b0c:	0801ea1c 	.word	0x0801ea1c
 8008b10:	20005770 	.word	0x20005770
 8008b14:	0801ea28 	.word	0x0801ea28
 8008b18:	2000b510 	.word	0x2000b510
 8008b1c:	0801ea38 	.word	0x0801ea38
 8008b20:	20004308 	.word	0x20004308
 8008b24:	2000b000 	.word	0x2000b000
 8008b28:	20009124 	.word	0x20009124
			uart2done = false;
 8008b2c:	4b8d      	ldr	r3, [pc, #564]	; (8008d64 <sendMQTTpwr+0x560>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 8008b32:	4b8d      	ldr	r3, [pc, #564]	; (8008d68 <sendMQTTpwr+0x564>)
 8008b34:	681c      	ldr	r4, [r3, #0]
 8008b36:	4b8c      	ldr	r3, [pc, #560]	; (8008d68 <sendMQTTpwr+0x564>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f7 fb52 	bl	80001e4 <strlen>
 8008b40:	4603      	mov	r3, r0
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	23ff      	movs	r3, #255	; 0xff
 8008b46:	4621      	mov	r1, r4
 8008b48:	4888      	ldr	r0, [pc, #544]	; (8008d6c <sendMQTTpwr+0x568>)
 8008b4a:	f00b f99f 	bl	8013e8c <HAL_UART_Transmit>
			for(int y=0;y<30;y++){
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	e009      	b.n	8008b68 <sendMQTTpwr+0x364>
					osDelay(200);
 8008b54:	20c8      	movs	r0, #200	; 0xc8
 8008b56:	f00f fd6f 	bl	8018638 <osDelay>
					if(uart2done)break;
 8008b5a:	4b82      	ldr	r3, [pc, #520]	; (8008d64 <sendMQTTpwr+0x560>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <sendMQTTpwr+0x36c>
			for(int y=0;y<30;y++){
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	3301      	adds	r3, #1
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b1d      	cmp	r3, #29
 8008b6c:	ddf2      	ble.n	8008b54 <sendMQTTpwr+0x350>
 8008b6e:	e000      	b.n	8008b72 <sendMQTTpwr+0x36e>
					if(uart2done)break;
 8008b70:	bf00      	nop
				}
			temp_data =strstr((char *)buffer2,"+SMSTATE:");
 8008b72:	497f      	ldr	r1, [pc, #508]	; (8008d70 <sendMQTTpwr+0x56c>)
 8008b74:	487f      	ldr	r0, [pc, #508]	; (8008d74 <sendMQTTpwr+0x570>)
 8008b76:	f013 f966 	bl	801be46 <strstr>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b7e      	ldr	r3, [pc, #504]	; (8008d78 <sendMQTTpwr+0x574>)
 8008b7e:	601a      	str	r2, [r3, #0]
			memcpy(smstatestr,temp_data,11);
 8008b80:	4b7e      	ldr	r3, [pc, #504]	; (8008d7c <sendMQTTpwr+0x578>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	4b7c      	ldr	r3, [pc, #496]	; (8008d78 <sendMQTTpwr+0x574>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	220b      	movs	r2, #11
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f012 fb80 	bl	801b290 <memcpy>
			smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 8008b90:	4b7a      	ldr	r3, [pc, #488]	; (8008d7c <sendMQTTpwr+0x578>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	497a      	ldr	r1, [pc, #488]	; (8008d80 <sendMQTTpwr+0x57c>)
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7f7 fb1a 	bl	80001d0 <strcmp>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	4b78      	ldr	r3, [pc, #480]	; (8008d84 <sendMQTTpwr+0x580>)
 8008ba2:	701a      	strb	r2, [r3, #0]
			uart2done = false;
 8008ba4:	4b6f      	ldr	r3, [pc, #444]	; (8008d64 <sendMQTTpwr+0x560>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
			if(smstateint!=0) break;
 8008baa:	4b76      	ldr	r3, [pc, #472]	; (8008d84 <sendMQTTpwr+0x580>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d122      	bne.n	8008bf8 <sendMQTTpwr+0x3f4>
			reset_mqtt();
 8008bb2:	f000 fc6d 	bl	8009490 <reset_mqtt>
			SerialATprintln("AT+SMCONN",9,0xff);
 8008bb6:	22ff      	movs	r2, #255	; 0xff
 8008bb8:	2109      	movs	r1, #9
 8008bba:	4873      	ldr	r0, [pc, #460]	; (8008d88 <sendMQTTpwr+0x584>)
 8008bbc:	f7fe fe2c 	bl	8007818 <SerialATprintln>
			uart2done = false;
 8008bc0:	4b68      	ldr	r3, [pc, #416]	; (8008d64 <sendMQTTpwr+0x560>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
			for(int y=0;y<30;y++){
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e009      	b.n	8008be0 <sendMQTTpwr+0x3dc>
				osDelay(200);
 8008bcc:	20c8      	movs	r0, #200	; 0xc8
 8008bce:	f00f fd33 	bl	8018638 <osDelay>
				if(uart2done)break;
 8008bd2:	4b64      	ldr	r3, [pc, #400]	; (8008d64 <sendMQTTpwr+0x560>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <sendMQTTpwr+0x3e4>
			for(int y=0;y<30;y++){
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b1d      	cmp	r3, #29
 8008be4:	ddf2      	ble.n	8008bcc <sendMQTTpwr+0x3c8>
 8008be6:	e000      	b.n	8008bea <sendMQTTpwr+0x3e6>
				if(uart2done)break;
 8008be8:	bf00      	nop
	for(int z=0;z<3;z++){
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	3301      	adds	r3, #1
 8008bee:	623b      	str	r3, [r7, #32]
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	dd9a      	ble.n	8008b2c <sendMQTTpwr+0x328>
 8008bf6:	e000      	b.n	8008bfa <sendMQTTpwr+0x3f6>
			if(smstateint!=0) break;
 8008bf8:	bf00      	nop
			}
		}
		uart2done = false;
 8008bfa:	4b5a      	ldr	r3, [pc, #360]	; (8008d64 <sendMQTTpwr+0x560>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
		SerialATprintln("AT+SMCONN",9,0xff);
 8008c00:	22ff      	movs	r2, #255	; 0xff
 8008c02:	2109      	movs	r1, #9
 8008c04:	4860      	ldr	r0, [pc, #384]	; (8008d88 <sendMQTTpwr+0x584>)
 8008c06:	f7fe fe07 	bl	8007818 <SerialATprintln>
		for(int i=0;i<20;i++){
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e009      	b.n	8008c24 <sendMQTTpwr+0x420>
			osDelay(200);
 8008c10:	20c8      	movs	r0, #200	; 0xc8
 8008c12:	f00f fd11 	bl	8018638 <osDelay>
			if(uart2done)break;
 8008c16:	4b53      	ldr	r3, [pc, #332]	; (8008d64 <sendMQTTpwr+0x560>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <sendMQTTpwr+0x428>
		for(int i=0;i<20;i++){
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	3301      	adds	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b13      	cmp	r3, #19
 8008c28:	ddf2      	ble.n	8008c10 <sendMQTTpwr+0x40c>
 8008c2a:	e000      	b.n	8008c2e <sendMQTTpwr+0x42a>
			if(uart2done)break;
 8008c2c:	bf00      	nop
		}
//	uint8_t test = strcmp(smstatestr,"+SMSTATE: 1");
	uart2done = false;
 8008c2e:	4b4d      	ldr	r3, [pc, #308]	; (8008d64 <sendMQTTpwr+0x560>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
//	SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	2119      	movs	r1, #25
 8008c38:	4854      	ldr	r0, [pc, #336]	; (8008d8c <sendMQTTpwr+0x588>)
 8008c3a:	f7fe fded 	bl	8007818 <SerialATprintln>
	for(int i=0;i<25;i++){
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	e009      	b.n	8008c58 <sendMQTTpwr+0x454>
		osDelay(200);
 8008c44:	20c8      	movs	r0, #200	; 0xc8
 8008c46:	f00f fcf7 	bl	8018638 <osDelay>
		if(uart2done)break;
 8008c4a:	4b46      	ldr	r3, [pc, #280]	; (8008d64 <sendMQTTpwr+0x560>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <sendMQTTpwr+0x45c>
	for(int i=0;i<25;i++){
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3301      	adds	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	2b18      	cmp	r3, #24
 8008c5c:	ddf2      	ble.n	8008c44 <sendMQTTpwr+0x440>
 8008c5e:	e000      	b.n	8008c62 <sendMQTTpwr+0x45e>
		if(uart2done)break;
 8008c60:	bf00      	nop
	}
	uart2done = false;
 8008c62:	4b40      	ldr	r3, [pc, #256]	; (8008d64 <sendMQTTpwr+0x560>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
	sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 8008c68:	4b49      	ldr	r3, [pc, #292]	; (8008d90 <sendMQTTpwr+0x58c>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4b49      	ldr	r3, [pc, #292]	; (8008d94 <sendMQTTpwr+0x590>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	4949      	ldr	r1, [pc, #292]	; (8008d98 <sendMQTTpwr+0x594>)
 8008c74:	f013 f8b0 	bl	801bdd8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 8008c78:	4b45      	ldr	r3, [pc, #276]	; (8008d90 <sendMQTTpwr+0x58c>)
 8008c7a:	681c      	ldr	r4, [r3, #0]
 8008c7c:	4b44      	ldr	r3, [pc, #272]	; (8008d90 <sendMQTTpwr+0x58c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f7 faaf 	bl	80001e4 <strlen>
 8008c86:	4603      	mov	r3, r0
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	23ff      	movs	r3, #255	; 0xff
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4837      	ldr	r0, [pc, #220]	; (8008d6c <sendMQTTpwr+0x568>)
 8008c90:	f00b f8fc 	bl	8013e8c <HAL_UART_Transmit>
	for(int y=0;y<20;y++){
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e009      	b.n	8008cae <sendMQTTpwr+0x4aa>
		osDelay(200);
 8008c9a:	20c8      	movs	r0, #200	; 0xc8
 8008c9c:	f00f fccc 	bl	8018638 <osDelay>
		if(uart2done)break;
 8008ca0:	4b30      	ldr	r3, [pc, #192]	; (8008d64 <sendMQTTpwr+0x560>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <sendMQTTpwr+0x4b2>
	for(int y=0;y<20;y++){
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3301      	adds	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b13      	cmp	r3, #19
 8008cb2:	ddf2      	ble.n	8008c9a <sendMQTTpwr+0x496>
 8008cb4:	e000      	b.n	8008cb8 <sendMQTTpwr+0x4b4>
		if(uart2done)break;
 8008cb6:	bf00      	nop
	}
	uart2done = false;
 8008cb8:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <sendMQTTpwr+0x560>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
		printf("mydata: %s\r\n",mydata);
 8008cbe:	4937      	ldr	r1, [pc, #220]	; (8008d9c <sendMQTTpwr+0x598>)
 8008cc0:	4837      	ldr	r0, [pc, #220]	; (8008da0 <sendMQTTpwr+0x59c>)
 8008cc2:	f012 fffd 	bl	801bcc0 <iprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <sendMQTTpwr+0x590>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008cd0:	4932      	ldr	r1, [pc, #200]	; (8008d9c <sendMQTTpwr+0x598>)
 8008cd2:	4826      	ldr	r0, [pc, #152]	; (8008d6c <sendMQTTpwr+0x568>)
 8008cd4:	f00b f8da 	bl	8013e8c <HAL_UART_Transmit>
		for(int y=0;y<20;y++){
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	e009      	b.n	8008cf2 <sendMQTTpwr+0x4ee>
			osDelay(200);
 8008cde:	20c8      	movs	r0, #200	; 0xc8
 8008ce0:	f00f fcaa 	bl	8018638 <osDelay>
			if(uart2done)break;
 8008ce4:	4b1f      	ldr	r3, [pc, #124]	; (8008d64 <sendMQTTpwr+0x560>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <sendMQTTpwr+0x4f6>
		for(int y=0;y<20;y++){
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b13      	cmp	r3, #19
 8008cf6:	ddf2      	ble.n	8008cde <sendMQTTpwr+0x4da>
 8008cf8:	e000      	b.n	8008cfc <sendMQTTpwr+0x4f8>
			if(uart2done)break;
 8008cfa:	bf00      	nop
		}
	uart2done = false;
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <sendMQTTpwr+0x560>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
//	SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 8008d02:	22ff      	movs	r2, #255	; 0xff
 8008d04:	2119      	movs	r1, #25
 8008d06:	4827      	ldr	r0, [pc, #156]	; (8008da4 <sendMQTTpwr+0x5a0>)
 8008d08:	f7fe fd86 	bl	8007818 <SerialATprintln>
	for(int i=0;i<20;i++){
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	607b      	str	r3, [r7, #4]
 8008d10:	e009      	b.n	8008d26 <sendMQTTpwr+0x522>
		osDelay(200);
 8008d12:	20c8      	movs	r0, #200	; 0xc8
 8008d14:	f00f fc90 	bl	8018638 <osDelay>
		if(uart2done)break;
 8008d18:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <sendMQTTpwr+0x560>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <sendMQTTpwr+0x52a>
	for(int i=0;i<20;i++){
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3301      	adds	r3, #1
 8008d24:	607b      	str	r3, [r7, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b13      	cmp	r3, #19
 8008d2a:	ddf2      	ble.n	8008d12 <sendMQTTpwr+0x50e>
 8008d2c:	e000      	b.n	8008d30 <sendMQTTpwr+0x52c>
		if(uart2done)break;
 8008d2e:	bf00      	nop
	}
	// change cnmp to 2 (nbiot)
	uart2done = false;
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <sendMQTTpwr+0x560>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+CNMP=2", 9, 0xff);
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	2109      	movs	r1, #9
 8008d3a:	481b      	ldr	r0, [pc, #108]	; (8008da8 <sendMQTTpwr+0x5a4>)
 8008d3c:	f7fe fd6c 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 8008d40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d44:	f00f fc78 	bl	8018638 <osDelay>
	SerialATprintln("AT+CNMP?", 8, 0xff);
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	2108      	movs	r1, #8
 8008d4c:	4817      	ldr	r0, [pc, #92]	; (8008dac <sendMQTTpwr+0x5a8>)
 8008d4e:	f7fe fd63 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 8008d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d56:	f00f fc6f 	bl	8018638 <osDelay>
//	osDelay(2000);
}
 8008d5a:	bf00      	nop
 8008d5c:	373c      	adds	r7, #60	; 0x3c
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd90      	pop	{r4, r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20003fe4 	.word	0x20003fe4
 8008d68:	20000184 	.word	0x20000184
 8008d6c:	200038e4 	.word	0x200038e4
 8008d70:	0801e940 	.word	0x0801e940
 8008d74:	20006d80 	.word	0x20006d80
 8008d78:	200045f4 	.word	0x200045f4
 8008d7c:	2000b000 	.word	0x2000b000
 8008d80:	0801e94c 	.word	0x0801e94c
 8008d84:	2000430c 	.word	0x2000430c
 8008d88:	0801e89c 	.word	0x0801e89c
 8008d8c:	0801e958 	.word	0x0801e958
 8008d90:	20004308 	.word	0x20004308
 8008d94:	20009124 	.word	0x20009124
 8008d98:	0801e974 	.word	0x0801e974
 8008d9c:	200046c8 	.word	0x200046c8
 8008da0:	0801e998 	.word	0x0801e998
 8008da4:	0801e8d8 	.word	0x0801e8d8
 8008da8:	0801e9a8 	.word	0x0801e9a8
 8008dac:	0801e778 	.word	0x0801e778

08008db0 <sendSimple>:

void sendSimple(){
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b08f      	sub	sp, #60	; 0x3c
 8008db4:	af00      	add	r7, sp, #0
	uart2done = false;
 8008db6:	4b6d      	ldr	r3, [pc, #436]	; (8008f6c <sendSimple+0x1bc>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
		sprintf(uart2_at,"AT+CPSI?");
 8008dbc:	4a6c      	ldr	r2, [pc, #432]	; (8008f70 <sendSimple+0x1c0>)
 8008dbe:	4b6d      	ldr	r3, [pc, #436]	; (8008f74 <sendSimple+0x1c4>)
 8008dc0:	cb03      	ldmia	r3!, {r0, r1}
 8008dc2:	6010      	str	r0, [r2, #0]
 8008dc4:	6051      	str	r1, [r2, #4]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7213      	strb	r3, [r2, #8]
		printf(uart2_at);
 8008dca:	4869      	ldr	r0, [pc, #420]	; (8008f70 <sendSimple+0x1c0>)
 8008dcc:	f012 ff78 	bl	801bcc0 <iprintf>
		SerialATprintln("AT+CPSI?", 8, 0xff);
 8008dd0:	22ff      	movs	r2, #255	; 0xff
 8008dd2:	2108      	movs	r1, #8
 8008dd4:	4867      	ldr	r0, [pc, #412]	; (8008f74 <sendSimple+0x1c4>)
 8008dd6:	f7fe fd1f 	bl	8007818 <SerialATprintln>
		osDelay(4000);
 8008dda:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8008dde:	f00f fc2b 	bl	8018638 <osDelay>
		for(int y=0;y<40;y++){
 8008de2:	2300      	movs	r3, #0
 8008de4:	637b      	str	r3, [r7, #52]	; 0x34
 8008de6:	e009      	b.n	8008dfc <sendSimple+0x4c>
					osDelay(200);
 8008de8:	20c8      	movs	r0, #200	; 0xc8
 8008dea:	f00f fc25 	bl	8018638 <osDelay>
					if(uart2done)break;
 8008dee:	4b5f      	ldr	r3, [pc, #380]	; (8008f6c <sendSimple+0x1bc>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <sendSimple+0x54>
		for(int y=0;y<40;y++){
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df8:	3301      	adds	r3, #1
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	2b27      	cmp	r3, #39	; 0x27
 8008e00:	ddf2      	ble.n	8008de8 <sendSimple+0x38>
 8008e02:	e000      	b.n	8008e06 <sendSimple+0x56>
					if(uart2done)break;
 8008e04:	bf00      	nop
				}
		int cmpint=strcmp(networkstr," GSM");
 8008e06:	4b5c      	ldr	r3, [pc, #368]	; (8008f78 <sendSimple+0x1c8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	495c      	ldr	r1, [pc, #368]	; (8008f7c <sendSimple+0x1cc>)
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f7 f9df 	bl	80001d0 <strcmp>
 8008e12:	6078      	str	r0, [r7, #4]
					if(cmpint != 0){
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d028      	beq.n	8008e6c <sendSimple+0xbc>
						if(signal<-115){
 8008e1a:	4b59      	ldr	r3, [pc, #356]	; (8008f80 <sendSimple+0x1d0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f113 0f73 	cmn.w	r3, #115	; 0x73
 8008e22:	da5c      	bge.n	8008ede <sendSimple+0x12e>
								SerialATprintln("AT+CNMP=13", 10, 0xff);
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	210a      	movs	r1, #10
 8008e28:	4856      	ldr	r0, [pc, #344]	; (8008f84 <sendSimple+0x1d4>)
 8008e2a:	f7fe fcf5 	bl	8007818 <SerialATprintln>
								osDelay(2000);
 8008e2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008e32:	f00f fc01 	bl	8018638 <osDelay>
								reset_mqtt();
 8008e36:	f000 fb2b 	bl	8009490 <reset_mqtt>
								SerialATprintln("AT+SMCONN",9,0xff);
 8008e3a:	22ff      	movs	r2, #255	; 0xff
 8008e3c:	2109      	movs	r1, #9
 8008e3e:	4852      	ldr	r0, [pc, #328]	; (8008f88 <sendSimple+0x1d8>)
 8008e40:	f7fe fcea 	bl	8007818 <SerialATprintln>
								uart2done = false;
 8008e44:	4b49      	ldr	r3, [pc, #292]	; (8008f6c <sendSimple+0x1bc>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
								for(int y=0;y<30;y++){
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4e:	e009      	b.n	8008e64 <sendSimple+0xb4>
									osDelay(200);
 8008e50:	20c8      	movs	r0, #200	; 0xc8
 8008e52:	f00f fbf1 	bl	8018638 <osDelay>
									if(uart2done)break;
 8008e56:	4b45      	ldr	r3, [pc, #276]	; (8008f6c <sendSimple+0x1bc>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d13c      	bne.n	8008ed8 <sendSimple+0x128>
								for(int y=0;y<30;y++){
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	3301      	adds	r3, #1
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	2b1d      	cmp	r3, #29
 8008e68:	ddf2      	ble.n	8008e50 <sendSimple+0xa0>
 8008e6a:	e038      	b.n	8008ede <sendSimple+0x12e>
								}
							}
					}
					else {
						if(signal<=-100){
 8008e6c:	4b44      	ldr	r3, [pc, #272]	; (8008f80 <sendSimple+0x1d0>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008e74:	da33      	bge.n	8008ede <sendSimple+0x12e>
							for(int z=0;z<3;z++){
 8008e76:	2300      	movs	r3, #0
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e7a:	e029      	b.n	8008ed0 <sendSimple+0x120>
								printf("modem reboot\n");
 8008e7c:	4843      	ldr	r0, [pc, #268]	; (8008f8c <sendSimple+0x1dc>)
 8008e7e:	f012 ff93 	bl	801bda8 <puts>
								modem_reset_rtos();
 8008e82:	f000 fbc7 	bl	8009614 <modem_reset_rtos>
								reset_mqtt();
 8008e86:	f000 fb03 	bl	8009490 <reset_mqtt>
								SerialATprintln("AT+CPSI?", 8, 0xff);
 8008e8a:	22ff      	movs	r2, #255	; 0xff
 8008e8c:	2108      	movs	r1, #8
 8008e8e:	4839      	ldr	r0, [pc, #228]	; (8008f74 <sendSimple+0x1c4>)
 8008e90:	f7fe fcc2 	bl	8007818 <SerialATprintln>
								osDelay(2000);
 8008e94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008e98:	f00f fbce 	bl	8018638 <osDelay>
								for(int y=0;y<30;y++){
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ea0:	e009      	b.n	8008eb6 <sendSimple+0x106>
									osDelay(200);
 8008ea2:	20c8      	movs	r0, #200	; 0xc8
 8008ea4:	f00f fbc8 	bl	8018638 <osDelay>
									if(uart2done)break;
 8008ea8:	4b30      	ldr	r3, [pc, #192]	; (8008f6c <sendSimple+0x1bc>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <sendSimple+0x10e>
								for(int y=0;y<30;y++){
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	2b1d      	cmp	r3, #29
 8008eba:	ddf2      	ble.n	8008ea2 <sendSimple+0xf2>
 8008ebc:	e000      	b.n	8008ec0 <sendSimple+0x110>
									if(uart2done)break;
 8008ebe:	bf00      	nop
								}
								if(signal > -100) break;
 8008ec0:	4b2f      	ldr	r3, [pc, #188]	; (8008f80 <sendSimple+0x1d0>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008ec8:	da08      	bge.n	8008edc <sendSimple+0x12c>
							for(int z=0;z<3;z++){
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	3301      	adds	r3, #1
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	ddd2      	ble.n	8008e7c <sendSimple+0xcc>
 8008ed6:	e002      	b.n	8008ede <sendSimple+0x12e>
									if(uart2done)break;
 8008ed8:	bf00      	nop
 8008eda:	e000      	b.n	8008ede <sendSimple+0x12e>
								if(signal > -100) break;
 8008edc:	bf00      	nop
							}

						}
					}
	SerialATprintln("AT+CNMP?", 8, 0xff);
 8008ede:	22ff      	movs	r2, #255	; 0xff
 8008ee0:	2108      	movs	r1, #8
 8008ee2:	482b      	ldr	r0, [pc, #172]	; (8008f90 <sendSimple+0x1e0>)
 8008ee4:	f7fe fc98 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 8008ee8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008eec:	f00f fba4 	bl	8018638 <osDelay>
	uart2done = false;
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <sendSimple+0x1bc>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
	bufclear();
 8008ef6:	f7ff f9f3 	bl	80082e0 <bufclear>
//	temp_data=malloc(200);
//	temp_data2=malloc(50);
	memset((char *)mydata,0,1100);
 8008efa:	f240 424c 	movw	r2, #1100	; 0x44c
 8008efe:	2100      	movs	r1, #0
 8008f00:	4824      	ldr	r0, [pc, #144]	; (8008f94 <sendSimple+0x1e4>)
 8008f02:	f012 f9d0 	bl	801b2a6 <memset>
	cmpint = strcmp(snMeter, "00000000");
 8008f06:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <sendSimple+0x1e8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4924      	ldr	r1, [pc, #144]	; (8008f9c <sendSimple+0x1ec>)
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f7 f95f 	bl	80001d0 <strcmp>
 8008f12:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <sendSimple+0x16e>
 8008f1a:	f002 fba7 	bl	800b66c <read_sn_edmi>
	if(typemeter==6) {
 8008f1e:	4b20      	ldr	r3, [pc, #128]	; (8008fa0 <sendSimple+0x1f0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d115      	bne.n	8008f52 <sendSimple+0x1a2>
		if(uart3disc) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK6N\",\"mtrcon\":\"disconnect\"",snMeter);
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <sendSimple+0x1f4>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d008      	beq.n	8008f40 <sendSimple+0x190>
 8008f2e:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <sendSimple+0x1f8>)
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	4b19      	ldr	r3, [pc, #100]	; (8008f98 <sendSimple+0x1e8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	491c      	ldr	r1, [pc, #112]	; (8008fac <sendSimple+0x1fc>)
 8008f3a:	f012 ff4d 	bl	801bdd8 <siprintf>
 8008f3e:	e043      	b.n	8008fc8 <sendSimple+0x218>
		else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK6N\",\"mtrcon\":\"connect\"",snMeter);
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <sendSimple+0x1f8>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <sendSimple+0x1e8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4919      	ldr	r1, [pc, #100]	; (8008fb0 <sendSimple+0x200>)
 8008f4c:	f012 ff44 	bl	801bdd8 <siprintf>
 8008f50:	e03a      	b.n	8008fc8 <sendSimple+0x218>
	}
	else {
		if(uart3disc) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK10E\",\"mtrcon\":\"disconnect\"",snMeter);
 8008f52:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <sendSimple+0x1f4>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d02e      	beq.n	8008fb8 <sendSimple+0x208>
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <sendSimple+0x1f8>)
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <sendSimple+0x1e8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	4913      	ldr	r1, [pc, #76]	; (8008fb4 <sendSimple+0x204>)
 8008f66:	f012 ff37 	bl	801bdd8 <siprintf>
 8008f6a:	e02d      	b.n	8008fc8 <sendSimple+0x218>
 8008f6c:	20003fe4 	.word	0x20003fe4
 8008f70:	20003fd0 	.word	0x20003fd0
 8008f74:	0801e910 	.word	0x0801e910
 8008f78:	20005314 	.word	0x20005314
 8008f7c:	0801e91c 	.word	0x0801e91c
 8008f80:	20007244 	.word	0x20007244
 8008f84:	0801e924 	.word	0x0801e924
 8008f88:	0801e89c 	.word	0x0801e89c
 8008f8c:	0801e930 	.word	0x0801e930
 8008f90:	0801e778 	.word	0x0801e778
 8008f94:	200046c8 	.word	0x200046c8
 8008f98:	20000188 	.word	0x20000188
 8008f9c:	0801e9b4 	.word	0x0801e9b4
 8008fa0:	2000b50c 	.word	0x2000b50c
 8008fa4:	2000430d 	.word	0x2000430d
 8008fa8:	200045f4 	.word	0x200045f4
 8008fac:	0801ea48 	.word	0x0801ea48
 8008fb0:	0801ea88 	.word	0x0801ea88
 8008fb4:	0801eac4 	.word	0x0801eac4
		else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK10E\",\"mtrcon\":\"connect\"",snMeter);
 8008fb8:	4ba2      	ldr	r3, [pc, #648]	; (8009244 <sendSimple+0x494>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4ba2      	ldr	r3, [pc, #648]	; (8009248 <sendSimple+0x498>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	49a2      	ldr	r1, [pc, #648]	; (800924c <sendSimple+0x49c>)
 8008fc4:	f012 ff08 	bl	801bdd8 <siprintf>
	}
	sprintf(temp_data2,",\"net\":\"");
 8008fc8:	4ba1      	ldr	r3, [pc, #644]	; (8009250 <sendSimple+0x4a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	49a1      	ldr	r1, [pc, #644]	; (8009254 <sendSimple+0x4a4>)
 8008fce:	461a      	mov	r2, r3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	cb03      	ldmia	r3!, {r0, r1}
 8008fd4:	6010      	str	r0, [r2, #0]
 8008fd6:	6051      	str	r1, [r2, #4]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	7213      	strb	r3, [r2, #8]
	strcat(temp_data, temp_data2);
 8008fdc:	4b99      	ldr	r3, [pc, #612]	; (8009244 <sendSimple+0x494>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	4b9b      	ldr	r3, [pc, #620]	; (8009250 <sendSimple+0x4a0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f012 ff16 	bl	801be18 <strcat>
	strcat(temp_data, networkstr);
 8008fec:	4b95      	ldr	r3, [pc, #596]	; (8009244 <sendSimple+0x494>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	4b99      	ldr	r3, [pc, #612]	; (8009258 <sendSimple+0x4a8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f012 ff0e 	bl	801be18 <strcat>
	strcat(temp_data, "\"");
 8008ffc:	4b91      	ldr	r3, [pc, #580]	; (8009244 <sendSimple+0x494>)
 8008ffe:	681c      	ldr	r4, [r3, #0]
 8009000:	4620      	mov	r0, r4
 8009002:	f7f7 f8ef 	bl	80001e4 <strlen>
 8009006:	4603      	mov	r3, r0
 8009008:	4423      	add	r3, r4
 800900a:	4994      	ldr	r1, [pc, #592]	; (800925c <sendSimple+0x4ac>)
 800900c:	461a      	mov	r2, r3
 800900e:	460b      	mov	r3, r1
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	8013      	strh	r3, [r2, #0]
	sprintf(temp_data2,",\"sig\":\"%d\"",signal);
 8009014:	4b8e      	ldr	r3, [pc, #568]	; (8009250 <sendSimple+0x4a0>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	4b91      	ldr	r3, [pc, #580]	; (8009260 <sendSimple+0x4b0>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	4991      	ldr	r1, [pc, #580]	; (8009264 <sendSimple+0x4b4>)
 8009020:	f012 feda 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 8009024:	4b87      	ldr	r3, [pc, #540]	; (8009244 <sendSimple+0x494>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b89      	ldr	r3, [pc, #548]	; (8009250 <sendSimple+0x4a0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f012 fef2 	bl	801be18 <strcat>
  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 8009034:	4b86      	ldr	r3, [pc, #536]	; (8009250 <sendSimple+0x4a0>)
 8009036:	681c      	ldr	r4, [r3, #0]
 8009038:	4b8b      	ldr	r3, [pc, #556]	; (8009268 <sendSimple+0x4b8>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4618      	mov	r0, r3
 800903e:	f7f7 fa93 	bl	8000568 <__aeabi_f2d>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4989      	ldr	r1, [pc, #548]	; (800926c <sendSimple+0x4bc>)
 8009048:	4620      	mov	r0, r4
 800904a:	f012 fec5 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 800904e:	4b7d      	ldr	r3, [pc, #500]	; (8009244 <sendSimple+0x494>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b7f      	ldr	r3, [pc, #508]	; (8009250 <sendSimple+0x4a0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f012 fedd 	bl	801be18 <strcat>
	sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800905e:	4b7c      	ldr	r3, [pc, #496]	; (8009250 <sendSimple+0x4a0>)
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	4b83      	ldr	r3, [pc, #524]	; (8009270 <sendSimple+0x4c0>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	4982      	ldr	r1, [pc, #520]	; (8009274 <sendSimple+0x4c4>)
 800906a:	f012 feb5 	bl	801bdd8 <siprintf>
	strcat(temp_data, temp_data2);
 800906e:	4b75      	ldr	r3, [pc, #468]	; (8009244 <sendSimple+0x494>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b77      	ldr	r3, [pc, #476]	; (8009250 <sendSimple+0x4a0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f012 fecd 	bl	801be18 <strcat>
	strcpy(mydata,temp_data);
 800907e:	4b71      	ldr	r3, [pc, #452]	; (8009244 <sendSimple+0x494>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4619      	mov	r1, r3
 8009084:	487c      	ldr	r0, [pc, #496]	; (8009278 <sendSimple+0x4c8>)
 8009086:	f012 fed6 	bl	801be36 <strcpy>
	printf("mydata: %s\r\n",mydata);
 800908a:	497b      	ldr	r1, [pc, #492]	; (8009278 <sendSimple+0x4c8>)
 800908c:	487b      	ldr	r0, [pc, #492]	; (800927c <sendSimple+0x4cc>)
 800908e:	f012 fe17 	bl	801bcc0 <iprintf>
//	  strcat(buffer, snMeter);
//	  strcat(buffer, ",\"pid\":\"Heartbeat\"}");
//	  printf(buffer);
//  	if(onlineMode) sendToServer((char*)mydata,bufsizechararray(mydata));
	csqint = 0;
 8009092:	4b7b      	ldr	r3, [pc, #492]	; (8009280 <sendSimple+0x4d0>)
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
			cgattint = 1;
 8009098:	4b7a      	ldr	r3, [pc, #488]	; (8009284 <sendSimple+0x4d4>)
 800909a:	2201      	movs	r2, #1
 800909c:	701a      	strb	r2, [r3, #0]
//			cgattint = check_cgatt_rtos();
			SerialATprintln("AT+CPSI?", 8, 0xff);
 800909e:	22ff      	movs	r2, #255	; 0xff
 80090a0:	2108      	movs	r1, #8
 80090a2:	4879      	ldr	r0, [pc, #484]	; (8009288 <sendSimple+0x4d8>)
 80090a4:	f7fe fbb8 	bl	8007818 <SerialATprintln>
			osDelay(2000);
 80090a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80090ac:	f00f fac4 	bl	8018638 <osDelay>

			uart2done=false;
 80090b0:	4b76      	ldr	r3, [pc, #472]	; (800928c <sendSimple+0x4dc>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
			memset((char *)buffer2,0,sizeof(buffer2));
 80090b6:	f240 424c 	movw	r2, #1100	; 0x44c
 80090ba:	2100      	movs	r1, #0
 80090bc:	4874      	ldr	r0, [pc, #464]	; (8009290 <sendSimple+0x4e0>)
 80090be:	f012 f8f2 	bl	801b2a6 <memset>
			memset((char *)csq,0,sizeof(csq));
 80090c2:	2214      	movs	r2, #20
 80090c4:	2100      	movs	r1, #0
 80090c6:	4873      	ldr	r0, [pc, #460]	; (8009294 <sendSimple+0x4e4>)
 80090c8:	f012 f8ed 	bl	801b2a6 <memset>
			char *strcsq = malloc(sizeof(csq));
 80090cc:	2014      	movs	r0, #20
 80090ce:	f012 f8d7 	bl	801b280 <malloc>
 80090d2:	4603      	mov	r3, r0
 80090d4:	603b      	str	r3, [r7, #0]


			SerialATprintln("AT+CSQ",6,0xff);
 80090d6:	22ff      	movs	r2, #255	; 0xff
 80090d8:	2106      	movs	r1, #6
 80090da:	486f      	ldr	r0, [pc, #444]	; (8009298 <sendSimple+0x4e8>)
 80090dc:	f7fe fb9c 	bl	8007818 <SerialATprintln>
			osDelay(100);
 80090e0:	2064      	movs	r0, #100	; 0x64
 80090e2:	f00f faa9 	bl	8018638 <osDelay>
			for(int y=0;y<20;y++){
 80090e6:	2300      	movs	r3, #0
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	e009      	b.n	8009100 <sendSimple+0x350>
				osDelay(200);
 80090ec:	20c8      	movs	r0, #200	; 0xc8
 80090ee:	f00f faa3 	bl	8018638 <osDelay>
				if(uart2done)break;
 80090f2:	4b66      	ldr	r3, [pc, #408]	; (800928c <sendSimple+0x4dc>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <sendSimple+0x358>
			for(int y=0;y<20;y++){
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	3301      	adds	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	2b13      	cmp	r3, #19
 8009104:	ddf2      	ble.n	80090ec <sendSimple+0x33c>
 8009106:	e000      	b.n	800910a <sendSimple+0x35a>
				if(uart2done)break;
 8009108:	bf00      	nop
			}
			strcsq = strstr((char *)buffer2,"+CSQ:");
 800910a:	4964      	ldr	r1, [pc, #400]	; (800929c <sendSimple+0x4ec>)
 800910c:	4860      	ldr	r0, [pc, #384]	; (8009290 <sendSimple+0x4e0>)
 800910e:	f012 fe9a 	bl	801be46 <strstr>
 8009112:	6038      	str	r0, [r7, #0]
			strcpy((char *)csq,strcsq);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	485f      	ldr	r0, [pc, #380]	; (8009294 <sendSimple+0x4e4>)
 8009118:	f012 fe8d 	bl	801be36 <strcpy>
			for(int x=0;x<20;x++){
 800911c:	2300      	movs	r3, #0
 800911e:	623b      	str	r3, [r7, #32]
 8009120:	e01b      	b.n	800915a <sendSimple+0x3aa>
				if(csq[x]=='\r' || csq[x]=='\n') csq[x]='\0';
 8009122:	4a5c      	ldr	r2, [pc, #368]	; (8009294 <sendSimple+0x4e4>)
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	4413      	add	r3, r2
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b0d      	cmp	r3, #13
 800912c:	d005      	beq.n	800913a <sendSimple+0x38a>
 800912e:	4a59      	ldr	r2, [pc, #356]	; (8009294 <sendSimple+0x4e4>)
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	4413      	add	r3, r2
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b0a      	cmp	r3, #10
 8009138:	d104      	bne.n	8009144 <sendSimple+0x394>
 800913a:	4a56      	ldr	r2, [pc, #344]	; (8009294 <sendSimple+0x4e4>)
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	4413      	add	r3, r2
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
				if(x>10) csq[x]='\0';
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2b0a      	cmp	r3, #10
 8009148:	dd04      	ble.n	8009154 <sendSimple+0x3a4>
 800914a:	4a52      	ldr	r2, [pc, #328]	; (8009294 <sendSimple+0x4e4>)
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	4413      	add	r3, r2
 8009150:	2200      	movs	r2, #0
 8009152:	701a      	strb	r2, [r3, #0]
			for(int x=0;x<20;x++){
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	3301      	adds	r3, #1
 8009158:	623b      	str	r3, [r7, #32]
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	2b13      	cmp	r3, #19
 800915e:	dde0      	ble.n	8009122 <sendSimple+0x372>
			}
			memset((char *)strcsq,0,sizeof(csq));
 8009160:	2214      	movs	r2, #20
 8009162:	2100      	movs	r1, #0
 8009164:	6838      	ldr	r0, [r7, #0]
 8009166:	f012 f89e 	bl	801b2a6 <memset>
			strcsq = strstr((char *)csq,"+CSQ: 99,99");
 800916a:	494d      	ldr	r1, [pc, #308]	; (80092a0 <sendSimple+0x4f0>)
 800916c:	4849      	ldr	r0, [pc, #292]	; (8009294 <sendSimple+0x4e4>)
 800916e:	f012 fe6a 	bl	801be46 <strstr>
 8009172:	6038      	str	r0, [r7, #0]
			csqint = strcmp(strcsq,"+CSQ: 99,99");
 8009174:	494a      	ldr	r1, [pc, #296]	; (80092a0 <sendSimple+0x4f0>)
 8009176:	6838      	ldr	r0, [r7, #0]
 8009178:	f7f7 f82a 	bl	80001d0 <strcmp>
 800917c:	4603      	mov	r3, r0
 800917e:	b2da      	uxtb	r2, r3
 8009180:	4b3f      	ldr	r3, [pc, #252]	; (8009280 <sendSimple+0x4d0>)
 8009182:	701a      	strb	r2, [r3, #0]
			if(csqint!=0) csqint = 1;
 8009184:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <sendSimple+0x4d0>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <sendSimple+0x3e2>
 800918c:	4b3c      	ldr	r3, [pc, #240]	; (8009280 <sendSimple+0x4d0>)
 800918e:	2201      	movs	r2, #1
 8009190:	701a      	strb	r2, [r3, #0]
			if(csqint || cgattint) {
 8009192:	4b3b      	ldr	r3, [pc, #236]	; (8009280 <sendSimple+0x4d0>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d103      	bne.n	80091a2 <sendSimple+0x3f2>
 800919a:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <sendSimple+0x4d4>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <sendSimple+0x3fa>
	//			printf("online True\r\n");
				onlineMode = true;
 80091a2:	4b40      	ldr	r3, [pc, #256]	; (80092a4 <sendSimple+0x4f4>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	e007      	b.n	80091ba <sendSimple+0x40a>
			}
			else {
				onlineMode = false;
 80091aa:	4b3e      	ldr	r3, [pc, #248]	; (80092a4 <sendSimple+0x4f4>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
				net_err_cnt++;
 80091b0:	4b3d      	ldr	r3, [pc, #244]	; (80092a8 <sendSimple+0x4f8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <sendSimple+0x4f8>)
 80091b8:	6013      	str	r3, [r2, #0]
			}
	if(usemqtt){
 80091ba:	4b3c      	ldr	r3, [pc, #240]	; (80092ac <sendSimple+0x4fc>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8142 	beq.w	8009448 <sendSimple+0x698>
		len_mydata=bufsizechararray(mydata);
 80091c4:	482c      	ldr	r0, [pc, #176]	; (8009278 <sendSimple+0x4c8>)
 80091c6:	f7ff f873 	bl	80082b0 <bufsizechararray>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b38      	ldr	r3, [pc, #224]	; (80092b0 <sendSimple+0x500>)
 80091ce:	601a      	str	r2, [r3, #0]
		memset(ATSMPUB,0,48);
 80091d0:	4b38      	ldr	r3, [pc, #224]	; (80092b4 <sendSimple+0x504>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2230      	movs	r2, #48	; 0x30
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f012 f864 	bl	801b2a6 <memset>
			memset(smstatestr,0,11);
 80091de:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <sendSimple+0x508>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	220b      	movs	r2, #11
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f012 f85d 	bl	801b2a6 <memset>
			len_mydata = bufsizechararray(mydata);
 80091ec:	4822      	ldr	r0, [pc, #136]	; (8009278 <sendSimple+0x4c8>)
 80091ee:	f7ff f85f 	bl	80082b0 <bufsizechararray>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b2e      	ldr	r3, [pc, #184]	; (80092b0 <sendSimple+0x500>)
 80091f6:	601a      	str	r2, [r3, #0]
		//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
			for(int z=0;z<3;z++){
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	e0a2      	b.n	8009344 <sendSimple+0x594>
				uart2done = false;
 80091fe:	4b23      	ldr	r3, [pc, #140]	; (800928c <sendSimple+0x4dc>)
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 8009204:	4b2d      	ldr	r3, [pc, #180]	; (80092bc <sendSimple+0x50c>)
 8009206:	681c      	ldr	r4, [r3, #0]
 8009208:	4b2c      	ldr	r3, [pc, #176]	; (80092bc <sendSimple+0x50c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f7f6 ffe9 	bl	80001e4 <strlen>
 8009212:	4603      	mov	r3, r0
 8009214:	b29a      	uxth	r2, r3
 8009216:	23ff      	movs	r3, #255	; 0xff
 8009218:	4621      	mov	r1, r4
 800921a:	4829      	ldr	r0, [pc, #164]	; (80092c0 <sendSimple+0x510>)
 800921c:	f00a fe36 	bl	8013e8c <HAL_UART_Transmit>
				for(int y=0;y<30;y++){
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	e009      	b.n	800923a <sendSimple+0x48a>
						osDelay(200);
 8009226:	20c8      	movs	r0, #200	; 0xc8
 8009228:	f00f fa06 	bl	8018638 <osDelay>
						if(uart2done)break;
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <sendSimple+0x4dc>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d147      	bne.n	80092c4 <sendSimple+0x514>
				for(int y=0;y<30;y++){
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	3301      	adds	r3, #1
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b1d      	cmp	r3, #29
 800923e:	ddf2      	ble.n	8009226 <sendSimple+0x476>
 8009240:	e041      	b.n	80092c6 <sendSimple+0x516>
 8009242:	bf00      	nop
 8009244:	200045f4 	.word	0x200045f4
 8009248:	20000188 	.word	0x20000188
 800924c:	0801eb04 	.word	0x0801eb04
 8009250:	20008a00 	.word	0x20008a00
 8009254:	0801ea10 	.word	0x0801ea10
 8009258:	20005314 	.word	0x20005314
 800925c:	0801e4fc 	.word	0x0801e4fc
 8009260:	20007244 	.word	0x20007244
 8009264:	0801ea1c 	.word	0x0801ea1c
 8009268:	20005770 	.word	0x20005770
 800926c:	0801ea28 	.word	0x0801ea28
 8009270:	2000b510 	.word	0x2000b510
 8009274:	0801ea38 	.word	0x0801ea38
 8009278:	200046c8 	.word	0x200046c8
 800927c:	0801e998 	.word	0x0801e998
 8009280:	20008a04 	.word	0x20008a04
 8009284:	200045f0 	.word	0x200045f0
 8009288:	0801e910 	.word	0x0801e910
 800928c:	20003fe4 	.word	0x20003fe4
 8009290:	20006d80 	.word	0x20006d80
 8009294:	2000905c 	.word	0x2000905c
 8009298:	0801e740 	.word	0x0801e740
 800929c:	0801eb44 	.word	0x0801eb44
 80092a0:	0801eb4c 	.word	0x0801eb4c
 80092a4:	20000013 	.word	0x20000013
 80092a8:	20002758 	.word	0x20002758
 80092ac:	20004285 	.word	0x20004285
 80092b0:	20009124 	.word	0x20009124
 80092b4:	20004308 	.word	0x20004308
 80092b8:	2000b000 	.word	0x2000b000
 80092bc:	20000184 	.word	0x20000184
 80092c0:	200038e4 	.word	0x200038e4
						if(uart2done)break;
 80092c4:	bf00      	nop
					}
				temp_data =strstr((char *)buffer2,"+SMSTATE:");
 80092c6:	4962      	ldr	r1, [pc, #392]	; (8009450 <sendSimple+0x6a0>)
 80092c8:	4862      	ldr	r0, [pc, #392]	; (8009454 <sendSimple+0x6a4>)
 80092ca:	f012 fdbc 	bl	801be46 <strstr>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b61      	ldr	r3, [pc, #388]	; (8009458 <sendSimple+0x6a8>)
 80092d2:	601a      	str	r2, [r3, #0]
				memcpy(smstatestr,temp_data,11);
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <sendSimple+0x6ac>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	4b5f      	ldr	r3, [pc, #380]	; (8009458 <sendSimple+0x6a8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	220b      	movs	r2, #11
 80092de:	4619      	mov	r1, r3
 80092e0:	f011 ffd6 	bl	801b290 <memcpy>
				smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 80092e4:	4b5d      	ldr	r3, [pc, #372]	; (800945c <sendSimple+0x6ac>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	495d      	ldr	r1, [pc, #372]	; (8009460 <sendSimple+0x6b0>)
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f6 ff70 	bl	80001d0 <strcmp>
 80092f0:	4603      	mov	r3, r0
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	4b5b      	ldr	r3, [pc, #364]	; (8009464 <sendSimple+0x6b4>)
 80092f6:	701a      	strb	r2, [r3, #0]
				uart2done = false;
 80092f8:	4b5b      	ldr	r3, [pc, #364]	; (8009468 <sendSimple+0x6b8>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	701a      	strb	r2, [r3, #0]
				if(smstateint!=0) break;
 80092fe:	4b59      	ldr	r3, [pc, #356]	; (8009464 <sendSimple+0x6b4>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d123      	bne.n	800934e <sendSimple+0x59e>
				reset_mqtt();
 8009306:	f000 f8c3 	bl	8009490 <reset_mqtt>
				SerialATprintln("AT+SMCONN",9,0xff);
 800930a:	22ff      	movs	r2, #255	; 0xff
 800930c:	2109      	movs	r1, #9
 800930e:	4857      	ldr	r0, [pc, #348]	; (800946c <sendSimple+0x6bc>)
 8009310:	f7fe fa82 	bl	8007818 <SerialATprintln>
				uart2done = false;
 8009314:	4b54      	ldr	r3, [pc, #336]	; (8009468 <sendSimple+0x6b8>)
 8009316:	2200      	movs	r2, #0
 8009318:	701a      	strb	r2, [r3, #0]
				for(int y=0;y<30;y++){
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	e009      	b.n	8009334 <sendSimple+0x584>
					osDelay(200);
 8009320:	20c8      	movs	r0, #200	; 0xc8
 8009322:	f00f f989 	bl	8018638 <osDelay>
					if(uart2done)break;
 8009326:	4b50      	ldr	r3, [pc, #320]	; (8009468 <sendSimple+0x6b8>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <sendSimple+0x58c>
				for(int y=0;y<30;y++){
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	3301      	adds	r3, #1
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b1d      	cmp	r3, #29
 8009338:	ddf2      	ble.n	8009320 <sendSimple+0x570>
 800933a:	e000      	b.n	800933e <sendSimple+0x58e>
					if(uart2done)break;
 800933c:	bf00      	nop
			for(int z=0;z<3;z++){
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	2b02      	cmp	r3, #2
 8009348:	f77f af59 	ble.w	80091fe <sendSimple+0x44e>
 800934c:	e000      	b.n	8009350 <sendSimple+0x5a0>
				if(smstateint!=0) break;
 800934e:	bf00      	nop
				}
			}
			uart2done = false;
 8009350:	4b45      	ldr	r3, [pc, #276]	; (8009468 <sendSimple+0x6b8>)
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
			SerialATprintln("AT+SMCONN",9,0xff);
 8009356:	22ff      	movs	r2, #255	; 0xff
 8009358:	2109      	movs	r1, #9
 800935a:	4844      	ldr	r0, [pc, #272]	; (800946c <sendSimple+0x6bc>)
 800935c:	f7fe fa5c 	bl	8007818 <SerialATprintln>
			for(int i=0;i<20;i++){
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	e009      	b.n	800937a <sendSimple+0x5ca>
				osDelay(200);
 8009366:	20c8      	movs	r0, #200	; 0xc8
 8009368:	f00f f966 	bl	8018638 <osDelay>
				if(uart2done)break;
 800936c:	4b3e      	ldr	r3, [pc, #248]	; (8009468 <sendSimple+0x6b8>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <sendSimple+0x5d2>
			for(int i=0;i<20;i++){
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	3301      	adds	r3, #1
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b13      	cmp	r3, #19
 800937e:	ddf2      	ble.n	8009366 <sendSimple+0x5b6>
 8009380:	e000      	b.n	8009384 <sendSimple+0x5d4>
				if(uart2done)break;
 8009382:	bf00      	nop
			}
			uart2done = false;
 8009384:	4b38      	ldr	r3, [pc, #224]	; (8009468 <sendSimple+0x6b8>)
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
			sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 800938a:	4b39      	ldr	r3, [pc, #228]	; (8009470 <sendSimple+0x6c0>)
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	4b39      	ldr	r3, [pc, #228]	; (8009474 <sendSimple+0x6c4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	4938      	ldr	r1, [pc, #224]	; (8009478 <sendSimple+0x6c8>)
 8009396:	f012 fd1f 	bl	801bdd8 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 800939a:	4b35      	ldr	r3, [pc, #212]	; (8009470 <sendSimple+0x6c0>)
 800939c:	681c      	ldr	r4, [r3, #0]
 800939e:	4b34      	ldr	r3, [pc, #208]	; (8009470 <sendSimple+0x6c0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7f6 ff1e 	bl	80001e4 <strlen>
 80093a8:	4603      	mov	r3, r0
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	23ff      	movs	r3, #255	; 0xff
 80093ae:	4621      	mov	r1, r4
 80093b0:	4832      	ldr	r0, [pc, #200]	; (800947c <sendSimple+0x6cc>)
 80093b2:	f00a fd6b 	bl	8013e8c <HAL_UART_Transmit>
			for(int y=0;y<20;y++){
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	e009      	b.n	80093d0 <sendSimple+0x620>
				osDelay(200);
 80093bc:	20c8      	movs	r0, #200	; 0xc8
 80093be:	f00f f93b 	bl	8018638 <osDelay>
				if(uart2done)break;
 80093c2:	4b29      	ldr	r3, [pc, #164]	; (8009468 <sendSimple+0x6b8>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <sendSimple+0x628>
			for(int y=0;y<20;y++){
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3301      	adds	r3, #1
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b13      	cmp	r3, #19
 80093d4:	ddf2      	ble.n	80093bc <sendSimple+0x60c>
 80093d6:	e000      	b.n	80093da <sendSimple+0x62a>
				if(uart2done)break;
 80093d8:	bf00      	nop
			}
			uart2done = false;
 80093da:	4b23      	ldr	r3, [pc, #140]	; (8009468 <sendSimple+0x6b8>)
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
			printf("mydata: %s\r\n",mydata);
 80093e0:	4927      	ldr	r1, [pc, #156]	; (8009480 <sendSimple+0x6d0>)
 80093e2:	4828      	ldr	r0, [pc, #160]	; (8009484 <sendSimple+0x6d4>)
 80093e4:	f012 fc6c 	bl	801bcc0 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 80093e8:	4b22      	ldr	r3, [pc, #136]	; (8009474 <sendSimple+0x6c4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80093f2:	4923      	ldr	r1, [pc, #140]	; (8009480 <sendSimple+0x6d0>)
 80093f4:	4821      	ldr	r0, [pc, #132]	; (800947c <sendSimple+0x6cc>)
 80093f6:	f00a fd49 	bl	8013e8c <HAL_UART_Transmit>
			for(int y=0;y<20;y++){
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	e009      	b.n	8009414 <sendSimple+0x664>
				osDelay(200);
 8009400:	20c8      	movs	r0, #200	; 0xc8
 8009402:	f00f f919 	bl	8018638 <osDelay>
				if(uart2done)break;
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <sendSimple+0x6b8>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <sendSimple+0x66c>
			for(int y=0;y<20;y++){
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	3301      	adds	r3, #1
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b13      	cmp	r3, #19
 8009418:	ddf2      	ble.n	8009400 <sendSimple+0x650>
 800941a:	e000      	b.n	800941e <sendSimple+0x66e>
				if(uart2done)break;
 800941c:	bf00      	nop
			}
			// change cnmp to 2 (nbiot)
				uart2done = false;
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <sendSimple+0x6b8>)
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
				SerialATprintln("AT+CNMP=2", 9, 0xff);
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	2109      	movs	r1, #9
 8009428:	4817      	ldr	r0, [pc, #92]	; (8009488 <sendSimple+0x6d8>)
 800942a:	f7fe f9f5 	bl	8007818 <SerialATprintln>
				osDelay(2000);
 800942e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009432:	f00f f901 	bl	8018638 <osDelay>
				SerialATprintln("AT+CNMP?", 8, 0xff);
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	2108      	movs	r1, #8
 800943a:	4814      	ldr	r0, [pc, #80]	; (800948c <sendSimple+0x6dc>)
 800943c:	f7fe f9ec 	bl	8007818 <SerialATprintln>
				osDelay(2000);
 8009440:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009444:	f00f f8f8 	bl	8018638 <osDelay>

//		sendMQTTMAIN();
//				osDelay(2000);
	}

}
 8009448:	bf00      	nop
 800944a:	373c      	adds	r7, #60	; 0x3c
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}
 8009450:	0801e940 	.word	0x0801e940
 8009454:	20006d80 	.word	0x20006d80
 8009458:	200045f4 	.word	0x200045f4
 800945c:	2000b000 	.word	0x2000b000
 8009460:	0801e94c 	.word	0x0801e94c
 8009464:	2000430c 	.word	0x2000430c
 8009468:	20003fe4 	.word	0x20003fe4
 800946c:	0801e89c 	.word	0x0801e89c
 8009470:	20004308 	.word	0x20004308
 8009474:	20009124 	.word	0x20009124
 8009478:	0801e974 	.word	0x0801e974
 800947c:	200038e4 	.word	0x200038e4
 8009480:	200046c8 	.word	0x200046c8
 8009484:	0801e998 	.word	0x0801e998
 8009488:	0801e9a8 	.word	0x0801e9a8
 800948c:	0801e778 	.word	0x0801e778

08009490 <reset_mqtt>:

void reset_mqtt(){
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
	SerialATprintln("AT+CPSI?", 8, 0xff);
 8009496:	22ff      	movs	r2, #255	; 0xff
 8009498:	2108      	movs	r1, #8
 800949a:	4837      	ldr	r0, [pc, #220]	; (8009578 <reset_mqtt+0xe8>)
 800949c:	f7fe f9bc 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 80094a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094a4:	f00f f8c8 	bl	8018638 <osDelay>

	SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0", 44, 0xff);
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	212c      	movs	r1, #44	; 0x2c
 80094ac:	4833      	ldr	r0, [pc, #204]	; (800957c <reset_mqtt+0xec>)
 80094ae:	f7fe f9b3 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 80094b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094b6:	f00f f8bf 	bl	8018638 <osDelay>

	SerialATprintln("AT+CGDCONT?", 11, 0xff);
 80094ba:	22ff      	movs	r2, #255	; 0xff
 80094bc:	210b      	movs	r1, #11
 80094be:	4830      	ldr	r0, [pc, #192]	; (8009580 <reset_mqtt+0xf0>)
 80094c0:	f7fe f9aa 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 80094c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094c8:	f00f f8b6 	bl	8018638 <osDelay>

	SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 80094cc:	22ff      	movs	r2, #255	; 0xff
 80094ce:	210c      	movs	r1, #12
 80094d0:	482c      	ldr	r0, [pc, #176]	; (8009584 <reset_mqtt+0xf4>)
 80094d2:	f7fe f9a1 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 80094d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094da:	f00f f8ad 	bl	8018638 <osDelay>

	SerialATprintln("AT+CNACT?", 9, 0xff);
 80094de:	22ff      	movs	r2, #255	; 0xff
 80094e0:	2109      	movs	r1, #9
 80094e2:	4829      	ldr	r0, [pc, #164]	; (8009588 <reset_mqtt+0xf8>)
 80094e4:	f7fe f998 	bl	8007818 <SerialATprintln>
	osDelay(2000);
 80094e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094ec:	f00f f8a4 	bl	8018638 <osDelay>

	SerialATprintln("AT+SMDISC",9,700);
 80094f0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80094f4:	2109      	movs	r1, #9
 80094f6:	4825      	ldr	r0, [pc, #148]	; (800958c <reset_mqtt+0xfc>)
 80094f8:	f7fe f98e 	bl	8007818 <SerialATprintln>
	  osDelay(1000);
 80094fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009500:	f00f f89a 	bl	8018638 <osDelay>

//	  SerialATprintln("AT+SMCONF=\"URL\",broker.mqttdashboard.com,1883",45,0xff);
	  SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 8009504:	22ff      	movs	r2, #255	; 0xff
 8009506:	2126      	movs	r1, #38	; 0x26
 8009508:	4821      	ldr	r0, [pc, #132]	; (8009590 <reset_mqtt+0x100>)
 800950a:	f7fe f985 	bl	8007818 <SerialATprintln>
	  osDelay(1000);
 800950e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009512:	f00f f891 	bl	8018638 <osDelay>

	  SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 8009516:	22ff      	movs	r2, #255	; 0xff
 8009518:	2117      	movs	r1, #23
 800951a:	481e      	ldr	r0, [pc, #120]	; (8009594 <reset_mqtt+0x104>)
 800951c:	f7fe f97c 	bl	8007818 <SerialATprintln>
	  osDelay(1000);
 8009520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009524:	f00f f888 	bl	8018638 <osDelay>

	  SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 8009528:	22ff      	movs	r2, #255	; 0xff
 800952a:	2115      	movs	r1, #21
 800952c:	481a      	ldr	r0, [pc, #104]	; (8009598 <reset_mqtt+0x108>)
 800952e:	f7fe f973 	bl	8007818 <SerialATprintln>
	  osDelay(1000);
 8009532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009536:	f00f f87f 	bl	8018638 <osDelay>

	  uart2done=false;
 800953a:	4b18      	ldr	r3, [pc, #96]	; (800959c <reset_mqtt+0x10c>)
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
	  SerialATprintln("AT+SMCONN",9,0xff);
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	2109      	movs	r1, #9
 8009544:	4816      	ldr	r0, [pc, #88]	; (80095a0 <reset_mqtt+0x110>)
 8009546:	f7fe f967 	bl	8007818 <SerialATprintln>
	  		for(int y=0;y<20;y++){
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
 800954e:	e009      	b.n	8009564 <reset_mqtt+0xd4>
	  				osDelay(200);
 8009550:	20c8      	movs	r0, #200	; 0xc8
 8009552:	f00f f871 	bl	8018638 <osDelay>
	  				if(uart2done)break;
 8009556:	4b11      	ldr	r3, [pc, #68]	; (800959c <reset_mqtt+0x10c>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d106      	bne.n	800956c <reset_mqtt+0xdc>
	  		for(int y=0;y<20;y++){
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3301      	adds	r3, #1
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b13      	cmp	r3, #19
 8009568:	ddf2      	ble.n	8009550 <reset_mqtt+0xc0>
	  			}
}
 800956a:	e000      	b.n	800956e <reset_mqtt+0xde>
	  				if(uart2done)break;
 800956c:	bf00      	nop
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	0801e910 	.word	0x0801e910
 800957c:	0801e748 	.word	0x0801e748
 8009580:	0801e580 	.word	0x0801e580
 8009584:	0801e58c 	.word	0x0801e58c
 8009588:	0801e59c 	.word	0x0801e59c
 800958c:	0801e850 	.word	0x0801e850
 8009590:	0801e85c 	.word	0x0801e85c
 8009594:	0801e884 	.word	0x0801e884
 8009598:	0801e8c0 	.word	0x0801e8c0
 800959c:	20003fe4 	.word	0x20003fe4
 80095a0:	0801e89c 	.word	0x0801e89c

080095a4 <NB_rst1_rtos>:
  HAL_Delay(1000);
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
}

void NB_rst1_rtos(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  // pull pwrkey low around 1 second then pull high (prevent automatically on / off)
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
 80095a8:	2200      	movs	r2, #0
 80095aa:	2102      	movs	r1, #2
 80095ac:	4809      	ldr	r0, [pc, #36]	; (80095d4 <NB_rst1_rtos+0x30>)
 80095ae:	f006 feab 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_SET);
 80095b2:	2201      	movs	r2, #1
 80095b4:	2102      	movs	r1, #2
 80095b6:	4807      	ldr	r0, [pc, #28]	; (80095d4 <NB_rst1_rtos+0x30>)
 80095b8:	f006 fea6 	bl	8010308 <HAL_GPIO_WritePin>
  osDelay(1000);
 80095bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095c0:	f00f f83a 	bl	8018638 <osDelay>
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
 80095c4:	2200      	movs	r2, #0
 80095c6:	2102      	movs	r1, #2
 80095c8:	4802      	ldr	r0, [pc, #8]	; (80095d4 <NB_rst1_rtos+0x30>)
 80095ca:	f006 fe9d 	bl	8010308 <HAL_GPIO_WritePin>
}
 80095ce:	bf00      	nop
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	48000400 	.word	0x48000400

080095d8 <NB_rst>:

void NB_rst(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  // pull pwrkey low around 1 second then pull high (prevent automatically on / off)
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 80095dc:	2200      	movs	r2, #0
 80095de:	2101      	movs	r1, #1
 80095e0:	480b      	ldr	r0, [pc, #44]	; (8009610 <NB_rst+0x38>)
 80095e2:	f006 fe91 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 80095e6:	2201      	movs	r2, #1
 80095e8:	2101      	movs	r1, #1
 80095ea:	4809      	ldr	r0, [pc, #36]	; (8009610 <NB_rst+0x38>)
 80095ec:	f006 fe8c 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80095f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095f4:	f005 fa7c 	bl	800eaf0 <HAL_Delay>
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 80095f8:	2200      	movs	r2, #0
 80095fa:	2101      	movs	r1, #1
 80095fc:	4804      	ldr	r0, [pc, #16]	; (8009610 <NB_rst+0x38>)
 80095fe:	f006 fe83 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_Delay(2*1000);
 8009602:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009606:	f005 fa73 	bl	800eaf0 <HAL_Delay>
}
 800960a:	bf00      	nop
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	48000400 	.word	0x48000400

08009614 <modem_reset_rtos>:
//	}
	printf("%s\r\n",respond);
}

void modem_reset_rtos()
{
 8009614:	b5b0      	push	{r4, r5, r7, lr}
 8009616:	b0aa      	sub	sp, #168	; 0xa8
 8009618:	af00      	add	r7, sp, #0
	printf("\r\nModem Reboot\r\n");
 800961a:	4883      	ldr	r0, [pc, #524]	; (8009828 <modem_reset_rtos+0x214>)
 800961c:	f012 fbc4 	bl	801bda8 <puts>

	SerialATprintln("AT+CREBOOT", 10, 0xff);
 8009620:	22ff      	movs	r2, #255	; 0xff
 8009622:	210a      	movs	r1, #10
 8009624:	4881      	ldr	r0, [pc, #516]	; (800982c <modem_reset_rtos+0x218>)
 8009626:	f7fe f8f7 	bl	8007818 <SerialATprintln>
	osDelay(4000);
 800962a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800962e:	f00f f803 	bl	8018638 <osDelay>
	for(int y=0;y<40;y++){
 8009632:	2300      	movs	r3, #0
 8009634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009638:	e00b      	b.n	8009652 <modem_reset_rtos+0x3e>
		osDelay(200);
 800963a:	20c8      	movs	r0, #200	; 0xc8
 800963c:	f00e fffc 	bl	8018638 <osDelay>
		if(uart2done)break;
 8009640:	4b7b      	ldr	r3, [pc, #492]	; (8009830 <modem_reset_rtos+0x21c>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <modem_reset_rtos+0x48>
	for(int y=0;y<40;y++){
 8009648:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800964c:	3301      	adds	r3, #1
 800964e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009656:	2b27      	cmp	r3, #39	; 0x27
 8009658:	ddef      	ble.n	800963a <modem_reset_rtos+0x26>
 800965a:	e000      	b.n	800965e <modem_reset_rtos+0x4a>
		if(uart2done)break;
 800965c:	bf00      	nop
	}

	printf("\r\nNBIOT Setup\r\n");
 800965e:	4875      	ldr	r0, [pc, #468]	; (8009834 <modem_reset_rtos+0x220>)
 8009660:	f012 fba2 	bl	801bda8 <puts>

	char at[]="AT\r\n";
 8009664:	4a74      	ldr	r2, [pc, #464]	; (8009838 <modem_reset_rtos+0x224>)
 8009666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800966a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800966e:	6018      	str	r0, [r3, #0]
 8009670:	3304      	adds	r3, #4
 8009672:	7019      	strb	r1, [r3, #0]
	SerialATprintln(at,2,0xff);
 8009674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009678:	22ff      	movs	r2, #255	; 0xff
 800967a:	2102      	movs	r1, #2
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe f8cb 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 8009682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009686:	f00e ffd7 	bl	8018638 <osDelay>

	char cpin[]="AT+CPIN?";
 800968a:	4a6c      	ldr	r2, [pc, #432]	; (800983c <modem_reset_rtos+0x228>)
 800968c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009690:	ca07      	ldmia	r2, {r0, r1, r2}
 8009692:	c303      	stmia	r3!, {r0, r1}
 8009694:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cpin,8,0xff);
 8009696:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800969a:	22ff      	movs	r2, #255	; 0xff
 800969c:	2108      	movs	r1, #8
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe f8ba 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80096a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096a8:	f00e ffc6 	bl	8018638 <osDelay>

	char csq[]="AT+CSQ";
 80096ac:	4a64      	ldr	r2, [pc, #400]	; (8009840 <modem_reset_rtos+0x22c>)
 80096ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80096b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096b6:	6018      	str	r0, [r3, #0]
 80096b8:	3304      	adds	r3, #4
 80096ba:	8019      	strh	r1, [r3, #0]
 80096bc:	3302      	adds	r3, #2
 80096be:	0c0a      	lsrs	r2, r1, #16
 80096c0:	701a      	strb	r2, [r3, #0]
	SerialATprintln(csq,6,0xff);
 80096c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80096c6:	22ff      	movs	r2, #255	; 0xff
 80096c8:	2106      	movs	r1, #6
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe f8a4 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80096d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096d4:	f00e ffb0 	bl	8018638 <osDelay>

	char creg[]="AT+CREG=1";
 80096d8:	4a5a      	ldr	r2, [pc, #360]	; (8009844 <modem_reset_rtos+0x230>)
 80096da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80096de:	ca07      	ldmia	r2, {r0, r1, r2}
 80096e0:	c303      	stmia	r3!, {r0, r1}
 80096e2:	801a      	strh	r2, [r3, #0]
	SerialATprintln(creg,9,0xff);
 80096e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80096e8:	22ff      	movs	r2, #255	; 0xff
 80096ea:	2109      	movs	r1, #9
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe f893 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80096f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096f6:	f00e ff9f 	bl	8018638 <osDelay>

	char cgreg[]="AT+CGREG=1";
 80096fa:	4a53      	ldr	r2, [pc, #332]	; (8009848 <modem_reset_rtos+0x234>)
 80096fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009700:	ca07      	ldmia	r2, {r0, r1, r2}
 8009702:	c303      	stmia	r3!, {r0, r1}
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	3302      	adds	r3, #2
 8009708:	0c12      	lsrs	r2, r2, #16
 800970a:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cgreg,10,0xff);
 800970c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009710:	22ff      	movs	r2, #255	; 0xff
 8009712:	210a      	movs	r1, #10
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe f87f 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 800971a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800971e:	f00e ff8b 	bl	8018638 <osDelay>

	char cgatt1[]="AT+CGATT=1";
 8009722:	4a4a      	ldr	r2, [pc, #296]	; (800984c <modem_reset_rtos+0x238>)
 8009724:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009728:	ca07      	ldmia	r2, {r0, r1, r2}
 800972a:	c303      	stmia	r3!, {r0, r1}
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	3302      	adds	r3, #2
 8009730:	0c12      	lsrs	r2, r2, #16
 8009732:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cgatt1,9,0xff);
 8009734:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009738:	22ff      	movs	r2, #255	; 0xff
 800973a:	2109      	movs	r1, #9
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe f86b 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 8009742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009746:	f00e ff77 	bl	8018638 <osDelay>

	char cgatt[]="AT+CGATT?";
 800974a:	4a41      	ldr	r2, [pc, #260]	; (8009850 <modem_reset_rtos+0x23c>)
 800974c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009750:	ca07      	ldmia	r2, {r0, r1, r2}
 8009752:	c303      	stmia	r3!, {r0, r1}
 8009754:	801a      	strh	r2, [r3, #0]
	SerialATprintln(cgatt,9,0xff);
 8009756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800975a:	22ff      	movs	r2, #255	; 0xff
 800975c:	2109      	movs	r1, #9
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe f85a 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 8009764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009768:	f00e ff66 	bl	8018638 <osDelay>

	char cops[]="AT+COPS?";
 800976c:	4a39      	ldr	r2, [pc, #228]	; (8009854 <modem_reset_rtos+0x240>)
 800976e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009772:	ca07      	ldmia	r2, {r0, r1, r2}
 8009774:	c303      	stmia	r3!, {r0, r1}
 8009776:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cops,8,0xff);
 8009778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	2108      	movs	r1, #8
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe f849 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 8009786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800978a:	f00e ff55 	bl	8018638 <osDelay>

	char cgnapn[]="AT+CGNAPN";
 800978e:	4a32      	ldr	r2, [pc, #200]	; (8009858 <modem_reset_rtos+0x244>)
 8009790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009794:	ca07      	ldmia	r2, {r0, r1, r2}
 8009796:	c303      	stmia	r3!, {r0, r1}
 8009798:	801a      	strh	r2, [r3, #0]
	SerialATprintln(cgnapn,9,0xff);
 800979a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800979e:	22ff      	movs	r2, #255	; 0xff
 80097a0:	2109      	movs	r1, #9
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe f838 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80097a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097ac:	f00e ff44 	bl	8018638 <osDelay>

//	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"internet\"\r\n";
	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"nb1internet\"";
 80097b0:	4b2a      	ldr	r3, [pc, #168]	; (800985c <modem_reset_rtos+0x248>)
 80097b2:	f107 0420 	add.w	r4, r7, #32
 80097b6:	461d      	mov	r5, r3
 80097b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80097c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SerialATprintln(cgdcont,31,0xff);
 80097c4:	f107 0320 	add.w	r3, r7, #32
 80097c8:	22ff      	movs	r2, #255	; 0xff
 80097ca:	211f      	movs	r1, #31
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe f823 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80097d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097d6:	f00e ff2f 	bl	8018638 <osDelay>

	char cgdcont1[]="AT+CGDCONT?";
 80097da:	4a21      	ldr	r2, [pc, #132]	; (8009860 <modem_reset_rtos+0x24c>)
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80097e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SerialATprintln(cgdcont1,11,0xff);
 80097e6:	f107 0314 	add.w	r3, r7, #20
 80097ea:	22ff      	movs	r2, #255	; 0xff
 80097ec:	210b      	movs	r1, #11
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe f812 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 80097f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097f8:	f00e ff1e 	bl	8018638 <osDelay>

	char cnact1[]="AT+CNACT=0,1";
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <modem_reset_rtos+0x250>)
 80097fe:	1d3c      	adds	r4, r7, #4
 8009800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009802:	c407      	stmia	r4!, {r0, r1, r2}
 8009804:	7023      	strb	r3, [r4, #0]
	SerialATprintln(cnact1,12,0xff);
 8009806:	1d3b      	adds	r3, r7, #4
 8009808:	22ff      	movs	r2, #255	; 0xff
 800980a:	210c      	movs	r1, #12
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe f803 	bl	8007818 <SerialATprintln>
	osDelay(1000);
 8009812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009816:	f00e ff0f 	bl	8018638 <osDelay>

	printf("NBIOT done\r\n");
 800981a:	4813      	ldr	r0, [pc, #76]	; (8009868 <modem_reset_rtos+0x254>)
 800981c:	f012 fac4 	bl	801bda8 <puts>
}
 8009820:	bf00      	nop
 8009822:	37a8      	adds	r7, #168	; 0xa8
 8009824:	46bd      	mov	sp, r7
 8009826:	bdb0      	pop	{r4, r5, r7, pc}
 8009828:	0801eb60 	.word	0x0801eb60
 800982c:	0801eb70 	.word	0x0801eb70
 8009830:	20003fe4 	.word	0x20003fe4
 8009834:	0801eb7c 	.word	0x0801eb7c
 8009838:	0801eb98 	.word	0x0801eb98
 800983c:	0801eba0 	.word	0x0801eba0
 8009840:	0801e740 	.word	0x0801e740
 8009844:	0801e71c 	.word	0x0801e71c
 8009848:	0801e728 	.word	0x0801e728
 800984c:	0801e734 	.word	0x0801e734
 8009850:	0801e500 	.word	0x0801e500
 8009854:	0801ebac 	.word	0x0801ebac
 8009858:	0801e8a8 	.word	0x0801e8a8
 800985c:	0801ebb8 	.word	0x0801ebb8
 8009860:	0801e580 	.word	0x0801e580
 8009864:	0801e58c 	.word	0x0801e58c
 8009868:	0801eb8c 	.word	0x0801eb8c

0800986c <NBIOT_setup_IT>:
	
	printf("NBIOT done\r\n");
}

void NBIOT_setup_IT(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
	printf("\r\nNBIOT setup\r\n");
 8009872:	4840      	ldr	r0, [pc, #256]	; (8009974 <NBIOT_setup_IT+0x108>)
 8009874:	f012 fa98 	bl	801bda8 <puts>

	SerialATprintln("AT",2,0xff);
 8009878:	22ff      	movs	r2, #255	; 0xff
 800987a:	2102      	movs	r1, #2
 800987c:	483e      	ldr	r0, [pc, #248]	; (8009978 <NBIOT_setup_IT+0x10c>)
 800987e:	f7fd ffcb 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 8009882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009886:	f005 f933 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CPIN",7,0xff);
 800988a:	22ff      	movs	r2, #255	; 0xff
 800988c:	2107      	movs	r1, #7
 800988e:	483b      	ldr	r0, [pc, #236]	; (800997c <NBIOT_setup_IT+0x110>)
 8009890:	f7fd ffc2 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 8009894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009898:	f005 f92a 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CSQ",6,0xff);
 800989c:	22ff      	movs	r2, #255	; 0xff
 800989e:	2106      	movs	r1, #6
 80098a0:	4837      	ldr	r0, [pc, #220]	; (8009980 <NBIOT_setup_IT+0x114>)
 80098a2:	f7fd ffb9 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 80098a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098aa:	f005 f921 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CREG=1",9,0xff);
 80098ae:	22ff      	movs	r2, #255	; 0xff
 80098b0:	2109      	movs	r1, #9
 80098b2:	4834      	ldr	r0, [pc, #208]	; (8009984 <NBIOT_setup_IT+0x118>)
 80098b4:	f7fd ffb0 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 80098b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098bc:	f005 f918 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CGREG=1",10,0xff);
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	210a      	movs	r1, #10
 80098c4:	4830      	ldr	r0, [pc, #192]	; (8009988 <NBIOT_setup_IT+0x11c>)
 80098c6:	f7fd ffa7 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 80098ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098ce:	f005 f90f 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CGATT=1",10,0xff);
 80098d2:	22ff      	movs	r2, #255	; 0xff
 80098d4:	210a      	movs	r1, #10
 80098d6:	482d      	ldr	r0, [pc, #180]	; (800998c <NBIOT_setup_IT+0x120>)
 80098d8:	f7fd ff9e 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 80098dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098e0:	f005 f906 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CGATT?",9,0xff);
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	2109      	movs	r1, #9
 80098e8:	4829      	ldr	r0, [pc, #164]	; (8009990 <NBIOT_setup_IT+0x124>)
 80098ea:	f7fd ff95 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 80098ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098f2:	f005 f8fd 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+COPS?",8,0xff);
 80098f6:	22ff      	movs	r2, #255	; 0xff
 80098f8:	2108      	movs	r1, #8
 80098fa:	4826      	ldr	r0, [pc, #152]	; (8009994 <NBIOT_setup_IT+0x128>)
 80098fc:	f7fd ff8c 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 8009900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009904:	f005 f8f4 	bl	800eaf0 <HAL_Delay>

	char cgnapn[]="AT+CGNAPN\r\n";
 8009908:	4a23      	ldr	r2, [pc, #140]	; (8009998 <NBIOT_setup_IT+0x12c>)
 800990a:	f107 030c 	add.w	r3, r7, #12
 800990e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char cgnapn_cmp[] = "+CGNAPN:";
 8009914:	4a21      	ldr	r2, [pc, #132]	; (800999c <NBIOT_setup_IT+0x130>)
 8009916:	463b      	mov	r3, r7
 8009918:	ca07      	ldmia	r2, {r0, r1, r2}
 800991a:	c303      	stmia	r3!, {r0, r1}
 800991c:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+CGNAPN",9,0xff);
 800991e:	22ff      	movs	r2, #255	; 0xff
 8009920:	2109      	movs	r1, #9
 8009922:	481f      	ldr	r0, [pc, #124]	; (80099a0 <NBIOT_setup_IT+0x134>)
 8009924:	f7fd ff78 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 8009928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800992c:	f005 f8e0 	bl	800eaf0 <HAL_Delay>

//	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"internet\"\r\n";
	SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\"",31,0xff);
 8009930:	22ff      	movs	r2, #255	; 0xff
 8009932:	211f      	movs	r1, #31
 8009934:	481b      	ldr	r0, [pc, #108]	; (80099a4 <NBIOT_setup_IT+0x138>)
 8009936:	f7fd ff6f 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 800993a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800993e:	f005 f8d7 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CGDCONT?",11,0xff);
 8009942:	22ff      	movs	r2, #255	; 0xff
 8009944:	210b      	movs	r1, #11
 8009946:	4818      	ldr	r0, [pc, #96]	; (80099a8 <NBIOT_setup_IT+0x13c>)
 8009948:	f7fd ff66 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 800994c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009950:	f005 f8ce 	bl	800eaf0 <HAL_Delay>

	SerialATprintln("AT+CGNACT=0,1",13,0xff);
 8009954:	22ff      	movs	r2, #255	; 0xff
 8009956:	210d      	movs	r1, #13
 8009958:	4814      	ldr	r0, [pc, #80]	; (80099ac <NBIOT_setup_IT+0x140>)
 800995a:	f7fd ff5d 	bl	8007818 <SerialATprintln>
	HAL_Delay(500);
 800995e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009962:	f005 f8c5 	bl	800eaf0 <HAL_Delay>

	printf("NBIOT done\r\n");
 8009966:	4812      	ldr	r0, [pc, #72]	; (80099b0 <NBIOT_setup_IT+0x144>)
 8009968:	f012 fa1e 	bl	801bda8 <puts>
}
 800996c:	bf00      	nop
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0801ebd8 	.word	0x0801ebd8
 8009978:	0801e718 	.word	0x0801e718
 800997c:	0801ecec 	.word	0x0801ecec
 8009980:	0801e740 	.word	0x0801e740
 8009984:	0801e71c 	.word	0x0801e71c
 8009988:	0801e728 	.word	0x0801e728
 800998c:	0801e734 	.word	0x0801e734
 8009990:	0801e500 	.word	0x0801e500
 8009994:	0801ebac 	.word	0x0801ebac
 8009998:	0801ec78 	.word	0x0801ec78
 800999c:	0801ec84 	.word	0x0801ec84
 80099a0:	0801e8a8 	.word	0x0801e8a8
 80099a4:	0801ebb8 	.word	0x0801ebb8
 80099a8:	0801e580 	.word	0x0801e580
 80099ac:	0801ecf4 	.word	0x0801ecf4
 80099b0:	0801eb8c 	.word	0x0801eb8c

080099b4 <MQTT_setup>:

void MQTT_setup(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
	usemqtt=true;
 80099b8:	4b27      	ldr	r3, [pc, #156]	; (8009a58 <MQTT_setup+0xa4>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]
	printf("\r\nMQTT setup\r\n");
 80099be:	4827      	ldr	r0, [pc, #156]	; (8009a5c <MQTT_setup+0xa8>)
 80099c0:	f012 f9f2 	bl	801bda8 <puts>
	HAL_Delay(1000);
 80099c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099c8:	f005 f892 	bl	800eaf0 <HAL_Delay>
	
	SerialATprintln("AT+SMDISC",9,0xff);
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	2109      	movs	r1, #9
 80099d0:	4823      	ldr	r0, [pc, #140]	; (8009a60 <MQTT_setup+0xac>)
 80099d2:	f7fd ff21 	bl	8007818 <SerialATprintln>
	HAL_Delay(1000);
 80099d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099da:	f005 f889 	bl	800eaf0 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 80099de:	4921      	ldr	r1, [pc, #132]	; (8009a64 <MQTT_setup+0xb0>)
 80099e0:	4821      	ldr	r0, [pc, #132]	; (8009a68 <MQTT_setup+0xb4>)
 80099e2:	f012 f96d 	bl	801bcc0 <iprintf>
	
//	char smconf_url[]="AT+SMCONF=\"URL\",broker.mqttdashboard.com,1883\r\n";
//	char smconf_url[]="AT+SMCONF=\"URL\",broker.hivemq.com,1883\r\n";
//	char smconf_url_cmp[] = "OK";
//	ATCOMMAND(smconf_url,smconf_url_cmp);
	SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 80099e6:	22ff      	movs	r2, #255	; 0xff
 80099e8:	2126      	movs	r1, #38	; 0x26
 80099ea:	4820      	ldr	r0, [pc, #128]	; (8009a6c <MQTT_setup+0xb8>)
 80099ec:	f7fd ff14 	bl	8007818 <SerialATprintln>
	HAL_Delay(1000);
 80099f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099f4:	f005 f87c 	bl	800eaf0 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 80099f8:	491a      	ldr	r1, [pc, #104]	; (8009a64 <MQTT_setup+0xb0>)
 80099fa:	481b      	ldr	r0, [pc, #108]	; (8009a68 <MQTT_setup+0xb4>)
 80099fc:	f012 f960 	bl	801bcc0 <iprintf>

	SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 8009a00:	22ff      	movs	r2, #255	; 0xff
 8009a02:	2117      	movs	r1, #23
 8009a04:	481a      	ldr	r0, [pc, #104]	; (8009a70 <MQTT_setup+0xbc>)
 8009a06:	f7fd ff07 	bl	8007818 <SerialATprintln>
	HAL_Delay(1000);
 8009a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a0e:	f005 f86f 	bl	800eaf0 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 8009a12:	4914      	ldr	r1, [pc, #80]	; (8009a64 <MQTT_setup+0xb0>)
 8009a14:	4814      	ldr	r0, [pc, #80]	; (8009a68 <MQTT_setup+0xb4>)
 8009a16:	f012 f953 	bl	801bcc0 <iprintf>
	
	SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 8009a1a:	22ff      	movs	r2, #255	; 0xff
 8009a1c:	2115      	movs	r1, #21
 8009a1e:	4815      	ldr	r0, [pc, #84]	; (8009a74 <MQTT_setup+0xc0>)
 8009a20:	f7fd fefa 	bl	8007818 <SerialATprintln>
	HAL_Delay(1000);
 8009a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a28:	f005 f862 	bl	800eaf0 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 8009a2c:	490d      	ldr	r1, [pc, #52]	; (8009a64 <MQTT_setup+0xb0>)
 8009a2e:	480e      	ldr	r0, [pc, #56]	; (8009a68 <MQTT_setup+0xb4>)
 8009a30:	f012 f946 	bl	801bcc0 <iprintf>

	SerialATprintln("AT+SMCONN",9,0xff);
 8009a34:	22ff      	movs	r2, #255	; 0xff
 8009a36:	2109      	movs	r1, #9
 8009a38:	480f      	ldr	r0, [pc, #60]	; (8009a78 <MQTT_setup+0xc4>)
 8009a3a:	f7fd feed 	bl	8007818 <SerialATprintln>
	HAL_Delay(1000);
 8009a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a42:	f005 f855 	bl	800eaf0 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 8009a46:	4907      	ldr	r1, [pc, #28]	; (8009a64 <MQTT_setup+0xb0>)
 8009a48:	4807      	ldr	r0, [pc, #28]	; (8009a68 <MQTT_setup+0xb4>)
 8009a4a:	f012 f939 	bl	801bcc0 <iprintf>

	printf("MQTT done\r\n");
 8009a4e:	480b      	ldr	r0, [pc, #44]	; (8009a7c <MQTT_setup+0xc8>)
 8009a50:	f012 f9aa 	bl	801bda8 <puts>
}
 8009a54:	bf00      	nop
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20004285 	.word	0x20004285
 8009a5c:	0801ed04 	.word	0x0801ed04
 8009a60:	0801e850 	.word	0x0801e850
 8009a64:	20006470 	.word	0x20006470
 8009a68:	0801eb58 	.word	0x0801eb58
 8009a6c:	0801e85c 	.word	0x0801e85c
 8009a70:	0801e884 	.word	0x0801e884
 8009a74:	0801e8c0 	.word	0x0801e8c0
 8009a78:	0801e89c 	.word	0x0801e89c
 8009a7c:	0801ed14 	.word	0x0801ed14

08009a80 <LSM6DSL_readRegister>:

void LSM6DSL_readRegister(uint16_t* output, uint8_t i2cReg)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
	uint8_t tbuf[1];
	uint8_t rbuf[2];
	uint16_t out;
	
	tbuf[0] = i2cReg;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,0X6B<<1,tbuf,1,10);
 8009a90:	f107 020c 	add.w	r2, r7, #12
 8009a94:	230a      	movs	r3, #10
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2301      	movs	r3, #1
 8009a9a:	21d6      	movs	r1, #214	; 0xd6
 8009a9c:	480d      	ldr	r0, [pc, #52]	; (8009ad4 <LSM6DSL_readRegister+0x54>)
 8009a9e:	f006 fcfd 	bl	801049c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,0X6B<<1,rbuf,2,10);
 8009aa2:	f107 0208 	add.w	r2, r7, #8
 8009aa6:	230a      	movs	r3, #10
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	2302      	movs	r3, #2
 8009aac:	21d6      	movs	r1, #214	; 0xd6
 8009aae:	4809      	ldr	r0, [pc, #36]	; (8009ad4 <LSM6DSL_readRegister+0x54>)
 8009ab0:	f006 fde8 	bl	8010684 <HAL_I2C_Master_Receive>
	out = ((uint16_t)(rbuf[1] << 8)|(uint16_t)rbuf[0]);
 8009ab4:	7a7b      	ldrb	r3, [r7, #9]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	7a3b      	ldrb	r3, [r7, #8]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	81fb      	strh	r3, [r7, #14]

	*output = out;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	89fa      	ldrh	r2, [r7, #14]
 8009ac8:	801a      	strh	r2, [r3, #0]
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20004550 	.word	0x20004550

08009ad8 <LSM6DSL_setup>:

void LSM6DSL_setup(void)
{
 8009ad8:	b5b0      	push	{r4, r5, r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
	dev_ctx.write_reg = platform_write;
 8009ade:	4b80      	ldr	r3, [pc, #512]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009ae0:	4a80      	ldr	r2, [pc, #512]	; (8009ce4 <LSM6DSL_setup+0x20c>)
 8009ae2:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8009ae4:	4b7e      	ldr	r3, [pc, #504]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009ae6:	4a80      	ldr	r2, [pc, #512]	; (8009ce8 <LSM6DSL_setup+0x210>)
 8009ae8:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 8009aea:	4b7d      	ldr	r3, [pc, #500]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009aec:	4a7f      	ldr	r2, [pc, #508]	; (8009cec <LSM6DSL_setup+0x214>)
 8009aee:	609a      	str	r2, [r3, #8]

	whoamI = 0;
 8009af0:	4b7f      	ldr	r3, [pc, #508]	; (8009cf0 <LSM6DSL_setup+0x218>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&dev_ctx, &whoamI);\
 8009af6:	497e      	ldr	r1, [pc, #504]	; (8009cf0 <LSM6DSL_setup+0x218>)
 8009af8:	4879      	ldr	r0, [pc, #484]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009afa:	f7fc ff4b 	bl	8006994 <lsm6dsl_device_id_get>
	if ( whoamI != LSM6DSL_ID )
 8009afe:	4b7c      	ldr	r3, [pc, #496]	; (8009cf0 <LSM6DSL_setup+0x218>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	2b6a      	cmp	r3, #106	; 0x6a
 8009b04:	d01f      	beq.n	8009b46 <LSM6DSL_setup+0x6e>
	{
		while(whoamI != LSM6DSL_ID)
 8009b06:	e01a      	b.n	8009b3e <LSM6DSL_setup+0x66>
		{
			sprintf((char*)tx_buffer, "Sensor not found\n");
 8009b08:	4a7a      	ldr	r2, [pc, #488]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b0a:	4b7b      	ldr	r3, [pc, #492]	; (8009cf8 <LSM6DSL_setup+0x220>)
 8009b0c:	4615      	mov	r5, r2
 8009b0e:	461c      	mov	r4, r3
 8009b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b12:	6028      	str	r0, [r5, #0]
 8009b14:	6069      	str	r1, [r5, #4]
 8009b16:	60aa      	str	r2, [r5, #8]
 8009b18:	60eb      	str	r3, [r5, #12]
 8009b1a:	8823      	ldrh	r3, [r4, #0]
 8009b1c:	822b      	strh	r3, [r5, #16]
			tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8009b1e:	4875      	ldr	r0, [pc, #468]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b20:	f7f6 fb60 	bl	80001e4 <strlen>
 8009b24:	4603      	mov	r3, r0
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4872      	ldr	r0, [pc, #456]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b2c:	f7fe fc08 	bl	8008340 <tx_com>
			lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8009b30:	496f      	ldr	r1, [pc, #444]	; (8009cf0 <LSM6DSL_setup+0x218>)
 8009b32:	486b      	ldr	r0, [pc, #428]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b34:	f7fc ff2e 	bl	8006994 <lsm6dsl_device_id_get>
			osDelay(20);
 8009b38:	2014      	movs	r0, #20
 8009b3a:	f00e fd7d 	bl	8018638 <osDelay>
		while(whoamI != LSM6DSL_ID)
 8009b3e:	4b6c      	ldr	r3, [pc, #432]	; (8009cf0 <LSM6DSL_setup+0x218>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b6a      	cmp	r3, #106	; 0x6a
 8009b44:	d1e0      	bne.n	8009b08 <LSM6DSL_setup+0x30>
		}
	}
	sprintf((char*)tx_buffer, "Sensor found\n");
 8009b46:	4a6b      	ldr	r2, [pc, #428]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b48:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <LSM6DSL_setup+0x224>)
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b4e:	6020      	str	r0, [r4, #0]
 8009b50:	6061      	str	r1, [r4, #4]
 8009b52:	60a2      	str	r2, [r4, #8]
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	81a3      	strh	r3, [r4, #12]
	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8009b58:	4866      	ldr	r0, [pc, #408]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b5a:	f7f6 fb43 	bl	80001e4 <strlen>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	4619      	mov	r1, r3
 8009b64:	4863      	ldr	r0, [pc, #396]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009b66:	f7fe fbeb 	bl	8008340 <tx_com>

	lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	485c      	ldr	r0, [pc, #368]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b6e:	f7fc ff22 	bl	80069b6 <lsm6dsl_reset_set>
	do {
		lsm6dsl_reset_get(&dev_ctx, &rst);
 8009b72:	4963      	ldr	r1, [pc, #396]	; (8009d00 <LSM6DSL_setup+0x228>)
 8009b74:	485a      	ldr	r0, [pc, #360]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b76:	f7fc ff44 	bl	8006a02 <lsm6dsl_reset_get>
	} while (rst);
 8009b7a:	4b61      	ldr	r3, [pc, #388]	; (8009d00 <LSM6DSL_setup+0x228>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f7      	bne.n	8009b72 <LSM6DSL_setup+0x9a>

	lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8009b82:	2101      	movs	r1, #1
 8009b84:	4856      	ldr	r0, [pc, #344]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b86:	f7fc fe75 	bl	8006874 <lsm6dsl_block_data_update_set>

	lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_416Hz);
 8009b8a:	2106      	movs	r1, #6
 8009b8c:	4854      	ldr	r0, [pc, #336]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b8e:	f7fc fdff 	bl	8006790 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_416Hz);
 8009b92:	2106      	movs	r1, #6
 8009b94:	4852      	ldr	r0, [pc, #328]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b96:	f7fc fe47 	bl	8006828 <lsm6dsl_gy_data_rate_set>

	lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_2g);
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4850      	ldr	r0, [pc, #320]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009b9e:	f7fc fdd1 	bl	8006744 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_2000dps);
 8009ba2:	2106      	movs	r1, #6
 8009ba4:	484e      	ldr	r0, [pc, #312]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009ba6:	f7fc fe19 	bl	80067dc <lsm6dsl_gy_full_scale_set>

	lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8009baa:	2101      	movs	r1, #1
 8009bac:	484c      	ldr	r0, [pc, #304]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bae:	f7fc ff41 	bl	8006a34 <lsm6dsl_xl_filter_analog_set>

	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8009bb2:	2111      	movs	r1, #17
 8009bb4:	484a      	ldr	r0, [pc, #296]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bb6:	f7fc ff63 	bl	8006a80 <lsm6dsl_xl_lp2_bandwidth_set>

	lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8009bba:	21a8      	movs	r1, #168	; 0xa8
 8009bbc:	4848      	ldr	r0, [pc, #288]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bbe:	f7fc ff96 	bl	8006aee <lsm6dsl_gy_band_pass_set>

	lsm6dsl_wrist_tilt_sens_set(&dev_ctx, PROPERTY_ENABLE);
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4846      	ldr	r0, [pc, #280]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bc6:	f7fd fbd2 	bl	800736e <lsm6dsl_wrist_tilt_sens_set>
	lsm6dsl_tilt_sens_set(&dev_ctx, PROPERTY_ENABLE);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4844      	ldr	r0, [pc, #272]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bce:	f7fd fb9d 	bl	800730c <lsm6dsl_tilt_sens_set>
	lsm6dsl_motion_sens_set(&dev_ctx, PROPERTY_ENABLE);
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	4842      	ldr	r0, [pc, #264]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bd6:	f7fd fb68 	bl	80072aa <lsm6dsl_motion_sens_set>
	lsm6dsl_all_on_int1_set(&dev_ctx, PROPERTY_ENABLE);
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4840      	ldr	r0, [pc, #256]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bde:	f7fd f957 	bl	8006e90 <lsm6dsl_all_on_int1_set>
	lsm6dsl_tap_detection_on_x_set(&dev_ctx, PROPERTY_ENABLE);
 8009be2:	2101      	movs	r1, #1
 8009be4:	483e      	ldr	r0, [pc, #248]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009be6:	f7fd fa11 	bl	800700c <lsm6dsl_tap_detection_on_x_set>
	lsm6dsl_tap_detection_on_y_set(&dev_ctx, PROPERTY_ENABLE);
 8009bea:	2101      	movs	r1, #1
 8009bec:	483c      	ldr	r0, [pc, #240]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bee:	f7fd f9e7 	bl	8006fc0 <lsm6dsl_tap_detection_on_y_set>
	lsm6dsl_tap_detection_on_z_set(&dev_ctx, PROPERTY_ENABLE);
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	483a      	ldr	r0, [pc, #232]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bf6:	f7fd f9bd 	bl	8006f74 <lsm6dsl_tap_detection_on_z_set>
	lsm6dsl_tap_threshold_x_set(&dev_ctx, 0x08);
 8009bfa:	2108      	movs	r1, #8
 8009bfc:	4838      	ldr	r0, [pc, #224]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009bfe:	f7fd fa2b 	bl	8007058 <lsm6dsl_tap_threshold_x_set>
	lsm6dsl_tap_shock_set(&dev_ctx, 0x03);
 8009c02:	2103      	movs	r1, #3
 8009c04:	4836      	ldr	r0, [pc, #216]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c06:	f7fd fa4d 	bl	80070a4 <lsm6dsl_tap_shock_set>
	lsm6dsl_tap_quiet_set(&dev_ctx, 0x03);
 8009c0a:	2103      	movs	r1, #3
 8009c0c:	4834      	ldr	r0, [pc, #208]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c0e:	f7fd fa6f 	bl	80070f0 <lsm6dsl_tap_quiet_set>
	lsm6dsl_tap_dur_set(&dev_ctx, 0x08);
 8009c12:	2108      	movs	r1, #8
 8009c14:	4832      	ldr	r0, [pc, #200]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c16:	f7fd fa91 	bl	800713c <lsm6dsl_tap_dur_set>
	lsm6dsl_tap_mode_set(&dev_ctx, LSM6DSL_BOTH_SINGLE_DOUBLE);
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	4830      	ldr	r0, [pc, #192]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c1e:	f7fd fab3 	bl	8007188 <lsm6dsl_tap_mode_set>
	lsm6dsl_ff_dur_set(&dev_ctx, 0x06);
 8009c22:	2106      	movs	r1, #6
 8009c24:	482e      	ldr	r0, [pc, #184]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c26:	f7fd fad5 	bl	80071d4 <lsm6dsl_ff_dur_set>
	lsm6dsl_wkup_dur_set(&dev_ctx, 0x00);
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	482c      	ldr	r0, [pc, #176]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c2e:	f7fd f955 	bl	8006edc <lsm6dsl_wkup_dur_set>
	lsm6dsl_timestamp_res_set(&dev_ctx, LSM6DSL_LSB_6ms4);
 8009c32:	2100      	movs	r1, #0
 8009c34:	482a      	ldr	r0, [pc, #168]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c36:	f7fc fe54 	bl	80068e2 <lsm6dsl_timestamp_res_set>
	lsm6dsl_act_sleep_dur_set(&dev_ctx, 0x00);
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4828      	ldr	r0, [pc, #160]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c3e:	f7fd f973 	bl	8006f28 <lsm6dsl_act_sleep_dur_set>
	lsm6dsl_ff_threshold_set(&dev_ctx, LSM6DSL_FF_TSH_312mg);
 8009c42:	2103      	movs	r1, #3
 8009c44:	4826      	ldr	r0, [pc, #152]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009c46:	f7fd fb0a 	bl	800725e <lsm6dsl_ff_threshold_set>

	lsm6dsl_int1_route_t prop;
	prop.int1_boot = PROPERTY_DISABLE;
 8009c4a:	793b      	ldrb	r3, [r7, #4]
 8009c4c:	f36f 0382 	bfc	r3, #2, #1
 8009c50:	713b      	strb	r3, [r7, #4]
	prop.int1_fth = PROPERTY_DISABLE;
 8009c52:	793b      	ldrb	r3, [r7, #4]
 8009c54:	f36f 03c3 	bfc	r3, #3, #1
 8009c58:	713b      	strb	r3, [r7, #4]
	prop.int1_full_flag = PROPERTY_DISABLE;
 8009c5a:	793b      	ldrb	r3, [r7, #4]
 8009c5c:	f36f 1345 	bfc	r3, #5, #1
 8009c60:	713b      	strb	r3, [r7, #4]
	prop.int1_timer = PROPERTY_DISABLE;
 8009c62:	797b      	ldrb	r3, [r7, #5]
 8009c64:	f36f 0300 	bfc	r3, #0, #1
 8009c68:	717b      	strb	r3, [r7, #5]
	prop.int1_ff = PROPERTY_ENABLE;
 8009c6a:	797b      	ldrb	r3, [r7, #5]
 8009c6c:	f043 0310 	orr.w	r3, r3, #16
 8009c70:	717b      	strb	r3, [r7, #5]
	prop.int1_double_tap = PROPERTY_ENABLE;
 8009c72:	797b      	ldrb	r3, [r7, #5]
 8009c74:	f043 0308 	orr.w	r3, r3, #8
 8009c78:	717b      	strb	r3, [r7, #5]
	prop.int1_sign_mot = PROPERTY_ENABLE;
 8009c7a:	793b      	ldrb	r3, [r7, #4]
 8009c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c80:	713b      	strb	r3, [r7, #4]
	prop.int1_step_detector = PROPERTY_ENABLE;
 8009c82:	793b      	ldrb	r3, [r7, #4]
 8009c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c88:	713b      	strb	r3, [r7, #4]
	prop.int1_tilt = PROPERTY_ENABLE;
 8009c8a:	797b      	ldrb	r3, [r7, #5]
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	717b      	strb	r3, [r7, #5]
	prop.int1_wu = PROPERTY_DISABLE;
 8009c92:	797b      	ldrb	r3, [r7, #5]
 8009c94:	f36f 1345 	bfc	r3, #5, #1
 8009c98:	717b      	strb	r3, [r7, #5]
	prop.int1_6d = PROPERTY_DISABLE;
 8009c9a:	797b      	ldrb	r3, [r7, #5]
 8009c9c:	f36f 0382 	bfc	r3, #2, #1
 8009ca0:	717b      	strb	r3, [r7, #5]

	lsm6dsl_pin_int1_route_set(&dev_ctx, prop);
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	480e      	ldr	r0, [pc, #56]	; (8009ce0 <LSM6DSL_setup+0x208>)
 8009ca6:	f7fc ff90 	bl	8006bca <lsm6dsl_pin_int1_route_set>

	sprintf((char*)tx_buffer, "Sensor configured\n");
 8009caa:	4a12      	ldr	r2, [pc, #72]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009cac:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <LSM6DSL_setup+0x22c>)
 8009cae:	4615      	mov	r5, r2
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cb4:	6028      	str	r0, [r5, #0]
 8009cb6:	6069      	str	r1, [r5, #4]
 8009cb8:	60aa      	str	r2, [r5, #8]
 8009cba:	60eb      	str	r3, [r5, #12]
 8009cbc:	8823      	ldrh	r3, [r4, #0]
 8009cbe:	78a2      	ldrb	r2, [r4, #2]
 8009cc0:	822b      	strh	r3, [r5, #16]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	74ab      	strb	r3, [r5, #18]
	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 8009cc6:	480b      	ldr	r0, [pc, #44]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009cc8:	f7f6 fa8c 	bl	80001e4 <strlen>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4808      	ldr	r0, [pc, #32]	; (8009cf4 <LSM6DSL_setup+0x21c>)
 8009cd4:	f7fe fb34 	bl	8008340 <tx_com>
}
 8009cd8:	bf00      	nop
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce0:	200042fc 	.word	0x200042fc
 8009ce4:	08008369 	.word	0x08008369
 8009ce8:	080083a3 	.word	0x080083a3
 8009cec:	20004550 	.word	0x20004550
 8009cf0:	20000634 	.word	0x20000634
 8009cf4:	200068bc 	.word	0x200068bc
 8009cf8:	0801ed20 	.word	0x0801ed20
 8009cfc:	0801ed34 	.word	0x0801ed34
 8009d00:	20000635 	.word	0x20000635
 8009d04:	0801ed44 	.word	0x0801ed44

08009d08 <read_instant_mk6n>:
		  		  f_close(&fil);
		  	  }
	  }
}

void read_instant_mk6n(){
 8009d08:	b5b0      	push	{r4, r5, r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 8009d0e:	f7f7 f9e9 	bl	80010e4 <dataallclearMK6N>
	loginToMeterRTOS();
 8009d12:	f7fb ff99 	bl	8005c48 <loginToMeterRTOS>
	int cmpint = strcmp(snMeter, "00000000");
 8009d16:	4b93      	ldr	r3, [pc, #588]	; (8009f64 <read_instant_mk6n+0x25c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4993      	ldr	r1, [pc, #588]	; (8009f68 <read_instant_mk6n+0x260>)
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7f6 fa57 	bl	80001d0 <strcmp>
 8009d22:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <read_instant_mk6n+0x26>
 8009d2a:	f001 fc9f 	bl	800b66c <read_sn_edmi>
	SerialMonprintln("Read Instant MK6N");
 8009d2e:	488f      	ldr	r0, [pc, #572]	; (8009f6c <read_instant_mk6n+0x264>)
 8009d30:	f7fb ff3c 	bl	8005bac <SerialMonprintln>
	dataallclearMK6N();
 8009d34:	f7f7 f9d6 	bl	80010e4 <dataallclearMK6N>
	uart2done=false;
 8009d38:	4b8d      	ldr	r3, [pc, #564]	; (8009f70 <read_instant_mk6n+0x268>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 8009d3e:	4b8d      	ldr	r3, [pc, #564]	; (8009f74 <read_instant_mk6n+0x26c>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
	uart3done=false;
 8009d44:	4b8c      	ldr	r3, [pc, #560]	; (8009f78 <read_instant_mk6n+0x270>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
	memset(mydata,0,1100);
 8009d4a:	f240 424c 	movw	r2, #1100	; 0x44c
 8009d4e:	2100      	movs	r1, #0
 8009d50:	488a      	ldr	r0, [pc, #552]	; (8009f7c <read_instant_mk6n+0x274>)
 8009d52:	f011 faa8 	bl	801b2a6 <memset>
	memset(uart3_temp,0,1100);
 8009d56:	f240 424c 	movw	r2, #1100	; 0x44c
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4888      	ldr	r0, [pc, #544]	; (8009f80 <read_instant_mk6n+0x278>)
 8009d5e:	f011 faa2 	bl	801b2a6 <memset>
	memset(buffer3,0,1100);
 8009d62:	f240 424c 	movw	r2, #1100	; 0x44c
 8009d66:	2100      	movs	r1, #0
 8009d68:	4886      	ldr	r0, [pc, #536]	; (8009f84 <read_instant_mk6n+0x27c>)
 8009d6a:	f011 fa9c 	bl	801b2a6 <memset>
	for(int x=0;x<3;x++){
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	e09f      	b.n	8009eb4 <read_instant_mk6n+0x1ac>
		txInstantMK6N(x);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7f7 fc23 	bl	80015c0 <txInstantMK6N>
		for(int y=0;y<20;y++){
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60bb      	str	r3, [r7, #8]
 8009d7e:	e00d      	b.n	8009d9c <read_instant_mk6n+0x94>
			osDelay(200);
 8009d80:	20c8      	movs	r0, #200	; 0xc8
 8009d82:	f00e fc59 	bl	8018638 <osDelay>
			if(uart3done){
 8009d86:	4b7c      	ldr	r3, [pc, #496]	; (8009f78 <read_instant_mk6n+0x270>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <read_instant_mk6n+0x8e>
				uart3disc = false;
 8009d8e:	4b79      	ldr	r3, [pc, #484]	; (8009f74 <read_instant_mk6n+0x26c>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
				break;
 8009d94:	e005      	b.n	8009da2 <read_instant_mk6n+0x9a>
		for(int y=0;y<20;y++){
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	60bb      	str	r3, [r7, #8]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b13      	cmp	r3, #19
 8009da0:	ddee      	ble.n	8009d80 <read_instant_mk6n+0x78>
			}
		}
		memset(mydata,0,1100);
 8009da2:	f240 424c 	movw	r2, #1100	; 0x44c
 8009da6:	2100      	movs	r1, #0
 8009da8:	4874      	ldr	r0, [pc, #464]	; (8009f7c <read_instant_mk6n+0x274>)
 8009daa:	f011 fa7c 	bl	801b2a6 <memset>
		if (!uart3disc) parsingDataRawInstantMK6N(buffer3,datauart3size(buffer3),x);
 8009dae:	4b71      	ldr	r3, [pc, #452]	; (8009f74 <read_instant_mk6n+0x26c>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f083 0301 	eor.w	r3, r3, #1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <read_instant_mk6n+0xc8>
 8009dbc:	4871      	ldr	r0, [pc, #452]	; (8009f84 <read_instant_mk6n+0x27c>)
 8009dbe:	f7fe fa5f 	bl	8008280 <datauart3size>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	486e      	ldr	r0, [pc, #440]	; (8009f84 <read_instant_mk6n+0x27c>)
 8009dca:	f7f7 fc51 	bl	8001670 <parsingDataRawInstantMK6N>
 8009dce:	e068      	b.n	8009ea2 <read_instant_mk6n+0x19a>
		  else {
				memset((char *)mydata,0,1100);
 8009dd0:	f240 424c 	movw	r2, #1100	; 0x44c
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4869      	ldr	r0, [pc, #420]	; (8009f7c <read_instant_mk6n+0x274>)
 8009dd8:	f011 fa65 	bl	801b2a6 <memset>
				sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 8009ddc:	4b6a      	ldr	r3, [pc, #424]	; (8009f88 <read_instant_mk6n+0x280>)
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	4b60      	ldr	r3, [pc, #384]	; (8009f64 <read_instant_mk6n+0x25c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	4969      	ldr	r1, [pc, #420]	; (8009f8c <read_instant_mk6n+0x284>)
 8009de8:	f011 fff6 	bl	801bdd8 <siprintf>
				strcat(temp_data, (char*)csq);
 8009dec:	4b66      	ldr	r3, [pc, #408]	; (8009f88 <read_instant_mk6n+0x280>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4967      	ldr	r1, [pc, #412]	; (8009f90 <read_instant_mk6n+0x288>)
 8009df2:	4618      	mov	r0, r3
 8009df4:	f012 f810 	bl	801be18 <strcat>
				strcat(temp_data,"\"");
 8009df8:	4b63      	ldr	r3, [pc, #396]	; (8009f88 <read_instant_mk6n+0x280>)
 8009dfa:	681c      	ldr	r4, [r3, #0]
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f7f6 f9f1 	bl	80001e4 <strlen>
 8009e02:	4603      	mov	r3, r0
 8009e04:	4423      	add	r3, r4
 8009e06:	4963      	ldr	r1, [pc, #396]	; (8009f94 <read_instant_mk6n+0x28c>)
 8009e08:	461a      	mov	r2, r3
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	8013      	strh	r3, [r2, #0]
			  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 8009e10:	4b61      	ldr	r3, [pc, #388]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a61      	ldr	r2, [pc, #388]	; (8009f9c <read_instant_mk6n+0x294>)
 8009e16:	461c      	mov	r4, r3
 8009e18:	4615      	mov	r5, r2
 8009e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e1c:	6020      	str	r0, [r4, #0]
 8009e1e:	6061      	str	r1, [r4, #4]
 8009e20:	60a2      	str	r2, [r4, #8]
 8009e22:	60e3      	str	r3, [r4, #12]
 8009e24:	6828      	ldr	r0, [r5, #0]
 8009e26:	6120      	str	r0, [r4, #16]
 8009e28:	88ab      	ldrh	r3, [r5, #4]
 8009e2a:	79aa      	ldrb	r2, [r5, #6]
 8009e2c:	82a3      	strh	r3, [r4, #20]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	75a3      	strb	r3, [r4, #22]
				strcat(temp_data, temp_data2);
 8009e32:	4b55      	ldr	r3, [pc, #340]	; (8009f88 <read_instant_mk6n+0x280>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b58      	ldr	r3, [pc, #352]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f011 ffeb 	bl	801be18 <strcat>
			  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 8009e42:	4b55      	ldr	r3, [pc, #340]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e44:	681c      	ldr	r4, [r3, #0]
 8009e46:	4b56      	ldr	r3, [pc, #344]	; (8009fa0 <read_instant_mk6n+0x298>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f6 fb8c 	bl	8000568 <__aeabi_f2d>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4953      	ldr	r1, [pc, #332]	; (8009fa4 <read_instant_mk6n+0x29c>)
 8009e56:	4620      	mov	r0, r4
 8009e58:	f011 ffbe 	bl	801bdd8 <siprintf>
				strcat(temp_data, temp_data2);
 8009e5c:	4b4a      	ldr	r3, [pc, #296]	; (8009f88 <read_instant_mk6n+0x280>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4b4d      	ldr	r3, [pc, #308]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f011 ffd6 	bl	801be18 <strcat>
				sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 8009e6c:	4b4a      	ldr	r3, [pc, #296]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	4b4d      	ldr	r3, [pc, #308]	; (8009fa8 <read_instant_mk6n+0x2a0>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	494d      	ldr	r1, [pc, #308]	; (8009fac <read_instant_mk6n+0x2a4>)
 8009e78:	f011 ffae 	bl	801bdd8 <siprintf>
				strcat(temp_data, temp_data2);
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <read_instant_mk6n+0x280>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	4b45      	ldr	r3, [pc, #276]	; (8009f98 <read_instant_mk6n+0x290>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f011 ffc6 	bl	801be18 <strcat>
				strcpy(mydata,temp_data);
 8009e8c:	4b3e      	ldr	r3, [pc, #248]	; (8009f88 <read_instant_mk6n+0x280>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4619      	mov	r1, r3
 8009e92:	483a      	ldr	r0, [pc, #232]	; (8009f7c <read_instant_mk6n+0x274>)
 8009e94:	f011 ffcf 	bl	801be36 <strcpy>
				cnt_instant++;
 8009e98:	4b45      	ldr	r3, [pc, #276]	; (8009fb0 <read_instant_mk6n+0x2a8>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	4a44      	ldr	r2, [pc, #272]	; (8009fb0 <read_instant_mk6n+0x2a8>)
 8009ea0:	6013      	str	r3, [r2, #0]
			}
		memset(buffer3,0,1000);
 8009ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	4836      	ldr	r0, [pc, #216]	; (8009f84 <read_instant_mk6n+0x27c>)
 8009eaa:	f011 f9fc 	bl	801b2a6 <memset>
	for(int x=0;x<3;x++){
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	f77f af5c 	ble.w	8009d74 <read_instant_mk6n+0x6c>
	}
	decodeJsonInstantMK6N(mydata);
 8009ebc:	482f      	ldr	r0, [pc, #188]	; (8009f7c <read_instant_mk6n+0x274>)
 8009ebe:	f7f7 fc31 	bl	8001724 <decodeJsonInstantMK6N>
	printf(mydata);
 8009ec2:	482e      	ldr	r0, [pc, #184]	; (8009f7c <read_instant_mk6n+0x274>)
 8009ec4:	f011 fefc 	bl	801bcc0 <iprintf>
	csqint = 1;
 8009ec8:	4b3a      	ldr	r3, [pc, #232]	; (8009fb4 <read_instant_mk6n+0x2ac>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 8009ece:	4b3a      	ldr	r3, [pc, #232]	; (8009fb8 <read_instant_mk6n+0x2b0>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 8009ed4:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <read_instant_mk6n+0x2ac>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <read_instant_mk6n+0x1dc>
 8009edc:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <read_instant_mk6n+0x2b0>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <read_instant_mk6n+0x1e4>
//		printf("online True\r\n");
		onlineMode = true;
 8009ee4:	4b35      	ldr	r3, [pc, #212]	; (8009fbc <read_instant_mk6n+0x2b4>)
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e007      	b.n	8009efc <read_instant_mk6n+0x1f4>
	}
	else {
		onlineMode = false;
 8009eec:	4b33      	ldr	r3, [pc, #204]	; (8009fbc <read_instant_mk6n+0x2b4>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 8009ef2:	4b33      	ldr	r3, [pc, #204]	; (8009fc0 <read_instant_mk6n+0x2b8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	4a31      	ldr	r2, [pc, #196]	; (8009fc0 <read_instant_mk6n+0x2b8>)
 8009efa:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 8009efc:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <read_instant_mk6n+0x2b4>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d019      	beq.n	8009f38 <read_instant_mk6n+0x230>
		if(usemqtt){
 8009f04:	4b2f      	ldr	r3, [pc, #188]	; (8009fc4 <read_instant_mk6n+0x2bc>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00c      	beq.n	8009f26 <read_instant_mk6n+0x21e>
			len_mydata=bufsizechararray(mydata);
 8009f0c:	481b      	ldr	r0, [pc, #108]	; (8009f7c <read_instant_mk6n+0x274>)
 8009f0e:	f7fe f9cf 	bl	80082b0 <bufsizechararray>
 8009f12:	4602      	mov	r2, r0
 8009f14:	4b2c      	ldr	r3, [pc, #176]	; (8009fc8 <read_instant_mk6n+0x2c0>)
 8009f16:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 8009f18:	f7fe fa60 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 8009f1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f20:	f00e fb8a 	bl	8018638 <osDelay>
			net_err_cnt=0;
			osDelay(5000);
			setup_modem();
		}
	}
}
 8009f24:	e01a      	b.n	8009f5c <read_instant_mk6n+0x254>
		else sendToServer(mydata,bufsizechararray(mydata));
 8009f26:	4815      	ldr	r0, [pc, #84]	; (8009f7c <read_instant_mk6n+0x274>)
 8009f28:	f7fe f9c2 	bl	80082b0 <bufsizechararray>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4812      	ldr	r0, [pc, #72]	; (8009f7c <read_instant_mk6n+0x274>)
 8009f32:	f7fd fe6d 	bl	8007c10 <sendToServer>
}
 8009f36:	e011      	b.n	8009f5c <read_instant_mk6n+0x254>
		if(net_err_cnt >= 3) {
 8009f38:	4b21      	ldr	r3, [pc, #132]	; (8009fc0 <read_instant_mk6n+0x2b8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	dd0d      	ble.n	8009f5c <read_instant_mk6n+0x254>
			printf("Restart Modem \r\n");
 8009f40:	4822      	ldr	r0, [pc, #136]	; (8009fcc <read_instant_mk6n+0x2c4>)
 8009f42:	f011 ff31 	bl	801bda8 <puts>
			NB_rst1_rtos();
 8009f46:	f7ff fb2d 	bl	80095a4 <NB_rst1_rtos>
			net_err_cnt=0;
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <read_instant_mk6n+0x2b8>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 8009f50:	f241 3088 	movw	r0, #5000	; 0x1388
 8009f54:	f00e fb70 	bl	8018638 <osDelay>
			setup_modem();
 8009f58:	f7fd fdcc 	bl	8007af4 <setup_modem>
}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}
 8009f64:	20000188 	.word	0x20000188
 8009f68:	0801e9b4 	.word	0x0801e9b4
 8009f6c:	0801edf8 	.word	0x0801edf8
 8009f70:	20003fe4 	.word	0x20003fe4
 8009f74:	2000430d 	.word	0x2000430d
 8009f78:	200042f8 	.word	0x200042f8
 8009f7c:	200046c8 	.word	0x200046c8
 8009f80:	20005324 	.word	0x20005324
 8009f84:	200095e0 	.word	0x200095e0
 8009f88:	200045f4 	.word	0x200045f4
 8009f8c:	0801ee0c 	.word	0x0801ee0c
 8009f90:	2000905c 	.word	0x2000905c
 8009f94:	0801e4fc 	.word	0x0801e4fc
 8009f98:	20008a00 	.word	0x20008a00
 8009f9c:	0801ee3c 	.word	0x0801ee3c
 8009fa0:	20005770 	.word	0x20005770
 8009fa4:	0801ea28 	.word	0x0801ea28
 8009fa8:	2000b510 	.word	0x2000b510
 8009fac:	0801ea38 	.word	0x0801ea38
 8009fb0:	20000638 	.word	0x20000638
 8009fb4:	20008a04 	.word	0x20008a04
 8009fb8:	200045f0 	.word	0x200045f0
 8009fbc:	20000013 	.word	0x20000013
 8009fc0:	20002758 	.word	0x20002758
 8009fc4:	20004285 	.word	0x20004285
 8009fc8:	20009124 	.word	0x20009124
 8009fcc:	0801ee54 	.word	0x0801ee54

08009fd0 <read_eob_mk6n>:

void read_eob_mk6n(){
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 8009fd6:	f7fb fe37 	bl	8005c48 <loginToMeterRTOS>
	dataallclearMK6N();
 8009fda:	f7f7 f883 	bl	80010e4 <dataallclearMK6N>
	memset(mydata,0,1100);
 8009fde:	f240 424c 	movw	r2, #1100	; 0x44c
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4875      	ldr	r0, [pc, #468]	; (800a1bc <read_eob_mk6n+0x1ec>)
 8009fe6:	f011 f95e 	bl	801b2a6 <memset>
	osDelay(1000);
 8009fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fee:	f00e fb23 	bl	8018638 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 8009ff2:	4b73      	ldr	r3, [pc, #460]	; (800a1c0 <read_eob_mk6n+0x1f0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4973      	ldr	r1, [pc, #460]	; (800a1c4 <read_eob_mk6n+0x1f4>)
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f6 f8e9 	bl	80001d0 <strcmp>
 8009ffe:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <read_eob_mk6n+0x3a>
 800a006:	f001 fb31 	bl	800b66c <read_sn_edmi>
	SerialMonprintln("Read EoB init MK6N");
 800a00a:	486f      	ldr	r0, [pc, #444]	; (800a1c8 <read_eob_mk6n+0x1f8>)
 800a00c:	f7fb fdce 	bl	8005bac <SerialMonprintln>
	uart3disc = true;
 800a010:	4b6e      	ldr	r3, [pc, #440]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a012:	2201      	movs	r2, #1
 800a014:	701a      	strb	r2, [r3, #0]
	uart3done=false;
 800a016:	4b6e      	ldr	r3, [pc, #440]	; (800a1d0 <read_eob_mk6n+0x200>)
 800a018:	2200      	movs	r2, #0
 800a01a:	701a      	strb	r2, [r3, #0]
	txEoBInit1();
 800a01c:	f7f8 febc 	bl	8002d98 <txEoBInit1>
	for(int y=0;y<20;y++){
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e00d      	b.n	800a042 <read_eob_mk6n+0x72>
		osDelay(200);
 800a026:	20c8      	movs	r0, #200	; 0xc8
 800a028:	f00e fb06 	bl	8018638 <osDelay>
		if(uart3done){
 800a02c:	4b68      	ldr	r3, [pc, #416]	; (800a1d0 <read_eob_mk6n+0x200>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <read_eob_mk6n+0x6c>
			uart3disc = false;
 800a034:	4b65      	ldr	r3, [pc, #404]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
			break;
 800a03a:	e005      	b.n	800a048 <read_eob_mk6n+0x78>
	for(int y=0;y<20;y++){
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b13      	cmp	r3, #19
 800a046:	ddee      	ble.n	800a026 <read_eob_mk6n+0x56>
		}
	}
	if (!uart3disc) rxEoBInit1(buffer3,datauart3size(buffer3));
 800a048:	4b60      	ldr	r3, [pc, #384]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f083 0301 	eor.w	r3, r3, #1
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d008      	beq.n	800a068 <read_eob_mk6n+0x98>
 800a056:	485f      	ldr	r0, [pc, #380]	; (800a1d4 <read_eob_mk6n+0x204>)
 800a058:	f7fe f912 	bl	8008280 <datauart3size>
 800a05c:	4603      	mov	r3, r0
 800a05e:	4619      	mov	r1, r3
 800a060:	485c      	ldr	r0, [pc, #368]	; (800a1d4 <read_eob_mk6n+0x204>)
 800a062:	f7f8 feb5 	bl	8002dd0 <rxEoBInit1>
 800a066:	e068      	b.n	800a13a <read_eob_mk6n+0x16a>
	  else {
			memset((char *)mydata,0,1100);
 800a068:	f240 424c 	movw	r2, #1100	; 0x44c
 800a06c:	2100      	movs	r1, #0
 800a06e:	4853      	ldr	r0, [pc, #332]	; (800a1bc <read_eob_mk6n+0x1ec>)
 800a070:	f011 f919 	bl	801b2a6 <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a074:	4b58      	ldr	r3, [pc, #352]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a076:	6818      	ldr	r0, [r3, #0]
 800a078:	4b51      	ldr	r3, [pc, #324]	; (800a1c0 <read_eob_mk6n+0x1f0>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	461a      	mov	r2, r3
 800a07e:	4957      	ldr	r1, [pc, #348]	; (800a1dc <read_eob_mk6n+0x20c>)
 800a080:	f011 feaa 	bl	801bdd8 <siprintf>
			strcat(temp_data, (char*)csq);
 800a084:	4b54      	ldr	r3, [pc, #336]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4955      	ldr	r1, [pc, #340]	; (800a1e0 <read_eob_mk6n+0x210>)
 800a08a:	4618      	mov	r0, r3
 800a08c:	f011 fec4 	bl	801be18 <strcat>
			strcat(temp_data,"\"");
 800a090:	4b51      	ldr	r3, [pc, #324]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a092:	681c      	ldr	r4, [r3, #0]
 800a094:	4620      	mov	r0, r4
 800a096:	f7f6 f8a5 	bl	80001e4 <strlen>
 800a09a:	4603      	mov	r3, r0
 800a09c:	4423      	add	r3, r4
 800a09e:	4951      	ldr	r1, [pc, #324]	; (800a1e4 <read_eob_mk6n+0x214>)
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a0a8:	4b4f      	ldr	r3, [pc, #316]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a4f      	ldr	r2, [pc, #316]	; (800a1ec <read_eob_mk6n+0x21c>)
 800a0ae:	461c      	mov	r4, r3
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0b4:	6020      	str	r0, [r4, #0]
 800a0b6:	6061      	str	r1, [r4, #4]
 800a0b8:	60a2      	str	r2, [r4, #8]
 800a0ba:	60e3      	str	r3, [r4, #12]
 800a0bc:	6828      	ldr	r0, [r5, #0]
 800a0be:	6120      	str	r0, [r4, #16]
 800a0c0:	88ab      	ldrh	r3, [r5, #4]
 800a0c2:	79aa      	ldrb	r2, [r5, #6]
 800a0c4:	82a3      	strh	r3, [r4, #20]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	75a3      	strb	r3, [r4, #22]
			strcat(temp_data, temp_data2);
 800a0ca:	4b43      	ldr	r3, [pc, #268]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	4b46      	ldr	r3, [pc, #280]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f011 fe9f 	bl	801be18 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a0da:	4b43      	ldr	r3, [pc, #268]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a0dc:	681c      	ldr	r4, [r3, #0]
 800a0de:	4b44      	ldr	r3, [pc, #272]	; (800a1f0 <read_eob_mk6n+0x220>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 fa40 	bl	8000568 <__aeabi_f2d>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4941      	ldr	r1, [pc, #260]	; (800a1f4 <read_eob_mk6n+0x224>)
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f011 fe72 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a0f4:	4b38      	ldr	r3, [pc, #224]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	4b3b      	ldr	r3, [pc, #236]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f011 fe8a 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a104:	4b38      	ldr	r3, [pc, #224]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	4b3b      	ldr	r3, [pc, #236]	; (800a1f8 <read_eob_mk6n+0x228>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	461a      	mov	r2, r3
 800a10e:	493b      	ldr	r1, [pc, #236]	; (800a1fc <read_eob_mk6n+0x22c>)
 800a110:	f011 fe62 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a114:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4b33      	ldr	r3, [pc, #204]	; (800a1e8 <read_eob_mk6n+0x218>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f011 fe7a 	bl	801be18 <strcat>
			strcpy(mydata,temp_data);
 800a124:	4b2c      	ldr	r3, [pc, #176]	; (800a1d8 <read_eob_mk6n+0x208>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4619      	mov	r1, r3
 800a12a:	4824      	ldr	r0, [pc, #144]	; (800a1bc <read_eob_mk6n+0x1ec>)
 800a12c:	f011 fe83 	bl	801be36 <strcpy>
			cnt_eob++;
 800a130:	4b33      	ldr	r3, [pc, #204]	; (800a200 <read_eob_mk6n+0x230>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	4a32      	ldr	r2, [pc, #200]	; (800a200 <read_eob_mk6n+0x230>)
 800a138:	6013      	str	r3, [r2, #0]
		}
	memset(buffer3,0,1000);
 800a13a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a13e:	2100      	movs	r1, #0
 800a140:	4824      	ldr	r0, [pc, #144]	; (800a1d4 <read_eob_mk6n+0x204>)
 800a142:	f011 f8b0 	bl	801b2a6 <memset>
//	HAL_Delay(1000);
	SerialMonprintln("Read EoB MK6N");
 800a146:	482f      	ldr	r0, [pc, #188]	; (800a204 <read_eob_mk6n+0x234>)
 800a148:	f7fb fd30 	bl	8005bac <SerialMonprintln>
	memset(mydata,0,1100);
 800a14c:	f240 424c 	movw	r2, #1100	; 0x44c
 800a150:	2100      	movs	r1, #0
 800a152:	481a      	ldr	r0, [pc, #104]	; (800a1bc <read_eob_mk6n+0x1ec>)
 800a154:	f011 f8a7 	bl	801b2a6 <memset>
	for(int i=0;i<9;i++){
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]
 800a15c:	e0c6      	b.n	800a2ec <read_eob_mk6n+0x31c>
		uart3disc = true;
 800a15e:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a160:	2201      	movs	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800a164:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <read_eob_mk6n+0x200>)
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
		readEoB2(i);
 800a16a:	68b8      	ldr	r0, [r7, #8]
 800a16c:	f7f8 fcfa 	bl	8002b64 <readEoB2>
		for(int y=0;y<20;y++){
 800a170:	2300      	movs	r3, #0
 800a172:	607b      	str	r3, [r7, #4]
 800a174:	e00d      	b.n	800a192 <read_eob_mk6n+0x1c2>
			osDelay(200);
 800a176:	20c8      	movs	r0, #200	; 0xc8
 800a178:	f00e fa5e 	bl	8018638 <osDelay>
			if(uart3done){
 800a17c:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <read_eob_mk6n+0x200>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <read_eob_mk6n+0x1bc>
				uart3disc = false;
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
				break;
 800a18a:	e005      	b.n	800a198 <read_eob_mk6n+0x1c8>
		for(int y=0;y<20;y++){
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3301      	adds	r3, #1
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b13      	cmp	r3, #19
 800a196:	ddee      	ble.n	800a176 <read_eob_mk6n+0x1a6>
			}
		}
		if (!uart3disc) readEoB3(buffer3,datauart3size(buffer3),i);
 800a198:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <read_eob_mk6n+0x1fc>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	f083 0301 	eor.w	r3, r3, #1
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d030      	beq.n	800a208 <read_eob_mk6n+0x238>
 800a1a6:	480b      	ldr	r0, [pc, #44]	; (800a1d4 <read_eob_mk6n+0x204>)
 800a1a8:	f7fe f86a 	bl	8008280 <datauart3size>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4808      	ldr	r0, [pc, #32]	; (800a1d4 <read_eob_mk6n+0x204>)
 800a1b4:	f7f8 fd36 	bl	8002c24 <readEoB3>
 800a1b8:	e08f      	b.n	800a2da <read_eob_mk6n+0x30a>
 800a1ba:	bf00      	nop
 800a1bc:	200046c8 	.word	0x200046c8
 800a1c0:	20000188 	.word	0x20000188
 800a1c4:	0801e9b4 	.word	0x0801e9b4
 800a1c8:	0801ee64 	.word	0x0801ee64
 800a1cc:	2000430d 	.word	0x2000430d
 800a1d0:	200042f8 	.word	0x200042f8
 800a1d4:	200095e0 	.word	0x200095e0
 800a1d8:	200045f4 	.word	0x200045f4
 800a1dc:	0801ee0c 	.word	0x0801ee0c
 800a1e0:	2000905c 	.word	0x2000905c
 800a1e4:	0801e4fc 	.word	0x0801e4fc
 800a1e8:	20008a00 	.word	0x20008a00
 800a1ec:	0801ee3c 	.word	0x0801ee3c
 800a1f0:	20005770 	.word	0x20005770
 800a1f4:	0801ea28 	.word	0x0801ea28
 800a1f8:	2000b510 	.word	0x2000b510
 800a1fc:	0801ea38 	.word	0x0801ea38
 800a200:	2000063c 	.word	0x2000063c
 800a204:	0801ee78 	.word	0x0801ee78
		  else {
				memset((char *)mydata,0,1100);
 800a208:	f240 424c 	movw	r2, #1100	; 0x44c
 800a20c:	2100      	movs	r1, #0
 800a20e:	4867      	ldr	r0, [pc, #412]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a210:	f011 f849 	bl	801b2a6 <memset>
				sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a214:	4b66      	ldr	r3, [pc, #408]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	4b66      	ldr	r3, [pc, #408]	; (800a3b4 <read_eob_mk6n+0x3e4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	4966      	ldr	r1, [pc, #408]	; (800a3b8 <read_eob_mk6n+0x3e8>)
 800a220:	f011 fdda 	bl	801bdd8 <siprintf>
				strcat(temp_data, (char*)csq);
 800a224:	4b62      	ldr	r3, [pc, #392]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4964      	ldr	r1, [pc, #400]	; (800a3bc <read_eob_mk6n+0x3ec>)
 800a22a:	4618      	mov	r0, r3
 800a22c:	f011 fdf4 	bl	801be18 <strcat>
				strcat(temp_data,"\"");
 800a230:	4b5f      	ldr	r3, [pc, #380]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a232:	681c      	ldr	r4, [r3, #0]
 800a234:	4620      	mov	r0, r4
 800a236:	f7f5 ffd5 	bl	80001e4 <strlen>
 800a23a:	4603      	mov	r3, r0
 800a23c:	4423      	add	r3, r4
 800a23e:	4960      	ldr	r1, [pc, #384]	; (800a3c0 <read_eob_mk6n+0x3f0>)
 800a240:	461a      	mov	r2, r3
 800a242:	460b      	mov	r3, r1
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	8013      	strh	r3, [r2, #0]
			  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a248:	4b5e      	ldr	r3, [pc, #376]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a5e      	ldr	r2, [pc, #376]	; (800a3c8 <read_eob_mk6n+0x3f8>)
 800a24e:	461c      	mov	r4, r3
 800a250:	4615      	mov	r5, r2
 800a252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a254:	6020      	str	r0, [r4, #0]
 800a256:	6061      	str	r1, [r4, #4]
 800a258:	60a2      	str	r2, [r4, #8]
 800a25a:	60e3      	str	r3, [r4, #12]
 800a25c:	6828      	ldr	r0, [r5, #0]
 800a25e:	6120      	str	r0, [r4, #16]
 800a260:	88ab      	ldrh	r3, [r5, #4]
 800a262:	79aa      	ldrb	r2, [r5, #6]
 800a264:	82a3      	strh	r3, [r4, #20]
 800a266:	4613      	mov	r3, r2
 800a268:	75a3      	strb	r3, [r4, #22]
				strcat(temp_data, temp_data2);
 800a26a:	4b51      	ldr	r3, [pc, #324]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b55      	ldr	r3, [pc, #340]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f011 fdcf 	bl	801be18 <strcat>
			  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a27a:	4b52      	ldr	r3, [pc, #328]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a27c:	681c      	ldr	r4, [r3, #0]
 800a27e:	4b53      	ldr	r3, [pc, #332]	; (800a3cc <read_eob_mk6n+0x3fc>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7f6 f970 	bl	8000568 <__aeabi_f2d>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4950      	ldr	r1, [pc, #320]	; (800a3d0 <read_eob_mk6n+0x400>)
 800a28e:	4620      	mov	r0, r4
 800a290:	f011 fda2 	bl	801bdd8 <siprintf>
				strcat(temp_data, temp_data2);
 800a294:	4b46      	ldr	r3, [pc, #280]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f011 fdba 	bl	801be18 <strcat>
				sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a2a4:	4b47      	ldr	r3, [pc, #284]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	4b4a      	ldr	r3, [pc, #296]	; (800a3d4 <read_eob_mk6n+0x404>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	494a      	ldr	r1, [pc, #296]	; (800a3d8 <read_eob_mk6n+0x408>)
 800a2b0:	f011 fd92 	bl	801bdd8 <siprintf>
				strcat(temp_data, temp_data2);
 800a2b4:	4b3e      	ldr	r3, [pc, #248]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b42      	ldr	r3, [pc, #264]	; (800a3c4 <read_eob_mk6n+0x3f4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f011 fdaa 	bl	801be18 <strcat>
				strcpy(mydata,temp_data);
 800a2c4:	4b3a      	ldr	r3, [pc, #232]	; (800a3b0 <read_eob_mk6n+0x3e0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4838      	ldr	r0, [pc, #224]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a2cc:	f011 fdb3 	bl	801be36 <strcpy>
				cnt_eob++;
 800a2d0:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <read_eob_mk6n+0x40c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	4a41      	ldr	r2, [pc, #260]	; (800a3dc <read_eob_mk6n+0x40c>)
 800a2d8:	6013      	str	r3, [r2, #0]
			}
		memset(buffer3,0,1000);
 800a2da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2de:	2100      	movs	r1, #0
 800a2e0:	483f      	ldr	r0, [pc, #252]	; (800a3e0 <read_eob_mk6n+0x410>)
 800a2e2:	f010 ffe0 	bl	801b2a6 <memset>
	for(int i=0;i<9;i++){
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60bb      	str	r3, [r7, #8]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	f77f af35 	ble.w	800a15e <read_eob_mk6n+0x18e>
	}
	if(!uart3disc) decodeEoB3(mydata);
 800a2f4:	4b3b      	ldr	r3, [pc, #236]	; (800a3e4 <read_eob_mk6n+0x414>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f083 0301 	eor.w	r3, r3, #1
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <read_eob_mk6n+0x338>
 800a302:	482a      	ldr	r0, [pc, #168]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a304:	f7f8 fd1a 	bl	8002d3c <decodeEoB3>

	printf(mydata);
 800a308:	4828      	ldr	r0, [pc, #160]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a30a:	f011 fcd9 	bl	801bcc0 <iprintf>
	csqint = 1;
 800a30e:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <read_eob_mk6n+0x418>)
 800a310:	2201      	movs	r2, #1
 800a312:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800a314:	4b35      	ldr	r3, [pc, #212]	; (800a3ec <read_eob_mk6n+0x41c>)
 800a316:	2201      	movs	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800a31a:	4b33      	ldr	r3, [pc, #204]	; (800a3e8 <read_eob_mk6n+0x418>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <read_eob_mk6n+0x35a>
 800a322:	4b32      	ldr	r3, [pc, #200]	; (800a3ec <read_eob_mk6n+0x41c>)
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <read_eob_mk6n+0x362>
//		printf("online True\r\n");
		onlineMode = true;
 800a32a:	4b31      	ldr	r3, [pc, #196]	; (800a3f0 <read_eob_mk6n+0x420>)
 800a32c:	2201      	movs	r2, #1
 800a32e:	701a      	strb	r2, [r3, #0]
 800a330:	e007      	b.n	800a342 <read_eob_mk6n+0x372>
	}
	else {
		onlineMode = false;
 800a332:	4b2f      	ldr	r3, [pc, #188]	; (800a3f0 <read_eob_mk6n+0x420>)
 800a334:	2200      	movs	r2, #0
 800a336:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800a338:	4b2e      	ldr	r3, [pc, #184]	; (800a3f4 <read_eob_mk6n+0x424>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	4a2d      	ldr	r2, [pc, #180]	; (800a3f4 <read_eob_mk6n+0x424>)
 800a340:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800a342:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <read_eob_mk6n+0x420>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d019      	beq.n	800a37e <read_eob_mk6n+0x3ae>
		if(usemqtt){
 800a34a:	4b2b      	ldr	r3, [pc, #172]	; (800a3f8 <read_eob_mk6n+0x428>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00c      	beq.n	800a36c <read_eob_mk6n+0x39c>
			len_mydata=bufsizechararray(mydata);
 800a352:	4816      	ldr	r0, [pc, #88]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a354:	f7fd ffac 	bl	80082b0 <bufsizechararray>
 800a358:	4602      	mov	r2, r0
 800a35a:	4b28      	ldr	r3, [pc, #160]	; (800a3fc <read_eob_mk6n+0x42c>)
 800a35c:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 800a35e:	f7fe f83d 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 800a362:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a366:	f00e f967 	bl	8018638 <osDelay>
			net_err_cnt=0;
			osDelay(5000);
			setup_modem();
		}
	}
}
 800a36a:	e01a      	b.n	800a3a2 <read_eob_mk6n+0x3d2>
		else sendToServer(mydata,bufsizechararray(mydata));
 800a36c:	480f      	ldr	r0, [pc, #60]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a36e:	f7fd ff9f 	bl	80082b0 <bufsizechararray>
 800a372:	4603      	mov	r3, r0
 800a374:	4619      	mov	r1, r3
 800a376:	480d      	ldr	r0, [pc, #52]	; (800a3ac <read_eob_mk6n+0x3dc>)
 800a378:	f7fd fc4a 	bl	8007c10 <sendToServer>
}
 800a37c:	e011      	b.n	800a3a2 <read_eob_mk6n+0x3d2>
		if(net_err_cnt >= 3) {
 800a37e:	4b1d      	ldr	r3, [pc, #116]	; (800a3f4 <read_eob_mk6n+0x424>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b02      	cmp	r3, #2
 800a384:	dd0d      	ble.n	800a3a2 <read_eob_mk6n+0x3d2>
			printf("Restart Modem \r\n");
 800a386:	481e      	ldr	r0, [pc, #120]	; (800a400 <read_eob_mk6n+0x430>)
 800a388:	f011 fd0e 	bl	801bda8 <puts>
			NB_rst1_rtos();
 800a38c:	f7ff f90a 	bl	80095a4 <NB_rst1_rtos>
			net_err_cnt=0;
 800a390:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <read_eob_mk6n+0x424>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 800a396:	f241 3088 	movw	r0, #5000	; 0x1388
 800a39a:	f00e f94d 	bl	8018638 <osDelay>
			setup_modem();
 800a39e:	f7fd fba9 	bl	8007af4 <setup_modem>
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200046c8 	.word	0x200046c8
 800a3b0:	200045f4 	.word	0x200045f4
 800a3b4:	20000188 	.word	0x20000188
 800a3b8:	0801ee0c 	.word	0x0801ee0c
 800a3bc:	2000905c 	.word	0x2000905c
 800a3c0:	0801e4fc 	.word	0x0801e4fc
 800a3c4:	20008a00 	.word	0x20008a00
 800a3c8:	0801ee3c 	.word	0x0801ee3c
 800a3cc:	20005770 	.word	0x20005770
 800a3d0:	0801ea28 	.word	0x0801ea28
 800a3d4:	2000b510 	.word	0x2000b510
 800a3d8:	0801ea38 	.word	0x0801ea38
 800a3dc:	2000063c 	.word	0x2000063c
 800a3e0:	200095e0 	.word	0x200095e0
 800a3e4:	2000430d 	.word	0x2000430d
 800a3e8:	20008a04 	.word	0x20008a04
 800a3ec:	200045f0 	.word	0x200045f0
 800a3f0:	20000013 	.word	0x20000013
 800a3f4:	20002758 	.word	0x20002758
 800a3f8:	20004285 	.word	0x20004285
 800a3fc:	20009124 	.word	0x20009124
 800a400:	0801ee54 	.word	0x0801ee54

0800a404 <read_lp_mk6n>:

void read_lp_mk6n(){
 800a404:	b5b0      	push	{r4, r5, r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
	  dataallclearMK6N();
 800a40a:	f7f6 fe6b 	bl	80010e4 <dataallclearMK6N>
	  loginToMeterRTOS();
 800a40e:	f7fb fc1b 	bl	8005c48 <loginToMeterRTOS>
	  dataallclearMK6N();
 800a412:	f7f6 fe67 	bl	80010e4 <dataallclearMK6N>
	  osDelay(1000);
 800a416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a41a:	f00e f90d 	bl	8018638 <osDelay>
	  int cmpint = strcmp(snMeter, "00000000");
 800a41e:	4bb0      	ldr	r3, [pc, #704]	; (800a6e0 <read_lp_mk6n+0x2dc>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	49b0      	ldr	r1, [pc, #704]	; (800a6e4 <read_lp_mk6n+0x2e0>)
 800a424:	4618      	mov	r0, r3
 800a426:	f7f5 fed3 	bl	80001d0 <strcmp>
 800a42a:	6038      	str	r0, [r7, #0]
	  if(cmpint == 0) read_sn_edmi();
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <read_lp_mk6n+0x32>
 800a432:	f001 f91b 	bl	800b66c <read_sn_edmi>
	  SerialMonprintln("Read LP MK6N");
 800a436:	48ac      	ldr	r0, [pc, #688]	; (800a6e8 <read_lp_mk6n+0x2e4>)
 800a438:	f7fb fbb8 	bl	8005bac <SerialMonprintln>
	  memset(mydata,0,1100);
 800a43c:	f240 424c 	movw	r2, #1100	; 0x44c
 800a440:	2100      	movs	r1, #0
 800a442:	48aa      	ldr	r0, [pc, #680]	; (800a6ec <read_lp_mk6n+0x2e8>)
 800a444:	f010 ff2f 	bl	801b2a6 <memset>
	  uart3disc = true;
 800a448:	4ba9      	ldr	r3, [pc, #676]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]
	  uart3done=false;
 800a44e:	4ba9      	ldr	r3, [pc, #676]	; (800a6f4 <read_lp_mk6n+0x2f0>)
 800a450:	2200      	movs	r2, #0
 800a452:	701a      	strb	r2, [r3, #0]
	  txlpInit1MK6N();
 800a454:	f7f7 ff7a 	bl	800234c <txlpInit1MK6N>
	  for(int y=0;y<20;y++){
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e00d      	b.n	800a47a <read_lp_mk6n+0x76>
			osDelay(200);
 800a45e:	20c8      	movs	r0, #200	; 0xc8
 800a460:	f00e f8ea 	bl	8018638 <osDelay>
			if(uart3done){
 800a464:	4ba3      	ldr	r3, [pc, #652]	; (800a6f4 <read_lp_mk6n+0x2f0>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <read_lp_mk6n+0x70>
				uart3disc = false;
 800a46c:	4ba0      	ldr	r3, [pc, #640]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
				break;
 800a472:	e005      	b.n	800a480 <read_lp_mk6n+0x7c>
	  for(int y=0;y<20;y++){
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	3301      	adds	r3, #1
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b13      	cmp	r3, #19
 800a47e:	ddee      	ble.n	800a45e <read_lp_mk6n+0x5a>
			}
	  }
	  if(!uart3disc){
 800a480:	4b9b      	ldr	r3, [pc, #620]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	f083 0301 	eor.w	r3, r3, #1
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d008      	beq.n	800a4a0 <read_lp_mk6n+0x9c>
		  rxlpInit1MK6N(buffer3,datauart3size(buffer3));
 800a48e:	489a      	ldr	r0, [pc, #616]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a490:	f7fd fef6 	bl	8008280 <datauart3size>
 800a494:	4603      	mov	r3, r0
 800a496:	4619      	mov	r1, r3
 800a498:	4897      	ldr	r0, [pc, #604]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a49a:	f7f7 ff9f 	bl	80023dc <rxlpInit1MK6N>
 800a49e:	e068      	b.n	800a572 <read_lp_mk6n+0x16e>
	  }
	  else {
			memset((char *)mydata,0,1100);
 800a4a0:	f240 424c 	movw	r2, #1100	; 0x44c
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4891      	ldr	r0, [pc, #580]	; (800a6ec <read_lp_mk6n+0x2e8>)
 800a4a8:	f010 fefd 	bl	801b2a6 <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a4ac:	4b93      	ldr	r3, [pc, #588]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a4ae:	6818      	ldr	r0, [r3, #0]
 800a4b0:	4b8b      	ldr	r3, [pc, #556]	; (800a6e0 <read_lp_mk6n+0x2dc>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4992      	ldr	r1, [pc, #584]	; (800a700 <read_lp_mk6n+0x2fc>)
 800a4b8:	f011 fc8e 	bl	801bdd8 <siprintf>
			strcat(temp_data, (char*)csq);
 800a4bc:	4b8f      	ldr	r3, [pc, #572]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4990      	ldr	r1, [pc, #576]	; (800a704 <read_lp_mk6n+0x300>)
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f011 fca8 	bl	801be18 <strcat>
			strcat(temp_data,"\"");
 800a4c8:	4b8c      	ldr	r3, [pc, #560]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a4ca:	681c      	ldr	r4, [r3, #0]
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7f5 fe89 	bl	80001e4 <strlen>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4423      	add	r3, r4
 800a4d6:	498c      	ldr	r1, [pc, #560]	; (800a708 <read_lp_mk6n+0x304>)
 800a4d8:	461a      	mov	r2, r3
 800a4da:	460b      	mov	r3, r1
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a4e0:	4b8a      	ldr	r3, [pc, #552]	; (800a70c <read_lp_mk6n+0x308>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a8a      	ldr	r2, [pc, #552]	; (800a710 <read_lp_mk6n+0x30c>)
 800a4e6:	461c      	mov	r4, r3
 800a4e8:	4615      	mov	r5, r2
 800a4ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ec:	6020      	str	r0, [r4, #0]
 800a4ee:	6061      	str	r1, [r4, #4]
 800a4f0:	60a2      	str	r2, [r4, #8]
 800a4f2:	60e3      	str	r3, [r4, #12]
 800a4f4:	6828      	ldr	r0, [r5, #0]
 800a4f6:	6120      	str	r0, [r4, #16]
 800a4f8:	88ab      	ldrh	r3, [r5, #4]
 800a4fa:	79aa      	ldrb	r2, [r5, #6]
 800a4fc:	82a3      	strh	r3, [r4, #20]
 800a4fe:	4613      	mov	r3, r2
 800a500:	75a3      	strb	r3, [r4, #22]
			strcat(temp_data, temp_data2);
 800a502:	4b7e      	ldr	r3, [pc, #504]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4b81      	ldr	r3, [pc, #516]	; (800a70c <read_lp_mk6n+0x308>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f011 fc83 	bl	801be18 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a512:	4b7e      	ldr	r3, [pc, #504]	; (800a70c <read_lp_mk6n+0x308>)
 800a514:	681c      	ldr	r4, [r3, #0]
 800a516:	4b7f      	ldr	r3, [pc, #508]	; (800a714 <read_lp_mk6n+0x310>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f6 f824 	bl	8000568 <__aeabi_f2d>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	497c      	ldr	r1, [pc, #496]	; (800a718 <read_lp_mk6n+0x314>)
 800a526:	4620      	mov	r0, r4
 800a528:	f011 fc56 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a52c:	4b73      	ldr	r3, [pc, #460]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b76      	ldr	r3, [pc, #472]	; (800a70c <read_lp_mk6n+0x308>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f011 fc6e 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a53c:	4b73      	ldr	r3, [pc, #460]	; (800a70c <read_lp_mk6n+0x308>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4b76      	ldr	r3, [pc, #472]	; (800a71c <read_lp_mk6n+0x318>)
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	4976      	ldr	r1, [pc, #472]	; (800a720 <read_lp_mk6n+0x31c>)
 800a548:	f011 fc46 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a54c:	4b6b      	ldr	r3, [pc, #428]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b6e      	ldr	r3, [pc, #440]	; (800a70c <read_lp_mk6n+0x308>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4619      	mov	r1, r3
 800a556:	4610      	mov	r0, r2
 800a558:	f011 fc5e 	bl	801be18 <strcat>
			strcpy(mydata,temp_data);
 800a55c:	4b67      	ldr	r3, [pc, #412]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	4862      	ldr	r0, [pc, #392]	; (800a6ec <read_lp_mk6n+0x2e8>)
 800a564:	f011 fc67 	bl	801be36 <strcpy>
			cnt_lp++;
 800a568:	4b6e      	ldr	r3, [pc, #440]	; (800a724 <read_lp_mk6n+0x320>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3301      	adds	r3, #1
 800a56e:	4a6d      	ldr	r2, [pc, #436]	; (800a724 <read_lp_mk6n+0x320>)
 800a570:	6013      	str	r3, [r2, #0]
		}

		memset(buffer3,0,1100);
 800a572:	f240 424c 	movw	r2, #1100	; 0x44c
 800a576:	2100      	movs	r1, #0
 800a578:	485f      	ldr	r0, [pc, #380]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a57a:	f010 fe94 	bl	801b2a6 <memset>
		uart3disc = true;
 800a57e:	4b5c      	ldr	r3, [pc, #368]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a580:	2201      	movs	r2, #1
 800a582:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800a584:	4b5b      	ldr	r3, [pc, #364]	; (800a6f4 <read_lp_mk6n+0x2f0>)
 800a586:	2200      	movs	r2, #0
 800a588:	701a      	strb	r2, [r3, #0]
	  txlpMK6NInit2();
 800a58a:	f7f7 ffcd 	bl	8002528 <txlpMK6NInit2>
	  for(int y=0;y<20;y++){
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	e00d      	b.n	800a5b0 <read_lp_mk6n+0x1ac>
		osDelay(200);
 800a594:	20c8      	movs	r0, #200	; 0xc8
 800a596:	f00e f84f 	bl	8018638 <osDelay>
		if(uart3done){
 800a59a:	4b56      	ldr	r3, [pc, #344]	; (800a6f4 <read_lp_mk6n+0x2f0>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <read_lp_mk6n+0x1a6>
			uart3disc = false;
 800a5a2:	4b53      	ldr	r3, [pc, #332]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
			break;
 800a5a8:	e005      	b.n	800a5b6 <read_lp_mk6n+0x1b2>
	  for(int y=0;y<20;y++){
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	613b      	str	r3, [r7, #16]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b13      	cmp	r3, #19
 800a5b4:	ddee      	ble.n	800a594 <read_lp_mk6n+0x190>
		}
	  }
	  if(!uart3disc){
 800a5b6:	4b4e      	ldr	r3, [pc, #312]	; (800a6f0 <read_lp_mk6n+0x2ec>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	f083 0301 	eor.w	r3, r3, #1
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d014      	beq.n	800a5ee <read_lp_mk6n+0x1ea>
		  rxlpMK6NInit2(buffer3,datauart3size(buffer3));
 800a5c4:	484c      	ldr	r0, [pc, #304]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a5c6:	f7fd fe5b 	bl	8008280 <datauart3size>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	484a      	ldr	r0, [pc, #296]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a5d0:	f7f8 f812 	bl	80025f8 <rxlpMK6NInit2>
		  memset(buffer3,0,1100);
 800a5d4:	f240 424c 	movw	r2, #1100	; 0x44c
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4847      	ldr	r0, [pc, #284]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a5dc:	f010 fe63 	bl	801b2a6 <memset>
		  jmlChMK6N = getJumlahChannelMK6N();
 800a5e0:	f7f8 f842 	bl	8002668 <getJumlahChannelMK6N>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	4b4f      	ldr	r3, [pc, #316]	; (800a728 <read_lp_mk6n+0x324>)
 800a5ea:	701a      	strb	r2, [r3, #0]
 800a5ec:	e068      	b.n	800a6c0 <read_lp_mk6n+0x2bc>
	  }
	  else {
			memset((char *)mydata,0,1100);
 800a5ee:	f240 424c 	movw	r2, #1100	; 0x44c
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	483d      	ldr	r0, [pc, #244]	; (800a6ec <read_lp_mk6n+0x2e8>)
 800a5f6:	f010 fe56 	bl	801b2a6 <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a5fa:	4b40      	ldr	r3, [pc, #256]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a5fc:	6818      	ldr	r0, [r3, #0]
 800a5fe:	4b38      	ldr	r3, [pc, #224]	; (800a6e0 <read_lp_mk6n+0x2dc>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	493e      	ldr	r1, [pc, #248]	; (800a700 <read_lp_mk6n+0x2fc>)
 800a606:	f011 fbe7 	bl	801bdd8 <siprintf>
			strcat(temp_data, (char*)csq);
 800a60a:	4b3c      	ldr	r3, [pc, #240]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	493d      	ldr	r1, [pc, #244]	; (800a704 <read_lp_mk6n+0x300>)
 800a610:	4618      	mov	r0, r3
 800a612:	f011 fc01 	bl	801be18 <strcat>
			strcat(temp_data,"\"");
 800a616:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a618:	681c      	ldr	r4, [r3, #0]
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7f5 fde2 	bl	80001e4 <strlen>
 800a620:	4603      	mov	r3, r0
 800a622:	4423      	add	r3, r4
 800a624:	4938      	ldr	r1, [pc, #224]	; (800a708 <read_lp_mk6n+0x304>)
 800a626:	461a      	mov	r2, r3
 800a628:	460b      	mov	r3, r1
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a62e:	4b37      	ldr	r3, [pc, #220]	; (800a70c <read_lp_mk6n+0x308>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a37      	ldr	r2, [pc, #220]	; (800a710 <read_lp_mk6n+0x30c>)
 800a634:	461c      	mov	r4, r3
 800a636:	4615      	mov	r5, r2
 800a638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a63a:	6020      	str	r0, [r4, #0]
 800a63c:	6061      	str	r1, [r4, #4]
 800a63e:	60a2      	str	r2, [r4, #8]
 800a640:	60e3      	str	r3, [r4, #12]
 800a642:	6828      	ldr	r0, [r5, #0]
 800a644:	6120      	str	r0, [r4, #16]
 800a646:	88ab      	ldrh	r3, [r5, #4]
 800a648:	79aa      	ldrb	r2, [r5, #6]
 800a64a:	82a3      	strh	r3, [r4, #20]
 800a64c:	4613      	mov	r3, r2
 800a64e:	75a3      	strb	r3, [r4, #22]
			strcat(temp_data, temp_data2);
 800a650:	4b2a      	ldr	r3, [pc, #168]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b2d      	ldr	r3, [pc, #180]	; (800a70c <read_lp_mk6n+0x308>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	4610      	mov	r0, r2
 800a65c:	f011 fbdc 	bl	801be18 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a660:	4b2a      	ldr	r3, [pc, #168]	; (800a70c <read_lp_mk6n+0x308>)
 800a662:	681c      	ldr	r4, [r3, #0]
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <read_lp_mk6n+0x310>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7f5 ff7d 	bl	8000568 <__aeabi_f2d>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4929      	ldr	r1, [pc, #164]	; (800a718 <read_lp_mk6n+0x314>)
 800a674:	4620      	mov	r0, r4
 800a676:	f011 fbaf 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a67a:	4b20      	ldr	r3, [pc, #128]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	4b23      	ldr	r3, [pc, #140]	; (800a70c <read_lp_mk6n+0x308>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f011 fbc7 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a68a:	4b20      	ldr	r3, [pc, #128]	; (800a70c <read_lp_mk6n+0x308>)
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	4b23      	ldr	r3, [pc, #140]	; (800a71c <read_lp_mk6n+0x318>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	4922      	ldr	r1, [pc, #136]	; (800a720 <read_lp_mk6n+0x31c>)
 800a696:	f011 fb9f 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a69a:	4b18      	ldr	r3, [pc, #96]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <read_lp_mk6n+0x308>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f011 fbb7 	bl	801be18 <strcat>
			strcpy(mydata,temp_data);
 800a6aa:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <read_lp_mk6n+0x2f8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	480e      	ldr	r0, [pc, #56]	; (800a6ec <read_lp_mk6n+0x2e8>)
 800a6b2:	f011 fbc0 	bl	801be36 <strcpy>
			cnt_lp++;
 800a6b6:	4b1b      	ldr	r3, [pc, #108]	; (800a724 <read_lp_mk6n+0x320>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	4a19      	ldr	r2, [pc, #100]	; (800a724 <read_lp_mk6n+0x320>)
 800a6be:	6013      	str	r3, [r2, #0]
		}
	  memset(buffer3,0,1100);
 800a6c0:	f240 424c 	movw	r2, #1100	; 0x44c
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	480c      	ldr	r0, [pc, #48]	; (800a6f8 <read_lp_mk6n+0x2f4>)
 800a6c8:	f010 fded 	bl	801b2a6 <memset>
	  jmlChMK6N = getJumlahChannelMK6N();
 800a6cc:	f7f7 ffcc 	bl	8002668 <getJumlahChannelMK6N>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	4b14      	ldr	r3, [pc, #80]	; (800a728 <read_lp_mk6n+0x324>)
 800a6d6:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(500);
//	  readlpMK6NInit2a();
	  for(int i=0;i<jmlChMK6N;i++){
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	e0c6      	b.n	800a86c <read_lp_mk6n+0x468>
 800a6de:	bf00      	nop
 800a6e0:	20000188 	.word	0x20000188
 800a6e4:	0801e9b4 	.word	0x0801e9b4
 800a6e8:	0801ee88 	.word	0x0801ee88
 800a6ec:	200046c8 	.word	0x200046c8
 800a6f0:	2000430d 	.word	0x2000430d
 800a6f4:	200042f8 	.word	0x200042f8
 800a6f8:	200095e0 	.word	0x200095e0
 800a6fc:	200045f4 	.word	0x200045f4
 800a700:	0801ee0c 	.word	0x0801ee0c
 800a704:	2000905c 	.word	0x2000905c
 800a708:	0801e4fc 	.word	0x0801e4fc
 800a70c:	20008a00 	.word	0x20008a00
 800a710:	0801ee3c 	.word	0x0801ee3c
 800a714:	20005770 	.word	0x20005770
 800a718:	0801ea28 	.word	0x0801ea28
 800a71c:	2000b510 	.word	0x2000b510
 800a720:	0801ea38 	.word	0x0801ea38
 800a724:	20000640 	.word	0x20000640
 800a728:	200045f1 	.word	0x200045f1
			uart3disc = true;
 800a72c:	4b7d      	ldr	r3, [pc, #500]	; (800a924 <read_lp_mk6n+0x520>)
 800a72e:	2201      	movs	r2, #1
 800a730:	701a      	strb	r2, [r3, #0]
			uart3done=false;
 800a732:	4b7d      	ldr	r3, [pc, #500]	; (800a928 <read_lp_mk6n+0x524>)
 800a734:	2200      	movs	r2, #0
 800a736:	701a      	strb	r2, [r3, #0]
		txlpMK6NInit2a(i);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7f7 ffa1 	bl	8002680 <txlpMK6NInit2a>
		for(int y=0;y<20;y++){
 800a73e:	2300      	movs	r3, #0
 800a740:	60bb      	str	r3, [r7, #8]
 800a742:	e00d      	b.n	800a760 <read_lp_mk6n+0x35c>
			osDelay(200);
 800a744:	20c8      	movs	r0, #200	; 0xc8
 800a746:	f00d ff77 	bl	8018638 <osDelay>
			if(uart3done){
 800a74a:	4b77      	ldr	r3, [pc, #476]	; (800a928 <read_lp_mk6n+0x524>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <read_lp_mk6n+0x356>
				uart3disc = false;
 800a752:	4b74      	ldr	r3, [pc, #464]	; (800a924 <read_lp_mk6n+0x520>)
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
				break;
 800a758:	e005      	b.n	800a766 <read_lp_mk6n+0x362>
		for(int y=0;y<20;y++){
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	3301      	adds	r3, #1
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b13      	cmp	r3, #19
 800a764:	ddee      	ble.n	800a744 <read_lp_mk6n+0x340>
			}
		}
		if(!uart3disc){
 800a766:	4b6f      	ldr	r3, [pc, #444]	; (800a924 <read_lp_mk6n+0x520>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f083 0301 	eor.w	r3, r3, #1
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <read_lp_mk6n+0x384>
		rxlpMK6NInit2a(buffer3,datauart3size(buffer3),i);
 800a774:	486d      	ldr	r0, [pc, #436]	; (800a92c <read_lp_mk6n+0x528>)
 800a776:	f7fd fd83 	bl	8008280 <datauart3size>
 800a77a:	4603      	mov	r3, r0
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	4619      	mov	r1, r3
 800a780:	486a      	ldr	r0, [pc, #424]	; (800a92c <read_lp_mk6n+0x528>)
 800a782:	f7f7 ffdf 	bl	8002744 <rxlpMK6NInit2a>
 800a786:	e068      	b.n	800a85a <read_lp_mk6n+0x456>
		}
		else {
			memset((char *)mydata,0,1100);
 800a788:	f240 424c 	movw	r2, #1100	; 0x44c
 800a78c:	2100      	movs	r1, #0
 800a78e:	4868      	ldr	r0, [pc, #416]	; (800a930 <read_lp_mk6n+0x52c>)
 800a790:	f010 fd89 	bl	801b2a6 <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a794:	4b67      	ldr	r3, [pc, #412]	; (800a934 <read_lp_mk6n+0x530>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	4b67      	ldr	r3, [pc, #412]	; (800a938 <read_lp_mk6n+0x534>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	4967      	ldr	r1, [pc, #412]	; (800a93c <read_lp_mk6n+0x538>)
 800a7a0:	f011 fb1a 	bl	801bdd8 <siprintf>
			strcat(temp_data, (char*)csq);
 800a7a4:	4b63      	ldr	r3, [pc, #396]	; (800a934 <read_lp_mk6n+0x530>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4965      	ldr	r1, [pc, #404]	; (800a940 <read_lp_mk6n+0x53c>)
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f011 fb34 	bl	801be18 <strcat>
			strcat(temp_data,"\"");
 800a7b0:	4b60      	ldr	r3, [pc, #384]	; (800a934 <read_lp_mk6n+0x530>)
 800a7b2:	681c      	ldr	r4, [r3, #0]
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7f5 fd15 	bl	80001e4 <strlen>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4423      	add	r3, r4
 800a7be:	4961      	ldr	r1, [pc, #388]	; (800a944 <read_lp_mk6n+0x540>)
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a7c8:	4b5f      	ldr	r3, [pc, #380]	; (800a948 <read_lp_mk6n+0x544>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a5f      	ldr	r2, [pc, #380]	; (800a94c <read_lp_mk6n+0x548>)
 800a7ce:	461c      	mov	r4, r3
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7d4:	6020      	str	r0, [r4, #0]
 800a7d6:	6061      	str	r1, [r4, #4]
 800a7d8:	60a2      	str	r2, [r4, #8]
 800a7da:	60e3      	str	r3, [r4, #12]
 800a7dc:	6828      	ldr	r0, [r5, #0]
 800a7de:	6120      	str	r0, [r4, #16]
 800a7e0:	88ab      	ldrh	r3, [r5, #4]
 800a7e2:	79aa      	ldrb	r2, [r5, #6]
 800a7e4:	82a3      	strh	r3, [r4, #20]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	75a3      	strb	r3, [r4, #22]
			strcat(temp_data, temp_data2);
 800a7ea:	4b52      	ldr	r3, [pc, #328]	; (800a934 <read_lp_mk6n+0x530>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	4b56      	ldr	r3, [pc, #344]	; (800a948 <read_lp_mk6n+0x544>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f011 fb0f 	bl	801be18 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a7fa:	4b53      	ldr	r3, [pc, #332]	; (800a948 <read_lp_mk6n+0x544>)
 800a7fc:	681c      	ldr	r4, [r3, #0]
 800a7fe:	4b54      	ldr	r3, [pc, #336]	; (800a950 <read_lp_mk6n+0x54c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f7f5 feb0 	bl	8000568 <__aeabi_f2d>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4951      	ldr	r1, [pc, #324]	; (800a954 <read_lp_mk6n+0x550>)
 800a80e:	4620      	mov	r0, r4
 800a810:	f011 fae2 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a814:	4b47      	ldr	r3, [pc, #284]	; (800a934 <read_lp_mk6n+0x530>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b4b      	ldr	r3, [pc, #300]	; (800a948 <read_lp_mk6n+0x544>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f011 fafa 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a824:	4b48      	ldr	r3, [pc, #288]	; (800a948 <read_lp_mk6n+0x544>)
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	4b4b      	ldr	r3, [pc, #300]	; (800a958 <read_lp_mk6n+0x554>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	494b      	ldr	r1, [pc, #300]	; (800a95c <read_lp_mk6n+0x558>)
 800a830:	f011 fad2 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a834:	4b3f      	ldr	r3, [pc, #252]	; (800a934 <read_lp_mk6n+0x530>)
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	4b43      	ldr	r3, [pc, #268]	; (800a948 <read_lp_mk6n+0x544>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f011 faea 	bl	801be18 <strcat>
			strcpy(mydata,temp_data);
 800a844:	4b3b      	ldr	r3, [pc, #236]	; (800a934 <read_lp_mk6n+0x530>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4619      	mov	r1, r3
 800a84a:	4839      	ldr	r0, [pc, #228]	; (800a930 <read_lp_mk6n+0x52c>)
 800a84c:	f011 faf3 	bl	801be36 <strcpy>
			cnt_lp++;
 800a850:	4b43      	ldr	r3, [pc, #268]	; (800a960 <read_lp_mk6n+0x55c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	4a42      	ldr	r2, [pc, #264]	; (800a960 <read_lp_mk6n+0x55c>)
 800a858:	6013      	str	r3, [r2, #0]
		}
		memset(buffer3,0,1100);
 800a85a:	f240 424c 	movw	r2, #1100	; 0x44c
 800a85e:	2100      	movs	r1, #0
 800a860:	4832      	ldr	r0, [pc, #200]	; (800a92c <read_lp_mk6n+0x528>)
 800a862:	f010 fd20 	bl	801b2a6 <memset>
	  for(int i=0;i<jmlChMK6N;i++){
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	4b3d      	ldr	r3, [pc, #244]	; (800a964 <read_lp_mk6n+0x560>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4293      	cmp	r3, r2
 800a876:	f6ff af59 	blt.w	800a72c <read_lp_mk6n+0x328>
	  }
	  //	  HAL_Delay(500);
		memset(buffer3,0,1100);
 800a87a:	f240 424c 	movw	r2, #1100	; 0x44c
 800a87e:	2100      	movs	r1, #0
 800a880:	482a      	ldr	r0, [pc, #168]	; (800a92c <read_lp_mk6n+0x528>)
 800a882:	f010 fd10 	bl	801b2a6 <memset>
		uart3disc = true;
 800a886:	4b27      	ldr	r3, [pc, #156]	; (800a924 <read_lp_mk6n+0x520>)
 800a888:	2201      	movs	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800a88c:	4b26      	ldr	r3, [pc, #152]	; (800a928 <read_lp_mk6n+0x524>)
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
		if(lp_rec !=0){
 800a892:	4b35      	ldr	r3, [pc, #212]	; (800a968 <read_lp_mk6n+0x564>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <read_lp_mk6n+0x4a8>
			txlpMK6NRec(lp_rec);
 800a89a:	4b33      	ldr	r3, [pc, #204]	; (800a968 <read_lp_mk6n+0x564>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f7 fb9a 	bl	8001fd8 <txlpMK6NRec>
			lp_rec = 0;
 800a8a4:	4b30      	ldr	r3, [pc, #192]	; (800a968 <read_lp_mk6n+0x564>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e005      	b.n	800a8b8 <read_lp_mk6n+0x4b4>
		}
		else 	txlpMK6N(1+cnt_lp);
 800a8ac:	4b2c      	ldr	r3, [pc, #176]	; (800a960 <read_lp_mk6n+0x55c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7f7 fbf6 	bl	80020a4 <txlpMK6N>
//	  txlpMK6N(1);
		for(int y=0;y<20;y++){
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	607b      	str	r3, [r7, #4]
 800a8bc:	e00d      	b.n	800a8da <read_lp_mk6n+0x4d6>
			osDelay(200);
 800a8be:	20c8      	movs	r0, #200	; 0xc8
 800a8c0:	f00d feba 	bl	8018638 <osDelay>
			if(uart3done){
 800a8c4:	4b18      	ldr	r3, [pc, #96]	; (800a928 <read_lp_mk6n+0x524>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <read_lp_mk6n+0x4d0>
				uart3disc = false;
 800a8cc:	4b15      	ldr	r3, [pc, #84]	; (800a924 <read_lp_mk6n+0x520>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
				break;
 800a8d2:	e005      	b.n	800a8e0 <read_lp_mk6n+0x4dc>
		for(int y=0;y<20;y++){
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	607b      	str	r3, [r7, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b13      	cmp	r3, #19
 800a8de:	ddee      	ble.n	800a8be <read_lp_mk6n+0x4ba>
			}
		}
		memset(mydata,0,1100);
 800a8e0:	f240 424c 	movw	r2, #1100	; 0x44c
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4812      	ldr	r0, [pc, #72]	; (800a930 <read_lp_mk6n+0x52c>)
 800a8e8:	f010 fcdd 	bl	801b2a6 <memset>
		if(!uart3disc){
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <read_lp_mk6n+0x520>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f083 0301 	eor.w	r3, r3, #1
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d038      	beq.n	800a96c <read_lp_mk6n+0x568>
	  rxlpMK6N(mydata,buffer3,datauart3size(buffer3));
 800a8fa:	480c      	ldr	r0, [pc, #48]	; (800a92c <read_lp_mk6n+0x528>)
 800a8fc:	f7fd fcc0 	bl	8008280 <datauart3size>
 800a900:	4603      	mov	r3, r0
 800a902:	461a      	mov	r2, r3
 800a904:	4909      	ldr	r1, [pc, #36]	; (800a92c <read_lp_mk6n+0x528>)
 800a906:	480a      	ldr	r0, [pc, #40]	; (800a930 <read_lp_mk6n+0x52c>)
 800a908:	f7f7 fc36 	bl	8002178 <rxlpMK6N>
	  if(cnt_lp>0)cnt_lp--;
 800a90c:	4b14      	ldr	r3, [pc, #80]	; (800a960 <read_lp_mk6n+0x55c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f340 8094 	ble.w	800aa3e <read_lp_mk6n+0x63a>
 800a916:	4b12      	ldr	r3, [pc, #72]	; (800a960 <read_lp_mk6n+0x55c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	4a10      	ldr	r2, [pc, #64]	; (800a960 <read_lp_mk6n+0x55c>)
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	e08d      	b.n	800aa3e <read_lp_mk6n+0x63a>
 800a922:	bf00      	nop
 800a924:	2000430d 	.word	0x2000430d
 800a928:	200042f8 	.word	0x200042f8
 800a92c:	200095e0 	.word	0x200095e0
 800a930:	200046c8 	.word	0x200046c8
 800a934:	200045f4 	.word	0x200045f4
 800a938:	20000188 	.word	0x20000188
 800a93c:	0801ee0c 	.word	0x0801ee0c
 800a940:	2000905c 	.word	0x2000905c
 800a944:	0801e4fc 	.word	0x0801e4fc
 800a948:	20008a00 	.word	0x20008a00
 800a94c:	0801ee3c 	.word	0x0801ee3c
 800a950:	20005770 	.word	0x20005770
 800a954:	0801ea28 	.word	0x0801ea28
 800a958:	2000b510 	.word	0x2000b510
 800a95c:	0801ea38 	.word	0x0801ea38
 800a960:	20000640 	.word	0x20000640
 800a964:	200045f1 	.word	0x200045f1
 800a968:	20000644 	.word	0x20000644
		}
		else {
			memset((char *)mydata,0,1100);
 800a96c:	f240 424c 	movw	r2, #1100	; 0x44c
 800a970:	2100      	movs	r1, #0
 800a972:	485b      	ldr	r0, [pc, #364]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800a974:	f010 fc97 	bl	801b2a6 <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a978:	4b5a      	ldr	r3, [pc, #360]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	4b5a      	ldr	r3, [pc, #360]	; (800aae8 <read_lp_mk6n+0x6e4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	495a      	ldr	r1, [pc, #360]	; (800aaec <read_lp_mk6n+0x6e8>)
 800a984:	f011 fa28 	bl	801bdd8 <siprintf>
			strcat(temp_data, (char*)csq);
 800a988:	4b56      	ldr	r3, [pc, #344]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4958      	ldr	r1, [pc, #352]	; (800aaf0 <read_lp_mk6n+0x6ec>)
 800a98e:	4618      	mov	r0, r3
 800a990:	f011 fa42 	bl	801be18 <strcat>
			strcat(temp_data,"\"");
 800a994:	4b53      	ldr	r3, [pc, #332]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800a996:	681c      	ldr	r4, [r3, #0]
 800a998:	4620      	mov	r0, r4
 800a99a:	f7f5 fc23 	bl	80001e4 <strlen>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4423      	add	r3, r4
 800a9a2:	4954      	ldr	r1, [pc, #336]	; (800aaf4 <read_lp_mk6n+0x6f0>)
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	8013      	strh	r3, [r2, #0]
			sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a9ac:	4b52      	ldr	r3, [pc, #328]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a52      	ldr	r2, [pc, #328]	; (800aafc <read_lp_mk6n+0x6f8>)
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9b8:	6020      	str	r0, [r4, #0]
 800a9ba:	6061      	str	r1, [r4, #4]
 800a9bc:	60a2      	str	r2, [r4, #8]
 800a9be:	60e3      	str	r3, [r4, #12]
 800a9c0:	6828      	ldr	r0, [r5, #0]
 800a9c2:	6120      	str	r0, [r4, #16]
 800a9c4:	88ab      	ldrh	r3, [r5, #4]
 800a9c6:	79aa      	ldrb	r2, [r5, #6]
 800a9c8:	82a3      	strh	r3, [r4, #20]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	75a3      	strb	r3, [r4, #22]
			strcat(temp_data, temp_data2);
 800a9ce:	4b45      	ldr	r3, [pc, #276]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b49      	ldr	r3, [pc, #292]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4610      	mov	r0, r2
 800a9da:	f011 fa1d 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a9de:	4b46      	ldr	r3, [pc, #280]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800a9e0:	681c      	ldr	r4, [r3, #0]
 800a9e2:	4b47      	ldr	r3, [pc, #284]	; (800ab00 <read_lp_mk6n+0x6fc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f5 fdbe 	bl	8000568 <__aeabi_f2d>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4944      	ldr	r1, [pc, #272]	; (800ab04 <read_lp_mk6n+0x700>)
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f011 f9f0 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800a9f8:	4b3a      	ldr	r3, [pc, #232]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4b3e      	ldr	r3, [pc, #248]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f011 fa08 	bl	801be18 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800aa08:	4b3b      	ldr	r3, [pc, #236]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	4b3e      	ldr	r3, [pc, #248]	; (800ab08 <read_lp_mk6n+0x704>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	493e      	ldr	r1, [pc, #248]	; (800ab0c <read_lp_mk6n+0x708>)
 800aa14:	f011 f9e0 	bl	801bdd8 <siprintf>
			strcat(temp_data, temp_data2);
 800aa18:	4b32      	ldr	r3, [pc, #200]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	4b36      	ldr	r3, [pc, #216]	; (800aaf8 <read_lp_mk6n+0x6f4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f011 f9f8 	bl	801be18 <strcat>
			strcpy(mydata,temp_data);
 800aa28:	4b2e      	ldr	r3, [pc, #184]	; (800aae4 <read_lp_mk6n+0x6e0>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	482c      	ldr	r0, [pc, #176]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800aa30:	f011 fa01 	bl	801be36 <strcpy>
			cnt_lp++;
 800aa34:	4b36      	ldr	r3, [pc, #216]	; (800ab10 <read_lp_mk6n+0x70c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	4a35      	ldr	r2, [pc, #212]	; (800ab10 <read_lp_mk6n+0x70c>)
 800aa3c:	6013      	str	r3, [r2, #0]
		}

	  printf(mydata);
 800aa3e:	4828      	ldr	r0, [pc, #160]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800aa40:	f011 f93e 	bl	801bcc0 <iprintf>
	  csqint = 1;
 800aa44:	4b33      	ldr	r3, [pc, #204]	; (800ab14 <read_lp_mk6n+0x710>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
	  cgattint = 1;
 800aa4a:	4b33      	ldr	r3, [pc, #204]	; (800ab18 <read_lp_mk6n+0x714>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	701a      	strb	r2, [r3, #0]
	  if(csqint || cgattint) {
 800aa50:	4b30      	ldr	r3, [pc, #192]	; (800ab14 <read_lp_mk6n+0x710>)
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d103      	bne.n	800aa60 <read_lp_mk6n+0x65c>
 800aa58:	4b2f      	ldr	r3, [pc, #188]	; (800ab18 <read_lp_mk6n+0x714>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <read_lp_mk6n+0x664>
//			printf("online True\r\n");
		onlineMode = true;
 800aa60:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <read_lp_mk6n+0x718>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	e007      	b.n	800aa78 <read_lp_mk6n+0x674>
	  }
	  else {
		onlineMode = false;
 800aa68:	4b2c      	ldr	r3, [pc, #176]	; (800ab1c <read_lp_mk6n+0x718>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800aa6e:	4b2c      	ldr	r3, [pc, #176]	; (800ab20 <read_lp_mk6n+0x71c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	4a2a      	ldr	r2, [pc, #168]	; (800ab20 <read_lp_mk6n+0x71c>)
 800aa76:	6013      	str	r3, [r2, #0]
	  }
	  if(onlineMode) {
 800aa78:	4b28      	ldr	r3, [pc, #160]	; (800ab1c <read_lp_mk6n+0x718>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d019      	beq.n	800aab4 <read_lp_mk6n+0x6b0>
		if(usemqtt){
 800aa80:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <read_lp_mk6n+0x720>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00c      	beq.n	800aaa2 <read_lp_mk6n+0x69e>
			len_mydata=bufsizechararray(mydata);
 800aa88:	4815      	ldr	r0, [pc, #84]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800aa8a:	f7fd fc11 	bl	80082b0 <bufsizechararray>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b25      	ldr	r3, [pc, #148]	; (800ab28 <read_lp_mk6n+0x724>)
 800aa92:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 800aa94:	f7fd fca2 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 800aa98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa9c:	f00d fdcc 	bl	8018638 <osDelay>
				net_err_cnt=0;
				osDelay(5000);
				setup_modem();
			}
		}
}
 800aaa0:	e01a      	b.n	800aad8 <read_lp_mk6n+0x6d4>
			else sendToServer(mydata,bufsizechararray(mydata));
 800aaa2:	480f      	ldr	r0, [pc, #60]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800aaa4:	f7fd fc04 	bl	80082b0 <bufsizechararray>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4619      	mov	r1, r3
 800aaac:	480c      	ldr	r0, [pc, #48]	; (800aae0 <read_lp_mk6n+0x6dc>)
 800aaae:	f7fd f8af 	bl	8007c10 <sendToServer>
}
 800aab2:	e011      	b.n	800aad8 <read_lp_mk6n+0x6d4>
			if(net_err_cnt >= 3) {
 800aab4:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <read_lp_mk6n+0x71c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	dd0d      	ble.n	800aad8 <read_lp_mk6n+0x6d4>
				printf("Restart Modem \r\n");
 800aabc:	481b      	ldr	r0, [pc, #108]	; (800ab2c <read_lp_mk6n+0x728>)
 800aabe:	f011 f973 	bl	801bda8 <puts>
				NB_rst1_rtos();
 800aac2:	f7fe fd6f 	bl	80095a4 <NB_rst1_rtos>
				net_err_cnt=0;
 800aac6:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <read_lp_mk6n+0x71c>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
				osDelay(5000);
 800aacc:	f241 3088 	movw	r0, #5000	; 0x1388
 800aad0:	f00d fdb2 	bl	8018638 <osDelay>
				setup_modem();
 800aad4:	f7fd f80e 	bl	8007af4 <setup_modem>
}
 800aad8:	bf00      	nop
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bdb0      	pop	{r4, r5, r7, pc}
 800aae0:	200046c8 	.word	0x200046c8
 800aae4:	200045f4 	.word	0x200045f4
 800aae8:	20000188 	.word	0x20000188
 800aaec:	0801ee0c 	.word	0x0801ee0c
 800aaf0:	2000905c 	.word	0x2000905c
 800aaf4:	0801e4fc 	.word	0x0801e4fc
 800aaf8:	20008a00 	.word	0x20008a00
 800aafc:	0801ee3c 	.word	0x0801ee3c
 800ab00:	20005770 	.word	0x20005770
 800ab04:	0801ea28 	.word	0x0801ea28
 800ab08:	2000b510 	.word	0x2000b510
 800ab0c:	0801ea38 	.word	0x0801ea38
 800ab10:	20000640 	.word	0x20000640
 800ab14:	20008a04 	.word	0x20008a04
 800ab18:	200045f0 	.word	0x200045f0
 800ab1c:	20000013 	.word	0x20000013
 800ab20:	20002758 	.word	0x20002758
 800ab24:	20004285 	.word	0x20004285
 800ab28:	20009124 	.word	0x20009124
 800ab2c:	0801ee54 	.word	0x0801ee54

0800ab30 <read_instant_mk10e>:

void read_instant_mk10e(){
 800ab30:	b5b0      	push	{r4, r5, r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
	memset((char *)mydata,0,1100);
 800ab36:	f240 424c 	movw	r2, #1100	; 0x44c
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4888      	ldr	r0, [pc, #544]	; (800ad60 <read_instant_mk10e+0x230>)
 800ab3e:	f010 fbb2 	bl	801b2a6 <memset>
	loginToMeterRTOS();
 800ab42:	f7fb f881 	bl	8005c48 <loginToMeterRTOS>
	osDelay(1000);
 800ab46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab4a:	f00d fd75 	bl	8018638 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800ab4e:	4b85      	ldr	r3, [pc, #532]	; (800ad64 <read_instant_mk10e+0x234>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4985      	ldr	r1, [pc, #532]	; (800ad68 <read_instant_mk10e+0x238>)
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7f5 fb3b 	bl	80001d0 <strcmp>
 800ab5a:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d101      	bne.n	800ab66 <read_instant_mk10e+0x36>
 800ab62:	f000 fd83 	bl	800b66c <read_sn_edmi>
	uart3done = false;
 800ab66:	4b81      	ldr	r3, [pc, #516]	; (800ad6c <read_instant_mk10e+0x23c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
	SerialMonprintln("Read Instant MK10E");
 800ab6c:	4880      	ldr	r0, [pc, #512]	; (800ad70 <read_instant_mk10e+0x240>)
 800ab6e:	f7fb f81d 	bl	8005bac <SerialMonprintln>
	uart2done=false;
 800ab72:	4b80      	ldr	r3, [pc, #512]	; (800ad74 <read_instant_mk10e+0x244>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800ab78:	f240 424c 	movw	r2, #1100	; 0x44c
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	487e      	ldr	r0, [pc, #504]	; (800ad78 <read_instant_mk10e+0x248>)
 800ab80:	f010 fb91 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800ab84:	f240 424c 	movw	r2, #1100	; 0x44c
 800ab88:	2100      	movs	r1, #0
 800ab8a:	487c      	ldr	r0, [pc, #496]	; (800ad7c <read_instant_mk10e+0x24c>)
 800ab8c:	f010 fb8b 	bl	801b2a6 <memset>
	uart3disc = true;
 800ab90:	4b7b      	ldr	r3, [pc, #492]	; (800ad80 <read_instant_mk10e+0x250>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	701a      	strb	r2, [r3, #0]
	txInstantMK10E();
 800ab96:	f7f9 f9b5 	bl	8003f04 <txInstantMK10E>
	for(int y=0;y<20;y++){
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	e00d      	b.n	800abbc <read_instant_mk10e+0x8c>
		osDelay(200);
 800aba0:	20c8      	movs	r0, #200	; 0xc8
 800aba2:	f00d fd49 	bl	8018638 <osDelay>
		if(uart3done){
 800aba6:	4b71      	ldr	r3, [pc, #452]	; (800ad6c <read_instant_mk10e+0x23c>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <read_instant_mk10e+0x86>
			uart3disc = false;
 800abae:	4b74      	ldr	r3, [pc, #464]	; (800ad80 <read_instant_mk10e+0x250>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
			break;
 800abb4:	e005      	b.n	800abc2 <read_instant_mk10e+0x92>
	for(int y=0;y<20;y++){
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3301      	adds	r3, #1
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b13      	cmp	r3, #19
 800abc0:	ddee      	ble.n	800aba0 <read_instant_mk10e+0x70>
		}
	}
	memset(mydata,0,1100);
 800abc2:	f240 424c 	movw	r2, #1100	; 0x44c
 800abc6:	2100      	movs	r1, #0
 800abc8:	4865      	ldr	r0, [pc, #404]	; (800ad60 <read_instant_mk10e+0x230>)
 800abca:	f010 fb6c 	bl	801b2a6 <memset>
	if(!uart3disc){
 800abce:	4b6c      	ldr	r3, [pc, #432]	; (800ad80 <read_instant_mk10e+0x250>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	f083 0301 	eor.w	r3, r3, #1
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00f      	beq.n	800abfc <read_instant_mk10e+0xcc>
		rxInstantMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800abdc:	4867      	ldr	r0, [pc, #412]	; (800ad7c <read_instant_mk10e+0x24c>)
 800abde:	f7fd fb4f 	bl	8008280 <datauart3size>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	4965      	ldr	r1, [pc, #404]	; (800ad7c <read_instant_mk10e+0x24c>)
 800abe8:	485d      	ldr	r0, [pc, #372]	; (800ad60 <read_instant_mk10e+0x230>)
 800abea:	f7f9 f9b1 	bl	8003f50 <rxInstantMK10E>
		memset((char *)buffer3,0,1100);
 800abee:	f240 424c 	movw	r2, #1100	; 0x44c
 800abf2:	2100      	movs	r1, #0
 800abf4:	4861      	ldr	r0, [pc, #388]	; (800ad7c <read_instant_mk10e+0x24c>)
 800abf6:	f010 fb56 	bl	801b2a6 <memset>
 800abfa:	e063      	b.n	800acc4 <read_instant_mk10e+0x194>
	//	printf(mydata);
	}
	else {
		memset((char *)mydata,0,1100);
 800abfc:	f240 424c 	movw	r2, #1100	; 0x44c
 800ac00:	2100      	movs	r1, #0
 800ac02:	4857      	ldr	r0, [pc, #348]	; (800ad60 <read_instant_mk10e+0x230>)
 800ac04:	f010 fb4f 	bl	801b2a6 <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800ac08:	4b5e      	ldr	r3, [pc, #376]	; (800ad84 <read_instant_mk10e+0x254>)
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	4b55      	ldr	r3, [pc, #340]	; (800ad64 <read_instant_mk10e+0x234>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	495d      	ldr	r1, [pc, #372]	; (800ad88 <read_instant_mk10e+0x258>)
 800ac14:	f011 f8e0 	bl	801bdd8 <siprintf>
		strcat(temp_data, (char*)csq);
 800ac18:	4b5a      	ldr	r3, [pc, #360]	; (800ad84 <read_instant_mk10e+0x254>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	495b      	ldr	r1, [pc, #364]	; (800ad8c <read_instant_mk10e+0x25c>)
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f011 f8fa 	bl	801be18 <strcat>
		strcat(temp_data,"\"");
 800ac24:	4b57      	ldr	r3, [pc, #348]	; (800ad84 <read_instant_mk10e+0x254>)
 800ac26:	681c      	ldr	r4, [r3, #0]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7f5 fadb 	bl	80001e4 <strlen>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	4423      	add	r3, r4
 800ac32:	4957      	ldr	r1, [pc, #348]	; (800ad90 <read_instant_mk10e+0x260>)
 800ac34:	461a      	mov	r2, r3
 800ac36:	460b      	mov	r3, r1
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800ac3c:	4b55      	ldr	r3, [pc, #340]	; (800ad94 <read_instant_mk10e+0x264>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a55      	ldr	r2, [pc, #340]	; (800ad98 <read_instant_mk10e+0x268>)
 800ac42:	461c      	mov	r4, r3
 800ac44:	4615      	mov	r5, r2
 800ac46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac48:	6020      	str	r0, [r4, #0]
 800ac4a:	6061      	str	r1, [r4, #4]
 800ac4c:	60a2      	str	r2, [r4, #8]
 800ac4e:	60e3      	str	r3, [r4, #12]
 800ac50:	6828      	ldr	r0, [r5, #0]
 800ac52:	6120      	str	r0, [r4, #16]
 800ac54:	88ab      	ldrh	r3, [r5, #4]
 800ac56:	79aa      	ldrb	r2, [r5, #6]
 800ac58:	82a3      	strh	r3, [r4, #20]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	75a3      	strb	r3, [r4, #22]
		strcat(temp_data, temp_data2);
 800ac5e:	4b49      	ldr	r3, [pc, #292]	; (800ad84 <read_instant_mk10e+0x254>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b4c      	ldr	r3, [pc, #304]	; (800ad94 <read_instant_mk10e+0x264>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f011 f8d5 	bl	801be18 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800ac6e:	4b49      	ldr	r3, [pc, #292]	; (800ad94 <read_instant_mk10e+0x264>)
 800ac70:	681c      	ldr	r4, [r3, #0]
 800ac72:	4b4a      	ldr	r3, [pc, #296]	; (800ad9c <read_instant_mk10e+0x26c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f5 fc76 	bl	8000568 <__aeabi_f2d>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4947      	ldr	r1, [pc, #284]	; (800ada0 <read_instant_mk10e+0x270>)
 800ac82:	4620      	mov	r0, r4
 800ac84:	f011 f8a8 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800ac88:	4b3e      	ldr	r3, [pc, #248]	; (800ad84 <read_instant_mk10e+0x254>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	4b41      	ldr	r3, [pc, #260]	; (800ad94 <read_instant_mk10e+0x264>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f011 f8c0 	bl	801be18 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800ac98:	4b3e      	ldr	r3, [pc, #248]	; (800ad94 <read_instant_mk10e+0x264>)
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	4b41      	ldr	r3, [pc, #260]	; (800ada4 <read_instant_mk10e+0x274>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	4941      	ldr	r1, [pc, #260]	; (800ada8 <read_instant_mk10e+0x278>)
 800aca4:	f011 f898 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800aca8:	4b36      	ldr	r3, [pc, #216]	; (800ad84 <read_instant_mk10e+0x254>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b39      	ldr	r3, [pc, #228]	; (800ad94 <read_instant_mk10e+0x264>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	4610      	mov	r0, r2
 800acb4:	f011 f8b0 	bl	801be18 <strcat>
		strcpy(mydata,temp_data);
 800acb8:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <read_instant_mk10e+0x254>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	4828      	ldr	r0, [pc, #160]	; (800ad60 <read_instant_mk10e+0x230>)
 800acc0:	f011 f8b9 	bl	801be36 <strcpy>
	}
	csqint = 1;
 800acc4:	4b39      	ldr	r3, [pc, #228]	; (800adac <read_instant_mk10e+0x27c>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800acca:	4b39      	ldr	r3, [pc, #228]	; (800adb0 <read_instant_mk10e+0x280>)
 800accc:	2201      	movs	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <read_instant_mk10e+0x27c>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <read_instant_mk10e+0x1b0>
 800acd8:	4b35      	ldr	r3, [pc, #212]	; (800adb0 <read_instant_mk10e+0x280>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d003      	beq.n	800ace8 <read_instant_mk10e+0x1b8>
//		printf("online True\r\n");
		onlineMode = true;
 800ace0:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <read_instant_mk10e+0x284>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e007      	b.n	800acf8 <read_instant_mk10e+0x1c8>
	}
	else {
		onlineMode = false;
 800ace8:	4b32      	ldr	r3, [pc, #200]	; (800adb4 <read_instant_mk10e+0x284>)
 800acea:	2200      	movs	r2, #0
 800acec:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800acee:	4b32      	ldr	r3, [pc, #200]	; (800adb8 <read_instant_mk10e+0x288>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	4a30      	ldr	r2, [pc, #192]	; (800adb8 <read_instant_mk10e+0x288>)
 800acf6:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800acf8:	4b2e      	ldr	r3, [pc, #184]	; (800adb4 <read_instant_mk10e+0x284>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d019      	beq.n	800ad34 <read_instant_mk10e+0x204>
//		usemqtt = true;
		if(usemqtt){
 800ad00:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <read_instant_mk10e+0x28c>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <read_instant_mk10e+0x1f2>
			len_mydata=bufsizechararray(mydata);
 800ad08:	4815      	ldr	r0, [pc, #84]	; (800ad60 <read_instant_mk10e+0x230>)
 800ad0a:	f7fd fad1 	bl	80082b0 <bufsizechararray>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <read_instant_mk10e+0x290>)
 800ad12:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 800ad14:	f7fd fb62 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 800ad18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad1c:	f00d fc8c 	bl	8018638 <osDelay>
			osDelay(5000);
			setup_modem();
		}
	}

}
 800ad20:	e01a      	b.n	800ad58 <read_instant_mk10e+0x228>
		else sendToServer(mydata,bufsizechararray(mydata));
 800ad22:	480f      	ldr	r0, [pc, #60]	; (800ad60 <read_instant_mk10e+0x230>)
 800ad24:	f7fd fac4 	bl	80082b0 <bufsizechararray>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	480c      	ldr	r0, [pc, #48]	; (800ad60 <read_instant_mk10e+0x230>)
 800ad2e:	f7fc ff6f 	bl	8007c10 <sendToServer>
}
 800ad32:	e011      	b.n	800ad58 <read_instant_mk10e+0x228>
		if(net_err_cnt >= 3) {
 800ad34:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <read_instant_mk10e+0x288>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	dd0d      	ble.n	800ad58 <read_instant_mk10e+0x228>
			printf("Restart Modem \r\n");
 800ad3c:	4821      	ldr	r0, [pc, #132]	; (800adc4 <read_instant_mk10e+0x294>)
 800ad3e:	f011 f833 	bl	801bda8 <puts>
			NB_rst1_rtos();
 800ad42:	f7fe fc2f 	bl	80095a4 <NB_rst1_rtos>
			net_err_cnt=0;
 800ad46:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <read_instant_mk10e+0x288>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 800ad4c:	f241 3088 	movw	r0, #5000	; 0x1388
 800ad50:	f00d fc72 	bl	8018638 <osDelay>
			setup_modem();
 800ad54:	f7fc fece 	bl	8007af4 <setup_modem>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad60:	200046c8 	.word	0x200046c8
 800ad64:	20000188 	.word	0x20000188
 800ad68:	0801e9b4 	.word	0x0801e9b4
 800ad6c:	200042f8 	.word	0x200042f8
 800ad70:	0801ee98 	.word	0x0801ee98
 800ad74:	20003fe4 	.word	0x20003fe4
 800ad78:	20005324 	.word	0x20005324
 800ad7c:	200095e0 	.word	0x200095e0
 800ad80:	2000430d 	.word	0x2000430d
 800ad84:	200045f4 	.word	0x200045f4
 800ad88:	0801eeac 	.word	0x0801eeac
 800ad8c:	2000905c 	.word	0x2000905c
 800ad90:	0801e4fc 	.word	0x0801e4fc
 800ad94:	20008a00 	.word	0x20008a00
 800ad98:	0801ee3c 	.word	0x0801ee3c
 800ad9c:	20005770 	.word	0x20005770
 800ada0:	0801ea28 	.word	0x0801ea28
 800ada4:	2000b510 	.word	0x2000b510
 800ada8:	0801ea38 	.word	0x0801ea38
 800adac:	20008a04 	.word	0x20008a04
 800adb0:	200045f0 	.word	0x200045f0
 800adb4:	20000013 	.word	0x20000013
 800adb8:	20002758 	.word	0x20002758
 800adbc:	20004285 	.word	0x20004285
 800adc0:	20009124 	.word	0x20009124
 800adc4:	0801ee54 	.word	0x0801ee54

0800adc8 <read_eob_mk10e>:

void read_eob_mk10e(){
 800adc8:	b5b0      	push	{r4, r5, r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 800adce:	f7fa ff3b 	bl	8005c48 <loginToMeterRTOS>
	osDelay(1000);
 800add2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800add6:	f00d fc2f 	bl	8018638 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800adda:	4b85      	ldr	r3, [pc, #532]	; (800aff0 <read_eob_mk10e+0x228>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4985      	ldr	r1, [pc, #532]	; (800aff4 <read_eob_mk10e+0x22c>)
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7f5 f9f5 	bl	80001d0 <strcmp>
 800ade6:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <read_eob_mk10e+0x2a>
 800adee:	f000 fc3d 	bl	800b66c <read_sn_edmi>
	SerialMonprintln("Read EoB Init LP MK10E");
 800adf2:	4881      	ldr	r0, [pc, #516]	; (800aff8 <read_eob_mk10e+0x230>)
 800adf4:	f7fa feda 	bl	8005bac <SerialMonprintln>
	uart2done=false;
 800adf8:	4b80      	ldr	r3, [pc, #512]	; (800affc <read_eob_mk10e+0x234>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
	memset((char *)mydata,0,1100);
 800adfe:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae02:	2100      	movs	r1, #0
 800ae04:	487e      	ldr	r0, [pc, #504]	; (800b000 <read_eob_mk10e+0x238>)
 800ae06:	f010 fa4e 	bl	801b2a6 <memset>
	memset((char *)uart3_temp,0,1100);
 800ae0a:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae0e:	2100      	movs	r1, #0
 800ae10:	487c      	ldr	r0, [pc, #496]	; (800b004 <read_eob_mk10e+0x23c>)
 800ae12:	f010 fa48 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800ae16:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	487a      	ldr	r0, [pc, #488]	; (800b008 <read_eob_mk10e+0x240>)
 800ae1e:	f010 fa42 	bl	801b2a6 <memset>
	uart3done = false;
 800ae22:	4b7a      	ldr	r3, [pc, #488]	; (800b00c <read_eob_mk10e+0x244>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800ae28:	4b79      	ldr	r3, [pc, #484]	; (800b010 <read_eob_mk10e+0x248>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	701a      	strb	r2, [r3, #0]
	txEobLpInitMK10E();
 800ae2e:	f7f9 fbff 	bl	8004630 <txEobLpInitMK10E>
	for(int y=0;y<20;y++){
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
 800ae36:	e00d      	b.n	800ae54 <read_eob_mk10e+0x8c>
		osDelay(200);
 800ae38:	20c8      	movs	r0, #200	; 0xc8
 800ae3a:	f00d fbfd 	bl	8018638 <osDelay>
		if(uart3done){
 800ae3e:	4b73      	ldr	r3, [pc, #460]	; (800b00c <read_eob_mk10e+0x244>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <read_eob_mk10e+0x86>
			uart3disc = false;
 800ae46:	4b72      	ldr	r3, [pc, #456]	; (800b010 <read_eob_mk10e+0x248>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	701a      	strb	r2, [r3, #0]
			break;
 800ae4c:	e005      	b.n	800ae5a <read_eob_mk10e+0x92>
	for(int y=0;y<20;y++){
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3301      	adds	r3, #1
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b13      	cmp	r3, #19
 800ae58:	ddee      	ble.n	800ae38 <read_eob_mk10e+0x70>
		}
	}
	if(!uart3disc){
 800ae5a:	4b6d      	ldr	r3, [pc, #436]	; (800b010 <read_eob_mk10e+0x248>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	f083 0301 	eor.w	r3, r3, #1
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00e      	beq.n	800ae86 <read_eob_mk10e+0xbe>
	rxEobLpInitMK10E((char *)buffer3,datauart3size(buffer3));
 800ae68:	4867      	ldr	r0, [pc, #412]	; (800b008 <read_eob_mk10e+0x240>)
 800ae6a:	f7fd fa09 	bl	8008280 <datauart3size>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	4619      	mov	r1, r3
 800ae72:	4865      	ldr	r0, [pc, #404]	; (800b008 <read_eob_mk10e+0x240>)
 800ae74:	f7f9 fc06 	bl	8004684 <rxEobLpInitMK10E>
	memset((char *)buffer3,0,1100);
 800ae78:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	4862      	ldr	r0, [pc, #392]	; (800b008 <read_eob_mk10e+0x240>)
 800ae80:	f010 fa11 	bl	801b2a6 <memset>
 800ae84:	e063      	b.n	800af4e <read_eob_mk10e+0x186>
	}
	else {
		memset((char *)mydata,0,1100);
 800ae86:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	485c      	ldr	r0, [pc, #368]	; (800b000 <read_eob_mk10e+0x238>)
 800ae8e:	f010 fa0a 	bl	801b2a6 <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800ae92:	4b60      	ldr	r3, [pc, #384]	; (800b014 <read_eob_mk10e+0x24c>)
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	4b56      	ldr	r3, [pc, #344]	; (800aff0 <read_eob_mk10e+0x228>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	495e      	ldr	r1, [pc, #376]	; (800b018 <read_eob_mk10e+0x250>)
 800ae9e:	f010 ff9b 	bl	801bdd8 <siprintf>
		strcat(temp_data, (char*)csq);
 800aea2:	4b5c      	ldr	r3, [pc, #368]	; (800b014 <read_eob_mk10e+0x24c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	495d      	ldr	r1, [pc, #372]	; (800b01c <read_eob_mk10e+0x254>)
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f010 ffb5 	bl	801be18 <strcat>
		strcat(temp_data,"\"");
 800aeae:	4b59      	ldr	r3, [pc, #356]	; (800b014 <read_eob_mk10e+0x24c>)
 800aeb0:	681c      	ldr	r4, [r3, #0]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7f5 f996 	bl	80001e4 <strlen>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	4423      	add	r3, r4
 800aebc:	4958      	ldr	r1, [pc, #352]	; (800b020 <read_eob_mk10e+0x258>)
 800aebe:	461a      	mov	r2, r3
 800aec0:	460b      	mov	r3, r1
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800aec6:	4b57      	ldr	r3, [pc, #348]	; (800b024 <read_eob_mk10e+0x25c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a57      	ldr	r2, [pc, #348]	; (800b028 <read_eob_mk10e+0x260>)
 800aecc:	461c      	mov	r4, r3
 800aece:	4615      	mov	r5, r2
 800aed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aed2:	6020      	str	r0, [r4, #0]
 800aed4:	6061      	str	r1, [r4, #4]
 800aed6:	60a2      	str	r2, [r4, #8]
 800aed8:	60e3      	str	r3, [r4, #12]
 800aeda:	6828      	ldr	r0, [r5, #0]
 800aedc:	6120      	str	r0, [r4, #16]
 800aede:	88ab      	ldrh	r3, [r5, #4]
 800aee0:	79aa      	ldrb	r2, [r5, #6]
 800aee2:	82a3      	strh	r3, [r4, #20]
 800aee4:	4613      	mov	r3, r2
 800aee6:	75a3      	strb	r3, [r4, #22]
		strcat(temp_data, temp_data2);
 800aee8:	4b4a      	ldr	r3, [pc, #296]	; (800b014 <read_eob_mk10e+0x24c>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	4b4d      	ldr	r3, [pc, #308]	; (800b024 <read_eob_mk10e+0x25c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f010 ff90 	bl	801be18 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800aef8:	4b4a      	ldr	r3, [pc, #296]	; (800b024 <read_eob_mk10e+0x25c>)
 800aefa:	681c      	ldr	r4, [r3, #0]
 800aefc:	4b4b      	ldr	r3, [pc, #300]	; (800b02c <read_eob_mk10e+0x264>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4618      	mov	r0, r3
 800af02:	f7f5 fb31 	bl	8000568 <__aeabi_f2d>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4949      	ldr	r1, [pc, #292]	; (800b030 <read_eob_mk10e+0x268>)
 800af0c:	4620      	mov	r0, r4
 800af0e:	f010 ff63 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800af12:	4b40      	ldr	r3, [pc, #256]	; (800b014 <read_eob_mk10e+0x24c>)
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b43      	ldr	r3, [pc, #268]	; (800b024 <read_eob_mk10e+0x25c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f010 ff7b 	bl	801be18 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800af22:	4b40      	ldr	r3, [pc, #256]	; (800b024 <read_eob_mk10e+0x25c>)
 800af24:	6818      	ldr	r0, [r3, #0]
 800af26:	4b43      	ldr	r3, [pc, #268]	; (800b034 <read_eob_mk10e+0x26c>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	4942      	ldr	r1, [pc, #264]	; (800b038 <read_eob_mk10e+0x270>)
 800af2e:	f010 ff53 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800af32:	4b38      	ldr	r3, [pc, #224]	; (800b014 <read_eob_mk10e+0x24c>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	4b3b      	ldr	r3, [pc, #236]	; (800b024 <read_eob_mk10e+0x25c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f010 ff6b 	bl	801be18 <strcat>
		strcpy(mydata,temp_data);
 800af42:	4b34      	ldr	r3, [pc, #208]	; (800b014 <read_eob_mk10e+0x24c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4619      	mov	r1, r3
 800af48:	482d      	ldr	r0, [pc, #180]	; (800b000 <read_eob_mk10e+0x238>)
 800af4a:	f010 ff74 	bl	801be36 <strcpy>
	}

	loginToMeterRTOS();
 800af4e:	f7fa fe7b 	bl	8005c48 <loginToMeterRTOS>
	SerialMonprintln("Read EoB MK10E");
 800af52:	483a      	ldr	r0, [pc, #232]	; (800b03c <read_eob_mk10e+0x274>)
 800af54:	f7fa fe2a 	bl	8005bac <SerialMonprintln>
	memset((char *)uart3_temp,0,1100);
 800af58:	f240 424c 	movw	r2, #1100	; 0x44c
 800af5c:	2100      	movs	r1, #0
 800af5e:	4829      	ldr	r0, [pc, #164]	; (800b004 <read_eob_mk10e+0x23c>)
 800af60:	f010 f9a1 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800af64:	f240 424c 	movw	r2, #1100	; 0x44c
 800af68:	2100      	movs	r1, #0
 800af6a:	4827      	ldr	r0, [pc, #156]	; (800b008 <read_eob_mk10e+0x240>)
 800af6c:	f010 f99b 	bl	801b2a6 <memset>
	memset(mydata,0,1100);
 800af70:	f240 424c 	movw	r2, #1100	; 0x44c
 800af74:	2100      	movs	r1, #0
 800af76:	4822      	ldr	r0, [pc, #136]	; (800b000 <read_eob_mk10e+0x238>)
 800af78:	f010 f995 	bl	801b2a6 <memset>
	uart3done = false;
 800af7c:	4b23      	ldr	r3, [pc, #140]	; (800b00c <read_eob_mk10e+0x244>)
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <read_eob_mk10e+0x248>)
 800af84:	2201      	movs	r2, #1
 800af86:	701a      	strb	r2, [r3, #0]
	txEoBCurrentMK10E();
 800af88:	f7fa fa72 	bl	8005470 <txEoBCurrentMK10E>
	for(int y=0;y<20;y++){
 800af8c:	2300      	movs	r3, #0
 800af8e:	60bb      	str	r3, [r7, #8]
 800af90:	e00d      	b.n	800afae <read_eob_mk10e+0x1e6>
		osDelay(200);
 800af92:	20c8      	movs	r0, #200	; 0xc8
 800af94:	f00d fb50 	bl	8018638 <osDelay>
		if(uart3done){
 800af98:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <read_eob_mk10e+0x244>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <read_eob_mk10e+0x1e0>
			uart3disc = false;
 800afa0:	4b1b      	ldr	r3, [pc, #108]	; (800b010 <read_eob_mk10e+0x248>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
			break;
 800afa6:	e005      	b.n	800afb4 <read_eob_mk10e+0x1ec>
	for(int y=0;y<20;y++){
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	3301      	adds	r3, #1
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b13      	cmp	r3, #19
 800afb2:	ddee      	ble.n	800af92 <read_eob_mk10e+0x1ca>
		}
	}
	memset(mydata,0,1100);
 800afb4:	f240 424c 	movw	r2, #1100	; 0x44c
 800afb8:	2100      	movs	r1, #0
 800afba:	4811      	ldr	r0, [pc, #68]	; (800b000 <read_eob_mk10e+0x238>)
 800afbc:	f010 f973 	bl	801b2a6 <memset>
	if(!uart3disc){
 800afc0:	4b13      	ldr	r3, [pc, #76]	; (800b010 <read_eob_mk10e+0x248>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f083 0301 	eor.w	r3, r3, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d038      	beq.n	800b040 <read_eob_mk10e+0x278>
	rxEoBCurrentMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800afce:	480e      	ldr	r0, [pc, #56]	; (800b008 <read_eob_mk10e+0x240>)
 800afd0:	f7fd f956 	bl	8008280 <datauart3size>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	490b      	ldr	r1, [pc, #44]	; (800b008 <read_eob_mk10e+0x240>)
 800afda:	4809      	ldr	r0, [pc, #36]	; (800b000 <read_eob_mk10e+0x238>)
 800afdc:	f7fa fa6e 	bl	80054bc <rxEoBCurrentMK10E>
	memset((char *)buffer3,0,1100);
 800afe0:	f240 424c 	movw	r2, #1100	; 0x44c
 800afe4:	2100      	movs	r1, #0
 800afe6:	4808      	ldr	r0, [pc, #32]	; (800b008 <read_eob_mk10e+0x240>)
 800afe8:	f010 f95d 	bl	801b2a6 <memset>
 800afec:	e08c      	b.n	800b108 <read_eob_mk10e+0x340>
 800afee:	bf00      	nop
 800aff0:	20000188 	.word	0x20000188
 800aff4:	0801e9b4 	.word	0x0801e9b4
 800aff8:	0801eedc 	.word	0x0801eedc
 800affc:	20003fe4 	.word	0x20003fe4
 800b000:	200046c8 	.word	0x200046c8
 800b004:	20005324 	.word	0x20005324
 800b008:	200095e0 	.word	0x200095e0
 800b00c:	200042f8 	.word	0x200042f8
 800b010:	2000430d 	.word	0x2000430d
 800b014:	200045f4 	.word	0x200045f4
 800b018:	0801eeac 	.word	0x0801eeac
 800b01c:	2000905c 	.word	0x2000905c
 800b020:	0801e4fc 	.word	0x0801e4fc
 800b024:	20008a00 	.word	0x20008a00
 800b028:	0801ee3c 	.word	0x0801ee3c
 800b02c:	20005770 	.word	0x20005770
 800b030:	0801ea28 	.word	0x0801ea28
 800b034:	2000b510 	.word	0x2000b510
 800b038:	0801ea38 	.word	0x0801ea38
 800b03c:	0801eef4 	.word	0x0801eef4
	}
	else {
		memset((char *)mydata,0,1100);
 800b040:	f240 424c 	movw	r2, #1100	; 0x44c
 800b044:	2100      	movs	r1, #0
 800b046:	4857      	ldr	r0, [pc, #348]	; (800b1a4 <read_eob_mk10e+0x3dc>)
 800b048:	f010 f92d 	bl	801b2a6 <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b04c:	4b56      	ldr	r3, [pc, #344]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b04e:	6818      	ldr	r0, [r3, #0]
 800b050:	4b56      	ldr	r3, [pc, #344]	; (800b1ac <read_eob_mk10e+0x3e4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	461a      	mov	r2, r3
 800b056:	4956      	ldr	r1, [pc, #344]	; (800b1b0 <read_eob_mk10e+0x3e8>)
 800b058:	f010 febe 	bl	801bdd8 <siprintf>
		strcat(temp_data, (char*)csq);
 800b05c:	4b52      	ldr	r3, [pc, #328]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4954      	ldr	r1, [pc, #336]	; (800b1b4 <read_eob_mk10e+0x3ec>)
 800b062:	4618      	mov	r0, r3
 800b064:	f010 fed8 	bl	801be18 <strcat>
		strcat(temp_data,"\"");
 800b068:	4b4f      	ldr	r3, [pc, #316]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b06a:	681c      	ldr	r4, [r3, #0]
 800b06c:	4620      	mov	r0, r4
 800b06e:	f7f5 f8b9 	bl	80001e4 <strlen>
 800b072:	4603      	mov	r3, r0
 800b074:	4423      	add	r3, r4
 800b076:	4950      	ldr	r1, [pc, #320]	; (800b1b8 <read_eob_mk10e+0x3f0>)
 800b078:	461a      	mov	r2, r3
 800b07a:	460b      	mov	r3, r1
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b080:	4b4e      	ldr	r3, [pc, #312]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a4e      	ldr	r2, [pc, #312]	; (800b1c0 <read_eob_mk10e+0x3f8>)
 800b086:	461c      	mov	r4, r3
 800b088:	4615      	mov	r5, r2
 800b08a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b08c:	6020      	str	r0, [r4, #0]
 800b08e:	6061      	str	r1, [r4, #4]
 800b090:	60a2      	str	r2, [r4, #8]
 800b092:	60e3      	str	r3, [r4, #12]
 800b094:	6828      	ldr	r0, [r5, #0]
 800b096:	6120      	str	r0, [r4, #16]
 800b098:	88ab      	ldrh	r3, [r5, #4]
 800b09a:	79aa      	ldrb	r2, [r5, #6]
 800b09c:	82a3      	strh	r3, [r4, #20]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	75a3      	strb	r3, [r4, #22]
		strcat(temp_data, temp_data2);
 800b0a2:	4b41      	ldr	r3, [pc, #260]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4b45      	ldr	r3, [pc, #276]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f010 feb3 	bl	801be18 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b0b2:	4b42      	ldr	r3, [pc, #264]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b0b4:	681c      	ldr	r4, [r3, #0]
 800b0b6:	4b43      	ldr	r3, [pc, #268]	; (800b1c4 <read_eob_mk10e+0x3fc>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f5 fa54 	bl	8000568 <__aeabi_f2d>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4940      	ldr	r1, [pc, #256]	; (800b1c8 <read_eob_mk10e+0x400>)
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f010 fe86 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b0cc:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	4b3a      	ldr	r3, [pc, #232]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f010 fe9e 	bl	801be18 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b0dc:	4b37      	ldr	r3, [pc, #220]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	4b3a      	ldr	r3, [pc, #232]	; (800b1cc <read_eob_mk10e+0x404>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	493a      	ldr	r1, [pc, #232]	; (800b1d0 <read_eob_mk10e+0x408>)
 800b0e8:	f010 fe76 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b0ec:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	4b32      	ldr	r3, [pc, #200]	; (800b1bc <read_eob_mk10e+0x3f4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f010 fe8e 	bl	801be18 <strcat>
		strcpy(mydata,temp_data);
 800b0fc:	4b2a      	ldr	r3, [pc, #168]	; (800b1a8 <read_eob_mk10e+0x3e0>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4619      	mov	r1, r3
 800b102:	4828      	ldr	r0, [pc, #160]	; (800b1a4 <read_eob_mk10e+0x3dc>)
 800b104:	f010 fe97 	bl	801be36 <strcpy>
	}

	csqint = 1;
 800b108:	4b32      	ldr	r3, [pc, #200]	; (800b1d4 <read_eob_mk10e+0x40c>)
 800b10a:	2201      	movs	r2, #1
 800b10c:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800b10e:	4b32      	ldr	r3, [pc, #200]	; (800b1d8 <read_eob_mk10e+0x410>)
 800b110:	2201      	movs	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]
//	cgattint = check_cgatt_rtos();
//	csqint = check_csq_rtos();
	if(csqint || cgattint) {
 800b114:	4b2f      	ldr	r3, [pc, #188]	; (800b1d4 <read_eob_mk10e+0x40c>)
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d103      	bne.n	800b124 <read_eob_mk10e+0x35c>
 800b11c:	4b2e      	ldr	r3, [pc, #184]	; (800b1d8 <read_eob_mk10e+0x410>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d003      	beq.n	800b12c <read_eob_mk10e+0x364>
//		printf("online True\r\n");
		onlineMode = true;
 800b124:	4b2d      	ldr	r3, [pc, #180]	; (800b1dc <read_eob_mk10e+0x414>)
 800b126:	2201      	movs	r2, #1
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	e007      	b.n	800b13c <read_eob_mk10e+0x374>
	}
	else {
		onlineMode = false;
 800b12c:	4b2b      	ldr	r3, [pc, #172]	; (800b1dc <read_eob_mk10e+0x414>)
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800b132:	4b2b      	ldr	r3, [pc, #172]	; (800b1e0 <read_eob_mk10e+0x418>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3301      	adds	r3, #1
 800b138:	4a29      	ldr	r2, [pc, #164]	; (800b1e0 <read_eob_mk10e+0x418>)
 800b13a:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800b13c:	4b27      	ldr	r3, [pc, #156]	; (800b1dc <read_eob_mk10e+0x414>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d019      	beq.n	800b178 <read_eob_mk10e+0x3b0>
//		sendToServer(mydata,bufsizechararray(mydata));
//		usemqtt = true;
		if(usemqtt){
 800b144:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <read_eob_mk10e+0x41c>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00c      	beq.n	800b166 <read_eob_mk10e+0x39e>
			len_mydata=bufsizechararray(mydata);
 800b14c:	4815      	ldr	r0, [pc, #84]	; (800b1a4 <read_eob_mk10e+0x3dc>)
 800b14e:	f7fd f8af 	bl	80082b0 <bufsizechararray>
 800b152:	4602      	mov	r2, r0
 800b154:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <read_eob_mk10e+0x420>)
 800b156:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 800b158:	f7fd f940 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 800b15c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b160:	f00d fa6a 	bl	8018638 <osDelay>
			net_err_cnt=0;
			osDelay(1000);
			setup_modem();
		}
	}
}
 800b164:	e01a      	b.n	800b19c <read_eob_mk10e+0x3d4>
		else sendToServer((char *)mydata,bufsizechararray(mydata));
 800b166:	480f      	ldr	r0, [pc, #60]	; (800b1a4 <read_eob_mk10e+0x3dc>)
 800b168:	f7fd f8a2 	bl	80082b0 <bufsizechararray>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4619      	mov	r1, r3
 800b170:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <read_eob_mk10e+0x3dc>)
 800b172:	f7fc fd4d 	bl	8007c10 <sendToServer>
}
 800b176:	e011      	b.n	800b19c <read_eob_mk10e+0x3d4>
		if(net_err_cnt >= 3) {
 800b178:	4b19      	ldr	r3, [pc, #100]	; (800b1e0 <read_eob_mk10e+0x418>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	dd0d      	ble.n	800b19c <read_eob_mk10e+0x3d4>
			printf("Restart Modem \r\n");
 800b180:	481a      	ldr	r0, [pc, #104]	; (800b1ec <read_eob_mk10e+0x424>)
 800b182:	f010 fe11 	bl	801bda8 <puts>
			NB_rst1_rtos();
 800b186:	f7fe fa0d 	bl	80095a4 <NB_rst1_rtos>
			net_err_cnt=0;
 800b18a:	4b15      	ldr	r3, [pc, #84]	; (800b1e0 <read_eob_mk10e+0x418>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 800b190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b194:	f00d fa50 	bl	8018638 <osDelay>
			setup_modem();
 800b198:	f7fc fcac 	bl	8007af4 <setup_modem>
}
 800b19c:	bf00      	nop
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b1a4:	200046c8 	.word	0x200046c8
 800b1a8:	200045f4 	.word	0x200045f4
 800b1ac:	20000188 	.word	0x20000188
 800b1b0:	0801eeac 	.word	0x0801eeac
 800b1b4:	2000905c 	.word	0x2000905c
 800b1b8:	0801e4fc 	.word	0x0801e4fc
 800b1bc:	20008a00 	.word	0x20008a00
 800b1c0:	0801ee3c 	.word	0x0801ee3c
 800b1c4:	20005770 	.word	0x20005770
 800b1c8:	0801ea28 	.word	0x0801ea28
 800b1cc:	2000b510 	.word	0x2000b510
 800b1d0:	0801ea38 	.word	0x0801ea38
 800b1d4:	20008a04 	.word	0x20008a04
 800b1d8:	200045f0 	.word	0x200045f0
 800b1dc:	20000013 	.word	0x20000013
 800b1e0:	20002758 	.word	0x20002758
 800b1e4:	20004285 	.word	0x20004285
 800b1e8:	20009124 	.word	0x20009124
 800b1ec:	0801ee54 	.word	0x0801ee54

0800b1f0 <read_lp_mk10e>:

void read_lp_mk10e(){
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 800b1f6:	f7fa fd27 	bl	8005c48 <loginToMeterRTOS>
	osDelay(1000);
 800b1fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b1fe:	f00d fa1b 	bl	8018638 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800b202:	4b94      	ldr	r3, [pc, #592]	; (800b454 <read_lp_mk10e+0x264>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4994      	ldr	r1, [pc, #592]	; (800b458 <read_lp_mk10e+0x268>)
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f4 ffe1 	bl	80001d0 <strcmp>
 800b20e:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <read_lp_mk10e+0x2a>
 800b216:	f000 fa29 	bl	800b66c <read_sn_edmi>
	SerialMonprintln("Read EoB Init LP MK10E");
 800b21a:	4890      	ldr	r0, [pc, #576]	; (800b45c <read_lp_mk10e+0x26c>)
 800b21c:	f7fa fcc6 	bl	8005bac <SerialMonprintln>
	uart2done=false;
 800b220:	4b8f      	ldr	r3, [pc, #572]	; (800b460 <read_lp_mk10e+0x270>)
 800b222:	2200      	movs	r2, #0
 800b224:	701a      	strb	r2, [r3, #0]
	memset((char *)mydata,0,1100);
 800b226:	f240 424c 	movw	r2, #1100	; 0x44c
 800b22a:	2100      	movs	r1, #0
 800b22c:	488d      	ldr	r0, [pc, #564]	; (800b464 <read_lp_mk10e+0x274>)
 800b22e:	f010 f83a 	bl	801b2a6 <memset>
	memset((char *)uart3_temp,0,1100);
 800b232:	f240 424c 	movw	r2, #1100	; 0x44c
 800b236:	2100      	movs	r1, #0
 800b238:	488b      	ldr	r0, [pc, #556]	; (800b468 <read_lp_mk10e+0x278>)
 800b23a:	f010 f834 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800b23e:	f240 424c 	movw	r2, #1100	; 0x44c
 800b242:	2100      	movs	r1, #0
 800b244:	4889      	ldr	r0, [pc, #548]	; (800b46c <read_lp_mk10e+0x27c>)
 800b246:	f010 f82e 	bl	801b2a6 <memset>
	uart3done = false;
 800b24a:	4b89      	ldr	r3, [pc, #548]	; (800b470 <read_lp_mk10e+0x280>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800b250:	4b88      	ldr	r3, [pc, #544]	; (800b474 <read_lp_mk10e+0x284>)
 800b252:	2201      	movs	r2, #1
 800b254:	701a      	strb	r2, [r3, #0]
	txEobLpInitMK10E();
 800b256:	f7f9 f9eb 	bl	8004630 <txEobLpInitMK10E>
	for(int y=0;y<20;y++){
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e00d      	b.n	800b27c <read_lp_mk10e+0x8c>
		osDelay(200);
 800b260:	20c8      	movs	r0, #200	; 0xc8
 800b262:	f00d f9e9 	bl	8018638 <osDelay>
		if(uart3done){
 800b266:	4b82      	ldr	r3, [pc, #520]	; (800b470 <read_lp_mk10e+0x280>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <read_lp_mk10e+0x86>
			uart3disc = false;
 800b26e:	4b81      	ldr	r3, [pc, #516]	; (800b474 <read_lp_mk10e+0x284>)
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
			break;
 800b274:	e005      	b.n	800b282 <read_lp_mk10e+0x92>
	for(int y=0;y<20;y++){
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b13      	cmp	r3, #19
 800b280:	ddee      	ble.n	800b260 <read_lp_mk10e+0x70>
		}
	}
	if(!uart3disc){
 800b282:	4b7c      	ldr	r3, [pc, #496]	; (800b474 <read_lp_mk10e+0x284>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	f083 0301 	eor.w	r3, r3, #1
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00e      	beq.n	800b2ae <read_lp_mk10e+0xbe>
	rxEobLpInitMK10E((char *)buffer3,datauart3size(buffer3));
 800b290:	4876      	ldr	r0, [pc, #472]	; (800b46c <read_lp_mk10e+0x27c>)
 800b292:	f7fc fff5 	bl	8008280 <datauart3size>
 800b296:	4603      	mov	r3, r0
 800b298:	4619      	mov	r1, r3
 800b29a:	4874      	ldr	r0, [pc, #464]	; (800b46c <read_lp_mk10e+0x27c>)
 800b29c:	f7f9 f9f2 	bl	8004684 <rxEobLpInitMK10E>
	memset((char *)buffer3,0,1100);
 800b2a0:	f240 424c 	movw	r2, #1100	; 0x44c
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4871      	ldr	r0, [pc, #452]	; (800b46c <read_lp_mk10e+0x27c>)
 800b2a8:	f00f fffd 	bl	801b2a6 <memset>
 800b2ac:	e063      	b.n	800b376 <read_lp_mk10e+0x186>
	}
	else {
		memset((char *)mydata,0,1100);
 800b2ae:	f240 424c 	movw	r2, #1100	; 0x44c
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	486b      	ldr	r0, [pc, #428]	; (800b464 <read_lp_mk10e+0x274>)
 800b2b6:	f00f fff6 	bl	801b2a6 <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b2ba:	4b6f      	ldr	r3, [pc, #444]	; (800b478 <read_lp_mk10e+0x288>)
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	4b65      	ldr	r3, [pc, #404]	; (800b454 <read_lp_mk10e+0x264>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	496d      	ldr	r1, [pc, #436]	; (800b47c <read_lp_mk10e+0x28c>)
 800b2c6:	f010 fd87 	bl	801bdd8 <siprintf>
		strcat(temp_data, (char*)csq);
 800b2ca:	4b6b      	ldr	r3, [pc, #428]	; (800b478 <read_lp_mk10e+0x288>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	496c      	ldr	r1, [pc, #432]	; (800b480 <read_lp_mk10e+0x290>)
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f010 fda1 	bl	801be18 <strcat>
		strcat(temp_data,"\"");
 800b2d6:	4b68      	ldr	r3, [pc, #416]	; (800b478 <read_lp_mk10e+0x288>)
 800b2d8:	681c      	ldr	r4, [r3, #0]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7f4 ff82 	bl	80001e4 <strlen>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	4423      	add	r3, r4
 800b2e4:	4967      	ldr	r1, [pc, #412]	; (800b484 <read_lp_mk10e+0x294>)
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b2ee:	4b66      	ldr	r3, [pc, #408]	; (800b488 <read_lp_mk10e+0x298>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a66      	ldr	r2, [pc, #408]	; (800b48c <read_lp_mk10e+0x29c>)
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	4615      	mov	r5, r2
 800b2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2fa:	6020      	str	r0, [r4, #0]
 800b2fc:	6061      	str	r1, [r4, #4]
 800b2fe:	60a2      	str	r2, [r4, #8]
 800b300:	60e3      	str	r3, [r4, #12]
 800b302:	6828      	ldr	r0, [r5, #0]
 800b304:	6120      	str	r0, [r4, #16]
 800b306:	88ab      	ldrh	r3, [r5, #4]
 800b308:	79aa      	ldrb	r2, [r5, #6]
 800b30a:	82a3      	strh	r3, [r4, #20]
 800b30c:	4613      	mov	r3, r2
 800b30e:	75a3      	strb	r3, [r4, #22]
		strcat(temp_data, temp_data2);
 800b310:	4b59      	ldr	r3, [pc, #356]	; (800b478 <read_lp_mk10e+0x288>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	4b5c      	ldr	r3, [pc, #368]	; (800b488 <read_lp_mk10e+0x298>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f010 fd7c 	bl	801be18 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b320:	4b59      	ldr	r3, [pc, #356]	; (800b488 <read_lp_mk10e+0x298>)
 800b322:	681c      	ldr	r4, [r3, #0]
 800b324:	4b5a      	ldr	r3, [pc, #360]	; (800b490 <read_lp_mk10e+0x2a0>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7f5 f91d 	bl	8000568 <__aeabi_f2d>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4958      	ldr	r1, [pc, #352]	; (800b494 <read_lp_mk10e+0x2a4>)
 800b334:	4620      	mov	r0, r4
 800b336:	f010 fd4f 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b33a:	4b4f      	ldr	r3, [pc, #316]	; (800b478 <read_lp_mk10e+0x288>)
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	4b52      	ldr	r3, [pc, #328]	; (800b488 <read_lp_mk10e+0x298>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f010 fd67 	bl	801be18 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b34a:	4b4f      	ldr	r3, [pc, #316]	; (800b488 <read_lp_mk10e+0x298>)
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	4b52      	ldr	r3, [pc, #328]	; (800b498 <read_lp_mk10e+0x2a8>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	4951      	ldr	r1, [pc, #324]	; (800b49c <read_lp_mk10e+0x2ac>)
 800b356:	f010 fd3f 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b35a:	4b47      	ldr	r3, [pc, #284]	; (800b478 <read_lp_mk10e+0x288>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b4a      	ldr	r3, [pc, #296]	; (800b488 <read_lp_mk10e+0x298>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f010 fd57 	bl	801be18 <strcat>
		strcpy(mydata,temp_data);
 800b36a:	4b43      	ldr	r3, [pc, #268]	; (800b478 <read_lp_mk10e+0x288>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4619      	mov	r1, r3
 800b370:	483c      	ldr	r0, [pc, #240]	; (800b464 <read_lp_mk10e+0x274>)
 800b372:	f010 fd60 	bl	801be36 <strcpy>
	}

	loginToMeterRTOS();
 800b376:	f7fa fc67 	bl	8005c48 <loginToMeterRTOS>
	SerialMonprintln("Read LP MK10E");
 800b37a:	4849      	ldr	r0, [pc, #292]	; (800b4a0 <read_lp_mk10e+0x2b0>)
 800b37c:	f7fa fc16 	bl	8005bac <SerialMonprintln>
	uart2done=false;
 800b380:	4b37      	ldr	r3, [pc, #220]	; (800b460 <read_lp_mk10e+0x270>)
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800b386:	f240 424c 	movw	r2, #1100	; 0x44c
 800b38a:	2100      	movs	r1, #0
 800b38c:	4836      	ldr	r0, [pc, #216]	; (800b468 <read_lp_mk10e+0x278>)
 800b38e:	f00f ff8a 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800b392:	f240 424c 	movw	r2, #1100	; 0x44c
 800b396:	2100      	movs	r1, #0
 800b398:	4834      	ldr	r0, [pc, #208]	; (800b46c <read_lp_mk10e+0x27c>)
 800b39a:	f00f ff84 	bl	801b2a6 <memset>
	memset((char *)mydata,0,1100);
 800b39e:	f240 424c 	movw	r2, #1100	; 0x44c
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	482f      	ldr	r0, [pc, #188]	; (800b464 <read_lp_mk10e+0x274>)
 800b3a6:	f00f ff7e 	bl	801b2a6 <memset>
	uart3done = false;
 800b3aa:	4b31      	ldr	r3, [pc, #196]	; (800b470 <read_lp_mk10e+0x280>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800b3b0:	4b30      	ldr	r3, [pc, #192]	; (800b474 <read_lp_mk10e+0x284>)
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	701a      	strb	r2, [r3, #0]
	if(lp_rec !=0){
 800b3b6:	4b3b      	ldr	r3, [pc, #236]	; (800b4a4 <read_lp_mk10e+0x2b4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d008      	beq.n	800b3d0 <read_lp_mk10e+0x1e0>
		txLPMK10ERec(lp_rec);
 800b3be:	4b39      	ldr	r3, [pc, #228]	; (800b4a4 <read_lp_mk10e+0x2b4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7f8 fe06 	bl	8003fd4 <txLPMK10ERec>
		lp_rec = 0;
 800b3c8:	4b36      	ldr	r3, [pc, #216]	; (800b4a4 <read_lp_mk10e+0x2b4>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	e005      	b.n	800b3dc <read_lp_mk10e+0x1ec>
	}
	else 	txLPMK10E(1+cnt_lp);
 800b3d0:	4b35      	ldr	r3, [pc, #212]	; (800b4a8 <read_lp_mk10e+0x2b8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f8 fe4c 	bl	8004074 <txLPMK10E>
	for(int y=0;y<20;y++){
 800b3dc:	2300      	movs	r3, #0
 800b3de:	60bb      	str	r3, [r7, #8]
 800b3e0:	e00d      	b.n	800b3fe <read_lp_mk10e+0x20e>
		osDelay(200);
 800b3e2:	20c8      	movs	r0, #200	; 0xc8
 800b3e4:	f00d f928 	bl	8018638 <osDelay>
		if(uart3done){
 800b3e8:	4b21      	ldr	r3, [pc, #132]	; (800b470 <read_lp_mk10e+0x280>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <read_lp_mk10e+0x208>
			uart3disc = false;
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <read_lp_mk10e+0x284>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
			break;
 800b3f6:	e005      	b.n	800b404 <read_lp_mk10e+0x214>
	for(int y=0;y<20;y++){
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	60bb      	str	r3, [r7, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b13      	cmp	r3, #19
 800b402:	ddee      	ble.n	800b3e2 <read_lp_mk10e+0x1f2>
		}
	}
	memset(mydata,0,1100);
 800b404:	f240 424c 	movw	r2, #1100	; 0x44c
 800b408:	2100      	movs	r1, #0
 800b40a:	4816      	ldr	r0, [pc, #88]	; (800b464 <read_lp_mk10e+0x274>)
 800b40c:	f00f ff4b 	bl	801b2a6 <memset>
	if(!uart3disc){
 800b410:	4b18      	ldr	r3, [pc, #96]	; (800b474 <read_lp_mk10e+0x284>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f083 0301 	eor.w	r3, r3, #1
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d046      	beq.n	800b4ac <read_lp_mk10e+0x2bc>
	rxLPMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800b41e:	4813      	ldr	r0, [pc, #76]	; (800b46c <read_lp_mk10e+0x27c>)
 800b420:	f7fc ff2e 	bl	8008280 <datauart3size>
 800b424:	4603      	mov	r3, r0
 800b426:	461a      	mov	r2, r3
 800b428:	4910      	ldr	r1, [pc, #64]	; (800b46c <read_lp_mk10e+0x27c>)
 800b42a:	480e      	ldr	r0, [pc, #56]	; (800b464 <read_lp_mk10e+0x274>)
 800b42c:	f7f8 fe78 	bl	8004120 <rxLPMK10E>
	memset((char *)buffer3,0,1100);
 800b430:	f240 424c 	movw	r2, #1100	; 0x44c
 800b434:	2100      	movs	r1, #0
 800b436:	480d      	ldr	r0, [pc, #52]	; (800b46c <read_lp_mk10e+0x27c>)
 800b438:	f00f ff35 	bl	801b2a6 <memset>
	if(cnt_lp>0)cnt_lp--;
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <read_lp_mk10e+0x2b8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f340 809c 	ble.w	800b57e <read_lp_mk10e+0x38e>
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <read_lp_mk10e+0x2b8>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	4a16      	ldr	r2, [pc, #88]	; (800b4a8 <read_lp_mk10e+0x2b8>)
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	e095      	b.n	800b57e <read_lp_mk10e+0x38e>
 800b452:	bf00      	nop
 800b454:	20000188 	.word	0x20000188
 800b458:	0801e9b4 	.word	0x0801e9b4
 800b45c:	0801eedc 	.word	0x0801eedc
 800b460:	20003fe4 	.word	0x20003fe4
 800b464:	200046c8 	.word	0x200046c8
 800b468:	20005324 	.word	0x20005324
 800b46c:	200095e0 	.word	0x200095e0
 800b470:	200042f8 	.word	0x200042f8
 800b474:	2000430d 	.word	0x2000430d
 800b478:	200045f4 	.word	0x200045f4
 800b47c:	0801eeac 	.word	0x0801eeac
 800b480:	2000905c 	.word	0x2000905c
 800b484:	0801e4fc 	.word	0x0801e4fc
 800b488:	20008a00 	.word	0x20008a00
 800b48c:	0801ee3c 	.word	0x0801ee3c
 800b490:	20005770 	.word	0x20005770
 800b494:	0801ea28 	.word	0x0801ea28
 800b498:	2000b510 	.word	0x2000b510
 800b49c:	0801ea38 	.word	0x0801ea38
 800b4a0:	0801ef04 	.word	0x0801ef04
 800b4a4:	20000644 	.word	0x20000644
 800b4a8:	20000640 	.word	0x20000640
	}
	else {
		memset((char *)mydata,0,1100);
 800b4ac:	f240 424c 	movw	r2, #1100	; 0x44c
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	485a      	ldr	r0, [pc, #360]	; (800b61c <read_lp_mk10e+0x42c>)
 800b4b4:	f00f fef7 	bl	801b2a6 <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b4b8:	4b59      	ldr	r3, [pc, #356]	; (800b620 <read_lp_mk10e+0x430>)
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	4b59      	ldr	r3, [pc, #356]	; (800b624 <read_lp_mk10e+0x434>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4959      	ldr	r1, [pc, #356]	; (800b628 <read_lp_mk10e+0x438>)
 800b4c4:	f010 fc88 	bl	801bdd8 <siprintf>
		strcat(temp_data, (char*)csq);
 800b4c8:	4b55      	ldr	r3, [pc, #340]	; (800b620 <read_lp_mk10e+0x430>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4957      	ldr	r1, [pc, #348]	; (800b62c <read_lp_mk10e+0x43c>)
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f010 fca2 	bl	801be18 <strcat>
		strcat(temp_data,"\"");
 800b4d4:	4b52      	ldr	r3, [pc, #328]	; (800b620 <read_lp_mk10e+0x430>)
 800b4d6:	681c      	ldr	r4, [r3, #0]
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7f4 fe83 	bl	80001e4 <strlen>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4423      	add	r3, r4
 800b4e2:	4953      	ldr	r1, [pc, #332]	; (800b630 <read_lp_mk10e+0x440>)
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b4ec:	4b51      	ldr	r3, [pc, #324]	; (800b634 <read_lp_mk10e+0x444>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a51      	ldr	r2, [pc, #324]	; (800b638 <read_lp_mk10e+0x448>)
 800b4f2:	461c      	mov	r4, r3
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4f8:	6020      	str	r0, [r4, #0]
 800b4fa:	6061      	str	r1, [r4, #4]
 800b4fc:	60a2      	str	r2, [r4, #8]
 800b4fe:	60e3      	str	r3, [r4, #12]
 800b500:	6828      	ldr	r0, [r5, #0]
 800b502:	6120      	str	r0, [r4, #16]
 800b504:	88ab      	ldrh	r3, [r5, #4]
 800b506:	79aa      	ldrb	r2, [r5, #6]
 800b508:	82a3      	strh	r3, [r4, #20]
 800b50a:	4613      	mov	r3, r2
 800b50c:	75a3      	strb	r3, [r4, #22]
		strcat(temp_data, temp_data2);
 800b50e:	4b44      	ldr	r3, [pc, #272]	; (800b620 <read_lp_mk10e+0x430>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b48      	ldr	r3, [pc, #288]	; (800b634 <read_lp_mk10e+0x444>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f010 fc7d 	bl	801be18 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b51e:	4b45      	ldr	r3, [pc, #276]	; (800b634 <read_lp_mk10e+0x444>)
 800b520:	681c      	ldr	r4, [r3, #0]
 800b522:	4b46      	ldr	r3, [pc, #280]	; (800b63c <read_lp_mk10e+0x44c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4618      	mov	r0, r3
 800b528:	f7f5 f81e 	bl	8000568 <__aeabi_f2d>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4943      	ldr	r1, [pc, #268]	; (800b640 <read_lp_mk10e+0x450>)
 800b532:	4620      	mov	r0, r4
 800b534:	f010 fc50 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b538:	4b39      	ldr	r3, [pc, #228]	; (800b620 <read_lp_mk10e+0x430>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b3d      	ldr	r3, [pc, #244]	; (800b634 <read_lp_mk10e+0x444>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4619      	mov	r1, r3
 800b542:	4610      	mov	r0, r2
 800b544:	f010 fc68 	bl	801be18 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b548:	4b3a      	ldr	r3, [pc, #232]	; (800b634 <read_lp_mk10e+0x444>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	4b3d      	ldr	r3, [pc, #244]	; (800b644 <read_lp_mk10e+0x454>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	493d      	ldr	r1, [pc, #244]	; (800b648 <read_lp_mk10e+0x458>)
 800b554:	f010 fc40 	bl	801bdd8 <siprintf>
		strcat(temp_data, temp_data2);
 800b558:	4b31      	ldr	r3, [pc, #196]	; (800b620 <read_lp_mk10e+0x430>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	4b35      	ldr	r3, [pc, #212]	; (800b634 <read_lp_mk10e+0x444>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f010 fc58 	bl	801be18 <strcat>
		strcpy(mydata,temp_data);
 800b568:	4b2d      	ldr	r3, [pc, #180]	; (800b620 <read_lp_mk10e+0x430>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	482b      	ldr	r0, [pc, #172]	; (800b61c <read_lp_mk10e+0x42c>)
 800b570:	f010 fc61 	bl	801be36 <strcpy>
		cnt_lp++;
 800b574:	4b35      	ldr	r3, [pc, #212]	; (800b64c <read_lp_mk10e+0x45c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	4a34      	ldr	r2, [pc, #208]	; (800b64c <read_lp_mk10e+0x45c>)
 800b57c:	6013      	str	r3, [r2, #0]
	}
	csqint = 1;
 800b57e:	4b34      	ldr	r3, [pc, #208]	; (800b650 <read_lp_mk10e+0x460>)
 800b580:	2201      	movs	r2, #1
 800b582:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800b584:	4b33      	ldr	r3, [pc, #204]	; (800b654 <read_lp_mk10e+0x464>)
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800b58a:	4b31      	ldr	r3, [pc, #196]	; (800b650 <read_lp_mk10e+0x460>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d103      	bne.n	800b59a <read_lp_mk10e+0x3aa>
 800b592:	4b30      	ldr	r3, [pc, #192]	; (800b654 <read_lp_mk10e+0x464>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <read_lp_mk10e+0x3b2>
		onlineMode = true;
 800b59a:	4b2f      	ldr	r3, [pc, #188]	; (800b658 <read_lp_mk10e+0x468>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	701a      	strb	r2, [r3, #0]
 800b5a0:	e007      	b.n	800b5b2 <read_lp_mk10e+0x3c2>
	}
	else {
		onlineMode = false;
 800b5a2:	4b2d      	ldr	r3, [pc, #180]	; (800b658 <read_lp_mk10e+0x468>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800b5a8:	4b2c      	ldr	r3, [pc, #176]	; (800b65c <read_lp_mk10e+0x46c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a2b      	ldr	r2, [pc, #172]	; (800b65c <read_lp_mk10e+0x46c>)
 800b5b0:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800b5b2:	4b29      	ldr	r3, [pc, #164]	; (800b658 <read_lp_mk10e+0x468>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d019      	beq.n	800b5ee <read_lp_mk10e+0x3fe>
		if(usemqtt){
 800b5ba:	4b29      	ldr	r3, [pc, #164]	; (800b660 <read_lp_mk10e+0x470>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00c      	beq.n	800b5dc <read_lp_mk10e+0x3ec>
			len_mydata=bufsizechararray(mydata);
 800b5c2:	4816      	ldr	r0, [pc, #88]	; (800b61c <read_lp_mk10e+0x42c>)
 800b5c4:	f7fc fe74 	bl	80082b0 <bufsizechararray>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	4b26      	ldr	r3, [pc, #152]	; (800b664 <read_lp_mk10e+0x474>)
 800b5cc:	601a      	str	r2, [r3, #0]
			sendMQTTMAIN();
 800b5ce:	f7fc ff05 	bl	80083dc <sendMQTTMAIN>
			osDelay(2000);
 800b5d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5d6:	f00d f82f 	bl	8018638 <osDelay>
			net_err_cnt=0;
			osDelay(1000);
			setup_modem();
		}
	}
}
 800b5da:	e01a      	b.n	800b612 <read_lp_mk10e+0x422>
		else sendToServer(mydata,bufsizechararray(mydata));
 800b5dc:	480f      	ldr	r0, [pc, #60]	; (800b61c <read_lp_mk10e+0x42c>)
 800b5de:	f7fc fe67 	bl	80082b0 <bufsizechararray>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	480d      	ldr	r0, [pc, #52]	; (800b61c <read_lp_mk10e+0x42c>)
 800b5e8:	f7fc fb12 	bl	8007c10 <sendToServer>
}
 800b5ec:	e011      	b.n	800b612 <read_lp_mk10e+0x422>
		if(net_err_cnt >= 3) {
 800b5ee:	4b1b      	ldr	r3, [pc, #108]	; (800b65c <read_lp_mk10e+0x46c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	dd0d      	ble.n	800b612 <read_lp_mk10e+0x422>
			printf("Restart Modem \r\n");
 800b5f6:	481c      	ldr	r0, [pc, #112]	; (800b668 <read_lp_mk10e+0x478>)
 800b5f8:	f010 fbd6 	bl	801bda8 <puts>
			NB_rst1_rtos();
 800b5fc:	f7fd ffd2 	bl	80095a4 <NB_rst1_rtos>
			net_err_cnt=0;
 800b600:	4b16      	ldr	r3, [pc, #88]	; (800b65c <read_lp_mk10e+0x46c>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 800b606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b60a:	f00d f815 	bl	8018638 <osDelay>
			setup_modem();
 800b60e:	f7fc fa71 	bl	8007af4 <setup_modem>
}
 800b612:	bf00      	nop
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bdb0      	pop	{r4, r5, r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200046c8 	.word	0x200046c8
 800b620:	200045f4 	.word	0x200045f4
 800b624:	20000188 	.word	0x20000188
 800b628:	0801eeac 	.word	0x0801eeac
 800b62c:	2000905c 	.word	0x2000905c
 800b630:	0801e4fc 	.word	0x0801e4fc
 800b634:	20008a00 	.word	0x20008a00
 800b638:	0801ee3c 	.word	0x0801ee3c
 800b63c:	20005770 	.word	0x20005770
 800b640:	0801ea28 	.word	0x0801ea28
 800b644:	2000b510 	.word	0x2000b510
 800b648:	0801ea38 	.word	0x0801ea38
 800b64c:	20000640 	.word	0x20000640
 800b650:	20008a04 	.word	0x20008a04
 800b654:	200045f0 	.word	0x200045f0
 800b658:	20000013 	.word	0x20000013
 800b65c:	20002758 	.word	0x20002758
 800b660:	20004285 	.word	0x20004285
 800b664:	20009124 	.word	0x20009124
 800b668:	0801ee54 	.word	0x0801ee54

0800b66c <read_sn_edmi>:

void read_sn_edmi(){
 800b66c:	b590      	push	{r4, r7, lr}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
	memset((char *)mydata,0,1100);
 800b672:	f240 424c 	movw	r2, #1100	; 0x44c
 800b676:	2100      	movs	r1, #0
 800b678:	4830      	ldr	r0, [pc, #192]	; (800b73c <read_sn_edmi+0xd0>)
 800b67a:	f00f fe14 	bl	801b2a6 <memset>
	loginToMeterRTOS();
 800b67e:	f7fa fae3 	bl	8005c48 <loginToMeterRTOS>
	uart3done = false;
 800b682:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <read_sn_edmi+0xd4>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
	uart2done=false;
 800b688:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <read_sn_edmi+0xd8>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800b68e:	f240 424c 	movw	r2, #1100	; 0x44c
 800b692:	2100      	movs	r1, #0
 800b694:	482c      	ldr	r0, [pc, #176]	; (800b748 <read_sn_edmi+0xdc>)
 800b696:	f00f fe06 	bl	801b2a6 <memset>
	memset((char *)buffer3,0,1100);
 800b69a:	f240 424c 	movw	r2, #1100	; 0x44c
 800b69e:	2100      	movs	r1, #0
 800b6a0:	482a      	ldr	r0, [pc, #168]	; (800b74c <read_sn_edmi+0xe0>)
 800b6a2:	f00f fe00 	bl	801b2a6 <memset>
	uart3disc = true;
 800b6a6:	4b2a      	ldr	r3, [pc, #168]	; (800b750 <read_sn_edmi+0xe4>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]
	txSNMK10E_rtos();
 800b6ac:	f7f8 f82c 	bl	8003708 <txSNMK10E_rtos>
	for(int y=0;y<20;y++){
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	e00d      	b.n	800b6d2 <read_sn_edmi+0x66>
		osDelay(200);
 800b6b6:	20c8      	movs	r0, #200	; 0xc8
 800b6b8:	f00c ffbe 	bl	8018638 <osDelay>
		if(uart3done){
 800b6bc:	4b20      	ldr	r3, [pc, #128]	; (800b740 <read_sn_edmi+0xd4>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <read_sn_edmi+0x60>
			uart3disc = false;
 800b6c4:	4b22      	ldr	r3, [pc, #136]	; (800b750 <read_sn_edmi+0xe4>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
			break;
 800b6ca:	e005      	b.n	800b6d8 <read_sn_edmi+0x6c>
	for(int y=0;y<20;y++){
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b13      	cmp	r3, #19
 800b6d6:	ddee      	ble.n	800b6b6 <read_sn_edmi+0x4a>
		}
	}
	if(!uart3disc){
 800b6d8:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <read_sn_edmi+0xe4>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f083 0301 	eor.w	r3, r3, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d022      	beq.n	800b72c <read_sn_edmi+0xc0>
	snMeter = rxSNMK10E_rtos(buffer3,datauart3size(buffer3));
 800b6e6:	4819      	ldr	r0, [pc, #100]	; (800b74c <read_sn_edmi+0xe0>)
 800b6e8:	f7fc fdca 	bl	8008280 <datauart3size>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4816      	ldr	r0, [pc, #88]	; (800b74c <read_sn_edmi+0xe0>)
 800b6f2:	f7f8 f81d 	bl	8003730 <rxSNMK10E_rtos>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <read_sn_edmi+0xe8>)
 800b6fc:	601a      	str	r2, [r3, #0]
	if(typemeter == 6) setSNMK6N(snMeter,strlen(snMeter));
 800b6fe:	4b16      	ldr	r3, [pc, #88]	; (800b758 <read_sn_edmi+0xec>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b06      	cmp	r3, #6
 800b704:	d10b      	bne.n	800b71e <read_sn_edmi+0xb2>
 800b706:	4b13      	ldr	r3, [pc, #76]	; (800b754 <read_sn_edmi+0xe8>)
 800b708:	681c      	ldr	r4, [r3, #0]
 800b70a:	4b12      	ldr	r3, [pc, #72]	; (800b754 <read_sn_edmi+0xe8>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7f4 fd68 	bl	80001e4 <strlen>
 800b714:	4603      	mov	r3, r0
 800b716:	4619      	mov	r1, r3
 800b718:	4620      	mov	r0, r4
 800b71a:	f7f5 fee9 	bl	80014f0 <setSNMK6N>
	memset((char *)buffer3,0,1100);
 800b71e:	f240 424c 	movw	r2, #1100	; 0x44c
 800b722:	2100      	movs	r1, #0
 800b724:	4809      	ldr	r0, [pc, #36]	; (800b74c <read_sn_edmi+0xe0>)
 800b726:	f00f fdbe 	bl	801b2a6 <memset>
	}
	else {
		snMeter = "00000000";
	}
}
 800b72a:	e002      	b.n	800b732 <read_sn_edmi+0xc6>
		snMeter = "00000000";
 800b72c:	4b09      	ldr	r3, [pc, #36]	; (800b754 <read_sn_edmi+0xe8>)
 800b72e:	4a0b      	ldr	r2, [pc, #44]	; (800b75c <read_sn_edmi+0xf0>)
 800b730:	601a      	str	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	bd90      	pop	{r4, r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200046c8 	.word	0x200046c8
 800b740:	200042f8 	.word	0x200042f8
 800b744:	20003fe4 	.word	0x20003fe4
 800b748:	20005324 	.word	0x20005324
 800b74c:	200095e0 	.word	0x200095e0
 800b750:	2000430d 	.word	0x2000430d
 800b754:	20000188 	.word	0x20000188
 800b758:	2000b50c 	.word	0x2000b50c
 800b75c:	0801e9b4 	.word	0x0801e9b4

0800b760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b760:	b5b0      	push	{r4, r5, r7, lr}
 800b762:	b0c2      	sub	sp, #264	; 0x108
 800b764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	ATSMPUB=malloc(26);
 800b766:	201a      	movs	r0, #26
 800b768:	f00f fd8a 	bl	801b280 <malloc>
 800b76c:	4603      	mov	r3, r0
 800b76e:	461a      	mov	r2, r3
 800b770:	4ba1      	ldr	r3, [pc, #644]	; (800b9f8 <main+0x298>)
 800b772:	601a      	str	r2, [r3, #0]
	smstatestr=malloc(11);
 800b774:	200b      	movs	r0, #11
 800b776:	f00f fd83 	bl	801b280 <malloc>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	4b9f      	ldr	r3, [pc, #636]	; (800b9fc <main+0x29c>)
 800b780:	601a      	str	r2, [r3, #0]
	temp_data=malloc(200);
 800b782:	20c8      	movs	r0, #200	; 0xc8
 800b784:	f00f fd7c 	bl	801b280 <malloc>
 800b788:	4603      	mov	r3, r0
 800b78a:	461a      	mov	r2, r3
 800b78c:	4b9c      	ldr	r3, [pc, #624]	; (800ba00 <main+0x2a0>)
 800b78e:	601a      	str	r2, [r3, #0]
	temp_data2=malloc(50);
 800b790:	2032      	movs	r0, #50	; 0x32
 800b792:	f00f fd75 	bl	801b280 <malloc>
 800b796:	4603      	mov	r3, r0
 800b798:	461a      	mov	r2, r3
 800b79a:	4b9a      	ldr	r3, [pc, #616]	; (800ba04 <main+0x2a4>)
 800b79c:	601a      	str	r2, [r3, #0]
	networkstr=malloc(20);
 800b79e:	2014      	movs	r0, #20
 800b7a0:	f00f fd6e 	bl	801b280 <malloc>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	4b97      	ldr	r3, [pc, #604]	; (800ba08 <main+0x2a8>)
 800b7aa:	601a      	str	r2, [r3, #0]
	uart2busy = false;
 800b7ac:	4b97      	ldr	r3, [pc, #604]	; (800ba0c <main+0x2ac>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	701a      	strb	r2, [r3, #0]
	eob_date = 1;
 800b7b2:	4b97      	ldr	r3, [pc, #604]	; (800ba10 <main+0x2b0>)
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	701a      	strb	r2, [r3, #0]
	eob_hour = 10;
 800b7b8:	4b96      	ldr	r3, [pc, #600]	; (800ba14 <main+0x2b4>)
 800b7ba:	220a      	movs	r2, #10
 800b7bc:	701a      	strb	r2, [r3, #0]
	eob_minute = 0;
 800b7be:	4b96      	ldr	r3, [pc, #600]	; (800ba18 <main+0x2b8>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
	instant_hour = 19;
 800b7c4:	4b95      	ldr	r3, [pc, #596]	; (800ba1c <main+0x2bc>)
 800b7c6:	2213      	movs	r2, #19
 800b7c8:	701a      	strb	r2, [r3, #0]
	instant_minute = 0;
 800b7ca:	4b95      	ldr	r3, [pc, #596]	; (800ba20 <main+0x2c0>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b7d0:	f003 f957 	bl	800ea82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b7d4:	f000 fbc4 	bl	800bf60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b7d8:	f000 fe3a 	bl	800c450 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800b7dc:	f000 fda8 	bl	800c330 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b7e0:	f000 fdd6 	bl	800c390 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800b7e4:	f000 fcc4 	bl	800c170 <MX_I2C1_Init>
  MX_SPI2_Init();
 800b7e8:	f000 fd64 	bl	800c2b4 <MX_SPI2_Init>
  MX_FATFS_Init();
 800b7ec:	f009 fb58 	bl	8014ea0 <MX_FATFS_Init>
  MX_RTC_Init();
 800b7f0:	f000 fcfe 	bl	800c1f0 <MX_RTC_Init>
  MX_ADC1_Init();
 800b7f4:	f000 fc56 	bl	800c0a4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800b7f8:	f000 fdfa 	bl	800c3f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(HARD_RST_GPIO_Port, HARD_RST_Pin, GPIO_PIN_SET);
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b806:	f004 fd7f 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800b80a:	2201      	movs	r2, #1
 800b80c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b814:	f004 fd78 	bl	8010308 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800b818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b81c:	f003 f968 	bl	800eaf0 <HAL_Delay>
  sprintf((char*)tx_buffer, "\nV1.10 31-12-2020\n");
 800b820:	4a80      	ldr	r2, [pc, #512]	; (800ba24 <main+0x2c4>)
 800b822:	4b81      	ldr	r3, [pc, #516]	; (800ba28 <main+0x2c8>)
 800b824:	4615      	mov	r5, r2
 800b826:	461c      	mov	r4, r3
 800b828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b82a:	6028      	str	r0, [r5, #0]
 800b82c:	6069      	str	r1, [r5, #4]
 800b82e:	60aa      	str	r2, [r5, #8]
 800b830:	60eb      	str	r3, [r5, #12]
 800b832:	8823      	ldrh	r3, [r4, #0]
 800b834:	78a2      	ldrb	r2, [r4, #2]
 800b836:	822b      	strh	r3, [r5, #16]
 800b838:	4613      	mov	r3, r2
 800b83a:	74ab      	strb	r3, [r5, #18]
  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b83c:	4879      	ldr	r0, [pc, #484]	; (800ba24 <main+0x2c4>)
 800b83e:	f7f4 fcd1 	bl	80001e4 <strlen>
 800b842:	4603      	mov	r3, r0
 800b844:	b29b      	uxth	r3, r3
 800b846:	4619      	mov	r1, r3
 800b848:	4876      	ldr	r0, [pc, #472]	; (800ba24 <main+0x2c4>)
 800b84a:	f7fc fd79 	bl	8008340 <tx_com>

  onlineMode = false;
 800b84e:	4b77      	ldr	r3, [pc, #476]	; (800ba2c <main+0x2cc>)
 800b850:	2200      	movs	r2, #0
 800b852:	701a      	strb	r2, [r3, #0]
  onlineMode = true;
 800b854:	4b75      	ldr	r3, [pc, #468]	; (800ba2c <main+0x2cc>)
 800b856:	2201      	movs	r2, #1
 800b858:	701a      	strb	r2, [r3, #0]
  //NBIOT
//  NB_rst1();
  NB_rst();
 800b85a:	f7fd febd 	bl	80095d8 <NB_rst>
  HAL_Delay(5000);
 800b85e:	f241 3088 	movw	r0, #5000	; 0x1388
 800b862:	f003 f945 	bl	800eaf0 <HAL_Delay>
//  NBIOT_setup();
//  HAL_Delay(1000);
//  setup_modem_nortos();
  HAL_Delay(1000);
 800b866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b86a:	f003 f941 	bl	800eaf0 <HAL_Delay>
  usemqtt=false;
 800b86e:	4b70      	ldr	r3, [pc, #448]	; (800ba30 <main+0x2d0>)
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]

    SerialMonprintln("Login To Meter");
 800b874:	486f      	ldr	r0, [pc, #444]	; (800ba34 <main+0x2d4>)
 800b876:	f7fa f999 	bl	8005bac <SerialMonprintln>
//    loginToMeter();
//    HAL_Delay(500);
    SerialMonprintln("Read SN Meter");
 800b87a:	486f      	ldr	r0, [pc, #444]	; (800ba38 <main+0x2d8>)
 800b87c:	f7fa f996 	bl	8005bac <SerialMonprintln>
//    printf("%s\r\n",snMeter);

//  if(onlineMode) setup_modem();
	
  //Main power fail detection
  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800b880:	2102      	movs	r1, #2
 800b882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b886:	f004 fd27 	bl	80102d8 <HAL_GPIO_ReadPin>
 800b88a:	4603      	mov	r3, r0
 800b88c:	461a      	mov	r2, r3
 800b88e:	4b6b      	ldr	r3, [pc, #428]	; (800ba3c <main+0x2dc>)
 800b890:	701a      	strb	r2, [r3, #0]
  sprintf((char*)tx_buffer, "pwr_vmon: %d\n", pwr_vmon);
 800b892:	4b6a      	ldr	r3, [pc, #424]	; (800ba3c <main+0x2dc>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	4969      	ldr	r1, [pc, #420]	; (800ba40 <main+0x2e0>)
 800b89a:	4862      	ldr	r0, [pc, #392]	; (800ba24 <main+0x2c4>)
 800b89c:	f010 fa9c 	bl	801bdd8 <siprintf>
  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b8a0:	4860      	ldr	r0, [pc, #384]	; (800ba24 <main+0x2c4>)
 800b8a2:	f7f4 fc9f 	bl	80001e4 <strlen>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	485d      	ldr	r0, [pc, #372]	; (800ba24 <main+0x2c4>)
 800b8ae:	f7fc fd47 	bl	8008340 <tx_com>
  pwr_state=1;
 800b8b2:	4b64      	ldr	r3, [pc, #400]	; (800ba44 <main+0x2e4>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	701a      	strb	r2, [r3, #0]
//  sprintf((char*)tx_buffer, "pwr_vmon: %d\n", pwr_vmon);
//  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );

  //Mount SD Card
  //SD CARD
  fresult = f_mount(&fs, "/", 1);
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	4963      	ldr	r1, [pc, #396]	; (800ba48 <main+0x2e8>)
 800b8bc:	4863      	ldr	r0, [pc, #396]	; (800ba4c <main+0x2ec>)
 800b8be:	f00b fcbb 	bl	8017238 <f_mount>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4b62      	ldr	r3, [pc, #392]	; (800ba50 <main+0x2f0>)
 800b8c8:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 800b8ca:	4b61      	ldr	r3, [pc, #388]	; (800ba50 <main+0x2f0>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d017      	beq.n	800b902 <main+0x1a2>
  {
	  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800b8d2:	4a54      	ldr	r2, [pc, #336]	; (800ba24 <main+0x2c4>)
 800b8d4:	4b5f      	ldr	r3, [pc, #380]	; (800ba54 <main+0x2f4>)
 800b8d6:	4615      	mov	r5, r2
 800b8d8:	461c      	mov	r4, r3
 800b8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8dc:	6028      	str	r0, [r5, #0]
 800b8de:	6069      	str	r1, [r5, #4]
 800b8e0:	60aa      	str	r2, [r5, #8]
 800b8e2:	60eb      	str	r3, [r5, #12]
 800b8e4:	cc03      	ldmia	r4!, {r0, r1}
 800b8e6:	6128      	str	r0, [r5, #16]
 800b8e8:	6169      	str	r1, [r5, #20]
 800b8ea:	7823      	ldrb	r3, [r4, #0]
 800b8ec:	762b      	strb	r3, [r5, #24]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b8ee:	484d      	ldr	r0, [pc, #308]	; (800ba24 <main+0x2c4>)
 800b8f0:	f7f4 fc78 	bl	80001e4 <strlen>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	484a      	ldr	r0, [pc, #296]	; (800ba24 <main+0x2c4>)
 800b8fc:	f7fc fd20 	bl	8008340 <tx_com>
 800b900:	e12f      	b.n	800bb62 <main+0x402>
  }
  else
  {
	  sprintf((char*)tx_buffer, "SD Card Successfully Mounted\n");
 800b902:	4a48      	ldr	r2, [pc, #288]	; (800ba24 <main+0x2c4>)
 800b904:	4b54      	ldr	r3, [pc, #336]	; (800ba58 <main+0x2f8>)
 800b906:	4615      	mov	r5, r2
 800b908:	461c      	mov	r4, r3
 800b90a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b90c:	6028      	str	r0, [r5, #0]
 800b90e:	6069      	str	r1, [r5, #4]
 800b910:	60aa      	str	r2, [r5, #8]
 800b912:	60eb      	str	r3, [r5, #12]
 800b914:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b916:	6128      	str	r0, [r5, #16]
 800b918:	6169      	str	r1, [r5, #20]
 800b91a:	61aa      	str	r2, [r5, #24]
 800b91c:	8823      	ldrh	r3, [r4, #0]
 800b91e:	83ab      	strh	r3, [r5, #28]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b920:	4840      	ldr	r0, [pc, #256]	; (800ba24 <main+0x2c4>)
 800b922:	f7f4 fc5f 	bl	80001e4 <strlen>
 800b926:	4603      	mov	r3, r0
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4619      	mov	r1, r3
 800b92c:	483d      	ldr	r0, [pc, #244]	; (800ba24 <main+0x2c4>)
 800b92e:	f7fc fd07 	bl	8008340 <tx_com>
	  fresult = f_open(&fil, "sdfile1.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800b932:	2233      	movs	r2, #51	; 0x33
 800b934:	4949      	ldr	r1, [pc, #292]	; (800ba5c <main+0x2fc>)
 800b936:	484a      	ldr	r0, [pc, #296]	; (800ba60 <main+0x300>)
 800b938:	f00b fce2 	bl	8017300 <f_open>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	4b43      	ldr	r3, [pc, #268]	; (800ba50 <main+0x2f0>)
 800b942:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800b944:	4b42      	ldr	r3, [pc, #264]	; (800ba50 <main+0x2f0>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d016      	beq.n	800b97a <main+0x21a>
	  {
		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800b94c:	4a35      	ldr	r2, [pc, #212]	; (800ba24 <main+0x2c4>)
 800b94e:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <main+0x304>)
 800b950:	4615      	mov	r5, r2
 800b952:	461c      	mov	r4, r3
 800b954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b956:	6028      	str	r0, [r5, #0]
 800b958:	6069      	str	r1, [r5, #4]
 800b95a:	60aa      	str	r2, [r5, #8]
 800b95c:	60eb      	str	r3, [r5, #12]
 800b95e:	6820      	ldr	r0, [r4, #0]
 800b960:	6128      	str	r0, [r5, #16]
 800b962:	7923      	ldrb	r3, [r4, #4]
 800b964:	752b      	strb	r3, [r5, #20]
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b966:	482f      	ldr	r0, [pc, #188]	; (800ba24 <main+0x2c4>)
 800b968:	f7f4 fc3c 	bl	80001e4 <strlen>
 800b96c:	4603      	mov	r3, r0
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4619      	mov	r1, r3
 800b972:	482c      	ldr	r0, [pc, #176]	; (800ba24 <main+0x2c4>)
 800b974:	f7fc fce4 	bl	8008340 <tx_com>
 800b978:	e019      	b.n	800b9ae <main+0x24e>
	  }
	  else
	  {
		  sprintf((char*)tx_buffer, "File Successfully Opened\n");
 800b97a:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <main+0x2c4>)
 800b97c:	4b3a      	ldr	r3, [pc, #232]	; (800ba68 <main+0x308>)
 800b97e:	4615      	mov	r5, r2
 800b980:	461c      	mov	r4, r3
 800b982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b984:	6028      	str	r0, [r5, #0]
 800b986:	6069      	str	r1, [r5, #4]
 800b988:	60aa      	str	r2, [r5, #8]
 800b98a:	60eb      	str	r3, [r5, #12]
 800b98c:	cc03      	ldmia	r4!, {r0, r1}
 800b98e:	6128      	str	r0, [r5, #16]
 800b990:	6169      	str	r1, [r5, #20]
 800b992:	8823      	ldrh	r3, [r4, #0]
 800b994:	832b      	strh	r3, [r5, #24]
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b996:	4823      	ldr	r0, [pc, #140]	; (800ba24 <main+0x2c4>)
 800b998:	f7f4 fc24 	bl	80001e4 <strlen>
 800b99c:	4603      	mov	r3, r0
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4820      	ldr	r0, [pc, #128]	; (800ba24 <main+0x2c4>)
 800b9a4:	f7fc fccc 	bl	8008340 <tx_com>
		   f_close(&fil);
 800b9a8:	482d      	ldr	r0, [pc, #180]	; (800ba60 <main+0x300>)
 800b9aa:	f00c fa96 	bl	8017eda <f_close>
	  }
	  fresult = f_open(&fil, "config.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800b9ae:	2233      	movs	r2, #51	; 0x33
 800b9b0:	492e      	ldr	r1, [pc, #184]	; (800ba6c <main+0x30c>)
 800b9b2:	482b      	ldr	r0, [pc, #172]	; (800ba60 <main+0x300>)
 800b9b4:	f00b fca4 	bl	8017300 <f_open>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4b24      	ldr	r3, [pc, #144]	; (800ba50 <main+0x2f0>)
 800b9be:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800b9c0:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <main+0x2f0>)
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d053      	beq.n	800ba70 <main+0x310>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800b9c8:	4a16      	ldr	r2, [pc, #88]	; (800ba24 <main+0x2c4>)
 800b9ca:	4b26      	ldr	r3, [pc, #152]	; (800ba64 <main+0x304>)
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	461c      	mov	r4, r3
 800b9d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9d2:	6028      	str	r0, [r5, #0]
 800b9d4:	6069      	str	r1, [r5, #4]
 800b9d6:	60aa      	str	r2, [r5, #8]
 800b9d8:	60eb      	str	r3, [r5, #12]
 800b9da:	6820      	ldr	r0, [r4, #0]
 800b9dc:	6128      	str	r0, [r5, #16]
 800b9de:	7923      	ldrb	r3, [r4, #4]
 800b9e0:	752b      	strb	r3, [r5, #20]
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800b9e2:	4810      	ldr	r0, [pc, #64]	; (800ba24 <main+0x2c4>)
 800b9e4:	f7f4 fbfe 	bl	80001e4 <strlen>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	480d      	ldr	r0, [pc, #52]	; (800ba24 <main+0x2c4>)
 800b9f0:	f7fc fca6 	bl	8008340 <tx_com>
 800b9f4:	e065      	b.n	800bac2 <main+0x362>
 800b9f6:	bf00      	nop
 800b9f8:	20004308 	.word	0x20004308
 800b9fc:	2000b000 	.word	0x2000b000
 800ba00:	200045f4 	.word	0x200045f4
 800ba04:	20008a00 	.word	0x20008a00
 800ba08:	20005314 	.word	0x20005314
 800ba0c:	2000b004 	.word	0x2000b004
 800ba10:	200089f8 	.word	0x200089f8
 800ba14:	200081bb 	.word	0x200081bb
 800ba18:	2000818c 	.word	0x2000818c
 800ba1c:	20008184 	.word	0x20008184
 800ba20:	200081ba 	.word	0x200081ba
 800ba24:	200068bc 	.word	0x200068bc
 800ba28:	0801ef14 	.word	0x0801ef14
 800ba2c:	20000013 	.word	0x20000013
 800ba30:	20004285 	.word	0x20004285
 800ba34:	0801ef28 	.word	0x0801ef28
 800ba38:	0801ef38 	.word	0x0801ef38
 800ba3c:	2000b510 	.word	0x2000b510
 800ba40:	0801ef48 	.word	0x0801ef48
 800ba44:	20007243 	.word	0x20007243
 800ba48:	0801e4e8 	.word	0x0801e4e8
 800ba4c:	20004318 	.word	0x20004318
 800ba50:	20009058 	.word	0x20009058
 800ba54:	0801ed58 	.word	0x0801ed58
 800ba58:	0801ed74 	.word	0x0801ed74
 800ba5c:	0801ef58 	.word	0x0801ef58
 800ba60:	2000a280 	.word	0x2000a280
 800ba64:	0801ed94 	.word	0x0801ed94
 800ba68:	0801edac 	.word	0x0801edac
 800ba6c:	0801ef64 	.word	0x0801ef64
	  	  }
	  	  else
	  	  {
	  		  sprintf((char*)tx_buffer, "File Successfully Opened\n");
 800ba70:	4a4b      	ldr	r2, [pc, #300]	; (800bba0 <main+0x440>)
 800ba72:	4b4c      	ldr	r3, [pc, #304]	; (800bba4 <main+0x444>)
 800ba74:	4615      	mov	r5, r2
 800ba76:	461c      	mov	r4, r3
 800ba78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7a:	6028      	str	r0, [r5, #0]
 800ba7c:	6069      	str	r1, [r5, #4]
 800ba7e:	60aa      	str	r2, [r5, #8]
 800ba80:	60eb      	str	r3, [r5, #12]
 800ba82:	cc03      	ldmia	r4!, {r0, r1}
 800ba84:	6128      	str	r0, [r5, #16]
 800ba86:	6169      	str	r1, [r5, #20]
 800ba88:	8823      	ldrh	r3, [r4, #0]
 800ba8a:	832b      	strh	r3, [r5, #24]
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800ba8c:	4844      	ldr	r0, [pc, #272]	; (800bba0 <main+0x440>)
 800ba8e:	f7f4 fba9 	bl	80001e4 <strlen>
 800ba92:	4603      	mov	r3, r0
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4619      	mov	r1, r3
 800ba98:	4841      	ldr	r0, [pc, #260]	; (800bba0 <main+0x440>)
 800ba9a:	f7fc fc51 	bl	8008340 <tx_com>
	  		  f_puts("13\n", &fil);
 800ba9e:	4942      	ldr	r1, [pc, #264]	; (800bba8 <main+0x448>)
 800baa0:	4842      	ldr	r0, [pc, #264]	; (800bbac <main+0x44c>)
 800baa2:	f00c fbba 	bl	801821a <f_puts>
			  f_puts("10\n", &fil);
 800baa6:	4940      	ldr	r1, [pc, #256]	; (800bba8 <main+0x448>)
 800baa8:	4841      	ldr	r0, [pc, #260]	; (800bbb0 <main+0x450>)
 800baaa:	f00c fbb6 	bl	801821a <f_puts>
			  f_puts("30\n", &fil);
 800baae:	493e      	ldr	r1, [pc, #248]	; (800bba8 <main+0x448>)
 800bab0:	4840      	ldr	r0, [pc, #256]	; (800bbb4 <main+0x454>)
 800bab2:	f00c fbb2 	bl	801821a <f_puts>
			  printf("\nConfig is created and the data is written\r\n");
 800bab6:	4840      	ldr	r0, [pc, #256]	; (800bbb8 <main+0x458>)
 800bab8:	f010 f976 	bl	801bda8 <puts>
	  		  f_close(&fil);
 800babc:	483a      	ldr	r0, [pc, #232]	; (800bba8 <main+0x448>)
 800babe:	f00c fa0c 	bl	8017eda <f_close>
	  	  }
	  // Open file to read
	  fresult = f_open(&fil, "configmtr.txt", FA_READ);
 800bac2:	2201      	movs	r2, #1
 800bac4:	493d      	ldr	r1, [pc, #244]	; (800bbbc <main+0x45c>)
 800bac6:	4838      	ldr	r0, [pc, #224]	; (800bba8 <main+0x448>)
 800bac8:	f00b fc1a 	bl	8017300 <f_open>
 800bacc:	4603      	mov	r3, r0
 800bace:	461a      	mov	r2, r3
 800bad0:	4b3b      	ldr	r3, [pc, #236]	; (800bbc0 <main+0x460>)
 800bad2:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800bad4:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <main+0x460>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d016      	beq.n	800bb0a <main+0x3aa>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800badc:	4a30      	ldr	r2, [pc, #192]	; (800bba0 <main+0x440>)
 800bade:	4b39      	ldr	r3, [pc, #228]	; (800bbc4 <main+0x464>)
 800bae0:	4615      	mov	r5, r2
 800bae2:	461c      	mov	r4, r3
 800bae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bae6:	6028      	str	r0, [r5, #0]
 800bae8:	6069      	str	r1, [r5, #4]
 800baea:	60aa      	str	r2, [r5, #8]
 800baec:	60eb      	str	r3, [r5, #12]
 800baee:	6820      	ldr	r0, [r4, #0]
 800baf0:	6128      	str	r0, [r5, #16]
 800baf2:	7923      	ldrb	r3, [r4, #4]
 800baf4:	752b      	strb	r3, [r5, #20]
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800baf6:	482a      	ldr	r0, [pc, #168]	; (800bba0 <main+0x440>)
 800baf8:	f7f4 fb74 	bl	80001e4 <strlen>
 800bafc:	4603      	mov	r3, r0
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	4619      	mov	r1, r3
 800bb02:	4827      	ldr	r0, [pc, #156]	; (800bba0 <main+0x440>)
 800bb04:	f7fc fc1c 	bl	8008340 <tx_com>
 800bb08:	e02b      	b.n	800bb62 <main+0x402>
	  	  }
	  	  else
	  	  {
	  		  bufclear();
 800bb0a:	f7fc fbe9 	bl	80082e0 <bufclear>
	  		  // Read data from file
	  		  f_gets(buffer,sizeof(buffer),&fil);
 800bb0e:	4a26      	ldr	r2, [pc, #152]	; (800bba8 <main+0x448>)
 800bb10:	f240 414c 	movw	r1, #1100	; 0x44c
 800bb14:	482c      	ldr	r0, [pc, #176]	; (800bbc8 <main+0x468>)
 800bb16:	f00c facb 	bl	80180b0 <f_gets>
	  		  typemeter = 6;
 800bb1a:	4b2c      	ldr	r3, [pc, #176]	; (800bbcc <main+0x46c>)
 800bb1c:	2206      	movs	r2, #6
 800bb1e:	601a      	str	r2, [r3, #0]
	  		  printf(buffer);
 800bb20:	4829      	ldr	r0, [pc, #164]	; (800bbc8 <main+0x468>)
 800bb22:	f010 f8cd 	bl	801bcc0 <iprintf>
	  		  typemeter = charToInt(buffer[11]);
 800bb26:	4b28      	ldr	r3, [pc, #160]	; (800bbc8 <main+0x468>)
 800bb28:	7adb      	ldrb	r3, [r3, #11]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fc fbfa 	bl	8008324 <charToInt>
 800bb30:	4602      	mov	r2, r0
 800bb32:	4b26      	ldr	r3, [pc, #152]	; (800bbcc <main+0x46c>)
 800bb34:	601a      	str	r2, [r3, #0]
	  		  if(typemeter!=6){
 800bb36:	4b25      	ldr	r3, [pc, #148]	; (800bbcc <main+0x46c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b06      	cmp	r3, #6
 800bb3c:	d006      	beq.n	800bb4c <main+0x3ec>
	  			  if(typemeter==1){
 800bb3e:	4b23      	ldr	r3, [pc, #140]	; (800bbcc <main+0x46c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d102      	bne.n	800bb4c <main+0x3ec>
	  				  typemeter=10;
 800bb46:	4b21      	ldr	r3, [pc, #132]	; (800bbcc <main+0x46c>)
 800bb48:	220a      	movs	r2, #10
 800bb4a:	601a      	str	r2, [r3, #0]
	  			  }
	  		  }
//	  		  typemeter = 6;
	  		  printf("\r\nType Meter : %d\r\n",typemeter);
 800bb4c:	4b1f      	ldr	r3, [pc, #124]	; (800bbcc <main+0x46c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	481f      	ldr	r0, [pc, #124]	; (800bbd0 <main+0x470>)
 800bb54:	f010 f8b4 	bl	801bcc0 <iprintf>
	  		  // Close file
	  		  f_close(&fil);
 800bb58:	4813      	ldr	r0, [pc, #76]	; (800bba8 <main+0x448>)
 800bb5a:	f00c f9be 	bl	8017eda <f_close>
	  		  bufclear();
 800bb5e:	f7fc fbbf 	bl	80082e0 <bufclear>
	  	  }
  }

  //i2cdevice , slave address:0x6B<<1
  if(HAL_I2C_IsDeviceReady(&hi2c1,0x6B<<1,2,10) ==HAL_OK){
 800bb62:	230a      	movs	r3, #10
 800bb64:	2202      	movs	r2, #2
 800bb66:	21d6      	movs	r1, #214	; 0xd6
 800bb68:	481a      	ldr	r0, [pc, #104]	; (800bbd4 <main+0x474>)
 800bb6a:	f005 f8af 	bl	8010ccc <HAL_I2C_IsDeviceReady>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d133      	bne.n	800bbdc <main+0x47c>
	  sprintf((char*)tx_buffer, "LSM6DSL found\n");
 800bb74:	4a0a      	ldr	r2, [pc, #40]	; (800bba0 <main+0x440>)
 800bb76:	4b18      	ldr	r3, [pc, #96]	; (800bbd8 <main+0x478>)
 800bb78:	4614      	mov	r4, r2
 800bb7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb7c:	6020      	str	r0, [r4, #0]
 800bb7e:	6061      	str	r1, [r4, #4]
 800bb80:	60a2      	str	r2, [r4, #8]
 800bb82:	881a      	ldrh	r2, [r3, #0]
 800bb84:	789b      	ldrb	r3, [r3, #2]
 800bb86:	81a2      	strh	r2, [r4, #12]
 800bb88:	73a3      	strb	r3, [r4, #14]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bb8a:	4805      	ldr	r0, [pc, #20]	; (800bba0 <main+0x440>)
 800bb8c:	f7f4 fb2a 	bl	80001e4 <strlen>
 800bb90:	4603      	mov	r3, r0
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	4619      	mov	r1, r3
 800bb96:	4802      	ldr	r0, [pc, #8]	; (800bba0 <main+0x440>)
 800bb98:	f7fc fbd2 	bl	8008340 <tx_com>
 800bb9c:	e035      	b.n	800bc0a <main+0x4aa>
 800bb9e:	bf00      	nop
 800bba0:	200068bc 	.word	0x200068bc
 800bba4:	0801edac 	.word	0x0801edac
 800bba8:	2000a280 	.word	0x2000a280
 800bbac:	0801ef70 	.word	0x0801ef70
 800bbb0:	0801ef74 	.word	0x0801ef74
 800bbb4:	0801ef78 	.word	0x0801ef78
 800bbb8:	0801ef7c 	.word	0x0801ef7c
 800bbbc:	0801efa8 	.word	0x0801efa8
 800bbc0:	20009058 	.word	0x20009058
 800bbc4:	0801ed94 	.word	0x0801ed94
 800bbc8:	20007248 	.word	0x20007248
 800bbcc:	2000b50c 	.word	0x2000b50c
 800bbd0:	0801efb8 	.word	0x0801efb8
 800bbd4:	20004550 	.word	0x20004550
 800bbd8:	0801efcc 	.word	0x0801efcc
  }
  else
  {
	  sprintf((char*)tx_buffer, "LSM6DSL not found\n");
 800bbdc:	4ab5      	ldr	r2, [pc, #724]	; (800beb4 <main+0x754>)
 800bbde:	4bb6      	ldr	r3, [pc, #728]	; (800beb8 <main+0x758>)
 800bbe0:	4615      	mov	r5, r2
 800bbe2:	461c      	mov	r4, r3
 800bbe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbe6:	6028      	str	r0, [r5, #0]
 800bbe8:	6069      	str	r1, [r5, #4]
 800bbea:	60aa      	str	r2, [r5, #8]
 800bbec:	60eb      	str	r3, [r5, #12]
 800bbee:	8823      	ldrh	r3, [r4, #0]
 800bbf0:	78a2      	ldrb	r2, [r4, #2]
 800bbf2:	822b      	strh	r3, [r5, #16]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	74ab      	strb	r3, [r5, #18]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bbf8:	48ae      	ldr	r0, [pc, #696]	; (800beb4 <main+0x754>)
 800bbfa:	f7f4 faf3 	bl	80001e4 <strlen>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	48ab      	ldr	r0, [pc, #684]	; (800beb4 <main+0x754>)
 800bc06:	f7fc fb9b 	bl	8008340 <tx_com>
  }

  bufclear();
 800bc0a:	f7fc fb69 	bl	80082e0 <bufclear>
  HAL_Delay(1000);
 800bc0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc12:	f002 ff6d 	bl	800eaf0 <HAL_Delay>
	
  //check i2c communication , return:0x6A
  uint16_t output;
  LSM6DSL_readRegister(&output,0x0F);
 800bc16:	f507 7383 	add.w	r3, r7, #262	; 0x106
 800bc1a:	210f      	movs	r1, #15
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fd ff2f 	bl	8009a80 <LSM6DSL_readRegister>
  LSM6DSL_setup();
 800bc22:	f7fd ff59 	bl	8009ad8 <LSM6DSL_setup>
  printf("read:%X\r\n",(uint8_t)output);
 800bc26:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	48a3      	ldr	r0, [pc, #652]	; (800bebc <main+0x75c>)
 800bc30:	f010 f846 	bl	801bcc0 <iprintf>
	
//
	
  // Check free space
  f_getfree("", &fre_clust, &pfs);
 800bc34:	4aa2      	ldr	r2, [pc, #648]	; (800bec0 <main+0x760>)
 800bc36:	49a3      	ldr	r1, [pc, #652]	; (800bec4 <main+0x764>)
 800bc38:	48a3      	ldr	r0, [pc, #652]	; (800bec8 <main+0x768>)
 800bc3a:	f00c f97d 	bl	8017f38 <f_getfree>
  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800bc3e:	4ba0      	ldr	r3, [pc, #640]	; (800bec0 <main+0x760>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	3b02      	subs	r3, #2
 800bc46:	4a9e      	ldr	r2, [pc, #632]	; (800bec0 <main+0x760>)
 800bc48:	6812      	ldr	r2, [r2, #0]
 800bc4a:	8952      	ldrh	r2, [r2, #10]
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f4 fc67 	bl	8000524 <__aeabi_ui2d>
 800bc56:	f04f 0200 	mov.w	r2, #0
 800bc5a:	4b9c      	ldr	r3, [pc, #624]	; (800becc <main+0x76c>)
 800bc5c:	f7f4 fcdc 	bl	8000618 <__aeabi_dmul>
 800bc60:	4603      	mov	r3, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	4618      	mov	r0, r3
 800bc66:	4621      	mov	r1, r4
 800bc68:	f7f4 ffae 	bl	8000bc8 <__aeabi_d2uiz>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	4b98      	ldr	r3, [pc, #608]	; (800bed0 <main+0x770>)
 800bc70:	601a      	str	r2, [r3, #0]
  bufclear();
 800bc72:	f7fc fb35 	bl	80082e0 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800bc76:	4b92      	ldr	r3, [pc, #584]	; (800bec0 <main+0x760>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	895b      	ldrh	r3, [r3, #10]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4b91      	ldr	r3, [pc, #580]	; (800bec4 <main+0x764>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	fb03 f302 	mul.w	r3, r3, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7f4 fc4c 	bl	8000524 <__aeabi_ui2d>
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	4b8e      	ldr	r3, [pc, #568]	; (800becc <main+0x76c>)
 800bc92:	f7f4 fcc1 	bl	8000618 <__aeabi_dmul>
 800bc96:	4603      	mov	r3, r0
 800bc98:	460c      	mov	r4, r1
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	f7f4 ff93 	bl	8000bc8 <__aeabi_d2uiz>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4b8b      	ldr	r3, [pc, #556]	; (800bed4 <main+0x774>)
 800bca6:	601a      	str	r2, [r3, #0]

  // Open file to write/ create a file if it doesn't exist 
  fresult = f_open(&fil, "sdfile1.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800bca8:	2233      	movs	r2, #51	; 0x33
 800bcaa:	498b      	ldr	r1, [pc, #556]	; (800bed8 <main+0x778>)
 800bcac:	488b      	ldr	r0, [pc, #556]	; (800bedc <main+0x77c>)
 800bcae:	f00b fb27 	bl	8017300 <f_open>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4b8a      	ldr	r3, [pc, #552]	; (800bee0 <main+0x780>)
 800bcb8:	701a      	strb	r2, [r3, #0]

  // Writing text 
  f_puts("Message: Hello World 123\n", &fil);
 800bcba:	4988      	ldr	r1, [pc, #544]	; (800bedc <main+0x77c>)
 800bcbc:	4889      	ldr	r0, [pc, #548]	; (800bee4 <main+0x784>)
 800bcbe:	f00c faac 	bl	801821a <f_puts>
  printf("\nFile1 is created and the data is written\r\n");
 800bcc2:	4889      	ldr	r0, [pc, #548]	; (800bee8 <main+0x788>)
 800bcc4:	f010 f870 	bl	801bda8 <puts>

  // Close file 
  fresult = f_close(&fil);
 800bcc8:	4884      	ldr	r0, [pc, #528]	; (800bedc <main+0x77c>)
 800bcca:	f00c f906 	bl	8017eda <f_close>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b83      	ldr	r3, [pc, #524]	; (800bee0 <main+0x780>)
 800bcd4:	701a      	strb	r2, [r3, #0]

  // Open file to read
  fresult = f_open(&fil, "sdfile1.txt", FA_READ);
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	497f      	ldr	r1, [pc, #508]	; (800bed8 <main+0x778>)
 800bcda:	4880      	ldr	r0, [pc, #512]	; (800bedc <main+0x77c>)
 800bcdc:	f00b fb10 	bl	8017300 <f_open>
 800bce0:	4603      	mov	r3, r0
 800bce2:	461a      	mov	r2, r3
 800bce4:	4b7e      	ldr	r3, [pc, #504]	; (800bee0 <main+0x780>)
 800bce6:	701a      	strb	r2, [r3, #0]

  //Read String from the file
  f_gets(buffer,sizeof(buffer),&fil);
 800bce8:	4a7c      	ldr	r2, [pc, #496]	; (800bedc <main+0x77c>)
 800bcea:	f240 414c 	movw	r1, #1100	; 0x44c
 800bcee:	487f      	ldr	r0, [pc, #508]	; (800beec <main+0x78c>)
 800bcf0:	f00c f9de 	bl	80180b0 <f_gets>
  printf("\nSD Card read:%s\r\n",buffer);
 800bcf4:	497d      	ldr	r1, [pc, #500]	; (800beec <main+0x78c>)
 800bcf6:	487e      	ldr	r0, [pc, #504]	; (800bef0 <main+0x790>)
 800bcf8:	f00f ffe2 	bl	801bcc0 <iprintf>

  //Close file
  f_close(&fil);
 800bcfc:	4877      	ldr	r0, [pc, #476]	; (800bedc <main+0x77c>)
 800bcfe:	f00c f8ec 	bl	8017eda <f_close>
  bufclear();
 800bd02:	f7fc faed 	bl	80082e0 <bufclear>
  f_mount(0, "", 0);
 800bd06:	2200      	movs	r2, #0
 800bd08:	496f      	ldr	r1, [pc, #444]	; (800bec8 <main+0x768>)
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	f00b fa94 	bl	8017238 <f_mount>
//  HAL_Delay(1000);
//  NBIOT_setup();
//  HAL_Delay(1000);
//  setup_modem_nortos();
//  HAL_Delay(1000);
  usemqtt=true;
 800bd10:	4b78      	ldr	r3, [pc, #480]	; (800bef4 <main+0x794>)
 800bd12:	2201      	movs	r2, #1
 800bd14:	701a      	strb	r2, [r3, #0]
//  MQTT_setup();
  //enable uart interrupt
  HAL_UART_Receive_IT(&huart1,(uint8_t *)uart1_buf,1);
 800bd16:	2201      	movs	r2, #1
 800bd18:	4977      	ldr	r1, [pc, #476]	; (800bef8 <main+0x798>)
 800bd1a:	4878      	ldr	r0, [pc, #480]	; (800befc <main+0x79c>)
 800bd1c:	f008 f94a 	bl	8013fb4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
 800bd20:	2201      	movs	r2, #1
 800bd22:	4977      	ldr	r1, [pc, #476]	; (800bf00 <main+0x7a0>)
 800bd24:	4877      	ldr	r0, [pc, #476]	; (800bf04 <main+0x7a4>)
 800bd26:	f008 f945 	bl	8013fb4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)uart3_buf,1);
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4976      	ldr	r1, [pc, #472]	; (800bf08 <main+0x7a8>)
 800bd2e:	4877      	ldr	r0, [pc, #476]	; (800bf0c <main+0x7ac>)
 800bd30:	f008 f940 	bl	8013fb4 <HAL_UART_Receive_IT>
  NBIOT_setup_IT();
 800bd34:	f7fd fd9a 	bl	800986c <NBIOT_setup_IT>
  MQTT_setup();
 800bd38:	f7fd fe3c 	bl	80099b4 <MQTT_setup>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexStaticDef(myMutex01, &myMutex01ControlBlock);
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bd42:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <main+0x7b0>)
 800bd44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800bd48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f00c fd13 	bl	8018778 <osMutexCreate>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b6f      	ldr	r3, [pc, #444]	; (800bf14 <main+0x7b4>)
 800bd56:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainProgram */
  osThreadStaticDef(mainProgram, main_program, osPriorityNormal, 0, 512, mainProgramBuffer, &mainProgramControlBlock);
 800bd58:	4b6f      	ldr	r3, [pc, #444]	; (800bf18 <main+0x7b8>)
 800bd5a:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800bd5e:	461d      	mov	r5, r3
 800bd60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bd68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainProgramHandle = osThreadCreate(osThread(mainProgram), NULL);
 800bd6c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800bd70:	2100      	movs	r1, #0
 800bd72:	4618      	mov	r0, r3
 800bd74:	f00c fc14 	bl	80185a0 <osThreadCreate>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	4b68      	ldr	r3, [pc, #416]	; (800bf1c <main+0x7bc>)
 800bd7c:	601a      	str	r2, [r3, #0]

  /* definition and creation of readGyro */
  osThreadStaticDef(readGyro, read_gyro, osPriorityLow, 0, 128, readGyroBuffer, &readGyroControlBlock);
 800bd7e:	4b68      	ldr	r3, [pc, #416]	; (800bf20 <main+0x7c0>)
 800bd80:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800bd84:	461d      	mov	r5, r3
 800bd86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bd8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGyroHandle = osThreadCreate(osThread(readGyro), NULL);
 800bd92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800bd96:	2100      	movs	r1, #0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f00c fc01 	bl	80185a0 <osThreadCreate>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	4b60      	ldr	r3, [pc, #384]	; (800bf24 <main+0x7c4>)
 800bda2:	601a      	str	r2, [r3, #0]

  /* definition and creation of sendDataToServe */
  osThreadStaticDef(sendDataToServe, send_data_to_server, osPriorityNormal, 0, 512, sendDataToServeBuffer, &sendDataToServeControlBlock);
 800bda4:	4b60      	ldr	r3, [pc, #384]	; (800bf28 <main+0x7c8>)
 800bda6:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800bdaa:	461d      	mov	r5, r3
 800bdac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bdb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendDataToServeHandle = osThreadCreate(osThread(sendDataToServe), NULL);
 800bdb8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f00c fbee 	bl	80185a0 <osThreadCreate>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	4b59      	ldr	r3, [pc, #356]	; (800bf2c <main+0x7cc>)
 800bdc8:	601a      	str	r2, [r3, #0]

  /* definition and creation of readEoB */
  osThreadStaticDef(readEoB, read_EoB, osPriorityNormal, 0, 700, readEoBBuffer, &readEoBControlBlock);
 800bdca:	4b59      	ldr	r3, [pc, #356]	; (800bf30 <main+0x7d0>)
 800bdcc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800bdd0:	461d      	mov	r5, r3
 800bdd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bdda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readEoBHandle = osThreadCreate(osThread(readEoB), NULL);
 800bdde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bde2:	2100      	movs	r1, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f00c fbdb 	bl	80185a0 <osThreadCreate>
 800bdea:	4602      	mov	r2, r0
 800bdec:	4b51      	ldr	r3, [pc, #324]	; (800bf34 <main+0x7d4>)
 800bdee:	601a      	str	r2, [r3, #0]

  /* definition and creation of readLP */
  osThreadStaticDef(readLP, read_LP, osPriorityNormal, 0, 700, readLPBuffer, &readLPControlBlock);
 800bdf0:	4b51      	ldr	r3, [pc, #324]	; (800bf38 <main+0x7d8>)
 800bdf2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800bdf6:	461d      	mov	r5, r3
 800bdf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readLPHandle = osThreadCreate(osThread(readLP), NULL);
 800be04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800be08:	2100      	movs	r1, #0
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00c fbc8 	bl	80185a0 <osThreadCreate>
 800be10:	4602      	mov	r2, r0
 800be12:	4b4a      	ldr	r3, [pc, #296]	; (800bf3c <main+0x7dc>)
 800be14:	601a      	str	r2, [r3, #0]

  /* definition and creation of readInstant */
  osThreadStaticDef(readInstant, read_instant, osPriorityNormal, 0, 700, readInstantBuffer, &readInstantControlBlock);
 800be16:	4b4a      	ldr	r3, [pc, #296]	; (800bf40 <main+0x7e0>)
 800be18:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800be1c:	461d      	mov	r5, r3
 800be1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readInstantHandle = osThreadCreate(osThread(readInstant), NULL);
 800be2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800be2e:	2100      	movs	r1, #0
 800be30:	4618      	mov	r0, r3
 800be32:	f00c fbb5 	bl	80185a0 <osThreadCreate>
 800be36:	4602      	mov	r2, r0
 800be38:	4b42      	ldr	r3, [pc, #264]	; (800bf44 <main+0x7e4>)
 800be3a:	601a      	str	r2, [r3, #0]

  /* definition and creation of sendHardBit */
  osThreadStaticDef(sendHardBit, send_hard_bit, osPriorityNormal, 0, 512, sendHardBitBuffer, &sendHardBitControlBlock);
 800be3c:	4b42      	ldr	r3, [pc, #264]	; (800bf48 <main+0x7e8>)
 800be3e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800be42:	461d      	mov	r5, r3
 800be44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendHardBitHandle = osThreadCreate(osThread(sendHardBit), NULL);
 800be50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800be54:	2100      	movs	r1, #0
 800be56:	4618      	mov	r0, r3
 800be58:	f00c fba2 	bl	80185a0 <osThreadCreate>
 800be5c:	4602      	mov	r2, r0
 800be5e:	4b3b      	ldr	r3, [pc, #236]	; (800bf4c <main+0x7ec>)
 800be60:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkVbat */
  osThreadStaticDef(checkVbat, check_vbat, osPriorityNormal, 0, 128, checkVbatBuffer, &checkVbatControlBlock);
 800be62:	4b3b      	ldr	r3, [pc, #236]	; (800bf50 <main+0x7f0>)
 800be64:	f107 041c 	add.w	r4, r7, #28
 800be68:	461d      	mov	r5, r3
 800be6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkVbatHandle = osThreadCreate(osThread(checkVbat), NULL);
 800be76:	f107 031c 	add.w	r3, r7, #28
 800be7a:	2100      	movs	r1, #0
 800be7c:	4618      	mov	r0, r3
 800be7e:	f00c fb8f 	bl	80185a0 <osThreadCreate>
 800be82:	4602      	mov	r2, r0
 800be84:	4b33      	ldr	r3, [pc, #204]	; (800bf54 <main+0x7f4>)
 800be86:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkVMon */
  osThreadStaticDef(checkVMon, check_vmon, osPriorityNormal, 0, 128, checkVMonBuffer, &checkVMonControlBlock);
 800be88:	463b      	mov	r3, r7
 800be8a:	4a33      	ldr	r2, [pc, #204]	; (800bf58 <main+0x7f8>)
 800be8c:	461c      	mov	r4, r3
 800be8e:	4615      	mov	r5, r2
 800be90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkVMonHandle = osThreadCreate(osThread(checkVMon), NULL);
 800be9c:	463b      	mov	r3, r7
 800be9e:	2100      	movs	r1, #0
 800bea0:	4618      	mov	r0, r3
 800bea2:	f00c fb7d 	bl	80185a0 <osThreadCreate>
 800bea6:	4602      	mov	r2, r0
 800bea8:	4b2c      	ldr	r3, [pc, #176]	; (800bf5c <main+0x7fc>)
 800beaa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800beac:	f00c fb71 	bl	8018592 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800beb0:	e7fe      	b.n	800beb0 <main+0x750>
 800beb2:	bf00      	nop
 800beb4:	200068bc 	.word	0x200068bc
 800beb8:	0801efdc 	.word	0x0801efdc
 800bebc:	0801eff0 	.word	0x0801eff0
 800bec0:	20009054 	.word	0x20009054
 800bec4:	20003fcc 	.word	0x20003fcc
 800bec8:	0801effc 	.word	0x0801effc
 800becc:	3fe00000 	.word	0x3fe00000
 800bed0:	200090c4 	.word	0x200090c4
 800bed4:	20007224 	.word	0x20007224
 800bed8:	0801ef58 	.word	0x0801ef58
 800bedc:	2000a280 	.word	0x2000a280
 800bee0:	20009058 	.word	0x20009058
 800bee4:	0801f000 	.word	0x0801f000
 800bee8:	0801f01c 	.word	0x0801f01c
 800beec:	20007248 	.word	0x20007248
 800bef0:	0801f048 	.word	0x0801f048
 800bef4:	20004285 	.word	0x20004285
 800bef8:	200095dc 	.word	0x200095dc
 800befc:	20002fe0 	.word	0x20002fe0
 800bf00:	20004284 	.word	0x20004284
 800bf04:	200038e4 	.word	0x200038e4
 800bf08:	200089fc 	.word	0x200089fc
 800bf0c:	20002770 	.word	0x20002770
 800bf10:	20003fe8 	.word	0x20003fe8
 800bf14:	2000afa4 	.word	0x2000afa4
 800bf18:	0801f068 	.word	0x0801f068
 800bf1c:	200081b4 	.word	0x200081b4
 800bf20:	0801f090 	.word	0x0801f090
 800bf24:	20009128 	.word	0x20009128
 800bf28:	0801f0bc 	.word	0x0801f0bc
 800bf2c:	20008188 	.word	0x20008188
 800bf30:	0801f0e0 	.word	0x0801f0e0
 800bf34:	2000afa0 	.word	0x2000afa0
 800bf38:	0801f104 	.word	0x0801f104
 800bf3c:	200046c4 	.word	0x200046c4
 800bf40:	0801f12c 	.word	0x0801f12c
 800bf44:	2000646c 	.word	0x2000646c
 800bf48:	0801f154 	.word	0x0801f154
 800bf4c:	2000b514 	.word	0x2000b514
 800bf50:	0801f17c 	.word	0x0801f17c
 800bf54:	20005774 	.word	0x20005774
 800bf58:	0801f1a4 	.word	0x0801f1a4
 800bf5c:	2000531c 	.word	0x2000531c

0800bf60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b0ae      	sub	sp, #184	; 0xb8
 800bf64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bf66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800bf6a:	2244      	movs	r2, #68	; 0x44
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f00f f999 	bl	801b2a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bf74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
 800bf7c:	605a      	str	r2, [r3, #4]
 800bf7e:	609a      	str	r2, [r3, #8]
 800bf80:	60da      	str	r2, [r3, #12]
 800bf82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf84:	1d3b      	adds	r3, r7, #4
 800bf86:	225c      	movs	r2, #92	; 0x5c
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f00f f98b 	bl	801b2a6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800bf90:	f005 fac4 	bl	801151c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800bf94:	4b41      	ldr	r3, [pc, #260]	; (800c09c <SystemClock_Config+0x13c>)
 800bf96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf9a:	4a40      	ldr	r2, [pc, #256]	; (800c09c <SystemClock_Config+0x13c>)
 800bf9c:	f023 0318 	bic.w	r3, r3, #24
 800bfa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800bfa4:	231c      	movs	r3, #28
 800bfa6:	677b      	str	r3, [r7, #116]	; 0x74
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800bfac:	2301      	movs	r3, #1
 800bfae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800bfbe:	2360      	movs	r3, #96	; 0x60
 800bfc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 800bfd6:	2328      	movs	r3, #40	; 0x28
 800bfd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800bfdc:	2307      	movs	r3, #7
 800bfde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bfee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800bff2:	4618      	mov	r0, r3
 800bff4:	f005 fb06 	bl	8011604 <HAL_RCC_OscConfig>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800bffe:	f002 f9b8 	bl	800e372 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c002:	230f      	movs	r3, #15
 800c004:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c006:	2303      	movs	r3, #3
 800c008:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c00a:	2300      	movs	r3, #0
 800c00c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c00e:	2300      	movs	r3, #0
 800c010:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c012:	2300      	movs	r3, #0
 800c014:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800c016:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c01a:	2104      	movs	r1, #4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f005 ff11 	bl	8011e44 <HAL_RCC_ClockConfig>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800c028:	f002 f9a3 	bl	800e372 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <SystemClock_Config+0x140>)
 800c02e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c030:	2300      	movs	r3, #0
 800c032:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c034:	2300      	movs	r3, #0
 800c036:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800c038:	2300      	movs	r3, #0
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c03c:	2300      	movs	r3, #0
 800c03e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800c040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c044:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800c046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c04a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c04c:	2301      	movs	r3, #1
 800c04e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c050:	2301      	movs	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800c054:	2310      	movs	r3, #16
 800c056:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c058:	2307      	movs	r3, #7
 800c05a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c05c:	2302      	movs	r3, #2
 800c05e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c060:	2302      	movs	r3, #2
 800c062:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800c064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c068:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c06a:	1d3b      	adds	r3, r7, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f006 f91f 	bl	80122b0 <HAL_RCCEx_PeriphCLKConfig>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800c078:	f002 f97b 	bl	800e372 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800c07c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c080:	f005 fa6a 	bl	8011558 <HAL_PWREx_ControlVoltageScaling>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800c08a:	f002 f972 	bl	800e372 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800c08e:	f006 fb25 	bl	80126dc <HAL_RCCEx_EnableMSIPLLMode>
}
 800c092:	bf00      	nop
 800c094:	37b8      	adds	r7, #184	; 0xb8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	40021000 	.word	0x40021000
 800c0a0:	00024047 	.word	0x00024047

0800c0a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c0aa:	463b      	mov	r3, r7
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	609a      	str	r2, [r3, #8]
 800c0b4:	60da      	str	r2, [r3, #12]
 800c0b6:	611a      	str	r2, [r3, #16]
 800c0b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800c0ba:	4b2a      	ldr	r3, [pc, #168]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0bc:	4a2a      	ldr	r2, [pc, #168]	; (800c168 <MX_ADC1_Init+0xc4>)
 800c0be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c0c0:	4b28      	ldr	r3, [pc, #160]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800c0c6:	4b27      	ldr	r3, [pc, #156]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0c8:	2208      	movs	r2, #8
 800c0ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c0cc:	4b25      	ldr	r3, [pc, #148]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c0d2:	4b24      	ldr	r3, [pc, #144]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c0d8:	4b22      	ldr	r3, [pc, #136]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0da:	2204      	movs	r2, #4
 800c0dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800c0de:	4b21      	ldr	r3, [pc, #132]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c0e4:	4b1f      	ldr	r3, [pc, #124]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800c0ea:	4b1e      	ldr	r3, [pc, #120]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c0f0:	4b1c      	ldr	r3, [pc, #112]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c0fe:	4b19      	ldr	r3, [pc, #100]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c100:	2200      	movs	r2, #0
 800c102:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c104:	4b17      	ldr	r3, [pc, #92]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c106:	2200      	movs	r2, #0
 800c108:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c10a:	4b16      	ldr	r3, [pc, #88]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c112:	4b14      	ldr	r3, [pc, #80]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c114:	2200      	movs	r2, #0
 800c116:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800c118:	4b12      	ldr	r3, [pc, #72]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c120:	4810      	ldr	r0, [pc, #64]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c122:	f002 ff0f 	bl	800ef44 <HAL_ADC_Init>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800c12c:	f002 f921 	bl	800e372 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800c130:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <MX_ADC1_Init+0xc8>)
 800c132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c134:	2306      	movs	r3, #6
 800c136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800c138:	2306      	movs	r3, #6
 800c13a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c13c:	237f      	movs	r3, #127	; 0x7f
 800c13e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c140:	2304      	movs	r3, #4
 800c142:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c148:	463b      	mov	r3, r7
 800c14a:	4619      	mov	r1, r3
 800c14c:	4805      	ldr	r0, [pc, #20]	; (800c164 <MX_ADC1_Init+0xc0>)
 800c14e:	f003 f96b 	bl	800f428 <HAL_ADC_ConfigChannel>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800c158:	f002 f90b 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c15c:	bf00      	nop
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20006d1c 	.word	0x20006d1c
 800c168:	50040000 	.word	0x50040000
 800c16c:	14f00020 	.word	0x14f00020

0800c170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c174:	4b1b      	ldr	r3, [pc, #108]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c176:	4a1c      	ldr	r2, [pc, #112]	; (800c1e8 <MX_I2C1_Init+0x78>)
 800c178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800c17a:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c17c:	4a1b      	ldr	r2, [pc, #108]	; (800c1ec <MX_I2C1_Init+0x7c>)
 800c17e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c180:	4b18      	ldr	r3, [pc, #96]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c182:	2200      	movs	r2, #0
 800c184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c186:	4b17      	ldr	r3, [pc, #92]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c188:	2201      	movs	r2, #1
 800c18a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c18c:	4b15      	ldr	r3, [pc, #84]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c18e:	2200      	movs	r2, #0
 800c190:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c192:	4b14      	ldr	r3, [pc, #80]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c194:	2200      	movs	r2, #0
 800c196:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c19e:	4b11      	ldr	r3, [pc, #68]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c1aa:	480e      	ldr	r0, [pc, #56]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c1ac:	f004 f8e7 	bl	801037e <HAL_I2C_Init>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c1b6:	f002 f8dc 	bl	800e372 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	4809      	ldr	r0, [pc, #36]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c1be:	f005 f915 	bl	80113ec <HAL_I2CEx_ConfigAnalogFilter>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c1c8:	f002 f8d3 	bl	800e372 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4805      	ldr	r0, [pc, #20]	; (800c1e4 <MX_I2C1_Init+0x74>)
 800c1d0:	f005 f957 	bl	8011482 <HAL_I2CEx_ConfigDigitalFilter>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c1da:	f002 f8ca 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c1de:	bf00      	nop
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20004550 	.word	0x20004550
 800c1e8:	40005400 	.word	0x40005400
 800c1ec:	10909cec 	.word	0x10909cec

0800c1f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c1f6:	1d3b      	adds	r3, r7, #4
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	605a      	str	r2, [r3, #4]
 800c1fe:	609a      	str	r2, [r3, #8]
 800c200:	60da      	str	r2, [r3, #12]
 800c202:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c208:	4b28      	ldr	r3, [pc, #160]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c20a:	4a29      	ldr	r2, [pc, #164]	; (800c2b0 <MX_RTC_Init+0xc0>)
 800c20c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c20e:	4b27      	ldr	r3, [pc, #156]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c210:	2200      	movs	r2, #0
 800c212:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c214:	4b25      	ldr	r3, [pc, #148]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c216:	227f      	movs	r2, #127	; 0x7f
 800c218:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c21a:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c21c:	22ff      	movs	r2, #255	; 0xff
 800c21e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c220:	4b22      	ldr	r3, [pc, #136]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c222:	2200      	movs	r2, #0
 800c224:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c226:	4b21      	ldr	r3, [pc, #132]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c228:	2200      	movs	r2, #0
 800c22a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c22c:	4b1f      	ldr	r3, [pc, #124]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c22e:	2200      	movs	r2, #0
 800c230:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c232:	4b1e      	ldr	r3, [pc, #120]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c234:	2200      	movs	r2, #0
 800c236:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c238:	481c      	ldr	r0, [pc, #112]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c23a:	f006 fb4f 	bl	80128dc <HAL_RTC_Init>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800c244:	f002 f895 	bl	800e372 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 800c248:	2319      	movs	r3, #25
 800c24a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 800c24c:	2315      	movs	r3, #21
 800c24e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800c250:	2300      	movs	r3, #0
 800c252:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c258:	2300      	movs	r3, #0
 800c25a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c25c:	1d3b      	adds	r3, r7, #4
 800c25e:	2201      	movs	r2, #1
 800c260:	4619      	mov	r1, r3
 800c262:	4812      	ldr	r0, [pc, #72]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c264:	f006 fbb5 	bl	80129d2 <HAL_RTC_SetTime>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800c26e:	f002 f880 	bl	800e372 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800c272:	2305      	movs	r3, #5
 800c274:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800c276:	2310      	movs	r3, #16
 800c278:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x23;
 800c27a:	2323      	movs	r3, #35	; 0x23
 800c27c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800c27e:	2320      	movs	r3, #32
 800c280:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c282:	463b      	mov	r3, r7
 800c284:	2201      	movs	r2, #1
 800c286:	4619      	mov	r1, r3
 800c288:	4808      	ldr	r0, [pc, #32]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c28a:	f006 fc9b 	bl	8012bc4 <HAL_RTC_SetDate>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800c294:	f002 f86d 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); //backup register
 800c298:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800c29c:	2101      	movs	r1, #1
 800c29e:	4803      	ldr	r0, [pc, #12]	; (800c2ac <MX_RTC_Init+0xbc>)
 800c2a0:	f006 fe36 	bl	8012f10 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800c2a4:	bf00      	nop
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20008190 	.word	0x20008190
 800c2b0:	40002800 	.word	0x40002800

0800c2b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c2b8:	4b1b      	ldr	r3, [pc, #108]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2ba:	4a1c      	ldr	r2, [pc, #112]	; (800c32c <MX_SPI2_Init+0x78>)
 800c2bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c2be:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c2c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c2c6:	4b18      	ldr	r3, [pc, #96]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c2cc:	4b16      	ldr	r3, [pc, #88]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c2d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c2d4:	4b14      	ldr	r3, [pc, #80]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c2e0:	4b11      	ldr	r3, [pc, #68]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2ea:	2210      	movs	r2, #16
 800c2ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c2ee:	4b0e      	ldr	r3, [pc, #56]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c2fa:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <MX_SPI2_Init+0x74>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c300:	4b09      	ldr	r3, [pc, #36]	; (800c328 <MX_SPI2_Init+0x74>)
 800c302:	2207      	movs	r2, #7
 800c304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c306:	4b08      	ldr	r3, [pc, #32]	; (800c328 <MX_SPI2_Init+0x74>)
 800c308:	2200      	movs	r2, #0
 800c30a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c30c:	4b06      	ldr	r3, [pc, #24]	; (800c328 <MX_SPI2_Init+0x74>)
 800c30e:	2208      	movs	r2, #8
 800c310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c312:	4805      	ldr	r0, [pc, #20]	; (800c328 <MX_SPI2_Init+0x74>)
 800c314:	f006 fe15 	bl	8012f42 <HAL_SPI_Init>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c31e:	f002 f828 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c322:	bf00      	nop
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20004294 	.word	0x20004294
 800c32c:	40003800 	.word	0x40003800

0800c330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c334:	4b14      	ldr	r3, [pc, #80]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c336:	4a15      	ldr	r2, [pc, #84]	; (800c38c <MX_USART1_UART_Init+0x5c>)
 800c338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c33a:	4b13      	ldr	r3, [pc, #76]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c33c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c342:	4b11      	ldr	r3, [pc, #68]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c344:	2200      	movs	r2, #0
 800c346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c34e:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c350:	2200      	movs	r2, #0
 800c352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c354:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c356:	220c      	movs	r2, #12
 800c358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c35a:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c360:	4b09      	ldr	r3, [pc, #36]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c362:	2200      	movs	r2, #0
 800c364:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c366:	4b08      	ldr	r3, [pc, #32]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c368:	2200      	movs	r2, #0
 800c36a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c36c:	4b06      	ldr	r3, [pc, #24]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c36e:	2200      	movs	r2, #0
 800c370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c372:	4805      	ldr	r0, [pc, #20]	; (800c388 <MX_USART1_UART_Init+0x58>)
 800c374:	f007 fd3c 	bl	8013df0 <HAL_UART_Init>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800c37e:	f001 fff8 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c382:	bf00      	nop
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20002fe0 	.word	0x20002fe0
 800c38c:	40013800 	.word	0x40013800

0800c390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c394:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c396:	4a15      	ldr	r2, [pc, #84]	; (800c3ec <MX_USART2_UART_Init+0x5c>)
 800c398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c39a:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c39c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c3a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c3a2:	4b11      	ldr	r3, [pc, #68]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c3a8:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c3ae:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3b6:	220c      	movs	r2, #12
 800c3b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c3c0:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c3c6:	4b08      	ldr	r3, [pc, #32]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c3cc:	4b06      	ldr	r3, [pc, #24]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c3d2:	4805      	ldr	r0, [pc, #20]	; (800c3e8 <MX_USART2_UART_Init+0x58>)
 800c3d4:	f007 fd0c 	bl	8013df0 <HAL_UART_Init>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c3de:	f001 ffc8 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c3e2:	bf00      	nop
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	200038e4 	.word	0x200038e4
 800c3ec:	40004400 	.word	0x40004400

0800c3f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c3f4:	4b14      	ldr	r3, [pc, #80]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c3f6:	4a15      	ldr	r2, [pc, #84]	; (800c44c <MX_USART3_UART_Init+0x5c>)
 800c3f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800c3fa:	4b13      	ldr	r3, [pc, #76]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c3fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c402:	4b11      	ldr	r3, [pc, #68]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c404:	2200      	movs	r2, #0
 800c406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c408:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c40e:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c410:	2200      	movs	r2, #0
 800c412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c414:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c416:	220c      	movs	r2, #12
 800c418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c41a:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c420:	4b09      	ldr	r3, [pc, #36]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c422:	2200      	movs	r2, #0
 800c424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c426:	4b08      	ldr	r3, [pc, #32]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c428:	2200      	movs	r2, #0
 800c42a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c42e:	2200      	movs	r2, #0
 800c430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c432:	4805      	ldr	r0, [pc, #20]	; (800c448 <MX_USART3_UART_Init+0x58>)
 800c434:	f007 fcdc 	bl	8013df0 <HAL_UART_Init>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800c43e:	f001 ff98 	bl	800e372 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c442:	bf00      	nop
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20002770 	.word	0x20002770
 800c44c:	40004800 	.word	0x40004800

0800c450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c456:	f107 0314 	add.w	r3, r7, #20
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	605a      	str	r2, [r3, #4]
 800c460:	609a      	str	r2, [r3, #8]
 800c462:	60da      	str	r2, [r3, #12]
 800c464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c466:	4b46      	ldr	r3, [pc, #280]	; (800c580 <MX_GPIO_Init+0x130>)
 800c468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46a:	4a45      	ldr	r2, [pc, #276]	; (800c580 <MX_GPIO_Init+0x130>)
 800c46c:	f043 0304 	orr.w	r3, r3, #4
 800c470:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c472:	4b43      	ldr	r3, [pc, #268]	; (800c580 <MX_GPIO_Init+0x130>)
 800c474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c476:	f003 0304 	and.w	r3, r3, #4
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c47e:	4b40      	ldr	r3, [pc, #256]	; (800c580 <MX_GPIO_Init+0x130>)
 800c480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c482:	4a3f      	ldr	r2, [pc, #252]	; (800c580 <MX_GPIO_Init+0x130>)
 800c484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c48a:	4b3d      	ldr	r3, [pc, #244]	; (800c580 <MX_GPIO_Init+0x130>)
 800c48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c496:	4b3a      	ldr	r3, [pc, #232]	; (800c580 <MX_GPIO_Init+0x130>)
 800c498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c49a:	4a39      	ldr	r2, [pc, #228]	; (800c580 <MX_GPIO_Init+0x130>)
 800c49c:	f043 0301 	orr.w	r3, r3, #1
 800c4a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4a2:	4b37      	ldr	r3, [pc, #220]	; (800c580 <MX_GPIO_Init+0x130>)
 800c4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	60bb      	str	r3, [r7, #8]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c4ae:	4b34      	ldr	r3, [pc, #208]	; (800c580 <MX_GPIO_Init+0x130>)
 800c4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b2:	4a33      	ldr	r2, [pc, #204]	; (800c580 <MX_GPIO_Init+0x130>)
 800c4b4:	f043 0302 	orr.w	r3, r3, #2
 800c4b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4ba:	4b31      	ldr	r3, [pc, #196]	; (800c580 <MX_GPIO_Init+0x130>)
 800c4bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4be:	f003 0302 	and.w	r3, r3, #2
 800c4c2:	607b      	str	r3, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|RSTNB_Pin, GPIO_PIN_RESET);
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2103      	movs	r1, #3
 800c4ca:	482e      	ldr	r0, [pc, #184]	; (800c584 <MX_GPIO_Init+0x134>)
 800c4cc:	f003 ff1c 	bl	8010308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c4d6:	482b      	ldr	r0, [pc, #172]	; (800c584 <MX_GPIO_Init+0x134>)
 800c4d8:	f003 ff16 	bl	8010308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HARD_RST_GPIO_Port, HARD_RST_Pin, GPIO_PIN_SET);
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4e6:	f003 ff0f 	bl	8010308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c4f4:	f003 ff08 	bl	8010308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWR_VMON_Pin */
  GPIO_InitStruct.Pin = PWR_VMON_Pin;
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c500:	2300      	movs	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_VMON_GPIO_Port, &GPIO_InitStruct);
 800c504:	f107 0314 	add.w	r3, r7, #20
 800c508:	4619      	mov	r1, r3
 800c50a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c50e:	f003 fd69 	bl	800ffe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_Pin RSTNB_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|RSTNB_Pin|SPI2_CS_Pin;
 800c512:	f241 0303 	movw	r3, #4099	; 0x1003
 800c516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c518:	2301      	movs	r3, #1
 800c51a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c520:	2300      	movs	r3, #0
 800c522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	4619      	mov	r1, r3
 800c52a:	4816      	ldr	r0, [pc, #88]	; (800c584 <MX_GPIO_Init+0x134>)
 800c52c:	f003 fd5a 	bl	800ffe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HARD_RST_Pin PA15 */
  GPIO_InitStruct.Pin = HARD_RST_Pin|GPIO_PIN_15;
 800c530:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800c534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c536:	2301      	movs	r3, #1
 800c538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c53e:	2300      	movs	r3, #0
 800c540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c542:	f107 0314 	add.w	r3, r7, #20
 800c546:	4619      	mov	r1, r3
 800c548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c54c:	f003 fd4a 	bl	800ffe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_Pin;
 800c550:	2320      	movs	r3, #32
 800c552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c554:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <MX_GPIO_Init+0x138>)
 800c556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_GPIO_Port, &GPIO_InitStruct);
 800c55c:	f107 0314 	add.w	r3, r7, #20
 800c560:	4619      	mov	r1, r3
 800c562:	4808      	ldr	r0, [pc, #32]	; (800c584 <MX_GPIO_Init+0x134>)
 800c564:	f003 fd3e 	bl	800ffe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800c568:	2200      	movs	r2, #0
 800c56a:	2105      	movs	r1, #5
 800c56c:	2017      	movs	r0, #23
 800c56e:	f003 fccd 	bl	800ff0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c572:	2017      	movs	r0, #23
 800c574:	f003 fce6 	bl	800ff44 <HAL_NVIC_EnableIRQ>

}
 800c578:	bf00      	nop
 800c57a:	3728      	adds	r7, #40	; 0x28
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	40021000 	.word	0x40021000
 800c584:	48000400 	.word	0x48000400
 800c588:	10110000 	.word	0x10110000

0800c58c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c58c:	b5b0      	push	{r4, r5, r7, lr}
 800c58e:	b08e      	sub	sp, #56	; 0x38
 800c590:	af04      	add	r7, sp, #16
 800c592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart == &huart1)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a97      	ldr	r2, [pc, #604]	; (800c7f4 <HAL_UART_RxCpltCallback+0x268>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d140      	bne.n	800c61e <HAL_UART_RxCpltCallback+0x92>
		{
			uart1_temp[i]=uart1_buf[0]; //store byte in temp buffer
 800c59c:	4b96      	ldr	r3, [pc, #600]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a96      	ldr	r2, [pc, #600]	; (800c7fc <HAL_UART_RxCpltCallback+0x270>)
 800c5a2:	7811      	ldrb	r1, [r2, #0]
 800c5a4:	4a96      	ldr	r2, [pc, #600]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5a6:	54d1      	strb	r1, [r2, r3]
			if(uart1_temp[i] == 0x0A){
 800c5a8:	4b93      	ldr	r3, [pc, #588]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a94      	ldr	r2, [pc, #592]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5ae:	5cd3      	ldrb	r3, [r2, r3]
 800c5b0:	2b0a      	cmp	r3, #10
 800c5b2:	d116      	bne.n	800c5e2 <HAL_UART_RxCpltCallback+0x56>
				HAL_UART_Transmit(&huart2, (uint8_t *)uart1_temp, strlen(uart1_temp),0xff);
 800c5b4:	4892      	ldr	r0, [pc, #584]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5b6:	f7f3 fe15 	bl	80001e4 <strlen>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	23ff      	movs	r3, #255	; 0xff
 800c5c0:	498f      	ldr	r1, [pc, #572]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5c2:	4890      	ldr	r0, [pc, #576]	; (800c804 <HAL_UART_RxCpltCallback+0x278>)
 800c5c4:	f007 fc62 	bl	8013e8c <HAL_UART_Transmit>
				memset(uart1_temp,0,strlen(uart1_temp));
 800c5c8:	488d      	ldr	r0, [pc, #564]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5ca:	f7f3 fe0b 	bl	80001e4 <strlen>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	488a      	ldr	r0, [pc, #552]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5d6:	f00e fe66 	bl	801b2a6 <memset>
				i=0;
 800c5da:	4b87      	ldr	r3, [pc, #540]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	e018      	b.n	800c614 <HAL_UART_RxCpltCallback+0x88>
			}
			else if(i>1099){
 800c5e2:	4b85      	ldr	r3, [pc, #532]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f240 424b 	movw	r2, #1099	; 0x44b
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	dd0d      	ble.n	800c60a <HAL_UART_RxCpltCallback+0x7e>
				printf("%s\r\n",uart1_temp);
 800c5ee:	4984      	ldr	r1, [pc, #528]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5f0:	4885      	ldr	r0, [pc, #532]	; (800c808 <HAL_UART_RxCpltCallback+0x27c>)
 800c5f2:	f00f fb65 	bl	801bcc0 <iprintf>
				memset(uart1_temp,0,1100);
 800c5f6:	f240 424c 	movw	r2, #1100	; 0x44c
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	4880      	ldr	r0, [pc, #512]	; (800c800 <HAL_UART_RxCpltCallback+0x274>)
 800c5fe:	f00e fe52 	bl	801b2a6 <memset>
				i=0;
 800c602:	4b7d      	ldr	r3, [pc, #500]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c604:	2200      	movs	r2, #0
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	e004      	b.n	800c614 <HAL_UART_RxCpltCallback+0x88>
			}
			else
				i++;
 800c60a:	4b7b      	ldr	r3, [pc, #492]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3301      	adds	r3, #1
 800c610:	4a79      	ldr	r2, [pc, #484]	; (800c7f8 <HAL_UART_RxCpltCallback+0x26c>)
 800c612:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1,(uint8_t *)uart1_buf,1);
 800c614:	2201      	movs	r2, #1
 800c616:	4979      	ldr	r1, [pc, #484]	; (800c7fc <HAL_UART_RxCpltCallback+0x270>)
 800c618:	4876      	ldr	r0, [pc, #472]	; (800c7f4 <HAL_UART_RxCpltCallback+0x268>)
 800c61a:	f007 fccb 	bl	8013fb4 <HAL_UART_Receive_IT>
		}
	if(huart == &huart2)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a78      	ldr	r2, [pc, #480]	; (800c804 <HAL_UART_RxCpltCallback+0x278>)
 800c622:	4293      	cmp	r3, r2
 800c624:	f040 8372 	bne.w	800cd0c <HAL_UART_RxCpltCallback+0x780>
		{
			uart2_temp[j]=uart2_buf[0]; //store byte in temp2 buffer
 800c628:	4b78      	ldr	r3, [pc, #480]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a78      	ldr	r2, [pc, #480]	; (800c810 <HAL_UART_RxCpltCallback+0x284>)
 800c62e:	7811      	ldrb	r1, [r2, #0]
 800c630:	4a78      	ldr	r2, [pc, #480]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c632:	54d1      	strb	r1, [r2, r3]
			if(j>6){
 800c634:	4b75      	ldr	r3, [pc, #468]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b06      	cmp	r3, #6
 800c63a:	f340 8320 	ble.w	800cc7e <HAL_UART_RxCpltCallback+0x6f2>
//				if(uart2_temp[j-1] == '\r'  && uart2_temp[j] == '\n')
				if(uart2_temp[j] == '\n' && (uart2_temp[j-3] == 'O' && uart2_temp[j-2] == 'K') || (uart2_temp[j-3] == 'O' && uart2_temp[j-2] == 'R'))
 800c63e:	4b73      	ldr	r3, [pc, #460]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a74      	ldr	r2, [pc, #464]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c644:	5cd3      	ldrb	r3, [r2, r3]
 800c646:	2b0a      	cmp	r3, #10
 800c648:	d10d      	bne.n	800c666 <HAL_UART_RxCpltCallback+0xda>
 800c64a:	4b70      	ldr	r3, [pc, #448]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3b03      	subs	r3, #3
 800c650:	4a70      	ldr	r2, [pc, #448]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c652:	5cd3      	ldrb	r3, [r2, r3]
 800c654:	2b4f      	cmp	r3, #79	; 0x4f
 800c656:	d106      	bne.n	800c666 <HAL_UART_RxCpltCallback+0xda>
 800c658:	4b6c      	ldr	r3, [pc, #432]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3b02      	subs	r3, #2
 800c65e:	4a6d      	ldr	r2, [pc, #436]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c660:	5cd3      	ldrb	r3, [r2, r3]
 800c662:	2b4b      	cmp	r3, #75	; 0x4b
 800c664:	d00f      	beq.n	800c686 <HAL_UART_RxCpltCallback+0xfa>
 800c666:	4b69      	ldr	r3, [pc, #420]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3b03      	subs	r3, #3
 800c66c:	4a69      	ldr	r2, [pc, #420]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c66e:	5cd3      	ldrb	r3, [r2, r3]
 800c670:	2b4f      	cmp	r3, #79	; 0x4f
 800c672:	f040 80ed 	bne.w	800c850 <HAL_UART_RxCpltCallback+0x2c4>
 800c676:	4b65      	ldr	r3, [pc, #404]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3b02      	subs	r3, #2
 800c67c:	4a65      	ldr	r2, [pc, #404]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c67e:	5cd3      	ldrb	r3, [r2, r3]
 800c680:	2b52      	cmp	r3, #82	; 0x52
 800c682:	f040 80e5 	bne.w	800c850 <HAL_UART_RxCpltCallback+0x2c4>
				{
						HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
 800c686:	4863      	ldr	r0, [pc, #396]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c688:	f7f3 fdac 	bl	80001e4 <strlen>
 800c68c:	4603      	mov	r3, r0
 800c68e:	b29a      	uxth	r2, r3
 800c690:	23ff      	movs	r3, #255	; 0xff
 800c692:	4960      	ldr	r1, [pc, #384]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c694:	4857      	ldr	r0, [pc, #348]	; (800c7f4 <HAL_UART_RxCpltCallback+0x268>)
 800c696:	f007 fbf9 	bl	8013e8c <HAL_UART_Transmit>
						printf("\r\n");
 800c69a:	485f      	ldr	r0, [pc, #380]	; (800c818 <HAL_UART_RxCpltCallback+0x28c>)
 800c69c:	f00f fb84 	bl	801bda8 <puts>
						uart2done = true;
 800c6a0:	4b5e      	ldr	r3, [pc, #376]	; (800c81c <HAL_UART_RxCpltCallback+0x290>)
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	701a      	strb	r2, [r3, #0]
						uart2busy = false;
 800c6a6:	4b5e      	ldr	r3, [pc, #376]	; (800c820 <HAL_UART_RxCpltCallback+0x294>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	701a      	strb	r2, [r3, #0]
						int cmpint=strcmp(uart2_at,"AT+CPSI?");
 800c6ac:	495d      	ldr	r1, [pc, #372]	; (800c824 <HAL_UART_RxCpltCallback+0x298>)
 800c6ae:	485e      	ldr	r0, [pc, #376]	; (800c828 <HAL_UART_RxCpltCallback+0x29c>)
 800c6b0:	f7f3 fd8e 	bl	80001d0 <strcmp>
 800c6b4:	60f8      	str	r0, [r7, #12]
						if(cmpint==0){
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 8087 	bne.w	800c7cc <HAL_UART_RxCpltCallback+0x240>
							uart2_temp[j] = 0;
 800c6be:	4b53      	ldr	r3, [pc, #332]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a54      	ldr	r2, [pc, #336]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-1] = 0;
 800c6c8:	4b50      	ldr	r3, [pc, #320]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	4a51      	ldr	r2, [pc, #324]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-2] = 0;
 800c6d4:	4b4d      	ldr	r3, [pc, #308]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3b02      	subs	r3, #2
 800c6da:	4a4e      	ldr	r2, [pc, #312]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c6dc:	2100      	movs	r1, #0
 800c6de:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-3] = 0;
 800c6e0:	4b4a      	ldr	r3, [pc, #296]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3b03      	subs	r3, #3
 800c6e6:	4a4b      	ldr	r2, [pc, #300]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-4] = 0;
 800c6ec:	4b47      	ldr	r3, [pc, #284]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3b04      	subs	r3, #4
 800c6f2:	4a48      	ldr	r2, [pc, #288]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-5] = 0;
 800c6f8:	4b44      	ldr	r3, [pc, #272]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	3b05      	subs	r3, #5
 800c6fe:	4a45      	ldr	r2, [pc, #276]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c700:	2100      	movs	r1, #0
 800c702:	54d1      	strb	r1, [r2, r3]
							j=j-5;
 800c704:	4b41      	ldr	r3, [pc, #260]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3b05      	subs	r3, #5
 800c70a:	4a40      	ldr	r2, [pc, #256]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c70c:	6013      	str	r3, [r2, #0]
							char *token = strtok(uart2_temp, "?");
 800c70e:	4947      	ldr	r1, [pc, #284]	; (800c82c <HAL_UART_RxCpltCallback+0x2a0>)
 800c710:	4840      	ldr	r0, [pc, #256]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c712:	f00f fbb3 	bl	801be7c <strtok>
 800c716:	6278      	str	r0, [r7, #36]	; 0x24
							token = strtok(NULL, ":");
 800c718:	4945      	ldr	r1, [pc, #276]	; (800c830 <HAL_UART_RxCpltCallback+0x2a4>)
 800c71a:	2000      	movs	r0, #0
 800c71c:	f00f fbae 	bl	801be7c <strtok>
 800c720:	6278      	str	r0, [r7, #36]	; 0x24
							token = strtok(NULL, ",");
 800c722:	4944      	ldr	r1, [pc, #272]	; (800c834 <HAL_UART_RxCpltCallback+0x2a8>)
 800c724:	2000      	movs	r0, #0
 800c726:	f00f fba9 	bl	801be7c <strtok>
 800c72a:	6278      	str	r0, [r7, #36]	; 0x24
							strcpy(networkstr,token);
 800c72c:	4b42      	ldr	r3, [pc, #264]	; (800c838 <HAL_UART_RxCpltCallback+0x2ac>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c732:	4618      	mov	r0, r3
 800c734:	f00f fb7f 	bl	801be36 <strcpy>
							strcpy(temp_data2,token);
 800c738:	4b40      	ldr	r3, [pc, #256]	; (800c83c <HAL_UART_RxCpltCallback+0x2b0>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c73e:	4618      	mov	r0, r3
 800c740:	f00f fb79 	bl	801be36 <strcpy>
							printf("net: %s\n",networkstr);
 800c744:	4b3c      	ldr	r3, [pc, #240]	; (800c838 <HAL_UART_RxCpltCallback+0x2ac>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	483d      	ldr	r0, [pc, #244]	; (800c840 <HAL_UART_RxCpltCallback+0x2b4>)
 800c74c:	f00f fab8 	bl	801bcc0 <iprintf>

							if(j<82){
 800c750:	4b2e      	ldr	r3, [pc, #184]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b51      	cmp	r3, #81	; 0x51
 800c756:	dc1a      	bgt.n	800c78e <HAL_UART_RxCpltCallback+0x202>
								for(int y=0;y<6;y++){
 800c758:	2300      	movs	r3, #0
 800c75a:	623b      	str	r3, [r7, #32]
 800c75c:	e007      	b.n	800c76e <HAL_UART_RxCpltCallback+0x1e2>
									token = strtok(NULL, ",");
 800c75e:	4935      	ldr	r1, [pc, #212]	; (800c834 <HAL_UART_RxCpltCallback+0x2a8>)
 800c760:	2000      	movs	r0, #0
 800c762:	f00f fb8b 	bl	801be7c <strtok>
 800c766:	6278      	str	r0, [r7, #36]	; 0x24
								for(int y=0;y<6;y++){
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	3301      	adds	r3, #1
 800c76c:	623b      	str	r3, [r7, #32]
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	2b05      	cmp	r3, #5
 800c772:	ddf4      	ble.n	800c75e <HAL_UART_RxCpltCallback+0x1d2>
	//								printf(" %s ",token);
								}
								signal = atoi(token);
 800c774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c776:	f00e fd51 	bl	801b21c <atoi>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b31      	ldr	r3, [pc, #196]	; (800c844 <HAL_UART_RxCpltCallback+0x2b8>)
 800c77e:	601a      	str	r2, [r3, #0]
								printf("sig: %d\n",signal);
 800c780:	4b30      	ldr	r3, [pc, #192]	; (800c844 <HAL_UART_RxCpltCallback+0x2b8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4619      	mov	r1, r3
 800c786:	4830      	ldr	r0, [pc, #192]	; (800c848 <HAL_UART_RxCpltCallback+0x2bc>)
 800c788:	f00f fa9a 	bl	801bcc0 <iprintf>
 800c78c:	e019      	b.n	800c7c2 <HAL_UART_RxCpltCallback+0x236>
							}
							else {
								for(int y=0;y<11;y++){
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]
 800c792:	e007      	b.n	800c7a4 <HAL_UART_RxCpltCallback+0x218>
									token = strtok(NULL, ",");
 800c794:	4927      	ldr	r1, [pc, #156]	; (800c834 <HAL_UART_RxCpltCallback+0x2a8>)
 800c796:	2000      	movs	r0, #0
 800c798:	f00f fb70 	bl	801be7c <strtok>
 800c79c:	6278      	str	r0, [r7, #36]	; 0x24
								for(int y=0;y<11;y++){
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	61fb      	str	r3, [r7, #28]
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	2b0a      	cmp	r3, #10
 800c7a8:	ddf4      	ble.n	800c794 <HAL_UART_RxCpltCallback+0x208>
	//								printf(" %s ",token);
								}
								signal = atoi(token);
 800c7aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ac:	f00e fd36 	bl	801b21c <atoi>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4b24      	ldr	r3, [pc, #144]	; (800c844 <HAL_UART_RxCpltCallback+0x2b8>)
 800c7b4:	601a      	str	r2, [r3, #0]
								printf("sig: %d\n",signal);
 800c7b6:	4b23      	ldr	r3, [pc, #140]	; (800c844 <HAL_UART_RxCpltCallback+0x2b8>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4822      	ldr	r0, [pc, #136]	; (800c848 <HAL_UART_RxCpltCallback+0x2bc>)
 800c7be:	f00f fa7f 	bl	801bcc0 <iprintf>
							}
							memset(uart2_at,0,20);
 800c7c2:	2214      	movs	r2, #20
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4818      	ldr	r0, [pc, #96]	; (800c828 <HAL_UART_RxCpltCallback+0x29c>)
 800c7c8:	f00e fd6d 	bl	801b2a6 <memset>
						}
						memcpy(buffer2,uart2_temp,strlen(uart2_temp));
 800c7cc:	4811      	ldr	r0, [pc, #68]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c7ce:	f7f3 fd09 	bl	80001e4 <strlen>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	490f      	ldr	r1, [pc, #60]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c7d8:	481c      	ldr	r0, [pc, #112]	; (800c84c <HAL_UART_RxCpltCallback+0x2c0>)
 800c7da:	f00e fd59 	bl	801b290 <memcpy>
						memset(uart2_temp,0,1100);
 800c7de:	f240 424c 	movw	r2, #1100	; 0x44c
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	480b      	ldr	r0, [pc, #44]	; (800c814 <HAL_UART_RxCpltCallback+0x288>)
 800c7e6:	f00e fd5e 	bl	801b2a6 <memset>
						j=0;
 800c7ea:	4b08      	ldr	r3, [pc, #32]	; (800c80c <HAL_UART_RxCpltCallback+0x280>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
				{
 800c7f0:	e281      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
 800c7f2:	bf00      	nop
 800c7f4:	20002fe0 	.word	0x20002fe0
 800c7f8:	20007220 	.word	0x20007220
 800c7fc:	200095dc 	.word	0x200095dc
 800c800:	20008a08 	.word	0x20008a08
 800c804:	200038e4 	.word	0x200038e4
 800c808:	0801eb58 	.word	0x0801eb58
 800c80c:	20004288 	.word	0x20004288
 800c810:	20004284 	.word	0x20004284
 800c814:	20006470 	.word	0x20006470
 800c818:	0801f1c0 	.word	0x0801f1c0
 800c81c:	20003fe4 	.word	0x20003fe4
 800c820:	2000b004 	.word	0x2000b004
 800c824:	0801e910 	.word	0x0801e910
 800c828:	20003fd0 	.word	0x20003fd0
 800c82c:	0801f1c4 	.word	0x0801f1c4
 800c830:	0801e4f8 	.word	0x0801e4f8
 800c834:	0801e4f4 	.word	0x0801e4f4
 800c838:	20005314 	.word	0x20005314
 800c83c:	20008a00 	.word	0x20008a00
 800c840:	0801f1c8 	.word	0x0801f1c8
 800c844:	20007244 	.word	0x20007244
 800c848:	0801f1d4 	.word	0x0801f1d4
 800c84c:	20006d80 	.word	0x20006d80
				}
				else if(uart2_temp[j] == '>')
 800c850:	4b97      	ldr	r3, [pc, #604]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a97      	ldr	r2, [pc, #604]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c856:	5cd3      	ldrb	r3, [r2, r3]
 800c858:	2b3e      	cmp	r3, #62	; 0x3e
 800c85a:	d11d      	bne.n	800c898 <HAL_UART_RxCpltCallback+0x30c>
				{
					HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0x3ff);
 800c85c:	4895      	ldr	r0, [pc, #596]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c85e:	f7f3 fcc1 	bl	80001e4 <strlen>
 800c862:	4603      	mov	r3, r0
 800c864:	b29a      	uxth	r2, r3
 800c866:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c86a:	4992      	ldr	r1, [pc, #584]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c86c:	4892      	ldr	r0, [pc, #584]	; (800cab8 <HAL_UART_RxCpltCallback+0x52c>)
 800c86e:	f007 fb0d 	bl	8013e8c <HAL_UART_Transmit>
					printf("\r\n");
 800c872:	4892      	ldr	r0, [pc, #584]	; (800cabc <HAL_UART_RxCpltCallback+0x530>)
 800c874:	f00f fa98 	bl	801bda8 <puts>
					uart2done = true;
 800c878:	4b91      	ldr	r3, [pc, #580]	; (800cac0 <HAL_UART_RxCpltCallback+0x534>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	701a      	strb	r2, [r3, #0]
					uart2busy = false;
 800c87e:	4b91      	ldr	r3, [pc, #580]	; (800cac4 <HAL_UART_RxCpltCallback+0x538>)
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
					memset(uart2_temp,0,1100);
 800c884:	f240 424c 	movw	r2, #1100	; 0x44c
 800c888:	2100      	movs	r1, #0
 800c88a:	488a      	ldr	r0, [pc, #552]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c88c:	f00e fd0b 	bl	801b2a6 <memset>
//					memset(mydata,0,1100);
					j=0;
 800c890:	4b87      	ldr	r3, [pc, #540]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	e22e      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
				}
				else if(uart2_temp[j] == '}')
 800c898:	4b85      	ldr	r3, [pc, #532]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a85      	ldr	r2, [pc, #532]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c89e:	5cd3      	ldrb	r3, [r2, r3]
 800c8a0:	2b7d      	cmp	r3, #125	; 0x7d
 800c8a2:	f040 812f 	bne.w	800cb04 <HAL_UART_RxCpltCallback+0x578>
				{
					printf("%s\r\n",uart2_temp);
 800c8a6:	4983      	ldr	r1, [pc, #524]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c8a8:	4887      	ldr	r0, [pc, #540]	; (800cac8 <HAL_UART_RxCpltCallback+0x53c>)
 800c8aa:	f00f fa09 	bl	801bcc0 <iprintf>
					if(j>59){
 800c8ae:	4b80      	ldr	r3, [pc, #512]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b3b      	cmp	r3, #59	; 0x3b
 800c8b4:	f340 80eb 	ble.w	800ca8e <HAL_UART_RxCpltCallback+0x502>
						if(uart2_temp[j-60] == 'C' && uart2_temp[j-59] == 'o' && uart2_temp[j-58] == 'n' && uart2_temp[j-57] == 'f' && uart2_temp[j-56] == 'i' && uart2_temp[j-55] == 'g')
 800c8b8:	4b7d      	ldr	r3, [pc, #500]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3b3c      	subs	r3, #60	; 0x3c
 800c8be:	4a7d      	ldr	r2, [pc, #500]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c8c0:	5cd3      	ldrb	r3, [r2, r3]
 800c8c2:	2b43      	cmp	r3, #67	; 0x43
 800c8c4:	f040 80ce 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
 800c8c8:	4b79      	ldr	r3, [pc, #484]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	3b3b      	subs	r3, #59	; 0x3b
 800c8ce:	4a79      	ldr	r2, [pc, #484]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c8d0:	5cd3      	ldrb	r3, [r2, r3]
 800c8d2:	2b6f      	cmp	r3, #111	; 0x6f
 800c8d4:	f040 80c6 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
 800c8d8:	4b75      	ldr	r3, [pc, #468]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3b3a      	subs	r3, #58	; 0x3a
 800c8de:	4a75      	ldr	r2, [pc, #468]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c8e0:	5cd3      	ldrb	r3, [r2, r3]
 800c8e2:	2b6e      	cmp	r3, #110	; 0x6e
 800c8e4:	f040 80be 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
 800c8e8:	4b71      	ldr	r3, [pc, #452]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3b39      	subs	r3, #57	; 0x39
 800c8ee:	4a71      	ldr	r2, [pc, #452]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c8f0:	5cd3      	ldrb	r3, [r2, r3]
 800c8f2:	2b66      	cmp	r3, #102	; 0x66
 800c8f4:	f040 80b6 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
 800c8f8:	4b6d      	ldr	r3, [pc, #436]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b38      	subs	r3, #56	; 0x38
 800c8fe:	4a6d      	ldr	r2, [pc, #436]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c900:	5cd3      	ldrb	r3, [r2, r3]
 800c902:	2b69      	cmp	r3, #105	; 0x69
 800c904:	f040 80ae 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
 800c908:	4b69      	ldr	r3, [pc, #420]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3b37      	subs	r3, #55	; 0x37
 800c90e:	4a69      	ldr	r2, [pc, #420]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c910:	5cd3      	ldrb	r3, [r2, r3]
 800c912:	2b67      	cmp	r3, #103	; 0x67
 800c914:	f040 80a6 	bne.w	800ca64 <HAL_UART_RxCpltCallback+0x4d8>
						{
							printf("New Configuration Received\n");
 800c918:	486c      	ldr	r0, [pc, #432]	; (800cacc <HAL_UART_RxCpltCallback+0x540>)
 800c91a:	f00f fa45 	bl	801bda8 <puts>
							char *token = strtok(uart2_temp, ":");
 800c91e:	496c      	ldr	r1, [pc, #432]	; (800cad0 <HAL_UART_RxCpltCallback+0x544>)
 800c920:	4864      	ldr	r0, [pc, #400]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800c922:	f00f faab 	bl	801be7c <strtok>
 800c926:	61b8      	str	r0, [r7, #24]
							token = strtok(NULL, "=");
 800c928:	496a      	ldr	r1, [pc, #424]	; (800cad4 <HAL_UART_RxCpltCallback+0x548>)
 800c92a:	2000      	movs	r0, #0
 800c92c:	f00f faa6 	bl	801be7c <strtok>
 800c930:	61b8      	str	r0, [r7, #24]
							token = strtok(NULL, ";");
 800c932:	4969      	ldr	r1, [pc, #420]	; (800cad8 <HAL_UART_RxCpltCallback+0x54c>)
 800c934:	2000      	movs	r0, #0
 800c936:	f00f faa1 	bl	801be7c <strtok>
 800c93a:	61b8      	str	r0, [r7, #24]
							char *snMeterSub = token;
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	617b      	str	r3, [r7, #20]
							int strint = strcmp(snMeter,snMeterSub);
 800c940:	4b66      	ldr	r3, [pc, #408]	; (800cadc <HAL_UART_RxCpltCallback+0x550>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6979      	ldr	r1, [r7, #20]
 800c946:	4618      	mov	r0, r3
 800c948:	f7f3 fc42 	bl	80001d0 <strcmp>
 800c94c:	6138      	str	r0, [r7, #16]
							if(strint == 0){
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	f040 809b 	bne.w	800ca8c <HAL_UART_RxCpltCallback+0x500>
								token = strtok(NULL, "=");
 800c956:	495f      	ldr	r1, [pc, #380]	; (800cad4 <HAL_UART_RxCpltCallback+0x548>)
 800c958:	2000      	movs	r0, #0
 800c95a:	f00f fa8f 	bl	801be7c <strtok>
 800c95e:	61b8      	str	r0, [r7, #24]
								token = strtok(NULL, ":");
 800c960:	495b      	ldr	r1, [pc, #364]	; (800cad0 <HAL_UART_RxCpltCallback+0x544>)
 800c962:	2000      	movs	r0, #0
 800c964:	f00f fa8a 	bl	801be7c <strtok>
 800c968:	61b8      	str	r0, [r7, #24]
								instant_hour = atoi(token);
 800c96a:	69b8      	ldr	r0, [r7, #24]
 800c96c:	f00e fc56 	bl	801b21c <atoi>
 800c970:	4603      	mov	r3, r0
 800c972:	b2da      	uxtb	r2, r3
 800c974:	4b5a      	ldr	r3, [pc, #360]	; (800cae0 <HAL_UART_RxCpltCallback+0x554>)
 800c976:	701a      	strb	r2, [r3, #0]
								token = strtok(NULL, ";");
 800c978:	4957      	ldr	r1, [pc, #348]	; (800cad8 <HAL_UART_RxCpltCallback+0x54c>)
 800c97a:	2000      	movs	r0, #0
 800c97c:	f00f fa7e 	bl	801be7c <strtok>
 800c980:	61b8      	str	r0, [r7, #24]
								instant_minute = atoi(token);
 800c982:	69b8      	ldr	r0, [r7, #24]
 800c984:	f00e fc4a 	bl	801b21c <atoi>
 800c988:	4603      	mov	r3, r0
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	4b55      	ldr	r3, [pc, #340]	; (800cae4 <HAL_UART_RxCpltCallback+0x558>)
 800c98e:	701a      	strb	r2, [r3, #0]
								token = strtok(NULL, "=");
 800c990:	4950      	ldr	r1, [pc, #320]	; (800cad4 <HAL_UART_RxCpltCallback+0x548>)
 800c992:	2000      	movs	r0, #0
 800c994:	f00f fa72 	bl	801be7c <strtok>
 800c998:	61b8      	str	r0, [r7, #24]
	//							token = strtok(NULL, ":");
	//							lp_hour = atoi(token);
								token = strtok(NULL, ";");
 800c99a:	494f      	ldr	r1, [pc, #316]	; (800cad8 <HAL_UART_RxCpltCallback+0x54c>)
 800c99c:	2000      	movs	r0, #0
 800c99e:	f00f fa6d 	bl	801be7c <strtok>
 800c9a2:	61b8      	str	r0, [r7, #24]
								lp_rec = atol(token);
 800c9a4:	69b8      	ldr	r0, [r7, #24]
 800c9a6:	f00e fc3d 	bl	801b224 <atol>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	4b4e      	ldr	r3, [pc, #312]	; (800cae8 <HAL_UART_RxCpltCallback+0x55c>)
 800c9ae:	601a      	str	r2, [r3, #0]
								token = strtok(NULL, "=");
 800c9b0:	4948      	ldr	r1, [pc, #288]	; (800cad4 <HAL_UART_RxCpltCallback+0x548>)
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	f00f fa62 	bl	801be7c <strtok>
 800c9b8:	61b8      	str	r0, [r7, #24]
							//					printf("%s\n",token);
								token = strtok(NULL, "-");
 800c9ba:	494c      	ldr	r1, [pc, #304]	; (800caec <HAL_UART_RxCpltCallback+0x560>)
 800c9bc:	2000      	movs	r0, #0
 800c9be:	f00f fa5d 	bl	801be7c <strtok>
 800c9c2:	61b8      	str	r0, [r7, #24]
								eob_date = atoi(token);
 800c9c4:	69b8      	ldr	r0, [r7, #24]
 800c9c6:	f00e fc29 	bl	801b21c <atoi>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	4b48      	ldr	r3, [pc, #288]	; (800caf0 <HAL_UART_RxCpltCallback+0x564>)
 800c9d0:	701a      	strb	r2, [r3, #0]
								if(eob_date!=0){
 800c9d2:	4b47      	ldr	r3, [pc, #284]	; (800caf0 <HAL_UART_RxCpltCallback+0x564>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d018      	beq.n	800ca0c <HAL_UART_RxCpltCallback+0x480>
									token = strtok(NULL, ":");
 800c9da:	493d      	ldr	r1, [pc, #244]	; (800cad0 <HAL_UART_RxCpltCallback+0x544>)
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f00f fa4d 	bl	801be7c <strtok>
 800c9e2:	61b8      	str	r0, [r7, #24]
									eob_hour = atoi(token);
 800c9e4:	69b8      	ldr	r0, [r7, #24]
 800c9e6:	f00e fc19 	bl	801b21c <atoi>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	4b41      	ldr	r3, [pc, #260]	; (800caf4 <HAL_UART_RxCpltCallback+0x568>)
 800c9f0:	701a      	strb	r2, [r3, #0]
									token = strtok(NULL, "}");
 800c9f2:	4941      	ldr	r1, [pc, #260]	; (800caf8 <HAL_UART_RxCpltCallback+0x56c>)
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f00f fa41 	bl	801be7c <strtok>
 800c9fa:	61b8      	str	r0, [r7, #24]
									eob_minute = atoi(token);
 800c9fc:	69b8      	ldr	r0, [r7, #24]
 800c9fe:	f00e fc0d 	bl	801b21c <atoi>
 800ca02:	4603      	mov	r3, r0
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	4b3d      	ldr	r3, [pc, #244]	; (800cafc <HAL_UART_RxCpltCallback+0x570>)
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e002      	b.n	800ca12 <HAL_UART_RxCpltCallback+0x486>
								}
								else eob_date =0;
 800ca0c:	4b38      	ldr	r3, [pc, #224]	; (800caf0 <HAL_UART_RxCpltCallback+0x564>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
								printf("%d:%d %d %d-%d:%d\n",instant_hour, instant_minute, lp_rec, eob_date, eob_hour,eob_minute);
 800ca12:	4b33      	ldr	r3, [pc, #204]	; (800cae0 <HAL_UART_RxCpltCallback+0x554>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	461c      	mov	r4, r3
 800ca18:	4b32      	ldr	r3, [pc, #200]	; (800cae4 <HAL_UART_RxCpltCallback+0x558>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	461d      	mov	r5, r3
 800ca1e:	4b32      	ldr	r3, [pc, #200]	; (800cae8 <HAL_UART_RxCpltCallback+0x55c>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	4b33      	ldr	r3, [pc, #204]	; (800caf0 <HAL_UART_RxCpltCallback+0x564>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	4619      	mov	r1, r3
 800ca28:	4b32      	ldr	r3, [pc, #200]	; (800caf4 <HAL_UART_RxCpltCallback+0x568>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	4b33      	ldr	r3, [pc, #204]	; (800cafc <HAL_UART_RxCpltCallback+0x570>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	9001      	str	r0, [sp, #4]
 800ca36:	9100      	str	r1, [sp, #0]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4830      	ldr	r0, [pc, #192]	; (800cb00 <HAL_UART_RxCpltCallback+0x574>)
 800ca40:	f00f f93e 	bl	801bcc0 <iprintf>
								uart2done = true;
 800ca44:	4b1e      	ldr	r3, [pc, #120]	; (800cac0 <HAL_UART_RxCpltCallback+0x534>)
 800ca46:	2201      	movs	r2, #1
 800ca48:	701a      	strb	r2, [r3, #0]
								uart2busy = false;
 800ca4a:	4b1e      	ldr	r3, [pc, #120]	; (800cac4 <HAL_UART_RxCpltCallback+0x538>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
								memset(uart2_temp,0,1100);
 800ca50:	f240 424c 	movw	r2, #1100	; 0x44c
 800ca54:	2100      	movs	r1, #0
 800ca56:	4817      	ldr	r0, [pc, #92]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800ca58:	f00e fc25 	bl	801b2a6 <memset>
								j=0;
 800ca5c:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
						{
 800ca62:	e013      	b.n	800ca8c <HAL_UART_RxCpltCallback+0x500>
							}
						}
						else if(j>1099){
 800ca64:	4b12      	ldr	r3, [pc, #72]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f240 424b 	movw	r2, #1099	; 0x44b
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	dd0e      	ble.n	800ca8e <HAL_UART_RxCpltCallback+0x502>
							printf("%s\r\n",uart2_temp);
 800ca70:	4910      	ldr	r1, [pc, #64]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800ca72:	4815      	ldr	r0, [pc, #84]	; (800cac8 <HAL_UART_RxCpltCallback+0x53c>)
 800ca74:	f00f f924 	bl	801bcc0 <iprintf>
							memset(uart2_temp,0,1100);
 800ca78:	f240 424c 	movw	r2, #1100	; 0x44c
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	480d      	ldr	r0, [pc, #52]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800ca80:	f00e fc11 	bl	801b2a6 <memset>
							j=0;
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]
 800ca8a:	e000      	b.n	800ca8e <HAL_UART_RxCpltCallback+0x502>
						{
 800ca8c:	bf00      	nop
						}
//						else {
//							HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
//						}
					}
					uart2done = true;
 800ca8e:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <HAL_UART_RxCpltCallback+0x534>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	701a      	strb	r2, [r3, #0]
					uart2busy = false;
 800ca94:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <HAL_UART_RxCpltCallback+0x538>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
					memset(uart2_temp,0,1100);
 800ca9a:	f240 424c 	movw	r2, #1100	; 0x44c
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4804      	ldr	r0, [pc, #16]	; (800cab4 <HAL_UART_RxCpltCallback+0x528>)
 800caa2:	f00e fc00 	bl	801b2a6 <memset>
					j=0;
 800caa6:	4b02      	ldr	r3, [pc, #8]	; (800cab0 <HAL_UART_RxCpltCallback+0x524>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	e123      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
 800caae:	bf00      	nop
 800cab0:	20004288 	.word	0x20004288
 800cab4:	20006470 	.word	0x20006470
 800cab8:	20002fe0 	.word	0x20002fe0
 800cabc:	0801f1c0 	.word	0x0801f1c0
 800cac0:	20003fe4 	.word	0x20003fe4
 800cac4:	2000b004 	.word	0x2000b004
 800cac8:	0801eb58 	.word	0x0801eb58
 800cacc:	0801f1e0 	.word	0x0801f1e0
 800cad0:	0801e4f8 	.word	0x0801e4f8
 800cad4:	0801f1fc 	.word	0x0801f1fc
 800cad8:	0801f200 	.word	0x0801f200
 800cadc:	20000188 	.word	0x20000188
 800cae0:	20008184 	.word	0x20008184
 800cae4:	200081ba 	.word	0x200081ba
 800cae8:	20000644 	.word	0x20000644
 800caec:	0801f204 	.word	0x0801f204
 800caf0:	200089f8 	.word	0x200089f8
 800caf4:	200081bb 	.word	0x200081bb
 800caf8:	0801f208 	.word	0x0801f208
 800cafc:	2000818c 	.word	0x2000818c
 800cb00:	0801f20c 	.word	0x0801f20c

				}
				/* Receive Network Time Protocol and Sync RTC Time with NTP */
				else if(j>29){
 800cb04:	4b99      	ldr	r3, [pc, #612]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b1d      	cmp	r3, #29
 800cb0a:	f340 809e 	ble.w	800cc4a <HAL_UART_RxCpltCallback+0x6be>
					if(uart2_temp[j-29] == 'C' && uart2_temp[j-28] == 'N' && uart2_temp[j-27] == 'T' && uart2_temp[j-26] == 'P' && uart2_temp[j-25] == ':'  && uart2_temp[j-23] == '1')
 800cb0e:	4b97      	ldr	r3, [pc, #604]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3b1d      	subs	r3, #29
 800cb14:	4a96      	ldr	r2, [pc, #600]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb16:	5cd3      	ldrb	r3, [r2, r3]
 800cb18:	2b43      	cmp	r3, #67	; 0x43
 800cb1a:	d13d      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
 800cb1c:	4b93      	ldr	r3, [pc, #588]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3b1c      	subs	r3, #28
 800cb22:	4a93      	ldr	r2, [pc, #588]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb24:	5cd3      	ldrb	r3, [r2, r3]
 800cb26:	2b4e      	cmp	r3, #78	; 0x4e
 800cb28:	d136      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
 800cb2a:	4b90      	ldr	r3, [pc, #576]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3b1b      	subs	r3, #27
 800cb30:	4a8f      	ldr	r2, [pc, #572]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb32:	5cd3      	ldrb	r3, [r2, r3]
 800cb34:	2b54      	cmp	r3, #84	; 0x54
 800cb36:	d12f      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
 800cb38:	4b8c      	ldr	r3, [pc, #560]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3b1a      	subs	r3, #26
 800cb3e:	4a8c      	ldr	r2, [pc, #560]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb40:	5cd3      	ldrb	r3, [r2, r3]
 800cb42:	2b50      	cmp	r3, #80	; 0x50
 800cb44:	d128      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
 800cb46:	4b89      	ldr	r3, [pc, #548]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3b19      	subs	r3, #25
 800cb4c:	4a88      	ldr	r2, [pc, #544]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb4e:	5cd3      	ldrb	r3, [r2, r3]
 800cb50:	2b3a      	cmp	r3, #58	; 0x3a
 800cb52:	d121      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
 800cb54:	4b85      	ldr	r3, [pc, #532]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3b17      	subs	r3, #23
 800cb5a:	4a85      	ldr	r2, [pc, #532]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb5c:	5cd3      	ldrb	r3, [r2, r3]
 800cb5e:	2b31      	cmp	r3, #49	; 0x31
 800cb60:	d11a      	bne.n	800cb98 <HAL_UART_RxCpltCallback+0x60c>
						{
						cntpok=2;
 800cb62:	4b84      	ldr	r3, [pc, #528]	; (800cd74 <HAL_UART_RxCpltCallback+0x7e8>)
 800cb64:	2202      	movs	r2, #2
 800cb66:	601a      	str	r2, [r3, #0]
							printf("insert rtc date\n");
 800cb68:	4883      	ldr	r0, [pc, #524]	; (800cd78 <HAL_UART_RxCpltCallback+0x7ec>)
 800cb6a:	f00f f91d 	bl	801bda8 <puts>
							printf("%s\n", uart2_temp);
 800cb6e:	4880      	ldr	r0, [pc, #512]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb70:	f00f f91a 	bl	801bda8 <puts>
							set_rtc_time(uart2_temp);
 800cb74:	487e      	ldr	r0, [pc, #504]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb76:	f7fa fc2b 	bl	80073d0 <set_rtc_time>
							uart2done = true;
 800cb7a:	4b80      	ldr	r3, [pc, #512]	; (800cd7c <HAL_UART_RxCpltCallback+0x7f0>)
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	701a      	strb	r2, [r3, #0]
							uart2busy = false;
 800cb80:	4b7f      	ldr	r3, [pc, #508]	; (800cd80 <HAL_UART_RxCpltCallback+0x7f4>)
 800cb82:	2200      	movs	r2, #0
 800cb84:	701a      	strb	r2, [r3, #0]
							memset(uart2_temp,0,1100);
 800cb86:	f240 424c 	movw	r2, #1100	; 0x44c
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4878      	ldr	r0, [pc, #480]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cb8e:	f00e fb8a 	bl	801b2a6 <memset>
							j=0;
 800cb92:	4b76      	ldr	r3, [pc, #472]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]
						}
					if(uart2_temp[j-28] == 'C' && uart2_temp[j-27] == 'C' && uart2_temp[j-26] == 'L' && uart2_temp[j-25] == 'K' && uart2_temp[j-24] == ':')
 800cb98:	4b74      	ldr	r3, [pc, #464]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3b1c      	subs	r3, #28
 800cb9e:	4a74      	ldr	r2, [pc, #464]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cba0:	5cd3      	ldrb	r3, [r2, r3]
 800cba2:	2b43      	cmp	r3, #67	; 0x43
 800cba4:	d137      	bne.n	800cc16 <HAL_UART_RxCpltCallback+0x68a>
 800cba6:	4b71      	ldr	r3, [pc, #452]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	3b1b      	subs	r3, #27
 800cbac:	4a70      	ldr	r2, [pc, #448]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbae:	5cd3      	ldrb	r3, [r2, r3]
 800cbb0:	2b43      	cmp	r3, #67	; 0x43
 800cbb2:	d130      	bne.n	800cc16 <HAL_UART_RxCpltCallback+0x68a>
 800cbb4:	4b6d      	ldr	r3, [pc, #436]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3b1a      	subs	r3, #26
 800cbba:	4a6d      	ldr	r2, [pc, #436]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbbc:	5cd3      	ldrb	r3, [r2, r3]
 800cbbe:	2b4c      	cmp	r3, #76	; 0x4c
 800cbc0:	d129      	bne.n	800cc16 <HAL_UART_RxCpltCallback+0x68a>
 800cbc2:	4b6a      	ldr	r3, [pc, #424]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	3b19      	subs	r3, #25
 800cbc8:	4a69      	ldr	r2, [pc, #420]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbca:	5cd3      	ldrb	r3, [r2, r3]
 800cbcc:	2b4b      	cmp	r3, #75	; 0x4b
 800cbce:	d122      	bne.n	800cc16 <HAL_UART_RxCpltCallback+0x68a>
 800cbd0:	4b66      	ldr	r3, [pc, #408]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3b18      	subs	r3, #24
 800cbd6:	4a66      	ldr	r2, [pc, #408]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbd8:	5cd3      	ldrb	r3, [r2, r3]
 800cbda:	2b3a      	cmp	r3, #58	; 0x3a
 800cbdc:	d11b      	bne.n	800cc16 <HAL_UART_RxCpltCallback+0x68a>
						{
							cntpok=2;
 800cbde:	4b65      	ldr	r3, [pc, #404]	; (800cd74 <HAL_UART_RxCpltCallback+0x7e8>)
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	601a      	str	r2, [r3, #0]
							printf("insert rtc date CCLK\r\n");
 800cbe4:	4867      	ldr	r0, [pc, #412]	; (800cd84 <HAL_UART_RxCpltCallback+0x7f8>)
 800cbe6:	f00f f8df 	bl	801bda8 <puts>
							printf("%s\n", uart2_temp);
 800cbea:	4861      	ldr	r0, [pc, #388]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbec:	f00f f8dc 	bl	801bda8 <puts>
							set_rtc_time_cclk(uart2_temp);
 800cbf0:	485f      	ldr	r0, [pc, #380]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cbf2:	f7fa fccb 	bl	800758c <set_rtc_time_cclk>
							uart2done = true;
 800cbf6:	4b61      	ldr	r3, [pc, #388]	; (800cd7c <HAL_UART_RxCpltCallback+0x7f0>)
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	701a      	strb	r2, [r3, #0]
							uart2busy = false;
 800cbfc:	4b60      	ldr	r3, [pc, #384]	; (800cd80 <HAL_UART_RxCpltCallback+0x7f4>)
 800cbfe:	2200      	movs	r2, #0
 800cc00:	701a      	strb	r2, [r3, #0]
							memset(uart2_temp,0,1100);
 800cc02:	f240 424c 	movw	r2, #1100	; 0x44c
 800cc06:	2100      	movs	r1, #0
 800cc08:	4859      	ldr	r0, [pc, #356]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc0a:	f00e fb4c 	bl	801b2a6 <memset>
							j=0;
 800cc0e:	4b57      	ldr	r3, [pc, #348]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	e06f      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
						}
					else if(j>1099){
 800cc16:	4b55      	ldr	r3, [pc, #340]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f240 424b 	movw	r2, #1099	; 0x44b
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	dd0d      	ble.n	800cc3e <HAL_UART_RxCpltCallback+0x6b2>
						printf("%s\r\n",uart2_temp);
 800cc22:	4953      	ldr	r1, [pc, #332]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc24:	4858      	ldr	r0, [pc, #352]	; (800cd88 <HAL_UART_RxCpltCallback+0x7fc>)
 800cc26:	f00f f84b 	bl	801bcc0 <iprintf>
						memset(uart2_temp,0,1100);
 800cc2a:	f240 424c 	movw	r2, #1100	; 0x44c
 800cc2e:	2100      	movs	r1, #0
 800cc30:	484f      	ldr	r0, [pc, #316]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc32:	f00e fb38 	bl	801b2a6 <memset>
						j=0;
 800cc36:	4b4d      	ldr	r3, [pc, #308]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	e05b      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
					}
					else
						j++;
 800cc3e:	4b4b      	ldr	r3, [pc, #300]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3301      	adds	r3, #1
 800cc44:	4a49      	ldr	r2, [pc, #292]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	e055      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
				}
				else if(j>1099){
 800cc4a:	4b48      	ldr	r3, [pc, #288]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f240 424b 	movw	r2, #1099	; 0x44b
 800cc52:	4293      	cmp	r3, r2
 800cc54:	dd0d      	ble.n	800cc72 <HAL_UART_RxCpltCallback+0x6e6>
					printf("%s\r\n",uart2_temp);
 800cc56:	4946      	ldr	r1, [pc, #280]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc58:	484b      	ldr	r0, [pc, #300]	; (800cd88 <HAL_UART_RxCpltCallback+0x7fc>)
 800cc5a:	f00f f831 	bl	801bcc0 <iprintf>
					memset(uart2_temp,0,1100);
 800cc5e:	f240 424c 	movw	r2, #1100	; 0x44c
 800cc62:	2100      	movs	r1, #0
 800cc64:	4842      	ldr	r0, [pc, #264]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc66:	f00e fb1e 	bl	801b2a6 <memset>
					j=0;
 800cc6a:	4b40      	ldr	r3, [pc, #256]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	e041      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
				}
				else
					j++;
 800cc72:	4b3e      	ldr	r3, [pc, #248]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3301      	adds	r3, #1
 800cc78:	4a3c      	ldr	r2, [pc, #240]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	e03b      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
//				HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
			}
			else if(uart2_temp[j] == '>')
 800cc7e:	4b3b      	ldr	r3, [pc, #236]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a3b      	ldr	r2, [pc, #236]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc84:	5cd3      	ldrb	r3, [r2, r3]
 800cc86:	2b3e      	cmp	r3, #62	; 0x3e
 800cc88:	d11c      	bne.n	800ccc4 <HAL_UART_RxCpltCallback+0x738>
			{
				HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
 800cc8a:	4839      	ldr	r0, [pc, #228]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc8c:	f7f3 faaa 	bl	80001e4 <strlen>
 800cc90:	4603      	mov	r3, r0
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	23ff      	movs	r3, #255	; 0xff
 800cc96:	4936      	ldr	r1, [pc, #216]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cc98:	483c      	ldr	r0, [pc, #240]	; (800cd8c <HAL_UART_RxCpltCallback+0x800>)
 800cc9a:	f007 f8f7 	bl	8013e8c <HAL_UART_Transmit>
				printf("\r\n");
 800cc9e:	483c      	ldr	r0, [pc, #240]	; (800cd90 <HAL_UART_RxCpltCallback+0x804>)
 800cca0:	f00f f882 	bl	801bda8 <puts>
				uart2done = true;
 800cca4:	4b35      	ldr	r3, [pc, #212]	; (800cd7c <HAL_UART_RxCpltCallback+0x7f0>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	701a      	strb	r2, [r3, #0]
				uart2busy = false;
 800ccaa:	4b35      	ldr	r3, [pc, #212]	; (800cd80 <HAL_UART_RxCpltCallback+0x7f4>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	701a      	strb	r2, [r3, #0]
				memset(uart2_temp,0,1100);
 800ccb0:	f240 424c 	movw	r2, #1100	; 0x44c
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	482e      	ldr	r0, [pc, #184]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800ccb8:	f00e faf5 	bl	801b2a6 <memset>
				j=0;
 800ccbc:	4b2b      	ldr	r3, [pc, #172]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	e018      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
			}
			else if(j>1099){
 800ccc4:	4b29      	ldr	r3, [pc, #164]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f240 424b 	movw	r2, #1099	; 0x44b
 800cccc:	4293      	cmp	r3, r2
 800ccce:	dd0d      	ble.n	800ccec <HAL_UART_RxCpltCallback+0x760>
				printf("%s\r\n",uart2_temp);
 800ccd0:	4927      	ldr	r1, [pc, #156]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800ccd2:	482d      	ldr	r0, [pc, #180]	; (800cd88 <HAL_UART_RxCpltCallback+0x7fc>)
 800ccd4:	f00e fff4 	bl	801bcc0 <iprintf>
				memset(uart2_temp,0,1100);
 800ccd8:	f240 424c 	movw	r2, #1100	; 0x44c
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4824      	ldr	r0, [pc, #144]	; (800cd70 <HAL_UART_RxCpltCallback+0x7e4>)
 800cce0:	f00e fae1 	bl	801b2a6 <memset>
				j=0;
 800cce4:	4b21      	ldr	r3, [pc, #132]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	e004      	b.n	800ccf6 <HAL_UART_RxCpltCallback+0x76a>
			}
			else
				j++;
 800ccec:	4b1f      	ldr	r3, [pc, #124]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	4a1e      	ldr	r2, [pc, #120]	; (800cd6c <HAL_UART_RxCpltCallback+0x7e0>)
 800ccf4:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	4926      	ldr	r1, [pc, #152]	; (800cd94 <HAL_UART_RxCpltCallback+0x808>)
 800ccfa:	4827      	ldr	r0, [pc, #156]	; (800cd98 <HAL_UART_RxCpltCallback+0x80c>)
 800ccfc:	f007 f95a 	bl	8013fb4 <HAL_UART_Receive_IT>
			osSignalSet( sendDataToServeHandle, BIT_1 | BIT_2);
 800cd00:	4b26      	ldr	r3, [pc, #152]	; (800cd9c <HAL_UART_RxCpltCallback+0x810>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2106      	movs	r1, #6
 800cd06:	4618      	mov	r0, r3
 800cd08:	f00b fcaa 	bl	8018660 <osSignalSet>
		}
	if(huart == &huart3)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a24      	ldr	r2, [pc, #144]	; (800cda0 <HAL_UART_RxCpltCallback+0x814>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d17e      	bne.n	800ce12 <HAL_UART_RxCpltCallback+0x886>
	{
			uart3_temp[k]=uart3_buf[0]; //store byte in temp buffer
 800cd14:	4b23      	ldr	r3, [pc, #140]	; (800cda4 <HAL_UART_RxCpltCallback+0x818>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a23      	ldr	r2, [pc, #140]	; (800cda8 <HAL_UART_RxCpltCallback+0x81c>)
 800cd1a:	7811      	ldrb	r1, [r2, #0]
 800cd1c:	4a23      	ldr	r2, [pc, #140]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd1e:	54d1      	strb	r1, [r2, r3]
			if(uart3_temp[k] == 0x03){
 800cd20:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <HAL_UART_RxCpltCallback+0x818>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a21      	ldr	r2, [pc, #132]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd26:	5cd3      	ldrb	r3, [r2, r3]
 800cd28:	2b03      	cmp	r3, #3
 800cd2a:	d145      	bne.n	800cdb8 <HAL_UART_RxCpltCallback+0x82c>
//				printf("%d\r\n",datauart3size(uart3_temp));
				memcpy(buffer3, uart3_temp,datauart3size(uart3_temp));
 800cd2c:	481f      	ldr	r0, [pc, #124]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd2e:	f7fb faa7 	bl	8008280 <datauart3size>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	491d      	ldr	r1, [pc, #116]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd38:	481d      	ldr	r0, [pc, #116]	; (800cdb0 <HAL_UART_RxCpltCallback+0x824>)
 800cd3a:	f00e faa9 	bl	801b290 <memcpy>
				HAL_UART_Transmit(&huart1,(uint8_t *)uart3_temp,datauart3size(uart3_temp),0xff);
 800cd3e:	481b      	ldr	r0, [pc, #108]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd40:	f7fb fa9e 	bl	8008280 <datauart3size>
 800cd44:	4603      	mov	r3, r0
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	23ff      	movs	r3, #255	; 0xff
 800cd4a:	4918      	ldr	r1, [pc, #96]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd4c:	480f      	ldr	r0, [pc, #60]	; (800cd8c <HAL_UART_RxCpltCallback+0x800>)
 800cd4e:	f007 f89d 	bl	8013e8c <HAL_UART_Transmit>
				memset(uart3_temp,0,1100);
 800cd52:	f240 424c 	movw	r2, #1100	; 0x44c
 800cd56:	2100      	movs	r1, #0
 800cd58:	4814      	ldr	r0, [pc, #80]	; (800cdac <HAL_UART_RxCpltCallback+0x820>)
 800cd5a:	f00e faa4 	bl	801b2a6 <memset>
				uart3done = true;
 800cd5e:	4b15      	ldr	r3, [pc, #84]	; (800cdb4 <HAL_UART_RxCpltCallback+0x828>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
				k=0;
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <HAL_UART_RxCpltCallback+0x818>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	e047      	b.n	800cdfc <HAL_UART_RxCpltCallback+0x870>
 800cd6c:	20004288 	.word	0x20004288
 800cd70:	20006470 	.word	0x20006470
 800cd74:	20000600 	.word	0x20000600
 800cd78:	0801f220 	.word	0x0801f220
 800cd7c:	20003fe4 	.word	0x20003fe4
 800cd80:	2000b004 	.word	0x2000b004
 800cd84:	0801f230 	.word	0x0801f230
 800cd88:	0801eb58 	.word	0x0801eb58
 800cd8c:	20002fe0 	.word	0x20002fe0
 800cd90:	0801f1c0 	.word	0x0801f1c0
 800cd94:	20004284 	.word	0x20004284
 800cd98:	200038e4 	.word	0x200038e4
 800cd9c:	20008188 	.word	0x20008188
 800cda0:	20002770 	.word	0x20002770
 800cda4:	20005318 	.word	0x20005318
 800cda8:	200089fc 	.word	0x200089fc
 800cdac:	20005324 	.word	0x20005324
 800cdb0:	200095e0 	.word	0x200095e0
 800cdb4:	200042f8 	.word	0x200042f8
			}
			else if(k>1099){
 800cdb8:	4b18      	ldr	r3, [pc, #96]	; (800ce1c <HAL_UART_RxCpltCallback+0x890>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f240 424b 	movw	r2, #1099	; 0x44b
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	dd16      	ble.n	800cdf2 <HAL_UART_RxCpltCallback+0x866>
				printf("%s\r\n",uart3_temp);
 800cdc4:	4916      	ldr	r1, [pc, #88]	; (800ce20 <HAL_UART_RxCpltCallback+0x894>)
 800cdc6:	4817      	ldr	r0, [pc, #92]	; (800ce24 <HAL_UART_RxCpltCallback+0x898>)
 800cdc8:	f00e ff7a 	bl	801bcc0 <iprintf>
				memset(uart3_temp,0,1100);
 800cdcc:	f240 424c 	movw	r2, #1100	; 0x44c
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	4813      	ldr	r0, [pc, #76]	; (800ce20 <HAL_UART_RxCpltCallback+0x894>)
 800cdd4:	f00e fa67 	bl	801b2a6 <memset>
				memset(buffer3,0,1100);
 800cdd8:	f240 424c 	movw	r2, #1100	; 0x44c
 800cddc:	2100      	movs	r1, #0
 800cdde:	4812      	ldr	r0, [pc, #72]	; (800ce28 <HAL_UART_RxCpltCallback+0x89c>)
 800cde0:	f00e fa61 	bl	801b2a6 <memset>
				uart3done = true;
 800cde4:	4b11      	ldr	r3, [pc, #68]	; (800ce2c <HAL_UART_RxCpltCallback+0x8a0>)
 800cde6:	2201      	movs	r2, #1
 800cde8:	701a      	strb	r2, [r3, #0]
				k=0;
 800cdea:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <HAL_UART_RxCpltCallback+0x890>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	e004      	b.n	800cdfc <HAL_UART_RxCpltCallback+0x870>
			}
			else
				k++;
 800cdf2:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <HAL_UART_RxCpltCallback+0x890>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	4a08      	ldr	r2, [pc, #32]	; (800ce1c <HAL_UART_RxCpltCallback+0x890>)
 800cdfa:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart3,(uint8_t *)uart3_buf,1);
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	490c      	ldr	r1, [pc, #48]	; (800ce30 <HAL_UART_RxCpltCallback+0x8a4>)
 800ce00:	480c      	ldr	r0, [pc, #48]	; (800ce34 <HAL_UART_RxCpltCallback+0x8a8>)
 800ce02:	f007 f8d7 	bl	8013fb4 <HAL_UART_Receive_IT>
			osSignalSet( readEoBHandle, BIT_1 | BIT_2);
 800ce06:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <HAL_UART_RxCpltCallback+0x8ac>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2106      	movs	r1, #6
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f00b fc27 	bl	8018660 <osSignalSet>
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ce12:	bf00      	nop
 800ce14:	3728      	adds	r7, #40	; 0x28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bdb0      	pop	{r4, r5, r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20005318 	.word	0x20005318
 800ce20:	20005324 	.word	0x20005324
 800ce24:	0801eb58 	.word	0x0801eb58
 800ce28:	200095e0 	.word	0x200095e0
 800ce2c:	200042f8 	.word	0x200042f8
 800ce30:	200089fc 	.word	0x200089fc
 800ce34:	20002770 	.word	0x20002770
 800ce38:	2000afa0 	.word	0x2000afa0

0800ce3c <main_program>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_main_program */
void main_program(void const * argument)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 800ce42:	af02      	add	r7, sp, #8
 800ce44:	1d3b      	adds	r3, r7, #4
 800ce46:	6018      	str	r0, [r3, #0]
  FIL fil_t;
  FRESULT fresult_t;
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  /* Infinite loop */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800ce48:	f107 031c 	add.w	r3, r7, #28
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4860      	ldr	r0, [pc, #384]	; (800cfd4 <main_program+0x198>)
 800ce52:	f005 ff3e 	bl	8012cd2 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800ce56:	f107 0308 	add.w	r3, r7, #8
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	485d      	ldr	r0, [pc, #372]	; (800cfd4 <main_program+0x198>)
 800ce60:	f005 fe54 	bl	8012b0c <HAL_RTC_GetTime>
  st_hour = gTime.Hours;
 800ce64:	f107 0308 	add.w	r3, r7, #8
 800ce68:	781a      	ldrb	r2, [r3, #0]
 800ce6a:	4b5b      	ldr	r3, [pc, #364]	; (800cfd8 <main_program+0x19c>)
 800ce6c:	701a      	strb	r2, [r3, #0]
  st_min = gTime.Minutes;
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	785a      	ldrb	r2, [r3, #1]
 800ce74:	4b59      	ldr	r3, [pc, #356]	; (800cfdc <main_program+0x1a0>)
 800ce76:	701a      	strb	r2, [r3, #0]
  st_sec = gTime.Seconds;
 800ce78:	f107 0308 	add.w	r3, r7, #8
 800ce7c:	789a      	ldrb	r2, [r3, #2]
 800ce7e:	4b58      	ldr	r3, [pc, #352]	; (800cfe0 <main_program+0x1a4>)
 800ce80:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  status = osDelay(SECOND);
 800ce82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce86:	f00b fbd7 	bl	8018638 <osDelay>
 800ce8a:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	  if(status == osOK)
 800ce8e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f040 808c 	bne.w	800cfb0 <main_program+0x174>
	  {
		  GPIOA->BRR |= 1<<15;
 800ce98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800cea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cea6:	6293      	str	r3, [r2, #40]	; 0x28
//		  sprintf((char*)tx_buffer, "Main Program\n");
//		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
		  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800cea8:	4b4e      	ldr	r3, [pc, #312]	; (800cfe4 <main_program+0x1a8>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f04f 31ff 	mov.w	r1, #4294967295
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f00b fc79 	bl	80187a8 <osMutexWait>
 800ceb6:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
		  if(status_mutex == osOK)
 800ceba:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d176      	bne.n	800cfb0 <main_program+0x174>
		  {
					  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800cec2:	f107 031c 	add.w	r3, r7, #28
 800cec6:	2200      	movs	r2, #0
 800cec8:	4619      	mov	r1, r3
 800ceca:	4842      	ldr	r0, [pc, #264]	; (800cfd4 <main_program+0x198>)
 800cecc:	f005 ff01 	bl	8012cd2 <HAL_RTC_GetDate>
					  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800ced0:	f107 0308 	add.w	r3, r7, #8
 800ced4:	2200      	movs	r2, #0
 800ced6:	4619      	mov	r1, r3
 800ced8:	483e      	ldr	r0, [pc, #248]	; (800cfd4 <main_program+0x198>)
 800ceda:	f005 fe17 	bl	8012b0c <HAL_RTC_GetTime>
//					  if(gTime.Minutes > st_min + 3) hard_reset_rtos();
					  if(pwr_vmon==1) {
 800cede:	4b42      	ldr	r3, [pc, #264]	; (800cfe8 <main_program+0x1ac>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d113      	bne.n	800cf0e <main_program+0xd2>
						  if(pwr_state==0) {
 800cee6:	4b41      	ldr	r3, [pc, #260]	; (800cfec <main_program+0x1b0>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d126      	bne.n	800cf3c <main_program+0x100>
						    	if(!uart2busy){
 800ceee:	4b40      	ldr	r3, [pc, #256]	; (800cff0 <main_program+0x1b4>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	f083 0301 	eor.w	r3, r3, #1
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01f      	beq.n	800cf3c <main_program+0x100>
						    		uart2busy = true;
 800cefc:	4b3c      	ldr	r3, [pc, #240]	; (800cff0 <main_program+0x1b4>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	701a      	strb	r2, [r3, #0]
						    		sendMQTTpwr();
 800cf02:	f7fb fc7f 	bl	8008804 <sendMQTTpwr>
									pwr_state=1;
 800cf06:	4b39      	ldr	r3, [pc, #228]	; (800cfec <main_program+0x1b0>)
 800cf08:	2201      	movs	r2, #1
 800cf0a:	701a      	strb	r2, [r3, #0]
 800cf0c:	e016      	b.n	800cf3c <main_program+0x100>
						    	}
						  }
					  }
					  else if(pwr_vmon==0) {
 800cf0e:	4b36      	ldr	r3, [pc, #216]	; (800cfe8 <main_program+0x1ac>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d112      	bne.n	800cf3c <main_program+0x100>
						  if(pwr_state==1) {
 800cf16:	4b35      	ldr	r3, [pc, #212]	; (800cfec <main_program+0x1b0>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d10e      	bne.n	800cf3c <main_program+0x100>
						    	if(!uart2busy){
 800cf1e:	4b34      	ldr	r3, [pc, #208]	; (800cff0 <main_program+0x1b4>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d007      	beq.n	800cf3c <main_program+0x100>
						    		uart2busy = true;
 800cf2c:	4b30      	ldr	r3, [pc, #192]	; (800cff0 <main_program+0x1b4>)
 800cf2e:	2201      	movs	r2, #1
 800cf30:	701a      	strb	r2, [r3, #0]
						    		sendMQTTpwr();
 800cf32:	f7fb fc67 	bl	8008804 <sendMQTTpwr>
									pwr_state=0;
 800cf36:	4b2d      	ldr	r3, [pc, #180]	; (800cfec <main_program+0x1b0>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
						    	}
						  }
					  }
					  if (gDate.Date == 32) {
 800cf3c:	f107 031c 	add.w	r3, r7, #28
 800cf40:	789b      	ldrb	r3, [r3, #2]
 800cf42:	2b20      	cmp	r3, #32
 800cf44:	d105      	bne.n	800cf52 <main_program+0x116>
					  	printf("Setup NTP\r\n");
 800cf46:	482b      	ldr	r0, [pc, #172]	; (800cff4 <main_program+0x1b8>)
 800cf48:	f00e ff2e 	bl	801bda8 <puts>
					  //						  set_cntp();
					  	setup_RTC_periode();
 800cf4c:	f7fa fdc2 	bl	8007ad4 <setup_RTC_periode>
 800cf50:	e029      	b.n	800cfa6 <main_program+0x16a>
					  } else {
						cekNTP++;
 800cf52:	4b29      	ldr	r3, [pc, #164]	; (800cff8 <main_program+0x1bc>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3301      	adds	r3, #1
 800cf58:	4a27      	ldr	r2, [pc, #156]	; (800cff8 <main_program+0x1bc>)
 800cf5a:	6013      	str	r3, [r2, #0]
					  	if (cekNTP == 20) {
 800cf5c:	4b26      	ldr	r3, [pc, #152]	; (800cff8 <main_program+0x1bc>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b14      	cmp	r3, #20
 800cf62:	d107      	bne.n	800cf74 <main_program+0x138>
					  		printf("Setup RTC Periode\r\n");
 800cf64:	4825      	ldr	r0, [pc, #148]	; (800cffc <main_program+0x1c0>)
 800cf66:	f00e ff1f 	bl	801bda8 <puts>
					  		setup_RTC_periode();
 800cf6a:	f7fa fdb3 	bl	8007ad4 <setup_RTC_periode>
					  		cekNTP = 0;
 800cf6e:	4b22      	ldr	r3, [pc, #136]	; (800cff8 <main_program+0x1bc>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
					  	}
					  	printf("Tanggal: %d, %2d:%2d:%2d pwr_vmon: %d\r\n", gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, pwr_vmon);
 800cf74:	f107 031c 	add.w	r3, r7, #28
 800cf78:	789b      	ldrb	r3, [r3, #2]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	f107 0308 	add.w	r3, r7, #8
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f107 0308 	add.w	r3, r7, #8
 800cf88:	785b      	ldrb	r3, [r3, #1]
 800cf8a:	461c      	mov	r4, r3
 800cf8c:	f107 0308 	add.w	r3, r7, #8
 800cf90:	789b      	ldrb	r3, [r3, #2]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b14      	ldr	r3, [pc, #80]	; (800cfe8 <main_program+0x1ac>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	9200      	str	r2, [sp, #0]
 800cf9c:	4623      	mov	r3, r4
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	4817      	ldr	r0, [pc, #92]	; (800d000 <main_program+0x1c4>)
 800cfa2:	f00e fe8d 	bl	801bcc0 <iprintf>
					  }//						  sprintf((char*)tx_buffer, "Tanggal: %d, %2d:%2d:%2d pwr_vmon: %d\n", gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, pwr_vmon);
//						  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
			  osMutexRelease(myMutex01Handle);
 800cfa6:	4b0f      	ldr	r3, [pc, #60]	; (800cfe4 <main_program+0x1a8>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f00b fc4a 	bl	8018844 <osMutexRelease>
		  }
	  }
	  status = osDelay(SECOND);
 800cfb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfb4:	f00b fb40 	bl	8018638 <osDelay>
 800cfb8:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	  if(status == osOK)
 800cfbc:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f47f af5e 	bne.w	800ce82 <main_program+0x46>
	  {
		  GPIOA->BSRR |= 0<<15;
 800cfc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cfca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	6193      	str	r3, [r2, #24]
	  status = osDelay(SECOND);
 800cfd2:	e756      	b.n	800ce82 <main_program+0x46>
 800cfd4:	20008190 	.word	0x20008190
 800cfd8:	20004314 	.word	0x20004314
 800cfdc:	200081b8 	.word	0x200081b8
 800cfe0:	2000affc 	.word	0x2000affc
 800cfe4:	2000afa4 	.word	0x2000afa4
 800cfe8:	2000b510 	.word	0x2000b510
 800cfec:	20007243 	.word	0x20007243
 800cff0:	2000b004 	.word	0x2000b004
 800cff4:	0801f248 	.word	0x0801f248
 800cff8:	20000648 	.word	0x20000648
 800cffc:	0801f254 	.word	0x0801f254
 800d000:	0801f268 	.word	0x0801f268

0800d004 <read_gyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_gyro */
void read_gyro(void const * argument)
{
 800d004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d008:	b08a      	sub	sp, #40	; 0x28
 800d00a:	af04      	add	r7, sp, #16
 800d00c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_gyro */
  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	event = osSignalWait( BIT_1 | BIT_2, osWaitForever);
 800d00e:	f107 030c 	add.w	r3, r7, #12
 800d012:	f04f 32ff 	mov.w	r2, #4294967295
 800d016:	2106      	movs	r1, #6
 800d018:	4618      	mov	r0, r3
 800d01a:	f00b fb61 	bl	80186e0 <osSignalWait>
	if(event.value.signals == (BIT_1 | BIT_2))
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	2b06      	cmp	r3, #6
 800d022:	f040 80ec 	bne.w	800d1fe <read_gyro+0x1fa>
	{
		lsm6dsl_reg_t reg;
		lsm6dsl_status_reg_get(&dev_ctx, &reg.status_reg);
 800d026:	f107 0308 	add.w	r3, r7, #8
 800d02a:	4619      	mov	r1, r3
 800d02c:	4876      	ldr	r0, [pc, #472]	; (800d208 <read_gyro+0x204>)
 800d02e:	f7f9 fc47 	bl	80068c0 <lsm6dsl_status_reg_get>

		if (reg.status_reg.xlda)
 800d032:	7a3b      	ldrb	r3, [r7, #8]
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d051      	beq.n	800d0e2 <read_gyro+0xde>
		{
		  /* Read magnetic field data */
		  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 800d03e:	2206      	movs	r2, #6
 800d040:	2100      	movs	r1, #0
 800d042:	4872      	ldr	r0, [pc, #456]	; (800d20c <read_gyro+0x208>)
 800d044:	f00e f92f 	bl	801b2a6 <memset>
		  lsm6dsl_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 800d048:	4970      	ldr	r1, [pc, #448]	; (800d20c <read_gyro+0x208>)
 800d04a:	486f      	ldr	r0, [pc, #444]	; (800d208 <read_gyro+0x204>)
 800d04c:	f7f9 fc91 	bl	8006972 <lsm6dsl_acceleration_raw_get>
		  acceleration_mg[0] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[0]);
 800d050:	4b6e      	ldr	r3, [pc, #440]	; (800d20c <read_gyro+0x208>)
 800d052:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d056:	4618      	mov	r0, r3
 800d058:	f7f9 fb28 	bl	80066ac <lsm6dsl_from_fs2g_to_mg>
 800d05c:	eef0 7a40 	vmov.f32	s15, s0
 800d060:	4b6b      	ldr	r3, [pc, #428]	; (800d210 <read_gyro+0x20c>)
 800d062:	edc3 7a00 	vstr	s15, [r3]
		  acceleration_mg[1] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[1]);
 800d066:	4b69      	ldr	r3, [pc, #420]	; (800d20c <read_gyro+0x208>)
 800d068:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f9 fb1d 	bl	80066ac <lsm6dsl_from_fs2g_to_mg>
 800d072:	eef0 7a40 	vmov.f32	s15, s0
 800d076:	4b66      	ldr	r3, [pc, #408]	; (800d210 <read_gyro+0x20c>)
 800d078:	edc3 7a01 	vstr	s15, [r3, #4]
		  acceleration_mg[2] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[2]);
 800d07c:	4b63      	ldr	r3, [pc, #396]	; (800d20c <read_gyro+0x208>)
 800d07e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d082:	4618      	mov	r0, r3
 800d084:	f7f9 fb12 	bl	80066ac <lsm6dsl_from_fs2g_to_mg>
 800d088:	eef0 7a40 	vmov.f32	s15, s0
 800d08c:	4b60      	ldr	r3, [pc, #384]	; (800d210 <read_gyro+0x20c>)
 800d08e:	edc3 7a02 	vstr	s15, [r3, #8]

		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d092:	4b5f      	ldr	r3, [pc, #380]	; (800d210 <read_gyro+0x20c>)
 800d094:	681b      	ldr	r3, [r3, #0]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d096:	4618      	mov	r0, r3
 800d098:	f7f3 fa66 	bl	8000568 <__aeabi_f2d>
 800d09c:	4680      	mov	r8, r0
 800d09e:	4689      	mov	r9, r1
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d0a0:	4b5b      	ldr	r3, [pc, #364]	; (800d210 <read_gyro+0x20c>)
 800d0a2:	685b      	ldr	r3, [r3, #4]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7f3 fa5f 	bl	8000568 <__aeabi_f2d>
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	460d      	mov	r5, r1
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d0ae:	4b58      	ldr	r3, [pc, #352]	; (800d210 <read_gyro+0x20c>)
 800d0b0:	689b      	ldr	r3, [r3, #8]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f3 fa58 	bl	8000568 <__aeabi_f2d>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0c0:	e9cd 4500 	strd	r4, r5, [sp]
 800d0c4:	4642      	mov	r2, r8
 800d0c6:	464b      	mov	r3, r9
 800d0c8:	4952      	ldr	r1, [pc, #328]	; (800d214 <read_gyro+0x210>)
 800d0ca:	4853      	ldr	r0, [pc, #332]	; (800d218 <read_gyro+0x214>)
 800d0cc:	f00e fe84 	bl	801bdd8 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d0d0:	4851      	ldr	r0, [pc, #324]	; (800d218 <read_gyro+0x214>)
 800d0d2:	f7f3 f887 	bl	80001e4 <strlen>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	4619      	mov	r1, r3
 800d0dc:	484e      	ldr	r0, [pc, #312]	; (800d218 <read_gyro+0x214>)
 800d0de:	f7fb f92f 	bl	8008340 <tx_com>
		}
		if (reg.status_reg.gda)
 800d0e2:	7a3b      	ldrb	r3, [r7, #8]
 800d0e4:	f003 0302 	and.w	r3, r3, #2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d051      	beq.n	800d192 <read_gyro+0x18e>
		{
		  /* Read magnetic field data */
		  memset(data_raw_angular_rate.u8bit, 0x00, 3*sizeof(int16_t));
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	484a      	ldr	r0, [pc, #296]	; (800d21c <read_gyro+0x218>)
 800d0f4:	f00e f8d7 	bl	801b2a6 <memset>
		  lsm6dsl_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate.u8bit);
 800d0f8:	4948      	ldr	r1, [pc, #288]	; (800d21c <read_gyro+0x218>)
 800d0fa:	4843      	ldr	r0, [pc, #268]	; (800d208 <read_gyro+0x204>)
 800d0fc:	f7f9 fc28 	bl	8006950 <lsm6dsl_angular_rate_raw_get>
		  angular_rate_mdps[0] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 800d100:	4b46      	ldr	r3, [pc, #280]	; (800d21c <read_gyro+0x218>)
 800d102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d106:	4618      	mov	r0, r3
 800d108:	f7f9 fae8 	bl	80066dc <lsm6dsl_from_fs2000dps_to_mdps>
 800d10c:	eef0 7a40 	vmov.f32	s15, s0
 800d110:	4b43      	ldr	r3, [pc, #268]	; (800d220 <read_gyro+0x21c>)
 800d112:	edc3 7a00 	vstr	s15, [r3]
		  angular_rate_mdps[1] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 800d116:	4b41      	ldr	r3, [pc, #260]	; (800d21c <read_gyro+0x218>)
 800d118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7f9 fadd 	bl	80066dc <lsm6dsl_from_fs2000dps_to_mdps>
 800d122:	eef0 7a40 	vmov.f32	s15, s0
 800d126:	4b3e      	ldr	r3, [pc, #248]	; (800d220 <read_gyro+0x21c>)
 800d128:	edc3 7a01 	vstr	s15, [r3, #4]
		  angular_rate_mdps[2] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 800d12c:	4b3b      	ldr	r3, [pc, #236]	; (800d21c <read_gyro+0x218>)
 800d12e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d132:	4618      	mov	r0, r3
 800d134:	f7f9 fad2 	bl	80066dc <lsm6dsl_from_fs2000dps_to_mdps>
 800d138:	eef0 7a40 	vmov.f32	s15, s0
 800d13c:	4b38      	ldr	r3, [pc, #224]	; (800d220 <read_gyro+0x21c>)
 800d13e:	edc3 7a02 	vstr	s15, [r3, #8]

		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d142:	4b37      	ldr	r3, [pc, #220]	; (800d220 <read_gyro+0x21c>)
 800d144:	681b      	ldr	r3, [r3, #0]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d146:	4618      	mov	r0, r3
 800d148:	f7f3 fa0e 	bl	8000568 <__aeabi_f2d>
 800d14c:	4680      	mov	r8, r0
 800d14e:	4689      	mov	r9, r1
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d150:	4b33      	ldr	r3, [pc, #204]	; (800d220 <read_gyro+0x21c>)
 800d152:	685b      	ldr	r3, [r3, #4]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d154:	4618      	mov	r0, r3
 800d156:	f7f3 fa07 	bl	8000568 <__aeabi_f2d>
 800d15a:	4604      	mov	r4, r0
 800d15c:	460d      	mov	r5, r1
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d15e:	4b30      	ldr	r3, [pc, #192]	; (800d220 <read_gyro+0x21c>)
 800d160:	689b      	ldr	r3, [r3, #8]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d162:	4618      	mov	r0, r3
 800d164:	f7f3 fa00 	bl	8000568 <__aeabi_f2d>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d170:	e9cd 4500 	strd	r4, r5, [sp]
 800d174:	4642      	mov	r2, r8
 800d176:	464b      	mov	r3, r9
 800d178:	492a      	ldr	r1, [pc, #168]	; (800d224 <read_gyro+0x220>)
 800d17a:	4827      	ldr	r0, [pc, #156]	; (800d218 <read_gyro+0x214>)
 800d17c:	f00e fe2c 	bl	801bdd8 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d180:	4825      	ldr	r0, [pc, #148]	; (800d218 <read_gyro+0x214>)
 800d182:	f7f3 f82f 	bl	80001e4 <strlen>
 800d186:	4603      	mov	r3, r0
 800d188:	b29b      	uxth	r3, r3
 800d18a:	4619      	mov	r1, r3
 800d18c:	4822      	ldr	r0, [pc, #136]	; (800d218 <read_gyro+0x214>)
 800d18e:	f7fb f8d7 	bl	8008340 <tx_com>
		}
		if (reg.status_reg.tda)
 800d192:	7a3b      	ldrb	r3, [r7, #8]
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d029      	beq.n	800d1f2 <read_gyro+0x1ee>
		{
		  /* Read temperature data */
		  memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800d19e:	2202      	movs	r2, #2
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	4821      	ldr	r0, [pc, #132]	; (800d228 <read_gyro+0x224>)
 800d1a4:	f00e f87f 	bl	801b2a6 <memset>
		  lsm6dsl_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
 800d1a8:	491f      	ldr	r1, [pc, #124]	; (800d228 <read_gyro+0x224>)
 800d1aa:	4817      	ldr	r0, [pc, #92]	; (800d208 <read_gyro+0x204>)
 800d1ac:	f7f9 fbbf 	bl	800692e <lsm6dsl_temperature_raw_get>
		  temperature_degC = lsm6dsl_from_lsb_to_celsius( data_raw_temperature.i16bit );
 800d1b0:	4b1d      	ldr	r3, [pc, #116]	; (800d228 <read_gyro+0x224>)
 800d1b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f9 faa8 	bl	800670c <lsm6dsl_from_lsb_to_celsius>
 800d1bc:	eef0 7a40 	vmov.f32	s15, s0
 800d1c0:	4b1a      	ldr	r3, [pc, #104]	; (800d22c <read_gyro+0x228>)
 800d1c2:	edc3 7a00 	vstr	s15, [r3]

		  sprintf((char*)tx_buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC );
 800d1c6:	4b19      	ldr	r3, [pc, #100]	; (800d22c <read_gyro+0x228>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f3 f9cc 	bl	8000568 <__aeabi_f2d>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4623      	mov	r3, r4
 800d1d8:	4915      	ldr	r1, [pc, #84]	; (800d230 <read_gyro+0x22c>)
 800d1da:	480f      	ldr	r0, [pc, #60]	; (800d218 <read_gyro+0x214>)
 800d1dc:	f00e fdfc 	bl	801bdd8 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d1e0:	480d      	ldr	r0, [pc, #52]	; (800d218 <read_gyro+0x214>)
 800d1e2:	f7f2 ffff 	bl	80001e4 <strlen>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	480a      	ldr	r0, [pc, #40]	; (800d218 <read_gyro+0x214>)
 800d1ee:	f7fb f8a7 	bl	8008340 <tx_com>
		}
		osSignalSet( readGyroHandle, BIT_1);
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <read_gyro+0x230>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2102      	movs	r1, #2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f00b fa31 	bl	8018660 <osSignalSet>
	}
	osDelay(10);
 800d1fe:	200a      	movs	r0, #10
 800d200:	f00b fa1a 	bl	8018638 <osDelay>
	event = osSignalWait( BIT_1 | BIT_2, osWaitForever);
 800d204:	e703      	b.n	800d00e <read_gyro+0xa>
 800d206:	bf00      	nop
 800d208:	200042fc 	.word	0x200042fc
 800d20c:	20000604 	.word	0x20000604
 800d210:	20000618 	.word	0x20000618
 800d214:	0801f290 	.word	0x0801f290
 800d218:	200068bc 	.word	0x200068bc
 800d21c:	2000060c 	.word	0x2000060c
 800d220:	20000624 	.word	0x20000624
 800d224:	0801f2b8 	.word	0x0801f2b8
 800d228:	20000614 	.word	0x20000614
 800d22c:	20000630 	.word	0x20000630
 800d230:	0801f2e0 	.word	0x0801f2e0
 800d234:	20009128 	.word	0x20009128

0800d238 <send_data_to_server>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_data_to_server */
void send_data_to_server(void const * argument)
{
 800d238:	b5b0      	push	{r4, r5, r7, lr}
 800d23a:	b096      	sub	sp, #88	; 0x58
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_data_to_server */
  osStatus status_delay, status_mutex;
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  uint8_t secnow,minnow;
  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d240:	4bb6      	ldr	r3, [pc, #728]	; (800d51c <send_data_to_server+0x2e4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f04f 31ff 	mov.w	r1, #4294967295
 800d248:	4618      	mov	r0, r3
 800d24a:	f00b faad 	bl	80187a8 <osMutexWait>
 800d24e:	6338      	str	r0, [r7, #48]	; 0x30
  if(status_mutex == osOK)
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	2b00      	cmp	r3, #0
 800d254:	d150      	bne.n	800d2f8 <send_data_to_server+0xc0>
  {
	  read_sn_edmi();
 800d256:	f7fe fa09 	bl	800b66c <read_sn_edmi>
	  printf("%s\r\n",snMeter);
 800d25a:	4bb1      	ldr	r3, [pc, #708]	; (800d520 <send_data_to_server+0x2e8>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4619      	mov	r1, r3
 800d260:	48b0      	ldr	r0, [pc, #704]	; (800d524 <send_data_to_server+0x2ec>)
 800d262:	f00e fd2d 	bl	801bcc0 <iprintf>
	  setup_modem_1st();
 800d266:	f7fa fb23 	bl	80078b0 <setup_modem_1st>
	  cntpok =1;
 800d26a:	4baf      	ldr	r3, [pc, #700]	; (800d528 <send_data_to_server+0x2f0>)
 800d26c:	2201      	movs	r2, #1
 800d26e:	601a      	str	r2, [r3, #0]
	  sprintf((char*)tx_buffer, "MQTT Demo\n");
 800d270:	4aae      	ldr	r2, [pc, #696]	; (800d52c <send_data_to_server+0x2f4>)
 800d272:	4baf      	ldr	r3, [pc, #700]	; (800d530 <send_data_to_server+0x2f8>)
 800d274:	cb03      	ldmia	r3!, {r0, r1}
 800d276:	6010      	str	r0, [r2, #0]
 800d278:	6051      	str	r1, [r2, #4]
 800d27a:	8819      	ldrh	r1, [r3, #0]
 800d27c:	789b      	ldrb	r3, [r3, #2]
 800d27e:	8111      	strh	r1, [r2, #8]
 800d280:	7293      	strb	r3, [r2, #10]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d282:	48aa      	ldr	r0, [pc, #680]	; (800d52c <send_data_to_server+0x2f4>)
 800d284:	f7f2 ffae 	bl	80001e4 <strlen>
 800d288:	4603      	mov	r3, r0
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	4619      	mov	r1, r3
 800d28e:	48a7      	ldr	r0, [pc, #668]	; (800d52c <send_data_to_server+0x2f4>)
 800d290:	f7fb f856 	bl	8008340 <tx_com>
	  mqtt_demo();
 800d294:	f7fa fe64 	bl	8007f60 <mqtt_demo>
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d298:	f107 0320 	add.w	r3, r7, #32
 800d29c:	2200      	movs	r2, #0
 800d29e:	4619      	mov	r1, r3
 800d2a0:	48a4      	ldr	r0, [pc, #656]	; (800d534 <send_data_to_server+0x2fc>)
 800d2a2:	f005 fd16 	bl	8012cd2 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	48a1      	ldr	r0, [pc, #644]	; (800d534 <send_data_to_server+0x2fc>)
 800d2b0:	f005 fc2c 	bl	8012b0c <HAL_RTC_GetTime>
	  st_hour = gTime.Hours;
 800d2b4:	7b3a      	ldrb	r2, [r7, #12]
 800d2b6:	4ba0      	ldr	r3, [pc, #640]	; (800d538 <send_data_to_server+0x300>)
 800d2b8:	701a      	strb	r2, [r3, #0]
	  st_min = gTime.Minutes;
 800d2ba:	7b7a      	ldrb	r2, [r7, #13]
 800d2bc:	4b9f      	ldr	r3, [pc, #636]	; (800d53c <send_data_to_server+0x304>)
 800d2be:	701a      	strb	r2, [r3, #0]
	  st_sec = gTime.Seconds;
 800d2c0:	7bba      	ldrb	r2, [r7, #14]
 800d2c2:	4b9f      	ldr	r3, [pc, #636]	; (800d540 <send_data_to_server+0x308>)
 800d2c4:	701a      	strb	r2, [r3, #0]
	  sprintf((char*)tx_buffer, "MQTT Demo Finished\n");
 800d2c6:	4a99      	ldr	r2, [pc, #612]	; (800d52c <send_data_to_server+0x2f4>)
 800d2c8:	4b9e      	ldr	r3, [pc, #632]	; (800d544 <send_data_to_server+0x30c>)
 800d2ca:	4615      	mov	r5, r2
 800d2cc:	461c      	mov	r4, r3
 800d2ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2d0:	6028      	str	r0, [r5, #0]
 800d2d2:	6069      	str	r1, [r5, #4]
 800d2d4:	60aa      	str	r2, [r5, #8]
 800d2d6:	60eb      	str	r3, [r5, #12]
 800d2d8:	6820      	ldr	r0, [r4, #0]
 800d2da:	6128      	str	r0, [r5, #16]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d2dc:	4893      	ldr	r0, [pc, #588]	; (800d52c <send_data_to_server+0x2f4>)
 800d2de:	f7f2 ff81 	bl	80001e4 <strlen>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4890      	ldr	r0, [pc, #576]	; (800d52c <send_data_to_server+0x2f4>)
 800d2ea:	f7fb f829 	bl	8008340 <tx_com>
//	  get_config();
	  osMutexRelease(myMutex01Handle);
 800d2ee:	4b8b      	ldr	r3, [pc, #556]	; (800d51c <send_data_to_server+0x2e4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f00b faa6 	bl	8018844 <osMutexRelease>
  for(;;)
  {
//    status_delay = osDelay(52*SECOND);
//    status_delay = osDelay(47*SECOND);
//    status_delay = osDelay(49*SECOND);
	  status_delay = osDelay(SECOND);
 800d2f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2fc:	f00b f99c 	bl	8018638 <osDelay>
 800d300:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(status_delay == osOK)
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f7      	bne.n	800d2f8 <send_data_to_server+0xc0>
    {
    	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d308:	f107 0320 	add.w	r3, r7, #32
 800d30c:	2200      	movs	r2, #0
 800d30e:	4619      	mov	r1, r3
 800d310:	4888      	ldr	r0, [pc, #544]	; (800d534 <send_data_to_server+0x2fc>)
 800d312:	f005 fcde 	bl	8012cd2 <HAL_RTC_GetDate>
    	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d316:	f107 030c 	add.w	r3, r7, #12
 800d31a:	2200      	movs	r2, #0
 800d31c:	4619      	mov	r1, r3
 800d31e:	4885      	ldr	r0, [pc, #532]	; (800d534 <send_data_to_server+0x2fc>)
 800d320:	f005 fbf4 	bl	8012b0c <HAL_RTC_GetTime>
    	secnow = gTime.Seconds;
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	minnow = gTime.Minutes;
 800d32a:	7b7b      	ldrb	r3, [r7, #13]
 800d32c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    	status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d330:	4b7a      	ldr	r3, [pc, #488]	; (800d51c <send_data_to_server+0x2e4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f04f 31ff 	mov.w	r1, #4294967295
 800d338:	4618      	mov	r0, r3
 800d33a:	f00b fa35 	bl	80187a8 <osMutexWait>
 800d33e:	6338      	str	r0, [r7, #48]	; 0x30
//    	status_mutex = osMutexWait(myMutex01Handle, 500);
    	if(status_mutex == osOK)
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1d8      	bne.n	800d2f8 <send_data_to_server+0xc0>
    	{
//    		if(!uart2busy){
    	    	if((minnow == 2 || minnow == 7 || minnow == 12 || minnow == 17 || minnow == 22 || minnow == 27 || minnow == 32 || minnow == 37 || minnow == 42 || minnow == 47 || minnow == 52 || minnow == 57 ) && secnow == 0){
 800d346:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d02b      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d34e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d352:	2b07      	cmp	r3, #7
 800d354:	d027      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d356:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d35a:	2b0c      	cmp	r3, #12
 800d35c:	d023      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d35e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d362:	2b11      	cmp	r3, #17
 800d364:	d01f      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d366:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d36a:	2b16      	cmp	r3, #22
 800d36c:	d01b      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d36e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d372:	2b1b      	cmp	r3, #27
 800d374:	d017      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d376:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d013      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d37e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d382:	2b25      	cmp	r3, #37	; 0x25
 800d384:	d00f      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d386:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d38a:	2b2a      	cmp	r3, #42	; 0x2a
 800d38c:	d00b      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d38e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d392:	2b2f      	cmp	r3, #47	; 0x2f
 800d394:	d007      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d396:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d39a:	2b34      	cmp	r3, #52	; 0x34
 800d39c:	d003      	beq.n	800d3a6 <send_data_to_server+0x16e>
 800d39e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d3a2:	2b39      	cmp	r3, #57	; 0x39
 800d3a4:	d109      	bne.n	800d3ba <send_data_to_server+0x182>
 800d3a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d105      	bne.n	800d3ba <send_data_to_server+0x182>
        			uart2busy = true;
 800d3ae:	4b66      	ldr	r3, [pc, #408]	; (800d548 <send_data_to_server+0x310>)
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	701a      	strb	r2, [r3, #0]
    				sendSimple();
 800d3b4:	f7fb fcfc 	bl	8008db0 <sendSimple>
 800d3b8:	e19b      	b.n	800d6f2 <send_data_to_server+0x4ba>
    	    	}
    	    	else if(cntpok == 0 || cntpok == 1) {
 800d3ba:	4b5b      	ldr	r3, [pc, #364]	; (800d528 <send_data_to_server+0x2f0>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <send_data_to_server+0x192>
 800d3c2:	4b59      	ldr	r3, [pc, #356]	; (800d528 <send_data_to_server+0x2f0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d10c      	bne.n	800d3e4 <send_data_to_server+0x1ac>
        			uart2busy = true;
 800d3ca:	4b5f      	ldr	r3, [pc, #380]	; (800d548 <send_data_to_server+0x310>)
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	701a      	strb	r2, [r3, #0]
        			cntpok =1;
 800d3d0:	4b55      	ldr	r3, [pc, #340]	; (800d528 <send_data_to_server+0x2f0>)
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	601a      	str	r2, [r3, #0]
        			set_cntp();
 800d3d6:	f7fa fb31 	bl	8007a3c <set_cntp>
        			osDelay(7000);
 800d3da:	f641 3058 	movw	r0, #7000	; 0x1b58
 800d3de:	f00b f92b 	bl	8018638 <osDelay>
 800d3e2:	e186      	b.n	800d6f2 <send_data_to_server+0x4ba>
    	    	}
				else if(secnow == 0){
 800d3e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f040 8182 	bne.w	800d6f2 <send_data_to_server+0x4ba>
					if(minnow == 3 || minnow == 33)cntpok=0;
 800d3ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d003      	beq.n	800d3fe <send_data_to_server+0x1c6>
 800d3f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d3fa:	2b21      	cmp	r3, #33	; 0x21
 800d3fc:	d102      	bne.n	800d404 <send_data_to_server+0x1cc>
 800d3fe:	4b4a      	ldr	r3, [pc, #296]	; (800d528 <send_data_to_server+0x2f0>)
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
//					SerialATprintln("AT+CNMP=2", 10, 0xff);
//					osDelay(1000);
					uart2done = false;
 800d404:	4b51      	ldr	r3, [pc, #324]	; (800d54c <send_data_to_server+0x314>)
 800d406:	2200      	movs	r2, #0
 800d408:	701a      	strb	r2, [r3, #0]
						sprintf(uart2_at,"AT+CPSI?");
 800d40a:	4a51      	ldr	r2, [pc, #324]	; (800d550 <send_data_to_server+0x318>)
 800d40c:	4b51      	ldr	r3, [pc, #324]	; (800d554 <send_data_to_server+0x31c>)
 800d40e:	cb03      	ldmia	r3!, {r0, r1}
 800d410:	6010      	str	r0, [r2, #0]
 800d412:	6051      	str	r1, [r2, #4]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	7213      	strb	r3, [r2, #8]
						printf(uart2_at);
 800d418:	484d      	ldr	r0, [pc, #308]	; (800d550 <send_data_to_server+0x318>)
 800d41a:	f00e fc51 	bl	801bcc0 <iprintf>
						SerialATprintln("AT+CPSI?", 8, 0xff);
 800d41e:	22ff      	movs	r2, #255	; 0xff
 800d420:	2108      	movs	r1, #8
 800d422:	484c      	ldr	r0, [pc, #304]	; (800d554 <send_data_to_server+0x31c>)
 800d424:	f7fa f9f8 	bl	8007818 <SerialATprintln>
//						osDelay(1000);
						for(int y=0;y<30;y++){
 800d428:	2300      	movs	r3, #0
 800d42a:	657b      	str	r3, [r7, #84]	; 0x54
 800d42c:	e009      	b.n	800d442 <send_data_to_server+0x20a>
									osDelay(200);
 800d42e:	20c8      	movs	r0, #200	; 0xc8
 800d430:	f00b f902 	bl	8018638 <osDelay>
									if(uart2done)break;
 800d434:	4b45      	ldr	r3, [pc, #276]	; (800d54c <send_data_to_server+0x314>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <send_data_to_server+0x212>
						for(int y=0;y<30;y++){
 800d43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d43e:	3301      	adds	r3, #1
 800d440:	657b      	str	r3, [r7, #84]	; 0x54
 800d442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d444:	2b1d      	cmp	r3, #29
 800d446:	ddf2      	ble.n	800d42e <send_data_to_server+0x1f6>
 800d448:	e000      	b.n	800d44c <send_data_to_server+0x214>
									if(uart2done)break;
 800d44a:	bf00      	nop
								}
						int cmpint=strcmp(networkstr," GSM");
 800d44c:	4b42      	ldr	r3, [pc, #264]	; (800d558 <send_data_to_server+0x320>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4942      	ldr	r1, [pc, #264]	; (800d55c <send_data_to_server+0x324>)
 800d452:	4618      	mov	r0, r3
 800d454:	f7f2 febc 	bl	80001d0 <strcmp>
 800d458:	6278      	str	r0, [r7, #36]	; 0x24
						if(cmpint != 0){
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d029      	beq.n	800d4b4 <send_data_to_server+0x27c>
							if(signal<-115){
 800d460:	4b3f      	ldr	r3, [pc, #252]	; (800d560 <send_data_to_server+0x328>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f113 0f73 	cmn.w	r3, #115	; 0x73
 800d468:	f280 8083 	bge.w	800d572 <send_data_to_server+0x33a>
									SerialATprintln("AT+CNMP=13", 10, 0xff);
 800d46c:	22ff      	movs	r2, #255	; 0xff
 800d46e:	210a      	movs	r1, #10
 800d470:	483c      	ldr	r0, [pc, #240]	; (800d564 <send_data_to_server+0x32c>)
 800d472:	f7fa f9d1 	bl	8007818 <SerialATprintln>
									osDelay(2000);
 800d476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d47a:	f00b f8dd 	bl	8018638 <osDelay>
									reset_mqtt();
 800d47e:	f7fc f807 	bl	8009490 <reset_mqtt>
									SerialATprintln("AT+SMCONN",9,0xff);
 800d482:	22ff      	movs	r2, #255	; 0xff
 800d484:	2109      	movs	r1, #9
 800d486:	4838      	ldr	r0, [pc, #224]	; (800d568 <send_data_to_server+0x330>)
 800d488:	f7fa f9c6 	bl	8007818 <SerialATprintln>
									uart2done = false;
 800d48c:	4b2f      	ldr	r3, [pc, #188]	; (800d54c <send_data_to_server+0x314>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
									for(int y=0;y<30;y++){
 800d492:	2300      	movs	r3, #0
 800d494:	653b      	str	r3, [r7, #80]	; 0x50
 800d496:	e009      	b.n	800d4ac <send_data_to_server+0x274>
										osDelay(200);
 800d498:	20c8      	movs	r0, #200	; 0xc8
 800d49a:	f00b f8cd 	bl	8018638 <osDelay>
										if(uart2done)break;
 800d49e:	4b2b      	ldr	r3, [pc, #172]	; (800d54c <send_data_to_server+0x314>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d138      	bne.n	800d518 <send_data_to_server+0x2e0>
									for(int y=0;y<30;y++){
 800d4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	653b      	str	r3, [r7, #80]	; 0x50
 800d4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ae:	2b1d      	cmp	r3, #29
 800d4b0:	ddf2      	ble.n	800d498 <send_data_to_server+0x260>
 800d4b2:	e05e      	b.n	800d572 <send_data_to_server+0x33a>
									}
								}
						}
						else {
							if(signal<=-100){
 800d4b4:	4b2a      	ldr	r3, [pc, #168]	; (800d560 <send_data_to_server+0x328>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d4bc:	da59      	bge.n	800d572 <send_data_to_server+0x33a>
								for(int z=0;z<3;z++){
 800d4be:	2300      	movs	r3, #0
 800d4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4c2:	e025      	b.n	800d510 <send_data_to_server+0x2d8>
									printf("modem reboot\n");
 800d4c4:	4829      	ldr	r0, [pc, #164]	; (800d56c <send_data_to_server+0x334>)
 800d4c6:	f00e fc6f 	bl	801bda8 <puts>
									modem_reset_rtos();
 800d4ca:	f7fc f8a3 	bl	8009614 <modem_reset_rtos>
									reset_mqtt();
 800d4ce:	f7fb ffdf 	bl	8009490 <reset_mqtt>
									SerialATprintln("AT+CPSI?", 8, 0xff);
 800d4d2:	22ff      	movs	r2, #255	; 0xff
 800d4d4:	2108      	movs	r1, #8
 800d4d6:	481f      	ldr	r0, [pc, #124]	; (800d554 <send_data_to_server+0x31c>)
 800d4d8:	f7fa f99e 	bl	8007818 <SerialATprintln>
//									osDelay(2000);
									for(int y=0;y<30;y++){
 800d4dc:	2300      	movs	r3, #0
 800d4de:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e0:	e009      	b.n	800d4f6 <send_data_to_server+0x2be>
										osDelay(200);
 800d4e2:	20c8      	movs	r0, #200	; 0xc8
 800d4e4:	f00b f8a8 	bl	8018638 <osDelay>
										if(uart2done)break;
 800d4e8:	4b18      	ldr	r3, [pc, #96]	; (800d54c <send_data_to_server+0x314>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d106      	bne.n	800d4fe <send_data_to_server+0x2c6>
									for(int y=0;y<30;y++){
 800d4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f8:	2b1d      	cmp	r3, #29
 800d4fa:	ddf2      	ble.n	800d4e2 <send_data_to_server+0x2aa>
 800d4fc:	e000      	b.n	800d500 <send_data_to_server+0x2c8>
										if(uart2done)break;
 800d4fe:	bf00      	nop
									}
									if(signal > -100) break;
 800d500:	4b17      	ldr	r3, [pc, #92]	; (800d560 <send_data_to_server+0x328>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d508:	da32      	bge.n	800d570 <send_data_to_server+0x338>
								for(int z=0;z<3;z++){
 800d50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50c:	3301      	adds	r3, #1
 800d50e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d512:	2b02      	cmp	r3, #2
 800d514:	ddd6      	ble.n	800d4c4 <send_data_to_server+0x28c>
 800d516:	e02c      	b.n	800d572 <send_data_to_server+0x33a>
										if(uart2done)break;
 800d518:	bf00      	nop
 800d51a:	e02a      	b.n	800d572 <send_data_to_server+0x33a>
 800d51c:	2000afa4 	.word	0x2000afa4
 800d520:	20000188 	.word	0x20000188
 800d524:	0801eb58 	.word	0x0801eb58
 800d528:	20000600 	.word	0x20000600
 800d52c:	200068bc 	.word	0x200068bc
 800d530:	0801f2fc 	.word	0x0801f2fc
 800d534:	20008190 	.word	0x20008190
 800d538:	20004314 	.word	0x20004314
 800d53c:	200081b8 	.word	0x200081b8
 800d540:	2000affc 	.word	0x2000affc
 800d544:	0801f308 	.word	0x0801f308
 800d548:	2000b004 	.word	0x2000b004
 800d54c:	20003fe4 	.word	0x20003fe4
 800d550:	20003fd0 	.word	0x20003fd0
 800d554:	0801e910 	.word	0x0801e910
 800d558:	20005314 	.word	0x20005314
 800d55c:	0801e91c 	.word	0x0801e91c
 800d560:	20007244 	.word	0x20007244
 800d564:	0801e924 	.word	0x0801e924
 800d568:	0801e89c 	.word	0x0801e89c
 800d56c:	0801e930 	.word	0x0801e930
									if(signal > -100) break;
 800d570:	bf00      	nop
								}

							}
						}
					SerialATprintln("AT+CNMP?", 8, 0xff);
 800d572:	22ff      	movs	r2, #255	; 0xff
 800d574:	2108      	movs	r1, #8
 800d576:	4862      	ldr	r0, [pc, #392]	; (800d700 <send_data_to_server+0x4c8>)
 800d578:	f7fa f94e 	bl	8007818 <SerialATprintln>
					osDelay(1000);
 800d57c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d580:	f00b f85a 	bl	8018638 <osDelay>
					for(int z=0;z<3;z++){
 800d584:	2300      	movs	r3, #0
 800d586:	647b      	str	r3, [r7, #68]	; 0x44
 800d588:	e061      	b.n	800d64e <send_data_to_server+0x416>
						uart2done = false;
 800d58a:	4b5e      	ldr	r3, [pc, #376]	; (800d704 <send_data_to_server+0x4cc>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 800d590:	4b5d      	ldr	r3, [pc, #372]	; (800d708 <send_data_to_server+0x4d0>)
 800d592:	681c      	ldr	r4, [r3, #0]
 800d594:	4b5c      	ldr	r3, [pc, #368]	; (800d708 <send_data_to_server+0x4d0>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f2 fe23 	bl	80001e4 <strlen>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	b29a      	uxth	r2, r3
 800d5a2:	23ff      	movs	r3, #255	; 0xff
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4859      	ldr	r0, [pc, #356]	; (800d70c <send_data_to_server+0x4d4>)
 800d5a8:	f006 fc70 	bl	8013e8c <HAL_UART_Transmit>
						for(int y=0;y<25;y++){
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	643b      	str	r3, [r7, #64]	; 0x40
 800d5b0:	e009      	b.n	800d5c6 <send_data_to_server+0x38e>
									osDelay(200);
 800d5b2:	20c8      	movs	r0, #200	; 0xc8
 800d5b4:	f00b f840 	bl	8018638 <osDelay>
									if(uart2done)break;
 800d5b8:	4b52      	ldr	r3, [pc, #328]	; (800d704 <send_data_to_server+0x4cc>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <send_data_to_server+0x396>
						for(int y=0;y<25;y++){
 800d5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c8:	2b18      	cmp	r3, #24
 800d5ca:	ddf2      	ble.n	800d5b2 <send_data_to_server+0x37a>
 800d5cc:	e000      	b.n	800d5d0 <send_data_to_server+0x398>
									if(uart2done)break;
 800d5ce:	bf00      	nop
								}
							temp_data =strstr((char *)buffer2,"+SMSTATE:");
 800d5d0:	494f      	ldr	r1, [pc, #316]	; (800d710 <send_data_to_server+0x4d8>)
 800d5d2:	4850      	ldr	r0, [pc, #320]	; (800d714 <send_data_to_server+0x4dc>)
 800d5d4:	f00e fc37 	bl	801be46 <strstr>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	4b4f      	ldr	r3, [pc, #316]	; (800d718 <send_data_to_server+0x4e0>)
 800d5dc:	601a      	str	r2, [r3, #0]
							memcpy(smstatestr,temp_data,11);
 800d5de:	4b4f      	ldr	r3, [pc, #316]	; (800d71c <send_data_to_server+0x4e4>)
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	4b4d      	ldr	r3, [pc, #308]	; (800d718 <send_data_to_server+0x4e0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	220b      	movs	r2, #11
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	f00d fe51 	bl	801b290 <memcpy>
							smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 800d5ee:	4b4b      	ldr	r3, [pc, #300]	; (800d71c <send_data_to_server+0x4e4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	494b      	ldr	r1, [pc, #300]	; (800d720 <send_data_to_server+0x4e8>)
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7f2 fdeb 	bl	80001d0 <strcmp>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	4b49      	ldr	r3, [pc, #292]	; (800d724 <send_data_to_server+0x4ec>)
 800d600:	701a      	strb	r2, [r3, #0]
							uart2done = false;
 800d602:	4b40      	ldr	r3, [pc, #256]	; (800d704 <send_data_to_server+0x4cc>)
 800d604:	2200      	movs	r2, #0
 800d606:	701a      	strb	r2, [r3, #0]
							if(smstateint!=0) break;
 800d608:	4b46      	ldr	r3, [pc, #280]	; (800d724 <send_data_to_server+0x4ec>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d122      	bne.n	800d656 <send_data_to_server+0x41e>
							reset_mqtt();
 800d610:	f7fb ff3e 	bl	8009490 <reset_mqtt>
							SerialATprintln("AT+SMCONN",9,0xff);
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	2109      	movs	r1, #9
 800d618:	4843      	ldr	r0, [pc, #268]	; (800d728 <send_data_to_server+0x4f0>)
 800d61a:	f7fa f8fd 	bl	8007818 <SerialATprintln>
							uart2done = false;
 800d61e:	4b39      	ldr	r3, [pc, #228]	; (800d704 <send_data_to_server+0x4cc>)
 800d620:	2200      	movs	r2, #0
 800d622:	701a      	strb	r2, [r3, #0]
							for(int y=0;y<25;y++){
 800d624:	2300      	movs	r3, #0
 800d626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d628:	e009      	b.n	800d63e <send_data_to_server+0x406>
								osDelay(200);
 800d62a:	20c8      	movs	r0, #200	; 0xc8
 800d62c:	f00b f804 	bl	8018638 <osDelay>
								if(uart2done)break;
 800d630:	4b34      	ldr	r3, [pc, #208]	; (800d704 <send_data_to_server+0x4cc>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <send_data_to_server+0x40e>
							for(int y=0;y<25;y++){
 800d638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63a:	3301      	adds	r3, #1
 800d63c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	2b18      	cmp	r3, #24
 800d642:	ddf2      	ble.n	800d62a <send_data_to_server+0x3f2>
 800d644:	e000      	b.n	800d648 <send_data_to_server+0x410>
								if(uart2done)break;
 800d646:	bf00      	nop
					for(int z=0;z<3;z++){
 800d648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d64a:	3301      	adds	r3, #1
 800d64c:	647b      	str	r3, [r7, #68]	; 0x44
 800d64e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d650:	2b02      	cmp	r3, #2
 800d652:	dd9a      	ble.n	800d58a <send_data_to_server+0x352>
 800d654:	e000      	b.n	800d658 <send_data_to_server+0x420>
							if(smstateint!=0) break;
 800d656:	bf00      	nop
							}
						}
					uart2done = false;
 800d658:	4b2a      	ldr	r3, [pc, #168]	; (800d704 <send_data_to_server+0x4cc>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	701a      	strb	r2, [r3, #0]
//							SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
					SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 800d65e:	22ff      	movs	r2, #255	; 0xff
 800d660:	2119      	movs	r1, #25
 800d662:	4832      	ldr	r0, [pc, #200]	; (800d72c <send_data_to_server+0x4f4>)
 800d664:	f7fa f8d8 	bl	8007818 <SerialATprintln>
							for(int i=0;i<25;i++){
 800d668:	2300      	movs	r3, #0
 800d66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d66c:	e009      	b.n	800d682 <send_data_to_server+0x44a>
								osDelay(200);
 800d66e:	20c8      	movs	r0, #200	; 0xc8
 800d670:	f00a ffe2 	bl	8018638 <osDelay>
								if(uart2done)break;
 800d674:	4b23      	ldr	r3, [pc, #140]	; (800d704 <send_data_to_server+0x4cc>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d106      	bne.n	800d68a <send_data_to_server+0x452>
							for(int i=0;i<25;i++){
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	3301      	adds	r3, #1
 800d680:	63bb      	str	r3, [r7, #56]	; 0x38
 800d682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d684:	2b18      	cmp	r3, #24
 800d686:	ddf2      	ble.n	800d66e <send_data_to_server+0x436>
 800d688:	e000      	b.n	800d68c <send_data_to_server+0x454>
								if(uart2done)break;
 800d68a:	bf00      	nop
							}
					osDelay(3000);
 800d68c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d690:	f00a ffd2 	bl	8018638 <osDelay>
					uart2done = false;
 800d694:	4b1b      	ldr	r3, [pc, #108]	; (800d704 <send_data_to_server+0x4cc>)
 800d696:	2200      	movs	r2, #0
 800d698:	701a      	strb	r2, [r3, #0]
//						SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
					SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 800d69a:	22ff      	movs	r2, #255	; 0xff
 800d69c:	2119      	movs	r1, #25
 800d69e:	4824      	ldr	r0, [pc, #144]	; (800d730 <send_data_to_server+0x4f8>)
 800d6a0:	f7fa f8ba 	bl	8007818 <SerialATprintln>
						for(int i=0;i<25;i++){
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d6a8:	e009      	b.n	800d6be <send_data_to_server+0x486>
							osDelay(200);
 800d6aa:	20c8      	movs	r0, #200	; 0xc8
 800d6ac:	f00a ffc4 	bl	8018638 <osDelay>
							if(uart2done)break;
 800d6b0:	4b14      	ldr	r3, [pc, #80]	; (800d704 <send_data_to_server+0x4cc>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d106      	bne.n	800d6c6 <send_data_to_server+0x48e>
						for(int i=0;i<25;i++){
 800d6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c0:	2b18      	cmp	r3, #24
 800d6c2:	ddf2      	ble.n	800d6aa <send_data_to_server+0x472>
 800d6c4:	e000      	b.n	800d6c8 <send_data_to_server+0x490>
							if(uart2done)break;
 800d6c6:	bf00      	nop
						}
					uart2done = false;
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <send_data_to_server+0x4cc>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
					SerialATprintln("AT+CNMP=2", 9, 0xff);
 800d6ce:	22ff      	movs	r2, #255	; 0xff
 800d6d0:	2109      	movs	r1, #9
 800d6d2:	4818      	ldr	r0, [pc, #96]	; (800d734 <send_data_to_server+0x4fc>)
 800d6d4:	f7fa f8a0 	bl	8007818 <SerialATprintln>
					osDelay(1000);
 800d6d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d6dc:	f00a ffac 	bl	8018638 <osDelay>
					SerialATprintln("AT+CNMP?", 8, 0xff);
 800d6e0:	22ff      	movs	r2, #255	; 0xff
 800d6e2:	2108      	movs	r1, #8
 800d6e4:	4806      	ldr	r0, [pc, #24]	; (800d700 <send_data_to_server+0x4c8>)
 800d6e6:	f7fa f897 	bl	8007818 <SerialATprintln>
					osDelay(1000);
 800d6ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d6ee:	f00a ffa3 	bl	8018638 <osDelay>
				}
//    		}
//    		uart2busy = false;
			osMutexRelease(myMutex01Handle);
 800d6f2:	4b11      	ldr	r3, [pc, #68]	; (800d738 <send_data_to_server+0x500>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f00b f8a4 	bl	8018844 <osMutexRelease>
	  status_delay = osDelay(SECOND);
 800d6fc:	e5fc      	b.n	800d2f8 <send_data_to_server+0xc0>
 800d6fe:	bf00      	nop
 800d700:	0801e778 	.word	0x0801e778
 800d704:	20003fe4 	.word	0x20003fe4
 800d708:	20000184 	.word	0x20000184
 800d70c:	200038e4 	.word	0x200038e4
 800d710:	0801e940 	.word	0x0801e940
 800d714:	20006d80 	.word	0x20006d80
 800d718:	200045f4 	.word	0x200045f4
 800d71c:	2000b000 	.word	0x2000b000
 800d720:	0801e94c 	.word	0x0801e94c
 800d724:	2000430c 	.word	0x2000430c
 800d728:	0801e89c 	.word	0x0801e89c
 800d72c:	0801e958 	.word	0x0801e958
 800d730:	0801e8d8 	.word	0x0801e8d8
 800d734:	0801e9a8 	.word	0x0801e9a8
 800d738:	2000afa4 	.word	0x2000afa4

0800d73c <read_EoB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_EoB */
void read_EoB(void const * argument)
{
 800d73c:	b5b0      	push	{r4, r5, r7, lr}
 800d73e:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800d742:	af02      	add	r7, sp, #8
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
//	  status_delay = osDelay(30*SECOND);
//	  if(status_delay == osOK){
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d74a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800d74e:	2200      	movs	r2, #0
 800d750:	4619      	mov	r1, r3
 800d752:	4882      	ldr	r0, [pc, #520]	; (800d95c <read_EoB+0x220>)
 800d754:	f005 fabd 	bl	8012cd2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d758:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800d75c:	2200      	movs	r2, #0
 800d75e:	4619      	mov	r1, r3
 800d760:	487e      	ldr	r0, [pc, #504]	; (800d95c <read_EoB+0x220>)
 800d762:	f005 f9d3 	bl	8012b0c <HAL_RTC_GetTime>
//		  if(gTime.Seconds != secmin1) printf(" EoB ");

//		  printf("Tanggal: %d-%d-%d, %2d:%2d:%2d \n", gDate.Date, gDate.Month, gDate.Year, gTime.Hours, gTime.Minutes, gTime.Seconds);

//			  if(gDate.Date == 1 && gTime.Hours == 10 && gTime.Minutes == 0 && gTime.Seconds == 0 && gTime.SubSeconds == 0)
			  if((gDate.Date == eob_date || gDate.Date == 1) && (gTime.Hours == eob_hour || gTime.Hours == 10) && (gTime.Minutes == eob_minute || gTime.Minutes == 0) && gTime.Seconds == 15)
 800d766:	f897 2496 	ldrb.w	r2, [r7, #1174]	; 0x496
 800d76a:	4b7d      	ldr	r3, [pc, #500]	; (800d960 <read_EoB+0x224>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d004      	beq.n	800d77c <read_EoB+0x40>
 800d772:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800d776:	2b01      	cmp	r3, #1
 800d778:	f040 80eb 	bne.w	800d952 <read_EoB+0x216>
 800d77c:	f897 2480 	ldrb.w	r2, [r7, #1152]	; 0x480
 800d780:	4b78      	ldr	r3, [pc, #480]	; (800d964 <read_EoB+0x228>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	429a      	cmp	r2, r3
 800d786:	d004      	beq.n	800d792 <read_EoB+0x56>
 800d788:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800d78c:	2b0a      	cmp	r3, #10
 800d78e:	f040 80e0 	bne.w	800d952 <read_EoB+0x216>
 800d792:	f897 2481 	ldrb.w	r2, [r7, #1153]	; 0x481
 800d796:	4b74      	ldr	r3, [pc, #464]	; (800d968 <read_EoB+0x22c>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d004      	beq.n	800d7a8 <read_EoB+0x6c>
 800d79e:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f040 80d5 	bne.w	800d952 <read_EoB+0x216>
 800d7a8:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800d7ac:	2b0f      	cmp	r3, #15
 800d7ae:	f040 80d0 	bne.w	800d952 <read_EoB+0x216>
			  {
				  printf("In: if gTime.Minutes == %d eob\n",eob_minute);
 800d7b2:	4b6d      	ldr	r3, [pc, #436]	; (800d968 <read_EoB+0x22c>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	486c      	ldr	r0, [pc, #432]	; (800d96c <read_EoB+0x230>)
 800d7ba:	f00e fa81 	bl	801bcc0 <iprintf>
				  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d7be:	4b6c      	ldr	r3, [pc, #432]	; (800d970 <read_EoB+0x234>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f04f 31ff 	mov.w	r1, #4294967295
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f00a ffee 	bl	80187a8 <osMutexWait>
 800d7cc:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
//				  printf("In: if gTime.Minutes == 10 \n");
				  if(status_mutex == osOK)
 800d7d0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f040 80bc 	bne.w	800d952 <read_EoB+0x216>
				  {
					  if(pwr_vmon==1){
 800d7da:	4b66      	ldr	r3, [pc, #408]	; (800d974 <read_EoB+0x238>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	f040 80a2 	bne.w	800d928 <read_EoB+0x1ec>
				    	if(!uart2busy){
 800d7e4:	4b64      	ldr	r3, [pc, #400]	; (800d978 <read_EoB+0x23c>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	f083 0301 	eor.w	r3, r3, #1
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <read_EoB+0xce>
				    		uart2busy = true;
 800d7f2:	4b61      	ldr	r3, [pc, #388]	; (800d978 <read_EoB+0x23c>)
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	701a      	strb	r2, [r3, #0]
				    		//				  	  if(!usemqtt)  setup_modem();
				    		if(typemeter==10) read_eob_mk10e();
 800d7f8:	4b60      	ldr	r3, [pc, #384]	; (800d97c <read_EoB+0x240>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b0a      	cmp	r3, #10
 800d7fe:	d102      	bne.n	800d806 <read_EoB+0xca>
 800d800:	f7fd fae2 	bl	800adc8 <read_eob_mk10e>
 800d804:	e001      	b.n	800d80a <read_EoB+0xce>
				    		else read_eob_mk6n();
 800d806:	f7fc fbe3 	bl	8009fd0 <read_eob_mk6n>
				    	}
				  	  fresult_t = f_mount(&fs_t, "/", 1);
 800d80a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800d80e:	2201      	movs	r2, #1
 800d810:	495b      	ldr	r1, [pc, #364]	; (800d980 <read_EoB+0x244>)
 800d812:	4618      	mov	r0, r3
 800d814:	f009 fd10 	bl	8017238 <f_mount>
 800d818:	4603      	mov	r3, r0
 800d81a:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  	  if(fresult_t != FR_OK)
 800d81e:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800d822:	2b00      	cmp	r3, #0
 800d824:	d017      	beq.n	800d856 <read_EoB+0x11a>
				  	  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800d826:	4a57      	ldr	r2, [pc, #348]	; (800d984 <read_EoB+0x248>)
 800d828:	4b57      	ldr	r3, [pc, #348]	; (800d988 <read_EoB+0x24c>)
 800d82a:	4615      	mov	r5, r2
 800d82c:	461c      	mov	r4, r3
 800d82e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d830:	6028      	str	r0, [r5, #0]
 800d832:	6069      	str	r1, [r5, #4]
 800d834:	60aa      	str	r2, [r5, #8]
 800d836:	60eb      	str	r3, [r5, #12]
 800d838:	cc03      	ldmia	r4!, {r0, r1}
 800d83a:	6128      	str	r0, [r5, #16]
 800d83c:	6169      	str	r1, [r5, #20]
 800d83e:	7823      	ldrb	r3, [r4, #0]
 800d840:	762b      	strb	r3, [r5, #24]
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d842:	4850      	ldr	r0, [pc, #320]	; (800d984 <read_EoB+0x248>)
 800d844:	f7f2 fcce 	bl	80001e4 <strlen>
 800d848:	4603      	mov	r3, r0
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4619      	mov	r1, r3
 800d84e:	484d      	ldr	r0, [pc, #308]	; (800d984 <read_EoB+0x248>)
 800d850:	f7fa fd76 	bl	8008340 <tx_com>
 800d854:	e068      	b.n	800d928 <read_EoB+0x1ec>
				  	  }
				  	  else {
				  		  if(!onlineMode){
 800d856:	4b4d      	ldr	r3, [pc, #308]	; (800d98c <read_EoB+0x250>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	f083 0301 	eor.w	r3, r3, #1
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	d05c      	beq.n	800d91e <read_EoB+0x1e2>
							  if(typemeter == 6) sprintf(buffer, "eobmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800d864:	4b45      	ldr	r3, [pc, #276]	; (800d97c <read_EoB+0x240>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b06      	cmp	r3, #6
 800d86a:	d10e      	bne.n	800d88a <read_EoB+0x14e>
 800d86c:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800d870:	461a      	mov	r2, r3
 800d872:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800d876:	4619      	mov	r1, r3
 800d878:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	460b      	mov	r3, r1
 800d880:	4943      	ldr	r1, [pc, #268]	; (800d990 <read_EoB+0x254>)
 800d882:	4844      	ldr	r0, [pc, #272]	; (800d994 <read_EoB+0x258>)
 800d884:	f00e faa8 	bl	801bdd8 <siprintf>
 800d888:	e00d      	b.n	800d8a6 <read_EoB+0x16a>
							  else sprintf(buffer, "eobmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800d88a:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800d88e:	461a      	mov	r2, r3
 800d890:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800d894:	4619      	mov	r1, r3
 800d896:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	460b      	mov	r3, r1
 800d89e:	493e      	ldr	r1, [pc, #248]	; (800d998 <read_EoB+0x25c>)
 800d8a0:	483c      	ldr	r0, [pc, #240]	; (800d994 <read_EoB+0x258>)
 800d8a2:	f00e fa99 	bl	801bdd8 <siprintf>
							    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800d8a6:	f107 0318 	add.w	r3, r7, #24
 800d8aa:	2233      	movs	r2, #51	; 0x33
 800d8ac:	4939      	ldr	r1, [pc, #228]	; (800d994 <read_EoB+0x258>)
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f009 fd26 	bl	8017300 <f_open>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
							    if(fresult_t != FR_OK)
 800d8ba:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d015      	beq.n	800d8ee <read_EoB+0x1b2>
							    {
							    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800d8c2:	4a30      	ldr	r2, [pc, #192]	; (800d984 <read_EoB+0x248>)
 800d8c4:	4b35      	ldr	r3, [pc, #212]	; (800d99c <read_EoB+0x260>)
 800d8c6:	4615      	mov	r5, r2
 800d8c8:	461c      	mov	r4, r3
 800d8ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8cc:	6028      	str	r0, [r5, #0]
 800d8ce:	6069      	str	r1, [r5, #4]
 800d8d0:	60aa      	str	r2, [r5, #8]
 800d8d2:	60eb      	str	r3, [r5, #12]
 800d8d4:	6820      	ldr	r0, [r4, #0]
 800d8d6:	6128      	str	r0, [r5, #16]
 800d8d8:	7923      	ldrb	r3, [r4, #4]
 800d8da:	752b      	strb	r3, [r5, #20]
							    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d8dc:	4829      	ldr	r0, [pc, #164]	; (800d984 <read_EoB+0x248>)
 800d8de:	f7f2 fc81 	bl	80001e4 <strlen>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4826      	ldr	r0, [pc, #152]	; (800d984 <read_EoB+0x248>)
 800d8ea:	f7fa fd29 	bl	8008340 <tx_com>
							    }
							  // Write some text
							fresult = f_puts(mydata, &fil_t);
 800d8ee:	f107 0318 	add.w	r3, r7, #24
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	482a      	ldr	r0, [pc, #168]	; (800d9a0 <read_EoB+0x264>)
 800d8f6:	f00a fc90 	bl	801821a <f_puts>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4b29      	ldr	r3, [pc, #164]	; (800d9a4 <read_EoB+0x268>)
 800d900:	701a      	strb	r2, [r3, #0]
							  // Close file
							printf(buffer);
 800d902:	4824      	ldr	r0, [pc, #144]	; (800d994 <read_EoB+0x258>)
 800d904:	f00e f9dc 	bl	801bcc0 <iprintf>
							printf(" created and data written\r\n");
 800d908:	4827      	ldr	r0, [pc, #156]	; (800d9a8 <read_EoB+0x26c>)
 800d90a:	f00e fa4d 	bl	801bda8 <puts>
							f_close(&fil_t);
 800d90e:	f107 0318 	add.w	r3, r7, #24
 800d912:	4618      	mov	r0, r3
 800d914:	f00a fae1 	bl	8017eda <f_close>
							onlineMode = true;
 800d918:	4b1c      	ldr	r3, [pc, #112]	; (800d98c <read_EoB+0x250>)
 800d91a:	2201      	movs	r2, #1
 800d91c:	701a      	strb	r2, [r3, #0]
				  		  }
					f_mount(0, "", 0);
 800d91e:	2200      	movs	r2, #0
 800d920:	4922      	ldr	r1, [pc, #136]	; (800d9ac <read_EoB+0x270>)
 800d922:	2000      	movs	r0, #0
 800d924:	f009 fc88 	bl	8017238 <f_mount>
				  }
				}
//			  f_mount(0, "", 0);
//				uart2busy = false;
			  osMutexRelease(myMutex01Handle);
 800d928:	4b11      	ldr	r3, [pc, #68]	; (800d970 <read_EoB+0x234>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f00a ff89 	bl	8018844 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800d932:	463b      	mov	r3, r7
 800d934:	2264      	movs	r2, #100	; 0x64
 800d936:	2106      	movs	r1, #6
 800d938:	4618      	mov	r0, r3
 800d93a:	f00a fed1 	bl	80186e0 <osSignalWait>
				osSignalSet( readEoBHandle, BIT_1);
 800d93e:	4b1c      	ldr	r3, [pc, #112]	; (800d9b0 <read_EoB+0x274>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2102      	movs	r1, #2
 800d944:	4618      	mov	r0, r3
 800d946:	f00a fe8b 	bl	8018660 <osSignalSet>
				osDelay(900);
 800d94a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800d94e:	f00a fe73 	bl	8018638 <osDelay>
		  }
	  }
			  secmin1 = gTime.Seconds;
 800d952:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800d956:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d95a:	e6f6      	b.n	800d74a <read_EoB+0xe>
 800d95c:	20008190 	.word	0x20008190
 800d960:	200089f8 	.word	0x200089f8
 800d964:	200081bb 	.word	0x200081bb
 800d968:	2000818c 	.word	0x2000818c
 800d96c:	0801f31c 	.word	0x0801f31c
 800d970:	2000afa4 	.word	0x2000afa4
 800d974:	2000b510 	.word	0x2000b510
 800d978:	2000b004 	.word	0x2000b004
 800d97c:	2000b50c 	.word	0x2000b50c
 800d980:	0801e4e8 	.word	0x0801e4e8
 800d984:	200068bc 	.word	0x200068bc
 800d988:	0801ed58 	.word	0x0801ed58
 800d98c:	20000013 	.word	0x20000013
 800d990:	0801f33c 	.word	0x0801f33c
 800d994:	20007248 	.word	0x20007248
 800d998:	0801f354 	.word	0x0801f354
 800d99c:	0801ed94 	.word	0x0801ed94
 800d9a0:	200046c8 	.word	0x200046c8
 800d9a4:	20009058 	.word	0x20009058
 800d9a8:	0801f36c 	.word	0x0801f36c
 800d9ac:	0801effc 	.word	0x0801effc
 800d9b0:	2000afa0 	.word	0x2000afa0

0800d9b4 <read_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_LP */
void read_LP(void const * argument)
{
 800d9b4:	b5b0      	push	{r4, r5, r7, lr}
 800d9b6:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800d9ba:	af02      	add	r7, sp, #8
 800d9bc:	f107 0314 	add.w	r3, r7, #20
 800d9c0:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
//	  status_delay = osDelay(MINUTE);
//	  if(status_delay == osOK){
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d9c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	48af      	ldr	r0, [pc, #700]	; (800dc88 <read_LP+0x2d4>)
 800d9cc:	f005 f981 	bl	8012cd2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d9d0:	f107 0318 	add.w	r3, r7, #24
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	48ab      	ldr	r0, [pc, #684]	; (800dc88 <read_LP+0x2d4>)
 800d9da:	f005 f897 	bl	8012b0c <HAL_RTC_GetTime>
//		  if(gTime.Seconds != secmin1) printf(" LP ");
			  if(lp_rec!=0 || ((gTime.Minutes == 0 || gTime.Minutes == 15 || gTime.Minutes == 30 || gTime.Minutes == 45) && gTime.Seconds == 5))
 800d9de:	4bab      	ldr	r3, [pc, #684]	; (800dc8c <read_LP+0x2d8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d11a      	bne.n	800da1c <read_LP+0x68>
 800d9e6:	f107 0318 	add.w	r3, r7, #24
 800d9ea:	785b      	ldrb	r3, [r3, #1]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00f      	beq.n	800da10 <read_LP+0x5c>
 800d9f0:	f107 0318 	add.w	r3, r7, #24
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b0f      	cmp	r3, #15
 800d9f8:	d00a      	beq.n	800da10 <read_LP+0x5c>
 800d9fa:	f107 0318 	add.w	r3, r7, #24
 800d9fe:	785b      	ldrb	r3, [r3, #1]
 800da00:	2b1e      	cmp	r3, #30
 800da02:	d005      	beq.n	800da10 <read_LP+0x5c>
 800da04:	f107 0318 	add.w	r3, r7, #24
 800da08:	785b      	ldrb	r3, [r3, #1]
 800da0a:	2b2d      	cmp	r3, #45	; 0x2d
 800da0c:	f040 80e0 	bne.w	800dbd0 <read_LP+0x21c>
 800da10:	f107 0318 	add.w	r3, r7, #24
 800da14:	789b      	ldrb	r3, [r3, #2]
 800da16:	2b05      	cmp	r3, #5
 800da18:	f040 80da 	bne.w	800dbd0 <read_LP+0x21c>
//			if(lp_rec!=0 || ((gTime.Minutes == 0 || gTime.Minutes == 5 || gTime.Minutes == 10 || gTime.Minutes == 15 || gTime.Minutes == 20 | gTime.Minutes == 25 || gTime.Minutes == 30 || gTime.Minutes == 35 || gTime.Minutes == 40 || gTime.Minutes == 45 || gTime.Minutes == 50 || gTime.Minutes == 55 ) && gTime.Seconds == 10))
			  {
			  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800da1c:	4b9c      	ldr	r3, [pc, #624]	; (800dc90 <read_LP+0x2dc>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f04f 31ff 	mov.w	r1, #4294967295
 800da24:	4618      	mov	r0, r3
 800da26:	f00a febf 	bl	80187a8 <osMutexWait>
 800da2a:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
			  printf("In: if gTime.Minutes == 00/15/30/45 LP \n");
 800da2e:	4899      	ldr	r0, [pc, #612]	; (800dc94 <read_LP+0x2e0>)
 800da30:	f00e f9ba 	bl	801bda8 <puts>
			  if(status_mutex == osOK)
 800da34:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f040 81d5 	bne.w	800dde8 <read_LP+0x434>
			  {
				  if(pwr_vmon==1){
 800da3e:	4b96      	ldr	r3, [pc, #600]	; (800dc98 <read_LP+0x2e4>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b01      	cmp	r3, #1
 800da44:	f040 80a9 	bne.w	800db9a <read_LP+0x1e6>
					  if(!uart2busy){
 800da48:	4b94      	ldr	r3, [pc, #592]	; (800dc9c <read_LP+0x2e8>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	f083 0301 	eor.w	r3, r3, #1
 800da50:	b2db      	uxtb	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00b      	beq.n	800da6e <read_LP+0xba>
						  uart2busy = true;
 800da56:	4b91      	ldr	r3, [pc, #580]	; (800dc9c <read_LP+0x2e8>)
 800da58:	2201      	movs	r2, #1
 800da5a:	701a      	strb	r2, [r3, #0]
						  //			  	  if(!usemqtt)  setup_modem();
						  //			  	  setup_modem();
						  //				  read_lp_mk6n();
						  if(typemeter==10) read_lp_mk10e();
 800da5c:	4b90      	ldr	r3, [pc, #576]	; (800dca0 <read_LP+0x2ec>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b0a      	cmp	r3, #10
 800da62:	d102      	bne.n	800da6a <read_LP+0xb6>
 800da64:	f7fd fbc4 	bl	800b1f0 <read_lp_mk10e>
 800da68:	e001      	b.n	800da6e <read_LP+0xba>
						  else read_lp_mk6n();
 800da6a:	f7fc fccb 	bl	800a404 <read_lp_mk6n>
					  }
				  // Open file to write/create if not exist
				  fresult_t = f_mount(&fs_t, "/", 1);
 800da6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800da72:	2201      	movs	r2, #1
 800da74:	498b      	ldr	r1, [pc, #556]	; (800dca4 <read_LP+0x2f0>)
 800da76:	4618      	mov	r0, r3
 800da78:	f009 fbde 	bl	8017238 <f_mount>
 800da7c:	4603      	mov	r3, r0
 800da7e:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  if(fresult_t != FR_OK)
 800da82:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800da86:	2b00      	cmp	r3, #0
 800da88:	d017      	beq.n	800daba <read_LP+0x106>
				  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800da8a:	4a87      	ldr	r2, [pc, #540]	; (800dca8 <read_LP+0x2f4>)
 800da8c:	4b87      	ldr	r3, [pc, #540]	; (800dcac <read_LP+0x2f8>)
 800da8e:	4615      	mov	r5, r2
 800da90:	461c      	mov	r4, r3
 800da92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da94:	6028      	str	r0, [r5, #0]
 800da96:	6069      	str	r1, [r5, #4]
 800da98:	60aa      	str	r2, [r5, #8]
 800da9a:	60eb      	str	r3, [r5, #12]
 800da9c:	cc03      	ldmia	r4!, {r0, r1}
 800da9e:	6128      	str	r0, [r5, #16]
 800daa0:	6169      	str	r1, [r5, #20]
 800daa2:	7823      	ldrb	r3, [r4, #0]
 800daa4:	762b      	strb	r3, [r5, #24]
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800daa6:	4880      	ldr	r0, [pc, #512]	; (800dca8 <read_LP+0x2f4>)
 800daa8:	f7f2 fb9c 	bl	80001e4 <strlen>
 800daac:	4603      	mov	r3, r0
 800daae:	b29b      	uxth	r3, r3
 800dab0:	4619      	mov	r1, r3
 800dab2:	487d      	ldr	r0, [pc, #500]	; (800dca8 <read_LP+0x2f4>)
 800dab4:	f7fa fc44 	bl	8008340 <tx_com>
 800dab8:	e074      	b.n	800dba4 <read_LP+0x1f0>
				  }
				  else {
					  if(!onlineMode){
 800daba:	4b7d      	ldr	r3, [pc, #500]	; (800dcb0 <read_LP+0x2fc>)
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	f083 0301 	eor.w	r3, r3, #1
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d062      	beq.n	800db8e <read_LP+0x1da>
						  if(typemeter==6) sprintf(buffer, "lpmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800dac8:	4b75      	ldr	r3, [pc, #468]	; (800dca0 <read_LP+0x2ec>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b06      	cmp	r3, #6
 800dace:	d111      	bne.n	800daf4 <read_LP+0x140>
 800dad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dad4:	789b      	ldrb	r3, [r3, #2]
 800dad6:	461a      	mov	r2, r3
 800dad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dadc:	785b      	ldrb	r3, [r3, #1]
 800dade:	4619      	mov	r1, r3
 800dae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dae4:	78db      	ldrb	r3, [r3, #3]
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	460b      	mov	r3, r1
 800daea:	4972      	ldr	r1, [pc, #456]	; (800dcb4 <read_LP+0x300>)
 800daec:	4872      	ldr	r0, [pc, #456]	; (800dcb8 <read_LP+0x304>)
 800daee:	f00e f973 	bl	801bdd8 <siprintf>
 800daf2:	e010      	b.n	800db16 <read_LP+0x162>
						  else sprintf(buffer, "lpmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800daf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800daf8:	789b      	ldrb	r3, [r3, #2]
 800dafa:	461a      	mov	r2, r3
 800dafc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	4619      	mov	r1, r3
 800db04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db08:	78db      	ldrb	r3, [r3, #3]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	460b      	mov	r3, r1
 800db0e:	496b      	ldr	r1, [pc, #428]	; (800dcbc <read_LP+0x308>)
 800db10:	4869      	ldr	r0, [pc, #420]	; (800dcb8 <read_LP+0x304>)
 800db12:	f00e f961 	bl	801bdd8 <siprintf>
						    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800db16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db1a:	2233      	movs	r2, #51	; 0x33
 800db1c:	4966      	ldr	r1, [pc, #408]	; (800dcb8 <read_LP+0x304>)
 800db1e:	4618      	mov	r0, r3
 800db20:	f009 fbee 	bl	8017300 <f_open>
 800db24:	4603      	mov	r3, r0
 800db26:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
						    if(fresult_t != FR_OK)
 800db2a:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d015      	beq.n	800db5e <read_LP+0x1aa>
						    {
						    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800db32:	4a5d      	ldr	r2, [pc, #372]	; (800dca8 <read_LP+0x2f4>)
 800db34:	4b62      	ldr	r3, [pc, #392]	; (800dcc0 <read_LP+0x30c>)
 800db36:	4615      	mov	r5, r2
 800db38:	461c      	mov	r4, r3
 800db3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db3c:	6028      	str	r0, [r5, #0]
 800db3e:	6069      	str	r1, [r5, #4]
 800db40:	60aa      	str	r2, [r5, #8]
 800db42:	60eb      	str	r3, [r5, #12]
 800db44:	6820      	ldr	r0, [r4, #0]
 800db46:	6128      	str	r0, [r5, #16]
 800db48:	7923      	ldrb	r3, [r4, #4]
 800db4a:	752b      	strb	r3, [r5, #20]
						    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800db4c:	4856      	ldr	r0, [pc, #344]	; (800dca8 <read_LP+0x2f4>)
 800db4e:	f7f2 fb49 	bl	80001e4 <strlen>
 800db52:	4603      	mov	r3, r0
 800db54:	b29b      	uxth	r3, r3
 800db56:	4619      	mov	r1, r3
 800db58:	4853      	ldr	r0, [pc, #332]	; (800dca8 <read_LP+0x2f4>)
 800db5a:	f7fa fbf1 	bl	8008340 <tx_com>
						    }
						  // Write some text
						fresult = f_puts(mydata, &fil_t);
 800db5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db62:	4619      	mov	r1, r3
 800db64:	4857      	ldr	r0, [pc, #348]	; (800dcc4 <read_LP+0x310>)
 800db66:	f00a fb58 	bl	801821a <f_puts>
 800db6a:	4603      	mov	r3, r0
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	4b56      	ldr	r3, [pc, #344]	; (800dcc8 <read_LP+0x314>)
 800db70:	701a      	strb	r2, [r3, #0]
						  // Close file
						printf(buffer);
 800db72:	4851      	ldr	r0, [pc, #324]	; (800dcb8 <read_LP+0x304>)
 800db74:	f00e f8a4 	bl	801bcc0 <iprintf>
						printf(" created and data written\r\n");
 800db78:	4854      	ldr	r0, [pc, #336]	; (800dccc <read_LP+0x318>)
 800db7a:	f00e f915 	bl	801bda8 <puts>
						f_close(&fil_t);
 800db7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db82:	4618      	mov	r0, r3
 800db84:	f00a f9a9 	bl	8017eda <f_close>
						onlineMode = true;
 800db88:	4b49      	ldr	r3, [pc, #292]	; (800dcb0 <read_LP+0x2fc>)
 800db8a:	2201      	movs	r2, #1
 800db8c:	701a      	strb	r2, [r3, #0]
					  }
					f_mount(0, "", 0);
 800db8e:	2200      	movs	r2, #0
 800db90:	494f      	ldr	r1, [pc, #316]	; (800dcd0 <read_LP+0x31c>)
 800db92:	2000      	movs	r0, #0
 800db94:	f009 fb50 	bl	8017238 <f_mount>
 800db98:	e004      	b.n	800dba4 <read_LP+0x1f0>
				  }
				  }
				  else cnt_lp++;
 800db9a:	4b4e      	ldr	r3, [pc, #312]	; (800dcd4 <read_LP+0x320>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	4a4c      	ldr	r2, [pc, #304]	; (800dcd4 <read_LP+0x320>)
 800dba2:	6013      	str	r3, [r2, #0]
				  osMutexRelease(myMutex01Handle);
 800dba4:	4b3a      	ldr	r3, [pc, #232]	; (800dc90 <read_LP+0x2dc>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f00a fe4b 	bl	8018844 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800dbae:	463b      	mov	r3, r7
 800dbb0:	2264      	movs	r2, #100	; 0x64
 800dbb2:	2106      	movs	r1, #6
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f00a fd93 	bl	80186e0 <osSignalWait>
				osSignalSet( readLPHandle, BIT_1);
 800dbba:	4b47      	ldr	r3, [pc, #284]	; (800dcd8 <read_LP+0x324>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2102      	movs	r1, #2
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f00a fd4d 	bl	8018660 <osSignalSet>
				osDelay(900);
 800dbc6:	f44f 7061 	mov.w	r0, #900	; 0x384
 800dbca:	f00a fd35 	bl	8018638 <osDelay>
			  if(status_mutex == osOK)
 800dbce:	e10b      	b.n	800dde8 <read_LP+0x434>
			  }
//				osDelay(MINUTES);
		  }
			  else if(cnt_lp>0){
 800dbd0:	4b40      	ldr	r3, [pc, #256]	; (800dcd4 <read_LP+0x320>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f340 8107 	ble.w	800dde8 <read_LP+0x434>
				  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800dbda:	4b2d      	ldr	r3, [pc, #180]	; (800dc90 <read_LP+0x2dc>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f04f 31ff 	mov.w	r1, #4294967295
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f00a fde0 	bl	80187a8 <osMutexWait>
 800dbe8:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
				  printf("In: LP resend %d\n",cnt_lp);
 800dbec:	4b39      	ldr	r3, [pc, #228]	; (800dcd4 <read_LP+0x320>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	483a      	ldr	r0, [pc, #232]	; (800dcdc <read_LP+0x328>)
 800dbf4:	f00e f864 	bl	801bcc0 <iprintf>
				  if(status_mutex == osOK)
 800dbf8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 80f3 	bne.w	800dde8 <read_LP+0x434>
				  {
					  if(pwr_vmon==1){
 800dc02:	4b25      	ldr	r3, [pc, #148]	; (800dc98 <read_LP+0x2e4>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	f040 80d9 	bne.w	800ddbe <read_LP+0x40a>
						  cnt_lp--;
 800dc0c:	4b31      	ldr	r3, [pc, #196]	; (800dcd4 <read_LP+0x320>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	4a30      	ldr	r2, [pc, #192]	; (800dcd4 <read_LP+0x320>)
 800dc14:	6013      	str	r3, [r2, #0]
						  if(!uart2busy){
 800dc16:	4b21      	ldr	r3, [pc, #132]	; (800dc9c <read_LP+0x2e8>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	f083 0301 	eor.w	r3, r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00b      	beq.n	800dc3c <read_LP+0x288>
							  uart2busy = true;
 800dc24:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <read_LP+0x2e8>)
 800dc26:	2201      	movs	r2, #1
 800dc28:	701a      	strb	r2, [r3, #0]
							  //			  	  if(!usemqtt)  setup_modem();
							  //			  	  setup_modem();
							  //				  read_lp_mk6n();
							  if(typemeter==10) read_lp_mk10e();
 800dc2a:	4b1d      	ldr	r3, [pc, #116]	; (800dca0 <read_LP+0x2ec>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b0a      	cmp	r3, #10
 800dc30:	d102      	bne.n	800dc38 <read_LP+0x284>
 800dc32:	f7fd fadd 	bl	800b1f0 <read_lp_mk10e>
 800dc36:	e001      	b.n	800dc3c <read_LP+0x288>
							  else read_lp_mk6n();
 800dc38:	f7fc fbe4 	bl	800a404 <read_lp_mk6n>
						  }
					  // Open file to write/create if not exist
					  fresult_t = f_mount(&fs_t, "/", 1);
 800dc3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800dc40:	2201      	movs	r2, #1
 800dc42:	4918      	ldr	r1, [pc, #96]	; (800dca4 <read_LP+0x2f0>)
 800dc44:	4618      	mov	r0, r3
 800dc46:	f009 faf7 	bl	8017238 <f_mount>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
					  if(fresult_t != FR_OK)
 800dc50:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d043      	beq.n	800dce0 <read_LP+0x32c>
					  {
						  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800dc58:	4a13      	ldr	r2, [pc, #76]	; (800dca8 <read_LP+0x2f4>)
 800dc5a:	4b14      	ldr	r3, [pc, #80]	; (800dcac <read_LP+0x2f8>)
 800dc5c:	4615      	mov	r5, r2
 800dc5e:	461c      	mov	r4, r3
 800dc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc62:	6028      	str	r0, [r5, #0]
 800dc64:	6069      	str	r1, [r5, #4]
 800dc66:	60aa      	str	r2, [r5, #8]
 800dc68:	60eb      	str	r3, [r5, #12]
 800dc6a:	cc03      	ldmia	r4!, {r0, r1}
 800dc6c:	6128      	str	r0, [r5, #16]
 800dc6e:	6169      	str	r1, [r5, #20]
 800dc70:	7823      	ldrb	r3, [r4, #0]
 800dc72:	762b      	strb	r3, [r5, #24]
						  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800dc74:	480c      	ldr	r0, [pc, #48]	; (800dca8 <read_LP+0x2f4>)
 800dc76:	f7f2 fab5 	bl	80001e4 <strlen>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4619      	mov	r1, r3
 800dc80:	4809      	ldr	r0, [pc, #36]	; (800dca8 <read_LP+0x2f4>)
 800dc82:	f7fa fb5d 	bl	8008340 <tx_com>
 800dc86:	e09a      	b.n	800ddbe <read_LP+0x40a>
 800dc88:	20008190 	.word	0x20008190
 800dc8c:	20000644 	.word	0x20000644
 800dc90:	2000afa4 	.word	0x2000afa4
 800dc94:	0801f388 	.word	0x0801f388
 800dc98:	2000b510 	.word	0x2000b510
 800dc9c:	2000b004 	.word	0x2000b004
 800dca0:	2000b50c 	.word	0x2000b50c
 800dca4:	0801e4e8 	.word	0x0801e4e8
 800dca8:	200068bc 	.word	0x200068bc
 800dcac:	0801ed58 	.word	0x0801ed58
 800dcb0:	20000013 	.word	0x20000013
 800dcb4:	0801f3b0 	.word	0x0801f3b0
 800dcb8:	20007248 	.word	0x20007248
 800dcbc:	0801f3c4 	.word	0x0801f3c4
 800dcc0:	0801ed94 	.word	0x0801ed94
 800dcc4:	200046c8 	.word	0x200046c8
 800dcc8:	20009058 	.word	0x20009058
 800dccc:	0801f36c 	.word	0x0801f36c
 800dcd0:	0801effc 	.word	0x0801effc
 800dcd4:	20000640 	.word	0x20000640
 800dcd8:	200046c4 	.word	0x200046c4
 800dcdc:	0801f3dc 	.word	0x0801f3dc
					  }
					  else {
						  if(!onlineMode){
 800dce0:	4b44      	ldr	r3, [pc, #272]	; (800ddf4 <read_LP+0x440>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	f083 0301 	eor.w	r3, r3, #1
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d062      	beq.n	800ddb4 <read_LP+0x400>
							  if(typemeter == 6) sprintf(buffer, "lpmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800dcee:	4b42      	ldr	r3, [pc, #264]	; (800ddf8 <read_LP+0x444>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b06      	cmp	r3, #6
 800dcf4:	d111      	bne.n	800dd1a <read_LP+0x366>
 800dcf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcfa:	789b      	ldrb	r3, [r3, #2]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd02:	785b      	ldrb	r3, [r3, #1]
 800dd04:	4619      	mov	r1, r3
 800dd06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd0a:	78db      	ldrb	r3, [r3, #3]
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	493a      	ldr	r1, [pc, #232]	; (800ddfc <read_LP+0x448>)
 800dd12:	483b      	ldr	r0, [pc, #236]	; (800de00 <read_LP+0x44c>)
 800dd14:	f00e f860 	bl	801bdd8 <siprintf>
 800dd18:	e010      	b.n	800dd3c <read_LP+0x388>
							  else sprintf(buffer, "lpmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800dd1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd1e:	789b      	ldrb	r3, [r3, #2]
 800dd20:	461a      	mov	r2, r3
 800dd22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd26:	785b      	ldrb	r3, [r3, #1]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd2e:	78db      	ldrb	r3, [r3, #3]
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	460b      	mov	r3, r1
 800dd34:	4933      	ldr	r1, [pc, #204]	; (800de04 <read_LP+0x450>)
 800dd36:	4832      	ldr	r0, [pc, #200]	; (800de00 <read_LP+0x44c>)
 800dd38:	f00e f84e 	bl	801bdd8 <siprintf>
							    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800dd3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd40:	2233      	movs	r2, #51	; 0x33
 800dd42:	492f      	ldr	r1, [pc, #188]	; (800de00 <read_LP+0x44c>)
 800dd44:	4618      	mov	r0, r3
 800dd46:	f009 fadb 	bl	8017300 <f_open>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
							    if(fresult_t != FR_OK)
 800dd50:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d015      	beq.n	800dd84 <read_LP+0x3d0>
							    {
							    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800dd58:	4a2b      	ldr	r2, [pc, #172]	; (800de08 <read_LP+0x454>)
 800dd5a:	4b2c      	ldr	r3, [pc, #176]	; (800de0c <read_LP+0x458>)
 800dd5c:	4615      	mov	r5, r2
 800dd5e:	461c      	mov	r4, r3
 800dd60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd62:	6028      	str	r0, [r5, #0]
 800dd64:	6069      	str	r1, [r5, #4]
 800dd66:	60aa      	str	r2, [r5, #8]
 800dd68:	60eb      	str	r3, [r5, #12]
 800dd6a:	6820      	ldr	r0, [r4, #0]
 800dd6c:	6128      	str	r0, [r5, #16]
 800dd6e:	7923      	ldrb	r3, [r4, #4]
 800dd70:	752b      	strb	r3, [r5, #20]
							    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800dd72:	4825      	ldr	r0, [pc, #148]	; (800de08 <read_LP+0x454>)
 800dd74:	f7f2 fa36 	bl	80001e4 <strlen>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4822      	ldr	r0, [pc, #136]	; (800de08 <read_LP+0x454>)
 800dd80:	f7fa fade 	bl	8008340 <tx_com>
							    }
							  // Write some text
							fresult = f_puts(mydata, &fil_t);
 800dd84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd88:	4619      	mov	r1, r3
 800dd8a:	4821      	ldr	r0, [pc, #132]	; (800de10 <read_LP+0x45c>)
 800dd8c:	f00a fa45 	bl	801821a <f_puts>
 800dd90:	4603      	mov	r3, r0
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	4b1f      	ldr	r3, [pc, #124]	; (800de14 <read_LP+0x460>)
 800dd96:	701a      	strb	r2, [r3, #0]
							  // Close file
							printf(buffer);
 800dd98:	4819      	ldr	r0, [pc, #100]	; (800de00 <read_LP+0x44c>)
 800dd9a:	f00d ff91 	bl	801bcc0 <iprintf>
							printf(" created and data written\r\n");
 800dd9e:	481e      	ldr	r0, [pc, #120]	; (800de18 <read_LP+0x464>)
 800dda0:	f00e f802 	bl	801bda8 <puts>
							f_close(&fil_t);
 800dda4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f00a f896 	bl	8017eda <f_close>
							onlineMode = true;
 800ddae:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <read_LP+0x440>)
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	701a      	strb	r2, [r3, #0]
						  }
						f_mount(0, "", 0);
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4919      	ldr	r1, [pc, #100]	; (800de1c <read_LP+0x468>)
 800ddb8:	2000      	movs	r0, #0
 800ddba:	f009 fa3d 	bl	8017238 <f_mount>
					  }
					  }
					  osMutexRelease(myMutex01Handle);
 800ddbe:	4b18      	ldr	r3, [pc, #96]	; (800de20 <read_LP+0x46c>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f00a fd3e 	bl	8018844 <osMutexRelease>
					osSignalWait( BIT_1 | BIT_2, 100);
 800ddc8:	463b      	mov	r3, r7
 800ddca:	2264      	movs	r2, #100	; 0x64
 800ddcc:	2106      	movs	r1, #6
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f00a fc86 	bl	80186e0 <osSignalWait>
					osSignalSet( readLPHandle, BIT_1);
 800ddd4:	4b13      	ldr	r3, [pc, #76]	; (800de24 <read_LP+0x470>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2102      	movs	r1, #2
 800ddda:	4618      	mov	r0, r3
 800dddc:	f00a fc40 	bl	8018660 <osSignalSet>
					osDelay(900);
 800dde0:	f44f 7061 	mov.w	r0, #900	; 0x384
 800dde4:	f00a fc28 	bl	8018638 <osDelay>
				  }
			  }
			  secmin1 = gTime.Seconds;
 800dde8:	f107 0318 	add.w	r3, r7, #24
 800ddec:	789b      	ldrb	r3, [r3, #2]
 800ddee:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800ddf2:	e5e6      	b.n	800d9c2 <read_LP+0xe>
 800ddf4:	20000013 	.word	0x20000013
 800ddf8:	2000b50c 	.word	0x2000b50c
 800ddfc:	0801f3b0 	.word	0x0801f3b0
 800de00:	20007248 	.word	0x20007248
 800de04:	0801f3c4 	.word	0x0801f3c4
 800de08:	200068bc 	.word	0x200068bc
 800de0c:	0801ed94 	.word	0x0801ed94
 800de10:	200046c8 	.word	0x200046c8
 800de14:	20009058 	.word	0x20009058
 800de18:	0801f36c 	.word	0x0801f36c
 800de1c:	0801effc 	.word	0x0801effc
 800de20:	2000afa4 	.word	0x2000afa4
 800de24:	200046c4 	.word	0x200046c4

0800de28 <read_instant>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_instant */
void read_instant(void const * argument)
{
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800de2e:	af02      	add	r7, sp, #8
 800de30:	f107 0314 	add.w	r3, r7, #20
 800de34:	6018      	str	r0, [r3, #0]
  for(;;)
  {
//	  status_delay = osDelay(SECOND);
//	  if(status_delay == osOK)
//	  {
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800de36:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800de3a:	2200      	movs	r2, #0
 800de3c:	4619      	mov	r1, r3
 800de3e:	4883      	ldr	r0, [pc, #524]	; (800e04c <read_instant+0x224>)
 800de40:	f004 ff47 	bl	8012cd2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800de44:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800de48:	2200      	movs	r2, #0
 800de4a:	4619      	mov	r1, r3
 800de4c:	487f      	ldr	r0, [pc, #508]	; (800e04c <read_instant+0x224>)
 800de4e:	f004 fe5d 	bl	8012b0c <HAL_RTC_GetTime>
	//	  if((gTime.Hours == 1 || gTime.Hours == 13) && gTime.Minutes == 0 && gTime.Seconds == 0)
//		  if(gTime.Seconds > secmin1) printf(" Instant ");
		  if((gTime.Hours == instant_hour || gTime.Hours == 7 || gTime.Hours == 19) && (gTime.Minutes == 0 || gTime.Minutes == instant_minute ) && gTime.Seconds == 10)
 800de52:	f897 2480 	ldrb.w	r2, [r7, #1152]	; 0x480
 800de56:	4b7e      	ldr	r3, [pc, #504]	; (800e050 <read_instant+0x228>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d008      	beq.n	800de70 <read_instant+0x48>
 800de5e:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800de62:	2b07      	cmp	r3, #7
 800de64:	d004      	beq.n	800de70 <read_instant+0x48>
 800de66:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800de6a:	2b13      	cmp	r3, #19
 800de6c:	f040 80e9 	bne.w	800e042 <read_instant+0x21a>
 800de70:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 800de74:	2b00      	cmp	r3, #0
 800de76:	d006      	beq.n	800de86 <read_instant+0x5e>
 800de78:	f897 2481 	ldrb.w	r2, [r7, #1153]	; 0x481
 800de7c:	4b75      	ldr	r3, [pc, #468]	; (800e054 <read_instant+0x22c>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	429a      	cmp	r2, r3
 800de82:	f040 80de 	bne.w	800e042 <read_instant+0x21a>
 800de86:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800de8a:	2b0a      	cmp	r3, #10
 800de8c:	f040 80d9 	bne.w	800e042 <read_instant+0x21a>
		  {
			  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800de90:	4b71      	ldr	r3, [pc, #452]	; (800e058 <read_instant+0x230>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f04f 31ff 	mov.w	r1, #4294967295
 800de98:	4618      	mov	r0, r3
 800de9a:	f00a fc85 	bl	80187a8 <osMutexWait>
 800de9e:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
			  printf("In: if gTime.Minutes == 16 Instant\n");
 800dea2:	486e      	ldr	r0, [pc, #440]	; (800e05c <read_instant+0x234>)
 800dea4:	f00d ff80 	bl	801bda8 <puts>
			  if(status_mutex == osOK)
 800dea8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800deac:	2b00      	cmp	r3, #0
 800deae:	f040 80c8 	bne.w	800e042 <read_instant+0x21a>
			  {
				  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800deb2:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800deb6:	2200      	movs	r2, #0
 800deb8:	4619      	mov	r1, r3
 800deba:	4864      	ldr	r0, [pc, #400]	; (800e04c <read_instant+0x224>)
 800debc:	f004 ff09 	bl	8012cd2 <HAL_RTC_GetDate>
				  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800dec0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800dec4:	2200      	movs	r2, #0
 800dec6:	4619      	mov	r1, r3
 800dec8:	4860      	ldr	r0, [pc, #384]	; (800e04c <read_instant+0x224>)
 800deca:	f004 fe1f 	bl	8012b0c <HAL_RTC_GetTime>
//				  printf("InsDate: %d-%d-%d, %2d:%2d:%2d \n", gDate.Date, gDate.Month, gDate.Year, gTime.Hours, gTime.Minutes, gTime.Seconds);
				  fresult_t = f_mount(&fs_t, "/", 1);
 800dece:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800ded2:	2201      	movs	r2, #1
 800ded4:	4962      	ldr	r1, [pc, #392]	; (800e060 <read_instant+0x238>)
 800ded6:	4618      	mov	r0, r3
 800ded8:	f009 f9ae 	bl	8017238 <f_mount>
 800dedc:	4603      	mov	r3, r0
 800dede:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  if(fresult_t != FR_OK)
 800dee2:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d016      	beq.n	800df18 <read_instant+0xf0>
				  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800deea:	4a5e      	ldr	r2, [pc, #376]	; (800e064 <read_instant+0x23c>)
 800deec:	4b5e      	ldr	r3, [pc, #376]	; (800e068 <read_instant+0x240>)
 800deee:	4615      	mov	r5, r2
 800def0:	461c      	mov	r4, r3
 800def2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800def4:	6028      	str	r0, [r5, #0]
 800def6:	6069      	str	r1, [r5, #4]
 800def8:	60aa      	str	r2, [r5, #8]
 800defa:	60eb      	str	r3, [r5, #12]
 800defc:	cc03      	ldmia	r4!, {r0, r1}
 800defe:	6128      	str	r0, [r5, #16]
 800df00:	6169      	str	r1, [r5, #20]
 800df02:	7823      	ldrb	r3, [r4, #0]
 800df04:	762b      	strb	r3, [r5, #24]
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800df06:	4857      	ldr	r0, [pc, #348]	; (800e064 <read_instant+0x23c>)
 800df08:	f7f2 f96c 	bl	80001e4 <strlen>
 800df0c:	4603      	mov	r3, r0
 800df0e:	b29b      	uxth	r3, r3
 800df10:	4619      	mov	r1, r3
 800df12:	4854      	ldr	r0, [pc, #336]	; (800e064 <read_instant+0x23c>)
 800df14:	f7fa fa14 	bl	8008340 <tx_com>
				  }
				  if(pwr_vmon==1){
 800df18:	4b54      	ldr	r3, [pc, #336]	; (800e06c <read_instant+0x244>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d176      	bne.n	800e00e <read_instant+0x1e6>
				    	if(!uart2busy){
 800df20:	4b53      	ldr	r3, [pc, #332]	; (800e070 <read_instant+0x248>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f083 0301 	eor.w	r3, r3, #1
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00b      	beq.n	800df46 <read_instant+0x11e>
				    		uart2busy = true;
 800df2e:	4b50      	ldr	r3, [pc, #320]	; (800e070 <read_instant+0x248>)
 800df30:	2201      	movs	r2, #1
 800df32:	701a      	strb	r2, [r3, #0]
					  //			  	  if(!usemqtt)  setup_modem();
					  //			  	  setup_modem();
					  //				  read_instant_mk6n();
				    		if(typemeter==10) read_instant_mk10e();
 800df34:	4b4f      	ldr	r3, [pc, #316]	; (800e074 <read_instant+0x24c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b0a      	cmp	r3, #10
 800df3a:	d102      	bne.n	800df42 <read_instant+0x11a>
 800df3c:	f7fc fdf8 	bl	800ab30 <read_instant_mk10e>
 800df40:	e001      	b.n	800df46 <read_instant+0x11e>
				    		else read_instant_mk6n();
 800df42:	f7fb fee1 	bl	8009d08 <read_instant_mk6n>
				    	}
//				  timestamp_now = 12345678;
//				  timestamp_now = 12345678;
				  if(!onlineMode){
 800df46:	4b4c      	ldr	r3, [pc, #304]	; (800e078 <read_instant+0x250>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	f083 0301 	eor.w	r3, r3, #1
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d05c      	beq.n	800e00e <read_instant+0x1e6>
					  if(typemeter == 6) sprintf(buffer, "instantmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800df54:	4b47      	ldr	r3, [pc, #284]	; (800e074 <read_instant+0x24c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b06      	cmp	r3, #6
 800df5a:	d10e      	bne.n	800df7a <read_instant+0x152>
 800df5c:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800df60:	461a      	mov	r2, r3
 800df62:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800df66:	4619      	mov	r1, r3
 800df68:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	460b      	mov	r3, r1
 800df70:	4942      	ldr	r1, [pc, #264]	; (800e07c <read_instant+0x254>)
 800df72:	4843      	ldr	r0, [pc, #268]	; (800e080 <read_instant+0x258>)
 800df74:	f00d ff30 	bl	801bdd8 <siprintf>
 800df78:	e00d      	b.n	800df96 <read_instant+0x16e>
					  else sprintf(buffer, "instantmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800df7a:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800df7e:	461a      	mov	r2, r3
 800df80:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800df84:	4619      	mov	r1, r3
 800df86:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	460b      	mov	r3, r1
 800df8e:	493d      	ldr	r1, [pc, #244]	; (800e084 <read_instant+0x25c>)
 800df90:	483b      	ldr	r0, [pc, #236]	; (800e080 <read_instant+0x258>)
 800df92:	f00d ff21 	bl	801bdd8 <siprintf>
					    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800df96:	f107 0318 	add.w	r3, r7, #24
 800df9a:	2233      	movs	r2, #51	; 0x33
 800df9c:	4938      	ldr	r1, [pc, #224]	; (800e080 <read_instant+0x258>)
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f009 f9ae 	bl	8017300 <f_open>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
					    if(fresult_t != FR_OK)
 800dfaa:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d015      	beq.n	800dfde <read_instant+0x1b6>
					    {
					    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800dfb2:	4a2c      	ldr	r2, [pc, #176]	; (800e064 <read_instant+0x23c>)
 800dfb4:	4b34      	ldr	r3, [pc, #208]	; (800e088 <read_instant+0x260>)
 800dfb6:	4615      	mov	r5, r2
 800dfb8:	461c      	mov	r4, r3
 800dfba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfbc:	6028      	str	r0, [r5, #0]
 800dfbe:	6069      	str	r1, [r5, #4]
 800dfc0:	60aa      	str	r2, [r5, #8]
 800dfc2:	60eb      	str	r3, [r5, #12]
 800dfc4:	6820      	ldr	r0, [r4, #0]
 800dfc6:	6128      	str	r0, [r5, #16]
 800dfc8:	7923      	ldrb	r3, [r4, #4]
 800dfca:	752b      	strb	r3, [r5, #20]
					    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800dfcc:	4825      	ldr	r0, [pc, #148]	; (800e064 <read_instant+0x23c>)
 800dfce:	f7f2 f909 	bl	80001e4 <strlen>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4822      	ldr	r0, [pc, #136]	; (800e064 <read_instant+0x23c>)
 800dfda:	f7fa f9b1 	bl	8008340 <tx_com>
					    }
					  // Write some text
					fresult = f_puts(mydata, &fil_t);
 800dfde:	f107 0318 	add.w	r3, r7, #24
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4829      	ldr	r0, [pc, #164]	; (800e08c <read_instant+0x264>)
 800dfe6:	f00a f918 	bl	801821a <f_puts>
 800dfea:	4603      	mov	r3, r0
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	4b28      	ldr	r3, [pc, #160]	; (800e090 <read_instant+0x268>)
 800dff0:	701a      	strb	r2, [r3, #0]
					  // Close file
					printf(buffer);
 800dff2:	4823      	ldr	r0, [pc, #140]	; (800e080 <read_instant+0x258>)
 800dff4:	f00d fe64 	bl	801bcc0 <iprintf>
					printf(" created and data written\r\n");
 800dff8:	4826      	ldr	r0, [pc, #152]	; (800e094 <read_instant+0x26c>)
 800dffa:	f00d fed5 	bl	801bda8 <puts>
					f_close(&fil_t);
 800dffe:	f107 0318 	add.w	r3, r7, #24
 800e002:	4618      	mov	r0, r3
 800e004:	f009 ff69 	bl	8017eda <f_close>
					onlineMode = true;
 800e008:	4b1b      	ldr	r3, [pc, #108]	; (800e078 <read_instant+0x250>)
 800e00a:	2201      	movs	r2, #1
 800e00c:	701a      	strb	r2, [r3, #0]
				}
				  }
				f_mount(0, "", 0);
 800e00e:	2200      	movs	r2, #0
 800e010:	4921      	ldr	r1, [pc, #132]	; (800e098 <read_instant+0x270>)
 800e012:	2000      	movs	r0, #0
 800e014:	f009 f910 	bl	8017238 <f_mount>
//				uart2busy = false;
				osMutexRelease(myMutex01Handle);
 800e018:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <read_instant+0x230>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f00a fc11 	bl	8018844 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800e022:	463b      	mov	r3, r7
 800e024:	2264      	movs	r2, #100	; 0x64
 800e026:	2106      	movs	r1, #6
 800e028:	4618      	mov	r0, r3
 800e02a:	f00a fb59 	bl	80186e0 <osSignalWait>
				osSignalSet( readInstantHandle, BIT_1);
 800e02e:	4b1b      	ldr	r3, [pc, #108]	; (800e09c <read_instant+0x274>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2102      	movs	r1, #2
 800e034:	4618      	mov	r0, r3
 800e036:	f00a fb13 	bl	8018660 <osSignalSet>
				osDelay(900);
 800e03a:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e03e:	f00a fafb 	bl	8018638 <osDelay>
			  }
		  }
		  secmin1 = gTime.Seconds;
 800e042:	f897 2482 	ldrb.w	r2, [r7, #1154]	; 0x482
 800e046:	4b16      	ldr	r3, [pc, #88]	; (800e0a0 <read_instant+0x278>)
 800e048:	701a      	strb	r2, [r3, #0]
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800e04a:	e6f4      	b.n	800de36 <read_instant+0xe>
 800e04c:	20008190 	.word	0x20008190
 800e050:	20008184 	.word	0x20008184
 800e054:	200081ba 	.word	0x200081ba
 800e058:	2000afa4 	.word	0x2000afa4
 800e05c:	0801f3f0 	.word	0x0801f3f0
 800e060:	0801e4e8 	.word	0x0801e4e8
 800e064:	200068bc 	.word	0x200068bc
 800e068:	0801ed58 	.word	0x0801ed58
 800e06c:	2000b510 	.word	0x2000b510
 800e070:	2000b004 	.word	0x2000b004
 800e074:	2000b50c 	.word	0x2000b50c
 800e078:	20000013 	.word	0x20000013
 800e07c:	0801f414 	.word	0x0801f414
 800e080:	20007248 	.word	0x20007248
 800e084:	0801f430 	.word	0x0801f430
 800e088:	0801ed94 	.word	0x0801ed94
 800e08c:	200046c8 	.word	0x200046c8
 800e090:	20009058 	.word	0x20009058
 800e094:	0801f36c 	.word	0x0801f36c
 800e098:	0801effc 	.word	0x0801effc
 800e09c:	2000646c 	.word	0x2000646c
 800e0a0:	20006468 	.word	0x20006468

0800e0a4 <send_hard_bit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_hard_bit */
void send_hard_bit(void const * argument)
{
 800e0a4:	b5b0      	push	{r4, r5, r7, lr}
 800e0a6:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	1d3b      	adds	r3, r7, #4
 800e0ae:	6018      	str	r0, [r3, #0]
	  RTC_TimeTypeDef gTime;
	  FATFS fs_t;
	  FIL fil_t;
	  FRESULT fresult_t;

	  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800e0b0:	4b54      	ldr	r3, [pc, #336]	; (800e204 <send_hard_bit+0x160>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f04f 31ff 	mov.w	r1, #4294967295
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f00a fb75 	bl	80187a8 <osMutexWait>
 800e0be:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	    if(status_mutex == osOK)
 800e0c2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f040 809a 	bne.w	800e200 <send_hard_bit+0x15c>
	    {
	  	  fresult_t = f_mount(&fs_t, "/", 1);
 800e0cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	494d      	ldr	r1, [pc, #308]	; (800e208 <send_hard_bit+0x164>)
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f009 f8af 	bl	8017238 <f_mount>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	  	  if(fresult_t != FR_OK)
 800e0e0:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d017      	beq.n	800e118 <send_hard_bit+0x74>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800e0e8:	4a48      	ldr	r2, [pc, #288]	; (800e20c <send_hard_bit+0x168>)
 800e0ea:	4b49      	ldr	r3, [pc, #292]	; (800e210 <send_hard_bit+0x16c>)
 800e0ec:	4615      	mov	r5, r2
 800e0ee:	461c      	mov	r4, r3
 800e0f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0f2:	6028      	str	r0, [r5, #0]
 800e0f4:	6069      	str	r1, [r5, #4]
 800e0f6:	60aa      	str	r2, [r5, #8]
 800e0f8:	60eb      	str	r3, [r5, #12]
 800e0fa:	cc03      	ldmia	r4!, {r0, r1}
 800e0fc:	6128      	str	r0, [r5, #16]
 800e0fe:	6169      	str	r1, [r5, #20]
 800e100:	7823      	ldrb	r3, [r4, #0]
 800e102:	762b      	strb	r3, [r5, #24]
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e104:	4841      	ldr	r0, [pc, #260]	; (800e20c <send_hard_bit+0x168>)
 800e106:	f7f2 f86d 	bl	80001e4 <strlen>
 800e10a:	4603      	mov	r3, r0
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	4619      	mov	r1, r3
 800e110:	483e      	ldr	r0, [pc, #248]	; (800e20c <send_hard_bit+0x168>)
 800e112:	f7fa f915 	bl	8008340 <tx_com>
 800e116:	e06e      	b.n	800e1f6 <send_hard_bit+0x152>
	  	  }
	  	  else
	  	  {
	  		  fresult_t = f_open(&fil_t, "config.txt", FA_READ );
 800e118:	f107 0308 	add.w	r3, r7, #8
 800e11c:	2201      	movs	r2, #1
 800e11e:	493d      	ldr	r1, [pc, #244]	; (800e214 <send_hard_bit+0x170>)
 800e120:	4618      	mov	r0, r3
 800e122:	f009 f8ed 	bl	8017300 <f_open>
 800e126:	4603      	mov	r3, r0
 800e128:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	  		  if(fresult_t != FR_OK)
 800e12c:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 800e130:	2b00      	cmp	r3, #0
 800e132:	d016      	beq.n	800e162 <send_hard_bit+0xbe>
	  		  {
	  			  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800e134:	4a35      	ldr	r2, [pc, #212]	; (800e20c <send_hard_bit+0x168>)
 800e136:	4b38      	ldr	r3, [pc, #224]	; (800e218 <send_hard_bit+0x174>)
 800e138:	4615      	mov	r5, r2
 800e13a:	461c      	mov	r4, r3
 800e13c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e13e:	6028      	str	r0, [r5, #0]
 800e140:	6069      	str	r1, [r5, #4]
 800e142:	60aa      	str	r2, [r5, #8]
 800e144:	60eb      	str	r3, [r5, #12]
 800e146:	6820      	ldr	r0, [r4, #0]
 800e148:	6128      	str	r0, [r5, #16]
 800e14a:	7923      	ldrb	r3, [r4, #4]
 800e14c:	752b      	strb	r3, [r5, #20]
	  			  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e14e:	482f      	ldr	r0, [pc, #188]	; (800e20c <send_hard_bit+0x168>)
 800e150:	f7f2 f848 	bl	80001e4 <strlen>
 800e154:	4603      	mov	r3, r0
 800e156:	b29b      	uxth	r3, r3
 800e158:	4619      	mov	r1, r3
 800e15a:	482c      	ldr	r0, [pc, #176]	; (800e20c <send_hard_bit+0x168>)
 800e15c:	f7fa f8f0 	bl	8008340 <tx_com>
 800e160:	e044      	b.n	800e1ec <send_hard_bit+0x148>
	  		  }
	  		  else
	  		  {
	  			  sprintf((char*)tx_buffer, "Heart Beat time configured\n");
 800e162:	4a2a      	ldr	r2, [pc, #168]	; (800e20c <send_hard_bit+0x168>)
 800e164:	4b2d      	ldr	r3, [pc, #180]	; (800e21c <send_hard_bit+0x178>)
 800e166:	4615      	mov	r5, r2
 800e168:	461c      	mov	r4, r3
 800e16a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e16c:	6028      	str	r0, [r5, #0]
 800e16e:	6069      	str	r1, [r5, #4]
 800e170:	60aa      	str	r2, [r5, #8]
 800e172:	60eb      	str	r3, [r5, #12]
 800e174:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e176:	6128      	str	r0, [r5, #16]
 800e178:	6169      	str	r1, [r5, #20]
 800e17a:	61aa      	str	r2, [r5, #24]
	  			  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e17c:	4823      	ldr	r0, [pc, #140]	; (800e20c <send_hard_bit+0x168>)
 800e17e:	f7f2 f831 	bl	80001e4 <strlen>
 800e182:	4603      	mov	r3, r0
 800e184:	b29b      	uxth	r3, r3
 800e186:	4619      	mov	r1, r3
 800e188:	4820      	ldr	r0, [pc, #128]	; (800e20c <send_hard_bit+0x168>)
 800e18a:	f7fa f8d9 	bl	8008340 <tx_com>
	  			  f_gets(buffer2, sizeof(buffer2), &fil_t);
 800e18e:	f107 0308 	add.w	r3, r7, #8
 800e192:	461a      	mov	r2, r3
 800e194:	f240 414c 	movw	r1, #1100	; 0x44c
 800e198:	4821      	ldr	r0, [pc, #132]	; (800e220 <send_hard_bit+0x17c>)
 800e19a:	f009 ff89 	bl	80180b0 <f_gets>
	  			  eob_hour = atoi(buffer2);
 800e19e:	4820      	ldr	r0, [pc, #128]	; (800e220 <send_hard_bit+0x17c>)
 800e1a0:	f00d f83c 	bl	801b21c <atoi>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	4b1e      	ldr	r3, [pc, #120]	; (800e224 <send_hard_bit+0x180>)
 800e1aa:	701a      	strb	r2, [r3, #0]
	  			  printf("\nEOB HOUR: %d\r\n", eob_hour);
 800e1ac:	4b1d      	ldr	r3, [pc, #116]	; (800e224 <send_hard_bit+0x180>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	481d      	ldr	r0, [pc, #116]	; (800e228 <send_hard_bit+0x184>)
 800e1b4:	f00d fd84 	bl	801bcc0 <iprintf>
	  			  f_gets(buffer2, sizeof(buffer2), &fil_t);
 800e1b8:	f107 0308 	add.w	r3, r7, #8
 800e1bc:	461a      	mov	r2, r3
 800e1be:	f240 414c 	movw	r1, #1100	; 0x44c
 800e1c2:	4817      	ldr	r0, [pc, #92]	; (800e220 <send_hard_bit+0x17c>)
 800e1c4:	f009 ff74 	bl	80180b0 <f_gets>
	  			  eob_minute = atoi(buffer2);
 800e1c8:	4815      	ldr	r0, [pc, #84]	; (800e220 <send_hard_bit+0x17c>)
 800e1ca:	f00d f827 	bl	801b21c <atoi>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	4b16      	ldr	r3, [pc, #88]	; (800e22c <send_hard_bit+0x188>)
 800e1d4:	701a      	strb	r2, [r3, #0]
	  			  printf("\nEOB MINUTE: %d\r\n", eob_minute);
 800e1d6:	4b15      	ldr	r3, [pc, #84]	; (800e22c <send_hard_bit+0x188>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	4619      	mov	r1, r3
 800e1dc:	4814      	ldr	r0, [pc, #80]	; (800e230 <send_hard_bit+0x18c>)
 800e1de:	f00d fd6f 	bl	801bcc0 <iprintf>
	  			  f_close(&fil_t);
 800e1e2:	f107 0308 	add.w	r3, r7, #8
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f009 fe77 	bl	8017eda <f_close>
	  		  }
	  		  f_mount(0, "", 0);
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4911      	ldr	r1, [pc, #68]	; (800e234 <send_hard_bit+0x190>)
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	f009 f821 	bl	8017238 <f_mount>
	  	  }
	  	osMutexRelease(myMutex01Handle);
 800e1f6:	4b03      	ldr	r3, [pc, #12]	; (800e204 <send_hard_bit+0x160>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f00a fb22 	bl	8018844 <osMutexRelease>
	    }
	  /* Infinite loop */
	  for(;;)
 800e200:	e7fe      	b.n	800e200 <send_hard_bit+0x15c>
 800e202:	bf00      	nop
 800e204:	2000afa4 	.word	0x2000afa4
 800e208:	0801e4e8 	.word	0x0801e4e8
 800e20c:	200068bc 	.word	0x200068bc
 800e210:	0801ed58 	.word	0x0801ed58
 800e214:	0801ef64 	.word	0x0801ef64
 800e218:	0801ed94 	.word	0x0801ed94
 800e21c:	0801f44c 	.word	0x0801f44c
 800e220:	20006d80 	.word	0x20006d80
 800e224:	200081bb 	.word	0x200081bb
 800e228:	0801f468 	.word	0x0801f468
 800e22c:	2000818c 	.word	0x2000818c
 800e230:	0801f478 	.word	0x0801f478
 800e234:	0801effc 	.word	0x0801effc

0800e238 <check_vbat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_check_vbat */
void check_vbat(void const * argument)
{
 800e238:	b590      	push	{r4, r7, lr}
 800e23a:	b089      	sub	sp, #36	; 0x24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_vbat */
	uint32_t adc1;
	int cnt=0;
 800e240:	2300      	movs	r3, #0
 800e242:	61fb      	str	r3, [r7, #28]
	float vbat_percen,counter,div;
  /* Infinite loop */

  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800e244:	482f      	ldr	r0, [pc, #188]	; (800e304 <check_vbat+0xcc>)
 800e246:	f000 ffc3 	bl	800f1d0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 800e24a:	2164      	movs	r1, #100	; 0x64
 800e24c:	482d      	ldr	r0, [pc, #180]	; (800e304 <check_vbat+0xcc>)
 800e24e:	f001 f855 	bl	800f2fc <HAL_ADC_PollForConversion>
	  adc1 = HAL_ADC_GetValue(&hadc1);
 800e252:	482c      	ldr	r0, [pc, #176]	; (800e304 <check_vbat+0xcc>)
 800e254:	f001 f8da 	bl	800f40c <HAL_ADC_GetValue>
 800e258:	6178      	str	r0, [r7, #20]
	  HAL_ADC_Stop(&hadc1);
 800e25a:	482a      	ldr	r0, [pc, #168]	; (800e304 <check_vbat+0xcc>)
 800e25c:	f001 f81b 	bl	800f296 <HAL_ADC_Stop>
	  counter = (float)(adc1 - 498);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	edc7 7a04 	vstr	s15, [r7, #16]
	  div = 640 - 498;
 800e272:	4b25      	ldr	r3, [pc, #148]	; (800e308 <check_vbat+0xd0>)
 800e274:	60fb      	str	r3, [r7, #12]
	  vbat_percen = counter/div*100;
 800e276:	edd7 6a04 	vldr	s13, [r7, #16]
 800e27a:	ed97 7a03 	vldr	s14, [r7, #12]
 800e27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e282:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e30c <check_vbat+0xd4>
 800e286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e28a:	edc7 7a06 	vstr	s15, [r7, #24]
	  vbat_percentage = vbat_percen;
 800e28e:	4a20      	ldr	r2, [pc, #128]	; (800e310 <check_vbat+0xd8>)
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	6013      	str	r3, [r2, #0]
//	  if(vbat_percen<0) vbat_percen=0;
	  if(vbat_percen>100 && vbat_percen<200) vbat_percen=100;
 800e294:	edd7 7a06 	vldr	s15, [r7, #24]
 800e298:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800e30c <check_vbat+0xd4>
 800e29c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a4:	dd0b      	ble.n	800e2be <check_vbat+0x86>
 800e2a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800e2aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e314 <check_vbat+0xdc>
 800e2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	d502      	bpl.n	800e2be <check_vbat+0x86>
 800e2b8:	4b17      	ldr	r3, [pc, #92]	; (800e318 <check_vbat+0xe0>)
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	e00b      	b.n	800e2d6 <check_vbat+0x9e>
	  else if(vbat_percen>=200) vbat_percen=0;
 800e2be:	edd7 7a06 	vldr	s15, [r7, #24]
 800e2c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e314 <check_vbat+0xdc>
 800e2c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ce:	db02      	blt.n	800e2d6 <check_vbat+0x9e>
 800e2d0:	f04f 0300 	mov.w	r3, #0
 800e2d4:	61bb      	str	r3, [r7, #24]
	  if(cnt>=5) {
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	2b04      	cmp	r3, #4
 800e2da:	dd0b      	ble.n	800e2f4 <check_vbat+0xbc>
		  printf("VBAT Percent: %.2f \r\n",vbat_percen);
 800e2dc:	69b8      	ldr	r0, [r7, #24]
 800e2de:	f7f2 f943 	bl	8000568 <__aeabi_f2d>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	4623      	mov	r3, r4
 800e2ea:	480c      	ldr	r0, [pc, #48]	; (800e31c <check_vbat+0xe4>)
 800e2ec:	f00d fce8 	bl	801bcc0 <iprintf>
		  cnt = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61fb      	str	r3, [r7, #28]
	  }
	  osDelay(1000);
 800e2f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e2f8:	f00a f99e 	bl	8018638 <osDelay>
	  cnt++;
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	3301      	adds	r3, #1
 800e300:	61fb      	str	r3, [r7, #28]
	  HAL_ADC_Start(&hadc1);
 800e302:	e79f      	b.n	800e244 <check_vbat+0xc>
 800e304:	20006d1c 	.word	0x20006d1c
 800e308:	430e0000 	.word	0x430e0000
 800e30c:	42c80000 	.word	0x42c80000
 800e310:	20005770 	.word	0x20005770
 800e314:	43480000 	.word	0x43480000
 800e318:	42c80000 	.word	0x42c80000
 800e31c:	0801f48c 	.word	0x0801f48c

0800e320 <check_vmon>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_check_vmon */
void check_vmon(void const * argument)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_vmon */
//	  osStatus status_mutex;
	uint8_t cnt=0;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
//	osDelay(3000);
  /* Infinite loop */
  for(;;)
  {
	  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800e32c:	2102      	movs	r1, #2
 800e32e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e332:	f001 ffd1 	bl	80102d8 <HAL_GPIO_ReadPin>
 800e336:	4603      	mov	r3, r0
 800e338:	461a      	mov	r2, r3
 800e33a:	4b05      	ldr	r3, [pc, #20]	; (800e350 <check_vmon+0x30>)
 800e33c:	701a      	strb	r2, [r3, #0]
//	    		uart2busy = false;
//			osMutexRelease(myMutex01Handle);
//			osSignalWait( BIT_1 | BIT_2, 1000);
//			osSignalSet( checkVMonHandle, BIT_1);
//		}
		osDelay(1000);
 800e33e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e342:	f00a f979 	bl	8018638 <osDelay>
		cnt++;
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	3301      	adds	r3, #1
 800e34a:	73fb      	strb	r3, [r7, #15]
	  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800e34c:	e7ee      	b.n	800e32c <check_vmon+0xc>
 800e34e:	bf00      	nop
 800e350:	2000b510 	.word	0x2000b510

0800e354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e364:	d101      	bne.n	800e36a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e366:	f000 fba5 	bl	800eab4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e372:	b480      	push	{r7}
 800e374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e376:	bf00      	nop
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e386:	4b0f      	ldr	r3, [pc, #60]	; (800e3c4 <HAL_MspInit+0x44>)
 800e388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38a:	4a0e      	ldr	r2, [pc, #56]	; (800e3c4 <HAL_MspInit+0x44>)
 800e38c:	f043 0301 	orr.w	r3, r3, #1
 800e390:	6613      	str	r3, [r2, #96]	; 0x60
 800e392:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <HAL_MspInit+0x44>)
 800e394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	607b      	str	r3, [r7, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e39e:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <HAL_MspInit+0x44>)
 800e3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a2:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <HAL_MspInit+0x44>)
 800e3a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3a8:	6593      	str	r3, [r2, #88]	; 0x58
 800e3aa:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <HAL_MspInit+0x44>)
 800e3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3b2:	603b      	str	r3, [r7, #0]
 800e3b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e3b6:	bf00      	nop
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	40021000 	.word	0x40021000

0800e3c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08a      	sub	sp, #40	; 0x28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3d0:	f107 0314 	add.w	r3, r7, #20
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	605a      	str	r2, [r3, #4]
 800e3da:	609a      	str	r2, [r3, #8]
 800e3dc:	60da      	str	r2, [r3, #12]
 800e3de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a15      	ldr	r2, [pc, #84]	; (800e43c <HAL_ADC_MspInit+0x74>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d124      	bne.n	800e434 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e3ea:	4b15      	ldr	r3, [pc, #84]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ee:	4a14      	ldr	r2, [pc, #80]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e3f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e3f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e3f6:	4b12      	ldr	r3, [pc, #72]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3fe:	613b      	str	r3, [r7, #16]
 800e400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e402:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e406:	4a0e      	ldr	r2, [pc, #56]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e408:	f043 0301 	orr.w	r3, r3, #1
 800e40c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <HAL_ADC_MspInit+0x78>)
 800e410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	60fb      	str	r3, [r7, #12]
 800e418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PWR_VBAT_Pin;
 800e41a:	2301      	movs	r3, #1
 800e41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e41e:	2303      	movs	r3, #3
 800e420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e422:	2300      	movs	r3, #0
 800e424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWR_VBAT_GPIO_Port, &GPIO_InitStruct);
 800e426:	f107 0314 	add.w	r3, r7, #20
 800e42a:	4619      	mov	r1, r3
 800e42c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e430:	f001 fdd8 	bl	800ffe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e434:	bf00      	nop
 800e436:	3728      	adds	r7, #40	; 0x28
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	50040000 	.word	0x50040000
 800e440:	40021000 	.word	0x40021000

0800e444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08a      	sub	sp, #40	; 0x28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e44c:	f107 0314 	add.w	r3, r7, #20
 800e450:	2200      	movs	r2, #0
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	605a      	str	r2, [r3, #4]
 800e456:	609a      	str	r2, [r3, #8]
 800e458:	60da      	str	r2, [r3, #12]
 800e45a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a17      	ldr	r2, [pc, #92]	; (800e4c0 <HAL_I2C_MspInit+0x7c>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d128      	bne.n	800e4b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e466:	4b17      	ldr	r3, [pc, #92]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e46a:	4a16      	ldr	r2, [pc, #88]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e46c:	f043 0302 	orr.w	r3, r3, #2
 800e470:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e472:	4b14      	ldr	r3, [pc, #80]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e47e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e484:	2312      	movs	r3, #18
 800e486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e488:	2301      	movs	r3, #1
 800e48a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e48c:	2303      	movs	r3, #3
 800e48e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e490:	2304      	movs	r3, #4
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	4619      	mov	r1, r3
 800e49a:	480b      	ldr	r0, [pc, #44]	; (800e4c8 <HAL_I2C_MspInit+0x84>)
 800e49c:	f001 fda2 	bl	800ffe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e4a0:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4a4:	4a07      	ldr	r2, [pc, #28]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e4a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e4aa:	6593      	str	r3, [r2, #88]	; 0x58
 800e4ac:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <HAL_I2C_MspInit+0x80>)
 800e4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e4b8:	bf00      	nop
 800e4ba:	3728      	adds	r7, #40	; 0x28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	40005400 	.word	0x40005400
 800e4c4:	40021000 	.word	0x40021000
 800e4c8:	48000400 	.word	0x48000400

0800e4cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a08      	ldr	r2, [pc, #32]	; (800e4fc <HAL_RTC_MspInit+0x30>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d107      	bne.n	800e4ee <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e4de:	4b08      	ldr	r3, [pc, #32]	; (800e500 <HAL_RTC_MspInit+0x34>)
 800e4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e4:	4a06      	ldr	r2, [pc, #24]	; (800e500 <HAL_RTC_MspInit+0x34>)
 800e4e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop
 800e4fc:	40002800 	.word	0x40002800
 800e500:	40021000 	.word	0x40021000

0800e504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08a      	sub	sp, #40	; 0x28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e50c:	f107 0314 	add.w	r3, r7, #20
 800e510:	2200      	movs	r2, #0
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	605a      	str	r2, [r3, #4]
 800e516:	609a      	str	r2, [r3, #8]
 800e518:	60da      	str	r2, [r3, #12]
 800e51a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a17      	ldr	r2, [pc, #92]	; (800e580 <HAL_SPI_MspInit+0x7c>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d128      	bne.n	800e578 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e526:	4b17      	ldr	r3, [pc, #92]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e52a:	4a16      	ldr	r2, [pc, #88]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e52c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e530:	6593      	str	r3, [r2, #88]	; 0x58
 800e532:	4b14      	ldr	r3, [pc, #80]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e53a:	613b      	str	r3, [r7, #16]
 800e53c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e53e:	4b11      	ldr	r3, [pc, #68]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e542:	4a10      	ldr	r2, [pc, #64]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e544:	f043 0302 	orr.w	r3, r3, #2
 800e548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e54a:	4b0e      	ldr	r3, [pc, #56]	; (800e584 <HAL_SPI_MspInit+0x80>)
 800e54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e54e:	f003 0302 	and.w	r3, r3, #2
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e556:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e55a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e55c:	2302      	movs	r3, #2
 800e55e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e560:	2300      	movs	r3, #0
 800e562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e564:	2303      	movs	r3, #3
 800e566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e568:	2305      	movs	r3, #5
 800e56a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e56c:	f107 0314 	add.w	r3, r7, #20
 800e570:	4619      	mov	r1, r3
 800e572:	4805      	ldr	r0, [pc, #20]	; (800e588 <HAL_SPI_MspInit+0x84>)
 800e574:	f001 fd36 	bl	800ffe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e578:	bf00      	nop
 800e57a:	3728      	adds	r7, #40	; 0x28
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	40003800 	.word	0x40003800
 800e584:	40021000 	.word	0x40021000
 800e588:	48000400 	.word	0x48000400

0800e58c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08e      	sub	sp, #56	; 0x38
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	605a      	str	r2, [r3, #4]
 800e59e:	609a      	str	r2, [r3, #8]
 800e5a0:	60da      	str	r2, [r3, #12]
 800e5a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a53      	ldr	r2, [pc, #332]	; (800e6f8 <HAL_UART_MspInit+0x16c>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d132      	bne.n	800e614 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e5ae:	4b53      	ldr	r3, [pc, #332]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5b2:	4a52      	ldr	r2, [pc, #328]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e5b8:	6613      	str	r3, [r2, #96]	; 0x60
 800e5ba:	4b50      	ldr	r3, [pc, #320]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5c2:	623b      	str	r3, [r7, #32]
 800e5c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5c6:	4b4d      	ldr	r3, [pc, #308]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ca:	4a4c      	ldr	r2, [pc, #304]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5cc:	f043 0301 	orr.w	r3, r3, #1
 800e5d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5d2:	4b4a      	ldr	r3, [pc, #296]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	61fb      	str	r3, [r7, #28]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e5de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e5e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e5f0:	2307      	movs	r3, #7
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e5fe:	f001 fcf1 	bl	800ffe4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800e602:	2200      	movs	r2, #0
 800e604:	2105      	movs	r1, #5
 800e606:	2025      	movs	r0, #37	; 0x25
 800e608:	f001 fc80 	bl	800ff0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e60c:	2025      	movs	r0, #37	; 0x25
 800e60e:	f001 fc99 	bl	800ff44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e612:	e06c      	b.n	800e6ee <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a39      	ldr	r2, [pc, #228]	; (800e700 <HAL_UART_MspInit+0x174>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d131      	bne.n	800e682 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e61e:	4b37      	ldr	r3, [pc, #220]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e622:	4a36      	ldr	r2, [pc, #216]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e628:	6593      	str	r3, [r2, #88]	; 0x58
 800e62a:	4b34      	ldr	r3, [pc, #208]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e632:	61bb      	str	r3, [r7, #24]
 800e634:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e636:	4b31      	ldr	r3, [pc, #196]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e63a:	4a30      	ldr	r2, [pc, #192]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e63c:	f043 0301 	orr.w	r3, r3, #1
 800e640:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e642:	4b2e      	ldr	r3, [pc, #184]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800e64e:	230c      	movs	r3, #12
 800e650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e652:	2302      	movs	r3, #2
 800e654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e656:	2300      	movs	r3, #0
 800e658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e65a:	2303      	movs	r3, #3
 800e65c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e65e:	2307      	movs	r3, #7
 800e660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e666:	4619      	mov	r1, r3
 800e668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e66c:	f001 fcba 	bl	800ffe4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800e670:	2200      	movs	r2, #0
 800e672:	2105      	movs	r1, #5
 800e674:	2026      	movs	r0, #38	; 0x26
 800e676:	f001 fc49 	bl	800ff0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e67a:	2026      	movs	r0, #38	; 0x26
 800e67c:	f001 fc62 	bl	800ff44 <HAL_NVIC_EnableIRQ>
}
 800e680:	e035      	b.n	800e6ee <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a1f      	ldr	r2, [pc, #124]	; (800e704 <HAL_UART_MspInit+0x178>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d130      	bne.n	800e6ee <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e68c:	4b1b      	ldr	r3, [pc, #108]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e690:	4a1a      	ldr	r2, [pc, #104]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e696:	6593      	str	r3, [r2, #88]	; 0x58
 800e698:	4b18      	ldr	r3, [pc, #96]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e69c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6a0:	613b      	str	r3, [r7, #16]
 800e6a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6a4:	4b15      	ldr	r3, [pc, #84]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e6a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6a8:	4a14      	ldr	r2, [pc, #80]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e6aa:	f043 0302 	orr.w	r3, r3, #2
 800e6ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6b0:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <HAL_UART_MspInit+0x170>)
 800e6b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e6bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e6c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e6ce:	2307      	movs	r3, #7
 800e6d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	480b      	ldr	r0, [pc, #44]	; (800e708 <HAL_UART_MspInit+0x17c>)
 800e6da:	f001 fc83 	bl	800ffe4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2105      	movs	r1, #5
 800e6e2:	2027      	movs	r0, #39	; 0x27
 800e6e4:	f001 fc12 	bl	800ff0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800e6e8:	2027      	movs	r0, #39	; 0x27
 800e6ea:	f001 fc2b 	bl	800ff44 <HAL_NVIC_EnableIRQ>
}
 800e6ee:	bf00      	nop
 800e6f0:	3738      	adds	r7, #56	; 0x38
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40013800 	.word	0x40013800
 800e6fc:	40021000 	.word	0x40021000
 800e700:	40004400 	.word	0x40004400
 800e704:	40004800 	.word	0x40004800
 800e708:	48000400 	.word	0x48000400

0800e70c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08c      	sub	sp, #48	; 0x30
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e714:	2300      	movs	r3, #0
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800e71c:	2200      	movs	r2, #0
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	201c      	movs	r0, #28
 800e722:	f001 fbf3 	bl	800ff0c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e726:	201c      	movs	r0, #28
 800e728:	f001 fc0c 	bl	800ff44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e72c:	4b1f      	ldr	r3, [pc, #124]	; (800e7ac <HAL_InitTick+0xa0>)
 800e72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e730:	4a1e      	ldr	r2, [pc, #120]	; (800e7ac <HAL_InitTick+0xa0>)
 800e732:	f043 0301 	orr.w	r3, r3, #1
 800e736:	6593      	str	r3, [r2, #88]	; 0x58
 800e738:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <HAL_InitTick+0xa0>)
 800e73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73c:	f003 0301 	and.w	r3, r3, #1
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e744:	f107 0210 	add.w	r2, r7, #16
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	4611      	mov	r1, r2
 800e74e:	4618      	mov	r0, r3
 800e750:	f003 fd1c 	bl	801218c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800e754:	f003 fcee 	bl	8012134 <HAL_RCC_GetPCLK1Freq>
 800e758:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	4a14      	ldr	r2, [pc, #80]	; (800e7b0 <HAL_InitTick+0xa4>)
 800e75e:	fba2 2303 	umull	r2, r3, r2, r3
 800e762:	0c9b      	lsrs	r3, r3, #18
 800e764:	3b01      	subs	r3, #1
 800e766:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800e768:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e76a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e76e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800e770:	4b10      	ldr	r3, [pc, #64]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e772:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e776:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800e778:	4a0e      	ldr	r2, [pc, #56]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800e77e:	4b0d      	ldr	r3, [pc, #52]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e780:	2200      	movs	r2, #0
 800e782:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e784:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e786:	2200      	movs	r2, #0
 800e788:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800e78a:	480a      	ldr	r0, [pc, #40]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e78c:	f005 f907 	bl	801399e <HAL_TIM_Base_Init>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d104      	bne.n	800e7a0 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800e796:	4807      	ldr	r0, [pc, #28]	; (800e7b4 <HAL_InitTick+0xa8>)
 800e798:	f005 f936 	bl	8013a08 <HAL_TIM_Base_Start_IT>
 800e79c:	4603      	mov	r3, r0
 800e79e:	e000      	b.n	800e7a2 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800e7a0:	2301      	movs	r3, #1
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3730      	adds	r7, #48	; 0x30
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	40021000 	.word	0x40021000
 800e7b0:	431bde83 	.word	0x431bde83
 800e7b4:	2000b518 	.word	0x2000b518

0800e7b8 <tx_com>:
  if(Timer2 > 0)
    Timer2--;
}

static void tx_com( uint8_t *tx_buffer, uint16_t len )
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit( &huart1, tx_buffer, len, 1000 );
 800e7c4:	887a      	ldrh	r2, [r7, #2]
 800e7c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	4803      	ldr	r0, [pc, #12]	; (800e7dc <tx_com+0x24>)
 800e7ce:	f005 fb5d 	bl	8013e8c <HAL_UART_Transmit>
}
 800e7d2:	bf00      	nop
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	20002fe0 	.word	0x20002fe0

0800e7e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e7e4:	bf00      	nop
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr

0800e7ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e7ee:	b480      	push	{r7}
 800e7f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e7f2:	e7fe      	b.n	800e7f2 <HardFault_Handler+0x4>

0800e7f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e7f8:	e7fe      	b.n	800e7f8 <MemManage_Handler+0x4>

0800e7fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e7fa:	b480      	push	{r7}
 800e7fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e7fe:	e7fe      	b.n	800e7fe <BusFault_Handler+0x4>

0800e800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e800:	b480      	push	{r7}
 800e802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e804:	e7fe      	b.n	800e804 <UsageFault_Handler+0x4>

0800e806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e806:	b480      	push	{r7}
 800e808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e80a:	bf00      	nop
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800e814:	b598      	push	{r3, r4, r7, lr}
 800e816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(LSM6DSL_INT1_Pin))
 800e818:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <EXTI9_5_IRQHandler+0x44>)
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f003 0320 	and.w	r3, r3, #32
 800e820:	2b00      	cmp	r3, #0
 800e822:	d013      	beq.n	800e84c <EXTI9_5_IRQHandler+0x38>
  {
	  sprintf((char*)tx_buffer, "Interrupted\n");
 800e824:	4a0d      	ldr	r2, [pc, #52]	; (800e85c <EXTI9_5_IRQHandler+0x48>)
 800e826:	4b0e      	ldr	r3, [pc, #56]	; (800e860 <EXTI9_5_IRQHandler+0x4c>)
 800e828:	4614      	mov	r4, r2
 800e82a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e82c:	6020      	str	r0, [r4, #0]
 800e82e:	6061      	str	r1, [r4, #4]
 800e830:	60a2      	str	r2, [r4, #8]
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	7323      	strb	r3, [r4, #12]
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e836:	4809      	ldr	r0, [pc, #36]	; (800e85c <EXTI9_5_IRQHandler+0x48>)
 800e838:	f7f1 fcd4 	bl	80001e4 <strlen>
 800e83c:	4603      	mov	r3, r0
 800e83e:	b29b      	uxth	r3, r3
 800e840:	4619      	mov	r1, r3
 800e842:	4806      	ldr	r0, [pc, #24]	; (800e85c <EXTI9_5_IRQHandler+0x48>)
 800e844:	f7ff ffb8 	bl	800e7b8 <tx_com>
//	  osSignalSet( readGyroHandle, BIT_1 | BIT_2);
	  runGyro();
 800e848:	f7f9 fd0e 	bl	8008268 <runGyro>
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800e84c:	2020      	movs	r0, #32
 800e84e:	f001 fd73 	bl	8010338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800e852:	bf00      	nop
 800e854:	bd98      	pop	{r3, r4, r7, pc}
 800e856:	bf00      	nop
 800e858:	40010400 	.word	0x40010400
 800e85c:	200068bc 	.word	0x200068bc
 800e860:	0801f4a4 	.word	0x0801f4a4

0800e864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e868:	4802      	ldr	r0, [pc, #8]	; (800e874 <TIM2_IRQHandler+0x10>)
 800e86a:	f005 f8f7 	bl	8013a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e86e:	bf00      	nop
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000b518 	.word	0x2000b518

0800e878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e87c:	4802      	ldr	r0, [pc, #8]	; (800e888 <USART1_IRQHandler+0x10>)
 800e87e:	f005 fc3b 	bl	80140f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e882:	bf00      	nop
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	20002fe0 	.word	0x20002fe0

0800e88c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800e890:	4802      	ldr	r0, [pc, #8]	; (800e89c <USART2_IRQHandler+0x10>)
 800e892:	f005 fc31 	bl	80140f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800e896:	bf00      	nop
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	200038e4 	.word	0x200038e4

0800e8a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800e8a4:	4802      	ldr	r0, [pc, #8]	; (800e8b0 <USART3_IRQHandler+0x10>)
 800e8a6:	f005 fc27 	bl	80140f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800e8aa:	bf00      	nop
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20002770 	.word	0x20002770

0800e8b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	617b      	str	r3, [r7, #20]
 800e8c4:	e00a      	b.n	800e8dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800e8c6:	f3af 8000 	nop.w
 800e8ca:	4601      	mov	r1, r0
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	60ba      	str	r2, [r7, #8]
 800e8d2:	b2ca      	uxtb	r2, r1
 800e8d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	dbf0      	blt.n	800e8c6 <_read+0x12>
	}

return len;
 800e8e4:	687b      	ldr	r3, [r7, #4]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <_close>:
	}
	return len;
}

int _close(int file)
{
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
	return -1;
 800e8f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	370c      	adds	r7, #12
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e906:	b480      	push	{r7}
 800e908:	b083      	sub	sp, #12
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e916:	605a      	str	r2, [r3, #4]
	return 0;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <_isatty>:

int _isatty(int file)
{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
	return 1;
 800e92e:	2301      	movs	r3, #1
}
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	607a      	str	r2, [r7, #4]
	return 0;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
	...

0800e958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e960:	4a14      	ldr	r2, [pc, #80]	; (800e9b4 <_sbrk+0x5c>)
 800e962:	4b15      	ldr	r3, [pc, #84]	; (800e9b8 <_sbrk+0x60>)
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e96c:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <_sbrk+0x64>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e974:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <_sbrk+0x64>)
 800e976:	4a12      	ldr	r2, [pc, #72]	; (800e9c0 <_sbrk+0x68>)
 800e978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e97a:	4b10      	ldr	r3, [pc, #64]	; (800e9bc <_sbrk+0x64>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4413      	add	r3, r2
 800e982:	693a      	ldr	r2, [r7, #16]
 800e984:	429a      	cmp	r2, r3
 800e986:	d207      	bcs.n	800e998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e988:	f00c fc50 	bl	801b22c <__errno>
 800e98c:	4602      	mov	r2, r0
 800e98e:	230c      	movs	r3, #12
 800e990:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800e992:	f04f 33ff 	mov.w	r3, #4294967295
 800e996:	e009      	b.n	800e9ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e998:	4b08      	ldr	r3, [pc, #32]	; (800e9bc <_sbrk+0x64>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e99e:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <_sbrk+0x64>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4a05      	ldr	r2, [pc, #20]	; (800e9bc <_sbrk+0x64>)
 800e9a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	20010000 	.word	0x20010000
 800e9b8:	00000400 	.word	0x00000400
 800e9bc:	2000064c 	.word	0x2000064c
 800e9c0:	2000ba18 	.word	0x2000ba18

0800e9c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e9c8:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <SystemInit+0x64>)
 800e9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ce:	4a16      	ldr	r2, [pc, #88]	; (800ea28 <SystemInit+0x64>)
 800e9d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e9d8:	4b14      	ldr	r3, [pc, #80]	; (800ea2c <SystemInit+0x68>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a13      	ldr	r2, [pc, #76]	; (800ea2c <SystemInit+0x68>)
 800e9de:	f043 0301 	orr.w	r3, r3, #1
 800e9e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800e9e4:	4b11      	ldr	r3, [pc, #68]	; (800ea2c <SystemInit+0x68>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e9ea:	4b10      	ldr	r3, [pc, #64]	; (800ea2c <SystemInit+0x68>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a0f      	ldr	r2, [pc, #60]	; (800ea2c <SystemInit+0x68>)
 800e9f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800e9f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800e9f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800e9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ea2c <SystemInit+0x68>)
 800e9fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ea02:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <SystemInit+0x68>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a09      	ldr	r2, [pc, #36]	; (800ea2c <SystemInit+0x68>)
 800ea08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800ea0e:	4b07      	ldr	r3, [pc, #28]	; (800ea2c <SystemInit+0x68>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ea14:	4b04      	ldr	r3, [pc, #16]	; (800ea28 <SystemInit+0x64>)
 800ea16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ea1a:	609a      	str	r2, [r3, #8]
#endif
}
 800ea1c:	bf00      	nop
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	e000ed00 	.word	0xe000ed00
 800ea2c:	40021000 	.word	0x40021000

0800ea30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ea30:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ea68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800ea34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800ea36:	e003      	b.n	800ea40 <LoopCopyDataInit>

0800ea38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ea38:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ea3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ea3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ea3e:	3104      	adds	r1, #4

0800ea40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ea40:	480b      	ldr	r0, [pc, #44]	; (800ea70 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ea42:	4b0c      	ldr	r3, [pc, #48]	; (800ea74 <LoopForever+0xe>)
	adds	r2, r0, r1
 800ea44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800ea46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ea48:	d3f6      	bcc.n	800ea38 <CopyDataInit>
	ldr	r2, =_sbss
 800ea4a:	4a0b      	ldr	r2, [pc, #44]	; (800ea78 <LoopForever+0x12>)
	b	LoopFillZerobss
 800ea4c:	e002      	b.n	800ea54 <LoopFillZerobss>

0800ea4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ea4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ea50:	f842 3b04 	str.w	r3, [r2], #4

0800ea54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ea54:	4b09      	ldr	r3, [pc, #36]	; (800ea7c <LoopForever+0x16>)
	cmp	r2, r3
 800ea56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ea58:	d3f9      	bcc.n	800ea4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ea5a:	f7ff ffb3 	bl	800e9c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ea5e:	f00c fbeb 	bl	801b238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ea62:	f7fc fe7d 	bl	800b760 <main>

0800ea66 <LoopForever>:

LoopForever:
    b LoopForever
 800ea66:	e7fe      	b.n	800ea66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ea68:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800ea6c:	0801fc60 	.word	0x0801fc60
	ldr	r0, =_sdata
 800ea70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ea74:	20000380 	.word	0x20000380
	ldr	r2, =_sbss
 800ea78:	20000380 	.word	0x20000380
	ldr	r3, = _ebss
 800ea7c:	2000ba14 	.word	0x2000ba14

0800ea80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ea80:	e7fe      	b.n	800ea80 <ADC1_IRQHandler>

0800ea82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ea8c:	2003      	movs	r0, #3
 800ea8e:	f001 fa32 	bl	800fef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ea92:	2000      	movs	r0, #0
 800ea94:	f7ff fe3a 	bl	800e70c <HAL_InitTick>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	71fb      	strb	r3, [r7, #7]
 800eaa2:	e001      	b.n	800eaa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800eaa4:	f7ff fc6c 	bl	800e380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800eaa8:	79fb      	ldrb	r3, [r7, #7]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
	...

0800eab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800eab4:	b480      	push	{r7}
 800eab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800eab8:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <HAL_IncTick+0x1c>)
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <HAL_IncTick+0x20>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4413      	add	r3, r2
 800eac2:	4a03      	ldr	r2, [pc, #12]	; (800ead0 <HAL_IncTick+0x1c>)
 800eac4:	6013      	str	r3, [r2, #0]
}
 800eac6:	bf00      	nop
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	2000b55c 	.word	0x2000b55c
 800ead4:	20000194 	.word	0x20000194

0800ead8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ead8:	b480      	push	{r7}
 800eada:	af00      	add	r7, sp, #0
  return uwTick;
 800eadc:	4b03      	ldr	r3, [pc, #12]	; (800eaec <HAL_GetTick+0x14>)
 800eade:	681b      	ldr	r3, [r3, #0]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	2000b55c 	.word	0x2000b55c

0800eaf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800eaf8:	f7ff ffee 	bl	800ead8 <HAL_GetTick>
 800eafc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb08:	d004      	beq.n	800eb14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800eb0a:	4b09      	ldr	r3, [pc, #36]	; (800eb30 <HAL_Delay+0x40>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eb14:	bf00      	nop
 800eb16:	f7ff ffdf 	bl	800ead8 <HAL_GetTick>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d8f7      	bhi.n	800eb16 <HAL_Delay+0x26>
  {
  }
}
 800eb26:	bf00      	nop
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	20000194 	.word	0x20000194

0800eb34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	431a      	orrs	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	609a      	str	r2, [r3, #8]
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b083      	sub	sp, #12
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	609a      	str	r2, [r3, #8]
}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800eb9c:	b490      	push	{r4, r7}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3360      	adds	r3, #96	; 0x60
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4413      	add	r3, r2
 800ebb6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ebb8:	6822      	ldr	r2, [r4, #0]
 800ebba:	4b08      	ldr	r3, [pc, #32]	; (800ebdc <LL_ADC_SetOffset+0x40>)
 800ebbc:	4013      	ands	r3, r2
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	430a      	orrs	r2, r1
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ebd0:	bf00      	nop
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bc90      	pop	{r4, r7}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	03fff000 	.word	0x03fff000

0800ebe0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ebe0:	b490      	push	{r4, r7}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	3360      	adds	r3, #96	; 0x60
 800ebee:	461a      	mov	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bc90      	pop	{r4, r7}
 800ec06:	4770      	bx	lr

0800ec08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ec08:	b490      	push	{r4, r7}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3360      	adds	r3, #96	; 0x60
 800ec18:	461a      	mov	r2, r3
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ec2e:	bf00      	nop
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bc90      	pop	{r4, r7}
 800ec36:	4770      	bx	lr

0800ec38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e000      	b.n	800ec52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ec5e:	b490      	push	{r4, r7}
 800ec60:	b084      	sub	sp, #16
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	60f8      	str	r0, [r7, #12]
 800ec66:	60b9      	str	r1, [r7, #8]
 800ec68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3330      	adds	r3, #48	; 0x30
 800ec6e:	461a      	mov	r2, r3
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	0a1b      	lsrs	r3, r3, #8
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	f003 030c 	and.w	r3, r3, #12
 800ec7a:	4413      	add	r3, r2
 800ec7c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ec7e:	6822      	ldr	r2, [r4, #0]
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	f003 031f 	and.w	r3, r3, #31
 800ec86:	211f      	movs	r1, #31
 800ec88:	fa01 f303 	lsl.w	r3, r1, r3
 800ec8c:	43db      	mvns	r3, r3
 800ec8e:	401a      	ands	r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	0e9b      	lsrs	r3, r3, #26
 800ec94:	f003 011f 	and.w	r1, r3, #31
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	f003 031f 	and.w	r3, r3, #31
 800ec9e:	fa01 f303 	lsl.w	r3, r1, r3
 800eca2:	4313      	orrs	r3, r2
 800eca4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bc90      	pop	{r4, r7}
 800ecae:	4770      	bx	lr

0800ecb0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ecb0:	b490      	push	{r4, r7}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3314      	adds	r3, #20
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	0e5b      	lsrs	r3, r3, #25
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	f003 0304 	and.w	r3, r3, #4
 800eccc:	4413      	add	r3, r2
 800ecce:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ecd0:	6822      	ldr	r2, [r4, #0]
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	0d1b      	lsrs	r3, r3, #20
 800ecd6:	f003 031f 	and.w	r3, r3, #31
 800ecda:	2107      	movs	r1, #7
 800ecdc:	fa01 f303 	lsl.w	r3, r1, r3
 800ece0:	43db      	mvns	r3, r3
 800ece2:	401a      	ands	r2, r3
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	0d1b      	lsrs	r3, r3, #20
 800ece8:	f003 031f 	and.w	r3, r3, #31
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bc90      	pop	{r4, r7}
 800ecfe:	4770      	bx	lr

0800ed00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed18:	43db      	mvns	r3, r3
 800ed1a:	401a      	ands	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f003 0318 	and.w	r3, r3, #24
 800ed22:	4908      	ldr	r1, [pc, #32]	; (800ed44 <LL_ADC_SetChannelSingleDiff+0x44>)
 800ed24:	40d9      	lsrs	r1, r3
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	400b      	ands	r3, r1
 800ed2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed2e:	431a      	orrs	r2, r3
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800ed36:	bf00      	nop
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	0007ffff 	.word	0x0007ffff

0800ed48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800ed58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	6093      	str	r3, [r2, #8]
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed80:	d101      	bne.n	800ed86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800eda4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800eda8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edd0:	d101      	bne.n	800edd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800edd2:	2301      	movs	r3, #1
 800edd4:	e000      	b.n	800edd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800edf8:	f043 0201 	orr.w	r2, r3, #1
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ee20:	f043 0202 	orr.w	r2, r3, #2
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800ee28:	bf00      	nop
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d101      	bne.n	800ee4c <LL_ADC_IsEnabled+0x18>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <LL_ADC_IsEnabled+0x1a>
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	370c      	adds	r7, #12
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr

0800ee5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800ee5a:	b480      	push	{r7}
 800ee5c:	b083      	sub	sp, #12
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	f003 0302 	and.w	r3, r3, #2
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d101      	bne.n	800ee72 <LL_ADC_IsDisableOngoing+0x18>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e000      	b.n	800ee74 <LL_ADC_IsDisableOngoing+0x1a>
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ee94:	f043 0204 	orr.w	r2, r3, #4
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eeb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800eebc:	f043 0210 	orr.w	r2, r3, #16
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	f003 0304 	and.w	r3, r3, #4
 800eee0:	2b04      	cmp	r3, #4
 800eee2:	d101      	bne.n	800eee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 800eee4:	2301      	movs	r3, #1
 800eee6:	e000      	b.n	800eeea <LL_ADC_REG_IsConversionOngoing+0x1a>
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800eef6:	b480      	push	{r7}
 800eef8:	b083      	sub	sp, #12
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ef0a:	f043 0220 	orr.w	r2, r3, #32
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800ef12:	bf00      	nop
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b083      	sub	sp, #12
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	f003 0308 	and.w	r3, r3, #8
 800ef2e:	2b08      	cmp	r3, #8
 800ef30:	d101      	bne.n	800ef36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b088      	sub	sp, #32
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d101      	bne.n	800ef5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e12a      	b.n	800f1b4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	691b      	ldr	r3, [r3, #16]
 800ef62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d109      	bne.n	800ef80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7ff fa2b 	bl	800e3c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff fef1 	bl	800ed6c <LL_ADC_IsDeepPowerDownEnabled>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff fed7 	bl	800ed48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff ff0c 	bl	800edbc <LL_ADC_IsInternalRegulatorEnabled>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d113      	bne.n	800efd2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7ff fef0 	bl	800ed94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800efb4:	4b81      	ldr	r3, [pc, #516]	; (800f1bc <HAL_ADC_Init+0x278>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	099b      	lsrs	r3, r3, #6
 800efba:	4a81      	ldr	r2, [pc, #516]	; (800f1c0 <HAL_ADC_Init+0x27c>)
 800efbc:	fba2 2303 	umull	r2, r3, r2, r3
 800efc0:	099b      	lsrs	r3, r3, #6
 800efc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800efc4:	e002      	b.n	800efcc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	3b01      	subs	r3, #1
 800efca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f9      	bne.n	800efc6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fef0 	bl	800edbc <LL_ADC_IsInternalRegulatorEnabled>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10d      	bne.n	800effe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe6:	f043 0210 	orr.w	r2, r3, #16
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eff2:	f043 0201 	orr.w	r2, r3, #1
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4618      	mov	r0, r3
 800f004:	f7ff ff64 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800f008:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f00e:	f003 0310 	and.w	r3, r3, #16
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 80c5 	bne.w	800f1a2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f040 80c1 	bne.w	800f1a2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f024:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f028:	f043 0202 	orr.w	r2, r3, #2
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff fefd 	bl	800ee34 <LL_ADC_IsEnabled>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10b      	bne.n	800f058 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f040:	4860      	ldr	r0, [pc, #384]	; (800f1c4 <HAL_ADC_Init+0x280>)
 800f042:	f7ff fef7 	bl	800ee34 <LL_ADC_IsEnabled>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d105      	bne.n	800f058 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	4619      	mov	r1, r3
 800f052:	485d      	ldr	r0, [pc, #372]	; (800f1c8 <HAL_ADC_Init+0x284>)
 800f054:	f7ff fd6e 	bl	800eb34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	7e5b      	ldrb	r3, [r3, #25]
 800f05c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f062:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800f068:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800f06e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f076:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f078:	4313      	orrs	r3, r2
 800f07a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d106      	bne.n	800f094 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08a:	3b01      	subs	r3, #1
 800f08c:	045b      	lsls	r3, r3, #17
 800f08e:	69ba      	ldr	r2, [r7, #24]
 800f090:	4313      	orrs	r3, r2
 800f092:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d009      	beq.n	800f0b0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f0aa:	69ba      	ldr	r2, [r7, #24]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	68da      	ldr	r2, [r3, #12]
 800f0b6:	4b45      	ldr	r3, [pc, #276]	; (800f1cc <HAL_ADC_Init+0x288>)
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	6812      	ldr	r2, [r2, #0]
 800f0be:	69b9      	ldr	r1, [r7, #24]
 800f0c0:	430b      	orrs	r3, r1
 800f0c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff ff01 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800f0ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff ff22 	bl	800ef1e <LL_ADC_INJ_IsConversionOngoing>
 800f0da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d13d      	bne.n	800f15e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d13a      	bne.n	800f15e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f0ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f104:	f023 0302 	bic.w	r3, r3, #2
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	6812      	ldr	r2, [r2, #0]
 800f10c:	69b9      	ldr	r1, [r7, #24]
 800f10e:	430b      	orrs	r3, r1
 800f110:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d118      	bne.n	800f14e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f126:	f023 0304 	bic.w	r3, r3, #4
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f132:	4311      	orrs	r1, r2
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f138:	4311      	orrs	r1, r2
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f13e:	430a      	orrs	r2, r1
 800f140:	431a      	orrs	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f042 0201 	orr.w	r2, r2, #1
 800f14a:	611a      	str	r2, [r3, #16]
 800f14c:	e007      	b.n	800f15e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	691a      	ldr	r2, [r3, #16]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f022 0201 	bic.w	r2, r2, #1
 800f15c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d10c      	bne.n	800f180 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16c:	f023 010f 	bic.w	r1, r3, #15
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	1e5a      	subs	r2, r3, #1
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	430a      	orrs	r2, r1
 800f17c:	631a      	str	r2, [r3, #48]	; 0x30
 800f17e:	e007      	b.n	800f190 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f022 020f 	bic.w	r2, r2, #15
 800f18e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f194:	f023 0303 	bic.w	r3, r3, #3
 800f198:	f043 0201 	orr.w	r2, r3, #1
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	655a      	str	r2, [r3, #84]	; 0x54
 800f1a0:	e007      	b.n	800f1b2 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1a6:	f043 0210 	orr.w	r2, r3, #16
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800f1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3720      	adds	r7, #32
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	2000018c 	.word	0x2000018c
 800f1c0:	053e2d63 	.word	0x053e2d63
 800f1c4:	50040000 	.word	0x50040000
 800f1c8:	50040300 	.word	0x50040300
 800f1cc:	fff0c007 	.word	0xfff0c007

0800f1d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7ff fe77 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d14f      	bne.n	800f288 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d101      	bne.n	800f1f6 <HAL_ADC_Start+0x26>
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	e04b      	b.n	800f28e <HAL_ADC_Start+0xbe>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fd1a 	bl	800fc38 <ADC_Enable>
 800f204:	4603      	mov	r3, r0
 800f206:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f208:	7bfb      	ldrb	r3, [r7, #15]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d137      	bne.n	800f27e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f216:	f023 0301 	bic.w	r3, r3, #1
 800f21a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f22e:	d106      	bne.n	800f23e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f234:	f023 0206 	bic.w	r2, r3, #6
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	659a      	str	r2, [r3, #88]	; 0x58
 800f23c:	e002      	b.n	800f244 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	221c      	movs	r2, #28
 800f24a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d007      	beq.n	800f272 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f26a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fe02 	bl	800ee80 <LL_ADC_REG_StartConversion>
 800f27c:	e006      	b.n	800f28c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800f286:	e001      	b.n	800f28c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f288:	2302      	movs	r3, #2
 800f28a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d101      	bne.n	800f2ac <HAL_ADC_Stop+0x16>
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	e023      	b.n	800f2f4 <HAL_ADC_Stop+0x5e>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800f2b4:	2103      	movs	r1, #3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fc0a 	bl	800fad0 <ADC_ConversionStop>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d111      	bne.n	800f2ea <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fd10 	bl	800fcec <ADC_Disable>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800f2d0:	7bfb      	ldrb	r3, [r7, #15]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d109      	bne.n	800f2ea <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f2de:	f023 0301 	bic.w	r3, r3, #1
 800f2e2:	f043 0201 	orr.w	r2, r3, #1
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800f2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	2b08      	cmp	r3, #8
 800f30c:	d102      	bne.n	800f314 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800f30e:	2308      	movs	r3, #8
 800f310:	617b      	str	r3, [r7, #20]
 800f312:	e010      	b.n	800f336 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f003 0301 	and.w	r3, r3, #1
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d007      	beq.n	800f332 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f326:	f043 0220 	orr.w	r2, r3, #32
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e068      	b.n	800f404 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800f332:	2304      	movs	r3, #4
 800f334:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f336:	f7ff fbcf 	bl	800ead8 <HAL_GetTick>
 800f33a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f33c:	e01a      	b.n	800f374 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f344:	d016      	beq.n	800f374 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800f346:	f7ff fbc7 	bl	800ead8 <HAL_GetTick>
 800f34a:	4602      	mov	r2, r0
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	429a      	cmp	r2, r3
 800f354:	d302      	bcc.n	800f35c <HAL_ADC_PollForConversion+0x60>
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10b      	bne.n	800f374 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f360:	f043 0204 	orr.w	r2, r3, #4
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f370:	2303      	movs	r3, #3
 800f372:	e047      	b.n	800f404 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	4013      	ands	r3, r2
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d0dd      	beq.n	800f33e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f386:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4618      	mov	r0, r3
 800f394:	f7ff fc50 	bl	800ec38 <LL_ADC_REG_IsTriggerSourceSWStart>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d01c      	beq.n	800f3d8 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	7e5b      	ldrb	r3, [r3, #25]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d118      	bne.n	800f3d8 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f003 0308 	and.w	r3, r3, #8
 800f3b0:	2b08      	cmp	r3, #8
 800f3b2:	d111      	bne.n	800f3d8 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d105      	bne.n	800f3d8 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3d0:	f043 0201 	orr.w	r2, r3, #1
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2b08      	cmp	r3, #8
 800f3e4:	d104      	bne.n	800f3f0 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2208      	movs	r2, #8
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e008      	b.n	800f402 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d103      	bne.n	800f402 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	220c      	movs	r2, #12
 800f400:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	370c      	adds	r7, #12
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
	...

0800f428 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b0a6      	sub	sp, #152	; 0x98
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f442:	2b01      	cmp	r3, #1
 800f444:	d101      	bne.n	800f44a <HAL_ADC_ConfigChannel+0x22>
 800f446:	2302      	movs	r3, #2
 800f448:	e338      	b.n	800fabc <HAL_ADC_ConfigChannel+0x694>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff fd3a 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f040 831d 	bne.w	800fa9e <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	2b05      	cmp	r3, #5
 800f46a:	d824      	bhi.n	800f4b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	3b02      	subs	r3, #2
 800f472:	2b03      	cmp	r3, #3
 800f474:	d81b      	bhi.n	800f4ae <HAL_ADC_ConfigChannel+0x86>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <HAL_ADC_ConfigChannel+0x54>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f48d 	.word	0x0800f48d
 800f480:	0800f495 	.word	0x0800f495
 800f484:	0800f49d 	.word	0x0800f49d
 800f488:	0800f4a5 	.word	0x0800f4a5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	220c      	movs	r2, #12
 800f490:	605a      	str	r2, [r3, #4]
 800f492:	e011      	b.n	800f4b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2212      	movs	r2, #18
 800f498:	605a      	str	r2, [r3, #4]
 800f49a:	e00d      	b.n	800f4b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2218      	movs	r2, #24
 800f4a0:	605a      	str	r2, [r3, #4]
 800f4a2:	e009      	b.n	800f4b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4aa:	605a      	str	r2, [r3, #4]
 800f4ac:	e004      	b.n	800f4b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	2206      	movs	r2, #6
 800f4b2:	605a      	str	r2, [r3, #4]
 800f4b4:	e000      	b.n	800f4b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800f4b6:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6818      	ldr	r0, [r3, #0]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	6859      	ldr	r1, [r3, #4]
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	f7ff fbca 	bl	800ec5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7ff fcfe 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800f4d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7ff fd1e 	bl	800ef1e <LL_ADC_INJ_IsConversionOngoing>
 800f4e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f040 8148 	bne.w	800f780 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f4f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 8143 	bne.w	800f780 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6818      	ldr	r0, [r3, #0]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	6819      	ldr	r1, [r3, #0]
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	461a      	mov	r2, r3
 800f508:	f7ff fbd2 	bl	800ecb0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	695a      	ldr	r2, [r3, #20]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	08db      	lsrs	r3, r3, #3
 800f518:	f003 0303 	and.w	r3, r3, #3
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	fa02 f303 	lsl.w	r3, r2, r3
 800f522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	d00a      	beq.n	800f544 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	6919      	ldr	r1, [r3, #16]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f53e:	f7ff fb2d 	bl	800eb9c <LL_ADC_SetOffset>
 800f542:	e11d      	b.n	800f780 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2100      	movs	r1, #0
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7ff fb48 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f550:	4603      	mov	r3, r0
 800f552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10a      	bne.n	800f570 <HAL_ADC_ConfigChannel+0x148>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2100      	movs	r1, #0
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff fb3d 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f566:	4603      	mov	r3, r0
 800f568:	0e9b      	lsrs	r3, r3, #26
 800f56a:	f003 021f 	and.w	r2, r3, #31
 800f56e:	e012      	b.n	800f596 <HAL_ADC_ConfigChannel+0x16e>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2100      	movs	r1, #0
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff fb32 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f57c:	4603      	mov	r3, r0
 800f57e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f586:	fa93 f3a3 	rbit	r3, r3
 800f58a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f58c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f58e:	fab3 f383 	clz	r3, r3
 800f592:	b2db      	uxtb	r3, r3
 800f594:	461a      	mov	r2, r3
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d105      	bne.n	800f5ae <HAL_ADC_ConfigChannel+0x186>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	0e9b      	lsrs	r3, r3, #26
 800f5a8:	f003 031f 	and.w	r3, r3, #31
 800f5ac:	e00a      	b.n	800f5c4 <HAL_ADC_ConfigChannel+0x19c>
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f5b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5b6:	fa93 f3a3 	rbit	r3, r3
 800f5ba:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800f5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5be:	fab3 f383 	clz	r3, r3
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d106      	bne.n	800f5d6 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fb19 	bl	800ec08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2101      	movs	r1, #1
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7ff faff 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d10a      	bne.n	800f602 <HAL_ADC_ConfigChannel+0x1da>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff faf4 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	0e9b      	lsrs	r3, r3, #26
 800f5fc:	f003 021f 	and.w	r2, r3, #31
 800f600:	e010      	b.n	800f624 <HAL_ADC_ConfigChannel+0x1fc>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2101      	movs	r1, #1
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fae9 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f60e:	4603      	mov	r3, r0
 800f610:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f614:	fa93 f3a3 	rbit	r3, r3
 800f618:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800f61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f61c:	fab3 f383 	clz	r3, r3
 800f620:	b2db      	uxtb	r3, r3
 800f622:	461a      	mov	r2, r3
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d105      	bne.n	800f63c <HAL_ADC_ConfigChannel+0x214>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	0e9b      	lsrs	r3, r3, #26
 800f636:	f003 031f 	and.w	r3, r3, #31
 800f63a:	e00a      	b.n	800f652 <HAL_ADC_ConfigChannel+0x22a>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f644:	fa93 f3a3 	rbit	r3, r3
 800f648:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800f64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f64c:	fab3 f383 	clz	r3, r3
 800f650:	b2db      	uxtb	r3, r3
 800f652:	429a      	cmp	r2, r3
 800f654:	d106      	bne.n	800f664 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2200      	movs	r2, #0
 800f65c:	2101      	movs	r1, #1
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff fad2 	bl	800ec08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2102      	movs	r1, #2
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7ff fab8 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f670:	4603      	mov	r3, r0
 800f672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f676:	2b00      	cmp	r3, #0
 800f678:	d10a      	bne.n	800f690 <HAL_ADC_ConfigChannel+0x268>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2102      	movs	r1, #2
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff faad 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f686:	4603      	mov	r3, r0
 800f688:	0e9b      	lsrs	r3, r3, #26
 800f68a:	f003 021f 	and.w	r2, r3, #31
 800f68e:	e010      	b.n	800f6b2 <HAL_ADC_ConfigChannel+0x28a>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2102      	movs	r1, #2
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff faa2 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f69c:	4603      	mov	r3, r0
 800f69e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6a2:	fa93 f3a3 	rbit	r3, r3
 800f6a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800f6a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6aa:	fab3 f383 	clz	r3, r3
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d105      	bne.n	800f6ca <HAL_ADC_ConfigChannel+0x2a2>
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	0e9b      	lsrs	r3, r3, #26
 800f6c4:	f003 031f 	and.w	r3, r3, #31
 800f6c8:	e00a      	b.n	800f6e0 <HAL_ADC_ConfigChannel+0x2b8>
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f6d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6d2:	fa93 f3a3 	rbit	r3, r3
 800f6d6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800f6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6da:	fab3 f383 	clz	r3, r3
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d106      	bne.n	800f6f2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	2102      	movs	r1, #2
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7ff fa8b 	bl	800ec08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2103      	movs	r1, #3
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7ff fa71 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f6fe:	4603      	mov	r3, r0
 800f700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <HAL_ADC_ConfigChannel+0x2f6>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2103      	movs	r1, #3
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff fa66 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f714:	4603      	mov	r3, r0
 800f716:	0e9b      	lsrs	r3, r3, #26
 800f718:	f003 021f 	and.w	r2, r3, #31
 800f71c:	e010      	b.n	800f740 <HAL_ADC_ConfigChannel+0x318>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2103      	movs	r1, #3
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff fa5b 	bl	800ebe0 <LL_ADC_GetOffsetChannel>
 800f72a:	4603      	mov	r3, r0
 800f72c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f730:	fa93 f3a3 	rbit	r3, r3
 800f734:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800f736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f738:	fab3 f383 	clz	r3, r3
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	461a      	mov	r2, r3
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d105      	bne.n	800f758 <HAL_ADC_ConfigChannel+0x330>
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	0e9b      	lsrs	r3, r3, #26
 800f752:	f003 031f 	and.w	r3, r3, #31
 800f756:	e00a      	b.n	800f76e <HAL_ADC_ConfigChannel+0x346>
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f760:	fa93 f3a3 	rbit	r3, r3
 800f764:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800f766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f768:	fab3 f383 	clz	r3, r3
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	429a      	cmp	r2, r3
 800f770:	d106      	bne.n	800f780 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2200      	movs	r2, #0
 800f778:	2103      	movs	r1, #3
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7ff fa44 	bl	800ec08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fb55 	bl	800ee34 <LL_ADC_IsEnabled>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f040 810c 	bne.w	800f9aa <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	f7ff faae 	bl	800ed00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	4aa8      	ldr	r2, [pc, #672]	; (800fa4c <HAL_ADC_ConfigChannel+0x624>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	f040 80fd 	bne.w	800f9aa <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10b      	bne.n	800f7d8 <HAL_ADC_ConfigChannel+0x3b0>
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	0e9b      	lsrs	r3, r3, #26
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	f003 031f 	and.w	r3, r3, #31
 800f7cc:	2b09      	cmp	r3, #9
 800f7ce:	bf94      	ite	ls
 800f7d0:	2301      	movls	r3, #1
 800f7d2:	2300      	movhi	r3, #0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	e012      	b.n	800f7fe <HAL_ADC_ConfigChannel+0x3d6>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e0:	fa93 f3a3 	rbit	r3, r3
 800f7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e8:	fab3 f383 	clz	r3, r3
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	f003 031f 	and.w	r3, r3, #31
 800f7f4:	2b09      	cmp	r3, #9
 800f7f6:	bf94      	ite	ls
 800f7f8:	2301      	movls	r3, #1
 800f7fa:	2300      	movhi	r3, #0
 800f7fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d064      	beq.n	800f8cc <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d107      	bne.n	800f81e <HAL_ADC_ConfigChannel+0x3f6>
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	0e9b      	lsrs	r3, r3, #26
 800f814:	3301      	adds	r3, #1
 800f816:	069b      	lsls	r3, r3, #26
 800f818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800f81c:	e00e      	b.n	800f83c <HAL_ADC_ConfigChannel+0x414>
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f826:	fa93 f3a3 	rbit	r3, r3
 800f82a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800f82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82e:	fab3 f383 	clz	r3, r3
 800f832:	b2db      	uxtb	r3, r3
 800f834:	3301      	adds	r3, #1
 800f836:	069b      	lsls	r3, r3, #26
 800f838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f844:	2b00      	cmp	r3, #0
 800f846:	d109      	bne.n	800f85c <HAL_ADC_ConfigChannel+0x434>
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	0e9b      	lsrs	r3, r3, #26
 800f84e:	3301      	adds	r3, #1
 800f850:	f003 031f 	and.w	r3, r3, #31
 800f854:	2101      	movs	r1, #1
 800f856:	fa01 f303 	lsl.w	r3, r1, r3
 800f85a:	e010      	b.n	800f87e <HAL_ADC_ConfigChannel+0x456>
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	fa93 f3a3 	rbit	r3, r3
 800f868:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	fab3 f383 	clz	r3, r3
 800f870:	b2db      	uxtb	r3, r3
 800f872:	3301      	adds	r3, #1
 800f874:	f003 031f 	and.w	r3, r3, #31
 800f878:	2101      	movs	r1, #1
 800f87a:	fa01 f303 	lsl.w	r3, r1, r3
 800f87e:	ea42 0103 	orr.w	r1, r2, r3
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10a      	bne.n	800f8a4 <HAL_ADC_ConfigChannel+0x47c>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	0e9b      	lsrs	r3, r3, #26
 800f894:	3301      	adds	r3, #1
 800f896:	f003 021f 	and.w	r2, r3, #31
 800f89a:	4613      	mov	r3, r2
 800f89c:	005b      	lsls	r3, r3, #1
 800f89e:	4413      	add	r3, r2
 800f8a0:	051b      	lsls	r3, r3, #20
 800f8a2:	e011      	b.n	800f8c8 <HAL_ADC_ConfigChannel+0x4a0>
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ac:	fa93 f3a3 	rbit	r3, r3
 800f8b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b4:	fab3 f383 	clz	r3, r3
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	f003 021f 	and.w	r2, r3, #31
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	4413      	add	r3, r2
 800f8c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800f8c8:	430b      	orrs	r3, r1
 800f8ca:	e069      	b.n	800f9a0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d107      	bne.n	800f8e8 <HAL_ADC_ConfigChannel+0x4c0>
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	0e9b      	lsrs	r3, r3, #26
 800f8de:	3301      	adds	r3, #1
 800f8e0:	069b      	lsls	r3, r3, #26
 800f8e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800f8e6:	e00e      	b.n	800f906 <HAL_ADC_ConfigChannel+0x4de>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	fa93 f3a3 	rbit	r3, r3
 800f8f4:	61fb      	str	r3, [r7, #28]
  return result;
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	fab3 f383 	clz	r3, r3
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	3301      	adds	r3, #1
 800f900:	069b      	lsls	r3, r3, #26
 800f902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d109      	bne.n	800f926 <HAL_ADC_ConfigChannel+0x4fe>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	0e9b      	lsrs	r3, r3, #26
 800f918:	3301      	adds	r3, #1
 800f91a:	f003 031f 	and.w	r3, r3, #31
 800f91e:	2101      	movs	r1, #1
 800f920:	fa01 f303 	lsl.w	r3, r1, r3
 800f924:	e010      	b.n	800f948 <HAL_ADC_ConfigChannel+0x520>
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	fa93 f3a3 	rbit	r3, r3
 800f932:	617b      	str	r3, [r7, #20]
  return result;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	fab3 f383 	clz	r3, r3
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	3301      	adds	r3, #1
 800f93e:	f003 031f 	and.w	r3, r3, #31
 800f942:	2101      	movs	r1, #1
 800f944:	fa01 f303 	lsl.w	r3, r1, r3
 800f948:	ea42 0103 	orr.w	r1, r2, r3
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10d      	bne.n	800f974 <HAL_ADC_ConfigChannel+0x54c>
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	0e9b      	lsrs	r3, r3, #26
 800f95e:	3301      	adds	r3, #1
 800f960:	f003 021f 	and.w	r2, r3, #31
 800f964:	4613      	mov	r3, r2
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	4413      	add	r3, r2
 800f96a:	3b1e      	subs	r3, #30
 800f96c:	051b      	lsls	r3, r3, #20
 800f96e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f972:	e014      	b.n	800f99e <HAL_ADC_ConfigChannel+0x576>
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	fa93 f3a3 	rbit	r3, r3
 800f980:	60fb      	str	r3, [r7, #12]
  return result;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	fab3 f383 	clz	r3, r3
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	3301      	adds	r3, #1
 800f98c:	f003 021f 	and.w	r2, r3, #31
 800f990:	4613      	mov	r3, r2
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	4413      	add	r3, r2
 800f996:	3b1e      	subs	r3, #30
 800f998:	051b      	lsls	r3, r3, #20
 800f99a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800f99e:	430b      	orrs	r3, r1
 800f9a0:	683a      	ldr	r2, [r7, #0]
 800f9a2:	6892      	ldr	r2, [r2, #8]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	f7ff f983 	bl	800ecb0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	4b28      	ldr	r3, [pc, #160]	; (800fa50 <HAL_ADC_ConfigChannel+0x628>)
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d07c      	beq.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f9b6:	4827      	ldr	r0, [pc, #156]	; (800fa54 <HAL_ADC_ConfigChannel+0x62c>)
 800f9b8:	f7ff f8e2 	bl	800eb80 <LL_ADC_GetCommonPathInternalCh>
 800f9bc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a24      	ldr	r2, [pc, #144]	; (800fa58 <HAL_ADC_ConfigChannel+0x630>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d126      	bne.n	800fa18 <HAL_ADC_ConfigChannel+0x5f0>
 800f9ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d120      	bne.n	800fa18 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a20      	ldr	r2, [pc, #128]	; (800fa5c <HAL_ADC_ConfigChannel+0x634>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d167      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800f9e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	481a      	ldr	r0, [pc, #104]	; (800fa54 <HAL_ADC_ConfigChannel+0x62c>)
 800f9ec:	f7ff f8b5 	bl	800eb5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800f9f0:	4b1b      	ldr	r3, [pc, #108]	; (800fa60 <HAL_ADC_ConfigChannel+0x638>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	099b      	lsrs	r3, r3, #6
 800f9f6:	4a1b      	ldr	r2, [pc, #108]	; (800fa64 <HAL_ADC_ConfigChannel+0x63c>)
 800f9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9fc:	099a      	lsrs	r2, r3, #6
 800f9fe:	4613      	mov	r3, r2
 800fa00:	005b      	lsls	r3, r3, #1
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800fa08:	e002      	b.n	800fa10 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1f9      	bne.n	800fa0a <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800fa16:	e04b      	b.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a12      	ldr	r2, [pc, #72]	; (800fa68 <HAL_ADC_ConfigChannel+0x640>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d124      	bne.n	800fa6c <HAL_ADC_ConfigChannel+0x644>
 800fa22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d11e      	bne.n	800fa6c <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a0a      	ldr	r2, [pc, #40]	; (800fa5c <HAL_ADC_ConfigChannel+0x634>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d13b      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fa38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fa40:	4619      	mov	r1, r3
 800fa42:	4804      	ldr	r0, [pc, #16]	; (800fa54 <HAL_ADC_ConfigChannel+0x62c>)
 800fa44:	f7ff f889 	bl	800eb5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800fa48:	e032      	b.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
 800fa4a:	bf00      	nop
 800fa4c:	407f0000 	.word	0x407f0000
 800fa50:	80080000 	.word	0x80080000
 800fa54:	50040300 	.word	0x50040300
 800fa58:	c7520000 	.word	0xc7520000
 800fa5c:	50040000 	.word	0x50040000
 800fa60:	2000018c 	.word	0x2000018c
 800fa64:	053e2d63 	.word	0x053e2d63
 800fa68:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a14      	ldr	r2, [pc, #80]	; (800fac4 <HAL_ADC_ConfigChannel+0x69c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d11c      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800fa76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d116      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a10      	ldr	r2, [pc, #64]	; (800fac8 <HAL_ADC_ConfigChannel+0x6a0>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d111      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fa8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa94:	4619      	mov	r1, r3
 800fa96:	480d      	ldr	r0, [pc, #52]	; (800facc <HAL_ADC_ConfigChannel+0x6a4>)
 800fa98:	f7ff f85f 	bl	800eb5a <LL_ADC_SetCommonPathInternalCh>
 800fa9c:	e008      	b.n	800fab0 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa2:	f043 0220 	orr.w	r2, r3, #32
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800faaa:	2301      	movs	r3, #1
 800faac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800fab8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3798      	adds	r7, #152	; 0x98
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	80000001 	.word	0x80000001
 800fac8:	50040000 	.word	0x50040000
 800facc:	50040300 	.word	0x50040300

0800fad0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b088      	sub	sp, #32
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800fada:	2300      	movs	r3, #0
 800fadc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff f9f2 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800faec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7ff fa13 	bl	800ef1e <LL_ADC_INJ_IsConversionOngoing>
 800faf8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d103      	bne.n	800fb08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 8090 	beq.w	800fc28 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d02a      	beq.n	800fb6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7e5b      	ldrb	r3, [r3, #25]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d126      	bne.n	800fb6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	7e1b      	ldrb	r3, [r3, #24]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d122      	bne.n	800fb6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800fb26:	2301      	movs	r3, #1
 800fb28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800fb2a:	e014      	b.n	800fb56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	4a41      	ldr	r2, [pc, #260]	; (800fc34 <ADC_ConversionStop+0x164>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d90d      	bls.n	800fb50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb38:	f043 0210 	orr.w	r2, r3, #16
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb44:	f043 0201 	orr.w	r2, r3, #1
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e06c      	b.n	800fc2a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	3301      	adds	r3, #1
 800fb54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb60:	2b40      	cmp	r3, #64	; 0x40
 800fb62:	d1e3      	bne.n	800fb2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2240      	movs	r2, #64	; 0x40
 800fb6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d014      	beq.n	800fb9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7ff f9aa 	bl	800eed0 <LL_ADC_REG_IsConversionOngoing>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00c      	beq.n	800fb9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff f967 	bl	800ee5a <LL_ADC_IsDisableOngoing>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d104      	bne.n	800fb9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7ff f986 	bl	800eea8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d014      	beq.n	800fbcc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7ff f9b9 	bl	800ef1e <LL_ADC_INJ_IsConversionOngoing>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00c      	beq.n	800fbcc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff f94f 	bl	800ee5a <LL_ADC_IsDisableOngoing>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d104      	bne.n	800fbcc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff f995 	bl	800eef6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d004      	beq.n	800fbdc <ADC_ConversionStop+0x10c>
 800fbd2:	2b03      	cmp	r3, #3
 800fbd4:	d105      	bne.n	800fbe2 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800fbd6:	230c      	movs	r3, #12
 800fbd8:	617b      	str	r3, [r7, #20]
        break;
 800fbda:	e005      	b.n	800fbe8 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800fbdc:	2308      	movs	r3, #8
 800fbde:	617b      	str	r3, [r7, #20]
        break;
 800fbe0:	e002      	b.n	800fbe8 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800fbe2:	2304      	movs	r3, #4
 800fbe4:	617b      	str	r3, [r7, #20]
        break;
 800fbe6:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800fbe8:	f7fe ff76 	bl	800ead8 <HAL_GetTick>
 800fbec:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800fbee:	e014      	b.n	800fc1a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800fbf0:	f7fe ff72 	bl	800ead8 <HAL_GetTick>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	2b05      	cmp	r3, #5
 800fbfc:	d90d      	bls.n	800fc1a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc02:	f043 0210 	orr.w	r2, r3, #16
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0e:	f043 0201 	orr.w	r2, r3, #1
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800fc16:	2301      	movs	r3, #1
 800fc18:	e007      	b.n	800fc2a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	689a      	ldr	r2, [r3, #8]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	4013      	ands	r3, r2
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e3      	bne.n	800fbf0 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3720      	adds	r7, #32
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	a33fffff 	.word	0xa33fffff

0800fc38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7ff f8f5 	bl	800ee34 <LL_ADC_IsEnabled>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d146      	bne.n	800fcde <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	689a      	ldr	r2, [r3, #8]
 800fc56:	4b24      	ldr	r3, [pc, #144]	; (800fce8 <ADC_Enable+0xb0>)
 800fc58:	4013      	ands	r3, r2
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00d      	beq.n	800fc7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc62:	f043 0210 	orr.w	r2, r3, #16
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc6e:	f043 0201 	orr.w	r2, r3, #1
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
 800fc78:	e032      	b.n	800fce0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff f8b0 	bl	800ede4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800fc84:	f7fe ff28 	bl	800ead8 <HAL_GetTick>
 800fc88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800fc8a:	e021      	b.n	800fcd0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff f8cf 	bl	800ee34 <LL_ADC_IsEnabled>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d104      	bne.n	800fca6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff f89f 	bl	800ede4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fca6:	f7fe ff17 	bl	800ead8 <HAL_GetTick>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d90d      	bls.n	800fcd0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcb8:	f043 0210 	orr.w	r2, r3, #16
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc4:	f043 0201 	orr.w	r2, r3, #1
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800fccc:	2301      	movs	r3, #1
 800fcce:	e007      	b.n	800fce0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f003 0301 	and.w	r3, r3, #1
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d1d6      	bne.n	800fc8c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800fcde:	2300      	movs	r3, #0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	8000003f 	.word	0x8000003f

0800fcec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff f8ae 	bl	800ee5a <LL_ADC_IsDisableOngoing>
 800fcfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff f895 	bl	800ee34 <LL_ADC_IsEnabled>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d040      	beq.n	800fd92 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d13d      	bne.n	800fd92 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	f003 030d 	and.w	r3, r3, #13
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d10c      	bne.n	800fd3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff f86f 	bl	800ee0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2203      	movs	r2, #3
 800fd34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800fd36:	f7fe fecf 	bl	800ead8 <HAL_GetTick>
 800fd3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800fd3c:	e022      	b.n	800fd84 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd42:	f043 0210 	orr.w	r2, r3, #16
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd4e:	f043 0201 	orr.w	r2, r3, #1
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e01c      	b.n	800fd94 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800fd5a:	f7fe febd 	bl	800ead8 <HAL_GetTick>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	2b02      	cmp	r3, #2
 800fd66:	d90d      	bls.n	800fd84 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd6c:	f043 0210 	orr.w	r2, r3, #16
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd78:	f043 0201 	orr.w	r2, r3, #1
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800fd80:	2301      	movs	r3, #1
 800fd82:	e007      	b.n	800fd94 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	f003 0301 	and.w	r3, r3, #1
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e3      	bne.n	800fd5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800fdac:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <__NVIC_SetPriorityGrouping+0x44>)
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800fdb2:	68ba      	ldr	r2, [r7, #8]
 800fdb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800fdb8:	4013      	ands	r3, r2
 800fdba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800fdc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800fdc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fdcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800fdce:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <__NVIC_SetPriorityGrouping+0x44>)
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	60d3      	str	r3, [r2, #12]
}
 800fdd4:	bf00      	nop
 800fdd6:	3714      	adds	r7, #20
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	e000ed00 	.word	0xe000ed00

0800fde4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800fde4:	b480      	push	{r7}
 800fde6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800fde8:	4b04      	ldr	r3, [pc, #16]	; (800fdfc <__NVIC_GetPriorityGrouping+0x18>)
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	0a1b      	lsrs	r3, r3, #8
 800fdee:	f003 0307 	and.w	r3, r3, #7
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr
 800fdfc:	e000ed00 	.word	0xe000ed00

0800fe00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	db0b      	blt.n	800fe2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fe12:	79fb      	ldrb	r3, [r7, #7]
 800fe14:	f003 021f 	and.w	r2, r3, #31
 800fe18:	4907      	ldr	r1, [pc, #28]	; (800fe38 <__NVIC_EnableIRQ+0x38>)
 800fe1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe1e:	095b      	lsrs	r3, r3, #5
 800fe20:	2001      	movs	r0, #1
 800fe22:	fa00 f202 	lsl.w	r2, r0, r2
 800fe26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800fe2a:	bf00      	nop
 800fe2c:	370c      	adds	r7, #12
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	e000e100 	.word	0xe000e100

0800fe3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fe48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	db0a      	blt.n	800fe66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	490c      	ldr	r1, [pc, #48]	; (800fe88 <__NVIC_SetPriority+0x4c>)
 800fe56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe5a:	0112      	lsls	r2, r2, #4
 800fe5c:	b2d2      	uxtb	r2, r2
 800fe5e:	440b      	add	r3, r1
 800fe60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800fe64:	e00a      	b.n	800fe7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	b2da      	uxtb	r2, r3
 800fe6a:	4908      	ldr	r1, [pc, #32]	; (800fe8c <__NVIC_SetPriority+0x50>)
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
 800fe6e:	f003 030f 	and.w	r3, r3, #15
 800fe72:	3b04      	subs	r3, #4
 800fe74:	0112      	lsls	r2, r2, #4
 800fe76:	b2d2      	uxtb	r2, r2
 800fe78:	440b      	add	r3, r1
 800fe7a:	761a      	strb	r2, [r3, #24]
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr
 800fe88:	e000e100 	.word	0xe000e100
 800fe8c:	e000ed00 	.word	0xe000ed00

0800fe90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b089      	sub	sp, #36	; 0x24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f003 0307 	and.w	r3, r3, #7
 800fea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	f1c3 0307 	rsb	r3, r3, #7
 800feaa:	2b04      	cmp	r3, #4
 800feac:	bf28      	it	cs
 800feae:	2304      	movcs	r3, #4
 800feb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	3304      	adds	r3, #4
 800feb6:	2b06      	cmp	r3, #6
 800feb8:	d902      	bls.n	800fec0 <NVIC_EncodePriority+0x30>
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	3b03      	subs	r3, #3
 800febe:	e000      	b.n	800fec2 <NVIC_EncodePriority+0x32>
 800fec0:	2300      	movs	r3, #0
 800fec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fec4:	f04f 32ff 	mov.w	r2, #4294967295
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	fa02 f303 	lsl.w	r3, r2, r3
 800fece:	43da      	mvns	r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	401a      	ands	r2, r3
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fed8:	f04f 31ff 	mov.w	r1, #4294967295
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	fa01 f303 	lsl.w	r3, r1, r3
 800fee2:	43d9      	mvns	r1, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fee8:	4313      	orrs	r3, r2
         );
}
 800feea:	4618      	mov	r0, r3
 800feec:	3724      	adds	r7, #36	; 0x24
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b082      	sub	sp, #8
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7ff ff4c 	bl	800fd9c <__NVIC_SetPriorityGrouping>
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
 800ff18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ff1e:	f7ff ff61 	bl	800fde4 <__NVIC_GetPriorityGrouping>
 800ff22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	68b9      	ldr	r1, [r7, #8]
 800ff28:	6978      	ldr	r0, [r7, #20]
 800ff2a:	f7ff ffb1 	bl	800fe90 <NVIC_EncodePriority>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff34:	4611      	mov	r1, r2
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff ff80 	bl	800fe3c <__NVIC_SetPriority>
}
 800ff3c:	bf00      	nop
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ff4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff ff54 	bl	800fe00 <__NVIC_EnableIRQ>
}
 800ff58:	bf00      	nop
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d005      	beq.n	800ff84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2204      	movs	r2, #4
 800ff7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	73fb      	strb	r3, [r7, #15]
 800ff82:	e029      	b.n	800ffd8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f022 020e 	bic.w	r2, r2, #14
 800ff92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f022 0201 	bic.w	r2, r2, #1
 800ffa2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffa8:	f003 021c 	and.w	r2, r3, #28
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	fa01 f202 	lsl.w	r2, r1, r2
 800ffb6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d003      	beq.n	800ffd8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	4798      	blx	r3
    }
  }
  return status;
 800ffd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b087      	sub	sp, #28
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ffee:	2300      	movs	r3, #0
 800fff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800fff2:	e154      	b.n	801029e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	2101      	movs	r1, #1
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	fa01 f303 	lsl.w	r3, r1, r3
 8010000:	4013      	ands	r3, r2
 8010002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 8146 	beq.w	8010298 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d00b      	beq.n	801002c <HAL_GPIO_Init+0x48>
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	2b02      	cmp	r3, #2
 801001a:	d007      	beq.n	801002c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010020:	2b11      	cmp	r3, #17
 8010022:	d003      	beq.n	801002c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	2b12      	cmp	r3, #18
 801002a:	d130      	bne.n	801008e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	2203      	movs	r2, #3
 8010038:	fa02 f303 	lsl.w	r3, r2, r3
 801003c:	43db      	mvns	r3, r3
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	4013      	ands	r3, r2
 8010042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	68da      	ldr	r2, [r3, #12]
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	005b      	lsls	r3, r3, #1
 801004c:	fa02 f303 	lsl.w	r3, r2, r3
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	4313      	orrs	r3, r2
 8010054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010062:	2201      	movs	r2, #1
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	fa02 f303 	lsl.w	r3, r2, r3
 801006a:	43db      	mvns	r3, r3
 801006c:	693a      	ldr	r2, [r7, #16]
 801006e:	4013      	ands	r3, r2
 8010070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	091b      	lsrs	r3, r3, #4
 8010078:	f003 0201 	and.w	r2, r3, #1
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	fa02 f303 	lsl.w	r3, r2, r3
 8010082:	693a      	ldr	r2, [r7, #16]
 8010084:	4313      	orrs	r3, r2
 8010086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	693a      	ldr	r2, [r7, #16]
 801008c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	2203      	movs	r2, #3
 801009a:	fa02 f303 	lsl.w	r3, r2, r3
 801009e:	43db      	mvns	r3, r3
 80100a0:	693a      	ldr	r2, [r7, #16]
 80100a2:	4013      	ands	r3, r2
 80100a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	689a      	ldr	r2, [r3, #8]
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	fa02 f303 	lsl.w	r3, r2, r3
 80100b2:	693a      	ldr	r2, [r7, #16]
 80100b4:	4313      	orrs	r3, r2
 80100b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	693a      	ldr	r2, [r7, #16]
 80100bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	d003      	beq.n	80100ce <HAL_GPIO_Init+0xea>
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	2b12      	cmp	r3, #18
 80100cc:	d123      	bne.n	8010116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	08da      	lsrs	r2, r3, #3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	3208      	adds	r2, #8
 80100d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	f003 0307 	and.w	r3, r3, #7
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	220f      	movs	r2, #15
 80100e6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ea:	43db      	mvns	r3, r3
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	4013      	ands	r3, r2
 80100f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	691a      	ldr	r2, [r3, #16]
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f003 0307 	and.w	r3, r3, #7
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	4313      	orrs	r3, r2
 8010106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	08da      	lsrs	r2, r3, #3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	3208      	adds	r2, #8
 8010110:	6939      	ldr	r1, [r7, #16]
 8010112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	2203      	movs	r2, #3
 8010122:	fa02 f303 	lsl.w	r3, r2, r3
 8010126:	43db      	mvns	r3, r3
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	4013      	ands	r3, r2
 801012c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	f003 0203 	and.w	r2, r3, #3
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	fa02 f303 	lsl.w	r3, r2, r3
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	4313      	orrs	r3, r2
 8010142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 80a0 	beq.w	8010298 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010158:	4b58      	ldr	r3, [pc, #352]	; (80102bc <HAL_GPIO_Init+0x2d8>)
 801015a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801015c:	4a57      	ldr	r2, [pc, #348]	; (80102bc <HAL_GPIO_Init+0x2d8>)
 801015e:	f043 0301 	orr.w	r3, r3, #1
 8010162:	6613      	str	r3, [r2, #96]	; 0x60
 8010164:	4b55      	ldr	r3, [pc, #340]	; (80102bc <HAL_GPIO_Init+0x2d8>)
 8010166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	60bb      	str	r3, [r7, #8]
 801016e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8010170:	4a53      	ldr	r2, [pc, #332]	; (80102c0 <HAL_GPIO_Init+0x2dc>)
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	089b      	lsrs	r3, r3, #2
 8010176:	3302      	adds	r3, #2
 8010178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801017c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f003 0303 	and.w	r3, r3, #3
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	220f      	movs	r2, #15
 8010188:	fa02 f303 	lsl.w	r3, r2, r3
 801018c:	43db      	mvns	r3, r3
 801018e:	693a      	ldr	r2, [r7, #16]
 8010190:	4013      	ands	r3, r2
 8010192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801019a:	d019      	beq.n	80101d0 <HAL_GPIO_Init+0x1ec>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4a49      	ldr	r2, [pc, #292]	; (80102c4 <HAL_GPIO_Init+0x2e0>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d013      	beq.n	80101cc <HAL_GPIO_Init+0x1e8>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4a48      	ldr	r2, [pc, #288]	; (80102c8 <HAL_GPIO_Init+0x2e4>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d00d      	beq.n	80101c8 <HAL_GPIO_Init+0x1e4>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a47      	ldr	r2, [pc, #284]	; (80102cc <HAL_GPIO_Init+0x2e8>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d007      	beq.n	80101c4 <HAL_GPIO_Init+0x1e0>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4a46      	ldr	r2, [pc, #280]	; (80102d0 <HAL_GPIO_Init+0x2ec>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d101      	bne.n	80101c0 <HAL_GPIO_Init+0x1dc>
 80101bc:	2304      	movs	r3, #4
 80101be:	e008      	b.n	80101d2 <HAL_GPIO_Init+0x1ee>
 80101c0:	2307      	movs	r3, #7
 80101c2:	e006      	b.n	80101d2 <HAL_GPIO_Init+0x1ee>
 80101c4:	2303      	movs	r3, #3
 80101c6:	e004      	b.n	80101d2 <HAL_GPIO_Init+0x1ee>
 80101c8:	2302      	movs	r3, #2
 80101ca:	e002      	b.n	80101d2 <HAL_GPIO_Init+0x1ee>
 80101cc:	2301      	movs	r3, #1
 80101ce:	e000      	b.n	80101d2 <HAL_GPIO_Init+0x1ee>
 80101d0:	2300      	movs	r3, #0
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	f002 0203 	and.w	r2, r2, #3
 80101d8:	0092      	lsls	r2, r2, #2
 80101da:	4093      	lsls	r3, r2
 80101dc:	693a      	ldr	r2, [r7, #16]
 80101de:	4313      	orrs	r3, r2
 80101e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80101e2:	4937      	ldr	r1, [pc, #220]	; (80102c0 <HAL_GPIO_Init+0x2dc>)
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	089b      	lsrs	r3, r3, #2
 80101e8:	3302      	adds	r3, #2
 80101ea:	693a      	ldr	r2, [r7, #16]
 80101ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80101f0:	4b38      	ldr	r3, [pc, #224]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	43db      	mvns	r3, r3
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	4013      	ands	r3, r2
 80101fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010208:	2b00      	cmp	r3, #0
 801020a:	d003      	beq.n	8010214 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801020c:	693a      	ldr	r2, [r7, #16]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4313      	orrs	r3, r2
 8010212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010214:	4a2f      	ldr	r2, [pc, #188]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 801021a:	4b2e      	ldr	r3, [pc, #184]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	43db      	mvns	r3, r3
 8010224:	693a      	ldr	r2, [r7, #16]
 8010226:	4013      	ands	r3, r2
 8010228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8010236:	693a      	ldr	r2, [r7, #16]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	4313      	orrs	r3, r2
 801023c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801023e:	4a25      	ldr	r2, [pc, #148]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010244:	4b23      	ldr	r3, [pc, #140]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	43db      	mvns	r3, r3
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	4013      	ands	r3, r2
 8010252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4313      	orrs	r3, r2
 8010266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010268:	4a1a      	ldr	r2, [pc, #104]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801026e:	4b19      	ldr	r3, [pc, #100]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	43db      	mvns	r3, r3
 8010278:	693a      	ldr	r2, [r7, #16]
 801027a:	4013      	ands	r3, r2
 801027c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010286:	2b00      	cmp	r3, #0
 8010288:	d003      	beq.n	8010292 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4313      	orrs	r3, r2
 8010290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010292:	4a10      	ldr	r2, [pc, #64]	; (80102d4 <HAL_GPIO_Init+0x2f0>)
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	3301      	adds	r3, #1
 801029c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	fa22 f303 	lsr.w	r3, r2, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f47f aea3 	bne.w	800fff4 <HAL_GPIO_Init+0x10>
  }
}
 80102ae:	bf00      	nop
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	40021000 	.word	0x40021000
 80102c0:	40010000 	.word	0x40010000
 80102c4:	48000400 	.word	0x48000400
 80102c8:	48000800 	.word	0x48000800
 80102cc:	48000c00 	.word	0x48000c00
 80102d0:	48001000 	.word	0x48001000
 80102d4:	40010400 	.word	0x40010400

080102d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	691a      	ldr	r2, [r3, #16]
 80102e8:	887b      	ldrh	r3, [r7, #2]
 80102ea:	4013      	ands	r3, r2
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d002      	beq.n	80102f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80102f0:	2301      	movs	r3, #1
 80102f2:	73fb      	strb	r3, [r7, #15]
 80102f4:	e001      	b.n	80102fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80102f6:	2300      	movs	r3, #0
 80102f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80102fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	807b      	strh	r3, [r7, #2]
 8010314:	4613      	mov	r3, r2
 8010316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010318:	787b      	ldrb	r3, [r7, #1]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d003      	beq.n	8010326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801031e:	887a      	ldrh	r2, [r7, #2]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010324:	e002      	b.n	801032c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010326:	887a      	ldrh	r2, [r7, #2]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801032c:	bf00      	nop
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8010342:	4b08      	ldr	r3, [pc, #32]	; (8010364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010344:	695a      	ldr	r2, [r3, #20]
 8010346:	88fb      	ldrh	r3, [r7, #6]
 8010348:	4013      	ands	r3, r2
 801034a:	2b00      	cmp	r3, #0
 801034c:	d006      	beq.n	801035c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801034e:	4a05      	ldr	r2, [pc, #20]	; (8010364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010350:	88fb      	ldrh	r3, [r7, #6]
 8010352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010354:	88fb      	ldrh	r3, [r7, #6]
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f806 	bl	8010368 <HAL_GPIO_EXTI_Callback>
  }
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	40010400 	.word	0x40010400

08010368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	4603      	mov	r3, r0
 8010370:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8010372:	bf00      	nop
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b082      	sub	sp, #8
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801038c:	2301      	movs	r3, #1
 801038e:	e081      	b.n	8010494 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7fe f84d 	bl	800e444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2224      	movs	r2, #36	; 0x24
 80103ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f022 0201 	bic.w	r2, r2, #1
 80103c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	685a      	ldr	r2, [r3, #4]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80103ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689a      	ldr	r2, [r3, #8]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d107      	bne.n	80103f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	689a      	ldr	r2, [r3, #8]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80103f4:	609a      	str	r2, [r3, #8]
 80103f6:	e006      	b.n	8010406 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	689a      	ldr	r2, [r3, #8]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8010404:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	2b02      	cmp	r3, #2
 801040c:	d104      	bne.n	8010418 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010416:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	6812      	ldr	r2, [r2, #0]
 8010422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801042a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	68da      	ldr	r2, [r3, #12]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801043a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	691a      	ldr	r2, [r3, #16]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	695b      	ldr	r3, [r3, #20]
 8010444:	ea42 0103 	orr.w	r1, r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	699b      	ldr	r3, [r3, #24]
 801044c:	021a      	lsls	r2, r3, #8
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	430a      	orrs	r2, r1
 8010454:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	69d9      	ldr	r1, [r3, #28]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a1a      	ldr	r2, [r3, #32]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	430a      	orrs	r2, r1
 8010464:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f042 0201 	orr.w	r2, r2, #1
 8010474:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2220      	movs	r2, #32
 8010480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b088      	sub	sp, #32
 80104a0:	af02      	add	r7, sp, #8
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	607a      	str	r2, [r7, #4]
 80104a6:	461a      	mov	r2, r3
 80104a8:	460b      	mov	r3, r1
 80104aa:	817b      	strh	r3, [r7, #10]
 80104ac:	4613      	mov	r3, r2
 80104ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	2b20      	cmp	r3, #32
 80104ba:	f040 80da 	bne.w	8010672 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d101      	bne.n	80104cc <HAL_I2C_Master_Transmit+0x30>
 80104c8:	2302      	movs	r3, #2
 80104ca:	e0d3      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2201      	movs	r2, #1
 80104d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80104d4:	f7fe fb00 	bl	800ead8 <HAL_GetTick>
 80104d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	2319      	movs	r3, #25
 80104e0:	2201      	movs	r2, #1
 80104e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f000 fdc4 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	e0be      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2221      	movs	r2, #33	; 0x21
 80104fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2210      	movs	r2, #16
 8010502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	893a      	ldrh	r2, [r7, #8]
 8010516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010522:	b29b      	uxth	r3, r3
 8010524:	2bff      	cmp	r3, #255	; 0xff
 8010526:	d90e      	bls.n	8010546 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	22ff      	movs	r2, #255	; 0xff
 801052c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010532:	b2da      	uxtb	r2, r3
 8010534:	8979      	ldrh	r1, [r7, #10]
 8010536:	4b51      	ldr	r3, [pc, #324]	; (801067c <HAL_I2C_Master_Transmit+0x1e0>)
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	f000 ff26 	bl	8011390 <I2C_TransferConfig>
 8010544:	e06c      	b.n	8010620 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801054a:	b29a      	uxth	r2, r3
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010554:	b2da      	uxtb	r2, r3
 8010556:	8979      	ldrh	r1, [r7, #10]
 8010558:	4b48      	ldr	r3, [pc, #288]	; (801067c <HAL_I2C_Master_Transmit+0x1e0>)
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	f000 ff15 	bl	8011390 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8010566:	e05b      	b.n	8010620 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	6a39      	ldr	r1, [r7, #32]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f000 fdc1 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d001      	beq.n	801057c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8010578:	2301      	movs	r3, #1
 801057a:	e07b      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010580:	781a      	ldrb	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058c:	1c5a      	adds	r2, r3, #1
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010596:	b29b      	uxth	r3, r3
 8010598:	3b01      	subs	r3, #1
 801059a:	b29a      	uxth	r2, r3
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105a4:	3b01      	subs	r3, #1
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d034      	beq.n	8010620 <HAL_I2C_Master_Transmit+0x184>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d130      	bne.n	8010620 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	2200      	movs	r2, #0
 80105c6:	2180      	movs	r1, #128	; 0x80
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 fd53 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d001      	beq.n	80105d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80105d4:	2301      	movs	r3, #1
 80105d6:	e04d      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105dc:	b29b      	uxth	r3, r3
 80105de:	2bff      	cmp	r3, #255	; 0xff
 80105e0:	d90e      	bls.n	8010600 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	22ff      	movs	r2, #255	; 0xff
 80105e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105ec:	b2da      	uxtb	r2, r3
 80105ee:	8979      	ldrh	r1, [r7, #10]
 80105f0:	2300      	movs	r3, #0
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f000 fec9 	bl	8011390 <I2C_TransferConfig>
 80105fe:	e00f      	b.n	8010620 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010604:	b29a      	uxth	r2, r3
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801060e:	b2da      	uxtb	r2, r3
 8010610:	8979      	ldrh	r1, [r7, #10]
 8010612:	2300      	movs	r3, #0
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f000 feb8 	bl	8011390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010624:	b29b      	uxth	r3, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	d19e      	bne.n	8010568 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	6a39      	ldr	r1, [r7, #32]
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f000 fda0 	bl	8011174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801063a:	2301      	movs	r3, #1
 801063c:	e01a      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2220      	movs	r2, #32
 8010644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6859      	ldr	r1, [r3, #4]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	4b0b      	ldr	r3, [pc, #44]	; (8010680 <HAL_I2C_Master_Transmit+0x1e4>)
 8010652:	400b      	ands	r3, r1
 8010654:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2220      	movs	r2, #32
 801065a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801066e:	2300      	movs	r3, #0
 8010670:	e000      	b.n	8010674 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8010672:	2302      	movs	r3, #2
  }
}
 8010674:	4618      	mov	r0, r3
 8010676:	3718      	adds	r7, #24
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	80002000 	.word	0x80002000
 8010680:	fe00e800 	.word	0xfe00e800

08010684 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b088      	sub	sp, #32
 8010688:	af02      	add	r7, sp, #8
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	607a      	str	r2, [r7, #4]
 801068e:	461a      	mov	r2, r3
 8010690:	460b      	mov	r3, r1
 8010692:	817b      	strh	r3, [r7, #10]
 8010694:	4613      	mov	r3, r2
 8010696:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	2b20      	cmp	r3, #32
 80106a2:	f040 80db 	bne.w	801085c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106ac:	2b01      	cmp	r3, #1
 80106ae:	d101      	bne.n	80106b4 <HAL_I2C_Master_Receive+0x30>
 80106b0:	2302      	movs	r3, #2
 80106b2:	e0d4      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80106bc:	f7fe fa0c 	bl	800ead8 <HAL_GetTick>
 80106c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	2319      	movs	r3, #25
 80106c8:	2201      	movs	r2, #1
 80106ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f000 fcd0 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d001      	beq.n	80106de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	e0bf      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2222      	movs	r2, #34	; 0x22
 80106e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2210      	movs	r2, #16
 80106ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2200      	movs	r2, #0
 80106f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	893a      	ldrh	r2, [r7, #8]
 80106fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801070a:	b29b      	uxth	r3, r3
 801070c:	2bff      	cmp	r3, #255	; 0xff
 801070e:	d90e      	bls.n	801072e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	22ff      	movs	r2, #255	; 0xff
 8010714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801071a:	b2da      	uxtb	r2, r3
 801071c:	8979      	ldrh	r1, [r7, #10]
 801071e:	4b52      	ldr	r3, [pc, #328]	; (8010868 <HAL_I2C_Master_Receive+0x1e4>)
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f000 fe32 	bl	8011390 <I2C_TransferConfig>
 801072c:	e06d      	b.n	801080a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010732:	b29a      	uxth	r2, r3
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801073c:	b2da      	uxtb	r2, r3
 801073e:	8979      	ldrh	r1, [r7, #10]
 8010740:	4b49      	ldr	r3, [pc, #292]	; (8010868 <HAL_I2C_Master_Receive+0x1e4>)
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f000 fe21 	bl	8011390 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 801074e:	e05c      	b.n	801080a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010750:	697a      	ldr	r2, [r7, #20]
 8010752:	6a39      	ldr	r1, [r7, #32]
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f000 fd49 	bl	80111ec <I2C_WaitOnRXNEFlagUntilTimeout>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	e07c      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076e:	b2d2      	uxtb	r2, r2
 8010770:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010780:	3b01      	subs	r3, #1
 8010782:	b29a      	uxth	r2, r3
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801078c:	b29b      	uxth	r3, r3
 801078e:	3b01      	subs	r3, #1
 8010790:	b29a      	uxth	r2, r3
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801079a:	b29b      	uxth	r3, r3
 801079c:	2b00      	cmp	r3, #0
 801079e:	d034      	beq.n	801080a <HAL_I2C_Master_Receive+0x186>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d130      	bne.n	801080a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	2200      	movs	r2, #0
 80107b0:	2180      	movs	r1, #128	; 0x80
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f000 fc5e 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	e04d      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	2bff      	cmp	r3, #255	; 0xff
 80107ca:	d90e      	bls.n	80107ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	22ff      	movs	r2, #255	; 0xff
 80107d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	8979      	ldrh	r1, [r7, #10]
 80107da:	2300      	movs	r3, #0
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f000 fdd4 	bl	8011390 <I2C_TransferConfig>
 80107e8:	e00f      	b.n	801080a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	8979      	ldrh	r1, [r7, #10]
 80107fc:	2300      	movs	r3, #0
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f000 fdc3 	bl	8011390 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801080e:	b29b      	uxth	r3, r3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d19d      	bne.n	8010750 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	6a39      	ldr	r1, [r7, #32]
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f000 fcab 	bl	8011174 <I2C_WaitOnSTOPFlagUntilTimeout>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d001      	beq.n	8010828 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8010824:	2301      	movs	r3, #1
 8010826:	e01a      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	2220      	movs	r2, #32
 801082e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6859      	ldr	r1, [r3, #4]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	4b0c      	ldr	r3, [pc, #48]	; (801086c <HAL_I2C_Master_Receive+0x1e8>)
 801083c:	400b      	ands	r3, r1
 801083e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2220      	movs	r2, #32
 8010844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2200      	movs	r2, #0
 8010854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010858:	2300      	movs	r3, #0
 801085a:	e000      	b.n	801085e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801085c:	2302      	movs	r3, #2
  }
}
 801085e:	4618      	mov	r0, r3
 8010860:	3718      	adds	r7, #24
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	80002400 	.word	0x80002400
 801086c:	fe00e800 	.word	0xfe00e800

08010870 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af02      	add	r7, sp, #8
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	4608      	mov	r0, r1
 801087a:	4611      	mov	r1, r2
 801087c:	461a      	mov	r2, r3
 801087e:	4603      	mov	r3, r0
 8010880:	817b      	strh	r3, [r7, #10]
 8010882:	460b      	mov	r3, r1
 8010884:	813b      	strh	r3, [r7, #8]
 8010886:	4613      	mov	r3, r2
 8010888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010890:	b2db      	uxtb	r3, r3
 8010892:	2b20      	cmp	r3, #32
 8010894:	f040 80f9 	bne.w	8010a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <HAL_I2C_Mem_Write+0x34>
 801089e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d105      	bne.n	80108b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	e0ed      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d101      	bne.n	80108be <HAL_I2C_Mem_Write+0x4e>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e0e6      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80108c6:	f7fe f907 	bl	800ead8 <HAL_GetTick>
 80108ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	2319      	movs	r3, #25
 80108d2:	2201      	movs	r2, #1
 80108d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f000 fbcb 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	e0d1      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2221      	movs	r2, #33	; 0x21
 80108ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2240      	movs	r2, #64	; 0x40
 80108f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6a3a      	ldr	r2, [r7, #32]
 8010902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2200      	movs	r2, #0
 801090e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010910:	88f8      	ldrh	r0, [r7, #6]
 8010912:	893a      	ldrh	r2, [r7, #8]
 8010914:	8979      	ldrh	r1, [r7, #10]
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091c:	9300      	str	r3, [sp, #0]
 801091e:	4603      	mov	r3, r0
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f000 fadb 	bl	8010edc <I2C_RequestMemoryWrite>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d005      	beq.n	8010938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010934:	2301      	movs	r3, #1
 8010936:	e0a9      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801093c:	b29b      	uxth	r3, r3
 801093e:	2bff      	cmp	r3, #255	; 0xff
 8010940:	d90e      	bls.n	8010960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	22ff      	movs	r2, #255	; 0xff
 8010946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801094c:	b2da      	uxtb	r2, r3
 801094e:	8979      	ldrh	r1, [r7, #10]
 8010950:	2300      	movs	r3, #0
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f000 fd19 	bl	8011390 <I2C_TransferConfig>
 801095e:	e00f      	b.n	8010980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010964:	b29a      	uxth	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801096e:	b2da      	uxtb	r2, r3
 8010970:	8979      	ldrh	r1, [r7, #10]
 8010972:	2300      	movs	r3, #0
 8010974:	9300      	str	r3, [sp, #0]
 8010976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f000 fd08 	bl	8011390 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f000 fbb5 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d001      	beq.n	8010994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8010990:	2301      	movs	r3, #1
 8010992:	e07b      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010998:	781a      	ldrb	r2, [r3, #0]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	3b01      	subs	r3, #1
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109bc:	3b01      	subs	r3, #1
 80109be:	b29a      	uxth	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d034      	beq.n	8010a38 <HAL_I2C_Mem_Write+0x1c8>
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d130      	bne.n	8010a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	2200      	movs	r2, #0
 80109de:	2180      	movs	r1, #128	; 0x80
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f000 fb47 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80109ec:	2301      	movs	r3, #1
 80109ee:	e04d      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	2bff      	cmp	r3, #255	; 0xff
 80109f8:	d90e      	bls.n	8010a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	22ff      	movs	r2, #255	; 0xff
 80109fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a04:	b2da      	uxtb	r2, r3
 8010a06:	8979      	ldrh	r1, [r7, #10]
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f000 fcbd 	bl	8011390 <I2C_TransferConfig>
 8010a16:	e00f      	b.n	8010a38 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a1c:	b29a      	uxth	r2, r3
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	8979      	ldrh	r1, [r7, #10]
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f000 fcac 	bl	8011390 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d19e      	bne.n	8010980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	f000 fb94 	bl	8011174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e01a      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2220      	movs	r2, #32
 8010a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	6859      	ldr	r1, [r3, #4]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	4b0a      	ldr	r3, [pc, #40]	; (8010a94 <HAL_I2C_Mem_Write+0x224>)
 8010a6a:	400b      	ands	r3, r1
 8010a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2220      	movs	r2, #32
 8010a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	e000      	b.n	8010a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8010a8a:	2302      	movs	r3, #2
  }
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	fe00e800 	.word	0xfe00e800

08010a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b088      	sub	sp, #32
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	4608      	mov	r0, r1
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	817b      	strh	r3, [r7, #10]
 8010aaa:	460b      	mov	r3, r1
 8010aac:	813b      	strh	r3, [r7, #8]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b20      	cmp	r3, #32
 8010abc:	f040 80fd 	bne.w	8010cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ac0:	6a3b      	ldr	r3, [r7, #32]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d002      	beq.n	8010acc <HAL_I2C_Mem_Read+0x34>
 8010ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d105      	bne.n	8010ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e0f1      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d101      	bne.n	8010ae6 <HAL_I2C_Mem_Read+0x4e>
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	e0ea      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010aee:	f7fd fff3 	bl	800ead8 <HAL_GetTick>
 8010af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	2319      	movs	r3, #25
 8010afa:	2201      	movs	r2, #1
 8010afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b00:	68f8      	ldr	r0, [r7, #12]
 8010b02:	f000 fab7 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d001      	beq.n	8010b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e0d5      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2222      	movs	r2, #34	; 0x22
 8010b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2240      	movs	r2, #64	; 0x40
 8010b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2200      	movs	r2, #0
 8010b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6a3a      	ldr	r2, [r7, #32]
 8010b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2200      	movs	r2, #0
 8010b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010b38:	88f8      	ldrh	r0, [r7, #6]
 8010b3a:	893a      	ldrh	r2, [r7, #8]
 8010b3c:	8979      	ldrh	r1, [r7, #10]
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	4603      	mov	r3, r0
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f000 fa1b 	bl	8010f84 <I2C_RequestMemoryRead>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d005      	beq.n	8010b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e0ad      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	2bff      	cmp	r3, #255	; 0xff
 8010b68:	d90e      	bls.n	8010b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	22ff      	movs	r2, #255	; 0xff
 8010b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	8979      	ldrh	r1, [r7, #10]
 8010b78:	4b52      	ldr	r3, [pc, #328]	; (8010cc4 <HAL_I2C_Mem_Read+0x22c>)
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f000 fc05 	bl	8011390 <I2C_TransferConfig>
 8010b86:	e00f      	b.n	8010ba8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	8979      	ldrh	r1, [r7, #10]
 8010b9a:	4b4a      	ldr	r3, [pc, #296]	; (8010cc4 <HAL_I2C_Mem_Read+0x22c>)
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f000 fbf4 	bl	8011390 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bae:	2200      	movs	r2, #0
 8010bb0:	2104      	movs	r1, #4
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f000 fa5e 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e07c      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bcc:	b2d2      	uxtb	r2, r2
 8010bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bde:	3b01      	subs	r3, #1
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	3b01      	subs	r3, #1
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d034      	beq.n	8010c68 <HAL_I2C_Mem_Read+0x1d0>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d130      	bne.n	8010c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2180      	movs	r1, #128	; 0x80
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f000 fa2f 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e04d      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	2bff      	cmp	r3, #255	; 0xff
 8010c28:	d90e      	bls.n	8010c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	22ff      	movs	r2, #255	; 0xff
 8010c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	8979      	ldrh	r1, [r7, #10]
 8010c38:	2300      	movs	r3, #0
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f000 fba5 	bl	8011390 <I2C_TransferConfig>
 8010c46:	e00f      	b.n	8010c68 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	8979      	ldrh	r1, [r7, #10]
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f000 fb94 	bl	8011390 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d19a      	bne.n	8010ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f000 fa7c 	bl	8011174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e01a      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2220      	movs	r2, #32
 8010c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	6859      	ldr	r1, [r3, #4]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	4b0b      	ldr	r3, [pc, #44]	; (8010cc8 <HAL_I2C_Mem_Read+0x230>)
 8010c9a:	400b      	ands	r3, r1
 8010c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2220      	movs	r2, #32
 8010ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	e000      	b.n	8010cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8010cba:	2302      	movs	r3, #2
  }
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3718      	adds	r7, #24
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	80002400 	.word	0x80002400
 8010cc8:	fe00e800 	.word	0xfe00e800

08010ccc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08a      	sub	sp, #40	; 0x28
 8010cd0:	af02      	add	r7, sp, #8
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	607a      	str	r2, [r7, #4]
 8010cd6:	603b      	str	r3, [r7, #0]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b20      	cmp	r3, #32
 8010cea:	f040 80f1 	bne.w	8010ed0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	699b      	ldr	r3, [r3, #24]
 8010cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cfc:	d101      	bne.n	8010d02 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8010cfe:	2302      	movs	r3, #2
 8010d00:	e0e7      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d101      	bne.n	8010d10 <HAL_I2C_IsDeviceReady+0x44>
 8010d0c:	2302      	movs	r3, #2
 8010d0e:	e0e0      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2201      	movs	r2, #1
 8010d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2224      	movs	r2, #36	; 0x24
 8010d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2200      	movs	r2, #0
 8010d24:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d107      	bne.n	8010d3e <HAL_I2C_IsDeviceReady+0x72>
 8010d2e:	897b      	ldrh	r3, [r7, #10]
 8010d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010d3c:	e004      	b.n	8010d48 <HAL_I2C_IsDeviceReady+0x7c>
 8010d3e:	897b      	ldrh	r3, [r7, #10]
 8010d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d44:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8010d4e:	f7fd fec3 	bl	800ead8 <HAL_GetTick>
 8010d52:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	699b      	ldr	r3, [r3, #24]
 8010d5a:	f003 0320 	and.w	r3, r3, #32
 8010d5e:	2b20      	cmp	r3, #32
 8010d60:	bf0c      	ite	eq
 8010d62:	2301      	moveq	r3, #1
 8010d64:	2300      	movne	r3, #0
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	699b      	ldr	r3, [r3, #24]
 8010d70:	f003 0310 	and.w	r3, r3, #16
 8010d74:	2b10      	cmp	r3, #16
 8010d76:	bf0c      	ite	eq
 8010d78:	2301      	moveq	r3, #1
 8010d7a:	2300      	movne	r3, #0
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8010d80:	e034      	b.n	8010dec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d88:	d01a      	beq.n	8010dc0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010d8a:	f7fd fea5 	bl	800ead8 <HAL_GetTick>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	683a      	ldr	r2, [r7, #0]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d302      	bcc.n	8010da0 <HAL_I2C_IsDeviceReady+0xd4>
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10f      	bne.n	8010dc0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2220      	movs	r2, #32
 8010da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dac:	f043 0220 	orr.w	r2, r3, #32
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e088      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	699b      	ldr	r3, [r3, #24]
 8010dc6:	f003 0320 	and.w	r3, r3, #32
 8010dca:	2b20      	cmp	r3, #32
 8010dcc:	bf0c      	ite	eq
 8010dce:	2301      	moveq	r3, #1
 8010dd0:	2300      	movne	r3, #0
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	699b      	ldr	r3, [r3, #24]
 8010ddc:	f003 0310 	and.w	r3, r3, #16
 8010de0:	2b10      	cmp	r3, #16
 8010de2:	bf0c      	ite	eq
 8010de4:	2301      	moveq	r3, #1
 8010de6:	2300      	movne	r3, #0
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8010dec:	7ffb      	ldrb	r3, [r7, #31]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d102      	bne.n	8010df8 <HAL_I2C_IsDeviceReady+0x12c>
 8010df2:	7fbb      	ldrb	r3, [r7, #30]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0c4      	beq.n	8010d82 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	f003 0310 	and.w	r3, r3, #16
 8010e02:	2b10      	cmp	r3, #16
 8010e04:	d01a      	beq.n	8010e3c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	2120      	movs	r1, #32
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f000 f92f 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e058      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2220      	movs	r2, #32
 8010e26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2220      	movs	r2, #32
 8010e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	e04a      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	9300      	str	r3, [sp, #0]
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2200      	movs	r2, #0
 8010e44:	2120      	movs	r1, #32
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f000 f914 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d001      	beq.n	8010e56 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8010e52:	2301      	movs	r3, #1
 8010e54:	e03d      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2210      	movs	r2, #16
 8010e5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2220      	movs	r2, #32
 8010e64:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d118      	bne.n	8010ea0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	685a      	ldr	r2, [r3, #4]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010e7c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	2200      	movs	r2, #0
 8010e86:	2120      	movs	r1, #32
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f000 f8f3 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8010e94:	2301      	movs	r3, #1
 8010e96:	e01c      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2220      	movs	r2, #32
 8010e9e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	f63f af3b 	bhi.w	8010d26 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2220      	movs	r2, #32
 8010eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ebc:	f043 0220 	orr.w	r2, r3, #32
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e000      	b.n	8010ed2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8010ed0:	2302      	movs	r3, #2
  }
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3720      	adds	r7, #32
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
	...

08010edc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af02      	add	r7, sp, #8
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	461a      	mov	r2, r3
 8010eea:	4603      	mov	r3, r0
 8010eec:	817b      	strh	r3, [r7, #10]
 8010eee:	460b      	mov	r3, r1
 8010ef0:	813b      	strh	r3, [r7, #8]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8010ef6:	88fb      	ldrh	r3, [r7, #6]
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	8979      	ldrh	r1, [r7, #10]
 8010efc:	4b20      	ldr	r3, [pc, #128]	; (8010f80 <I2C_RequestMemoryWrite+0xa4>)
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f000 fa43 	bl	8011390 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010f0a:	69fa      	ldr	r2, [r7, #28]
 8010f0c:	69b9      	ldr	r1, [r7, #24]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f000 f8f0 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e02c      	b.n	8010f78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010f1e:	88fb      	ldrh	r3, [r7, #6]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d105      	bne.n	8010f30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010f24:	893b      	ldrh	r3, [r7, #8]
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	629a      	str	r2, [r3, #40]	; 0x28
 8010f2e:	e015      	b.n	8010f5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010f30:	893b      	ldrh	r3, [r7, #8]
 8010f32:	0a1b      	lsrs	r3, r3, #8
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	69b9      	ldr	r1, [r7, #24]
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f000 f8d6 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d001      	beq.n	8010f52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e012      	b.n	8010f78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010f52:	893b      	ldrh	r3, [r7, #8]
 8010f54:	b2da      	uxtb	r2, r3
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	2200      	movs	r2, #0
 8010f64:	2180      	movs	r1, #128	; 0x80
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f000 f884 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d001      	beq.n	8010f76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	e000      	b.n	8010f78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	80002000 	.word	0x80002000

08010f84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b086      	sub	sp, #24
 8010f88:	af02      	add	r7, sp, #8
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	4611      	mov	r1, r2
 8010f90:	461a      	mov	r2, r3
 8010f92:	4603      	mov	r3, r0
 8010f94:	817b      	strh	r3, [r7, #10]
 8010f96:	460b      	mov	r3, r1
 8010f98:	813b      	strh	r3, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8010f9e:	88fb      	ldrh	r3, [r7, #6]
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	8979      	ldrh	r1, [r7, #10]
 8010fa4:	4b20      	ldr	r3, [pc, #128]	; (8011028 <I2C_RequestMemoryRead+0xa4>)
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	2300      	movs	r3, #0
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f000 f9f0 	bl	8011390 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010fb0:	69fa      	ldr	r2, [r7, #28]
 8010fb2:	69b9      	ldr	r1, [r7, #24]
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f000 f89d 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e02c      	b.n	801101e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010fc4:	88fb      	ldrh	r3, [r7, #6]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d105      	bne.n	8010fd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010fca:	893b      	ldrh	r3, [r7, #8]
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8010fd4:	e015      	b.n	8011002 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010fd6:	893b      	ldrh	r3, [r7, #8]
 8010fd8:	0a1b      	lsrs	r3, r3, #8
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010fe4:	69fa      	ldr	r2, [r7, #28]
 8010fe6:	69b9      	ldr	r1, [r7, #24]
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f000 f883 	bl	80110f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d001      	beq.n	8010ff8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e012      	b.n	801101e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010ff8:	893b      	ldrh	r3, [r7, #8]
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	2200      	movs	r2, #0
 801100a:	2140      	movs	r1, #64	; 0x40
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f000 f831 	bl	8011074 <I2C_WaitOnFlagUntilTimeout>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d001      	beq.n	801101c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011018:	2301      	movs	r3, #1
 801101a:	e000      	b.n	801101e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	80002000 	.word	0x80002000

0801102c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	f003 0302 	and.w	r3, r3, #2
 801103e:	2b02      	cmp	r3, #2
 8011040:	d103      	bne.n	801104a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2200      	movs	r2, #0
 8011048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	699b      	ldr	r3, [r3, #24]
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b01      	cmp	r3, #1
 8011056:	d007      	beq.n	8011068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	699a      	ldr	r2, [r3, #24]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f042 0201 	orr.w	r2, r2, #1
 8011066:	619a      	str	r2, [r3, #24]
  }
}
 8011068:	bf00      	nop
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	603b      	str	r3, [r7, #0]
 8011080:	4613      	mov	r3, r2
 8011082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011084:	e022      	b.n	80110cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108c:	d01e      	beq.n	80110cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801108e:	f7fd fd23 	bl	800ead8 <HAL_GetTick>
 8011092:	4602      	mov	r2, r0
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	683a      	ldr	r2, [r7, #0]
 801109a:	429a      	cmp	r2, r3
 801109c:	d302      	bcc.n	80110a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d113      	bne.n	80110cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110a8:	f043 0220 	orr.w	r2, r3, #32
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2220      	movs	r2, #32
 80110b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2200      	movs	r2, #0
 80110c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80110c8:	2301      	movs	r3, #1
 80110ca:	e00f      	b.n	80110ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	699a      	ldr	r2, [r3, #24]
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	4013      	ands	r3, r2
 80110d6:	68ba      	ldr	r2, [r7, #8]
 80110d8:	429a      	cmp	r2, r3
 80110da:	bf0c      	ite	eq
 80110dc:	2301      	moveq	r3, #1
 80110de:	2300      	movne	r3, #0
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	461a      	mov	r2, r3
 80110e4:	79fb      	ldrb	r3, [r7, #7]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d0cd      	beq.n	8011086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011100:	e02c      	b.n	801115c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	68b9      	ldr	r1, [r7, #8]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 f8dc 	bl	80112c4 <I2C_IsAcknowledgeFailed>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	e02a      	b.n	801116c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111c:	d01e      	beq.n	801115c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801111e:	f7fd fcdb 	bl	800ead8 <HAL_GetTick>
 8011122:	4602      	mov	r2, r0
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	429a      	cmp	r2, r3
 801112c:	d302      	bcc.n	8011134 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d113      	bne.n	801115c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011138:	f043 0220 	orr.w	r2, r3, #32
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2220      	movs	r2, #32
 8011144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011158:	2301      	movs	r3, #1
 801115a:	e007      	b.n	801116c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	699b      	ldr	r3, [r3, #24]
 8011162:	f003 0302 	and.w	r3, r3, #2
 8011166:	2b02      	cmp	r3, #2
 8011168:	d1cb      	bne.n	8011102 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011180:	e028      	b.n	80111d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f000 f89c 	bl	80112c4 <I2C_IsAcknowledgeFailed>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	e026      	b.n	80111e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011196:	f7fd fc9f 	bl	800ead8 <HAL_GetTick>
 801119a:	4602      	mov	r2, r0
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d302      	bcc.n	80111ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d113      	bne.n	80111d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111b0:	f043 0220 	orr.w	r2, r3, #32
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2220      	movs	r2, #32
 80111bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2200      	movs	r2, #0
 80111c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80111d0:	2301      	movs	r3, #1
 80111d2:	e007      	b.n	80111e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	699b      	ldr	r3, [r3, #24]
 80111da:	f003 0320 	and.w	r3, r3, #32
 80111de:	2b20      	cmp	r3, #32
 80111e0:	d1cf      	bne.n	8011182 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80111f8:	e055      	b.n	80112a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	68b9      	ldr	r1, [r7, #8]
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f000 f860 	bl	80112c4 <I2C_IsAcknowledgeFailed>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d001      	beq.n	801120e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	e053      	b.n	80112b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	699b      	ldr	r3, [r3, #24]
 8011214:	f003 0320 	and.w	r3, r3, #32
 8011218:	2b20      	cmp	r3, #32
 801121a:	d129      	bne.n	8011270 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	699b      	ldr	r3, [r3, #24]
 8011222:	f003 0304 	and.w	r3, r3, #4
 8011226:	2b04      	cmp	r3, #4
 8011228:	d105      	bne.n	8011236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	e03f      	b.n	80112b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2220      	movs	r2, #32
 801123c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	6859      	ldr	r1, [r3, #4]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	4b1d      	ldr	r3, [pc, #116]	; (80112c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 801124a:	400b      	ands	r3, r1
 801124c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2220      	movs	r2, #32
 8011258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	e022      	b.n	80112b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011270:	f7fd fc32 	bl	800ead8 <HAL_GetTick>
 8011274:	4602      	mov	r2, r0
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	429a      	cmp	r2, r3
 801127e:	d302      	bcc.n	8011286 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d10f      	bne.n	80112a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801128a:	f043 0220 	orr.w	r2, r3, #32
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2220      	movs	r2, #32
 8011296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2200      	movs	r2, #0
 801129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80112a2:	2301      	movs	r3, #1
 80112a4:	e007      	b.n	80112b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	699b      	ldr	r3, [r3, #24]
 80112ac:	f003 0304 	and.w	r3, r3, #4
 80112b0:	2b04      	cmp	r3, #4
 80112b2:	d1a2      	bne.n	80111fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	fe00e800 	.word	0xfe00e800

080112c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	699b      	ldr	r3, [r3, #24]
 80112d6:	f003 0310 	and.w	r3, r3, #16
 80112da:	2b10      	cmp	r3, #16
 80112dc:	d151      	bne.n	8011382 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112de:	e022      	b.n	8011326 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e6:	d01e      	beq.n	8011326 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112e8:	f7fd fbf6 	bl	800ead8 <HAL_GetTick>
 80112ec:	4602      	mov	r2, r0
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d302      	bcc.n	80112fe <I2C_IsAcknowledgeFailed+0x3a>
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d113      	bne.n	8011326 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011302:	f043 0220 	orr.w	r2, r3, #32
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2220      	movs	r2, #32
 801130e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e02e      	b.n	8011384 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	f003 0320 	and.w	r3, r3, #32
 8011330:	2b20      	cmp	r3, #32
 8011332:	d1d5      	bne.n	80112e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2210      	movs	r2, #16
 801133a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2220      	movs	r2, #32
 8011342:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f7ff fe71 	bl	801102c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	6859      	ldr	r1, [r3, #4]
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	4b0d      	ldr	r3, [pc, #52]	; (801138c <I2C_IsAcknowledgeFailed+0xc8>)
 8011356:	400b      	ands	r3, r1
 8011358:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801135e:	f043 0204 	orr.w	r2, r3, #4
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2220      	movs	r2, #32
 801136a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2200      	movs	r2, #0
 801137a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e000      	b.n	8011384 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8011382:	2300      	movs	r3, #0
}
 8011384:	4618      	mov	r0, r3
 8011386:	3710      	adds	r7, #16
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	fe00e800 	.word	0xfe00e800

08011390 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	607b      	str	r3, [r7, #4]
 801139a:	460b      	mov	r3, r1
 801139c:	817b      	strh	r3, [r7, #10]
 801139e:	4613      	mov	r3, r2
 80113a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	685a      	ldr	r2, [r3, #4]
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	0d5b      	lsrs	r3, r3, #21
 80113ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80113b0:	4b0d      	ldr	r3, [pc, #52]	; (80113e8 <I2C_TransferConfig+0x58>)
 80113b2:	430b      	orrs	r3, r1
 80113b4:	43db      	mvns	r3, r3
 80113b6:	ea02 0103 	and.w	r1, r2, r3
 80113ba:	897b      	ldrh	r3, [r7, #10]
 80113bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80113c0:	7a7b      	ldrb	r3, [r7, #9]
 80113c2:	041b      	lsls	r3, r3, #16
 80113c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80113c8:	431a      	orrs	r2, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	431a      	orrs	r2, r3
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	431a      	orrs	r2, r3
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	430a      	orrs	r2, r1
 80113d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80113da:	bf00      	nop
 80113dc:	3714      	adds	r7, #20
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop
 80113e8:	03ff63ff 	.word	0x03ff63ff

080113ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	2b20      	cmp	r3, #32
 8011400:	d138      	bne.n	8011474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011408:	2b01      	cmp	r3, #1
 801140a:	d101      	bne.n	8011410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801140c:	2302      	movs	r3, #2
 801140e:	e032      	b.n	8011476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2201      	movs	r2, #1
 8011414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2224      	movs	r2, #36	; 0x24
 801141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f022 0201 	bic.w	r2, r2, #1
 801142e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801143e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6819      	ldr	r1, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	683a      	ldr	r2, [r7, #0]
 801144c:	430a      	orrs	r2, r1
 801144e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f042 0201 	orr.w	r2, r2, #1
 801145e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2220      	movs	r2, #32
 8011464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2200      	movs	r2, #0
 801146c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011470:	2300      	movs	r3, #0
 8011472:	e000      	b.n	8011476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011474:	2302      	movs	r3, #2
  }
}
 8011476:	4618      	mov	r0, r3
 8011478:	370c      	adds	r7, #12
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr

08011482 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011482:	b480      	push	{r7}
 8011484:	b085      	sub	sp, #20
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
 801148a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011492:	b2db      	uxtb	r3, r3
 8011494:	2b20      	cmp	r3, #32
 8011496:	d139      	bne.n	801150c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80114a2:	2302      	movs	r3, #2
 80114a4:	e033      	b.n	801150e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2201      	movs	r2, #1
 80114aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2224      	movs	r2, #36	; 0x24
 80114b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f022 0201 	bic.w	r2, r2, #1
 80114c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80114d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	021b      	lsls	r3, r3, #8
 80114da:	68fa      	ldr	r2, [r7, #12]
 80114dc:	4313      	orrs	r3, r2
 80114de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f042 0201 	orr.w	r2, r2, #1
 80114f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2220      	movs	r2, #32
 80114fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	e000      	b.n	801150e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801150c:	2302      	movs	r3, #2
  }
}
 801150e:	4618      	mov	r0, r3
 8011510:	3714      	adds	r7, #20
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr
	...

0801151c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801151c:	b480      	push	{r7}
 801151e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011520:	4b05      	ldr	r3, [pc, #20]	; (8011538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4a04      	ldr	r2, [pc, #16]	; (8011538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801152a:	6013      	str	r3, [r2, #0]
}
 801152c:	bf00      	nop
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	40007000 	.word	0x40007000

0801153c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801153c:	b480      	push	{r7}
 801153e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8011540:	4b04      	ldr	r3, [pc, #16]	; (8011554 <HAL_PWREx_GetVoltageRange+0x18>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8011548:	4618      	mov	r0, r3
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	40007000 	.word	0x40007000

08011558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011566:	d130      	bne.n	80115ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8011568:	4b23      	ldr	r3, [pc, #140]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011574:	d038      	beq.n	80115e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8011576:	4b20      	ldr	r3, [pc, #128]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801157e:	4a1e      	ldr	r2, [pc, #120]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011584:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8011586:	4b1d      	ldr	r3, [pc, #116]	; (80115fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2232      	movs	r2, #50	; 0x32
 801158c:	fb02 f303 	mul.w	r3, r2, r3
 8011590:	4a1b      	ldr	r2, [pc, #108]	; (8011600 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011592:	fba2 2303 	umull	r2, r3, r2, r3
 8011596:	0c9b      	lsrs	r3, r3, #18
 8011598:	3301      	adds	r3, #1
 801159a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801159c:	e002      	b.n	80115a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80115a4:	4b14      	ldr	r3, [pc, #80]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80115a6:	695b      	ldr	r3, [r3, #20]
 80115a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115b0:	d102      	bne.n	80115b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1f2      	bne.n	801159e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80115b8:	4b0f      	ldr	r3, [pc, #60]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80115ba:	695b      	ldr	r3, [r3, #20]
 80115bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115c4:	d110      	bne.n	80115e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80115c6:	2303      	movs	r3, #3
 80115c8:	e00f      	b.n	80115ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80115ca:	4b0b      	ldr	r3, [pc, #44]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80115d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115d6:	d007      	beq.n	80115e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80115d8:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80115e0:	4a05      	ldr	r2, [pc, #20]	; (80115f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80115e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80115e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3714      	adds	r7, #20
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	40007000 	.word	0x40007000
 80115fc:	2000018c 	.word	0x2000018c
 8011600:	431bde83 	.word	0x431bde83

08011604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b088      	sub	sp, #32
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d102      	bne.n	8011618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	f000 bc11 	b.w	8011e3a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011618:	4ba0      	ldr	r3, [pc, #640]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	f003 030c 	and.w	r3, r3, #12
 8011620:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011622:	4b9e      	ldr	r3, [pc, #632]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	f003 0303 	and.w	r3, r3, #3
 801162a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f003 0310 	and.w	r3, r3, #16
 8011634:	2b00      	cmp	r3, #0
 8011636:	f000 80e4 	beq.w	8011802 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801163a:	69bb      	ldr	r3, [r7, #24]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d007      	beq.n	8011650 <HAL_RCC_OscConfig+0x4c>
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	2b0c      	cmp	r3, #12
 8011644:	f040 808b 	bne.w	801175e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	2b01      	cmp	r3, #1
 801164c:	f040 8087 	bne.w	801175e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011650:	4b92      	ldr	r3, [pc, #584]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f003 0302 	and.w	r3, r3, #2
 8011658:	2b00      	cmp	r3, #0
 801165a:	d005      	beq.n	8011668 <HAL_RCC_OscConfig+0x64>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	699b      	ldr	r3, [r3, #24]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d101      	bne.n	8011668 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8011664:	2301      	movs	r3, #1
 8011666:	e3e8      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1a      	ldr	r2, [r3, #32]
 801166c:	4b8b      	ldr	r3, [pc, #556]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f003 0308 	and.w	r3, r3, #8
 8011674:	2b00      	cmp	r3, #0
 8011676:	d004      	beq.n	8011682 <HAL_RCC_OscConfig+0x7e>
 8011678:	4b88      	ldr	r3, [pc, #544]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011680:	e005      	b.n	801168e <HAL_RCC_OscConfig+0x8a>
 8011682:	4b86      	ldr	r3, [pc, #536]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011688:	091b      	lsrs	r3, r3, #4
 801168a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801168e:	4293      	cmp	r3, r2
 8011690:	d223      	bcs.n	80116da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	4618      	mov	r0, r3
 8011698:	f000 fdaa 	bl	80121f0 <RCC_SetFlashLatencyFromMSIRange>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80116a2:	2301      	movs	r3, #1
 80116a4:	e3c9      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80116a6:	4b7d      	ldr	r3, [pc, #500]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4a7c      	ldr	r2, [pc, #496]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116ac:	f043 0308 	orr.w	r3, r3, #8
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	4b7a      	ldr	r3, [pc, #488]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6a1b      	ldr	r3, [r3, #32]
 80116be:	4977      	ldr	r1, [pc, #476]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116c0:	4313      	orrs	r3, r2
 80116c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80116c4:	4b75      	ldr	r3, [pc, #468]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	69db      	ldr	r3, [r3, #28]
 80116d0:	021b      	lsls	r3, r3, #8
 80116d2:	4972      	ldr	r1, [pc, #456]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116d4:	4313      	orrs	r3, r2
 80116d6:	604b      	str	r3, [r1, #4]
 80116d8:	e025      	b.n	8011726 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80116da:	4b70      	ldr	r3, [pc, #448]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4a6f      	ldr	r2, [pc, #444]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116e0:	f043 0308 	orr.w	r3, r3, #8
 80116e4:	6013      	str	r3, [r2, #0]
 80116e6:	4b6d      	ldr	r3, [pc, #436]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6a1b      	ldr	r3, [r3, #32]
 80116f2:	496a      	ldr	r1, [pc, #424]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116f4:	4313      	orrs	r3, r2
 80116f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80116f8:	4b68      	ldr	r3, [pc, #416]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	69db      	ldr	r3, [r3, #28]
 8011704:	021b      	lsls	r3, r3, #8
 8011706:	4965      	ldr	r1, [pc, #404]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011708:	4313      	orrs	r3, r2
 801170a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801170c:	69bb      	ldr	r3, [r7, #24]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d109      	bne.n	8011726 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a1b      	ldr	r3, [r3, #32]
 8011716:	4618      	mov	r0, r3
 8011718:	f000 fd6a 	bl	80121f0 <RCC_SetFlashLatencyFromMSIRange>
 801171c:	4603      	mov	r3, r0
 801171e:	2b00      	cmp	r3, #0
 8011720:	d001      	beq.n	8011726 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8011722:	2301      	movs	r3, #1
 8011724:	e389      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011726:	f000 fc6f 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 801172a:	4601      	mov	r1, r0
 801172c:	4b5b      	ldr	r3, [pc, #364]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	091b      	lsrs	r3, r3, #4
 8011732:	f003 030f 	and.w	r3, r3, #15
 8011736:	4a5a      	ldr	r2, [pc, #360]	; (80118a0 <HAL_RCC_OscConfig+0x29c>)
 8011738:	5cd3      	ldrb	r3, [r2, r3]
 801173a:	f003 031f 	and.w	r3, r3, #31
 801173e:	fa21 f303 	lsr.w	r3, r1, r3
 8011742:	4a58      	ldr	r2, [pc, #352]	; (80118a4 <HAL_RCC_OscConfig+0x2a0>)
 8011744:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8011746:	4b58      	ldr	r3, [pc, #352]	; (80118a8 <HAL_RCC_OscConfig+0x2a4>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4618      	mov	r0, r3
 801174c:	f7fc ffde 	bl	800e70c <HAL_InitTick>
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8011754:	7bfb      	ldrb	r3, [r7, #15]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d052      	beq.n	8011800 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 801175a:	7bfb      	ldrb	r3, [r7, #15]
 801175c:	e36d      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	699b      	ldr	r3, [r3, #24]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d032      	beq.n	80117cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011766:	4b4d      	ldr	r3, [pc, #308]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4a4c      	ldr	r2, [pc, #304]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801176c:	f043 0301 	orr.w	r3, r3, #1
 8011770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011772:	f7fd f9b1 	bl	800ead8 <HAL_GetTick>
 8011776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011778:	e008      	b.n	801178c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801177a:	f7fd f9ad 	bl	800ead8 <HAL_GetTick>
 801177e:	4602      	mov	r2, r0
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	2b02      	cmp	r3, #2
 8011786:	d901      	bls.n	801178c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8011788:	2303      	movs	r3, #3
 801178a:	e356      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801178c:	4b43      	ldr	r3, [pc, #268]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f003 0302 	and.w	r3, r3, #2
 8011794:	2b00      	cmp	r3, #0
 8011796:	d0f0      	beq.n	801177a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011798:	4b40      	ldr	r3, [pc, #256]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4a3f      	ldr	r2, [pc, #252]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801179e:	f043 0308 	orr.w	r3, r3, #8
 80117a2:	6013      	str	r3, [r2, #0]
 80117a4:	4b3d      	ldr	r3, [pc, #244]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6a1b      	ldr	r3, [r3, #32]
 80117b0:	493a      	ldr	r1, [pc, #232]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117b2:	4313      	orrs	r3, r2
 80117b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80117b6:	4b39      	ldr	r3, [pc, #228]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	69db      	ldr	r3, [r3, #28]
 80117c2:	021b      	lsls	r3, r3, #8
 80117c4:	4935      	ldr	r1, [pc, #212]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117c6:	4313      	orrs	r3, r2
 80117c8:	604b      	str	r3, [r1, #4]
 80117ca:	e01a      	b.n	8011802 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80117cc:	4b33      	ldr	r3, [pc, #204]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4a32      	ldr	r2, [pc, #200]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117d2:	f023 0301 	bic.w	r3, r3, #1
 80117d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80117d8:	f7fd f97e 	bl	800ead8 <HAL_GetTick>
 80117dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80117de:	e008      	b.n	80117f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80117e0:	f7fd f97a 	bl	800ead8 <HAL_GetTick>
 80117e4:	4602      	mov	r2, r0
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	2b02      	cmp	r3, #2
 80117ec:	d901      	bls.n	80117f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80117ee:	2303      	movs	r3, #3
 80117f0:	e323      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80117f2:	4b2a      	ldr	r3, [pc, #168]	; (801189c <HAL_RCC_OscConfig+0x298>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f003 0302 	and.w	r3, r3, #2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1f0      	bne.n	80117e0 <HAL_RCC_OscConfig+0x1dc>
 80117fe:	e000      	b.n	8011802 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	2b00      	cmp	r3, #0
 801180c:	d073      	beq.n	80118f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	2b08      	cmp	r3, #8
 8011812:	d005      	beq.n	8011820 <HAL_RCC_OscConfig+0x21c>
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	2b0c      	cmp	r3, #12
 8011818:	d10e      	bne.n	8011838 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	2b03      	cmp	r3, #3
 801181e:	d10b      	bne.n	8011838 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011820:	4b1e      	ldr	r3, [pc, #120]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011828:	2b00      	cmp	r3, #0
 801182a:	d063      	beq.n	80118f4 <HAL_RCC_OscConfig+0x2f0>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d15f      	bne.n	80118f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8011834:	2301      	movs	r3, #1
 8011836:	e300      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011840:	d106      	bne.n	8011850 <HAL_RCC_OscConfig+0x24c>
 8011842:	4b16      	ldr	r3, [pc, #88]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a15      	ldr	r2, [pc, #84]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801184c:	6013      	str	r3, [r2, #0]
 801184e:	e01d      	b.n	801188c <HAL_RCC_OscConfig+0x288>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011858:	d10c      	bne.n	8011874 <HAL_RCC_OscConfig+0x270>
 801185a:	4b10      	ldr	r3, [pc, #64]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a0f      	ldr	r2, [pc, #60]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011864:	6013      	str	r3, [r2, #0]
 8011866:	4b0d      	ldr	r3, [pc, #52]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4a0c      	ldr	r2, [pc, #48]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	e00b      	b.n	801188c <HAL_RCC_OscConfig+0x288>
 8011874:	4b09      	ldr	r3, [pc, #36]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a08      	ldr	r2, [pc, #32]	; (801189c <HAL_RCC_OscConfig+0x298>)
 801187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	4b06      	ldr	r3, [pc, #24]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a05      	ldr	r2, [pc, #20]	; (801189c <HAL_RCC_OscConfig+0x298>)
 8011886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801188a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d01b      	beq.n	80118cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011894:	f7fd f920 	bl	800ead8 <HAL_GetTick>
 8011898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801189a:	e010      	b.n	80118be <HAL_RCC_OscConfig+0x2ba>
 801189c:	40021000 	.word	0x40021000
 80118a0:	0801f504 	.word	0x0801f504
 80118a4:	2000018c 	.word	0x2000018c
 80118a8:	20000190 	.word	0x20000190
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80118ac:	f7fd f914 	bl	800ead8 <HAL_GetTick>
 80118b0:	4602      	mov	r2, r0
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	2b64      	cmp	r3, #100	; 0x64
 80118b8:	d901      	bls.n	80118be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80118ba:	2303      	movs	r3, #3
 80118bc:	e2bd      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80118be:	4baf      	ldr	r3, [pc, #700]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d0f0      	beq.n	80118ac <HAL_RCC_OscConfig+0x2a8>
 80118ca:	e014      	b.n	80118f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118cc:	f7fd f904 	bl	800ead8 <HAL_GetTick>
 80118d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80118d2:	e008      	b.n	80118e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80118d4:	f7fd f900 	bl	800ead8 <HAL_GetTick>
 80118d8:	4602      	mov	r2, r0
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	2b64      	cmp	r3, #100	; 0x64
 80118e0:	d901      	bls.n	80118e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e2a9      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80118e6:	4ba5      	ldr	r3, [pc, #660]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1f0      	bne.n	80118d4 <HAL_RCC_OscConfig+0x2d0>
 80118f2:	e000      	b.n	80118f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80118f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d060      	beq.n	80119c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	2b04      	cmp	r3, #4
 8011906:	d005      	beq.n	8011914 <HAL_RCC_OscConfig+0x310>
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	2b0c      	cmp	r3, #12
 801190c:	d119      	bne.n	8011942 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	2b02      	cmp	r3, #2
 8011912:	d116      	bne.n	8011942 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011914:	4b99      	ldr	r3, [pc, #612]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801191c:	2b00      	cmp	r3, #0
 801191e:	d005      	beq.n	801192c <HAL_RCC_OscConfig+0x328>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d101      	bne.n	801192c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	e286      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801192c:	4b93      	ldr	r3, [pc, #588]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	061b      	lsls	r3, r3, #24
 801193a:	4990      	ldr	r1, [pc, #576]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 801193c:	4313      	orrs	r3, r2
 801193e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011940:	e040      	b.n	80119c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d023      	beq.n	8011992 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801194a:	4b8c      	ldr	r3, [pc, #560]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	4a8b      	ldr	r2, [pc, #556]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011956:	f7fd f8bf 	bl	800ead8 <HAL_GetTick>
 801195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801195c:	e008      	b.n	8011970 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801195e:	f7fd f8bb 	bl	800ead8 <HAL_GetTick>
 8011962:	4602      	mov	r2, r0
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	1ad3      	subs	r3, r2, r3
 8011968:	2b02      	cmp	r3, #2
 801196a:	d901      	bls.n	8011970 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801196c:	2303      	movs	r3, #3
 801196e:	e264      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011970:	4b82      	ldr	r3, [pc, #520]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011978:	2b00      	cmp	r3, #0
 801197a:	d0f0      	beq.n	801195e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801197c:	4b7f      	ldr	r3, [pc, #508]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	691b      	ldr	r3, [r3, #16]
 8011988:	061b      	lsls	r3, r3, #24
 801198a:	497c      	ldr	r1, [pc, #496]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 801198c:	4313      	orrs	r3, r2
 801198e:	604b      	str	r3, [r1, #4]
 8011990:	e018      	b.n	80119c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011992:	4b7a      	ldr	r3, [pc, #488]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a79      	ldr	r2, [pc, #484]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801199e:	f7fd f89b 	bl	800ead8 <HAL_GetTick>
 80119a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80119a4:	e008      	b.n	80119b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80119a6:	f7fd f897 	bl	800ead8 <HAL_GetTick>
 80119aa:	4602      	mov	r2, r0
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	2b02      	cmp	r3, #2
 80119b2:	d901      	bls.n	80119b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80119b4:	2303      	movs	r3, #3
 80119b6:	e240      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80119b8:	4b70      	ldr	r3, [pc, #448]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1f0      	bne.n	80119a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f003 0308 	and.w	r3, r3, #8
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d03c      	beq.n	8011a4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	695b      	ldr	r3, [r3, #20]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d01c      	beq.n	8011a12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80119d8:	4b68      	ldr	r3, [pc, #416]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 80119da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80119de:	4a67      	ldr	r2, [pc, #412]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 80119e0:	f043 0301 	orr.w	r3, r3, #1
 80119e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119e8:	f7fd f876 	bl	800ead8 <HAL_GetTick>
 80119ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80119ee:	e008      	b.n	8011a02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80119f0:	f7fd f872 	bl	800ead8 <HAL_GetTick>
 80119f4:	4602      	mov	r2, r0
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	2b02      	cmp	r3, #2
 80119fc:	d901      	bls.n	8011a02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80119fe:	2303      	movs	r3, #3
 8011a00:	e21b      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011a02:	4b5e      	ldr	r3, [pc, #376]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a08:	f003 0302 	and.w	r3, r3, #2
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d0ef      	beq.n	80119f0 <HAL_RCC_OscConfig+0x3ec>
 8011a10:	e01b      	b.n	8011a4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011a12:	4b5a      	ldr	r3, [pc, #360]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a18:	4a58      	ldr	r2, [pc, #352]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a1a:	f023 0301 	bic.w	r3, r3, #1
 8011a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a22:	f7fd f859 	bl	800ead8 <HAL_GetTick>
 8011a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011a28:	e008      	b.n	8011a3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011a2a:	f7fd f855 	bl	800ead8 <HAL_GetTick>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d901      	bls.n	8011a3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	e1fe      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011a3c:	4b4f      	ldr	r3, [pc, #316]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a42:	f003 0302 	and.w	r3, r3, #2
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1ef      	bne.n	8011a2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f003 0304 	and.w	r3, r3, #4
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 80a6 	beq.w	8011ba4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8011a5c:	4b47      	ldr	r3, [pc, #284]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d10d      	bne.n	8011a84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a68:	4b44      	ldr	r3, [pc, #272]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6c:	4a43      	ldr	r2, [pc, #268]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a72:	6593      	str	r3, [r2, #88]	; 0x58
 8011a74:	4b41      	ldr	r3, [pc, #260]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a7c:	60bb      	str	r3, [r7, #8]
 8011a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011a80:	2301      	movs	r3, #1
 8011a82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011a84:	4b3e      	ldr	r3, [pc, #248]	; (8011b80 <HAL_RCC_OscConfig+0x57c>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d118      	bne.n	8011ac2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a90:	4b3b      	ldr	r3, [pc, #236]	; (8011b80 <HAL_RCC_OscConfig+0x57c>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4a3a      	ldr	r2, [pc, #232]	; (8011b80 <HAL_RCC_OscConfig+0x57c>)
 8011a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011a9c:	f7fd f81c 	bl	800ead8 <HAL_GetTick>
 8011aa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011aa2:	e008      	b.n	8011ab6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011aa4:	f7fd f818 	bl	800ead8 <HAL_GetTick>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	2b02      	cmp	r3, #2
 8011ab0:	d901      	bls.n	8011ab6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8011ab2:	2303      	movs	r3, #3
 8011ab4:	e1c1      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011ab6:	4b32      	ldr	r3, [pc, #200]	; (8011b80 <HAL_RCC_OscConfig+0x57c>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d0f0      	beq.n	8011aa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	689b      	ldr	r3, [r3, #8]
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d108      	bne.n	8011adc <HAL_RCC_OscConfig+0x4d8>
 8011aca:	4b2c      	ldr	r3, [pc, #176]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad0:	4a2a      	ldr	r2, [pc, #168]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011ad2:	f043 0301 	orr.w	r3, r3, #1
 8011ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011ada:	e024      	b.n	8011b26 <HAL_RCC_OscConfig+0x522>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	2b05      	cmp	r3, #5
 8011ae2:	d110      	bne.n	8011b06 <HAL_RCC_OscConfig+0x502>
 8011ae4:	4b25      	ldr	r3, [pc, #148]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aea:	4a24      	ldr	r2, [pc, #144]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011aec:	f043 0304 	orr.w	r3, r3, #4
 8011af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011af4:	4b21      	ldr	r3, [pc, #132]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011afa:	4a20      	ldr	r2, [pc, #128]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011afc:	f043 0301 	orr.w	r3, r3, #1
 8011b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011b04:	e00f      	b.n	8011b26 <HAL_RCC_OscConfig+0x522>
 8011b06:	4b1d      	ldr	r3, [pc, #116]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b0c:	4a1b      	ldr	r2, [pc, #108]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011b0e:	f023 0301 	bic.w	r3, r3, #1
 8011b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011b16:	4b19      	ldr	r3, [pc, #100]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b1c:	4a17      	ldr	r2, [pc, #92]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011b1e:	f023 0304 	bic.w	r3, r3, #4
 8011b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d016      	beq.n	8011b5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b2e:	f7fc ffd3 	bl	800ead8 <HAL_GetTick>
 8011b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011b34:	e00a      	b.n	8011b4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b36:	f7fc ffcf 	bl	800ead8 <HAL_GetTick>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	1ad3      	subs	r3, r2, r3
 8011b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d901      	bls.n	8011b4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	e176      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011b4c:	4b0b      	ldr	r3, [pc, #44]	; (8011b7c <HAL_RCC_OscConfig+0x578>)
 8011b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b52:	f003 0302 	and.w	r3, r3, #2
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0ed      	beq.n	8011b36 <HAL_RCC_OscConfig+0x532>
 8011b5a:	e01a      	b.n	8011b92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011b5c:	f7fc ffbc 	bl	800ead8 <HAL_GetTick>
 8011b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011b62:	e00f      	b.n	8011b84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b64:	f7fc ffb8 	bl	800ead8 <HAL_GetTick>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d906      	bls.n	8011b84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8011b76:	2303      	movs	r3, #3
 8011b78:	e15f      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
 8011b7a:	bf00      	nop
 8011b7c:	40021000 	.word	0x40021000
 8011b80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011b84:	4baa      	ldr	r3, [pc, #680]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b8a:	f003 0302 	and.w	r3, r3, #2
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1e8      	bne.n	8011b64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011b92:	7ffb      	ldrb	r3, [r7, #31]
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d105      	bne.n	8011ba4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b98:	4ba5      	ldr	r3, [pc, #660]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b9c:	4aa4      	ldr	r2, [pc, #656]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f003 0320 	and.w	r3, r3, #32
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d03c      	beq.n	8011c2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d01c      	beq.n	8011bf2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011bb8:	4b9d      	ldr	r3, [pc, #628]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011bbe:	4a9c      	ldr	r2, [pc, #624]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011bc0:	f043 0301 	orr.w	r3, r3, #1
 8011bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011bc8:	f7fc ff86 	bl	800ead8 <HAL_GetTick>
 8011bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011bce:	e008      	b.n	8011be2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011bd0:	f7fc ff82 	bl	800ead8 <HAL_GetTick>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	2b02      	cmp	r3, #2
 8011bdc:	d901      	bls.n	8011be2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8011bde:	2303      	movs	r3, #3
 8011be0:	e12b      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011be2:	4b93      	ldr	r3, [pc, #588]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011be8:	f003 0302 	and.w	r3, r3, #2
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d0ef      	beq.n	8011bd0 <HAL_RCC_OscConfig+0x5cc>
 8011bf0:	e01b      	b.n	8011c2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011bf2:	4b8f      	ldr	r3, [pc, #572]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011bf8:	4a8d      	ldr	r2, [pc, #564]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011bfa:	f023 0301 	bic.w	r3, r3, #1
 8011bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c02:	f7fc ff69 	bl	800ead8 <HAL_GetTick>
 8011c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011c08:	e008      	b.n	8011c1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011c0a:	f7fc ff65 	bl	800ead8 <HAL_GetTick>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d901      	bls.n	8011c1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8011c18:	2303      	movs	r3, #3
 8011c1a:	e10e      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011c1c:	4b84      	ldr	r3, [pc, #528]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011c22:	f003 0302 	and.w	r3, r3, #2
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1ef      	bne.n	8011c0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	f000 8102 	beq.w	8011e38 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	f040 80c5 	bne.w	8011dc8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8011c3e:	4b7c      	ldr	r3, [pc, #496]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	f003 0203 	and.w	r2, r3, #3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d12c      	bne.n	8011cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d123      	bne.n	8011cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d11b      	bne.n	8011cac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d113      	bne.n	8011cac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c8e:	085b      	lsrs	r3, r3, #1
 8011c90:	3b01      	subs	r3, #1
 8011c92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d109      	bne.n	8011cac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca2:	085b      	lsrs	r3, r3, #1
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d067      	beq.n	8011d7c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	2b0c      	cmp	r3, #12
 8011cb0:	d062      	beq.n	8011d78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8011cb2:	4b5f      	ldr	r3, [pc, #380]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e0bb      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8011cc2:	4b5b      	ldr	r3, [pc, #364]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	4a5a      	ldr	r2, [pc, #360]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011ccc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011cce:	f7fc ff03 	bl	800ead8 <HAL_GetTick>
 8011cd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011cd4:	e008      	b.n	8011ce8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011cd6:	f7fc feff 	bl	800ead8 <HAL_GetTick>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	2b02      	cmp	r3, #2
 8011ce2:	d901      	bls.n	8011ce8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	e0a8      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011ce8:	4b51      	ldr	r3, [pc, #324]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1f0      	bne.n	8011cd6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011cf4:	4b4e      	ldr	r3, [pc, #312]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	4b4e      	ldr	r3, [pc, #312]	; (8011e34 <HAL_RCC_OscConfig+0x830>)
 8011cfa:	4013      	ands	r3, r2
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011d04:	3a01      	subs	r2, #1
 8011d06:	0112      	lsls	r2, r2, #4
 8011d08:	4311      	orrs	r1, r2
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011d0e:	0212      	lsls	r2, r2, #8
 8011d10:	4311      	orrs	r1, r2
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011d16:	0852      	lsrs	r2, r2, #1
 8011d18:	3a01      	subs	r2, #1
 8011d1a:	0552      	lsls	r2, r2, #21
 8011d1c:	4311      	orrs	r1, r2
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011d22:	0852      	lsrs	r2, r2, #1
 8011d24:	3a01      	subs	r2, #1
 8011d26:	0652      	lsls	r2, r2, #25
 8011d28:	4311      	orrs	r1, r2
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011d2e:	06d2      	lsls	r2, r2, #27
 8011d30:	430a      	orrs	r2, r1
 8011d32:	493f      	ldr	r1, [pc, #252]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d34:	4313      	orrs	r3, r2
 8011d36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8011d38:	4b3d      	ldr	r3, [pc, #244]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4a3c      	ldr	r2, [pc, #240]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011d44:	4b3a      	ldr	r3, [pc, #232]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	4a39      	ldr	r2, [pc, #228]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011d50:	f7fc fec2 	bl	800ead8 <HAL_GetTick>
 8011d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011d56:	e008      	b.n	8011d6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011d58:	f7fc febe 	bl	800ead8 <HAL_GetTick>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	2b02      	cmp	r3, #2
 8011d64:	d901      	bls.n	8011d6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8011d66:	2303      	movs	r3, #3
 8011d68:	e067      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011d6a:	4b31      	ldr	r3, [pc, #196]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d0f0      	beq.n	8011d58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011d76:	e05f      	b.n	8011e38 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e05e      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011d7c:	4b2c      	ldr	r3, [pc, #176]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d157      	bne.n	8011e38 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011d88:	4b29      	ldr	r3, [pc, #164]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a28      	ldr	r2, [pc, #160]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011d94:	4b26      	ldr	r3, [pc, #152]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	4a25      	ldr	r2, [pc, #148]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011da0:	f7fc fe9a 	bl	800ead8 <HAL_GetTick>
 8011da4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011da6:	e008      	b.n	8011dba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011da8:	f7fc fe96 	bl	800ead8 <HAL_GetTick>
 8011dac:	4602      	mov	r2, r0
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	2b02      	cmp	r3, #2
 8011db4:	d901      	bls.n	8011dba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8011db6:	2303      	movs	r3, #3
 8011db8:	e03f      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011dba:	4b1d      	ldr	r3, [pc, #116]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d0f0      	beq.n	8011da8 <HAL_RCC_OscConfig+0x7a4>
 8011dc6:	e037      	b.n	8011e38 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	2b0c      	cmp	r3, #12
 8011dcc:	d02d      	beq.n	8011e2a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011dce:	4b18      	ldr	r3, [pc, #96]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a17      	ldr	r2, [pc, #92]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011dd8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011dda:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d105      	bne.n	8011df2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8011de6:	4b12      	ldr	r3, [pc, #72]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	4a11      	ldr	r2, [pc, #68]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011dec:	f023 0303 	bic.w	r3, r3, #3
 8011df0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8011df2:	4b0f      	ldr	r3, [pc, #60]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	4a0e      	ldr	r2, [pc, #56]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011df8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8011dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011e00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e02:	f7fc fe69 	bl	800ead8 <HAL_GetTick>
 8011e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011e08:	e008      	b.n	8011e1c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e0a:	f7fc fe65 	bl	800ead8 <HAL_GetTick>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d901      	bls.n	8011e1c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8011e18:	2303      	movs	r3, #3
 8011e1a:	e00e      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011e1c:	4b04      	ldr	r3, [pc, #16]	; (8011e30 <HAL_RCC_OscConfig+0x82c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1f0      	bne.n	8011e0a <HAL_RCC_OscConfig+0x806>
 8011e28:	e006      	b.n	8011e38 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e005      	b.n	8011e3a <HAL_RCC_OscConfig+0x836>
 8011e2e:	bf00      	nop
 8011e30:	40021000 	.word	0x40021000
 8011e34:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3720      	adds	r7, #32
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop

08011e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d101      	bne.n	8011e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e54:	2301      	movs	r3, #1
 8011e56:	e0c8      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011e58:	4b66      	ldr	r3, [pc, #408]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f003 0307 	and.w	r3, r3, #7
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d910      	bls.n	8011e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e66:	4b63      	ldr	r3, [pc, #396]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f023 0207 	bic.w	r2, r3, #7
 8011e6e:	4961      	ldr	r1, [pc, #388]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	4313      	orrs	r3, r2
 8011e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e76:	4b5f      	ldr	r3, [pc, #380]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	f003 0307 	and.w	r3, r3, #7
 8011e7e:	683a      	ldr	r2, [r7, #0]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d001      	beq.n	8011e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011e84:	2301      	movs	r3, #1
 8011e86:	e0b0      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 0301 	and.w	r3, r3, #1
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d04c      	beq.n	8011f2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d107      	bne.n	8011eac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011e9c:	4b56      	ldr	r3, [pc, #344]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d121      	bne.n	8011eec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e09e      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	2b02      	cmp	r3, #2
 8011eb2:	d107      	bne.n	8011ec4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011eb4:	4b50      	ldr	r3, [pc, #320]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d115      	bne.n	8011eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e092      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d107      	bne.n	8011edc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011ecc:	4b4a      	ldr	r3, [pc, #296]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d109      	bne.n	8011eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e086      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011edc:	4b46      	ldr	r3, [pc, #280]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d101      	bne.n	8011eec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e07e      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011eec:	4b42      	ldr	r3, [pc, #264]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	f023 0203 	bic.w	r2, r3, #3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	493f      	ldr	r1, [pc, #252]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011efa:	4313      	orrs	r3, r2
 8011efc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011efe:	f7fc fdeb 	bl	800ead8 <HAL_GetTick>
 8011f02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f04:	e00a      	b.n	8011f1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f06:	f7fc fde7 	bl	800ead8 <HAL_GetTick>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f14:	4293      	cmp	r3, r2
 8011f16:	d901      	bls.n	8011f1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	e066      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011f1c:	4b36      	ldr	r3, [pc, #216]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011f1e:	689b      	ldr	r3, [r3, #8]
 8011f20:	f003 020c 	and.w	r2, r3, #12
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d1eb      	bne.n	8011f06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f003 0302 	and.w	r3, r3, #2
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d008      	beq.n	8011f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f3a:	4b2f      	ldr	r3, [pc, #188]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	492c      	ldr	r1, [pc, #176]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f4c:	4b29      	ldr	r3, [pc, #164]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f003 0307 	and.w	r3, r3, #7
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d210      	bcs.n	8011f7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f5a:	4b26      	ldr	r3, [pc, #152]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f023 0207 	bic.w	r2, r3, #7
 8011f62:	4924      	ldr	r1, [pc, #144]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	4313      	orrs	r3, r2
 8011f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f6a:	4b22      	ldr	r3, [pc, #136]	; (8011ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f003 0307 	and.w	r3, r3, #7
 8011f72:	683a      	ldr	r2, [r7, #0]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d001      	beq.n	8011f7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e036      	b.n	8011fea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d008      	beq.n	8011f9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011f88:	4b1b      	ldr	r3, [pc, #108]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	4918      	ldr	r1, [pc, #96]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011f96:	4313      	orrs	r3, r2
 8011f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f003 0308 	and.w	r3, r3, #8
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d009      	beq.n	8011fba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011fa6:	4b14      	ldr	r3, [pc, #80]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	691b      	ldr	r3, [r3, #16]
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	4910      	ldr	r1, [pc, #64]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011fba:	f000 f825 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 8011fbe:	4601      	mov	r1, r0
 8011fc0:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <HAL_RCC_ClockConfig+0x1b4>)
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	091b      	lsrs	r3, r3, #4
 8011fc6:	f003 030f 	and.w	r3, r3, #15
 8011fca:	4a0c      	ldr	r2, [pc, #48]	; (8011ffc <HAL_RCC_ClockConfig+0x1b8>)
 8011fcc:	5cd3      	ldrb	r3, [r2, r3]
 8011fce:	f003 031f 	and.w	r3, r3, #31
 8011fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8011fd6:	4a0a      	ldr	r2, [pc, #40]	; (8012000 <HAL_RCC_ClockConfig+0x1bc>)
 8011fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011fda:	4b0a      	ldr	r3, [pc, #40]	; (8012004 <HAL_RCC_ClockConfig+0x1c0>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fc fb94 	bl	800e70c <HAL_InitTick>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	72fb      	strb	r3, [r7, #11]

  return status;
 8011fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	40022000 	.word	0x40022000
 8011ff8:	40021000 	.word	0x40021000
 8011ffc:	0801f504 	.word	0x0801f504
 8012000:	2000018c 	.word	0x2000018c
 8012004:	20000190 	.word	0x20000190

08012008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012008:	b480      	push	{r7}
 801200a:	b089      	sub	sp, #36	; 0x24
 801200c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801200e:	2300      	movs	r3, #0
 8012010:	61fb      	str	r3, [r7, #28]
 8012012:	2300      	movs	r3, #0
 8012014:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012016:	4b3d      	ldr	r3, [pc, #244]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 8012018:	689b      	ldr	r3, [r3, #8]
 801201a:	f003 030c 	and.w	r3, r3, #12
 801201e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012020:	4b3a      	ldr	r3, [pc, #232]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	f003 0303 	and.w	r3, r3, #3
 8012028:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d005      	beq.n	801203c <HAL_RCC_GetSysClockFreq+0x34>
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	2b0c      	cmp	r3, #12
 8012034:	d121      	bne.n	801207a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d11e      	bne.n	801207a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801203c:	4b33      	ldr	r3, [pc, #204]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f003 0308 	and.w	r3, r3, #8
 8012044:	2b00      	cmp	r3, #0
 8012046:	d107      	bne.n	8012058 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8012048:	4b30      	ldr	r3, [pc, #192]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 801204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801204e:	0a1b      	lsrs	r3, r3, #8
 8012050:	f003 030f 	and.w	r3, r3, #15
 8012054:	61fb      	str	r3, [r7, #28]
 8012056:	e005      	b.n	8012064 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8012058:	4b2c      	ldr	r3, [pc, #176]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	091b      	lsrs	r3, r3, #4
 801205e:	f003 030f 	and.w	r3, r3, #15
 8012062:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8012064:	4a2a      	ldr	r2, [pc, #168]	; (8012110 <HAL_RCC_GetSysClockFreq+0x108>)
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801206c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d10d      	bne.n	8012090 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8012078:	e00a      	b.n	8012090 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	2b04      	cmp	r3, #4
 801207e:	d102      	bne.n	8012086 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012080:	4b24      	ldr	r3, [pc, #144]	; (8012114 <HAL_RCC_GetSysClockFreq+0x10c>)
 8012082:	61bb      	str	r3, [r7, #24]
 8012084:	e004      	b.n	8012090 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	2b08      	cmp	r3, #8
 801208a:	d101      	bne.n	8012090 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801208c:	4b22      	ldr	r3, [pc, #136]	; (8012118 <HAL_RCC_GetSysClockFreq+0x110>)
 801208e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	2b0c      	cmp	r3, #12
 8012094:	d133      	bne.n	80120fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8012096:	4b1d      	ldr	r3, [pc, #116]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	f003 0303 	and.w	r3, r3, #3
 801209e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2b02      	cmp	r3, #2
 80120a4:	d002      	beq.n	80120ac <HAL_RCC_GetSysClockFreq+0xa4>
 80120a6:	2b03      	cmp	r3, #3
 80120a8:	d003      	beq.n	80120b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80120aa:	e005      	b.n	80120b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80120ac:	4b19      	ldr	r3, [pc, #100]	; (8012114 <HAL_RCC_GetSysClockFreq+0x10c>)
 80120ae:	617b      	str	r3, [r7, #20]
      break;
 80120b0:	e005      	b.n	80120be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80120b2:	4b19      	ldr	r3, [pc, #100]	; (8012118 <HAL_RCC_GetSysClockFreq+0x110>)
 80120b4:	617b      	str	r3, [r7, #20]
      break;
 80120b6:	e002      	b.n	80120be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	617b      	str	r3, [r7, #20]
      break;
 80120bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80120be:	4b13      	ldr	r3, [pc, #76]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	091b      	lsrs	r3, r3, #4
 80120c4:	f003 0307 	and.w	r3, r3, #7
 80120c8:	3301      	adds	r3, #1
 80120ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80120cc:	4b0f      	ldr	r3, [pc, #60]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	0a1b      	lsrs	r3, r3, #8
 80120d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120d6:	697a      	ldr	r2, [r7, #20]
 80120d8:	fb02 f203 	mul.w	r2, r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	fbb2 f3f3 	udiv	r3, r2, r3
 80120e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80120e4:	4b09      	ldr	r3, [pc, #36]	; (801210c <HAL_RCC_GetSysClockFreq+0x104>)
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	0e5b      	lsrs	r3, r3, #25
 80120ea:	f003 0303 	and.w	r3, r3, #3
 80120ee:	3301      	adds	r3, #1
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80120f4:	697a      	ldr	r2, [r7, #20]
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80120fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80120fe:	69bb      	ldr	r3, [r7, #24]
}
 8012100:	4618      	mov	r0, r3
 8012102:	3724      	adds	r7, #36	; 0x24
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	40021000 	.word	0x40021000
 8012110:	0801f51c 	.word	0x0801f51c
 8012114:	00f42400 	.word	0x00f42400
 8012118:	02dc6c00 	.word	0x02dc6c00

0801211c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801211c:	b480      	push	{r7}
 801211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012120:	4b03      	ldr	r3, [pc, #12]	; (8012130 <HAL_RCC_GetHCLKFreq+0x14>)
 8012122:	681b      	ldr	r3, [r3, #0]
}
 8012124:	4618      	mov	r0, r3
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	2000018c 	.word	0x2000018c

08012134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8012138:	f7ff fff0 	bl	801211c <HAL_RCC_GetHCLKFreq>
 801213c:	4601      	mov	r1, r0
 801213e:	4b06      	ldr	r3, [pc, #24]	; (8012158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012140:	689b      	ldr	r3, [r3, #8]
 8012142:	0a1b      	lsrs	r3, r3, #8
 8012144:	f003 0307 	and.w	r3, r3, #7
 8012148:	4a04      	ldr	r2, [pc, #16]	; (801215c <HAL_RCC_GetPCLK1Freq+0x28>)
 801214a:	5cd3      	ldrb	r3, [r2, r3]
 801214c:	f003 031f 	and.w	r3, r3, #31
 8012150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012154:	4618      	mov	r0, r3
 8012156:	bd80      	pop	{r7, pc}
 8012158:	40021000 	.word	0x40021000
 801215c:	0801f514 	.word	0x0801f514

08012160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8012164:	f7ff ffda 	bl	801211c <HAL_RCC_GetHCLKFreq>
 8012168:	4601      	mov	r1, r0
 801216a:	4b06      	ldr	r3, [pc, #24]	; (8012184 <HAL_RCC_GetPCLK2Freq+0x24>)
 801216c:	689b      	ldr	r3, [r3, #8]
 801216e:	0adb      	lsrs	r3, r3, #11
 8012170:	f003 0307 	and.w	r3, r3, #7
 8012174:	4a04      	ldr	r2, [pc, #16]	; (8012188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012176:	5cd3      	ldrb	r3, [r2, r3]
 8012178:	f003 031f 	and.w	r3, r3, #31
 801217c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012180:	4618      	mov	r0, r3
 8012182:	bd80      	pop	{r7, pc}
 8012184:	40021000 	.word	0x40021000
 8012188:	0801f514 	.word	0x0801f514

0801218c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	220f      	movs	r2, #15
 801219a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 801219c:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <HAL_RCC_GetClockConfig+0x5c>)
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	f003 0203 	and.w	r2, r3, #3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80121a8:	4b0f      	ldr	r3, [pc, #60]	; (80121e8 <HAL_RCC_GetClockConfig+0x5c>)
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80121b4:	4b0c      	ldr	r3, [pc, #48]	; (80121e8 <HAL_RCC_GetClockConfig+0x5c>)
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80121c0:	4b09      	ldr	r3, [pc, #36]	; (80121e8 <HAL_RCC_GetClockConfig+0x5c>)
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	08db      	lsrs	r3, r3, #3
 80121c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80121ce:	4b07      	ldr	r3, [pc, #28]	; (80121ec <HAL_RCC_GetClockConfig+0x60>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f003 0207 	and.w	r2, r3, #7
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	601a      	str	r2, [r3, #0]
}
 80121da:	bf00      	nop
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	40021000 	.word	0x40021000
 80121ec:	40022000 	.word	0x40022000

080121f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80121f8:	2300      	movs	r3, #0
 80121fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80121fc:	4b2a      	ldr	r3, [pc, #168]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80121fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012204:	2b00      	cmp	r3, #0
 8012206:	d003      	beq.n	8012210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8012208:	f7ff f998 	bl	801153c <HAL_PWREx_GetVoltageRange>
 801220c:	6178      	str	r0, [r7, #20]
 801220e:	e014      	b.n	801223a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8012210:	4b25      	ldr	r3, [pc, #148]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012214:	4a24      	ldr	r2, [pc, #144]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801221a:	6593      	str	r3, [r2, #88]	; 0x58
 801221c:	4b22      	ldr	r3, [pc, #136]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012224:	60fb      	str	r3, [r7, #12]
 8012226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8012228:	f7ff f988 	bl	801153c <HAL_PWREx_GetVoltageRange>
 801222c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801222e:	4b1e      	ldr	r3, [pc, #120]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012232:	4a1d      	ldr	r2, [pc, #116]	; (80122a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012240:	d10b      	bne.n	801225a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2b80      	cmp	r3, #128	; 0x80
 8012246:	d919      	bls.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2ba0      	cmp	r3, #160	; 0xa0
 801224c:	d902      	bls.n	8012254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801224e:	2302      	movs	r3, #2
 8012250:	613b      	str	r3, [r7, #16]
 8012252:	e013      	b.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012254:	2301      	movs	r3, #1
 8012256:	613b      	str	r3, [r7, #16]
 8012258:	e010      	b.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b80      	cmp	r3, #128	; 0x80
 801225e:	d902      	bls.n	8012266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8012260:	2303      	movs	r3, #3
 8012262:	613b      	str	r3, [r7, #16]
 8012264:	e00a      	b.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b80      	cmp	r3, #128	; 0x80
 801226a:	d102      	bne.n	8012272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801226c:	2302      	movs	r3, #2
 801226e:	613b      	str	r3, [r7, #16]
 8012270:	e004      	b.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b70      	cmp	r3, #112	; 0x70
 8012276:	d101      	bne.n	801227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012278:	2301      	movs	r3, #1
 801227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801227c:	4b0b      	ldr	r3, [pc, #44]	; (80122ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f023 0207 	bic.w	r2, r3, #7
 8012284:	4909      	ldr	r1, [pc, #36]	; (80122ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	4313      	orrs	r3, r2
 801228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801228c:	4b07      	ldr	r3, [pc, #28]	; (80122ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	f003 0307 	and.w	r3, r3, #7
 8012294:	693a      	ldr	r2, [r7, #16]
 8012296:	429a      	cmp	r2, r3
 8012298:	d001      	beq.n	801229e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801229a:	2301      	movs	r3, #1
 801229c:	e000      	b.n	80122a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801229e:	2300      	movs	r3, #0
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3718      	adds	r7, #24
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	40021000 	.word	0x40021000
 80122ac:	40022000 	.word	0x40022000

080122b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80122b8:	2300      	movs	r3, #0
 80122ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80122bc:	2300      	movs	r3, #0
 80122be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d02f      	beq.n	801232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80122d4:	d005      	beq.n	80122e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80122d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80122da:	d015      	beq.n	8012308 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d007      	beq.n	80122f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80122e0:	e00f      	b.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80122e2:	4b5d      	ldr	r3, [pc, #372]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	4a5c      	ldr	r2, [pc, #368]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80122e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80122ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80122ee:	e00c      	b.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	3304      	adds	r3, #4
 80122f4:	2100      	movs	r1, #0
 80122f6:	4618      	mov	r0, r3
 80122f8:	f000 fa00 	bl	80126fc <RCCEx_PLLSAI1_Config>
 80122fc:	4603      	mov	r3, r0
 80122fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8012300:	e003      	b.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012302:	2301      	movs	r3, #1
 8012304:	74fb      	strb	r3, [r7, #19]
      break;
 8012306:	e000      	b.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8012308:	bf00      	nop
    }

    if(ret == HAL_OK)
 801230a:	7cfb      	ldrb	r3, [r7, #19]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d10b      	bne.n	8012328 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012310:	4b51      	ldr	r3, [pc, #324]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801231e:	494e      	ldr	r1, [pc, #312]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012320:	4313      	orrs	r3, r2
 8012322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8012326:	e001      	b.n	801232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012328:	7cfb      	ldrb	r3, [r7, #19]
 801232a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 809e 	beq.w	8012476 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 801233a:	2300      	movs	r3, #0
 801233c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801233e:	4b46      	ldr	r3, [pc, #280]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012346:	2b00      	cmp	r3, #0
 8012348:	d101      	bne.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 801234a:	2301      	movs	r3, #1
 801234c:	e000      	b.n	8012350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 801234e:	2300      	movs	r3, #0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00d      	beq.n	8012370 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012354:	4b40      	ldr	r3, [pc, #256]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012358:	4a3f      	ldr	r2, [pc, #252]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 801235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801235e:	6593      	str	r3, [r2, #88]	; 0x58
 8012360:	4b3d      	ldr	r3, [pc, #244]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012368:	60bb      	str	r3, [r7, #8]
 801236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801236c:	2301      	movs	r3, #1
 801236e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012370:	4b3a      	ldr	r3, [pc, #232]	; (801245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4a39      	ldr	r2, [pc, #228]	; (801245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801237a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801237c:	f7fc fbac 	bl	800ead8 <HAL_GetTick>
 8012380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8012382:	e009      	b.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012384:	f7fc fba8 	bl	800ead8 <HAL_GetTick>
 8012388:	4602      	mov	r2, r0
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	2b02      	cmp	r3, #2
 8012390:	d902      	bls.n	8012398 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8012392:	2303      	movs	r3, #3
 8012394:	74fb      	strb	r3, [r7, #19]
        break;
 8012396:	e005      	b.n	80123a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8012398:	4b30      	ldr	r3, [pc, #192]	; (801245c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d0ef      	beq.n	8012384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80123a4:	7cfb      	ldrb	r3, [r7, #19]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d15a      	bne.n	8012460 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80123aa:	4b2b      	ldr	r3, [pc, #172]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d01e      	beq.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123c0:	697a      	ldr	r2, [r7, #20]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d019      	beq.n	80123fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80123c6:	4b24      	ldr	r3, [pc, #144]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80123d2:	4b21      	ldr	r3, [pc, #132]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123d8:	4a1f      	ldr	r2, [pc, #124]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80123de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80123e2:	4b1d      	ldr	r3, [pc, #116]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123e8:	4a1b      	ldr	r2, [pc, #108]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80123ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80123f2:	4a19      	ldr	r2, [pc, #100]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	f003 0301 	and.w	r3, r3, #1
 8012400:	2b00      	cmp	r3, #0
 8012402:	d016      	beq.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012404:	f7fc fb68 	bl	800ead8 <HAL_GetTick>
 8012408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801240a:	e00b      	b.n	8012424 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801240c:	f7fc fb64 	bl	800ead8 <HAL_GetTick>
 8012410:	4602      	mov	r2, r0
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	f241 3288 	movw	r2, #5000	; 0x1388
 801241a:	4293      	cmp	r3, r2
 801241c:	d902      	bls.n	8012424 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 801241e:	2303      	movs	r3, #3
 8012420:	74fb      	strb	r3, [r7, #19]
            break;
 8012422:	e006      	b.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012424:	4b0c      	ldr	r3, [pc, #48]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801242a:	f003 0302 	and.w	r3, r3, #2
 801242e:	2b00      	cmp	r3, #0
 8012430:	d0ec      	beq.n	801240c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8012432:	7cfb      	ldrb	r3, [r7, #19]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10b      	bne.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012438:	4b07      	ldr	r3, [pc, #28]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 801243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801243e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012446:	4904      	ldr	r1, [pc, #16]	; (8012458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8012448:	4313      	orrs	r3, r2
 801244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801244e:	e009      	b.n	8012464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012450:	7cfb      	ldrb	r3, [r7, #19]
 8012452:	74bb      	strb	r3, [r7, #18]
 8012454:	e006      	b.n	8012464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8012456:	bf00      	nop
 8012458:	40021000 	.word	0x40021000
 801245c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012460:	7cfb      	ldrb	r3, [r7, #19]
 8012462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012464:	7c7b      	ldrb	r3, [r7, #17]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d105      	bne.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801246a:	4b9b      	ldr	r3, [pc, #620]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801246e:	4a9a      	ldr	r2, [pc, #616]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f003 0301 	and.w	r3, r3, #1
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00a      	beq.n	8012498 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012482:	4b95      	ldr	r3, [pc, #596]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012488:	f023 0203 	bic.w	r2, r3, #3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6a1b      	ldr	r3, [r3, #32]
 8012490:	4991      	ldr	r1, [pc, #580]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012492:	4313      	orrs	r3, r2
 8012494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00a      	beq.n	80124ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80124a4:	4b8c      	ldr	r3, [pc, #560]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124aa:	f023 020c 	bic.w	r2, r3, #12
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b2:	4989      	ldr	r1, [pc, #548]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124b4:	4313      	orrs	r3, r2
 80124b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f003 0304 	and.w	r3, r3, #4
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00a      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80124c6:	4b84      	ldr	r3, [pc, #528]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d4:	4980      	ldr	r1, [pc, #512]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124d6:	4313      	orrs	r3, r2
 80124d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f003 0320 	and.w	r3, r3, #32
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00a      	beq.n	80124fe <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80124e8:	4b7b      	ldr	r3, [pc, #492]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f6:	4978      	ldr	r1, [pc, #480]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80124f8:	4313      	orrs	r3, r2
 80124fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012506:	2b00      	cmp	r3, #0
 8012508:	d00a      	beq.n	8012520 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801250a:	4b73      	ldr	r3, [pc, #460]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012518:	496f      	ldr	r1, [pc, #444]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801251a:	4313      	orrs	r3, r2
 801251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00a      	beq.n	8012542 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801252c:	4b6a      	ldr	r3, [pc, #424]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253a:	4967      	ldr	r1, [pc, #412]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801253c:	4313      	orrs	r3, r2
 801253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00a      	beq.n	8012564 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801254e:	4b62      	ldr	r3, [pc, #392]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801255c:	495e      	ldr	r1, [pc, #376]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 801255e:	4313      	orrs	r3, r2
 8012560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00a      	beq.n	8012586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8012570:	4b59      	ldr	r3, [pc, #356]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257e:	4956      	ldr	r1, [pc, #344]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012580:	4313      	orrs	r3, r2
 8012582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00a      	beq.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012592:	4b51      	ldr	r3, [pc, #324]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a0:	494d      	ldr	r1, [pc, #308]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80125a2:	4313      	orrs	r3, r2
 80125a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d028      	beq.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80125b4:	4b48      	ldr	r3, [pc, #288]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80125b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125c2:	4945      	ldr	r1, [pc, #276]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80125c4:	4313      	orrs	r3, r2
 80125c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80125d2:	d106      	bne.n	80125e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80125d4:	4b40      	ldr	r3, [pc, #256]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	4a3f      	ldr	r2, [pc, #252]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80125da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125de:	60d3      	str	r3, [r2, #12]
 80125e0:	e011      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80125ea:	d10c      	bne.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x356>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	3304      	adds	r3, #4
 80125f0:	2101      	movs	r1, #1
 80125f2:	4618      	mov	r0, r3
 80125f4:	f000 f882 	bl	80126fc <RCCEx_PLLSAI1_Config>
 80125f8:	4603      	mov	r3, r0
 80125fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80125fc:	7cfb      	ldrb	r3, [r7, #19]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* set overall return value */
        status = ret;
 8012602:	7cfb      	ldrb	r3, [r7, #19]
 8012604:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d028      	beq.n	8012664 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012612:	4b31      	ldr	r3, [pc, #196]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012618:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012620:	492d      	ldr	r1, [pc, #180]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012622:	4313      	orrs	r3, r2
 8012624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801262c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012630:	d106      	bne.n	8012640 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012632:	4b29      	ldr	r3, [pc, #164]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	4a28      	ldr	r2, [pc, #160]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801263c:	60d3      	str	r3, [r2, #12]
 801263e:	e011      	b.n	8012664 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012648:	d10c      	bne.n	8012664 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3304      	adds	r3, #4
 801264e:	2101      	movs	r1, #1
 8012650:	4618      	mov	r0, r3
 8012652:	f000 f853 	bl	80126fc <RCCEx_PLLSAI1_Config>
 8012656:	4603      	mov	r3, r0
 8012658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801265a:	7cfb      	ldrb	r3, [r7, #19]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d001      	beq.n	8012664 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8012660:	7cfb      	ldrb	r3, [r7, #19]
 8012662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d01c      	beq.n	80126aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012670:	4b19      	ldr	r3, [pc, #100]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801267e:	4916      	ldr	r1, [pc, #88]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8012680:	4313      	orrs	r3, r2
 8012682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801268a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801268e:	d10c      	bne.n	80126aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	3304      	adds	r3, #4
 8012694:	2102      	movs	r1, #2
 8012696:	4618      	mov	r0, r3
 8012698:	f000 f830 	bl	80126fc <RCCEx_PLLSAI1_Config>
 801269c:	4603      	mov	r3, r0
 801269e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80126a0:	7cfb      	ldrb	r3, [r7, #19]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d001      	beq.n	80126aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      {
        /* set overall return value */
        status = ret;
 80126a6:	7cfb      	ldrb	r3, [r7, #19]
 80126a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d00a      	beq.n	80126cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80126b6:	4b08      	ldr	r3, [pc, #32]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80126b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126c4:	4904      	ldr	r1, [pc, #16]	; (80126d8 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80126c6:	4313      	orrs	r3, r2
 80126c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80126cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3718      	adds	r7, #24
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	40021000 	.word	0x40021000

080126dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80126dc:	b480      	push	{r7}
 80126de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80126e0:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a04      	ldr	r2, [pc, #16]	; (80126f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80126e6:	f043 0304 	orr.w	r3, r3, #4
 80126ea:	6013      	str	r3, [r2, #0]
}
 80126ec:	bf00      	nop
 80126ee:	46bd      	mov	sp, r7
 80126f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f4:	4770      	bx	lr
 80126f6:	bf00      	nop
 80126f8:	40021000 	.word	0x40021000

080126fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012706:	2300      	movs	r3, #0
 8012708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801270a:	4b73      	ldr	r3, [pc, #460]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	f003 0303 	and.w	r3, r3, #3
 8012712:	2b00      	cmp	r3, #0
 8012714:	d018      	beq.n	8012748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8012716:	4b70      	ldr	r3, [pc, #448]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	f003 0203 	and.w	r2, r3, #3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	d10d      	bne.n	8012742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
       ||
 801272a:	2b00      	cmp	r3, #0
 801272c:	d009      	beq.n	8012742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801272e:	4b6a      	ldr	r3, [pc, #424]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	091b      	lsrs	r3, r3, #4
 8012734:	f003 0307 	and.w	r3, r3, #7
 8012738:	1c5a      	adds	r2, r3, #1
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	685b      	ldr	r3, [r3, #4]
       ||
 801273e:	429a      	cmp	r2, r3
 8012740:	d044      	beq.n	80127cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8012742:	2301      	movs	r3, #1
 8012744:	73fb      	strb	r3, [r7, #15]
 8012746:	e041      	b.n	80127cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b02      	cmp	r3, #2
 801274e:	d00c      	beq.n	801276a <RCCEx_PLLSAI1_Config+0x6e>
 8012750:	2b03      	cmp	r3, #3
 8012752:	d013      	beq.n	801277c <RCCEx_PLLSAI1_Config+0x80>
 8012754:	2b01      	cmp	r3, #1
 8012756:	d120      	bne.n	801279a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012758:	4b5f      	ldr	r3, [pc, #380]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f003 0302 	and.w	r3, r3, #2
 8012760:	2b00      	cmp	r3, #0
 8012762:	d11d      	bne.n	80127a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8012764:	2301      	movs	r3, #1
 8012766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012768:	e01a      	b.n	80127a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801276a:	4b5b      	ldr	r3, [pc, #364]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012772:	2b00      	cmp	r3, #0
 8012774:	d116      	bne.n	80127a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8012776:	2301      	movs	r3, #1
 8012778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801277a:	e013      	b.n	80127a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801277c:	4b56      	ldr	r3, [pc, #344]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10f      	bne.n	80127a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012788:	4b53      	ldr	r3, [pc, #332]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012790:	2b00      	cmp	r3, #0
 8012792:	d109      	bne.n	80127a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8012794:	2301      	movs	r3, #1
 8012796:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012798:	e006      	b.n	80127a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 801279a:	2301      	movs	r3, #1
 801279c:	73fb      	strb	r3, [r7, #15]
      break;
 801279e:	e004      	b.n	80127aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80127a0:	bf00      	nop
 80127a2:	e002      	b.n	80127aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80127a4:	bf00      	nop
 80127a6:	e000      	b.n	80127aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80127a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80127aa:	7bfb      	ldrb	r3, [r7, #15]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d10d      	bne.n	80127cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80127b0:	4b49      	ldr	r3, [pc, #292]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6819      	ldr	r1, [r3, #0]
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	011b      	lsls	r3, r3, #4
 80127c4:	430b      	orrs	r3, r1
 80127c6:	4944      	ldr	r1, [pc, #272]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80127c8:	4313      	orrs	r3, r2
 80127ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d17c      	bne.n	80128cc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80127d2:	4b41      	ldr	r3, [pc, #260]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4a40      	ldr	r2, [pc, #256]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80127d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80127dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80127de:	f7fc f97b 	bl	800ead8 <HAL_GetTick>
 80127e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80127e4:	e009      	b.n	80127fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80127e6:	f7fc f977 	bl	800ead8 <HAL_GetTick>
 80127ea:	4602      	mov	r2, r0
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	2b02      	cmp	r3, #2
 80127f2:	d902      	bls.n	80127fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80127f4:	2303      	movs	r3, #3
 80127f6:	73fb      	strb	r3, [r7, #15]
        break;
 80127f8:	e005      	b.n	8012806 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80127fa:	4b37      	ldr	r3, [pc, #220]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1ef      	bne.n	80127e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8012806:	7bfb      	ldrb	r3, [r7, #15]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d15f      	bne.n	80128cc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d110      	bne.n	8012834 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012812:	4b31      	ldr	r3, [pc, #196]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012814:	691b      	ldr	r3, [r3, #16]
 8012816:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801281a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	6892      	ldr	r2, [r2, #8]
 8012822:	0211      	lsls	r1, r2, #8
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	68d2      	ldr	r2, [r2, #12]
 8012828:	06d2      	lsls	r2, r2, #27
 801282a:	430a      	orrs	r2, r1
 801282c:	492a      	ldr	r1, [pc, #168]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801282e:	4313      	orrs	r3, r2
 8012830:	610b      	str	r3, [r1, #16]
 8012832:	e027      	b.n	8012884 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d112      	bne.n	8012860 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801283a:	4b27      	ldr	r3, [pc, #156]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801283c:	691b      	ldr	r3, [r3, #16]
 801283e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012842:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	6892      	ldr	r2, [r2, #8]
 801284a:	0211      	lsls	r1, r2, #8
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	6912      	ldr	r2, [r2, #16]
 8012850:	0852      	lsrs	r2, r2, #1
 8012852:	3a01      	subs	r2, #1
 8012854:	0552      	lsls	r2, r2, #21
 8012856:	430a      	orrs	r2, r1
 8012858:	491f      	ldr	r1, [pc, #124]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801285a:	4313      	orrs	r3, r2
 801285c:	610b      	str	r3, [r1, #16]
 801285e:	e011      	b.n	8012884 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012860:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012862:	691b      	ldr	r3, [r3, #16]
 8012864:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	6892      	ldr	r2, [r2, #8]
 8012870:	0211      	lsls	r1, r2, #8
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	6952      	ldr	r2, [r2, #20]
 8012876:	0852      	lsrs	r2, r2, #1
 8012878:	3a01      	subs	r2, #1
 801287a:	0652      	lsls	r2, r2, #25
 801287c:	430a      	orrs	r2, r1
 801287e:	4916      	ldr	r1, [pc, #88]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012880:	4313      	orrs	r3, r2
 8012882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012884:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a13      	ldr	r2, [pc, #76]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 801288a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801288e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012890:	f7fc f922 	bl	800ead8 <HAL_GetTick>
 8012894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012896:	e009      	b.n	80128ac <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012898:	f7fc f91e 	bl	800ead8 <HAL_GetTick>
 801289c:	4602      	mov	r2, r0
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	1ad3      	subs	r3, r2, r3
 80128a2:	2b02      	cmp	r3, #2
 80128a4:	d902      	bls.n	80128ac <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80128a6:	2303      	movs	r3, #3
 80128a8:	73fb      	strb	r3, [r7, #15]
          break;
 80128aa:	e005      	b.n	80128b8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80128ac:	4b0a      	ldr	r3, [pc, #40]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d0ef      	beq.n	8012898 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80128b8:	7bfb      	ldrb	r3, [r7, #15]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d106      	bne.n	80128cc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80128be:	4b06      	ldr	r3, [pc, #24]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80128c0:	691a      	ldr	r2, [r3, #16]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	699b      	ldr	r3, [r3, #24]
 80128c6:	4904      	ldr	r1, [pc, #16]	; (80128d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80128c8:	4313      	orrs	r3, r2
 80128ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	40021000 	.word	0x40021000

080128dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80128e4:	2301      	movs	r3, #1
 80128e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d06c      	beq.n	80129c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d106      	bne.n	8012908 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f7fb fde2 	bl	800e4cc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2202      	movs	r2, #2
 801290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	22ca      	movs	r2, #202	; 0xca
 8012916:	625a      	str	r2, [r3, #36]	; 0x24
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2253      	movs	r2, #83	; 0x53
 801291e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f000 fa49 	bl	8012db8 <RTC_EnterInitMode>
 8012926:	4603      	mov	r3, r0
 8012928:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d14b      	bne.n	80129c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	6812      	ldr	r2, [r2, #0]
 801293a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801293e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012942:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	6899      	ldr	r1, [r3, #8]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	691b      	ldr	r3, [r3, #16]
 8012952:	431a      	orrs	r2, r3
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	699b      	ldr	r3, [r3, #24]
 8012958:	431a      	orrs	r2, r3
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	430a      	orrs	r2, r1
 8012960:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	68d2      	ldr	r2, [r2, #12]
 801296a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	6919      	ldr	r1, [r3, #16]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	041a      	lsls	r2, r3, #16
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	430a      	orrs	r2, r1
 801297e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f000 fa4d 	bl	8012e20 <RTC_ExitInitMode>
 8012986:	4603      	mov	r3, r0
 8012988:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d11b      	bne.n	80129c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f022 0203 	bic.w	r2, r2, #3
 801299e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	69da      	ldr	r2, [r3, #28]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	695b      	ldr	r3, [r3, #20]
 80129ae:	431a      	orrs	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	430a      	orrs	r2, r1
 80129b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	22ff      	movs	r2, #255	; 0xff
 80129be:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80129c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80129d2:	b590      	push	{r4, r7, lr}
 80129d4:	b087      	sub	sp, #28
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	60b9      	str	r1, [r7, #8]
 80129dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d101      	bne.n	80129ec <HAL_RTC_SetTime+0x1a>
 80129e8:	2302      	movs	r3, #2
 80129ea:	e08b      	b.n	8012b04 <HAL_RTC_SetTime+0x132>
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2201      	movs	r2, #1
 80129f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2202      	movs	r2, #2
 80129f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	22ca      	movs	r2, #202	; 0xca
 8012a02:	625a      	str	r2, [r3, #36]	; 0x24
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2253      	movs	r2, #83	; 0x53
 8012a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012a0c:	68f8      	ldr	r0, [r7, #12]
 8012a0e:	f000 f9d3 	bl	8012db8 <RTC_EnterInitMode>
 8012a12:	4603      	mov	r3, r0
 8012a14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012a16:	7cfb      	ldrb	r3, [r7, #19]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d163      	bne.n	8012ae4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d126      	bne.n	8012a70 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	2200      	movs	r2, #0
 8012a34:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fa2e 	bl	8012e9c <RTC_ByteToBcd2>
 8012a40:	4603      	mov	r3, r0
 8012a42:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	785b      	ldrb	r3, [r3, #1]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f000 fa27 	bl	8012e9c <RTC_ByteToBcd2>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a52:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	789b      	ldrb	r3, [r3, #2]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f000 fa1f 	bl	8012e9c <RTC_ByteToBcd2>
 8012a5e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a60:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	78db      	ldrb	r3, [r3, #3]
 8012a68:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	617b      	str	r3, [r7, #20]
 8012a6e:	e018      	b.n	8012aa2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d102      	bne.n	8012a84 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	2200      	movs	r2, #0
 8012a82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	785b      	ldrb	r3, [r3, #1]
 8012a8e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a90:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012a96:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	78db      	ldrb	r3, [r3, #3]
 8012a9c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012aac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012ab0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	689a      	ldr	r2, [r3, #8]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012ac0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	6899      	ldr	r1, [r3, #8]
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	68da      	ldr	r2, [r3, #12]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	431a      	orrs	r2, r3
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	430a      	orrs	r2, r1
 8012ad8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f000 f9a0 	bl	8012e20 <RTC_ExitInitMode>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	22ff      	movs	r2, #255	; 0xff
 8012aea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012aec:	7cfb      	ldrb	r3, [r7, #19]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d103      	bne.n	8012afa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2201      	movs	r2, #1
 8012af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012b02:	7cfb      	ldrb	r3, [r7, #19]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	371c      	adds	r7, #28
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd90      	pop	{r4, r7, pc}

08012b0c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012b3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012b3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	0c1b      	lsrs	r3, r3, #16
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b4a:	b2da      	uxtb	r2, r3
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	0a1b      	lsrs	r3, r3, #8
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b5a:	b2da      	uxtb	r2, r3
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	b2db      	uxtb	r3, r3
 8012b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b68:	b2da      	uxtb	r2, r3
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	0d9b      	lsrs	r3, r3, #22
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	f003 0301 	and.w	r3, r3, #1
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d11a      	bne.n	8012bba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 f9a7 	bl	8012edc <RTC_Bcd2ToByte>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	461a      	mov	r2, r3
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	785b      	ldrb	r3, [r3, #1]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f000 f99e 	bl	8012edc <RTC_Bcd2ToByte>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	789b      	ldrb	r3, [r3, #2]
 8012bac:	4618      	mov	r0, r3
 8012bae:	f000 f995 	bl	8012edc <RTC_Bcd2ToByte>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3718      	adds	r7, #24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012bc4:	b590      	push	{r4, r7, lr}
 8012bc6:	b087      	sub	sp, #28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d101      	bne.n	8012bde <HAL_RTC_SetDate+0x1a>
 8012bda:	2302      	movs	r3, #2
 8012bdc:	e075      	b.n	8012cca <HAL_RTC_SetDate+0x106>
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2201      	movs	r2, #1
 8012be2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	2202      	movs	r2, #2
 8012bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10e      	bne.n	8012c12 <HAL_RTC_SetDate+0x4e>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	785b      	ldrb	r3, [r3, #1]
 8012bf8:	f003 0310 	and.w	r3, r3, #16
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d008      	beq.n	8012c12 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	785b      	ldrb	r3, [r3, #1]
 8012c04:	f023 0310 	bic.w	r3, r3, #16
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	330a      	adds	r3, #10
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d11c      	bne.n	8012c52 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	78db      	ldrb	r3, [r3, #3]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f000 f93d 	bl	8012e9c <RTC_ByteToBcd2>
 8012c22:	4603      	mov	r3, r0
 8012c24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	785b      	ldrb	r3, [r3, #1]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f000 f936 	bl	8012e9c <RTC_ByteToBcd2>
 8012c30:	4603      	mov	r3, r0
 8012c32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012c34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	789b      	ldrb	r3, [r3, #2]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f000 f92e 	bl	8012e9c <RTC_ByteToBcd2>
 8012c40:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012c42:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	e00e      	b.n	8012c70 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	78db      	ldrb	r3, [r3, #3]
 8012c56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	785b      	ldrb	r3, [r3, #1]
 8012c5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012c5e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012c64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	22ca      	movs	r2, #202	; 0xca
 8012c76:	625a      	str	r2, [r3, #36]	; 0x24
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2253      	movs	r2, #83	; 0x53
 8012c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012c80:	68f8      	ldr	r0, [r7, #12]
 8012c82:	f000 f899 	bl	8012db8 <RTC_EnterInitMode>
 8012c86:	4603      	mov	r3, r0
 8012c88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012c8a:	7cfb      	ldrb	r3, [r7, #19]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d10c      	bne.n	8012caa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012c9e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f000 f8bd 	bl	8012e20 <RTC_ExitInitMode>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	22ff      	movs	r2, #255	; 0xff
 8012cb0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012cb2:	7cfb      	ldrb	r3, [r7, #19]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d103      	bne.n	8012cc0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012cc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	371c      	adds	r7, #28
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd90      	pop	{r4, r7, pc}

08012cd2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b086      	sub	sp, #24
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	60f8      	str	r0, [r7, #12]
 8012cda:	60b9      	str	r1, [r7, #8]
 8012cdc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ce8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012cec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	0c1b      	lsrs	r3, r3, #16
 8012cf2:	b2da      	uxtb	r2, r3
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	0a1b      	lsrs	r3, r3, #8
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	f003 031f 	and.w	r3, r3, #31
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d10:	b2da      	uxtb	r2, r3
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	0b5b      	lsrs	r3, r3, #13
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	f003 0307 	and.w	r3, r3, #7
 8012d20:	b2da      	uxtb	r2, r3
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d11a      	bne.n	8012d62 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	78db      	ldrb	r3, [r3, #3]
 8012d30:	4618      	mov	r0, r3
 8012d32:	f000 f8d3 	bl	8012edc <RTC_Bcd2ToByte>
 8012d36:	4603      	mov	r3, r0
 8012d38:	461a      	mov	r2, r3
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	785b      	ldrb	r3, [r3, #1]
 8012d42:	4618      	mov	r0, r3
 8012d44:	f000 f8ca 	bl	8012edc <RTC_Bcd2ToByte>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	789b      	ldrb	r3, [r3, #2]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 f8c1 	bl	8012edc <RTC_Bcd2ToByte>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012d62:	2300      	movs	r3, #0
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3718      	adds	r7, #24
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68da      	ldr	r2, [r3, #12]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012d82:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8012d84:	f7fb fea8 	bl	800ead8 <HAL_GetTick>
 8012d88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012d8a:	e009      	b.n	8012da0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012d8c:	f7fb fea4 	bl	800ead8 <HAL_GetTick>
 8012d90:	4602      	mov	r2, r0
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012d9a:	d901      	bls.n	8012da0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	e007      	b.n	8012db0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	f003 0320 	and.w	r3, r3, #32
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d0ee      	beq.n	8012d8c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d120      	bne.n	8012e14 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012ddc:	f7fb fe7c 	bl	800ead8 <HAL_GetTick>
 8012de0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012de2:	e00d      	b.n	8012e00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8012de4:	f7fb fe78 	bl	800ead8 <HAL_GetTick>
 8012de8:	4602      	mov	r2, r0
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012df2:	d905      	bls.n	8012e00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8012df4:	2303      	movs	r3, #3
 8012df6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2203      	movs	r2, #3
 8012dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d102      	bne.n	8012e14 <RTC_EnterInitMode+0x5c>
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
 8012e10:	2b03      	cmp	r3, #3
 8012e12:	d1e7      	bne.n	8012de4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8012e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
	...

08012e20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8012e2c:	4b1a      	ldr	r3, [pc, #104]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	4a19      	ldr	r2, [pc, #100]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e36:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012e38:	4b17      	ldr	r3, [pc, #92]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e3a:	689b      	ldr	r3, [r3, #8]
 8012e3c:	f003 0320 	and.w	r3, r3, #32
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d10c      	bne.n	8012e5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7ff ff91 	bl	8012d6c <HAL_RTC_WaitForSynchro>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d01e      	beq.n	8012e8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2203      	movs	r2, #3
 8012e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012e58:	2303      	movs	r3, #3
 8012e5a:	73fb      	strb	r3, [r7, #15]
 8012e5c:	e017      	b.n	8012e8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012e5e:	4b0e      	ldr	r3, [pc, #56]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e60:	689b      	ldr	r3, [r3, #8]
 8012e62:	4a0d      	ldr	r2, [pc, #52]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e64:	f023 0320 	bic.w	r3, r3, #32
 8012e68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7ff ff7e 	bl	8012d6c <HAL_RTC_WaitForSynchro>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d005      	beq.n	8012e82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2203      	movs	r2, #3
 8012e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012e7e:	2303      	movs	r3, #3
 8012e80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012e82:	4b05      	ldr	r3, [pc, #20]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	4a04      	ldr	r2, [pc, #16]	; (8012e98 <RTC_ExitInitMode+0x78>)
 8012e88:	f043 0320 	orr.w	r3, r3, #32
 8012e8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8012e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	40002800 	.word	0x40002800

08012e9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8012eaa:	79fb      	ldrb	r3, [r7, #7]
 8012eac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8012eae:	e005      	b.n	8012ebc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8012eb6:	7afb      	ldrb	r3, [r7, #11]
 8012eb8:	3b0a      	subs	r3, #10
 8012eba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8012ebc:	7afb      	ldrb	r3, [r7, #11]
 8012ebe:	2b09      	cmp	r3, #9
 8012ec0:	d8f6      	bhi.n	8012eb0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	011b      	lsls	r3, r3, #4
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	7afb      	ldrb	r3, [r7, #11]
 8012ecc:	4313      	orrs	r3, r2
 8012ece:	b2db      	uxtb	r3, r3
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3714      	adds	r7, #20
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012ee6:	79fb      	ldrb	r3, [r7, #7]
 8012ee8:	091b      	lsrs	r3, r3, #4
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	461a      	mov	r2, r3
 8012eee:	0092      	lsls	r2, r2, #2
 8012ef0:	4413      	add	r3, r2
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012ef6:	79fb      	ldrb	r3, [r7, #7]
 8012ef8:	f003 030f 	and.w	r3, r3, #15
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	7bfb      	ldrb	r3, [r7, #15]
 8012f00:	4413      	add	r3, r2
 8012f02:	b2db      	uxtb	r3, r3
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3714      	adds	r7, #20
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b087      	sub	sp, #28
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	3350      	adds	r3, #80	; 0x50
 8012f22:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	009a      	lsls	r2, r3, #2
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	461a      	mov	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6013      	str	r3, [r2, #0]
}
 8012f36:	bf00      	nop
 8012f38:	371c      	adds	r7, #28
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b084      	sub	sp, #16
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d101      	bne.n	8012f54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	e07c      	b.n	801304e <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d106      	bne.n	8012f74 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7fb fac8 	bl	800e504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2202      	movs	r2, #2
 8012f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	68db      	ldr	r3, [r3, #12]
 8012f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012f94:	d902      	bls.n	8012f9c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012f96:	2300      	movs	r3, #0
 8012f98:	60fb      	str	r3, [r7, #12]
 8012f9a:	e002      	b.n	8012fa2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012faa:	d007      	beq.n	8012fbc <HAL_SPI_Init+0x7a>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012fb4:	d002      	beq.n	8012fbc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d10b      	bne.n	8012fdc <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012fcc:	d903      	bls.n	8012fd6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2202      	movs	r2, #2
 8012fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8012fd4:	e002      	b.n	8012fdc <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685a      	ldr	r2, [r3, #4]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	431a      	orrs	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	691b      	ldr	r3, [r3, #16]
 8012fea:	431a      	orrs	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	695b      	ldr	r3, [r3, #20]
 8012ff0:	431a      	orrs	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	699b      	ldr	r3, [r3, #24]
 8012ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ffa:	431a      	orrs	r2, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	69db      	ldr	r3, [r3, #28]
 8013000:	431a      	orrs	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6a1b      	ldr	r3, [r3, #32]
 8013006:	ea42 0103 	orr.w	r1, r2, r3
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	430a      	orrs	r2, r1
 8013014:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	699b      	ldr	r3, [r3, #24]
 801301a:	0c1b      	lsrs	r3, r3, #16
 801301c:	f003 0204 	and.w	r2, r3, #4
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013024:	431a      	orrs	r2, r3
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801302a:	431a      	orrs	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	ea42 0103 	orr.w	r1, r2, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	68fa      	ldr	r2, [r7, #12]
 801303a:	430a      	orrs	r2, r1
 801303c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2201      	movs	r2, #1
 8013048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3710      	adds	r7, #16
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b088      	sub	sp, #32
 801305a:	af00      	add	r7, sp, #0
 801305c:	60f8      	str	r0, [r7, #12]
 801305e:	60b9      	str	r1, [r7, #8]
 8013060:	603b      	str	r3, [r7, #0]
 8013062:	4613      	mov	r3, r2
 8013064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013066:	2300      	movs	r3, #0
 8013068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013070:	2b01      	cmp	r3, #1
 8013072:	d101      	bne.n	8013078 <HAL_SPI_Transmit+0x22>
 8013074:	2302      	movs	r3, #2
 8013076:	e150      	b.n	801331a <HAL_SPI_Transmit+0x2c4>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2201      	movs	r2, #1
 801307c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013080:	f7fb fd2a 	bl	800ead8 <HAL_GetTick>
 8013084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013086:	88fb      	ldrh	r3, [r7, #6]
 8013088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b01      	cmp	r3, #1
 8013094:	d002      	beq.n	801309c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013096:	2302      	movs	r3, #2
 8013098:	77fb      	strb	r3, [r7, #31]
    goto error;
 801309a:	e135      	b.n	8013308 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <HAL_SPI_Transmit+0x52>
 80130a2:	88fb      	ldrh	r3, [r7, #6]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d102      	bne.n	80130ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80130a8:	2301      	movs	r3, #1
 80130aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80130ac:	e12c      	b.n	8013308 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2203      	movs	r2, #3
 80130b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	88fa      	ldrh	r2, [r7, #6]
 80130c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	88fa      	ldrh	r2, [r7, #6]
 80130cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2200      	movs	r2, #0
 80130d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2200      	movs	r2, #0
 80130e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2200      	movs	r2, #0
 80130e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2200      	movs	r2, #0
 80130ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130f8:	d107      	bne.n	801310a <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013108:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013114:	2b40      	cmp	r3, #64	; 0x40
 8013116:	d007      	beq.n	8013128 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	681a      	ldr	r2, [r3, #0]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013130:	d94b      	bls.n	80131ca <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d002      	beq.n	8013140 <HAL_SPI_Transmit+0xea>
 801313a:	8afb      	ldrh	r3, [r7, #22]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d13e      	bne.n	80131be <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013144:	881a      	ldrh	r2, [r3, #0]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013150:	1c9a      	adds	r2, r3, #2
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801315a:	b29b      	uxth	r3, r3
 801315c:	3b01      	subs	r3, #1
 801315e:	b29a      	uxth	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013164:	e02b      	b.n	80131be <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	f003 0302 	and.w	r3, r3, #2
 8013170:	2b02      	cmp	r3, #2
 8013172:	d112      	bne.n	801319a <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013178:	881a      	ldrh	r2, [r3, #0]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013184:	1c9a      	adds	r2, r3, #2
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801318e:	b29b      	uxth	r3, r3
 8013190:	3b01      	subs	r3, #1
 8013192:	b29a      	uxth	r2, r3
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013198:	e011      	b.n	80131be <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801319a:	f7fb fc9d 	bl	800ead8 <HAL_GetTick>
 801319e:	4602      	mov	r2, r0
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	683a      	ldr	r2, [r7, #0]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d803      	bhi.n	80131b2 <HAL_SPI_Transmit+0x15c>
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b0:	d102      	bne.n	80131b8 <HAL_SPI_Transmit+0x162>
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d102      	bne.n	80131be <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80131b8:	2303      	movs	r3, #3
 80131ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80131bc:	e0a4      	b.n	8013308 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d1ce      	bne.n	8013166 <HAL_SPI_Transmit+0x110>
 80131c8:	e07c      	b.n	80132c4 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d002      	beq.n	80131d8 <HAL_SPI_Transmit+0x182>
 80131d2:	8afb      	ldrh	r3, [r7, #22]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d170      	bne.n	80132ba <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131dc:	b29b      	uxth	r3, r3
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d912      	bls.n	8013208 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131e6:	881a      	ldrh	r2, [r3, #0]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131f2:	1c9a      	adds	r2, r3, #2
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	3b02      	subs	r3, #2
 8013200:	b29a      	uxth	r2, r3
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013206:	e058      	b.n	80132ba <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	330c      	adds	r3, #12
 8013212:	7812      	ldrb	r2, [r2, #0]
 8013214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801321a:	1c5a      	adds	r2, r3, #1
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013224:	b29b      	uxth	r3, r3
 8013226:	3b01      	subs	r3, #1
 8013228:	b29a      	uxth	r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801322e:	e044      	b.n	80132ba <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	f003 0302 	and.w	r3, r3, #2
 801323a:	2b02      	cmp	r3, #2
 801323c:	d12b      	bne.n	8013296 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013242:	b29b      	uxth	r3, r3
 8013244:	2b01      	cmp	r3, #1
 8013246:	d912      	bls.n	801326e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801324c:	881a      	ldrh	r2, [r3, #0]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013258:	1c9a      	adds	r2, r3, #2
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013262:	b29b      	uxth	r3, r3
 8013264:	3b02      	subs	r3, #2
 8013266:	b29a      	uxth	r2, r3
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801326c:	e025      	b.n	80132ba <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	330c      	adds	r3, #12
 8013278:	7812      	ldrb	r2, [r2, #0]
 801327a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013280:	1c5a      	adds	r2, r3, #1
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801328a:	b29b      	uxth	r3, r3
 801328c:	3b01      	subs	r3, #1
 801328e:	b29a      	uxth	r2, r3
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013294:	e011      	b.n	80132ba <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013296:	f7fb fc1f 	bl	800ead8 <HAL_GetTick>
 801329a:	4602      	mov	r2, r0
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d803      	bhi.n	80132ae <HAL_SPI_Transmit+0x258>
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ac:	d102      	bne.n	80132b4 <HAL_SPI_Transmit+0x25e>
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d102      	bne.n	80132ba <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80132b4:	2303      	movs	r3, #3
 80132b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80132b8:	e026      	b.n	8013308 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132be:	b29b      	uxth	r3, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d1b5      	bne.n	8013230 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80132c4:	69ba      	ldr	r2, [r7, #24]
 80132c6:	6839      	ldr	r1, [r7, #0]
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 fb22 	bl	8013912 <SPI_EndRxTxTransaction>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2220      	movs	r2, #32
 80132d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	689b      	ldr	r3, [r3, #8]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d10a      	bne.n	80132f8 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80132e2:	2300      	movs	r3, #0
 80132e4:	613b      	str	r3, [r7, #16]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	68db      	ldr	r3, [r3, #12]
 80132ec:	613b      	str	r3, [r7, #16]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	689b      	ldr	r3, [r3, #8]
 80132f4:	613b      	str	r3, [r7, #16]
 80132f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d002      	beq.n	8013306 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8013300:	2301      	movs	r3, #1
 8013302:	77fb      	strb	r3, [r7, #31]
 8013304:	e000      	b.n	8013308 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8013306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2201      	movs	r2, #1
 801330c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	2200      	movs	r2, #0
 8013314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013318:	7ffb      	ldrb	r3, [r7, #31]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3720      	adds	r7, #32
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b08a      	sub	sp, #40	; 0x28
 8013326:	af00      	add	r7, sp, #0
 8013328:	60f8      	str	r0, [r7, #12]
 801332a:	60b9      	str	r1, [r7, #8]
 801332c:	607a      	str	r2, [r7, #4]
 801332e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013330:	2301      	movs	r3, #1
 8013332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013334:	2300      	movs	r3, #0
 8013336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013340:	2b01      	cmp	r3, #1
 8013342:	d101      	bne.n	8013348 <HAL_SPI_TransmitReceive+0x26>
 8013344:	2302      	movs	r3, #2
 8013346:	e1fb      	b.n	8013740 <HAL_SPI_TransmitReceive+0x41e>
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2201      	movs	r2, #1
 801334c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013350:	f7fb fbc2 	bl	800ead8 <HAL_GetTick>
 8013354:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801335c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8013364:	887b      	ldrh	r3, [r7, #2]
 8013366:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8013368:	887b      	ldrh	r3, [r7, #2]
 801336a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801336c:	7efb      	ldrb	r3, [r7, #27]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d00e      	beq.n	8013390 <HAL_SPI_TransmitReceive+0x6e>
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013378:	d106      	bne.n	8013388 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d102      	bne.n	8013388 <HAL_SPI_TransmitReceive+0x66>
 8013382:	7efb      	ldrb	r3, [r7, #27]
 8013384:	2b04      	cmp	r3, #4
 8013386:	d003      	beq.n	8013390 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8013388:	2302      	movs	r3, #2
 801338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801338e:	e1cd      	b.n	801372c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d005      	beq.n	80133a2 <HAL_SPI_TransmitReceive+0x80>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d002      	beq.n	80133a2 <HAL_SPI_TransmitReceive+0x80>
 801339c:	887b      	ldrh	r3, [r7, #2]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d103      	bne.n	80133aa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80133a2:	2301      	movs	r3, #1
 80133a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80133a8:	e1c0      	b.n	801372c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80133b0:	b2db      	uxtb	r3, r3
 80133b2:	2b04      	cmp	r3, #4
 80133b4:	d003      	beq.n	80133be <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2205      	movs	r2, #5
 80133ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2200      	movs	r2, #0
 80133c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	887a      	ldrh	r2, [r7, #2]
 80133ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	887a      	ldrh	r2, [r7, #2]
 80133d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	887a      	ldrh	r2, [r7, #2]
 80133e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	887a      	ldrh	r2, [r7, #2]
 80133ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2200      	movs	r2, #0
 80133f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2200      	movs	r2, #0
 80133f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013400:	d802      	bhi.n	8013408 <HAL_SPI_TransmitReceive+0xe6>
 8013402:	8a3b      	ldrh	r3, [r7, #16]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d908      	bls.n	801341a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	685a      	ldr	r2, [r3, #4]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013416:	605a      	str	r2, [r3, #4]
 8013418:	e007      	b.n	801342a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	685a      	ldr	r2, [r3, #4]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013428:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013434:	2b40      	cmp	r3, #64	; 0x40
 8013436:	d007      	beq.n	8013448 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013450:	d97c      	bls.n	801354c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d002      	beq.n	8013460 <HAL_SPI_TransmitReceive+0x13e>
 801345a:	8a7b      	ldrh	r3, [r7, #18]
 801345c:	2b01      	cmp	r3, #1
 801345e:	d169      	bne.n	8013534 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013464:	881a      	ldrh	r2, [r3, #0]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013470:	1c9a      	adds	r2, r3, #2
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801347a:	b29b      	uxth	r3, r3
 801347c:	3b01      	subs	r3, #1
 801347e:	b29a      	uxth	r2, r3
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013484:	e056      	b.n	8013534 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	689b      	ldr	r3, [r3, #8]
 801348c:	f003 0302 	and.w	r3, r3, #2
 8013490:	2b02      	cmp	r3, #2
 8013492:	d11b      	bne.n	80134cc <HAL_SPI_TransmitReceive+0x1aa>
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013498:	b29b      	uxth	r3, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d016      	beq.n	80134cc <HAL_SPI_TransmitReceive+0x1aa>
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	d113      	bne.n	80134cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a8:	881a      	ldrh	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134b4:	1c9a      	adds	r2, r3, #2
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80134be:	b29b      	uxth	r3, r3
 80134c0:	3b01      	subs	r3, #1
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80134c8:	2300      	movs	r3, #0
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	f003 0301 	and.w	r3, r3, #1
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d11c      	bne.n	8013514 <HAL_SPI_TransmitReceive+0x1f2>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d016      	beq.n	8013514 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	68da      	ldr	r2, [r3, #12]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f0:	b292      	uxth	r2, r2
 80134f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f8:	1c9a      	adds	r2, r3, #2
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013504:	b29b      	uxth	r3, r3
 8013506:	3b01      	subs	r3, #1
 8013508:	b29a      	uxth	r2, r3
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013510:	2301      	movs	r3, #1
 8013512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013514:	f7fb fae0 	bl	800ead8 <HAL_GetTick>
 8013518:	4602      	mov	r2, r0
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013520:	429a      	cmp	r2, r3
 8013522:	d807      	bhi.n	8013534 <HAL_SPI_TransmitReceive+0x212>
 8013524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801352a:	d003      	beq.n	8013534 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801352c:	2303      	movs	r3, #3
 801352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8013532:	e0fb      	b.n	801372c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013538:	b29b      	uxth	r3, r3
 801353a:	2b00      	cmp	r3, #0
 801353c:	d1a3      	bne.n	8013486 <HAL_SPI_TransmitReceive+0x164>
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013544:	b29b      	uxth	r3, r3
 8013546:	2b00      	cmp	r3, #0
 8013548:	d19d      	bne.n	8013486 <HAL_SPI_TransmitReceive+0x164>
 801354a:	e0df      	b.n	801370c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	685b      	ldr	r3, [r3, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d003      	beq.n	801355c <HAL_SPI_TransmitReceive+0x23a>
 8013554:	8a7b      	ldrh	r3, [r7, #18]
 8013556:	2b01      	cmp	r3, #1
 8013558:	f040 80cb 	bne.w	80136f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013560:	b29b      	uxth	r3, r3
 8013562:	2b01      	cmp	r3, #1
 8013564:	d912      	bls.n	801358c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801356a:	881a      	ldrh	r2, [r3, #0]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013576:	1c9a      	adds	r2, r3, #2
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013580:	b29b      	uxth	r3, r3
 8013582:	3b02      	subs	r3, #2
 8013584:	b29a      	uxth	r2, r3
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	87da      	strh	r2, [r3, #62]	; 0x3e
 801358a:	e0b2      	b.n	80136f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	330c      	adds	r3, #12
 8013596:	7812      	ldrb	r2, [r2, #0]
 8013598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801359e:	1c5a      	adds	r2, r3, #1
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	3b01      	subs	r3, #1
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80135b2:	e09e      	b.n	80136f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	f003 0302 	and.w	r3, r3, #2
 80135be:	2b02      	cmp	r3, #2
 80135c0:	d134      	bne.n	801362c <HAL_SPI_TransmitReceive+0x30a>
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d02f      	beq.n	801362c <HAL_SPI_TransmitReceive+0x30a>
 80135cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d12c      	bne.n	801362c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d912      	bls.n	8013602 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135e0:	881a      	ldrh	r2, [r3, #0]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135ec:	1c9a      	adds	r2, r3, #2
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	3b02      	subs	r3, #2
 80135fa:	b29a      	uxth	r2, r3
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013600:	e012      	b.n	8013628 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	330c      	adds	r3, #12
 801360c:	7812      	ldrb	r2, [r2, #0]
 801360e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013614:	1c5a      	adds	r2, r3, #1
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801361e:	b29b      	uxth	r3, r3
 8013620:	3b01      	subs	r3, #1
 8013622:	b29a      	uxth	r2, r3
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013628:	2300      	movs	r3, #0
 801362a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	f003 0301 	and.w	r3, r3, #1
 8013636:	2b01      	cmp	r3, #1
 8013638:	d148      	bne.n	80136cc <HAL_SPI_TransmitReceive+0x3aa>
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013640:	b29b      	uxth	r3, r3
 8013642:	2b00      	cmp	r3, #0
 8013644:	d042      	beq.n	80136cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801364c:	b29b      	uxth	r3, r3
 801364e:	2b01      	cmp	r3, #1
 8013650:	d923      	bls.n	801369a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	68da      	ldr	r2, [r3, #12]
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801365c:	b292      	uxth	r2, r2
 801365e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013664:	1c9a      	adds	r2, r3, #2
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013670:	b29b      	uxth	r3, r3
 8013672:	3b02      	subs	r3, #2
 8013674:	b29a      	uxth	r2, r3
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013682:	b29b      	uxth	r3, r3
 8013684:	2b01      	cmp	r3, #1
 8013686:	d81f      	bhi.n	80136c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	685a      	ldr	r2, [r3, #4]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013696:	605a      	str	r2, [r3, #4]
 8013698:	e016      	b.n	80136c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	f103 020c 	add.w	r2, r3, #12
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a6:	7812      	ldrb	r2, [r2, #0]
 80136a8:	b2d2      	uxtb	r2, r2
 80136aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136b0:	1c5a      	adds	r2, r3, #1
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80136bc:	b29b      	uxth	r3, r3
 80136be:	3b01      	subs	r3, #1
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80136c8:	2301      	movs	r3, #1
 80136ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80136cc:	f7fb fa04 	bl	800ead8 <HAL_GetTick>
 80136d0:	4602      	mov	r2, r0
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136d8:	429a      	cmp	r2, r3
 80136da:	d803      	bhi.n	80136e4 <HAL_SPI_TransmitReceive+0x3c2>
 80136dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e2:	d102      	bne.n	80136ea <HAL_SPI_TransmitReceive+0x3c8>
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d103      	bne.n	80136f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80136ea:	2303      	movs	r3, #3
 80136ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80136f0:	e01c      	b.n	801372c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	f47f af5b 	bne.w	80135b4 <HAL_SPI_TransmitReceive+0x292>
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013704:	b29b      	uxth	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	f47f af54 	bne.w	80135b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801370c:	69fa      	ldr	r2, [r7, #28]
 801370e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f000 f8fe 	bl	8013912 <SPI_EndRxTxTransaction>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d006      	beq.n	801372a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2220      	movs	r2, #32
 8013726:	661a      	str	r2, [r3, #96]	; 0x60
 8013728:	e000      	b.n	801372c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801372a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2201      	movs	r2, #1
 8013730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2200      	movs	r2, #0
 8013738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801373c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8013740:	4618      	mov	r0, r3
 8013742:	3728      	adds	r7, #40	; 0x28
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013756:	b2db      	uxtb	r3, r3
}
 8013758:	4618      	mov	r0, r3
 801375a:	370c      	adds	r7, #12
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr

08013764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	603b      	str	r3, [r7, #0]
 8013770:	4613      	mov	r3, r2
 8013772:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013774:	e04c      	b.n	8013810 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801377c:	d048      	beq.n	8013810 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801377e:	f7fb f9ab 	bl	800ead8 <HAL_GetTick>
 8013782:	4602      	mov	r2, r0
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	683a      	ldr	r2, [r7, #0]
 801378a:	429a      	cmp	r2, r3
 801378c:	d902      	bls.n	8013794 <SPI_WaitFlagStateUntilTimeout+0x30>
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d13d      	bne.n	8013810 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80137a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137ac:	d111      	bne.n	80137d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	689b      	ldr	r3, [r3, #8]
 80137b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137b6:	d004      	beq.n	80137c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137c0:	d107      	bne.n	80137d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137da:	d10f      	bne.n	80137fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80137fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2201      	movs	r2, #1
 8013800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2200      	movs	r2, #0
 8013808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801380c:	2303      	movs	r3, #3
 801380e:	e00f      	b.n	8013830 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	689a      	ldr	r2, [r3, #8]
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	4013      	ands	r3, r2
 801381a:	68ba      	ldr	r2, [r7, #8]
 801381c:	429a      	cmp	r2, r3
 801381e:	bf0c      	ite	eq
 8013820:	2301      	moveq	r3, #1
 8013822:	2300      	movne	r3, #0
 8013824:	b2db      	uxtb	r3, r3
 8013826:	461a      	mov	r2, r3
 8013828:	79fb      	ldrb	r3, [r7, #7]
 801382a:	429a      	cmp	r2, r3
 801382c:	d1a3      	bne.n	8013776 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801382e:	2300      	movs	r3, #0
}
 8013830:	4618      	mov	r0, r3
 8013832:	3710      	adds	r7, #16
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b084      	sub	sp, #16
 801383c:	af00      	add	r7, sp, #0
 801383e:	60f8      	str	r0, [r7, #12]
 8013840:	60b9      	str	r1, [r7, #8]
 8013842:	607a      	str	r2, [r7, #4]
 8013844:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8013846:	e057      	b.n	80138f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801384e:	d106      	bne.n	801385e <SPI_WaitFifoStateUntilTimeout+0x26>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d103      	bne.n	801385e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	330c      	adds	r3, #12
 801385c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013864:	d048      	beq.n	80138f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013866:	f7fb f937 	bl	800ead8 <HAL_GetTick>
 801386a:	4602      	mov	r2, r0
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	683a      	ldr	r2, [r7, #0]
 8013872:	429a      	cmp	r2, r3
 8013874:	d902      	bls.n	801387c <SPI_WaitFifoStateUntilTimeout+0x44>
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d13d      	bne.n	80138f8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	685a      	ldr	r2, [r3, #4]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801388a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013894:	d111      	bne.n	80138ba <SPI_WaitFifoStateUntilTimeout+0x82>
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801389e:	d004      	beq.n	80138aa <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138a8:	d107      	bne.n	80138ba <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80138b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80138c2:	d10f      	bne.n	80138e4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80138e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2201      	movs	r2, #1
 80138e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80138f4:	2303      	movs	r3, #3
 80138f6:	e008      	b.n	801390a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	689a      	ldr	r2, [r3, #8]
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	4013      	ands	r3, r2
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	429a      	cmp	r2, r3
 8013906:	d19f      	bne.n	8013848 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b086      	sub	sp, #24
 8013916:	af02      	add	r7, sp, #8
 8013918:	60f8      	str	r0, [r7, #12]
 801391a:	60b9      	str	r1, [r7, #8]
 801391c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	2200      	movs	r2, #0
 8013926:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801392a:	68f8      	ldr	r0, [r7, #12]
 801392c:	f7ff ff84 	bl	8013838 <SPI_WaitFifoStateUntilTimeout>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d007      	beq.n	8013946 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801393a:	f043 0220 	orr.w	r2, r3, #32
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013942:	2303      	movs	r3, #3
 8013944:	e027      	b.n	8013996 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2200      	movs	r2, #0
 801394e:	2180      	movs	r1, #128	; 0x80
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	f7ff ff07 	bl	8013764 <SPI_WaitFlagStateUntilTimeout>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d007      	beq.n	801396c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013960:	f043 0220 	orr.w	r2, r3, #32
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013968:	2303      	movs	r3, #3
 801396a:	e014      	b.n	8013996 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	2200      	movs	r2, #0
 8013974:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f7ff ff5d 	bl	8013838 <SPI_WaitFifoStateUntilTimeout>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d007      	beq.n	8013994 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013988:	f043 0220 	orr.w	r2, r3, #32
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013990:	2303      	movs	r3, #3
 8013992:	e000      	b.n	8013996 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8013994:	2300      	movs	r3, #0
}
 8013996:	4618      	mov	r0, r3
 8013998:	3710      	adds	r7, #16
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}

0801399e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801399e:	b580      	push	{r7, lr}
 80139a0:	b082      	sub	sp, #8
 80139a2:	af00      	add	r7, sp, #0
 80139a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80139ac:	2301      	movs	r3, #1
 80139ae:	e01d      	b.n	80139ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d106      	bne.n	80139ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 f815 	bl	80139f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2202      	movs	r2, #2
 80139ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	3304      	adds	r3, #4
 80139da:	4619      	mov	r1, r3
 80139dc:	4610      	mov	r0, r2
 80139de:	f000 f985 	bl	8013cec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2201      	movs	r2, #1
 80139e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80139ea:	2300      	movs	r3, #0
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80139fc:	bf00      	nop
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b085      	sub	sp, #20
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	68da      	ldr	r2, [r3, #12]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f042 0201 	orr.w	r2, r2, #1
 8013a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	689a      	ldr	r2, [r3, #8]
 8013a26:	4b0c      	ldr	r3, [pc, #48]	; (8013a58 <HAL_TIM_Base_Start_IT+0x50>)
 8013a28:	4013      	ands	r3, r2
 8013a2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2b06      	cmp	r3, #6
 8013a30:	d00b      	beq.n	8013a4a <HAL_TIM_Base_Start_IT+0x42>
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a38:	d007      	beq.n	8013a4a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f042 0201 	orr.w	r2, r2, #1
 8013a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013a4a:	2300      	movs	r3, #0
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3714      	adds	r7, #20
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr
 8013a58:	00010007 	.word	0x00010007

08013a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	691b      	ldr	r3, [r3, #16]
 8013a6a:	f003 0302 	and.w	r3, r3, #2
 8013a6e:	2b02      	cmp	r3, #2
 8013a70:	d122      	bne.n	8013ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	f003 0302 	and.w	r3, r3, #2
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d11b      	bne.n	8013ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f06f 0202 	mvn.w	r2, #2
 8013a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	699b      	ldr	r3, [r3, #24]
 8013a96:	f003 0303 	and.w	r3, r3, #3
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d003      	beq.n	8013aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 f905 	bl	8013cae <HAL_TIM_IC_CaptureCallback>
 8013aa4:	e005      	b.n	8013ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f000 f8f7 	bl	8013c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 f908 	bl	8013cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	691b      	ldr	r3, [r3, #16]
 8013abe:	f003 0304 	and.w	r3, r3, #4
 8013ac2:	2b04      	cmp	r3, #4
 8013ac4:	d122      	bne.n	8013b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	f003 0304 	and.w	r3, r3, #4
 8013ad0:	2b04      	cmp	r3, #4
 8013ad2:	d11b      	bne.n	8013b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f06f 0204 	mvn.w	r2, #4
 8013adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2202      	movs	r2, #2
 8013ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	699b      	ldr	r3, [r3, #24]
 8013aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 f8db 	bl	8013cae <HAL_TIM_IC_CaptureCallback>
 8013af8:	e005      	b.n	8013b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f8cd 	bl	8013c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f000 f8de 	bl	8013cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	691b      	ldr	r3, [r3, #16]
 8013b12:	f003 0308 	and.w	r3, r3, #8
 8013b16:	2b08      	cmp	r3, #8
 8013b18:	d122      	bne.n	8013b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	f003 0308 	and.w	r3, r3, #8
 8013b24:	2b08      	cmp	r3, #8
 8013b26:	d11b      	bne.n	8013b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f06f 0208 	mvn.w	r2, #8
 8013b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2204      	movs	r2, #4
 8013b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	69db      	ldr	r3, [r3, #28]
 8013b3e:	f003 0303 	and.w	r3, r3, #3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d003      	beq.n	8013b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 f8b1 	bl	8013cae <HAL_TIM_IC_CaptureCallback>
 8013b4c:	e005      	b.n	8013b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f000 f8a3 	bl	8013c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 f8b4 	bl	8013cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	691b      	ldr	r3, [r3, #16]
 8013b66:	f003 0310 	and.w	r3, r3, #16
 8013b6a:	2b10      	cmp	r3, #16
 8013b6c:	d122      	bne.n	8013bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	f003 0310 	and.w	r3, r3, #16
 8013b78:	2b10      	cmp	r3, #16
 8013b7a:	d11b      	bne.n	8013bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f06f 0210 	mvn.w	r2, #16
 8013b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2208      	movs	r2, #8
 8013b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	69db      	ldr	r3, [r3, #28]
 8013b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d003      	beq.n	8013ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 f887 	bl	8013cae <HAL_TIM_IC_CaptureCallback>
 8013ba0:	e005      	b.n	8013bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f000 f879 	bl	8013c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 f88a 	bl	8013cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	691b      	ldr	r3, [r3, #16]
 8013bba:	f003 0301 	and.w	r3, r3, #1
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d10e      	bne.n	8013be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	f003 0301 	and.w	r3, r3, #1
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d107      	bne.n	8013be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f06f 0201 	mvn.w	r2, #1
 8013bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f7fa fbba 	bl	800e354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	691b      	ldr	r3, [r3, #16]
 8013be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bea:	2b80      	cmp	r3, #128	; 0x80
 8013bec:	d10e      	bne.n	8013c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bf8:	2b80      	cmp	r3, #128	; 0x80
 8013bfa:	d107      	bne.n	8013c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f8de 	bl	8013dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	691b      	ldr	r3, [r3, #16]
 8013c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c1a:	d10e      	bne.n	8013c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c26:	2b80      	cmp	r3, #128	; 0x80
 8013c28:	d107      	bne.n	8013c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f000 f8d1 	bl	8013ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	691b      	ldr	r3, [r3, #16]
 8013c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c44:	2b40      	cmp	r3, #64	; 0x40
 8013c46:	d10e      	bne.n	8013c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	68db      	ldr	r3, [r3, #12]
 8013c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c52:	2b40      	cmp	r3, #64	; 0x40
 8013c54:	d107      	bne.n	8013c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f000 f838 	bl	8013cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	691b      	ldr	r3, [r3, #16]
 8013c6c:	f003 0320 	and.w	r3, r3, #32
 8013c70:	2b20      	cmp	r3, #32
 8013c72:	d10e      	bne.n	8013c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	f003 0320 	and.w	r3, r3, #32
 8013c7e:	2b20      	cmp	r3, #32
 8013c80:	d107      	bne.n	8013c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f06f 0220 	mvn.w	r2, #32
 8013c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f000 f891 	bl	8013db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013c92:	bf00      	nop
 8013c94:	3708      	adds	r7, #8
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013c9a:	b480      	push	{r7}
 8013c9c:	b083      	sub	sp, #12
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013ca2:	bf00      	nop
 8013ca4:	370c      	adds	r7, #12
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr

08013cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013cae:	b480      	push	{r7}
 8013cb0:	b083      	sub	sp, #12
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013cb6:	bf00      	nop
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr

08013cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013cc2:	b480      	push	{r7}
 8013cc4:	b083      	sub	sp, #12
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013cca:	bf00      	nop
 8013ccc:	370c      	adds	r7, #12
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr

08013cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013cd6:	b480      	push	{r7}
 8013cd8:	b083      	sub	sp, #12
 8013cda:	af00      	add	r7, sp, #0
 8013cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013cde:	bf00      	nop
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce8:	4770      	bx	lr
	...

08013cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b085      	sub	sp, #20
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	4a2a      	ldr	r2, [pc, #168]	; (8013da8 <TIM_Base_SetConfig+0xbc>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d003      	beq.n	8013d0c <TIM_Base_SetConfig+0x20>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d0a:	d108      	bne.n	8013d1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a21      	ldr	r2, [pc, #132]	; (8013da8 <TIM_Base_SetConfig+0xbc>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d00b      	beq.n	8013d3e <TIM_Base_SetConfig+0x52>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d2c:	d007      	beq.n	8013d3e <TIM_Base_SetConfig+0x52>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a1e      	ldr	r2, [pc, #120]	; (8013dac <TIM_Base_SetConfig+0xc0>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d003      	beq.n	8013d3e <TIM_Base_SetConfig+0x52>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a1d      	ldr	r2, [pc, #116]	; (8013db0 <TIM_Base_SetConfig+0xc4>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d108      	bne.n	8013d50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	68db      	ldr	r3, [r3, #12]
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	4313      	orrs	r3, r2
 8013d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	695b      	ldr	r3, [r3, #20]
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	689a      	ldr	r2, [r3, #8]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4a0c      	ldr	r2, [pc, #48]	; (8013da8 <TIM_Base_SetConfig+0xbc>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d007      	beq.n	8013d8c <TIM_Base_SetConfig+0xa0>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4a0b      	ldr	r2, [pc, #44]	; (8013dac <TIM_Base_SetConfig+0xc0>)
 8013d80:	4293      	cmp	r3, r2
 8013d82:	d003      	beq.n	8013d8c <TIM_Base_SetConfig+0xa0>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	4a0a      	ldr	r2, [pc, #40]	; (8013db0 <TIM_Base_SetConfig+0xc4>)
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d103      	bne.n	8013d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	691a      	ldr	r2, [r3, #16]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2201      	movs	r2, #1
 8013d98:	615a      	str	r2, [r3, #20]
}
 8013d9a:	bf00      	nop
 8013d9c:	3714      	adds	r7, #20
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr
 8013da6:	bf00      	nop
 8013da8:	40012c00 	.word	0x40012c00
 8013dac:	40014000 	.word	0x40014000
 8013db0:	40014400 	.word	0x40014400

08013db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013dbc:	bf00      	nop
 8013dbe:	370c      	adds	r7, #12
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013dd0:	bf00      	nop
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013de4:	bf00      	nop
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d101      	bne.n	8013e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e040      	b.n	8013e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f7fa fbba 	bl	800e58c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2224      	movs	r2, #36	; 0x24
 8013e1c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f022 0201 	bic.w	r2, r2, #1
 8013e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f000 fabc 	bl	80143ac <UART_SetConfig>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d101      	bne.n	8013e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e022      	b.n	8013e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d002      	beq.n	8013e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 fdc4 	bl	80149d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	689a      	ldr	r2, [r3, #8]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	f042 0201 	orr.w	r2, r2, #1
 8013e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f000 fe4b 	bl	8014b18 <UART_CheckIdleState>
 8013e82:	4603      	mov	r3, r0
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b08a      	sub	sp, #40	; 0x28
 8013e90:	af02      	add	r7, sp, #8
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	603b      	str	r3, [r7, #0]
 8013e98:	4613      	mov	r3, r2
 8013e9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ea0:	2b20      	cmp	r3, #32
 8013ea2:	f040 8081 	bne.w	8013fa8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d002      	beq.n	8013eb2 <HAL_UART_Transmit+0x26>
 8013eac:	88fb      	ldrh	r3, [r7, #6]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d101      	bne.n	8013eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e079      	b.n	8013faa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	d101      	bne.n	8013ec4 <HAL_UART_Transmit+0x38>
 8013ec0:	2302      	movs	r3, #2
 8013ec2:	e072      	b.n	8013faa <HAL_UART_Transmit+0x11e>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	2221      	movs	r2, #33	; 0x21
 8013ed6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8013ed8:	f7fa fdfe 	bl	800ead8 <HAL_GetTick>
 8013edc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	88fa      	ldrh	r2, [r7, #6]
 8013ee2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	88fa      	ldrh	r2, [r7, #6]
 8013eea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ef6:	d108      	bne.n	8013f0a <HAL_UART_Transmit+0x7e>
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	691b      	ldr	r3, [r3, #16]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d104      	bne.n	8013f0a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8013f00:	2300      	movs	r3, #0
 8013f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	61bb      	str	r3, [r7, #24]
 8013f08:	e003      	b.n	8013f12 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2200      	movs	r2, #0
 8013f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8013f1a:	e02d      	b.n	8013f78 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	2200      	movs	r2, #0
 8013f24:	2180      	movs	r1, #128	; 0x80
 8013f26:	68f8      	ldr	r0, [r7, #12]
 8013f28:	f000 fe3b 	bl	8014ba2 <UART_WaitOnFlagUntilTimeout>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d001      	beq.n	8013f36 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e039      	b.n	8013faa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d10b      	bne.n	8013f54 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	881a      	ldrh	r2, [r3, #0]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013f48:	b292      	uxth	r2, r2
 8013f4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	3302      	adds	r3, #2
 8013f50:	61bb      	str	r3, [r7, #24]
 8013f52:	e008      	b.n	8013f66 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013f54:	69fb      	ldr	r3, [r7, #28]
 8013f56:	781a      	ldrb	r2, [r3, #0]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	b292      	uxth	r2, r2
 8013f5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	3301      	adds	r3, #1
 8013f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d1cb      	bne.n	8013f1c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	2140      	movs	r1, #64	; 0x40
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f000 fe07 	bl	8014ba2 <UART_WaitOnFlagUntilTimeout>
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d001      	beq.n	8013f9e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8013f9a:	2303      	movs	r3, #3
 8013f9c:	e005      	b.n	8013faa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2220      	movs	r2, #32
 8013fa2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	e000      	b.n	8013faa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8013fa8:	2302      	movs	r3, #2
  }
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3720      	adds	r7, #32
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
	...

08013fb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b085      	sub	sp, #20
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fc6:	2b20      	cmp	r3, #32
 8013fc8:	f040 808a 	bne.w	80140e0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d002      	beq.n	8013fd8 <HAL_UART_Receive_IT+0x24>
 8013fd2:	88fb      	ldrh	r3, [r7, #6]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e082      	b.n	80140e2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d101      	bne.n	8013fea <HAL_UART_Receive_IT+0x36>
 8013fe6:	2302      	movs	r3, #2
 8013fe8:	e07b      	b.n	80140e2 <HAL_UART_Receive_IT+0x12e>
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2201      	movs	r2, #1
 8013fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	68ba      	ldr	r2, [r7, #8]
 8013ff6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	88fa      	ldrh	r2, [r7, #6]
 8013ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	88fa      	ldrh	r2, [r7, #6]
 8014004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2200      	movs	r2, #0
 801400c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	689b      	ldr	r3, [r3, #8]
 8014012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014016:	d10e      	bne.n	8014036 <HAL_UART_Receive_IT+0x82>
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	691b      	ldr	r3, [r3, #16]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d105      	bne.n	801402c <HAL_UART_Receive_IT+0x78>
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801402a:	e02d      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	22ff      	movs	r2, #255	; 0xff
 8014030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014034:	e028      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	689b      	ldr	r3, [r3, #8]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d10d      	bne.n	801405a <HAL_UART_Receive_IT+0xa6>
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	691b      	ldr	r3, [r3, #16]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d104      	bne.n	8014050 <HAL_UART_Receive_IT+0x9c>
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	22ff      	movs	r2, #255	; 0xff
 801404a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801404e:	e01b      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	227f      	movs	r2, #127	; 0x7f
 8014054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014058:	e016      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	689b      	ldr	r3, [r3, #8]
 801405e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014062:	d10d      	bne.n	8014080 <HAL_UART_Receive_IT+0xcc>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d104      	bne.n	8014076 <HAL_UART_Receive_IT+0xc2>
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	227f      	movs	r2, #127	; 0x7f
 8014070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014074:	e008      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	223f      	movs	r2, #63	; 0x3f
 801407a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801407e:	e003      	b.n	8014088 <HAL_UART_Receive_IT+0xd4>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2200      	movs	r2, #0
 8014084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	2200      	movs	r2, #0
 801408c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	2222      	movs	r2, #34	; 0x22
 8014092:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	689a      	ldr	r2, [r3, #8]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f042 0201 	orr.w	r2, r2, #1
 80140a2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	689b      	ldr	r3, [r3, #8]
 80140a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140ac:	d107      	bne.n	80140be <HAL_UART_Receive_IT+0x10a>
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d103      	bne.n	80140be <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	4a0d      	ldr	r2, [pc, #52]	; (80140f0 <HAL_UART_Receive_IT+0x13c>)
 80140ba:	661a      	str	r2, [r3, #96]	; 0x60
 80140bc:	e002      	b.n	80140c4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	4a0c      	ldr	r2, [pc, #48]	; (80140f4 <HAL_UART_Receive_IT+0x140>)
 80140c2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2200      	movs	r2, #0
 80140c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80140da:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80140dc:	2300      	movs	r3, #0
 80140de:	e000      	b.n	80140e2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80140e0:	2302      	movs	r3, #2
  }
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3714      	adds	r7, #20
 80140e6:	46bd      	mov	sp, r7
 80140e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ec:	4770      	bx	lr
 80140ee:	bf00      	nop
 80140f0:	08014de1 	.word	0x08014de1
 80140f4:	08014d37 	.word	0x08014d37

080140f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b088      	sub	sp, #32
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	69db      	ldr	r3, [r3, #28]
 8014106:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	689b      	ldr	r3, [r3, #8]
 8014116:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014118:	69fa      	ldr	r2, [r7, #28]
 801411a:	f640 030f 	movw	r3, #2063	; 0x80f
 801411e:	4013      	ands	r3, r2
 8014120:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d113      	bne.n	8014150 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	f003 0320 	and.w	r3, r3, #32
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00e      	beq.n	8014150 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	f003 0320 	and.w	r3, r3, #32
 8014138:	2b00      	cmp	r3, #0
 801413a:	d009      	beq.n	8014150 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 8114 	beq.w	801436e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	4798      	blx	r3
      }
      return;
 801414e:	e10e      	b.n	801436e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	2b00      	cmp	r3, #0
 8014154:	f000 80d6 	beq.w	8014304 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d105      	bne.n	801416e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014168:	2b00      	cmp	r3, #0
 801416a:	f000 80cb 	beq.w	8014304 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	f003 0301 	and.w	r3, r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	d00e      	beq.n	8014196 <HAL_UART_IRQHandler+0x9e>
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801417e:	2b00      	cmp	r3, #0
 8014180:	d009      	beq.n	8014196 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2201      	movs	r2, #1
 8014188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801418e:	f043 0201 	orr.w	r2, r3, #1
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	f003 0302 	and.w	r3, r3, #2
 801419c:	2b00      	cmp	r3, #0
 801419e:	d00e      	beq.n	80141be <HAL_UART_IRQHandler+0xc6>
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	f003 0301 	and.w	r3, r3, #1
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d009      	beq.n	80141be <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	2202      	movs	r2, #2
 80141b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141b6:	f043 0204 	orr.w	r2, r3, #4
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	f003 0304 	and.w	r3, r3, #4
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d00e      	beq.n	80141e6 <HAL_UART_IRQHandler+0xee>
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d009      	beq.n	80141e6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2204      	movs	r2, #4
 80141d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141de:	f043 0202 	orr.w	r2, r3, #2
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	f003 0308 	and.w	r3, r3, #8
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d013      	beq.n	8014218 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	f003 0320 	and.w	r3, r3, #32
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d104      	bne.n	8014204 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8014200:	2b00      	cmp	r3, #0
 8014202:	d009      	beq.n	8014218 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2208      	movs	r2, #8
 801420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014210:	f043 0208 	orr.w	r2, r3, #8
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00f      	beq.n	8014242 <HAL_UART_IRQHandler+0x14a>
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014228:	2b00      	cmp	r3, #0
 801422a:	d00a      	beq.n	8014242 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801423a:	f043 0220 	orr.w	r2, r3, #32
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014246:	2b00      	cmp	r3, #0
 8014248:	f000 8093 	beq.w	8014372 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	f003 0320 	and.w	r3, r3, #32
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00c      	beq.n	8014270 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	f003 0320 	and.w	r3, r3, #32
 801425c:	2b00      	cmp	r3, #0
 801425e:	d007      	beq.n	8014270 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014264:	2b00      	cmp	r3, #0
 8014266:	d003      	beq.n	8014270 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014274:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	689b      	ldr	r3, [r3, #8]
 801427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014280:	2b40      	cmp	r3, #64	; 0x40
 8014282:	d004      	beq.n	801428e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801428a:	2b00      	cmp	r3, #0
 801428c:	d031      	beq.n	80142f2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 fd02 	bl	8014c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	689b      	ldr	r3, [r3, #8]
 801429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801429e:	2b40      	cmp	r3, #64	; 0x40
 80142a0:	d123      	bne.n	80142ea <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	689a      	ldr	r2, [r3, #8]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80142b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d013      	beq.n	80142e2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142be:	4a30      	ldr	r2, [pc, #192]	; (8014380 <HAL_UART_IRQHandler+0x288>)
 80142c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fb fe4a 	bl	800ff60 <HAL_DMA_Abort_IT>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d016      	beq.n	8014300 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142d8:	687a      	ldr	r2, [r7, #4]
 80142da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80142dc:	4610      	mov	r0, r2
 80142de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142e0:	e00e      	b.n	8014300 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 f858 	bl	8014398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142e8:	e00a      	b.n	8014300 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 f854 	bl	8014398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142f0:	e006      	b.n	8014300 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 f850 	bl	8014398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2200      	movs	r2, #0
 80142fc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80142fe:	e038      	b.n	8014372 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014300:	bf00      	nop
    return;
 8014302:	e036      	b.n	8014372 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00d      	beq.n	801432a <HAL_UART_IRQHandler+0x232>
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014314:	2b00      	cmp	r3, #0
 8014316:	d008      	beq.n	801432a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 fdb1 	bl	8014e8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014328:	e026      	b.n	8014378 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00d      	beq.n	8014350 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801433a:	2b00      	cmp	r3, #0
 801433c:	d008      	beq.n	8014350 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014342:	2b00      	cmp	r3, #0
 8014344:	d017      	beq.n	8014376 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	4798      	blx	r3
    }
    return;
 801434e:	e012      	b.n	8014376 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014356:	2b00      	cmp	r3, #0
 8014358:	d00e      	beq.n	8014378 <HAL_UART_IRQHandler+0x280>
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014360:	2b00      	cmp	r3, #0
 8014362:	d009      	beq.n	8014378 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 fccd 	bl	8014d04 <UART_EndTransmit_IT>
    return;
 801436a:	bf00      	nop
 801436c:	e004      	b.n	8014378 <HAL_UART_IRQHandler+0x280>
      return;
 801436e:	bf00      	nop
 8014370:	e002      	b.n	8014378 <HAL_UART_IRQHandler+0x280>
    return;
 8014372:	bf00      	nop
 8014374:	e000      	b.n	8014378 <HAL_UART_IRQHandler+0x280>
    return;
 8014376:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8014378:	3720      	adds	r7, #32
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop
 8014380:	08014cd9 	.word	0x08014cd9

08014384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80143a0:	bf00      	nop
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80143ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80143b0:	b08a      	sub	sp, #40	; 0x28
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80143b6:	2300      	movs	r3, #0
 80143b8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80143ba:	2300      	movs	r3, #0
 80143bc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80143be:	2300      	movs	r3, #0
 80143c0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	689a      	ldr	r2, [r3, #8]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	691b      	ldr	r3, [r3, #16]
 80143ca:	431a      	orrs	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	695b      	ldr	r3, [r3, #20]
 80143d0:	431a      	orrs	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	69db      	ldr	r3, [r3, #28]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	4bbc      	ldr	r3, [pc, #752]	; (80146d4 <UART_SetConfig+0x328>)
 80143e2:	4013      	ands	r3, r2
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	6812      	ldr	r2, [r2, #0]
 80143e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143ea:	430b      	orrs	r3, r1
 80143ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	68da      	ldr	r2, [r3, #12]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	430a      	orrs	r2, r1
 8014402:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	699b      	ldr	r3, [r3, #24]
 8014408:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4ab2      	ldr	r2, [pc, #712]	; (80146d8 <UART_SetConfig+0x32c>)
 8014410:	4293      	cmp	r3, r2
 8014412:	d004      	beq.n	801441e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	6a1b      	ldr	r3, [r3, #32]
 8014418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801441a:	4313      	orrs	r3, r2
 801441c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	689b      	ldr	r3, [r3, #8]
 8014424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801442e:	430a      	orrs	r2, r1
 8014430:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	4aa9      	ldr	r2, [pc, #676]	; (80146dc <UART_SetConfig+0x330>)
 8014438:	4293      	cmp	r3, r2
 801443a:	d126      	bne.n	801448a <UART_SetConfig+0xde>
 801443c:	4ba8      	ldr	r3, [pc, #672]	; (80146e0 <UART_SetConfig+0x334>)
 801443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014442:	f003 0303 	and.w	r3, r3, #3
 8014446:	2b03      	cmp	r3, #3
 8014448:	d81a      	bhi.n	8014480 <UART_SetConfig+0xd4>
 801444a:	a201      	add	r2, pc, #4	; (adr r2, 8014450 <UART_SetConfig+0xa4>)
 801444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014450:	08014461 	.word	0x08014461
 8014454:	08014471 	.word	0x08014471
 8014458:	08014469 	.word	0x08014469
 801445c:	08014479 	.word	0x08014479
 8014460:	2301      	movs	r3, #1
 8014462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014466:	e0ab      	b.n	80145c0 <UART_SetConfig+0x214>
 8014468:	2302      	movs	r3, #2
 801446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801446e:	e0a7      	b.n	80145c0 <UART_SetConfig+0x214>
 8014470:	2304      	movs	r3, #4
 8014472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014476:	e0a3      	b.n	80145c0 <UART_SetConfig+0x214>
 8014478:	2308      	movs	r3, #8
 801447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801447e:	e09f      	b.n	80145c0 <UART_SetConfig+0x214>
 8014480:	2310      	movs	r3, #16
 8014482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014486:	bf00      	nop
 8014488:	e09a      	b.n	80145c0 <UART_SetConfig+0x214>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	4a95      	ldr	r2, [pc, #596]	; (80146e4 <UART_SetConfig+0x338>)
 8014490:	4293      	cmp	r3, r2
 8014492:	d138      	bne.n	8014506 <UART_SetConfig+0x15a>
 8014494:	4b92      	ldr	r3, [pc, #584]	; (80146e0 <UART_SetConfig+0x334>)
 8014496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801449a:	f003 030c 	and.w	r3, r3, #12
 801449e:	2b0c      	cmp	r3, #12
 80144a0:	d82c      	bhi.n	80144fc <UART_SetConfig+0x150>
 80144a2:	a201      	add	r2, pc, #4	; (adr r2, 80144a8 <UART_SetConfig+0xfc>)
 80144a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144a8:	080144dd 	.word	0x080144dd
 80144ac:	080144fd 	.word	0x080144fd
 80144b0:	080144fd 	.word	0x080144fd
 80144b4:	080144fd 	.word	0x080144fd
 80144b8:	080144ed 	.word	0x080144ed
 80144bc:	080144fd 	.word	0x080144fd
 80144c0:	080144fd 	.word	0x080144fd
 80144c4:	080144fd 	.word	0x080144fd
 80144c8:	080144e5 	.word	0x080144e5
 80144cc:	080144fd 	.word	0x080144fd
 80144d0:	080144fd 	.word	0x080144fd
 80144d4:	080144fd 	.word	0x080144fd
 80144d8:	080144f5 	.word	0x080144f5
 80144dc:	2300      	movs	r3, #0
 80144de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80144e2:	e06d      	b.n	80145c0 <UART_SetConfig+0x214>
 80144e4:	2302      	movs	r3, #2
 80144e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80144ea:	e069      	b.n	80145c0 <UART_SetConfig+0x214>
 80144ec:	2304      	movs	r3, #4
 80144ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80144f2:	e065      	b.n	80145c0 <UART_SetConfig+0x214>
 80144f4:	2308      	movs	r3, #8
 80144f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80144fa:	e061      	b.n	80145c0 <UART_SetConfig+0x214>
 80144fc:	2310      	movs	r3, #16
 80144fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014502:	bf00      	nop
 8014504:	e05c      	b.n	80145c0 <UART_SetConfig+0x214>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	4a77      	ldr	r2, [pc, #476]	; (80146e8 <UART_SetConfig+0x33c>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d125      	bne.n	801455c <UART_SetConfig+0x1b0>
 8014510:	4b73      	ldr	r3, [pc, #460]	; (80146e0 <UART_SetConfig+0x334>)
 8014512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014516:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801451a:	2b10      	cmp	r3, #16
 801451c:	d011      	beq.n	8014542 <UART_SetConfig+0x196>
 801451e:	2b10      	cmp	r3, #16
 8014520:	d802      	bhi.n	8014528 <UART_SetConfig+0x17c>
 8014522:	2b00      	cmp	r3, #0
 8014524:	d005      	beq.n	8014532 <UART_SetConfig+0x186>
 8014526:	e014      	b.n	8014552 <UART_SetConfig+0x1a6>
 8014528:	2b20      	cmp	r3, #32
 801452a:	d006      	beq.n	801453a <UART_SetConfig+0x18e>
 801452c:	2b30      	cmp	r3, #48	; 0x30
 801452e:	d00c      	beq.n	801454a <UART_SetConfig+0x19e>
 8014530:	e00f      	b.n	8014552 <UART_SetConfig+0x1a6>
 8014532:	2300      	movs	r3, #0
 8014534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014538:	e042      	b.n	80145c0 <UART_SetConfig+0x214>
 801453a:	2302      	movs	r3, #2
 801453c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014540:	e03e      	b.n	80145c0 <UART_SetConfig+0x214>
 8014542:	2304      	movs	r3, #4
 8014544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014548:	e03a      	b.n	80145c0 <UART_SetConfig+0x214>
 801454a:	2308      	movs	r3, #8
 801454c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014550:	e036      	b.n	80145c0 <UART_SetConfig+0x214>
 8014552:	2310      	movs	r3, #16
 8014554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014558:	bf00      	nop
 801455a:	e031      	b.n	80145c0 <UART_SetConfig+0x214>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4a5d      	ldr	r2, [pc, #372]	; (80146d8 <UART_SetConfig+0x32c>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d129      	bne.n	80145ba <UART_SetConfig+0x20e>
 8014566:	4b5e      	ldr	r3, [pc, #376]	; (80146e0 <UART_SetConfig+0x334>)
 8014568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801456c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014574:	d014      	beq.n	80145a0 <UART_SetConfig+0x1f4>
 8014576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801457a:	d802      	bhi.n	8014582 <UART_SetConfig+0x1d6>
 801457c:	2b00      	cmp	r3, #0
 801457e:	d007      	beq.n	8014590 <UART_SetConfig+0x1e4>
 8014580:	e016      	b.n	80145b0 <UART_SetConfig+0x204>
 8014582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014586:	d007      	beq.n	8014598 <UART_SetConfig+0x1ec>
 8014588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801458c:	d00c      	beq.n	80145a8 <UART_SetConfig+0x1fc>
 801458e:	e00f      	b.n	80145b0 <UART_SetConfig+0x204>
 8014590:	2300      	movs	r3, #0
 8014592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014596:	e013      	b.n	80145c0 <UART_SetConfig+0x214>
 8014598:	2302      	movs	r3, #2
 801459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801459e:	e00f      	b.n	80145c0 <UART_SetConfig+0x214>
 80145a0:	2304      	movs	r3, #4
 80145a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80145a6:	e00b      	b.n	80145c0 <UART_SetConfig+0x214>
 80145a8:	2308      	movs	r3, #8
 80145aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80145ae:	e007      	b.n	80145c0 <UART_SetConfig+0x214>
 80145b0:	2310      	movs	r3, #16
 80145b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80145b6:	bf00      	nop
 80145b8:	e002      	b.n	80145c0 <UART_SetConfig+0x214>
 80145ba:	2310      	movs	r3, #16
 80145bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a44      	ldr	r2, [pc, #272]	; (80146d8 <UART_SetConfig+0x32c>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	f040 80fb 	bne.w	80147c2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80145cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145d0:	2b08      	cmp	r3, #8
 80145d2:	d824      	bhi.n	801461e <UART_SetConfig+0x272>
 80145d4:	a201      	add	r2, pc, #4	; (adr r2, 80145dc <UART_SetConfig+0x230>)
 80145d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145da:	bf00      	nop
 80145dc:	08014601 	.word	0x08014601
 80145e0:	0801461f 	.word	0x0801461f
 80145e4:	08014609 	.word	0x08014609
 80145e8:	0801461f 	.word	0x0801461f
 80145ec:	0801460f 	.word	0x0801460f
 80145f0:	0801461f 	.word	0x0801461f
 80145f4:	0801461f 	.word	0x0801461f
 80145f8:	0801461f 	.word	0x0801461f
 80145fc:	08014617 	.word	0x08014617
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8014600:	f7fd fd98 	bl	8012134 <HAL_RCC_GetPCLK1Freq>
 8014604:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014606:	e00d      	b.n	8014624 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8014608:	4b38      	ldr	r3, [pc, #224]	; (80146ec <UART_SetConfig+0x340>)
 801460a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 801460c:	e00a      	b.n	8014624 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 801460e:	f7fd fcfb 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 8014612:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014614:	e006      	b.n	8014624 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8014616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801461a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 801461c:	e002      	b.n	8014624 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 801461e:	2301      	movs	r3, #1
 8014620:	76fb      	strb	r3, [r7, #27]
        break;
 8014622:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	2b00      	cmp	r3, #0
 8014628:	f000 81c8 	beq.w	80149bc <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	685a      	ldr	r2, [r3, #4]
 8014630:	4613      	mov	r3, r2
 8014632:	005b      	lsls	r3, r3, #1
 8014634:	4413      	add	r3, r2
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	429a      	cmp	r2, r3
 801463a:	d305      	bcc.n	8014648 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014642:	697a      	ldr	r2, [r7, #20]
 8014644:	429a      	cmp	r2, r3
 8014646:	d902      	bls.n	801464e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8014648:	2301      	movs	r3, #1
 801464a:	76fb      	strb	r3, [r7, #27]
 801464c:	e1b6      	b.n	80149bc <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 801464e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014652:	2b08      	cmp	r3, #8
 8014654:	f200 80a2 	bhi.w	801479c <UART_SetConfig+0x3f0>
 8014658:	a201      	add	r2, pc, #4	; (adr r2, 8014660 <UART_SetConfig+0x2b4>)
 801465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801465e:	bf00      	nop
 8014660:	08014685 	.word	0x08014685
 8014664:	0801479d 	.word	0x0801479d
 8014668:	080146f1 	.word	0x080146f1
 801466c:	0801479d 	.word	0x0801479d
 8014670:	08014725 	.word	0x08014725
 8014674:	0801479d 	.word	0x0801479d
 8014678:	0801479d 	.word	0x0801479d
 801467c:	0801479d 	.word	0x0801479d
 8014680:	08014773 	.word	0x08014773
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8014684:	f7fd fd56 	bl	8012134 <HAL_RCC_GetPCLK1Freq>
 8014688:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	4619      	mov	r1, r3
 801468e:	f04f 0200 	mov.w	r2, #0
 8014692:	f04f 0300 	mov.w	r3, #0
 8014696:	f04f 0400 	mov.w	r4, #0
 801469a:	0214      	lsls	r4, r2, #8
 801469c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80146a0:	020b      	lsls	r3, r1, #8
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	6852      	ldr	r2, [r2, #4]
 80146a6:	0852      	lsrs	r2, r2, #1
 80146a8:	4611      	mov	r1, r2
 80146aa:	f04f 0200 	mov.w	r2, #0
 80146ae:	eb13 0b01 	adds.w	fp, r3, r1
 80146b2:	eb44 0c02 	adc.w	ip, r4, r2
 80146b6:	4658      	mov	r0, fp
 80146b8:	4661      	mov	r1, ip
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	f04f 0400 	mov.w	r4, #0
 80146c2:	461a      	mov	r2, r3
 80146c4:	4623      	mov	r3, r4
 80146c6:	f7ec fa9f 	bl	8000c08 <__aeabi_uldivmod>
 80146ca:	4603      	mov	r3, r0
 80146cc:	460c      	mov	r4, r1
 80146ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80146d0:	e067      	b.n	80147a2 <UART_SetConfig+0x3f6>
 80146d2:	bf00      	nop
 80146d4:	efff69f3 	.word	0xefff69f3
 80146d8:	40008000 	.word	0x40008000
 80146dc:	40013800 	.word	0x40013800
 80146e0:	40021000 	.word	0x40021000
 80146e4:	40004400 	.word	0x40004400
 80146e8:	40004800 	.word	0x40004800
 80146ec:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	085b      	lsrs	r3, r3, #1
 80146f6:	f04f 0400 	mov.w	r4, #0
 80146fa:	49ae      	ldr	r1, [pc, #696]	; (80149b4 <UART_SetConfig+0x608>)
 80146fc:	f04f 0200 	mov.w	r2, #0
 8014700:	eb13 0b01 	adds.w	fp, r3, r1
 8014704:	eb44 0c02 	adc.w	ip, r4, r2
 8014708:	4658      	mov	r0, fp
 801470a:	4661      	mov	r1, ip
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	f04f 0400 	mov.w	r4, #0
 8014714:	461a      	mov	r2, r3
 8014716:	4623      	mov	r3, r4
 8014718:	f7ec fa76 	bl	8000c08 <__aeabi_uldivmod>
 801471c:	4603      	mov	r3, r0
 801471e:	460c      	mov	r4, r1
 8014720:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8014722:	e03e      	b.n	80147a2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8014724:	f7fd fc70 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 8014728:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	4619      	mov	r1, r3
 801472e:	f04f 0200 	mov.w	r2, #0
 8014732:	f04f 0300 	mov.w	r3, #0
 8014736:	f04f 0400 	mov.w	r4, #0
 801473a:	0214      	lsls	r4, r2, #8
 801473c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8014740:	020b      	lsls	r3, r1, #8
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	6852      	ldr	r2, [r2, #4]
 8014746:	0852      	lsrs	r2, r2, #1
 8014748:	4611      	mov	r1, r2
 801474a:	f04f 0200 	mov.w	r2, #0
 801474e:	eb13 0b01 	adds.w	fp, r3, r1
 8014752:	eb44 0c02 	adc.w	ip, r4, r2
 8014756:	4658      	mov	r0, fp
 8014758:	4661      	mov	r1, ip
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	685b      	ldr	r3, [r3, #4]
 801475e:	f04f 0400 	mov.w	r4, #0
 8014762:	461a      	mov	r2, r3
 8014764:	4623      	mov	r3, r4
 8014766:	f7ec fa4f 	bl	8000c08 <__aeabi_uldivmod>
 801476a:	4603      	mov	r3, r0
 801476c:	460c      	mov	r4, r1
 801476e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8014770:	e017      	b.n	80147a2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	085b      	lsrs	r3, r3, #1
 8014778:	f04f 0400 	mov.w	r4, #0
 801477c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8014780:	f144 0100 	adc.w	r1, r4, #0
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	f04f 0400 	mov.w	r4, #0
 801478c:	461a      	mov	r2, r3
 801478e:	4623      	mov	r3, r4
 8014790:	f7ec fa3a 	bl	8000c08 <__aeabi_uldivmod>
 8014794:	4603      	mov	r3, r0
 8014796:	460c      	mov	r4, r1
 8014798:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 801479a:	e002      	b.n	80147a2 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 801479c:	2301      	movs	r3, #1
 801479e:	76fb      	strb	r3, [r7, #27]
            break;
 80147a0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80147a2:	69fb      	ldr	r3, [r7, #28]
 80147a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80147a8:	d308      	bcc.n	80147bc <UART_SetConfig+0x410>
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80147b0:	d204      	bcs.n	80147bc <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	69fa      	ldr	r2, [r7, #28]
 80147b8:	60da      	str	r2, [r3, #12]
 80147ba:	e0ff      	b.n	80149bc <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80147bc:	2301      	movs	r3, #1
 80147be:	76fb      	strb	r3, [r7, #27]
 80147c0:	e0fc      	b.n	80149bc <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	69db      	ldr	r3, [r3, #28]
 80147c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80147ca:	f040 8083 	bne.w	80148d4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80147ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147d2:	2b08      	cmp	r3, #8
 80147d4:	d85e      	bhi.n	8014894 <UART_SetConfig+0x4e8>
 80147d6:	a201      	add	r2, pc, #4	; (adr r2, 80147dc <UART_SetConfig+0x430>)
 80147d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147dc:	08014801 	.word	0x08014801
 80147e0:	08014821 	.word	0x08014821
 80147e4:	08014841 	.word	0x08014841
 80147e8:	08014895 	.word	0x08014895
 80147ec:	0801485d 	.word	0x0801485d
 80147f0:	08014895 	.word	0x08014895
 80147f4:	08014895 	.word	0x08014895
 80147f8:	08014895 	.word	0x08014895
 80147fc:	0801487d 	.word	0x0801487d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014800:	f7fd fc98 	bl	8012134 <HAL_RCC_GetPCLK1Freq>
 8014804:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	005a      	lsls	r2, r3, #1
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	085b      	lsrs	r3, r3, #1
 8014810:	441a      	add	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	fbb2 f3f3 	udiv	r3, r2, r3
 801481a:	b29b      	uxth	r3, r3
 801481c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801481e:	e03c      	b.n	801489a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014820:	f7fd fc9e 	bl	8012160 <HAL_RCC_GetPCLK2Freq>
 8014824:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	005a      	lsls	r2, r3, #1
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	085b      	lsrs	r3, r3, #1
 8014830:	441a      	add	r2, r3
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	fbb2 f3f3 	udiv	r3, r2, r3
 801483a:	b29b      	uxth	r3, r3
 801483c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801483e:	e02c      	b.n	801489a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	085b      	lsrs	r3, r3, #1
 8014846:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 801484a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 801484e:	687a      	ldr	r2, [r7, #4]
 8014850:	6852      	ldr	r2, [r2, #4]
 8014852:	fbb3 f3f2 	udiv	r3, r3, r2
 8014856:	b29b      	uxth	r3, r3
 8014858:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801485a:	e01e      	b.n	801489a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801485c:	f7fd fbd4 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 8014860:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	005a      	lsls	r2, r3, #1
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	085b      	lsrs	r3, r3, #1
 801486c:	441a      	add	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	fbb2 f3f3 	udiv	r3, r2, r3
 8014876:	b29b      	uxth	r3, r3
 8014878:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801487a:	e00e      	b.n	801489a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	085b      	lsrs	r3, r3, #1
 8014882:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	fbb2 f3f3 	udiv	r3, r2, r3
 801488e:	b29b      	uxth	r3, r3
 8014890:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014892:	e002      	b.n	801489a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8014894:	2301      	movs	r3, #1
 8014896:	76fb      	strb	r3, [r7, #27]
        break;
 8014898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801489a:	69fb      	ldr	r3, [r7, #28]
 801489c:	2b0f      	cmp	r3, #15
 801489e:	d916      	bls.n	80148ce <UART_SetConfig+0x522>
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148a6:	d212      	bcs.n	80148ce <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80148a8:	69fb      	ldr	r3, [r7, #28]
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	f023 030f 	bic.w	r3, r3, #15
 80148b0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	085b      	lsrs	r3, r3, #1
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	f003 0307 	and.w	r3, r3, #7
 80148bc:	b29a      	uxth	r2, r3
 80148be:	89fb      	ldrh	r3, [r7, #14]
 80148c0:	4313      	orrs	r3, r2
 80148c2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	89fa      	ldrh	r2, [r7, #14]
 80148ca:	60da      	str	r2, [r3, #12]
 80148cc:	e076      	b.n	80149bc <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80148ce:	2301      	movs	r3, #1
 80148d0:	76fb      	strb	r3, [r7, #27]
 80148d2:	e073      	b.n	80149bc <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80148d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80148d8:	2b08      	cmp	r3, #8
 80148da:	d85c      	bhi.n	8014996 <UART_SetConfig+0x5ea>
 80148dc:	a201      	add	r2, pc, #4	; (adr r2, 80148e4 <UART_SetConfig+0x538>)
 80148de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e2:	bf00      	nop
 80148e4:	08014909 	.word	0x08014909
 80148e8:	08014927 	.word	0x08014927
 80148ec:	08014945 	.word	0x08014945
 80148f0:	08014997 	.word	0x08014997
 80148f4:	08014961 	.word	0x08014961
 80148f8:	08014997 	.word	0x08014997
 80148fc:	08014997 	.word	0x08014997
 8014900:	08014997 	.word	0x08014997
 8014904:	0801497f 	.word	0x0801497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014908:	f7fd fc14 	bl	8012134 <HAL_RCC_GetPCLK1Freq>
 801490c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	085a      	lsrs	r2, r3, #1
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	441a      	add	r2, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014920:	b29b      	uxth	r3, r3
 8014922:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014924:	e03a      	b.n	801499c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014926:	f7fd fc1b 	bl	8012160 <HAL_RCC_GetPCLK2Freq>
 801492a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	085a      	lsrs	r2, r3, #1
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	441a      	add	r2, r3
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	685b      	ldr	r3, [r3, #4]
 801493a:	fbb2 f3f3 	udiv	r3, r2, r3
 801493e:	b29b      	uxth	r3, r3
 8014940:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014942:	e02b      	b.n	801499c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	085b      	lsrs	r3, r3, #1
 801494a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 801494e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	6852      	ldr	r2, [r2, #4]
 8014956:	fbb3 f3f2 	udiv	r3, r3, r2
 801495a:	b29b      	uxth	r3, r3
 801495c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801495e:	e01d      	b.n	801499c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014960:	f7fd fb52 	bl	8012008 <HAL_RCC_GetSysClockFreq>
 8014964:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	085a      	lsrs	r2, r3, #1
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	441a      	add	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	fbb2 f3f3 	udiv	r3, r2, r3
 8014978:	b29b      	uxth	r3, r3
 801497a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 801497c:	e00e      	b.n	801499c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	085b      	lsrs	r3, r3, #1
 8014984:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014990:	b29b      	uxth	r3, r3
 8014992:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014994:	e002      	b.n	801499c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8014996:	2301      	movs	r3, #1
 8014998:	76fb      	strb	r3, [r7, #27]
        break;
 801499a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801499c:	69fb      	ldr	r3, [r7, #28]
 801499e:	2b0f      	cmp	r3, #15
 80149a0:	d90a      	bls.n	80149b8 <UART_SetConfig+0x60c>
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149a8:	d206      	bcs.n	80149b8 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	69fa      	ldr	r2, [r7, #28]
 80149b0:	60da      	str	r2, [r3, #12]
 80149b2:	e003      	b.n	80149bc <UART_SetConfig+0x610>
 80149b4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80149b8:	2301      	movs	r3, #1
 80149ba:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2200      	movs	r2, #0
 80149c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80149c8:	7efb      	ldrb	r3, [r7, #27]
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3728      	adds	r7, #40	; 0x28
 80149ce:	46bd      	mov	sp, r7
 80149d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080149d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80149d4:	b480      	push	{r7}
 80149d6:	b083      	sub	sp, #12
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e0:	f003 0301 	and.w	r3, r3, #1
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d00a      	beq.n	80149fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	430a      	orrs	r2, r1
 80149fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a02:	f003 0302 	and.w	r3, r3, #2
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d00a      	beq.n	8014a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	430a      	orrs	r2, r1
 8014a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a24:	f003 0304 	and.w	r3, r3, #4
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00a      	beq.n	8014a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	430a      	orrs	r2, r1
 8014a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a46:	f003 0308 	and.w	r3, r3, #8
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00a      	beq.n	8014a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	430a      	orrs	r2, r1
 8014a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a68:	f003 0310 	and.w	r3, r3, #16
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d00a      	beq.n	8014a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	689b      	ldr	r3, [r3, #8]
 8014a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	430a      	orrs	r2, r1
 8014a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a8a:	f003 0320 	and.w	r3, r3, #32
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00a      	beq.n	8014aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	430a      	orrs	r2, r1
 8014aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d01a      	beq.n	8014aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	430a      	orrs	r2, r1
 8014ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ad2:	d10a      	bne.n	8014aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	430a      	orrs	r2, r1
 8014ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d00a      	beq.n	8014b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	430a      	orrs	r2, r1
 8014b0a:	605a      	str	r2, [r3, #4]
  }
}
 8014b0c:	bf00      	nop
 8014b0e:	370c      	adds	r7, #12
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr

08014b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af02      	add	r7, sp, #8
 8014b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8014b26:	f7f9 ffd7 	bl	800ead8 <HAL_GetTick>
 8014b2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f003 0308 	and.w	r3, r3, #8
 8014b36:	2b08      	cmp	r3, #8
 8014b38:	d10e      	bne.n	8014b58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014b3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f000 f82a 	bl	8014ba2 <UART_WaitOnFlagUntilTimeout>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d001      	beq.n	8014b58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014b54:	2303      	movs	r3, #3
 8014b56:	e020      	b.n	8014b9a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f003 0304 	and.w	r3, r3, #4
 8014b62:	2b04      	cmp	r3, #4
 8014b64:	d10e      	bne.n	8014b84 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014b66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014b6a:	9300      	str	r3, [sp, #0]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 f814 	bl	8014ba2 <UART_WaitOnFlagUntilTimeout>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d001      	beq.n	8014b84 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014b80:	2303      	movs	r3, #3
 8014b82:	e00a      	b.n	8014b9a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2220      	movs	r2, #32
 8014b88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2220      	movs	r2, #32
 8014b8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8014b98:	2300      	movs	r3, #0
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}

08014ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014ba2:	b580      	push	{r7, lr}
 8014ba4:	b084      	sub	sp, #16
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	60f8      	str	r0, [r7, #12]
 8014baa:	60b9      	str	r1, [r7, #8]
 8014bac:	603b      	str	r3, [r7, #0]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014bb2:	e05d      	b.n	8014c70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bba:	d059      	beq.n	8014c70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014bbc:	f7f9 ff8c 	bl	800ead8 <HAL_GetTick>
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	69ba      	ldr	r2, [r7, #24]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d302      	bcc.n	8014bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8014bcc:	69bb      	ldr	r3, [r7, #24]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d11b      	bne.n	8014c0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	681a      	ldr	r2, [r3, #0]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014be0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	689a      	ldr	r2, [r3, #8]
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	f022 0201 	bic.w	r2, r2, #1
 8014bf0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2220      	movs	r2, #32
 8014bf6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2220      	movs	r2, #32
 8014bfc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2200      	movs	r2, #0
 8014c02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8014c06:	2303      	movs	r3, #3
 8014c08:	e042      	b.n	8014c90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f003 0304 	and.w	r3, r3, #4
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d02b      	beq.n	8014c70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	69db      	ldr	r3, [r3, #28]
 8014c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014c26:	d123      	bne.n	8014c70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8014c40:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	689a      	ldr	r2, [r3, #8]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f022 0201 	bic.w	r2, r2, #1
 8014c50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2220      	movs	r2, #32
 8014c56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2220      	movs	r2, #32
 8014c5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2220      	movs	r2, #32
 8014c62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8014c6c:	2303      	movs	r3, #3
 8014c6e:	e00f      	b.n	8014c90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	69da      	ldr	r2, [r3, #28]
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	4013      	ands	r3, r2
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	bf0c      	ite	eq
 8014c80:	2301      	moveq	r3, #1
 8014c82:	2300      	movne	r3, #0
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	461a      	mov	r2, r3
 8014c88:	79fb      	ldrb	r3, [r7, #7]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d092      	beq.n	8014bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014c8e:	2300      	movs	r3, #0
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8014cae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	689a      	ldr	r2, [r3, #8]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	f022 0201 	bic.w	r2, r2, #1
 8014cbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2220      	movs	r2, #32
 8014cc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	661a      	str	r2, [r3, #96]	; 0x60
}
 8014ccc:	bf00      	nop
 8014cce:	370c      	adds	r7, #12
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	f7ff fb4e 	bl	8014398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014cfc:	bf00      	nop
 8014cfe:	3710      	adds	r7, #16
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}

08014d04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681a      	ldr	r2, [r3, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2220      	movs	r2, #32
 8014d20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2200      	movs	r2, #0
 8014d26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f7ff fb2b 	bl	8014384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014d2e:	bf00      	nop
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b084      	sub	sp, #16
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d44:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d4a:	2b22      	cmp	r3, #34	; 0x22
 8014d4c:	d13a      	bne.n	8014dc4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d54:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014d56:	89bb      	ldrh	r3, [r7, #12]
 8014d58:	b2d9      	uxtb	r1, r3
 8014d5a:	89fb      	ldrh	r3, [r7, #14]
 8014d5c:	b2da      	uxtb	r2, r3
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d62:	400a      	ands	r2, r1
 8014d64:	b2d2      	uxtb	r2, r2
 8014d66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d6c:	1c5a      	adds	r2, r3, #1
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	b29a      	uxth	r2, r3
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d123      	bne.n	8014dd8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8014d9e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	689a      	ldr	r2, [r3, #8]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	f022 0201 	bic.w	r2, r2, #1
 8014dae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2220      	movs	r2, #32
 8014db4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2200      	movs	r2, #0
 8014dba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7f7 fbe5 	bl	800c58c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014dc2:	e009      	b.n	8014dd8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	8b1b      	ldrh	r3, [r3, #24]
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	f042 0208 	orr.w	r2, r2, #8
 8014dd4:	b292      	uxth	r2, r2
 8014dd6:	831a      	strh	r2, [r3, #24]
}
 8014dd8:	bf00      	nop
 8014dda:	3710      	adds	r7, #16
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014dee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014df4:	2b22      	cmp	r3, #34	; 0x22
 8014df6:	d13a      	bne.n	8014e6e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dfe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e04:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8014e06:	89ba      	ldrh	r2, [r7, #12]
 8014e08:	89fb      	ldrh	r3, [r7, #14]
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e16:	1c9a      	adds	r2, r3, #2
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	3b01      	subs	r3, #1
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d123      	bne.n	8014e82 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	681a      	ldr	r2, [r3, #0]
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8014e48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	689a      	ldr	r2, [r3, #8]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	f022 0201 	bic.w	r2, r2, #1
 8014e58:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2220      	movs	r2, #32
 8014e5e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2200      	movs	r2, #0
 8014e64:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7f7 fb90 	bl	800c58c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014e6c:	e009      	b.n	8014e82 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	8b1b      	ldrh	r3, [r3, #24]
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f042 0208 	orr.w	r2, r2, #8
 8014e7e:	b292      	uxth	r2, r2
 8014e80:	831a      	strh	r2, [r3, #24]
}
 8014e82:	bf00      	nop
 8014e84:	3710      	adds	r7, #16
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}

08014e8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014e8a:	b480      	push	{r7}
 8014e8c:	b083      	sub	sp, #12
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014e92:	bf00      	nop
 8014e94:	370c      	adds	r7, #12
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
	...

08014ea0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8014ea4:	4904      	ldr	r1, [pc, #16]	; (8014eb8 <MX_FATFS_Init+0x18>)
 8014ea6:	4805      	ldr	r0, [pc, #20]	; (8014ebc <MX_FATFS_Init+0x1c>)
 8014ea8:	f003 fa28 	bl	80182fc <FATFS_LinkDriver>
 8014eac:	4603      	mov	r3, r0
 8014eae:	461a      	mov	r2, r3
 8014eb0:	4b03      	ldr	r3, [pc, #12]	; (8014ec0 <MX_FATFS_Init+0x20>)
 8014eb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8014eb4:	bf00      	nop
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	2000b560 	.word	0x2000b560
 8014ebc:	20000198 	.word	0x20000198
 8014ec0:	2000b564 	.word	0x2000b564

08014ec4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014ec8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr

08014ed4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4603      	mov	r3, r0
 8014edc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_initialize (pdrv); //changed
 8014ede:	79fb      	ldrb	r3, [r7, #7]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7f1 f87d 	bl	8005fe0 <SD_disk_initialize>
 8014ee6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_status (pdrv); //changed
 8014efa:	79fb      	ldrb	r3, [r7, #7]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7f1 f959 	bl	80061b4 <SD_disk_status>
 8014f02:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60b9      	str	r1, [r7, #8]
 8014f14:	607a      	str	r2, [r7, #4]
 8014f16:	603b      	str	r3, [r7, #0]
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv,buff,sector,count); //changed
 8014f1c:	7bf8      	ldrb	r0, [r7, #15]
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	687a      	ldr	r2, [r7, #4]
 8014f22:	68b9      	ldr	r1, [r7, #8]
 8014f24:	f7f1 f95c 	bl	80061e0 <SD_disk_read>
 8014f28:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3710      	adds	r7, #16
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b084      	sub	sp, #16
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
 8014f3c:	603b      	str	r3, [r7, #0]
 8014f3e:	4603      	mov	r3, r0
 8014f40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv,buff,sector,count); //changed
 8014f42:	7bf8      	ldrb	r0, [r7, #15]
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	68b9      	ldr	r1, [r7, #8]
 8014f4a:	f7f1 f9b3 	bl	80062b4 <SD_disk_write>
 8014f4e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	603a      	str	r2, [r7, #0]
 8014f62:	71fb      	strb	r3, [r7, #7]
 8014f64:	460b      	mov	r3, r1
 8014f66:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv,cmd,buff); //changed
 8014f68:	79b9      	ldrb	r1, [r7, #6]
 8014f6a:	79fb      	ldrb	r3, [r7, #7]
 8014f6c:	683a      	ldr	r2, [r7, #0]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f1 fa24 	bl	80063bc <SD_disk_ioctl>
 8014f74:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
	...

08014f80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	4603      	mov	r3, r0
 8014f88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014f8a:	79fb      	ldrb	r3, [r7, #7]
 8014f8c:	4a08      	ldr	r2, [pc, #32]	; (8014fb0 <disk_status+0x30>)
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	4413      	add	r3, r2
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	79fa      	ldrb	r2, [r7, #7]
 8014f98:	4905      	ldr	r1, [pc, #20]	; (8014fb0 <disk_status+0x30>)
 8014f9a:	440a      	add	r2, r1
 8014f9c:	7a12      	ldrb	r2, [r2, #8]
 8014f9e:	4610      	mov	r0, r2
 8014fa0:	4798      	blx	r3
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3710      	adds	r7, #16
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	20000688 	.word	0x20000688

08014fb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	4603      	mov	r3, r0
 8014fbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014fc2:	79fb      	ldrb	r3, [r7, #7]
 8014fc4:	4a0d      	ldr	r2, [pc, #52]	; (8014ffc <disk_initialize+0x48>)
 8014fc6:	5cd3      	ldrb	r3, [r2, r3]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d111      	bne.n	8014ff0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014fcc:	79fb      	ldrb	r3, [r7, #7]
 8014fce:	4a0b      	ldr	r2, [pc, #44]	; (8014ffc <disk_initialize+0x48>)
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014fd4:	79fb      	ldrb	r3, [r7, #7]
 8014fd6:	4a09      	ldr	r2, [pc, #36]	; (8014ffc <disk_initialize+0x48>)
 8014fd8:	009b      	lsls	r3, r3, #2
 8014fda:	4413      	add	r3, r2
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	79fa      	ldrb	r2, [r7, #7]
 8014fe2:	4906      	ldr	r1, [pc, #24]	; (8014ffc <disk_initialize+0x48>)
 8014fe4:	440a      	add	r2, r1
 8014fe6:	7a12      	ldrb	r2, [r2, #8]
 8014fe8:	4610      	mov	r0, r2
 8014fea:	4798      	blx	r3
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	20000688 	.word	0x20000688

08015000 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015000:	b590      	push	{r4, r7, lr}
 8015002:	b087      	sub	sp, #28
 8015004:	af00      	add	r7, sp, #0
 8015006:	60b9      	str	r1, [r7, #8]
 8015008:	607a      	str	r2, [r7, #4]
 801500a:	603b      	str	r3, [r7, #0]
 801500c:	4603      	mov	r3, r0
 801500e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015010:	7bfb      	ldrb	r3, [r7, #15]
 8015012:	4a0a      	ldr	r2, [pc, #40]	; (801503c <disk_read+0x3c>)
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4413      	add	r3, r2
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	689c      	ldr	r4, [r3, #8]
 801501c:	7bfb      	ldrb	r3, [r7, #15]
 801501e:	4a07      	ldr	r2, [pc, #28]	; (801503c <disk_read+0x3c>)
 8015020:	4413      	add	r3, r2
 8015022:	7a18      	ldrb	r0, [r3, #8]
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	68b9      	ldr	r1, [r7, #8]
 801502a:	47a0      	blx	r4
 801502c:	4603      	mov	r3, r0
 801502e:	75fb      	strb	r3, [r7, #23]
  return res;
 8015030:	7dfb      	ldrb	r3, [r7, #23]
}
 8015032:	4618      	mov	r0, r3
 8015034:	371c      	adds	r7, #28
 8015036:	46bd      	mov	sp, r7
 8015038:	bd90      	pop	{r4, r7, pc}
 801503a:	bf00      	nop
 801503c:	20000688 	.word	0x20000688

08015040 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015040:	b590      	push	{r4, r7, lr}
 8015042:	b087      	sub	sp, #28
 8015044:	af00      	add	r7, sp, #0
 8015046:	60b9      	str	r1, [r7, #8]
 8015048:	607a      	str	r2, [r7, #4]
 801504a:	603b      	str	r3, [r7, #0]
 801504c:	4603      	mov	r3, r0
 801504e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015050:	7bfb      	ldrb	r3, [r7, #15]
 8015052:	4a0a      	ldr	r2, [pc, #40]	; (801507c <disk_write+0x3c>)
 8015054:	009b      	lsls	r3, r3, #2
 8015056:	4413      	add	r3, r2
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	68dc      	ldr	r4, [r3, #12]
 801505c:	7bfb      	ldrb	r3, [r7, #15]
 801505e:	4a07      	ldr	r2, [pc, #28]	; (801507c <disk_write+0x3c>)
 8015060:	4413      	add	r3, r2
 8015062:	7a18      	ldrb	r0, [r3, #8]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	68b9      	ldr	r1, [r7, #8]
 801506a:	47a0      	blx	r4
 801506c:	4603      	mov	r3, r0
 801506e:	75fb      	strb	r3, [r7, #23]
  return res;
 8015070:	7dfb      	ldrb	r3, [r7, #23]
}
 8015072:	4618      	mov	r0, r3
 8015074:	371c      	adds	r7, #28
 8015076:	46bd      	mov	sp, r7
 8015078:	bd90      	pop	{r4, r7, pc}
 801507a:	bf00      	nop
 801507c:	20000688 	.word	0x20000688

08015080 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	4603      	mov	r3, r0
 8015088:	603a      	str	r2, [r7, #0]
 801508a:	71fb      	strb	r3, [r7, #7]
 801508c:	460b      	mov	r3, r1
 801508e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015090:	79fb      	ldrb	r3, [r7, #7]
 8015092:	4a09      	ldr	r2, [pc, #36]	; (80150b8 <disk_ioctl+0x38>)
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	4413      	add	r3, r2
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	691b      	ldr	r3, [r3, #16]
 801509c:	79fa      	ldrb	r2, [r7, #7]
 801509e:	4906      	ldr	r1, [pc, #24]	; (80150b8 <disk_ioctl+0x38>)
 80150a0:	440a      	add	r2, r1
 80150a2:	7a10      	ldrb	r0, [r2, #8]
 80150a4:	79b9      	ldrb	r1, [r7, #6]
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	4798      	blx	r3
 80150aa:	4603      	mov	r3, r0
 80150ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80150ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20000688 	.word	0x20000688

080150bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80150bc:	b480      	push	{r7}
 80150be:	b085      	sub	sp, #20
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3301      	adds	r3, #1
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80150cc:	89fb      	ldrh	r3, [r7, #14]
 80150ce:	021b      	lsls	r3, r3, #8
 80150d0:	b21a      	sxth	r2, r3
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	b21b      	sxth	r3, r3
 80150d8:	4313      	orrs	r3, r2
 80150da:	b21b      	sxth	r3, r3
 80150dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80150de:	89fb      	ldrh	r3, [r7, #14]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3714      	adds	r7, #20
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr

080150ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80150ec:	b480      	push	{r7}
 80150ee:	b085      	sub	sp, #20
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	3303      	adds	r3, #3
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	021b      	lsls	r3, r3, #8
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	3202      	adds	r2, #2
 8015104:	7812      	ldrb	r2, [r2, #0]
 8015106:	4313      	orrs	r3, r2
 8015108:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	021b      	lsls	r3, r3, #8
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	3201      	adds	r2, #1
 8015112:	7812      	ldrb	r2, [r2, #0]
 8015114:	4313      	orrs	r3, r2
 8015116:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	021b      	lsls	r3, r3, #8
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	7812      	ldrb	r2, [r2, #0]
 8015120:	4313      	orrs	r3, r2
 8015122:	60fb      	str	r3, [r7, #12]
	return rv;
 8015124:	68fb      	ldr	r3, [r7, #12]
}
 8015126:	4618      	mov	r0, r3
 8015128:	3714      	adds	r7, #20
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr

08015132 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015132:	b480      	push	{r7}
 8015134:	b083      	sub	sp, #12
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	460b      	mov	r3, r1
 801513c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	1c5a      	adds	r2, r3, #1
 8015142:	607a      	str	r2, [r7, #4]
 8015144:	887a      	ldrh	r2, [r7, #2]
 8015146:	b2d2      	uxtb	r2, r2
 8015148:	701a      	strb	r2, [r3, #0]
 801514a:	887b      	ldrh	r3, [r7, #2]
 801514c:	0a1b      	lsrs	r3, r3, #8
 801514e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	1c5a      	adds	r2, r3, #1
 8015154:	607a      	str	r2, [r7, #4]
 8015156:	887a      	ldrh	r2, [r7, #2]
 8015158:	b2d2      	uxtb	r2, r2
 801515a:	701a      	strb	r2, [r3, #0]
}
 801515c:	bf00      	nop
 801515e:	370c      	adds	r7, #12
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	4770      	bx	lr

08015168 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015168:	b480      	push	{r7}
 801516a:	b083      	sub	sp, #12
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	1c5a      	adds	r2, r3, #1
 8015176:	607a      	str	r2, [r7, #4]
 8015178:	683a      	ldr	r2, [r7, #0]
 801517a:	b2d2      	uxtb	r2, r2
 801517c:	701a      	strb	r2, [r3, #0]
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	0a1b      	lsrs	r3, r3, #8
 8015182:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	1c5a      	adds	r2, r3, #1
 8015188:	607a      	str	r2, [r7, #4]
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	b2d2      	uxtb	r2, r2
 801518e:	701a      	strb	r2, [r3, #0]
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	0a1b      	lsrs	r3, r3, #8
 8015194:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	1c5a      	adds	r2, r3, #1
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	683a      	ldr	r2, [r7, #0]
 801519e:	b2d2      	uxtb	r2, r2
 80151a0:	701a      	strb	r2, [r3, #0]
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	0a1b      	lsrs	r3, r3, #8
 80151a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	1c5a      	adds	r2, r3, #1
 80151ac:	607a      	str	r2, [r7, #4]
 80151ae:	683a      	ldr	r2, [r7, #0]
 80151b0:	b2d2      	uxtb	r2, r2
 80151b2:	701a      	strb	r2, [r3, #0]
}
 80151b4:	bf00      	nop
 80151b6:	370c      	adds	r7, #12
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80151c0:	b480      	push	{r7}
 80151c2:	b087      	sub	sp, #28
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00d      	beq.n	80151f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80151da:	693a      	ldr	r2, [r7, #16]
 80151dc:	1c53      	adds	r3, r2, #1
 80151de:	613b      	str	r3, [r7, #16]
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	1c59      	adds	r1, r3, #1
 80151e4:	6179      	str	r1, [r7, #20]
 80151e6:	7812      	ldrb	r2, [r2, #0]
 80151e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3b01      	subs	r3, #1
 80151ee:	607b      	str	r3, [r7, #4]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1f1      	bne.n	80151da <mem_cpy+0x1a>
	}
}
 80151f6:	bf00      	nop
 80151f8:	371c      	adds	r7, #28
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr

08015202 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015202:	b480      	push	{r7}
 8015204:	b087      	sub	sp, #28
 8015206:	af00      	add	r7, sp, #0
 8015208:	60f8      	str	r0, [r7, #12]
 801520a:	60b9      	str	r1, [r7, #8]
 801520c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	1c5a      	adds	r2, r3, #1
 8015216:	617a      	str	r2, [r7, #20]
 8015218:	68ba      	ldr	r2, [r7, #8]
 801521a:	b2d2      	uxtb	r2, r2
 801521c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	3b01      	subs	r3, #1
 8015222:	607b      	str	r3, [r7, #4]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1f3      	bne.n	8015212 <mem_set+0x10>
}
 801522a:	bf00      	nop
 801522c:	371c      	adds	r7, #28
 801522e:	46bd      	mov	sp, r7
 8015230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015234:	4770      	bx	lr

08015236 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015236:	b480      	push	{r7}
 8015238:	b089      	sub	sp, #36	; 0x24
 801523a:	af00      	add	r7, sp, #0
 801523c:	60f8      	str	r0, [r7, #12]
 801523e:	60b9      	str	r1, [r7, #8]
 8015240:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	61fb      	str	r3, [r7, #28]
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801524a:	2300      	movs	r3, #0
 801524c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	1c5a      	adds	r2, r3, #1
 8015252:	61fa      	str	r2, [r7, #28]
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	4619      	mov	r1, r3
 8015258:	69bb      	ldr	r3, [r7, #24]
 801525a:	1c5a      	adds	r2, r3, #1
 801525c:	61ba      	str	r2, [r7, #24]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	1acb      	subs	r3, r1, r3
 8015262:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	3b01      	subs	r3, #1
 8015268:	607b      	str	r3, [r7, #4]
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d002      	beq.n	8015276 <mem_cmp+0x40>
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d0eb      	beq.n	801524e <mem_cmp+0x18>

	return r;
 8015276:	697b      	ldr	r3, [r7, #20]
}
 8015278:	4618      	mov	r0, r3
 801527a:	3724      	adds	r7, #36	; 0x24
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801528e:	e002      	b.n	8015296 <chk_chr+0x12>
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	3301      	adds	r3, #1
 8015294:	607b      	str	r3, [r7, #4]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d005      	beq.n	80152aa <chk_chr+0x26>
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	461a      	mov	r2, r3
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d1f2      	bne.n	8015290 <chk_chr+0xc>
	return *str;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	781b      	ldrb	r3, [r3, #0]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	370c      	adds	r7, #12
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr

080152ba <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b082      	sub	sp, #8
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d009      	beq.n	80152dc <lock_fs+0x22>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	691b      	ldr	r3, [r3, #16]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f003 f916 	bl	80184fe <ff_req_grant>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d001      	beq.n	80152dc <lock_fs+0x22>
 80152d8:	2301      	movs	r3, #1
 80152da:	e000      	b.n	80152de <lock_fs+0x24>
 80152dc:	2300      	movs	r3, #0
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3708      	adds	r7, #8
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}

080152e6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80152e6:	b580      	push	{r7, lr}
 80152e8:	b082      	sub	sp, #8
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	6078      	str	r0, [r7, #4]
 80152ee:	460b      	mov	r3, r1
 80152f0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d00d      	beq.n	8015314 <unlock_fs+0x2e>
 80152f8:	78fb      	ldrb	r3, [r7, #3]
 80152fa:	2b0c      	cmp	r3, #12
 80152fc:	d00a      	beq.n	8015314 <unlock_fs+0x2e>
 80152fe:	78fb      	ldrb	r3, [r7, #3]
 8015300:	2b0b      	cmp	r3, #11
 8015302:	d007      	beq.n	8015314 <unlock_fs+0x2e>
 8015304:	78fb      	ldrb	r3, [r7, #3]
 8015306:	2b0f      	cmp	r3, #15
 8015308:	d004      	beq.n	8015314 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	4618      	mov	r0, r3
 8015310:	f003 f90a 	bl	8018528 <ff_rel_grant>
	}
}
 8015314:	bf00      	nop
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801531c:	b480      	push	{r7}
 801531e:	b085      	sub	sp, #20
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015326:	2300      	movs	r3, #0
 8015328:	60bb      	str	r3, [r7, #8]
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	60fb      	str	r3, [r7, #12]
 801532e:	e029      	b.n	8015384 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015330:	4a27      	ldr	r2, [pc, #156]	; (80153d0 <chk_lock+0xb4>)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	011b      	lsls	r3, r3, #4
 8015336:	4413      	add	r3, r2
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d01d      	beq.n	801537a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801533e:	4a24      	ldr	r2, [pc, #144]	; (80153d0 <chk_lock+0xb4>)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	011b      	lsls	r3, r3, #4
 8015344:	4413      	add	r3, r2
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	429a      	cmp	r2, r3
 801534e:	d116      	bne.n	801537e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015350:	4a1f      	ldr	r2, [pc, #124]	; (80153d0 <chk_lock+0xb4>)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	011b      	lsls	r3, r3, #4
 8015356:	4413      	add	r3, r2
 8015358:	3304      	adds	r3, #4
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015360:	429a      	cmp	r2, r3
 8015362:	d10c      	bne.n	801537e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015364:	4a1a      	ldr	r2, [pc, #104]	; (80153d0 <chk_lock+0xb4>)
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	011b      	lsls	r3, r3, #4
 801536a:	4413      	add	r3, r2
 801536c:	3308      	adds	r3, #8
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015374:	429a      	cmp	r2, r3
 8015376:	d102      	bne.n	801537e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015378:	e007      	b.n	801538a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801537a:	2301      	movs	r3, #1
 801537c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	3301      	adds	r3, #1
 8015382:	60fb      	str	r3, [r7, #12]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2b02      	cmp	r3, #2
 8015388:	d9d2      	bls.n	8015330 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	2b03      	cmp	r3, #3
 801538e:	d109      	bne.n	80153a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d102      	bne.n	801539c <chk_lock+0x80>
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	2b02      	cmp	r3, #2
 801539a:	d101      	bne.n	80153a0 <chk_lock+0x84>
 801539c:	2300      	movs	r3, #0
 801539e:	e010      	b.n	80153c2 <chk_lock+0xa6>
 80153a0:	2312      	movs	r3, #18
 80153a2:	e00e      	b.n	80153c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d108      	bne.n	80153bc <chk_lock+0xa0>
 80153aa:	4a09      	ldr	r2, [pc, #36]	; (80153d0 <chk_lock+0xb4>)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	011b      	lsls	r3, r3, #4
 80153b0:	4413      	add	r3, r2
 80153b2:	330c      	adds	r3, #12
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153ba:	d101      	bne.n	80153c0 <chk_lock+0xa4>
 80153bc:	2310      	movs	r3, #16
 80153be:	e000      	b.n	80153c2 <chk_lock+0xa6>
 80153c0:	2300      	movs	r3, #0
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3714      	adds	r7, #20
 80153c6:	46bd      	mov	sp, r7
 80153c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop
 80153d0:	20000658 	.word	0x20000658

080153d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80153da:	2300      	movs	r3, #0
 80153dc:	607b      	str	r3, [r7, #4]
 80153de:	e002      	b.n	80153e6 <enq_lock+0x12>
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3301      	adds	r3, #1
 80153e4:	607b      	str	r3, [r7, #4]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d806      	bhi.n	80153fa <enq_lock+0x26>
 80153ec:	4a09      	ldr	r2, [pc, #36]	; (8015414 <enq_lock+0x40>)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	011b      	lsls	r3, r3, #4
 80153f2:	4413      	add	r3, r2
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1f2      	bne.n	80153e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2b03      	cmp	r3, #3
 80153fe:	bf14      	ite	ne
 8015400:	2301      	movne	r3, #1
 8015402:	2300      	moveq	r3, #0
 8015404:	b2db      	uxtb	r3, r3
}
 8015406:	4618      	mov	r0, r3
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr
 8015412:	bf00      	nop
 8015414:	20000658 	.word	0x20000658

08015418 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015422:	2300      	movs	r3, #0
 8015424:	60fb      	str	r3, [r7, #12]
 8015426:	e01f      	b.n	8015468 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015428:	4a41      	ldr	r2, [pc, #260]	; (8015530 <inc_lock+0x118>)
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	011b      	lsls	r3, r3, #4
 801542e:	4413      	add	r3, r2
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	429a      	cmp	r2, r3
 8015438:	d113      	bne.n	8015462 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801543a:	4a3d      	ldr	r2, [pc, #244]	; (8015530 <inc_lock+0x118>)
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	011b      	lsls	r3, r3, #4
 8015440:	4413      	add	r3, r2
 8015442:	3304      	adds	r3, #4
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801544a:	429a      	cmp	r2, r3
 801544c:	d109      	bne.n	8015462 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801544e:	4a38      	ldr	r2, [pc, #224]	; (8015530 <inc_lock+0x118>)
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	011b      	lsls	r3, r3, #4
 8015454:	4413      	add	r3, r2
 8015456:	3308      	adds	r3, #8
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801545e:	429a      	cmp	r2, r3
 8015460:	d006      	beq.n	8015470 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	3301      	adds	r3, #1
 8015466:	60fb      	str	r3, [r7, #12]
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2b02      	cmp	r3, #2
 801546c:	d9dc      	bls.n	8015428 <inc_lock+0x10>
 801546e:	e000      	b.n	8015472 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015470:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2b03      	cmp	r3, #3
 8015476:	d132      	bne.n	80154de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015478:	2300      	movs	r3, #0
 801547a:	60fb      	str	r3, [r7, #12]
 801547c:	e002      	b.n	8015484 <inc_lock+0x6c>
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	3301      	adds	r3, #1
 8015482:	60fb      	str	r3, [r7, #12]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2b02      	cmp	r3, #2
 8015488:	d806      	bhi.n	8015498 <inc_lock+0x80>
 801548a:	4a29      	ldr	r2, [pc, #164]	; (8015530 <inc_lock+0x118>)
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	011b      	lsls	r3, r3, #4
 8015490:	4413      	add	r3, r2
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1f2      	bne.n	801547e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2b03      	cmp	r3, #3
 801549c:	d101      	bne.n	80154a2 <inc_lock+0x8a>
 801549e:	2300      	movs	r3, #0
 80154a0:	e040      	b.n	8015524 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	4922      	ldr	r1, [pc, #136]	; (8015530 <inc_lock+0x118>)
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	011b      	lsls	r3, r3, #4
 80154ac:	440b      	add	r3, r1
 80154ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	689a      	ldr	r2, [r3, #8]
 80154b4:	491e      	ldr	r1, [pc, #120]	; (8015530 <inc_lock+0x118>)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	011b      	lsls	r3, r3, #4
 80154ba:	440b      	add	r3, r1
 80154bc:	3304      	adds	r3, #4
 80154be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	695a      	ldr	r2, [r3, #20]
 80154c4:	491a      	ldr	r1, [pc, #104]	; (8015530 <inc_lock+0x118>)
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	011b      	lsls	r3, r3, #4
 80154ca:	440b      	add	r3, r1
 80154cc:	3308      	adds	r3, #8
 80154ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80154d0:	4a17      	ldr	r2, [pc, #92]	; (8015530 <inc_lock+0x118>)
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	011b      	lsls	r3, r3, #4
 80154d6:	4413      	add	r3, r2
 80154d8:	330c      	adds	r3, #12
 80154da:	2200      	movs	r2, #0
 80154dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d009      	beq.n	80154f8 <inc_lock+0xe0>
 80154e4:	4a12      	ldr	r2, [pc, #72]	; (8015530 <inc_lock+0x118>)
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	011b      	lsls	r3, r3, #4
 80154ea:	4413      	add	r3, r2
 80154ec:	330c      	adds	r3, #12
 80154ee:	881b      	ldrh	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d001      	beq.n	80154f8 <inc_lock+0xe0>
 80154f4:	2300      	movs	r3, #0
 80154f6:	e015      	b.n	8015524 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d108      	bne.n	8015510 <inc_lock+0xf8>
 80154fe:	4a0c      	ldr	r2, [pc, #48]	; (8015530 <inc_lock+0x118>)
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	011b      	lsls	r3, r3, #4
 8015504:	4413      	add	r3, r2
 8015506:	330c      	adds	r3, #12
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	3301      	adds	r3, #1
 801550c:	b29a      	uxth	r2, r3
 801550e:	e001      	b.n	8015514 <inc_lock+0xfc>
 8015510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015514:	4906      	ldr	r1, [pc, #24]	; (8015530 <inc_lock+0x118>)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	011b      	lsls	r3, r3, #4
 801551a:	440b      	add	r3, r1
 801551c:	330c      	adds	r3, #12
 801551e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	3301      	adds	r3, #1
}
 8015524:	4618      	mov	r0, r3
 8015526:	3714      	adds	r7, #20
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr
 8015530:	20000658 	.word	0x20000658

08015534 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	3b01      	subs	r3, #1
 8015540:	607b      	str	r3, [r7, #4]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2b02      	cmp	r3, #2
 8015546:	d825      	bhi.n	8015594 <dec_lock+0x60>
		n = Files[i].ctr;
 8015548:	4a17      	ldr	r2, [pc, #92]	; (80155a8 <dec_lock+0x74>)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	011b      	lsls	r3, r3, #4
 801554e:	4413      	add	r3, r2
 8015550:	330c      	adds	r3, #12
 8015552:	881b      	ldrh	r3, [r3, #0]
 8015554:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015556:	89fb      	ldrh	r3, [r7, #14]
 8015558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801555c:	d101      	bne.n	8015562 <dec_lock+0x2e>
 801555e:	2300      	movs	r3, #0
 8015560:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015562:	89fb      	ldrh	r3, [r7, #14]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d002      	beq.n	801556e <dec_lock+0x3a>
 8015568:	89fb      	ldrh	r3, [r7, #14]
 801556a:	3b01      	subs	r3, #1
 801556c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801556e:	4a0e      	ldr	r2, [pc, #56]	; (80155a8 <dec_lock+0x74>)
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	011b      	lsls	r3, r3, #4
 8015574:	4413      	add	r3, r2
 8015576:	330c      	adds	r3, #12
 8015578:	89fa      	ldrh	r2, [r7, #14]
 801557a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801557c:	89fb      	ldrh	r3, [r7, #14]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d105      	bne.n	801558e <dec_lock+0x5a>
 8015582:	4a09      	ldr	r2, [pc, #36]	; (80155a8 <dec_lock+0x74>)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	011b      	lsls	r3, r3, #4
 8015588:	4413      	add	r3, r2
 801558a:	2200      	movs	r2, #0
 801558c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	737b      	strb	r3, [r7, #13]
 8015592:	e001      	b.n	8015598 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015594:	2302      	movs	r3, #2
 8015596:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015598:	7b7b      	ldrb	r3, [r7, #13]
}
 801559a:	4618      	mov	r0, r3
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	20000658 	.word	0x20000658

080155ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b085      	sub	sp, #20
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80155b4:	2300      	movs	r3, #0
 80155b6:	60fb      	str	r3, [r7, #12]
 80155b8:	e010      	b.n	80155dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80155ba:	4a0d      	ldr	r2, [pc, #52]	; (80155f0 <clear_lock+0x44>)
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	011b      	lsls	r3, r3, #4
 80155c0:	4413      	add	r3, r2
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d105      	bne.n	80155d6 <clear_lock+0x2a>
 80155ca:	4a09      	ldr	r2, [pc, #36]	; (80155f0 <clear_lock+0x44>)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	011b      	lsls	r3, r3, #4
 80155d0:	4413      	add	r3, r2
 80155d2:	2200      	movs	r2, #0
 80155d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	3301      	adds	r3, #1
 80155da:	60fb      	str	r3, [r7, #12]
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2b02      	cmp	r3, #2
 80155e0:	d9eb      	bls.n	80155ba <clear_lock+0xe>
	}
}
 80155e2:	bf00      	nop
 80155e4:	3714      	adds	r7, #20
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr
 80155ee:	bf00      	nop
 80155f0:	20000658 	.word	0x20000658

080155f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b086      	sub	sp, #24
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80155fc:	2300      	movs	r3, #0
 80155fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	78db      	ldrb	r3, [r3, #3]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d034      	beq.n	8015672 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801560c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	7858      	ldrb	r0, [r3, #1]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015618:	2301      	movs	r3, #1
 801561a:	697a      	ldr	r2, [r7, #20]
 801561c:	f7ff fd10 	bl	8015040 <disk_write>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015626:	2301      	movs	r3, #1
 8015628:	73fb      	strb	r3, [r7, #15]
 801562a:	e022      	b.n	8015672 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015636:	697a      	ldr	r2, [r7, #20]
 8015638:	1ad2      	subs	r2, r2, r3
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	6a1b      	ldr	r3, [r3, #32]
 801563e:	429a      	cmp	r2, r3
 8015640:	d217      	bcs.n	8015672 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	789b      	ldrb	r3, [r3, #2]
 8015646:	613b      	str	r3, [r7, #16]
 8015648:	e010      	b.n	801566c <sync_window+0x78>
					wsect += fs->fsize;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6a1b      	ldr	r3, [r3, #32]
 801564e:	697a      	ldr	r2, [r7, #20]
 8015650:	4413      	add	r3, r2
 8015652:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	7858      	ldrb	r0, [r3, #1]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801565e:	2301      	movs	r3, #1
 8015660:	697a      	ldr	r2, [r7, #20]
 8015662:	f7ff fced 	bl	8015040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	3b01      	subs	r3, #1
 801566a:	613b      	str	r3, [r7, #16]
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	2b01      	cmp	r3, #1
 8015670:	d8eb      	bhi.n	801564a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015672:	7bfb      	ldrb	r3, [r7, #15]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3718      	adds	r7, #24
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015686:	2300      	movs	r3, #0
 8015688:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d01b      	beq.n	80156cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7ff ffad 	bl	80155f4 <sync_window>
 801569a:	4603      	mov	r3, r0
 801569c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801569e:	7bfb      	ldrb	r3, [r7, #15]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d113      	bne.n	80156cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	7858      	ldrb	r0, [r3, #1]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80156ae:	2301      	movs	r3, #1
 80156b0:	683a      	ldr	r2, [r7, #0]
 80156b2:	f7ff fca5 	bl	8015000 <disk_read>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d004      	beq.n	80156c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80156bc:	f04f 33ff 	mov.w	r3, #4294967295
 80156c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80156c2:	2301      	movs	r3, #1
 80156c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80156cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3710      	adds	r7, #16
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
	...

080156d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff ff87 	bl	80155f4 <sync_window>
 80156e6:	4603      	mov	r3, r0
 80156e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80156ea:	7bfb      	ldrb	r3, [r7, #15]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d158      	bne.n	80157a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	d148      	bne.n	801578a <sync_fs+0xb2>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	791b      	ldrb	r3, [r3, #4]
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d144      	bne.n	801578a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	3338      	adds	r3, #56	; 0x38
 8015704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015708:	2100      	movs	r1, #0
 801570a:	4618      	mov	r0, r3
 801570c:	f7ff fd79 	bl	8015202 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	3338      	adds	r3, #56	; 0x38
 8015714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015718:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801571c:	4618      	mov	r0, r3
 801571e:	f7ff fd08 	bl	8015132 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	3338      	adds	r3, #56	; 0x38
 8015726:	4921      	ldr	r1, [pc, #132]	; (80157ac <sync_fs+0xd4>)
 8015728:	4618      	mov	r0, r3
 801572a:	f7ff fd1d 	bl	8015168 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	3338      	adds	r3, #56	; 0x38
 8015732:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015736:	491e      	ldr	r1, [pc, #120]	; (80157b0 <sync_fs+0xd8>)
 8015738:	4618      	mov	r0, r3
 801573a:	f7ff fd15 	bl	8015168 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3338      	adds	r3, #56	; 0x38
 8015742:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	699b      	ldr	r3, [r3, #24]
 801574a:	4619      	mov	r1, r3
 801574c:	4610      	mov	r0, r2
 801574e:	f7ff fd0b 	bl	8015168 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	3338      	adds	r3, #56	; 0x38
 8015756:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	695b      	ldr	r3, [r3, #20]
 801575e:	4619      	mov	r1, r3
 8015760:	4610      	mov	r0, r2
 8015762:	f7ff fd01 	bl	8015168 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801576a:	1c5a      	adds	r2, r3, #1
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7858      	ldrb	r0, [r3, #1]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801577e:	2301      	movs	r3, #1
 8015780:	f7ff fc5e 	bl	8015040 <disk_write>
			fs->fsi_flag = 0;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	785b      	ldrb	r3, [r3, #1]
 801578e:	2200      	movs	r2, #0
 8015790:	2100      	movs	r1, #0
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff fc74 	bl	8015080 <disk_ioctl>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d001      	beq.n	80157a2 <sync_fs+0xca>
 801579e:	2301      	movs	r3, #1
 80157a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80157a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	41615252 	.word	0x41615252
 80157b0:	61417272 	.word	0x61417272

080157b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	3b02      	subs	r3, #2
 80157c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	69db      	ldr	r3, [r3, #28]
 80157c8:	3b02      	subs	r3, #2
 80157ca:	683a      	ldr	r2, [r7, #0]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d301      	bcc.n	80157d4 <clust2sect+0x20>
 80157d0:	2300      	movs	r3, #0
 80157d2:	e008      	b.n	80157e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	895b      	ldrh	r3, [r3, #10]
 80157d8:	461a      	mov	r2, r3
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	fb03 f202 	mul.w	r2, r3, r2
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157e4:	4413      	add	r3, r2
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	370c      	adds	r7, #12
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr

080157f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80157f2:	b580      	push	{r7, lr}
 80157f4:	b086      	sub	sp, #24
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
 80157fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	2b01      	cmp	r3, #1
 8015806:	d904      	bls.n	8015812 <get_fat+0x20>
 8015808:	693b      	ldr	r3, [r7, #16]
 801580a:	69db      	ldr	r3, [r3, #28]
 801580c:	683a      	ldr	r2, [r7, #0]
 801580e:	429a      	cmp	r2, r3
 8015810:	d302      	bcc.n	8015818 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015812:	2301      	movs	r3, #1
 8015814:	617b      	str	r3, [r7, #20]
 8015816:	e08c      	b.n	8015932 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015818:	f04f 33ff 	mov.w	r3, #4294967295
 801581c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801581e:	693b      	ldr	r3, [r7, #16]
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	2b02      	cmp	r3, #2
 8015824:	d045      	beq.n	80158b2 <get_fat+0xc0>
 8015826:	2b03      	cmp	r3, #3
 8015828:	d05d      	beq.n	80158e6 <get_fat+0xf4>
 801582a:	2b01      	cmp	r3, #1
 801582c:	d177      	bne.n	801591e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	60fb      	str	r3, [r7, #12]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	085b      	lsrs	r3, r3, #1
 8015836:	68fa      	ldr	r2, [r7, #12]
 8015838:	4413      	add	r3, r2
 801583a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	0a5b      	lsrs	r3, r3, #9
 8015844:	4413      	add	r3, r2
 8015846:	4619      	mov	r1, r3
 8015848:	6938      	ldr	r0, [r7, #16]
 801584a:	f7ff ff17 	bl	801567c <move_window>
 801584e:	4603      	mov	r3, r0
 8015850:	2b00      	cmp	r3, #0
 8015852:	d167      	bne.n	8015924 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	1c5a      	adds	r2, r3, #1
 8015858:	60fa      	str	r2, [r7, #12]
 801585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801585e:	693a      	ldr	r2, [r7, #16]
 8015860:	4413      	add	r3, r2
 8015862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015866:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	0a5b      	lsrs	r3, r3, #9
 8015870:	4413      	add	r3, r2
 8015872:	4619      	mov	r1, r3
 8015874:	6938      	ldr	r0, [r7, #16]
 8015876:	f7ff ff01 	bl	801567c <move_window>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d153      	bne.n	8015928 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015886:	693a      	ldr	r2, [r7, #16]
 8015888:	4413      	add	r3, r2
 801588a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801588e:	021b      	lsls	r3, r3, #8
 8015890:	461a      	mov	r2, r3
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	4313      	orrs	r3, r2
 8015896:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	f003 0301 	and.w	r3, r3, #1
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d002      	beq.n	80158a8 <get_fat+0xb6>
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	091b      	lsrs	r3, r3, #4
 80158a6:	e002      	b.n	80158ae <get_fat+0xbc>
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80158ae:	617b      	str	r3, [r7, #20]
			break;
 80158b0:	e03f      	b.n	8015932 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	0a1b      	lsrs	r3, r3, #8
 80158ba:	4413      	add	r3, r2
 80158bc:	4619      	mov	r1, r3
 80158be:	6938      	ldr	r0, [r7, #16]
 80158c0:	f7ff fedc 	bl	801567c <move_window>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d130      	bne.n	801592c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80158d8:	4413      	add	r3, r2
 80158da:	4618      	mov	r0, r3
 80158dc:	f7ff fbee 	bl	80150bc <ld_word>
 80158e0:	4603      	mov	r3, r0
 80158e2:	617b      	str	r3, [r7, #20]
			break;
 80158e4:	e025      	b.n	8015932 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	09db      	lsrs	r3, r3, #7
 80158ee:	4413      	add	r3, r2
 80158f0:	4619      	mov	r1, r3
 80158f2:	6938      	ldr	r0, [r7, #16]
 80158f4:	f7ff fec2 	bl	801567c <move_window>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d118      	bne.n	8015930 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801590c:	4413      	add	r3, r2
 801590e:	4618      	mov	r0, r3
 8015910:	f7ff fbec 	bl	80150ec <ld_dword>
 8015914:	4603      	mov	r3, r0
 8015916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801591a:	617b      	str	r3, [r7, #20]
			break;
 801591c:	e009      	b.n	8015932 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801591e:	2301      	movs	r3, #1
 8015920:	617b      	str	r3, [r7, #20]
 8015922:	e006      	b.n	8015932 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015924:	bf00      	nop
 8015926:	e004      	b.n	8015932 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015928:	bf00      	nop
 801592a:	e002      	b.n	8015932 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801592c:	bf00      	nop
 801592e:	e000      	b.n	8015932 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015930:	bf00      	nop
		}
	}

	return val;
 8015932:	697b      	ldr	r3, [r7, #20]
}
 8015934:	4618      	mov	r0, r3
 8015936:	3718      	adds	r7, #24
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}

0801593c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801593c:	b590      	push	{r4, r7, lr}
 801593e:	b089      	sub	sp, #36	; 0x24
 8015940:	af00      	add	r7, sp, #0
 8015942:	60f8      	str	r0, [r7, #12]
 8015944:	60b9      	str	r1, [r7, #8]
 8015946:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015948:	2302      	movs	r3, #2
 801594a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	2b01      	cmp	r3, #1
 8015950:	f240 80d6 	bls.w	8015b00 <put_fat+0x1c4>
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	69db      	ldr	r3, [r3, #28]
 8015958:	68ba      	ldr	r2, [r7, #8]
 801595a:	429a      	cmp	r2, r3
 801595c:	f080 80d0 	bcs.w	8015b00 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b02      	cmp	r3, #2
 8015966:	d073      	beq.n	8015a50 <put_fat+0x114>
 8015968:	2b03      	cmp	r3, #3
 801596a:	f000 8091 	beq.w	8015a90 <put_fat+0x154>
 801596e:	2b01      	cmp	r3, #1
 8015970:	f040 80c6 	bne.w	8015b00 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	61bb      	str	r3, [r7, #24]
 8015978:	69bb      	ldr	r3, [r7, #24]
 801597a:	085b      	lsrs	r3, r3, #1
 801597c:	69ba      	ldr	r2, [r7, #24]
 801597e:	4413      	add	r3, r2
 8015980:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	0a5b      	lsrs	r3, r3, #9
 801598a:	4413      	add	r3, r2
 801598c:	4619      	mov	r1, r3
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7ff fe74 	bl	801567c <move_window>
 8015994:	4603      	mov	r3, r0
 8015996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015998:	7ffb      	ldrb	r3, [r7, #31]
 801599a:	2b00      	cmp	r3, #0
 801599c:	f040 80a9 	bne.w	8015af2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	1c59      	adds	r1, r3, #1
 80159aa:	61b9      	str	r1, [r7, #24]
 80159ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159b0:	4413      	add	r3, r2
 80159b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	f003 0301 	and.w	r3, r3, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00d      	beq.n	80159da <put_fat+0x9e>
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	b25b      	sxtb	r3, r3
 80159c4:	f003 030f 	and.w	r3, r3, #15
 80159c8:	b25a      	sxtb	r2, r3
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	011b      	lsls	r3, r3, #4
 80159d0:	b25b      	sxtb	r3, r3
 80159d2:	4313      	orrs	r3, r2
 80159d4:	b25b      	sxtb	r3, r3
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	e001      	b.n	80159de <put_fat+0xa2>
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	697a      	ldr	r2, [r7, #20]
 80159e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2201      	movs	r2, #1
 80159e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159ec:	69bb      	ldr	r3, [r7, #24]
 80159ee:	0a5b      	lsrs	r3, r3, #9
 80159f0:	4413      	add	r3, r2
 80159f2:	4619      	mov	r1, r3
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f7ff fe41 	bl	801567c <move_window>
 80159fa:	4603      	mov	r3, r0
 80159fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80159fe:	7ffb      	ldrb	r3, [r7, #31]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d178      	bne.n	8015af6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a10:	4413      	add	r3, r2
 8015a12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	f003 0301 	and.w	r3, r3, #1
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d003      	beq.n	8015a26 <put_fat+0xea>
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	091b      	lsrs	r3, r3, #4
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	e00e      	b.n	8015a44 <put_fat+0x108>
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	b25b      	sxtb	r3, r3
 8015a2c:	f023 030f 	bic.w	r3, r3, #15
 8015a30:	b25a      	sxtb	r2, r3
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	0a1b      	lsrs	r3, r3, #8
 8015a36:	b25b      	sxtb	r3, r3
 8015a38:	f003 030f 	and.w	r3, r3, #15
 8015a3c:	b25b      	sxtb	r3, r3
 8015a3e:	4313      	orrs	r3, r2
 8015a40:	b25b      	sxtb	r3, r3
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	697a      	ldr	r2, [r7, #20]
 8015a46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	2201      	movs	r2, #1
 8015a4c:	70da      	strb	r2, [r3, #3]
			break;
 8015a4e:	e057      	b.n	8015b00 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	0a1b      	lsrs	r3, r3, #8
 8015a58:	4413      	add	r3, r2
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	68f8      	ldr	r0, [r7, #12]
 8015a5e:	f7ff fe0d 	bl	801567c <move_window>
 8015a62:	4603      	mov	r3, r0
 8015a64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015a66:	7ffb      	ldrb	r3, [r7, #31]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d146      	bne.n	8015afa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	005b      	lsls	r3, r3, #1
 8015a76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015a7a:	4413      	add	r3, r2
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	b292      	uxth	r2, r2
 8015a80:	4611      	mov	r1, r2
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7ff fb55 	bl	8015132 <st_word>
			fs->wflag = 1;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	70da      	strb	r2, [r3, #3]
			break;
 8015a8e:	e037      	b.n	8015b00 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	09db      	lsrs	r3, r3, #7
 8015a98:	4413      	add	r3, r2
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f7ff fded 	bl	801567c <move_window>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015aa6:	7ffb      	ldrb	r3, [r7, #31]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d128      	bne.n	8015afe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ac0:	4413      	add	r3, r2
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7ff fb12 	bl	80150ec <ld_dword>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015ace:	4323      	orrs	r3, r4
 8015ad0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	009b      	lsls	r3, r3, #2
 8015adc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ae0:	4413      	add	r3, r2
 8015ae2:	6879      	ldr	r1, [r7, #4]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7ff fb3f 	bl	8015168 <st_dword>
			fs->wflag = 1;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2201      	movs	r2, #1
 8015aee:	70da      	strb	r2, [r3, #3]
			break;
 8015af0:	e006      	b.n	8015b00 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015af2:	bf00      	nop
 8015af4:	e004      	b.n	8015b00 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015af6:	bf00      	nop
 8015af8:	e002      	b.n	8015b00 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015afa:	bf00      	nop
 8015afc:	e000      	b.n	8015b00 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015afe:	bf00      	nop
		}
	}
	return res;
 8015b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3724      	adds	r7, #36	; 0x24
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd90      	pop	{r4, r7, pc}

08015b0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b088      	sub	sp, #32
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	60f8      	str	r0, [r7, #12]
 8015b12:	60b9      	str	r1, [r7, #8]
 8015b14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d904      	bls.n	8015b30 <remove_chain+0x26>
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	69db      	ldr	r3, [r3, #28]
 8015b2a:	68ba      	ldr	r2, [r7, #8]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d301      	bcc.n	8015b34 <remove_chain+0x2a>
 8015b30:	2302      	movs	r3, #2
 8015b32:	e04b      	b.n	8015bcc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d00c      	beq.n	8015b54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b3e:	6879      	ldr	r1, [r7, #4]
 8015b40:	69b8      	ldr	r0, [r7, #24]
 8015b42:	f7ff fefb 	bl	801593c <put_fat>
 8015b46:	4603      	mov	r3, r0
 8015b48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015b4a:	7ffb      	ldrb	r3, [r7, #31]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d001      	beq.n	8015b54 <remove_chain+0x4a>
 8015b50:	7ffb      	ldrb	r3, [r7, #31]
 8015b52:	e03b      	b.n	8015bcc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015b54:	68b9      	ldr	r1, [r7, #8]
 8015b56:	68f8      	ldr	r0, [r7, #12]
 8015b58:	f7ff fe4b 	bl	80157f2 <get_fat>
 8015b5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d031      	beq.n	8015bc8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d101      	bne.n	8015b6e <remove_chain+0x64>
 8015b6a:	2302      	movs	r3, #2
 8015b6c:	e02e      	b.n	8015bcc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b74:	d101      	bne.n	8015b7a <remove_chain+0x70>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e028      	b.n	8015bcc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	68b9      	ldr	r1, [r7, #8]
 8015b7e:	69b8      	ldr	r0, [r7, #24]
 8015b80:	f7ff fedc 	bl	801593c <put_fat>
 8015b84:	4603      	mov	r3, r0
 8015b86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015b88:	7ffb      	ldrb	r3, [r7, #31]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d001      	beq.n	8015b92 <remove_chain+0x88>
 8015b8e:	7ffb      	ldrb	r3, [r7, #31]
 8015b90:	e01c      	b.n	8015bcc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	699a      	ldr	r2, [r3, #24]
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	69db      	ldr	r3, [r3, #28]
 8015b9a:	3b02      	subs	r3, #2
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d20b      	bcs.n	8015bb8 <remove_chain+0xae>
			fs->free_clst++;
 8015ba0:	69bb      	ldr	r3, [r7, #24]
 8015ba2:	699b      	ldr	r3, [r3, #24]
 8015ba4:	1c5a      	adds	r2, r3, #1
 8015ba6:	69bb      	ldr	r3, [r7, #24]
 8015ba8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8015baa:	69bb      	ldr	r3, [r7, #24]
 8015bac:	791b      	ldrb	r3, [r3, #4]
 8015bae:	f043 0301 	orr.w	r3, r3, #1
 8015bb2:	b2da      	uxtb	r2, r3
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015bbc:	69bb      	ldr	r3, [r7, #24]
 8015bbe:	69db      	ldr	r3, [r3, #28]
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d3c6      	bcc.n	8015b54 <remove_chain+0x4a>
 8015bc6:	e000      	b.n	8015bca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015bc8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015bca:	2300      	movs	r3, #0
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3720      	adds	r7, #32
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b088      	sub	sp, #32
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d10d      	bne.n	8015c06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	695b      	ldr	r3, [r3, #20]
 8015bee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015bf0:	69bb      	ldr	r3, [r7, #24]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d004      	beq.n	8015c00 <create_chain+0x2c>
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	69db      	ldr	r3, [r3, #28]
 8015bfa:	69ba      	ldr	r2, [r7, #24]
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d31b      	bcc.n	8015c38 <create_chain+0x64>
 8015c00:	2301      	movs	r3, #1
 8015c02:	61bb      	str	r3, [r7, #24]
 8015c04:	e018      	b.n	8015c38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f7ff fdf2 	bl	80157f2 <get_fat>
 8015c0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d801      	bhi.n	8015c1a <create_chain+0x46>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e070      	b.n	8015cfc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c20:	d101      	bne.n	8015c26 <create_chain+0x52>
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	e06a      	b.n	8015cfc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	69db      	ldr	r3, [r3, #28]
 8015c2a:	68fa      	ldr	r2, [r7, #12]
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d201      	bcs.n	8015c34 <create_chain+0x60>
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	e063      	b.n	8015cfc <create_chain+0x128>
		scl = clst;
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	3301      	adds	r3, #1
 8015c40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	69db      	ldr	r3, [r3, #28]
 8015c46:	69fa      	ldr	r2, [r7, #28]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d307      	bcc.n	8015c5c <create_chain+0x88>
				ncl = 2;
 8015c4c:	2302      	movs	r3, #2
 8015c4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015c50:	69fa      	ldr	r2, [r7, #28]
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	429a      	cmp	r2, r3
 8015c56:	d901      	bls.n	8015c5c <create_chain+0x88>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e04f      	b.n	8015cfc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015c5c:	69f9      	ldr	r1, [r7, #28]
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f7ff fdc7 	bl	80157f2 <get_fat>
 8015c64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d00e      	beq.n	8015c8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	d003      	beq.n	8015c7a <create_chain+0xa6>
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c78:	d101      	bne.n	8015c7e <create_chain+0xaa>
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	e03e      	b.n	8015cfc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015c7e:	69fa      	ldr	r2, [r7, #28]
 8015c80:	69bb      	ldr	r3, [r7, #24]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d1da      	bne.n	8015c3c <create_chain+0x68>
 8015c86:	2300      	movs	r3, #0
 8015c88:	e038      	b.n	8015cfc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015c8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8015c90:	69f9      	ldr	r1, [r7, #28]
 8015c92:	6938      	ldr	r0, [r7, #16]
 8015c94:	f7ff fe52 	bl	801593c <put_fat>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015c9c:	7dfb      	ldrb	r3, [r7, #23]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d109      	bne.n	8015cb6 <create_chain+0xe2>
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d006      	beq.n	8015cb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015ca8:	69fa      	ldr	r2, [r7, #28]
 8015caa:	6839      	ldr	r1, [r7, #0]
 8015cac:	6938      	ldr	r0, [r7, #16]
 8015cae:	f7ff fe45 	bl	801593c <put_fat>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015cb6:	7dfb      	ldrb	r3, [r7, #23]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d116      	bne.n	8015cea <create_chain+0x116>
		fs->last_clst = ncl;
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	69fa      	ldr	r2, [r7, #28]
 8015cc0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	699a      	ldr	r2, [r3, #24]
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	69db      	ldr	r3, [r3, #28]
 8015cca:	3b02      	subs	r3, #2
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d804      	bhi.n	8015cda <create_chain+0x106>
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	699b      	ldr	r3, [r3, #24]
 8015cd4:	1e5a      	subs	r2, r3, #1
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	791b      	ldrb	r3, [r3, #4]
 8015cde:	f043 0301 	orr.w	r3, r3, #1
 8015ce2:	b2da      	uxtb	r2, r3
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	711a      	strb	r2, [r3, #4]
 8015ce8:	e007      	b.n	8015cfa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015cea:	7dfb      	ldrb	r3, [r7, #23]
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	d102      	bne.n	8015cf6 <create_chain+0x122>
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	e000      	b.n	8015cf8 <create_chain+0x124>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015cfa:	69fb      	ldr	r3, [r7, #28]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3720      	adds	r7, #32
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015d04:	b480      	push	{r7}
 8015d06:	b087      	sub	sp, #28
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d18:	3304      	adds	r3, #4
 8015d1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	0a5b      	lsrs	r3, r3, #9
 8015d20:	68fa      	ldr	r2, [r7, #12]
 8015d22:	8952      	ldrh	r2, [r2, #10]
 8015d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	1d1a      	adds	r2, r3, #4
 8015d2e:	613a      	str	r2, [r7, #16]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015d34:	68bb      	ldr	r3, [r7, #8]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d101      	bne.n	8015d3e <clmt_clust+0x3a>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	e010      	b.n	8015d60 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015d3e:	697a      	ldr	r2, [r7, #20]
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d307      	bcc.n	8015d56 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015d46:	697a      	ldr	r2, [r7, #20]
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	1ad3      	subs	r3, r2, r3
 8015d4c:	617b      	str	r3, [r7, #20]
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	3304      	adds	r3, #4
 8015d52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015d54:	e7e9      	b.n	8015d2a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015d56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	681a      	ldr	r2, [r3, #0]
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	4413      	add	r3, r2
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	371c      	adds	r7, #28
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr

08015d6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d82:	d204      	bcs.n	8015d8e <dir_sdi+0x22>
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	f003 031f 	and.w	r3, r3, #31
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d001      	beq.n	8015d92 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015d8e:	2302      	movs	r3, #2
 8015d90:	e063      	b.n	8015e5a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	683a      	ldr	r2, [r7, #0]
 8015d96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d106      	bne.n	8015db2 <dir_sdi+0x46>
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d902      	bls.n	8015db2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015db0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d10c      	bne.n	8015dd2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	095b      	lsrs	r3, r3, #5
 8015dbc:	693a      	ldr	r2, [r7, #16]
 8015dbe:	8912      	ldrh	r2, [r2, #8]
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d301      	bcc.n	8015dc8 <dir_sdi+0x5c>
 8015dc4:	2302      	movs	r3, #2
 8015dc6:	e048      	b.n	8015e5a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	61da      	str	r2, [r3, #28]
 8015dd0:	e029      	b.n	8015e26 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	895b      	ldrh	r3, [r3, #10]
 8015dd6:	025b      	lsls	r3, r3, #9
 8015dd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015dda:	e019      	b.n	8015e10 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6979      	ldr	r1, [r7, #20]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff fd06 	bl	80157f2 <get_fat>
 8015de6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dee:	d101      	bne.n	8015df4 <dir_sdi+0x88>
 8015df0:	2301      	movs	r3, #1
 8015df2:	e032      	b.n	8015e5a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d904      	bls.n	8015e04 <dir_sdi+0x98>
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	69db      	ldr	r3, [r3, #28]
 8015dfe:	697a      	ldr	r2, [r7, #20]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d301      	bcc.n	8015e08 <dir_sdi+0x9c>
 8015e04:	2302      	movs	r3, #2
 8015e06:	e028      	b.n	8015e5a <dir_sdi+0xee>
			ofs -= csz;
 8015e08:	683a      	ldr	r2, [r7, #0]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015e10:	683a      	ldr	r2, [r7, #0]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d2e1      	bcs.n	8015ddc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015e18:	6979      	ldr	r1, [r7, #20]
 8015e1a:	6938      	ldr	r0, [r7, #16]
 8015e1c:	f7ff fcca 	bl	80157b4 <clust2sect>
 8015e20:	4602      	mov	r2, r0
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	697a      	ldr	r2, [r7, #20]
 8015e2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	69db      	ldr	r3, [r3, #28]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d101      	bne.n	8015e38 <dir_sdi+0xcc>
 8015e34:	2302      	movs	r3, #2
 8015e36:	e010      	b.n	8015e5a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	69da      	ldr	r2, [r3, #28]
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	0a5b      	lsrs	r3, r3, #9
 8015e40:	441a      	add	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e52:	441a      	add	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3718      	adds	r7, #24
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b086      	sub	sp, #24
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
 8015e6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	695b      	ldr	r3, [r3, #20]
 8015e76:	3320      	adds	r3, #32
 8015e78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	69db      	ldr	r3, [r3, #28]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d003      	beq.n	8015e8a <dir_next+0x28>
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015e88:	d301      	bcc.n	8015e8e <dir_next+0x2c>
 8015e8a:	2304      	movs	r3, #4
 8015e8c:	e0aa      	b.n	8015fe4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f040 8098 	bne.w	8015fca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	69db      	ldr	r3, [r3, #28]
 8015e9e:	1c5a      	adds	r2, r3, #1
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	699b      	ldr	r3, [r3, #24]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d10b      	bne.n	8015ec4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	095b      	lsrs	r3, r3, #5
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	8912      	ldrh	r2, [r2, #8]
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	f0c0 8088 	bcc.w	8015fca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	61da      	str	r2, [r3, #28]
 8015ec0:	2304      	movs	r3, #4
 8015ec2:	e08f      	b.n	8015fe4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	0a5b      	lsrs	r3, r3, #9
 8015ec8:	68fa      	ldr	r2, [r7, #12]
 8015eca:	8952      	ldrh	r2, [r2, #10]
 8015ecc:	3a01      	subs	r2, #1
 8015ece:	4013      	ands	r3, r2
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d17a      	bne.n	8015fca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	699b      	ldr	r3, [r3, #24]
 8015eda:	4619      	mov	r1, r3
 8015edc:	4610      	mov	r0, r2
 8015ede:	f7ff fc88 	bl	80157f2 <get_fat>
 8015ee2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d801      	bhi.n	8015eee <dir_next+0x8c>
 8015eea:	2302      	movs	r3, #2
 8015eec:	e07a      	b.n	8015fe4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ef4:	d101      	bne.n	8015efa <dir_next+0x98>
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	e074      	b.n	8015fe4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	69db      	ldr	r3, [r3, #28]
 8015efe:	697a      	ldr	r2, [r7, #20]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d358      	bcc.n	8015fb6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d104      	bne.n	8015f14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	61da      	str	r2, [r3, #28]
 8015f10:	2304      	movs	r3, #4
 8015f12:	e067      	b.n	8015fe4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	699b      	ldr	r3, [r3, #24]
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	4610      	mov	r0, r2
 8015f1e:	f7ff fe59 	bl	8015bd4 <create_chain>
 8015f22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d101      	bne.n	8015f2e <dir_next+0xcc>
 8015f2a:	2307      	movs	r3, #7
 8015f2c:	e05a      	b.n	8015fe4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015f2e:	697b      	ldr	r3, [r7, #20]
 8015f30:	2b01      	cmp	r3, #1
 8015f32:	d101      	bne.n	8015f38 <dir_next+0xd6>
 8015f34:	2302      	movs	r3, #2
 8015f36:	e055      	b.n	8015fe4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f3e:	d101      	bne.n	8015f44 <dir_next+0xe2>
 8015f40:	2301      	movs	r3, #1
 8015f42:	e04f      	b.n	8015fe4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f7ff fb55 	bl	80155f4 <sync_window>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d001      	beq.n	8015f54 <dir_next+0xf2>
 8015f50:	2301      	movs	r3, #1
 8015f52:	e047      	b.n	8015fe4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	3338      	adds	r3, #56	; 0x38
 8015f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f5c:	2100      	movs	r1, #0
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7ff f94f 	bl	8015202 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015f64:	2300      	movs	r3, #0
 8015f66:	613b      	str	r3, [r7, #16]
 8015f68:	6979      	ldr	r1, [r7, #20]
 8015f6a:	68f8      	ldr	r0, [r7, #12]
 8015f6c:	f7ff fc22 	bl	80157b4 <clust2sect>
 8015f70:	4602      	mov	r2, r0
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	635a      	str	r2, [r3, #52]	; 0x34
 8015f76:	e012      	b.n	8015f9e <dir_next+0x13c>
						fs->wflag = 1;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f7ff fb38 	bl	80155f4 <sync_window>
 8015f84:	4603      	mov	r3, r0
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d001      	beq.n	8015f8e <dir_next+0x12c>
 8015f8a:	2301      	movs	r3, #1
 8015f8c:	e02a      	b.n	8015fe4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	3301      	adds	r3, #1
 8015f92:	613b      	str	r3, [r7, #16]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f98:	1c5a      	adds	r2, r3, #1
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	895b      	ldrh	r3, [r3, #10]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	d3e6      	bcc.n	8015f78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	1ad2      	subs	r2, r2, r3
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	697a      	ldr	r2, [r7, #20]
 8015fba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015fbc:	6979      	ldr	r1, [r7, #20]
 8015fbe:	68f8      	ldr	r0, [r7, #12]
 8015fc0:	f7ff fbf8 	bl	80157b4 <clust2sect>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	68ba      	ldr	r2, [r7, #8]
 8015fce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fdc:	441a      	add	r2, r3
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015fe2:	2300      	movs	r3, #0
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3718      	adds	r7, #24
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7ff feb4 	bl	8015d6c <dir_sdi>
 8016004:	4603      	mov	r3, r0
 8016006:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016008:	7dfb      	ldrb	r3, [r7, #23]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d12b      	bne.n	8016066 <dir_alloc+0x7a>
		n = 0;
 801600e:	2300      	movs	r3, #0
 8016010:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	69db      	ldr	r3, [r3, #28]
 8016016:	4619      	mov	r1, r3
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f7ff fb2f 	bl	801567c <move_window>
 801601e:	4603      	mov	r3, r0
 8016020:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016022:	7dfb      	ldrb	r3, [r7, #23]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d11d      	bne.n	8016064 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6a1b      	ldr	r3, [r3, #32]
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	2be5      	cmp	r3, #229	; 0xe5
 8016030:	d004      	beq.n	801603c <dir_alloc+0x50>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6a1b      	ldr	r3, [r3, #32]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d107      	bne.n	801604c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	3301      	adds	r3, #1
 8016040:	613b      	str	r3, [r7, #16]
 8016042:	693a      	ldr	r2, [r7, #16]
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	429a      	cmp	r2, r3
 8016048:	d102      	bne.n	8016050 <dir_alloc+0x64>
 801604a:	e00c      	b.n	8016066 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801604c:	2300      	movs	r3, #0
 801604e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016050:	2101      	movs	r1, #1
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	f7ff ff05 	bl	8015e62 <dir_next>
 8016058:	4603      	mov	r3, r0
 801605a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801605c:	7dfb      	ldrb	r3, [r7, #23]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d0d7      	beq.n	8016012 <dir_alloc+0x26>
 8016062:	e000      	b.n	8016066 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016064:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016066:	7dfb      	ldrb	r3, [r7, #23]
 8016068:	2b04      	cmp	r3, #4
 801606a:	d101      	bne.n	8016070 <dir_alloc+0x84>
 801606c:	2307      	movs	r3, #7
 801606e:	75fb      	strb	r3, [r7, #23]
	return res;
 8016070:	7dfb      	ldrb	r3, [r7, #23]
}
 8016072:	4618      	mov	r0, r3
 8016074:	3718      	adds	r7, #24
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}

0801607a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801607a:	b580      	push	{r7, lr}
 801607c:	b084      	sub	sp, #16
 801607e:	af00      	add	r7, sp, #0
 8016080:	6078      	str	r0, [r7, #4]
 8016082:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	331a      	adds	r3, #26
 8016088:	4618      	mov	r0, r3
 801608a:	f7ff f817 	bl	80150bc <ld_word>
 801608e:	4603      	mov	r3, r0
 8016090:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	2b03      	cmp	r3, #3
 8016098:	d109      	bne.n	80160ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	3314      	adds	r3, #20
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ff f80c 	bl	80150bc <ld_word>
 80160a4:	4603      	mov	r3, r0
 80160a6:	041b      	lsls	r3, r3, #16
 80160a8:	68fa      	ldr	r2, [r7, #12]
 80160aa:	4313      	orrs	r3, r2
 80160ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80160ae:	68fb      	ldr	r3, [r7, #12]
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	60f8      	str	r0, [r7, #12]
 80160c0:	60b9      	str	r1, [r7, #8]
 80160c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	331a      	adds	r3, #26
 80160c8:	687a      	ldr	r2, [r7, #4]
 80160ca:	b292      	uxth	r2, r2
 80160cc:	4611      	mov	r1, r2
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ff f82f 	bl	8015132 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	2b03      	cmp	r3, #3
 80160da:	d109      	bne.n	80160f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	f103 0214 	add.w	r2, r3, #20
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	0c1b      	lsrs	r3, r3, #16
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	4619      	mov	r1, r3
 80160ea:	4610      	mov	r0, r2
 80160ec:	f7ff f821 	bl	8015132 <st_word>
	}
}
 80160f0:	bf00      	nop
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80160f8:	b590      	push	{r4, r7, lr}
 80160fa:	b087      	sub	sp, #28
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	331a      	adds	r3, #26
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe ffd8 	bl	80150bc <ld_word>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d001      	beq.n	8016116 <cmp_lfn+0x1e>
 8016112:	2300      	movs	r3, #0
 8016114:	e059      	b.n	80161ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801611e:	1e5a      	subs	r2, r3, #1
 8016120:	4613      	mov	r3, r2
 8016122:	005b      	lsls	r3, r3, #1
 8016124:	4413      	add	r3, r2
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	4413      	add	r3, r2
 801612a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801612c:	2301      	movs	r3, #1
 801612e:	81fb      	strh	r3, [r7, #14]
 8016130:	2300      	movs	r3, #0
 8016132:	613b      	str	r3, [r7, #16]
 8016134:	e033      	b.n	801619e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016136:	4a27      	ldr	r2, [pc, #156]	; (80161d4 <cmp_lfn+0xdc>)
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	4413      	add	r3, r2
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	461a      	mov	r2, r3
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	4413      	add	r3, r2
 8016144:	4618      	mov	r0, r3
 8016146:	f7fe ffb9 	bl	80150bc <ld_word>
 801614a:	4603      	mov	r3, r0
 801614c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801614e:	89fb      	ldrh	r3, [r7, #14]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d01a      	beq.n	801618a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	2bfe      	cmp	r3, #254	; 0xfe
 8016158:	d812      	bhi.n	8016180 <cmp_lfn+0x88>
 801615a:	89bb      	ldrh	r3, [r7, #12]
 801615c:	4618      	mov	r0, r3
 801615e:	f002 f919 	bl	8018394 <ff_wtoupper>
 8016162:	4603      	mov	r3, r0
 8016164:	461c      	mov	r4, r3
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	1c5a      	adds	r2, r3, #1
 801616a:	617a      	str	r2, [r7, #20]
 801616c:	005b      	lsls	r3, r3, #1
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	4413      	add	r3, r2
 8016172:	881b      	ldrh	r3, [r3, #0]
 8016174:	4618      	mov	r0, r3
 8016176:	f002 f90d 	bl	8018394 <ff_wtoupper>
 801617a:	4603      	mov	r3, r0
 801617c:	429c      	cmp	r4, r3
 801617e:	d001      	beq.n	8016184 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016180:	2300      	movs	r3, #0
 8016182:	e022      	b.n	80161ca <cmp_lfn+0xd2>
			}
			wc = uc;
 8016184:	89bb      	ldrh	r3, [r7, #12]
 8016186:	81fb      	strh	r3, [r7, #14]
 8016188:	e006      	b.n	8016198 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801618a:	89bb      	ldrh	r3, [r7, #12]
 801618c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016190:	4293      	cmp	r3, r2
 8016192:	d001      	beq.n	8016198 <cmp_lfn+0xa0>
 8016194:	2300      	movs	r3, #0
 8016196:	e018      	b.n	80161ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	3301      	adds	r3, #1
 801619c:	613b      	str	r3, [r7, #16]
 801619e:	693b      	ldr	r3, [r7, #16]
 80161a0:	2b0c      	cmp	r3, #12
 80161a2:	d9c8      	bls.n	8016136 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d00b      	beq.n	80161c8 <cmp_lfn+0xd0>
 80161b0:	89fb      	ldrh	r3, [r7, #14]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d008      	beq.n	80161c8 <cmp_lfn+0xd0>
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	005b      	lsls	r3, r3, #1
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	4413      	add	r3, r2
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d001      	beq.n	80161c8 <cmp_lfn+0xd0>
 80161c4:	2300      	movs	r3, #0
 80161c6:	e000      	b.n	80161ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80161c8:	2301      	movs	r3, #1
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	371c      	adds	r7, #28
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd90      	pop	{r4, r7, pc}
 80161d2:	bf00      	nop
 80161d4:	0801f5cc 	.word	0x0801f5cc

080161d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b088      	sub	sp, #32
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	4611      	mov	r1, r2
 80161e4:	461a      	mov	r2, r3
 80161e6:	460b      	mov	r3, r1
 80161e8:	71fb      	strb	r3, [r7, #7]
 80161ea:	4613      	mov	r3, r2
 80161ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	330d      	adds	r3, #13
 80161f2:	79ba      	ldrb	r2, [r7, #6]
 80161f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	330b      	adds	r3, #11
 80161fa:	220f      	movs	r2, #15
 80161fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	330c      	adds	r3, #12
 8016202:	2200      	movs	r2, #0
 8016204:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	331a      	adds	r3, #26
 801620a:	2100      	movs	r1, #0
 801620c:	4618      	mov	r0, r3
 801620e:	f7fe ff90 	bl	8015132 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016212:	79fb      	ldrb	r3, [r7, #7]
 8016214:	1e5a      	subs	r2, r3, #1
 8016216:	4613      	mov	r3, r2
 8016218:	005b      	lsls	r3, r3, #1
 801621a:	4413      	add	r3, r2
 801621c:	009b      	lsls	r3, r3, #2
 801621e:	4413      	add	r3, r2
 8016220:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016222:	2300      	movs	r3, #0
 8016224:	82fb      	strh	r3, [r7, #22]
 8016226:	2300      	movs	r3, #0
 8016228:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801622a:	8afb      	ldrh	r3, [r7, #22]
 801622c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016230:	4293      	cmp	r3, r2
 8016232:	d007      	beq.n	8016244 <put_lfn+0x6c>
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	1c5a      	adds	r2, r3, #1
 8016238:	61fa      	str	r2, [r7, #28]
 801623a:	005b      	lsls	r3, r3, #1
 801623c:	68fa      	ldr	r2, [r7, #12]
 801623e:	4413      	add	r3, r2
 8016240:	881b      	ldrh	r3, [r3, #0]
 8016242:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016244:	4a17      	ldr	r2, [pc, #92]	; (80162a4 <put_lfn+0xcc>)
 8016246:	69bb      	ldr	r3, [r7, #24]
 8016248:	4413      	add	r3, r2
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	461a      	mov	r2, r3
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	4413      	add	r3, r2
 8016252:	8afa      	ldrh	r2, [r7, #22]
 8016254:	4611      	mov	r1, r2
 8016256:	4618      	mov	r0, r3
 8016258:	f7fe ff6b 	bl	8015132 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801625c:	8afb      	ldrh	r3, [r7, #22]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d102      	bne.n	8016268 <put_lfn+0x90>
 8016262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016266:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016268:	69bb      	ldr	r3, [r7, #24]
 801626a:	3301      	adds	r3, #1
 801626c:	61bb      	str	r3, [r7, #24]
 801626e:	69bb      	ldr	r3, [r7, #24]
 8016270:	2b0c      	cmp	r3, #12
 8016272:	d9da      	bls.n	801622a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016274:	8afb      	ldrh	r3, [r7, #22]
 8016276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801627a:	4293      	cmp	r3, r2
 801627c:	d006      	beq.n	801628c <put_lfn+0xb4>
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	005b      	lsls	r3, r3, #1
 8016282:	68fa      	ldr	r2, [r7, #12]
 8016284:	4413      	add	r3, r2
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d103      	bne.n	8016294 <put_lfn+0xbc>
 801628c:	79fb      	ldrb	r3, [r7, #7]
 801628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016292:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	79fa      	ldrb	r2, [r7, #7]
 8016298:	701a      	strb	r2, [r3, #0]
}
 801629a:	bf00      	nop
 801629c:	3720      	adds	r7, #32
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	0801f5cc 	.word	0x0801f5cc

080162a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b08c      	sub	sp, #48	; 0x30
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
 80162b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80162b6:	220b      	movs	r2, #11
 80162b8:	68b9      	ldr	r1, [r7, #8]
 80162ba:	68f8      	ldr	r0, [r7, #12]
 80162bc:	f7fe ff80 	bl	80151c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	2b05      	cmp	r3, #5
 80162c4:	d92b      	bls.n	801631e <gen_numname+0x76>
		sr = seq;
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80162ca:	e022      	b.n	8016312 <gen_numname+0x6a>
			wc = *lfn++;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	1c9a      	adds	r2, r3, #2
 80162d0:	607a      	str	r2, [r7, #4]
 80162d2:	881b      	ldrh	r3, [r3, #0]
 80162d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80162d6:	2300      	movs	r3, #0
 80162d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80162da:	e017      	b.n	801630c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80162dc:	69fb      	ldr	r3, [r7, #28]
 80162de:	005a      	lsls	r2, r3, #1
 80162e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162e2:	f003 0301 	and.w	r3, r3, #1
 80162e6:	4413      	add	r3, r2
 80162e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80162ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162ec:	085b      	lsrs	r3, r3, #1
 80162ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d005      	beq.n	8016306 <gen_numname+0x5e>
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016300:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016304:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016308:	3301      	adds	r3, #1
 801630a:	62bb      	str	r3, [r7, #40]	; 0x28
 801630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801630e:	2b0f      	cmp	r3, #15
 8016310:	d9e4      	bls.n	80162dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	881b      	ldrh	r3, [r3, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d1d8      	bne.n	80162cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801631e:	2307      	movs	r3, #7
 8016320:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	b2db      	uxtb	r3, r3
 8016326:	f003 030f 	and.w	r3, r3, #15
 801632a:	b2db      	uxtb	r3, r3
 801632c:	3330      	adds	r3, #48	; 0x30
 801632e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016336:	2b39      	cmp	r3, #57	; 0x39
 8016338:	d904      	bls.n	8016344 <gen_numname+0x9c>
 801633a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801633e:	3307      	adds	r3, #7
 8016340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016346:	1e5a      	subs	r2, r3, #1
 8016348:	62ba      	str	r2, [r7, #40]	; 0x28
 801634a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801634e:	4413      	add	r3, r2
 8016350:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016354:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	091b      	lsrs	r3, r3, #4
 801635c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d1de      	bne.n	8016322 <gen_numname+0x7a>
	ns[i] = '~';
 8016364:	f107 0214 	add.w	r2, r7, #20
 8016368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636a:	4413      	add	r3, r2
 801636c:	227e      	movs	r2, #126	; 0x7e
 801636e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016370:	2300      	movs	r3, #0
 8016372:	627b      	str	r3, [r7, #36]	; 0x24
 8016374:	e002      	b.n	801637c <gen_numname+0xd4>
 8016376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016378:	3301      	adds	r3, #1
 801637a:	627b      	str	r3, [r7, #36]	; 0x24
 801637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016380:	429a      	cmp	r2, r3
 8016382:	d205      	bcs.n	8016390 <gen_numname+0xe8>
 8016384:	68fa      	ldr	r2, [r7, #12]
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	4413      	add	r3, r2
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b20      	cmp	r3, #32
 801638e:	d1f2      	bne.n	8016376 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016392:	2b07      	cmp	r3, #7
 8016394:	d808      	bhi.n	80163a8 <gen_numname+0x100>
 8016396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016398:	1c5a      	adds	r2, r3, #1
 801639a:	62ba      	str	r2, [r7, #40]	; 0x28
 801639c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80163a0:	4413      	add	r3, r2
 80163a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80163a6:	e000      	b.n	80163aa <gen_numname+0x102>
 80163a8:	2120      	movs	r1, #32
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	1c5a      	adds	r2, r3, #1
 80163ae:	627a      	str	r2, [r7, #36]	; 0x24
 80163b0:	68fa      	ldr	r2, [r7, #12]
 80163b2:	4413      	add	r3, r2
 80163b4:	460a      	mov	r2, r1
 80163b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80163b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ba:	2b07      	cmp	r3, #7
 80163bc:	d9e8      	bls.n	8016390 <gen_numname+0xe8>
}
 80163be:	bf00      	nop
 80163c0:	3730      	adds	r7, #48	; 0x30
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}

080163c6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80163c6:	b480      	push	{r7}
 80163c8:	b085      	sub	sp, #20
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80163ce:	2300      	movs	r3, #0
 80163d0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80163d2:	230b      	movs	r3, #11
 80163d4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80163d6:	7bfb      	ldrb	r3, [r7, #15]
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	0852      	lsrs	r2, r2, #1
 80163dc:	01db      	lsls	r3, r3, #7
 80163de:	4313      	orrs	r3, r2
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	1c59      	adds	r1, r3, #1
 80163e6:	6079      	str	r1, [r7, #4]
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	4413      	add	r3, r2
 80163ec:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	3b01      	subs	r3, #1
 80163f2:	60bb      	str	r3, [r7, #8]
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1ed      	bne.n	80163d6 <sum_sfn+0x10>
	return sum;
 80163fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3714      	adds	r7, #20
 8016400:	46bd      	mov	sp, r7
 8016402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016406:	4770      	bx	lr

08016408 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016416:	2100      	movs	r1, #0
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f7ff fca7 	bl	8015d6c <dir_sdi>
 801641e:	4603      	mov	r3, r0
 8016420:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016422:	7dfb      	ldrb	r3, [r7, #23]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <dir_find+0x24>
 8016428:	7dfb      	ldrb	r3, [r7, #23]
 801642a:	e0a9      	b.n	8016580 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801642c:	23ff      	movs	r3, #255	; 0xff
 801642e:	753b      	strb	r3, [r7, #20]
 8016430:	7d3b      	ldrb	r3, [r7, #20]
 8016432:	757b      	strb	r3, [r7, #21]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f04f 32ff 	mov.w	r2, #4294967295
 801643a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	69db      	ldr	r3, [r3, #28]
 8016440:	4619      	mov	r1, r3
 8016442:	6938      	ldr	r0, [r7, #16]
 8016444:	f7ff f91a 	bl	801567c <move_window>
 8016448:	4603      	mov	r3, r0
 801644a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801644c:	7dfb      	ldrb	r3, [r7, #23]
 801644e:	2b00      	cmp	r3, #0
 8016450:	f040 8090 	bne.w	8016574 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6a1b      	ldr	r3, [r3, #32]
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801645c:	7dbb      	ldrb	r3, [r7, #22]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d102      	bne.n	8016468 <dir_find+0x60>
 8016462:	2304      	movs	r3, #4
 8016464:	75fb      	strb	r3, [r7, #23]
 8016466:	e08a      	b.n	801657e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6a1b      	ldr	r3, [r3, #32]
 801646c:	330b      	adds	r3, #11
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016474:	73fb      	strb	r3, [r7, #15]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	7bfa      	ldrb	r2, [r7, #15]
 801647a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801647c:	7dbb      	ldrb	r3, [r7, #22]
 801647e:	2be5      	cmp	r3, #229	; 0xe5
 8016480:	d007      	beq.n	8016492 <dir_find+0x8a>
 8016482:	7bfb      	ldrb	r3, [r7, #15]
 8016484:	f003 0308 	and.w	r3, r3, #8
 8016488:	2b00      	cmp	r3, #0
 801648a:	d009      	beq.n	80164a0 <dir_find+0x98>
 801648c:	7bfb      	ldrb	r3, [r7, #15]
 801648e:	2b0f      	cmp	r3, #15
 8016490:	d006      	beq.n	80164a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016492:	23ff      	movs	r3, #255	; 0xff
 8016494:	757b      	strb	r3, [r7, #21]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f04f 32ff 	mov.w	r2, #4294967295
 801649c:	631a      	str	r2, [r3, #48]	; 0x30
 801649e:	e05e      	b.n	801655e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80164a0:	7bfb      	ldrb	r3, [r7, #15]
 80164a2:	2b0f      	cmp	r3, #15
 80164a4:	d136      	bne.n	8016514 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80164ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d154      	bne.n	801655e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80164b4:	7dbb      	ldrb	r3, [r7, #22]
 80164b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00d      	beq.n	80164da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6a1b      	ldr	r3, [r3, #32]
 80164c2:	7b5b      	ldrb	r3, [r3, #13]
 80164c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80164c6:	7dbb      	ldrb	r3, [r7, #22]
 80164c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80164cc:	75bb      	strb	r3, [r7, #22]
 80164ce:	7dbb      	ldrb	r3, [r7, #22]
 80164d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	695a      	ldr	r2, [r3, #20]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80164da:	7dba      	ldrb	r2, [r7, #22]
 80164dc:	7d7b      	ldrb	r3, [r7, #21]
 80164de:	429a      	cmp	r2, r3
 80164e0:	d115      	bne.n	801650e <dir_find+0x106>
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6a1b      	ldr	r3, [r3, #32]
 80164e6:	330d      	adds	r3, #13
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	7d3a      	ldrb	r2, [r7, #20]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d10e      	bne.n	801650e <dir_find+0x106>
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	68da      	ldr	r2, [r3, #12]
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6a1b      	ldr	r3, [r3, #32]
 80164f8:	4619      	mov	r1, r3
 80164fa:	4610      	mov	r0, r2
 80164fc:	f7ff fdfc 	bl	80160f8 <cmp_lfn>
 8016500:	4603      	mov	r3, r0
 8016502:	2b00      	cmp	r3, #0
 8016504:	d003      	beq.n	801650e <dir_find+0x106>
 8016506:	7d7b      	ldrb	r3, [r7, #21]
 8016508:	3b01      	subs	r3, #1
 801650a:	b2db      	uxtb	r3, r3
 801650c:	e000      	b.n	8016510 <dir_find+0x108>
 801650e:	23ff      	movs	r3, #255	; 0xff
 8016510:	757b      	strb	r3, [r7, #21]
 8016512:	e024      	b.n	801655e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016514:	7d7b      	ldrb	r3, [r7, #21]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d109      	bne.n	801652e <dir_find+0x126>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	6a1b      	ldr	r3, [r3, #32]
 801651e:	4618      	mov	r0, r3
 8016520:	f7ff ff51 	bl	80163c6 <sum_sfn>
 8016524:	4603      	mov	r3, r0
 8016526:	461a      	mov	r2, r3
 8016528:	7d3b      	ldrb	r3, [r7, #20]
 801652a:	4293      	cmp	r3, r2
 801652c:	d024      	beq.n	8016578 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016534:	f003 0301 	and.w	r3, r3, #1
 8016538:	2b00      	cmp	r3, #0
 801653a:	d10a      	bne.n	8016552 <dir_find+0x14a>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6a18      	ldr	r0, [r3, #32]
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	3324      	adds	r3, #36	; 0x24
 8016544:	220b      	movs	r2, #11
 8016546:	4619      	mov	r1, r3
 8016548:	f7fe fe75 	bl	8015236 <mem_cmp>
 801654c:	4603      	mov	r3, r0
 801654e:	2b00      	cmp	r3, #0
 8016550:	d014      	beq.n	801657c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016552:	23ff      	movs	r3, #255	; 0xff
 8016554:	757b      	strb	r3, [r7, #21]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f04f 32ff 	mov.w	r2, #4294967295
 801655c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801655e:	2100      	movs	r1, #0
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7ff fc7e 	bl	8015e62 <dir_next>
 8016566:	4603      	mov	r3, r0
 8016568:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801656a:	7dfb      	ldrb	r3, [r7, #23]
 801656c:	2b00      	cmp	r3, #0
 801656e:	f43f af65 	beq.w	801643c <dir_find+0x34>
 8016572:	e004      	b.n	801657e <dir_find+0x176>
		if (res != FR_OK) break;
 8016574:	bf00      	nop
 8016576:	e002      	b.n	801657e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016578:	bf00      	nop
 801657a:	e000      	b.n	801657e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801657c:	bf00      	nop

	return res;
 801657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016580:	4618      	mov	r0, r3
 8016582:	3718      	adds	r7, #24
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b08c      	sub	sp, #48	; 0x30
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801659c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d001      	beq.n	80165a8 <dir_register+0x20>
 80165a4:	2306      	movs	r3, #6
 80165a6:	e0e0      	b.n	801676a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80165a8:	2300      	movs	r3, #0
 80165aa:	627b      	str	r3, [r7, #36]	; 0x24
 80165ac:	e002      	b.n	80165b4 <dir_register+0x2c>
 80165ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b0:	3301      	adds	r3, #1
 80165b2:	627b      	str	r3, [r7, #36]	; 0x24
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	68da      	ldr	r2, [r3, #12]
 80165b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	4413      	add	r3, r2
 80165be:	881b      	ldrh	r3, [r3, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d1f4      	bne.n	80165ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80165ca:	f107 030c 	add.w	r3, r7, #12
 80165ce:	220c      	movs	r2, #12
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7fe fdf5 	bl	80151c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80165d6:	7dfb      	ldrb	r3, [r7, #23]
 80165d8:	f003 0301 	and.w	r3, r3, #1
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d032      	beq.n	8016646 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2240      	movs	r2, #64	; 0x40
 80165e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80165e8:	2301      	movs	r3, #1
 80165ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80165ec:	e016      	b.n	801661c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80165f4:	69fb      	ldr	r3, [r7, #28]
 80165f6:	68da      	ldr	r2, [r3, #12]
 80165f8:	f107 010c 	add.w	r1, r7, #12
 80165fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fe:	f7ff fe53 	bl	80162a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7ff ff00 	bl	8016408 <dir_find>
 8016608:	4603      	mov	r3, r0
 801660a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801660e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016612:	2b00      	cmp	r3, #0
 8016614:	d106      	bne.n	8016624 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8016616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016618:	3301      	adds	r3, #1
 801661a:	62bb      	str	r3, [r7, #40]	; 0x28
 801661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661e:	2b63      	cmp	r3, #99	; 0x63
 8016620:	d9e5      	bls.n	80165ee <dir_register+0x66>
 8016622:	e000      	b.n	8016626 <dir_register+0x9e>
			if (res != FR_OK) break;
 8016624:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8016626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016628:	2b64      	cmp	r3, #100	; 0x64
 801662a:	d101      	bne.n	8016630 <dir_register+0xa8>
 801662c:	2307      	movs	r3, #7
 801662e:	e09c      	b.n	801676a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8016630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016634:	2b04      	cmp	r3, #4
 8016636:	d002      	beq.n	801663e <dir_register+0xb6>
 8016638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801663c:	e095      	b.n	801676a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801663e:	7dfa      	ldrb	r2, [r7, #23]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8016646:	7dfb      	ldrb	r3, [r7, #23]
 8016648:	f003 0302 	and.w	r3, r3, #2
 801664c:	2b00      	cmp	r3, #0
 801664e:	d007      	beq.n	8016660 <dir_register+0xd8>
 8016650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016652:	330c      	adds	r3, #12
 8016654:	4a47      	ldr	r2, [pc, #284]	; (8016774 <dir_register+0x1ec>)
 8016656:	fba2 2303 	umull	r2, r3, r2, r3
 801665a:	089b      	lsrs	r3, r3, #2
 801665c:	3301      	adds	r3, #1
 801665e:	e000      	b.n	8016662 <dir_register+0xda>
 8016660:	2301      	movs	r3, #1
 8016662:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016664:	6a39      	ldr	r1, [r7, #32]
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7ff fcc0 	bl	8015fec <dir_alloc>
 801666c:	4603      	mov	r3, r0
 801666e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016676:	2b00      	cmp	r3, #0
 8016678:	d148      	bne.n	801670c <dir_register+0x184>
 801667a:	6a3b      	ldr	r3, [r7, #32]
 801667c:	3b01      	subs	r3, #1
 801667e:	623b      	str	r3, [r7, #32]
 8016680:	6a3b      	ldr	r3, [r7, #32]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d042      	beq.n	801670c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	695a      	ldr	r2, [r3, #20]
 801668a:	6a3b      	ldr	r3, [r7, #32]
 801668c:	015b      	lsls	r3, r3, #5
 801668e:	1ad3      	subs	r3, r2, r3
 8016690:	4619      	mov	r1, r3
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f7ff fb6a 	bl	8015d6c <dir_sdi>
 8016698:	4603      	mov	r3, r0
 801669a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801669e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d132      	bne.n	801670c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	3324      	adds	r3, #36	; 0x24
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7ff fe8b 	bl	80163c6 <sum_sfn>
 80166b0:	4603      	mov	r3, r0
 80166b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	69db      	ldr	r3, [r3, #28]
 80166b8:	4619      	mov	r1, r3
 80166ba:	69f8      	ldr	r0, [r7, #28]
 80166bc:	f7fe ffde 	bl	801567c <move_window>
 80166c0:	4603      	mov	r3, r0
 80166c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80166c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d11d      	bne.n	801670a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	68d8      	ldr	r0, [r3, #12]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6a19      	ldr	r1, [r3, #32]
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	b2da      	uxtb	r2, r3
 80166da:	7efb      	ldrb	r3, [r7, #27]
 80166dc:	f7ff fd7c 	bl	80161d8 <put_lfn>
				fs->wflag = 1;
 80166e0:	69fb      	ldr	r3, [r7, #28]
 80166e2:	2201      	movs	r2, #1
 80166e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80166e6:	2100      	movs	r1, #0
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7ff fbba 	bl	8015e62 <dir_next>
 80166ee:	4603      	mov	r3, r0
 80166f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80166f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d107      	bne.n	801670c <dir_register+0x184>
 80166fc:	6a3b      	ldr	r3, [r7, #32]
 80166fe:	3b01      	subs	r3, #1
 8016700:	623b      	str	r3, [r7, #32]
 8016702:	6a3b      	ldr	r3, [r7, #32]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d1d5      	bne.n	80166b4 <dir_register+0x12c>
 8016708:	e000      	b.n	801670c <dir_register+0x184>
				if (res != FR_OK) break;
 801670a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801670c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016710:	2b00      	cmp	r3, #0
 8016712:	d128      	bne.n	8016766 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	69db      	ldr	r3, [r3, #28]
 8016718:	4619      	mov	r1, r3
 801671a:	69f8      	ldr	r0, [r7, #28]
 801671c:	f7fe ffae 	bl	801567c <move_window>
 8016720:	4603      	mov	r3, r0
 8016722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801672a:	2b00      	cmp	r3, #0
 801672c:	d11b      	bne.n	8016766 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6a1b      	ldr	r3, [r3, #32]
 8016732:	2220      	movs	r2, #32
 8016734:	2100      	movs	r1, #0
 8016736:	4618      	mov	r0, r3
 8016738:	f7fe fd63 	bl	8015202 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6a18      	ldr	r0, [r3, #32]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	3324      	adds	r3, #36	; 0x24
 8016744:	220b      	movs	r2, #11
 8016746:	4619      	mov	r1, r3
 8016748:	f7fe fd3a 	bl	80151c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6a1b      	ldr	r3, [r3, #32]
 8016756:	330c      	adds	r3, #12
 8016758:	f002 0218 	and.w	r2, r2, #24
 801675c:	b2d2      	uxtb	r2, r2
 801675e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	2201      	movs	r2, #1
 8016764:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801676a:	4618      	mov	r0, r3
 801676c:	3730      	adds	r7, #48	; 0x30
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	4ec4ec4f 	.word	0x4ec4ec4f

08016778 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b08a      	sub	sp, #40	; 0x28
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	613b      	str	r3, [r7, #16]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	2300      	movs	r3, #0
 8016792:	617b      	str	r3, [r7, #20]
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8016798:	69bb      	ldr	r3, [r7, #24]
 801679a:	1c5a      	adds	r2, r3, #1
 801679c:	61ba      	str	r2, [r7, #24]
 801679e:	693a      	ldr	r2, [r7, #16]
 80167a0:	4413      	add	r3, r2
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80167a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167a8:	2b1f      	cmp	r3, #31
 80167aa:	d940      	bls.n	801682e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80167ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167ae:	2b2f      	cmp	r3, #47	; 0x2f
 80167b0:	d006      	beq.n	80167c0 <create_name+0x48>
 80167b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167b4:	2b5c      	cmp	r3, #92	; 0x5c
 80167b6:	d110      	bne.n	80167da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80167b8:	e002      	b.n	80167c0 <create_name+0x48>
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	3301      	adds	r3, #1
 80167be:	61bb      	str	r3, [r7, #24]
 80167c0:	693a      	ldr	r2, [r7, #16]
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	4413      	add	r3, r2
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	2b2f      	cmp	r3, #47	; 0x2f
 80167ca:	d0f6      	beq.n	80167ba <create_name+0x42>
 80167cc:	693a      	ldr	r2, [r7, #16]
 80167ce:	69bb      	ldr	r3, [r7, #24]
 80167d0:	4413      	add	r3, r2
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b5c      	cmp	r3, #92	; 0x5c
 80167d6:	d0f0      	beq.n	80167ba <create_name+0x42>
			break;
 80167d8:	e02a      	b.n	8016830 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	2bfe      	cmp	r3, #254	; 0xfe
 80167de:	d901      	bls.n	80167e4 <create_name+0x6c>
 80167e0:	2306      	movs	r3, #6
 80167e2:	e177      	b.n	8016ad4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80167e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80167ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167ec:	2101      	movs	r1, #1
 80167ee:	4618      	mov	r0, r3
 80167f0:	f001 fd94 	bl	801831c <ff_convert>
 80167f4:	4603      	mov	r3, r0
 80167f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80167f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d101      	bne.n	8016802 <create_name+0x8a>
 80167fe:	2306      	movs	r3, #6
 8016800:	e168      	b.n	8016ad4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016804:	2b7f      	cmp	r3, #127	; 0x7f
 8016806:	d809      	bhi.n	801681c <create_name+0xa4>
 8016808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801680a:	4619      	mov	r1, r3
 801680c:	48b3      	ldr	r0, [pc, #716]	; (8016adc <create_name+0x364>)
 801680e:	f7fe fd39 	bl	8015284 <chk_chr>
 8016812:	4603      	mov	r3, r0
 8016814:	2b00      	cmp	r3, #0
 8016816:	d001      	beq.n	801681c <create_name+0xa4>
 8016818:	2306      	movs	r3, #6
 801681a:	e15b      	b.n	8016ad4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	1c5a      	adds	r2, r3, #1
 8016820:	617a      	str	r2, [r7, #20]
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	4413      	add	r3, r2
 8016828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801682a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801682c:	e7b4      	b.n	8016798 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801682e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8016830:	693a      	ldr	r2, [r7, #16]
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	441a      	add	r2, r3
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801683a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801683c:	2b1f      	cmp	r3, #31
 801683e:	d801      	bhi.n	8016844 <create_name+0xcc>
 8016840:	2304      	movs	r3, #4
 8016842:	e000      	b.n	8016846 <create_name+0xce>
 8016844:	2300      	movs	r3, #0
 8016846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801684a:	e011      	b.n	8016870 <create_name+0xf8>
		w = lfn[di - 1];
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016852:	3b01      	subs	r3, #1
 8016854:	005b      	lsls	r3, r3, #1
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	4413      	add	r3, r2
 801685a:	881b      	ldrh	r3, [r3, #0]
 801685c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801685e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016860:	2b20      	cmp	r3, #32
 8016862:	d002      	beq.n	801686a <create_name+0xf2>
 8016864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016866:	2b2e      	cmp	r3, #46	; 0x2e
 8016868:	d106      	bne.n	8016878 <create_name+0x100>
		di--;
 801686a:	697b      	ldr	r3, [r7, #20]
 801686c:	3b01      	subs	r3, #1
 801686e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d1ea      	bne.n	801684c <create_name+0xd4>
 8016876:	e000      	b.n	801687a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016878:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801687a:	697b      	ldr	r3, [r7, #20]
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	68fa      	ldr	r2, [r7, #12]
 8016880:	4413      	add	r3, r2
 8016882:	2200      	movs	r2, #0
 8016884:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d101      	bne.n	8016890 <create_name+0x118>
 801688c:	2306      	movs	r3, #6
 801688e:	e121      	b.n	8016ad4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	3324      	adds	r3, #36	; 0x24
 8016894:	220b      	movs	r2, #11
 8016896:	2120      	movs	r1, #32
 8016898:	4618      	mov	r0, r3
 801689a:	f7fe fcb2 	bl	8015202 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801689e:	2300      	movs	r3, #0
 80168a0:	61bb      	str	r3, [r7, #24]
 80168a2:	e002      	b.n	80168aa <create_name+0x132>
 80168a4:	69bb      	ldr	r3, [r7, #24]
 80168a6:	3301      	adds	r3, #1
 80168a8:	61bb      	str	r3, [r7, #24]
 80168aa:	69bb      	ldr	r3, [r7, #24]
 80168ac:	005b      	lsls	r3, r3, #1
 80168ae:	68fa      	ldr	r2, [r7, #12]
 80168b0:	4413      	add	r3, r2
 80168b2:	881b      	ldrh	r3, [r3, #0]
 80168b4:	2b20      	cmp	r3, #32
 80168b6:	d0f5      	beq.n	80168a4 <create_name+0x12c>
 80168b8:	69bb      	ldr	r3, [r7, #24]
 80168ba:	005b      	lsls	r3, r3, #1
 80168bc:	68fa      	ldr	r2, [r7, #12]
 80168be:	4413      	add	r3, r2
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	2b2e      	cmp	r3, #46	; 0x2e
 80168c4:	d0ee      	beq.n	80168a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80168c6:	69bb      	ldr	r3, [r7, #24]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d009      	beq.n	80168e0 <create_name+0x168>
 80168cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168d0:	f043 0303 	orr.w	r3, r3, #3
 80168d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80168d8:	e002      	b.n	80168e0 <create_name+0x168>
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	3b01      	subs	r3, #1
 80168de:	617b      	str	r3, [r7, #20]
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d009      	beq.n	80168fa <create_name+0x182>
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80168ec:	3b01      	subs	r3, #1
 80168ee:	005b      	lsls	r3, r3, #1
 80168f0:	68fa      	ldr	r2, [r7, #12]
 80168f2:	4413      	add	r3, r2
 80168f4:	881b      	ldrh	r3, [r3, #0]
 80168f6:	2b2e      	cmp	r3, #46	; 0x2e
 80168f8:	d1ef      	bne.n	80168da <create_name+0x162>

	i = b = 0; ni = 8;
 80168fa:	2300      	movs	r3, #0
 80168fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016900:	2300      	movs	r3, #0
 8016902:	623b      	str	r3, [r7, #32]
 8016904:	2308      	movs	r3, #8
 8016906:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	1c5a      	adds	r2, r3, #1
 801690c:	61ba      	str	r2, [r7, #24]
 801690e:	005b      	lsls	r3, r3, #1
 8016910:	68fa      	ldr	r2, [r7, #12]
 8016912:	4413      	add	r3, r2
 8016914:	881b      	ldrh	r3, [r3, #0]
 8016916:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801691a:	2b00      	cmp	r3, #0
 801691c:	f000 8090 	beq.w	8016a40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016922:	2b20      	cmp	r3, #32
 8016924:	d006      	beq.n	8016934 <create_name+0x1bc>
 8016926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016928:	2b2e      	cmp	r3, #46	; 0x2e
 801692a:	d10a      	bne.n	8016942 <create_name+0x1ca>
 801692c:	69ba      	ldr	r2, [r7, #24]
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	429a      	cmp	r2, r3
 8016932:	d006      	beq.n	8016942 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016938:	f043 0303 	orr.w	r3, r3, #3
 801693c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016940:	e07d      	b.n	8016a3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016942:	6a3a      	ldr	r2, [r7, #32]
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	429a      	cmp	r2, r3
 8016948:	d203      	bcs.n	8016952 <create_name+0x1da>
 801694a:	69ba      	ldr	r2, [r7, #24]
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	429a      	cmp	r2, r3
 8016950:	d123      	bne.n	801699a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	2b0b      	cmp	r3, #11
 8016956:	d106      	bne.n	8016966 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801695c:	f043 0303 	orr.w	r3, r3, #3
 8016960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016964:	e06f      	b.n	8016a46 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016966:	69ba      	ldr	r2, [r7, #24]
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	429a      	cmp	r2, r3
 801696c:	d005      	beq.n	801697a <create_name+0x202>
 801696e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016972:	f043 0303 	orr.w	r3, r3, #3
 8016976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801697a:	69ba      	ldr	r2, [r7, #24]
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	429a      	cmp	r2, r3
 8016980:	d860      	bhi.n	8016a44 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	61bb      	str	r3, [r7, #24]
 8016986:	2308      	movs	r3, #8
 8016988:	623b      	str	r3, [r7, #32]
 801698a:	230b      	movs	r3, #11
 801698c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801698e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016998:	e051      	b.n	8016a3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801699a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801699c:	2b7f      	cmp	r3, #127	; 0x7f
 801699e:	d914      	bls.n	80169ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80169a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a2:	2100      	movs	r1, #0
 80169a4:	4618      	mov	r0, r3
 80169a6:	f001 fcb9 	bl	801831c <ff_convert>
 80169aa:	4603      	mov	r3, r0
 80169ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80169ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d004      	beq.n	80169be <create_name+0x246>
 80169b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169b6:	3b80      	subs	r3, #128	; 0x80
 80169b8:	4a49      	ldr	r2, [pc, #292]	; (8016ae0 <create_name+0x368>)
 80169ba:	5cd3      	ldrb	r3, [r2, r3]
 80169bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80169be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169c2:	f043 0302 	orr.w	r3, r3, #2
 80169c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80169ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d007      	beq.n	80169e0 <create_name+0x268>
 80169d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169d2:	4619      	mov	r1, r3
 80169d4:	4843      	ldr	r0, [pc, #268]	; (8016ae4 <create_name+0x36c>)
 80169d6:	f7fe fc55 	bl	8015284 <chk_chr>
 80169da:	4603      	mov	r3, r0
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d008      	beq.n	80169f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80169e0:	235f      	movs	r3, #95	; 0x5f
 80169e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80169e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169e8:	f043 0303 	orr.w	r3, r3, #3
 80169ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80169f0:	e01b      	b.n	8016a2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80169f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169f4:	2b40      	cmp	r3, #64	; 0x40
 80169f6:	d909      	bls.n	8016a0c <create_name+0x294>
 80169f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169fa:	2b5a      	cmp	r3, #90	; 0x5a
 80169fc:	d806      	bhi.n	8016a0c <create_name+0x294>
					b |= 2;
 80169fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a02:	f043 0302 	orr.w	r3, r3, #2
 8016a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a0a:	e00e      	b.n	8016a2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a0e:	2b60      	cmp	r3, #96	; 0x60
 8016a10:	d90b      	bls.n	8016a2a <create_name+0x2b2>
 8016a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a14:	2b7a      	cmp	r3, #122	; 0x7a
 8016a16:	d808      	bhi.n	8016a2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016a18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a1c:	f043 0301 	orr.w	r3, r3, #1
 8016a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a26:	3b20      	subs	r3, #32
 8016a28:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016a2a:	6a3b      	ldr	r3, [r7, #32]
 8016a2c:	1c5a      	adds	r2, r3, #1
 8016a2e:	623a      	str	r2, [r7, #32]
 8016a30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a32:	b2d1      	uxtb	r1, r2
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	4413      	add	r3, r2
 8016a38:	460a      	mov	r2, r1
 8016a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016a3e:	e763      	b.n	8016908 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016a40:	bf00      	nop
 8016a42:	e000      	b.n	8016a46 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8016a44:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016a4c:	2be5      	cmp	r3, #229	; 0xe5
 8016a4e:	d103      	bne.n	8016a58 <create_name+0x2e0>
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2205      	movs	r2, #5
 8016a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	2b08      	cmp	r3, #8
 8016a5c:	d104      	bne.n	8016a68 <create_name+0x2f0>
 8016a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a6c:	f003 030c 	and.w	r3, r3, #12
 8016a70:	2b0c      	cmp	r3, #12
 8016a72:	d005      	beq.n	8016a80 <create_name+0x308>
 8016a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a78:	f003 0303 	and.w	r3, r3, #3
 8016a7c:	2b03      	cmp	r3, #3
 8016a7e:	d105      	bne.n	8016a8c <create_name+0x314>
 8016a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a84:	f043 0302 	orr.w	r3, r3, #2
 8016a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a90:	f003 0302 	and.w	r3, r3, #2
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d117      	bne.n	8016ac8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a9c:	f003 0303 	and.w	r3, r3, #3
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	d105      	bne.n	8016ab0 <create_name+0x338>
 8016aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016aa8:	f043 0310 	orr.w	r3, r3, #16
 8016aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ab4:	f003 030c 	and.w	r3, r3, #12
 8016ab8:	2b04      	cmp	r3, #4
 8016aba:	d105      	bne.n	8016ac8 <create_name+0x350>
 8016abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ac0:	f043 0308 	orr.w	r3, r3, #8
 8016ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016ace:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016ad2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3728      	adds	r7, #40	; 0x28
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}
 8016adc:	0801f4b4 	.word	0x0801f4b4
 8016ae0:	0801f54c 	.word	0x0801f54c
 8016ae4:	0801f4c0 	.word	0x0801f4c0

08016ae8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b086      	sub	sp, #24
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016afc:	e002      	b.n	8016b04 <follow_path+0x1c>
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	3301      	adds	r3, #1
 8016b02:	603b      	str	r3, [r7, #0]
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	2b2f      	cmp	r3, #47	; 0x2f
 8016b0a:	d0f8      	beq.n	8016afe <follow_path+0x16>
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	2b5c      	cmp	r3, #92	; 0x5c
 8016b12:	d0f4      	beq.n	8016afe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	2200      	movs	r2, #0
 8016b18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	2b1f      	cmp	r3, #31
 8016b20:	d80a      	bhi.n	8016b38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2280      	movs	r2, #128	; 0x80
 8016b26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016b2a:	2100      	movs	r1, #0
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f7ff f91d 	bl	8015d6c <dir_sdi>
 8016b32:	4603      	mov	r3, r0
 8016b34:	75fb      	strb	r3, [r7, #23]
 8016b36:	e043      	b.n	8016bc0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016b38:	463b      	mov	r3, r7
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f7ff fe1b 	bl	8016778 <create_name>
 8016b42:	4603      	mov	r3, r0
 8016b44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016b46:	7dfb      	ldrb	r3, [r7, #23]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d134      	bne.n	8016bb6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f7ff fc5b 	bl	8016408 <dir_find>
 8016b52:	4603      	mov	r3, r0
 8016b54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016b5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016b5e:	7dfb      	ldrb	r3, [r7, #23]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d00a      	beq.n	8016b7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016b64:	7dfb      	ldrb	r3, [r7, #23]
 8016b66:	2b04      	cmp	r3, #4
 8016b68:	d127      	bne.n	8016bba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016b6a:	7afb      	ldrb	r3, [r7, #11]
 8016b6c:	f003 0304 	and.w	r3, r3, #4
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d122      	bne.n	8016bba <follow_path+0xd2>
 8016b74:	2305      	movs	r3, #5
 8016b76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016b78:	e01f      	b.n	8016bba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016b7a:	7afb      	ldrb	r3, [r7, #11]
 8016b7c:	f003 0304 	and.w	r3, r3, #4
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d11c      	bne.n	8016bbe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	799b      	ldrb	r3, [r3, #6]
 8016b88:	f003 0310 	and.w	r3, r3, #16
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d102      	bne.n	8016b96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016b90:	2305      	movs	r3, #5
 8016b92:	75fb      	strb	r3, [r7, #23]
 8016b94:	e014      	b.n	8016bc0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	695b      	ldr	r3, [r3, #20]
 8016ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ba4:	4413      	add	r3, r2
 8016ba6:	4619      	mov	r1, r3
 8016ba8:	68f8      	ldr	r0, [r7, #12]
 8016baa:	f7ff fa66 	bl	801607a <ld_clust>
 8016bae:	4602      	mov	r2, r0
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016bb4:	e7c0      	b.n	8016b38 <follow_path+0x50>
			if (res != FR_OK) break;
 8016bb6:	bf00      	nop
 8016bb8:	e002      	b.n	8016bc0 <follow_path+0xd8>
				break;
 8016bba:	bf00      	nop
 8016bbc:	e000      	b.n	8016bc0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016bbe:	bf00      	nop
			}
		}
	}

	return res;
 8016bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3718      	adds	r7, #24
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016bca:	b480      	push	{r7}
 8016bcc:	b087      	sub	sp, #28
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d031      	beq.n	8016c44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	617b      	str	r3, [r7, #20]
 8016be6:	e002      	b.n	8016bee <get_ldnumber+0x24>
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	3301      	adds	r3, #1
 8016bec:	617b      	str	r3, [r7, #20]
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	2b1f      	cmp	r3, #31
 8016bf4:	d903      	bls.n	8016bfe <get_ldnumber+0x34>
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	781b      	ldrb	r3, [r3, #0]
 8016bfa:	2b3a      	cmp	r3, #58	; 0x3a
 8016bfc:	d1f4      	bne.n	8016be8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	2b3a      	cmp	r3, #58	; 0x3a
 8016c04:	d11c      	bne.n	8016c40 <get_ldnumber+0x76>
			tp = *path;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	1c5a      	adds	r2, r3, #1
 8016c10:	60fa      	str	r2, [r7, #12]
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	3b30      	subs	r3, #48	; 0x30
 8016c16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	2b09      	cmp	r3, #9
 8016c1c:	d80e      	bhi.n	8016c3c <get_ldnumber+0x72>
 8016c1e:	68fa      	ldr	r2, [r7, #12]
 8016c20:	697b      	ldr	r3, [r7, #20]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d10a      	bne.n	8016c3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d107      	bne.n	8016c3c <get_ldnumber+0x72>
					vol = (int)i;
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	3301      	adds	r3, #1
 8016c34:	617b      	str	r3, [r7, #20]
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	697a      	ldr	r2, [r7, #20]
 8016c3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	e002      	b.n	8016c46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016c40:	2300      	movs	r3, #0
 8016c42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016c44:	693b      	ldr	r3, [r7, #16]
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	371c      	adds	r7, #28
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr
	...

08016c54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2200      	movs	r2, #0
 8016c62:	70da      	strb	r2, [r3, #3]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f04f 32ff 	mov.w	r2, #4294967295
 8016c6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016c6c:	6839      	ldr	r1, [r7, #0]
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f7fe fd04 	bl	801567c <move_window>
 8016c74:	4603      	mov	r3, r0
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d001      	beq.n	8016c7e <check_fs+0x2a>
 8016c7a:	2304      	movs	r3, #4
 8016c7c:	e038      	b.n	8016cf0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	3338      	adds	r3, #56	; 0x38
 8016c82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7fe fa18 	bl	80150bc <ld_word>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	461a      	mov	r2, r3
 8016c90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d001      	beq.n	8016c9c <check_fs+0x48>
 8016c98:	2303      	movs	r3, #3
 8016c9a:	e029      	b.n	8016cf0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ca2:	2be9      	cmp	r3, #233	; 0xe9
 8016ca4:	d009      	beq.n	8016cba <check_fs+0x66>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cac:	2beb      	cmp	r3, #235	; 0xeb
 8016cae:	d11e      	bne.n	8016cee <check_fs+0x9a>
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016cb6:	2b90      	cmp	r3, #144	; 0x90
 8016cb8:	d119      	bne.n	8016cee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	3338      	adds	r3, #56	; 0x38
 8016cbe:	3336      	adds	r3, #54	; 0x36
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe fa13 	bl	80150ec <ld_dword>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016ccc:	4a0a      	ldr	r2, [pc, #40]	; (8016cf8 <check_fs+0xa4>)
 8016cce:	4293      	cmp	r3, r2
 8016cd0:	d101      	bne.n	8016cd6 <check_fs+0x82>
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	e00c      	b.n	8016cf0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	3338      	adds	r3, #56	; 0x38
 8016cda:	3352      	adds	r3, #82	; 0x52
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fe fa05 	bl	80150ec <ld_dword>
 8016ce2:	4602      	mov	r2, r0
 8016ce4:	4b05      	ldr	r3, [pc, #20]	; (8016cfc <check_fs+0xa8>)
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d101      	bne.n	8016cee <check_fs+0x9a>
 8016cea:	2300      	movs	r3, #0
 8016cec:	e000      	b.n	8016cf0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016cee:	2302      	movs	r3, #2
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3708      	adds	r7, #8
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}
 8016cf8:	00544146 	.word	0x00544146
 8016cfc:	33544146 	.word	0x33544146

08016d00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b096      	sub	sp, #88	; 0x58
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	2200      	movs	r2, #0
 8016d12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f7ff ff58 	bl	8016bca <get_ldnumber>
 8016d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	da01      	bge.n	8016d26 <find_volume+0x26>
 8016d22:	230b      	movs	r3, #11
 8016d24:	e236      	b.n	8017194 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016d26:	4aac      	ldr	r2, [pc, #688]	; (8016fd8 <find_volume+0x2d8>)
 8016d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d101      	bne.n	8016d3a <find_volume+0x3a>
 8016d36:	230c      	movs	r3, #12
 8016d38:	e22c      	b.n	8017194 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8016d3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d3c:	f7fe fabd 	bl	80152ba <lock_fs>
 8016d40:	4603      	mov	r3, r0
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d101      	bne.n	8016d4a <find_volume+0x4a>
 8016d46:	230f      	movs	r3, #15
 8016d48:	e224      	b.n	8017194 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016d50:	79fb      	ldrb	r3, [r7, #7]
 8016d52:	f023 0301 	bic.w	r3, r3, #1
 8016d56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d01a      	beq.n	8016d96 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8016d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d62:	785b      	ldrb	r3, [r3, #1]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7fe f90b 	bl	8014f80 <disk_status>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d74:	f003 0301 	and.w	r3, r3, #1
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d10c      	bne.n	8016d96 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016d7c:	79fb      	ldrb	r3, [r7, #7]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d007      	beq.n	8016d92 <find_volume+0x92>
 8016d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d86:	f003 0304 	and.w	r3, r3, #4
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d001      	beq.n	8016d92 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8016d8e:	230a      	movs	r3, #10
 8016d90:	e200      	b.n	8017194 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8016d92:	2300      	movs	r3, #0
 8016d94:	e1fe      	b.n	8017194 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d98:	2200      	movs	r2, #0
 8016d9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d9e:	b2da      	uxtb	r2, r3
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da6:	785b      	ldrb	r3, [r3, #1]
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fe f903 	bl	8014fb4 <disk_initialize>
 8016dae:	4603      	mov	r3, r0
 8016db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016db8:	f003 0301 	and.w	r3, r3, #1
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d001      	beq.n	8016dc4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016dc0:	2303      	movs	r3, #3
 8016dc2:	e1e7      	b.n	8017194 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016dc4:	79fb      	ldrb	r3, [r7, #7]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d007      	beq.n	8016dda <find_volume+0xda>
 8016dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016dce:	f003 0304 	and.w	r3, r3, #4
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d001      	beq.n	8016dda <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8016dd6:	230a      	movs	r3, #10
 8016dd8:	e1dc      	b.n	8017194 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016de2:	f7ff ff37 	bl	8016c54 <check_fs>
 8016de6:	4603      	mov	r3, r0
 8016de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d14b      	bne.n	8016e8c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016df4:	2300      	movs	r3, #0
 8016df6:	643b      	str	r3, [r7, #64]	; 0x40
 8016df8:	e01f      	b.n	8016e3a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dfc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e02:	011b      	lsls	r3, r3, #4
 8016e04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016e08:	4413      	add	r3, r2
 8016e0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e0e:	3304      	adds	r3, #4
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d006      	beq.n	8016e24 <find_volume+0x124>
 8016e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e18:	3308      	adds	r3, #8
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7fe f966 	bl	80150ec <ld_dword>
 8016e20:	4602      	mov	r2, r0
 8016e22:	e000      	b.n	8016e26 <find_volume+0x126>
 8016e24:	2200      	movs	r2, #0
 8016e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e28:	009b      	lsls	r3, r3, #2
 8016e2a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016e2e:	440b      	add	r3, r1
 8016e30:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e36:	3301      	adds	r3, #1
 8016e38:	643b      	str	r3, [r7, #64]	; 0x40
 8016e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e3c:	2b03      	cmp	r3, #3
 8016e3e:	d9dc      	bls.n	8016dfa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016e40:	2300      	movs	r3, #0
 8016e42:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d002      	beq.n	8016e50 <find_volume+0x150>
 8016e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e4c:	3b01      	subs	r3, #1
 8016e4e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016e58:	4413      	add	r3, r2
 8016e5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016e5e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d005      	beq.n	8016e72 <find_volume+0x172>
 8016e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016e68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e6a:	f7ff fef3 	bl	8016c54 <check_fs>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	e000      	b.n	8016e74 <find_volume+0x174>
 8016e72:	2303      	movs	r3, #3
 8016e74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e7c:	2b01      	cmp	r3, #1
 8016e7e:	d905      	bls.n	8016e8c <find_volume+0x18c>
 8016e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e82:	3301      	adds	r3, #1
 8016e84:	643b      	str	r3, [r7, #64]	; 0x40
 8016e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	d9e1      	bls.n	8016e50 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e90:	2b04      	cmp	r3, #4
 8016e92:	d101      	bne.n	8016e98 <find_volume+0x198>
 8016e94:	2301      	movs	r3, #1
 8016e96:	e17d      	b.n	8017194 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d901      	bls.n	8016ea4 <find_volume+0x1a4>
 8016ea0:	230d      	movs	r3, #13
 8016ea2:	e177      	b.n	8017194 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea6:	3338      	adds	r3, #56	; 0x38
 8016ea8:	330b      	adds	r3, #11
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7fe f906 	bl	80150bc <ld_word>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016eb6:	d001      	beq.n	8016ebc <find_volume+0x1bc>
 8016eb8:	230d      	movs	r3, #13
 8016eba:	e16b      	b.n	8017194 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ebe:	3338      	adds	r3, #56	; 0x38
 8016ec0:	3316      	adds	r3, #22
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7fe f8fa 	bl	80150bc <ld_word>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d106      	bne.n	8016ee0 <find_volume+0x1e0>
 8016ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed4:	3338      	adds	r3, #56	; 0x38
 8016ed6:	3324      	adds	r3, #36	; 0x24
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fe f907 	bl	80150ec <ld_dword>
 8016ede:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ee4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef2:	789b      	ldrb	r3, [r3, #2]
 8016ef4:	2b01      	cmp	r3, #1
 8016ef6:	d005      	beq.n	8016f04 <find_volume+0x204>
 8016ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016efa:	789b      	ldrb	r3, [r3, #2]
 8016efc:	2b02      	cmp	r3, #2
 8016efe:	d001      	beq.n	8016f04 <find_volume+0x204>
 8016f00:	230d      	movs	r3, #13
 8016f02:	e147      	b.n	8017194 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f06:	789b      	ldrb	r3, [r3, #2]
 8016f08:	461a      	mov	r2, r3
 8016f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f0c:	fb02 f303 	mul.w	r3, r2, r3
 8016f10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f18:	b29a      	uxth	r2, r3
 8016f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f20:	895b      	ldrh	r3, [r3, #10]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d008      	beq.n	8016f38 <find_volume+0x238>
 8016f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f28:	895b      	ldrh	r3, [r3, #10]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f2e:	895b      	ldrh	r3, [r3, #10]
 8016f30:	3b01      	subs	r3, #1
 8016f32:	4013      	ands	r3, r2
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d001      	beq.n	8016f3c <find_volume+0x23c>
 8016f38:	230d      	movs	r3, #13
 8016f3a:	e12b      	b.n	8017194 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3e:	3338      	adds	r3, #56	; 0x38
 8016f40:	3311      	adds	r3, #17
 8016f42:	4618      	mov	r0, r3
 8016f44:	f7fe f8ba 	bl	80150bc <ld_word>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f52:	891b      	ldrh	r3, [r3, #8]
 8016f54:	f003 030f 	and.w	r3, r3, #15
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d001      	beq.n	8016f62 <find_volume+0x262>
 8016f5e:	230d      	movs	r3, #13
 8016f60:	e118      	b.n	8017194 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f64:	3338      	adds	r3, #56	; 0x38
 8016f66:	3313      	adds	r3, #19
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7fe f8a7 	bl	80150bc <ld_word>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d106      	bne.n	8016f86 <find_volume+0x286>
 8016f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7a:	3338      	adds	r3, #56	; 0x38
 8016f7c:	3320      	adds	r3, #32
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe f8b4 	bl	80150ec <ld_dword>
 8016f84:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f88:	3338      	adds	r3, #56	; 0x38
 8016f8a:	330e      	adds	r3, #14
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7fe f895 	bl	80150bc <ld_word>
 8016f92:	4603      	mov	r3, r0
 8016f94:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d101      	bne.n	8016fa0 <find_volume+0x2a0>
 8016f9c:	230d      	movs	r3, #13
 8016f9e:	e0f9      	b.n	8017194 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016fa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fa4:	4413      	add	r3, r2
 8016fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016fa8:	8912      	ldrh	r2, [r2, #8]
 8016faa:	0912      	lsrs	r2, r2, #4
 8016fac:	b292      	uxth	r2, r2
 8016fae:	4413      	add	r3, r2
 8016fb0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d201      	bcs.n	8016fbe <find_volume+0x2be>
 8016fba:	230d      	movs	r3, #13
 8016fbc:	e0ea      	b.n	8017194 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc2:	1ad3      	subs	r3, r2, r3
 8016fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016fc6:	8952      	ldrh	r2, [r2, #10]
 8016fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8016fcc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d103      	bne.n	8016fdc <find_volume+0x2dc>
 8016fd4:	230d      	movs	r3, #13
 8016fd6:	e0dd      	b.n	8017194 <find_volume+0x494>
 8016fd8:	20000650 	.word	0x20000650
		fmt = FS_FAT32;
 8016fdc:	2303      	movs	r3, #3
 8016fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d802      	bhi.n	8016ff2 <find_volume+0x2f2>
 8016fec:	2302      	movs	r3, #2
 8016fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	d802      	bhi.n	8017002 <find_volume+0x302>
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017004:	1c9a      	adds	r2, r3, #2
 8017006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017008:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801700c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801700e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017014:	441a      	add	r2, r3
 8017016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017018:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801701a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	441a      	add	r2, r3
 8017020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017022:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8017024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017028:	2b03      	cmp	r3, #3
 801702a:	d11e      	bne.n	801706a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801702e:	3338      	adds	r3, #56	; 0x38
 8017030:	332a      	adds	r3, #42	; 0x2a
 8017032:	4618      	mov	r0, r3
 8017034:	f7fe f842 	bl	80150bc <ld_word>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <find_volume+0x342>
 801703e:	230d      	movs	r3, #13
 8017040:	e0a8      	b.n	8017194 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017044:	891b      	ldrh	r3, [r3, #8]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d001      	beq.n	801704e <find_volume+0x34e>
 801704a:	230d      	movs	r3, #13
 801704c:	e0a2      	b.n	8017194 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017050:	3338      	adds	r3, #56	; 0x38
 8017052:	332c      	adds	r3, #44	; 0x2c
 8017054:	4618      	mov	r0, r3
 8017056:	f7fe f849 	bl	80150ec <ld_dword>
 801705a:	4602      	mov	r2, r0
 801705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801705e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017062:	69db      	ldr	r3, [r3, #28]
 8017064:	009b      	lsls	r3, r3, #2
 8017066:	647b      	str	r3, [r7, #68]	; 0x44
 8017068:	e01f      	b.n	80170aa <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801706c:	891b      	ldrh	r3, [r3, #8]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d101      	bne.n	8017076 <find_volume+0x376>
 8017072:	230d      	movs	r3, #13
 8017074:	e08e      	b.n	8017194 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801707c:	441a      	add	r2, r3
 801707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017080:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017082:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017086:	2b02      	cmp	r3, #2
 8017088:	d103      	bne.n	8017092 <find_volume+0x392>
 801708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708c:	69db      	ldr	r3, [r3, #28]
 801708e:	005b      	lsls	r3, r3, #1
 8017090:	e00a      	b.n	80170a8 <find_volume+0x3a8>
 8017092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017094:	69da      	ldr	r2, [r3, #28]
 8017096:	4613      	mov	r3, r2
 8017098:	005b      	lsls	r3, r3, #1
 801709a:	4413      	add	r3, r2
 801709c:	085a      	lsrs	r2, r3, #1
 801709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a0:	69db      	ldr	r3, [r3, #28]
 80170a2:	f003 0301 	and.w	r3, r3, #1
 80170a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80170a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80170aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ac:	6a1a      	ldr	r2, [r3, #32]
 80170ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80170b4:	0a5b      	lsrs	r3, r3, #9
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d201      	bcs.n	80170be <find_volume+0x3be>
 80170ba:	230d      	movs	r3, #13
 80170bc:	e06a      	b.n	8017194 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80170be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c0:	f04f 32ff 	mov.w	r2, #4294967295
 80170c4:	619a      	str	r2, [r3, #24]
 80170c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c8:	699a      	ldr	r2, [r3, #24]
 80170ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170cc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80170ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d0:	2280      	movs	r2, #128	; 0x80
 80170d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80170d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170d8:	2b03      	cmp	r3, #3
 80170da:	d149      	bne.n	8017170 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80170dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170de:	3338      	adds	r3, #56	; 0x38
 80170e0:	3330      	adds	r3, #48	; 0x30
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7fd ffea 	bl	80150bc <ld_word>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d140      	bne.n	8017170 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80170ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170f0:	3301      	adds	r3, #1
 80170f2:	4619      	mov	r1, r3
 80170f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80170f6:	f7fe fac1 	bl	801567c <move_window>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d137      	bne.n	8017170 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8017100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017102:	2200      	movs	r2, #0
 8017104:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017108:	3338      	adds	r3, #56	; 0x38
 801710a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801710e:	4618      	mov	r0, r3
 8017110:	f7fd ffd4 	bl	80150bc <ld_word>
 8017114:	4603      	mov	r3, r0
 8017116:	461a      	mov	r2, r3
 8017118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801711c:	429a      	cmp	r2, r3
 801711e:	d127      	bne.n	8017170 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017122:	3338      	adds	r3, #56	; 0x38
 8017124:	4618      	mov	r0, r3
 8017126:	f7fd ffe1 	bl	80150ec <ld_dword>
 801712a:	4602      	mov	r2, r0
 801712c:	4b1b      	ldr	r3, [pc, #108]	; (801719c <find_volume+0x49c>)
 801712e:	429a      	cmp	r2, r3
 8017130:	d11e      	bne.n	8017170 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017134:	3338      	adds	r3, #56	; 0x38
 8017136:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801713a:	4618      	mov	r0, r3
 801713c:	f7fd ffd6 	bl	80150ec <ld_dword>
 8017140:	4602      	mov	r2, r0
 8017142:	4b17      	ldr	r3, [pc, #92]	; (80171a0 <find_volume+0x4a0>)
 8017144:	429a      	cmp	r2, r3
 8017146:	d113      	bne.n	8017170 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801714a:	3338      	adds	r3, #56	; 0x38
 801714c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017150:	4618      	mov	r0, r3
 8017152:	f7fd ffcb 	bl	80150ec <ld_dword>
 8017156:	4602      	mov	r2, r0
 8017158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715e:	3338      	adds	r3, #56	; 0x38
 8017160:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017164:	4618      	mov	r0, r3
 8017166:	f7fd ffc1 	bl	80150ec <ld_dword>
 801716a:	4602      	mov	r2, r0
 801716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017172:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017176:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017178:	4b0a      	ldr	r3, [pc, #40]	; (80171a4 <find_volume+0x4a4>)
 801717a:	881b      	ldrh	r3, [r3, #0]
 801717c:	3301      	adds	r3, #1
 801717e:	b29a      	uxth	r2, r3
 8017180:	4b08      	ldr	r3, [pc, #32]	; (80171a4 <find_volume+0x4a4>)
 8017182:	801a      	strh	r2, [r3, #0]
 8017184:	4b07      	ldr	r3, [pc, #28]	; (80171a4 <find_volume+0x4a4>)
 8017186:	881a      	ldrh	r2, [r3, #0]
 8017188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801718a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801718c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801718e:	f7fe fa0d 	bl	80155ac <clear_lock>
#endif
	return FR_OK;
 8017192:	2300      	movs	r3, #0
}
 8017194:	4618      	mov	r0, r3
 8017196:	3758      	adds	r7, #88	; 0x58
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	41615252 	.word	0x41615252
 80171a0:	61417272 	.word	0x61417272
 80171a4:	20000654 	.word	0x20000654

080171a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80171b2:	2309      	movs	r3, #9
 80171b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d02e      	beq.n	801721a <validate+0x72>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d02a      	beq.n	801721a <validate+0x72>
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d025      	beq.n	801721a <validate+0x72>
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	889a      	ldrh	r2, [r3, #4]
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	88db      	ldrh	r3, [r3, #6]
 80171d8:	429a      	cmp	r2, r3
 80171da:	d11e      	bne.n	801721a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7fe f86a 	bl	80152ba <lock_fs>
 80171e6:	4603      	mov	r3, r0
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d014      	beq.n	8017216 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	785b      	ldrb	r3, [r3, #1]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7fd fec4 	bl	8014f80 <disk_status>
 80171f8:	4603      	mov	r3, r0
 80171fa:	f003 0301 	and.w	r3, r3, #1
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d102      	bne.n	8017208 <validate+0x60>
				res = FR_OK;
 8017202:	2300      	movs	r3, #0
 8017204:	73fb      	strb	r3, [r7, #15]
 8017206:	e008      	b.n	801721a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	2100      	movs	r1, #0
 801720e:	4618      	mov	r0, r3
 8017210:	f7fe f869 	bl	80152e6 <unlock_fs>
 8017214:	e001      	b.n	801721a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8017216:	230f      	movs	r3, #15
 8017218:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801721a:	7bfb      	ldrb	r3, [r7, #15]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d102      	bne.n	8017226 <validate+0x7e>
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	e000      	b.n	8017228 <validate+0x80>
 8017226:	2300      	movs	r3, #0
 8017228:	683a      	ldr	r2, [r7, #0]
 801722a:	6013      	str	r3, [r2, #0]
	return res;
 801722c:	7bfb      	ldrb	r3, [r7, #15]
}
 801722e:	4618      	mov	r0, r3
 8017230:	3710      	adds	r7, #16
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
	...

08017238 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b088      	sub	sp, #32
 801723c:	af00      	add	r7, sp, #0
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	60b9      	str	r1, [r7, #8]
 8017242:	4613      	mov	r3, r2
 8017244:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801724a:	f107 0310 	add.w	r3, r7, #16
 801724e:	4618      	mov	r0, r3
 8017250:	f7ff fcbb 	bl	8016bca <get_ldnumber>
 8017254:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	2b00      	cmp	r3, #0
 801725a:	da01      	bge.n	8017260 <f_mount+0x28>
 801725c:	230b      	movs	r3, #11
 801725e:	e048      	b.n	80172f2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017260:	4a26      	ldr	r2, [pc, #152]	; (80172fc <f_mount+0xc4>)
 8017262:	69fb      	ldr	r3, [r7, #28]
 8017264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017268:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d00f      	beq.n	8017290 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017270:	69b8      	ldr	r0, [r7, #24]
 8017272:	f7fe f99b 	bl	80155ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8017276:	69bb      	ldr	r3, [r7, #24]
 8017278:	691b      	ldr	r3, [r3, #16]
 801727a:	4618      	mov	r0, r3
 801727c:	f001 f933 	bl	80184e6 <ff_del_syncobj>
 8017280:	4603      	mov	r3, r0
 8017282:	2b00      	cmp	r3, #0
 8017284:	d101      	bne.n	801728a <f_mount+0x52>
 8017286:	2302      	movs	r3, #2
 8017288:	e033      	b.n	80172f2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801728a:	69bb      	ldr	r3, [r7, #24]
 801728c:	2200      	movs	r2, #0
 801728e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d00f      	beq.n	80172b6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2200      	movs	r2, #0
 801729a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801729c:	69fb      	ldr	r3, [r7, #28]
 801729e:	b2da      	uxtb	r2, r3
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	3310      	adds	r3, #16
 80172a4:	4619      	mov	r1, r3
 80172a6:	4610      	mov	r0, r2
 80172a8:	f001 f8fe 	bl	80184a8 <ff_cre_syncobj>
 80172ac:	4603      	mov	r3, r0
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d101      	bne.n	80172b6 <f_mount+0x7e>
 80172b2:	2302      	movs	r3, #2
 80172b4:	e01d      	b.n	80172f2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80172b6:	68fa      	ldr	r2, [r7, #12]
 80172b8:	4910      	ldr	r1, [pc, #64]	; (80172fc <f_mount+0xc4>)
 80172ba:	69fb      	ldr	r3, [r7, #28]
 80172bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d002      	beq.n	80172cc <f_mount+0x94>
 80172c6:	79fb      	ldrb	r3, [r7, #7]
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d001      	beq.n	80172d0 <f_mount+0x98>
 80172cc:	2300      	movs	r3, #0
 80172ce:	e010      	b.n	80172f2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80172d0:	f107 010c 	add.w	r1, r7, #12
 80172d4:	f107 0308 	add.w	r3, r7, #8
 80172d8:	2200      	movs	r2, #0
 80172da:	4618      	mov	r0, r3
 80172dc:	f7ff fd10 	bl	8016d00 <find_volume>
 80172e0:	4603      	mov	r3, r0
 80172e2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	7dfa      	ldrb	r2, [r7, #23]
 80172e8:	4611      	mov	r1, r2
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7fd fffb 	bl	80152e6 <unlock_fs>
 80172f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3720      	adds	r7, #32
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}
 80172fa:	bf00      	nop
 80172fc:	20000650 	.word	0x20000650

08017300 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017306:	af00      	add	r7, sp, #0
 8017308:	f107 030c 	add.w	r3, r7, #12
 801730c:	6018      	str	r0, [r3, #0]
 801730e:	f107 0308 	add.w	r3, r7, #8
 8017312:	6019      	str	r1, [r3, #0]
 8017314:	1dfb      	adds	r3, r7, #7
 8017316:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017318:	f107 030c 	add.w	r3, r7, #12
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d101      	bne.n	8017326 <f_open+0x26>
 8017322:	2309      	movs	r3, #9
 8017324:	e239      	b.n	801779a <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017326:	1dfb      	adds	r3, r7, #7
 8017328:	1dfa      	adds	r2, r7, #7
 801732a:	7812      	ldrb	r2, [r2, #0]
 801732c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8017330:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8017332:	1dfb      	adds	r3, r7, #7
 8017334:	781a      	ldrb	r2, [r3, #0]
 8017336:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801733a:	f107 0308 	add.w	r3, r7, #8
 801733e:	4618      	mov	r0, r3
 8017340:	f7ff fcde 	bl	8016d00 <find_volume>
 8017344:	4603      	mov	r3, r0
 8017346:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801734a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801734e:	2b00      	cmp	r3, #0
 8017350:	f040 8210 	bne.w	8017774 <f_open+0x474>
		dj.obj.fs = fs;
 8017354:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017358:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 801735c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017360:	f107 0214 	add.w	r2, r7, #20
 8017364:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017366:	f107 0308 	add.w	r3, r7, #8
 801736a:	681a      	ldr	r2, [r3, #0]
 801736c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017370:	4611      	mov	r1, r2
 8017372:	4618      	mov	r0, r3
 8017374:	f7ff fbb8 	bl	8016ae8 <follow_path>
 8017378:	4603      	mov	r3, r0
 801737a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801737e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017382:	2b00      	cmp	r3, #0
 8017384:	d11b      	bne.n	80173be <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017386:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801738a:	b25b      	sxtb	r3, r3
 801738c:	2b00      	cmp	r3, #0
 801738e:	da03      	bge.n	8017398 <f_open+0x98>
				res = FR_INVALID_NAME;
 8017390:	2306      	movs	r3, #6
 8017392:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8017396:	e012      	b.n	80173be <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017398:	1dfb      	adds	r3, r7, #7
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	f023 0301 	bic.w	r3, r3, #1
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	bf14      	ite	ne
 80173a4:	2301      	movne	r3, #1
 80173a6:	2300      	moveq	r3, #0
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	461a      	mov	r2, r3
 80173ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80173b0:	4611      	mov	r1, r2
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7fd ffb2 	bl	801531c <chk_lock>
 80173b8:	4603      	mov	r3, r0
 80173ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80173be:	1dfb      	adds	r3, r7, #7
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	f003 031c 	and.w	r3, r3, #28
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	f000 809b 	beq.w	8017502 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80173cc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d019      	beq.n	8017408 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80173d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80173d8:	2b04      	cmp	r3, #4
 80173da:	d10e      	bne.n	80173fa <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80173dc:	f7fd fffa 	bl	80153d4 <enq_lock>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d006      	beq.n	80173f4 <f_open+0xf4>
 80173e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7ff f8cc 	bl	8016588 <dir_register>
 80173f0:	4603      	mov	r3, r0
 80173f2:	e000      	b.n	80173f6 <f_open+0xf6>
 80173f4:	2312      	movs	r3, #18
 80173f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80173fa:	1dfb      	adds	r3, r7, #7
 80173fc:	1dfa      	adds	r2, r7, #7
 80173fe:	7812      	ldrb	r2, [r2, #0]
 8017400:	f042 0208 	orr.w	r2, r2, #8
 8017404:	701a      	strb	r2, [r3, #0]
 8017406:	e012      	b.n	801742e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017408:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801740c:	f003 0311 	and.w	r3, r3, #17
 8017410:	2b00      	cmp	r3, #0
 8017412:	d003      	beq.n	801741c <f_open+0x11c>
					res = FR_DENIED;
 8017414:	2307      	movs	r3, #7
 8017416:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801741a:	e008      	b.n	801742e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801741c:	1dfb      	adds	r3, r7, #7
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	f003 0304 	and.w	r3, r3, #4
 8017424:	2b00      	cmp	r3, #0
 8017426:	d002      	beq.n	801742e <f_open+0x12e>
 8017428:	2308      	movs	r3, #8
 801742a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801742e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017432:	2b00      	cmp	r3, #0
 8017434:	f040 8082 	bne.w	801753c <f_open+0x23c>
 8017438:	1dfb      	adds	r3, r7, #7
 801743a:	781b      	ldrb	r3, [r3, #0]
 801743c:	f003 0308 	and.w	r3, r3, #8
 8017440:	2b00      	cmp	r3, #0
 8017442:	d07b      	beq.n	801753c <f_open+0x23c>
				dw = GET_FATTIME();
 8017444:	f7fd fd3e 	bl	8014ec4 <get_fattime>
 8017448:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801744c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017450:	330e      	adds	r3, #14
 8017452:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8017456:	4618      	mov	r0, r3
 8017458:	f7fd fe86 	bl	8015168 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801745c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017460:	3316      	adds	r3, #22
 8017462:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8017466:	4618      	mov	r0, r3
 8017468:	f7fd fe7e 	bl	8015168 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801746c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017470:	330b      	adds	r3, #11
 8017472:	2220      	movs	r2, #32
 8017474:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017476:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801747a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801747e:	4611      	mov	r1, r2
 8017480:	4618      	mov	r0, r3
 8017482:	f7fe fdfa 	bl	801607a <ld_clust>
 8017486:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801748a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801748e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8017492:	2200      	movs	r2, #0
 8017494:	4618      	mov	r0, r3
 8017496:	f7fe fe0f 	bl	80160b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801749a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801749e:	331c      	adds	r3, #28
 80174a0:	2100      	movs	r1, #0
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7fd fe60 	bl	8015168 <st_dword>
					fs->wflag = 1;
 80174a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80174ac:	2201      	movs	r2, #1
 80174ae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80174b0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d041      	beq.n	801753c <f_open+0x23c>
						dw = fs->winsect;
 80174b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80174bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174be:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80174c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80174c6:	2200      	movs	r2, #0
 80174c8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7fe fb1c 	bl	8015b0a <remove_chain>
 80174d2:	4603      	mov	r3, r0
 80174d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80174d8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d12d      	bne.n	801753c <f_open+0x23c>
							res = move_window(fs, dw);
 80174e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80174e4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7fe f8c7 	bl	801567c <move_window>
 80174ee:	4603      	mov	r3, r0
 80174f0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80174f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80174f8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80174fc:	3a01      	subs	r2, #1
 80174fe:	615a      	str	r2, [r3, #20]
 8017500:	e01c      	b.n	801753c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017502:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017506:	2b00      	cmp	r3, #0
 8017508:	d118      	bne.n	801753c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801750a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801750e:	f003 0310 	and.w	r3, r3, #16
 8017512:	2b00      	cmp	r3, #0
 8017514:	d003      	beq.n	801751e <f_open+0x21e>
					res = FR_NO_FILE;
 8017516:	2304      	movs	r3, #4
 8017518:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801751c:	e00e      	b.n	801753c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801751e:	1dfb      	adds	r3, r7, #7
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	f003 0302 	and.w	r3, r3, #2
 8017526:	2b00      	cmp	r3, #0
 8017528:	d008      	beq.n	801753c <f_open+0x23c>
 801752a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801752e:	f003 0301 	and.w	r3, r3, #1
 8017532:	2b00      	cmp	r3, #0
 8017534:	d002      	beq.n	801753c <f_open+0x23c>
						res = FR_DENIED;
 8017536:	2307      	movs	r3, #7
 8017538:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801753c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017540:	2b00      	cmp	r3, #0
 8017542:	d136      	bne.n	80175b2 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017544:	1dfb      	adds	r3, r7, #7
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	f003 0308 	and.w	r3, r3, #8
 801754c:	2b00      	cmp	r3, #0
 801754e:	d005      	beq.n	801755c <f_open+0x25c>
				mode |= FA_MODIFIED;
 8017550:	1dfb      	adds	r3, r7, #7
 8017552:	1dfa      	adds	r2, r7, #7
 8017554:	7812      	ldrb	r2, [r2, #0]
 8017556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801755a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801755c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017562:	f107 030c 	add.w	r3, r7, #12
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801756a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801756e:	f107 030c 	add.w	r3, r7, #12
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017576:	1dfb      	adds	r3, r7, #7
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	f023 0301 	bic.w	r3, r3, #1
 801757e:	2b00      	cmp	r3, #0
 8017580:	bf14      	ite	ne
 8017582:	2301      	movne	r3, #1
 8017584:	2300      	moveq	r3, #0
 8017586:	b2db      	uxtb	r3, r3
 8017588:	461a      	mov	r2, r3
 801758a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801758e:	4611      	mov	r1, r2
 8017590:	4618      	mov	r0, r3
 8017592:	f7fd ff41 	bl	8015418 <inc_lock>
 8017596:	4602      	mov	r2, r0
 8017598:	f107 030c 	add.w	r3, r7, #12
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80175a0:	f107 030c 	add.w	r3, r7, #12
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	691b      	ldr	r3, [r3, #16]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d102      	bne.n	80175b2 <f_open+0x2b2>
 80175ac:	2302      	movs	r3, #2
 80175ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80175b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f040 80dc 	bne.w	8017774 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80175bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80175c0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80175c4:	4611      	mov	r1, r2
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7fe fd57 	bl	801607a <ld_clust>
 80175cc:	4602      	mov	r2, r0
 80175ce:	f107 030c 	add.w	r3, r7, #12
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80175d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80175da:	331c      	adds	r3, #28
 80175dc:	4618      	mov	r0, r3
 80175de:	f7fd fd85 	bl	80150ec <ld_dword>
 80175e2:	4602      	mov	r2, r0
 80175e4:	f107 030c 	add.w	r3, r7, #12
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80175ec:	f107 030c 	add.w	r3, r7, #12
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	2200      	movs	r2, #0
 80175f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80175f6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80175fa:	f107 030c 	add.w	r3, r7, #12
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8017602:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017606:	88da      	ldrh	r2, [r3, #6]
 8017608:	f107 030c 	add.w	r3, r7, #12
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017610:	f107 030c 	add.w	r3, r7, #12
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	1dfa      	adds	r2, r7, #7
 8017618:	7812      	ldrb	r2, [r2, #0]
 801761a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801761c:	f107 030c 	add.w	r3, r7, #12
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2200      	movs	r2, #0
 8017624:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017626:	f107 030c 	add.w	r3, r7, #12
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	2200      	movs	r2, #0
 801762e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017630:	f107 030c 	add.w	r3, r7, #12
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2200      	movs	r2, #0
 8017638:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801763a:	f107 030c 	add.w	r3, r7, #12
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	3330      	adds	r3, #48	; 0x30
 8017642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017646:	2100      	movs	r1, #0
 8017648:	4618      	mov	r0, r3
 801764a:	f7fd fdda 	bl	8015202 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801764e:	1dfb      	adds	r3, r7, #7
 8017650:	781b      	ldrb	r3, [r3, #0]
 8017652:	f003 0320 	and.w	r3, r3, #32
 8017656:	2b00      	cmp	r3, #0
 8017658:	f000 808c 	beq.w	8017774 <f_open+0x474>
 801765c:	f107 030c 	add.w	r3, r7, #12
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	68db      	ldr	r3, [r3, #12]
 8017664:	2b00      	cmp	r3, #0
 8017666:	f000 8085 	beq.w	8017774 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801766a:	f107 030c 	add.w	r3, r7, #12
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	68da      	ldr	r2, [r3, #12]
 8017672:	f107 030c 	add.w	r3, r7, #12
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801767a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801767e:	895b      	ldrh	r3, [r3, #10]
 8017680:	025b      	lsls	r3, r3, #9
 8017682:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017686:	f107 030c 	add.w	r3, r7, #12
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	689b      	ldr	r3, [r3, #8]
 801768e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017692:	f107 030c 	add.w	r3, r7, #12
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801769e:	e01f      	b.n	80176e0 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 80176a0:	f107 030c 	add.w	r3, r7, #12
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7fe f8a1 	bl	80157f2 <get_fat>
 80176b0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80176b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80176b8:	2b01      	cmp	r3, #1
 80176ba:	d802      	bhi.n	80176c2 <f_open+0x3c2>
 80176bc:	2302      	movs	r3, #2
 80176be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80176c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80176c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176ca:	d102      	bne.n	80176d2 <f_open+0x3d2>
 80176cc:	2301      	movs	r3, #1
 80176ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80176d2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80176d6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80176da:	1ad3      	subs	r3, r2, r3
 80176dc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80176e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d105      	bne.n	80176f4 <f_open+0x3f4>
 80176e8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80176ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d8d5      	bhi.n	80176a0 <f_open+0x3a0>
				}
				fp->clust = clst;
 80176f4:	f107 030c 	add.w	r3, r7, #12
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80176fe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017700:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017704:	2b00      	cmp	r3, #0
 8017706:	d135      	bne.n	8017774 <f_open+0x474>
 8017708:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017710:	2b00      	cmp	r3, #0
 8017712:	d02f      	beq.n	8017774 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017714:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017718:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801771c:	4618      	mov	r0, r3
 801771e:	f7fe f849 	bl	80157b4 <clust2sect>
 8017722:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8017726:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801772a:	2b00      	cmp	r3, #0
 801772c:	d103      	bne.n	8017736 <f_open+0x436>
						res = FR_INT_ERR;
 801772e:	2302      	movs	r3, #2
 8017730:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8017734:	e01e      	b.n	8017774 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017736:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801773a:	0a5a      	lsrs	r2, r3, #9
 801773c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8017740:	441a      	add	r2, r3
 8017742:	f107 030c 	add.w	r3, r7, #12
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801774a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801774e:	7858      	ldrb	r0, [r3, #1]
 8017750:	f107 030c 	add.w	r3, r7, #12
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801775a:	f107 030c 	add.w	r3, r7, #12
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	6a1a      	ldr	r2, [r3, #32]
 8017762:	2301      	movs	r3, #1
 8017764:	f7fd fc4c 	bl	8015000 <disk_read>
 8017768:	4603      	mov	r3, r0
 801776a:	2b00      	cmp	r3, #0
 801776c:	d002      	beq.n	8017774 <f_open+0x474>
 801776e:	2301      	movs	r3, #1
 8017770:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017774:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017778:	2b00      	cmp	r3, #0
 801777a:	d004      	beq.n	8017786 <f_open+0x486>
 801777c:	f107 030c 	add.w	r3, r7, #12
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	2200      	movs	r2, #0
 8017784:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017786:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801778a:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 801778e:	4611      	mov	r1, r2
 8017790:	4618      	mov	r0, r3
 8017792:	f7fd fda8 	bl	80152e6 <unlock_fs>
 8017796:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 801779a:	4618      	mov	r0, r3
 801779c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08e      	sub	sp, #56	; 0x38
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
 80177b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80177b2:	68bb      	ldr	r3, [r7, #8]
 80177b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	2200      	movs	r2, #0
 80177ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f107 0214 	add.w	r2, r7, #20
 80177c2:	4611      	mov	r1, r2
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7ff fcef 	bl	80171a8 <validate>
 80177ca:	4603      	mov	r3, r0
 80177cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80177d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d107      	bne.n	80177e8 <f_read+0x44>
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	7d5b      	ldrb	r3, [r3, #21]
 80177dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80177e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d009      	beq.n	80177fc <f_read+0x58>
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80177ee:	4611      	mov	r1, r2
 80177f0:	4618      	mov	r0, r3
 80177f2:	f7fd fd78 	bl	80152e6 <unlock_fs>
 80177f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177fa:	e13d      	b.n	8017a78 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	7d1b      	ldrb	r3, [r3, #20]
 8017800:	f003 0301 	and.w	r3, r3, #1
 8017804:	2b00      	cmp	r3, #0
 8017806:	d106      	bne.n	8017816 <f_read+0x72>
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	2107      	movs	r1, #7
 801780c:	4618      	mov	r0, r3
 801780e:	f7fd fd6a 	bl	80152e6 <unlock_fs>
 8017812:	2307      	movs	r3, #7
 8017814:	e130      	b.n	8017a78 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	68da      	ldr	r2, [r3, #12]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	699b      	ldr	r3, [r3, #24]
 801781e:	1ad3      	subs	r3, r2, r3
 8017820:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017822:	687a      	ldr	r2, [r7, #4]
 8017824:	6a3b      	ldr	r3, [r7, #32]
 8017826:	429a      	cmp	r2, r3
 8017828:	f240 811c 	bls.w	8017a64 <f_read+0x2c0>
 801782c:	6a3b      	ldr	r3, [r7, #32]
 801782e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017830:	e118      	b.n	8017a64 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	699b      	ldr	r3, [r3, #24]
 8017836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801783a:	2b00      	cmp	r3, #0
 801783c:	f040 80e4 	bne.w	8017a08 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	699b      	ldr	r3, [r3, #24]
 8017844:	0a5b      	lsrs	r3, r3, #9
 8017846:	697a      	ldr	r2, [r7, #20]
 8017848:	8952      	ldrh	r2, [r2, #10]
 801784a:	3a01      	subs	r2, #1
 801784c:	4013      	ands	r3, r2
 801784e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017850:	69fb      	ldr	r3, [r7, #28]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d139      	bne.n	80178ca <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	699b      	ldr	r3, [r3, #24]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d103      	bne.n	8017866 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	689b      	ldr	r3, [r3, #8]
 8017862:	633b      	str	r3, [r7, #48]	; 0x30
 8017864:	e013      	b.n	801788e <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801786a:	2b00      	cmp	r3, #0
 801786c:	d007      	beq.n	801787e <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	699b      	ldr	r3, [r3, #24]
 8017872:	4619      	mov	r1, r3
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f7fe fa45 	bl	8015d04 <clmt_clust>
 801787a:	6338      	str	r0, [r7, #48]	; 0x30
 801787c:	e007      	b.n	801788e <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801787e:	68fa      	ldr	r2, [r7, #12]
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	69db      	ldr	r3, [r3, #28]
 8017884:	4619      	mov	r1, r3
 8017886:	4610      	mov	r0, r2
 8017888:	f7fd ffb3 	bl	80157f2 <get_fat>
 801788c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017890:	2b01      	cmp	r3, #1
 8017892:	d809      	bhi.n	80178a8 <f_read+0x104>
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	2202      	movs	r2, #2
 8017898:	755a      	strb	r2, [r3, #21]
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	2102      	movs	r1, #2
 801789e:	4618      	mov	r0, r3
 80178a0:	f7fd fd21 	bl	80152e6 <unlock_fs>
 80178a4:	2302      	movs	r3, #2
 80178a6:	e0e7      	b.n	8017a78 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80178a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178ae:	d109      	bne.n	80178c4 <f_read+0x120>
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	2201      	movs	r2, #1
 80178b4:	755a      	strb	r2, [r3, #21]
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	2101      	movs	r1, #1
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7fd fd13 	bl	80152e6 <unlock_fs>
 80178c0:	2301      	movs	r3, #1
 80178c2:	e0d9      	b.n	8017a78 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80178ca:	697a      	ldr	r2, [r7, #20]
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	69db      	ldr	r3, [r3, #28]
 80178d0:	4619      	mov	r1, r3
 80178d2:	4610      	mov	r0, r2
 80178d4:	f7fd ff6e 	bl	80157b4 <clust2sect>
 80178d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d109      	bne.n	80178f4 <f_read+0x150>
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2202      	movs	r2, #2
 80178e4:	755a      	strb	r2, [r3, #21]
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	2102      	movs	r1, #2
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7fd fcfb 	bl	80152e6 <unlock_fs>
 80178f0:	2302      	movs	r3, #2
 80178f2:	e0c1      	b.n	8017a78 <f_read+0x2d4>
			sect += csect;
 80178f4:	69ba      	ldr	r2, [r7, #24]
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	4413      	add	r3, r2
 80178fa:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	0a5b      	lsrs	r3, r3, #9
 8017900:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017904:	2b00      	cmp	r3, #0
 8017906:	d03e      	beq.n	8017986 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017908:	69fa      	ldr	r2, [r7, #28]
 801790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790c:	4413      	add	r3, r2
 801790e:	697a      	ldr	r2, [r7, #20]
 8017910:	8952      	ldrh	r2, [r2, #10]
 8017912:	4293      	cmp	r3, r2
 8017914:	d905      	bls.n	8017922 <f_read+0x17e>
					cc = fs->csize - csect;
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	895b      	ldrh	r3, [r3, #10]
 801791a:	461a      	mov	r2, r3
 801791c:	69fb      	ldr	r3, [r7, #28]
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	7858      	ldrb	r0, [r3, #1]
 8017926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017928:	69ba      	ldr	r2, [r7, #24]
 801792a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801792c:	f7fd fb68 	bl	8015000 <disk_read>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d009      	beq.n	801794a <f_read+0x1a6>
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	2201      	movs	r2, #1
 801793a:	755a      	strb	r2, [r3, #21]
 801793c:	697b      	ldr	r3, [r7, #20]
 801793e:	2101      	movs	r1, #1
 8017940:	4618      	mov	r0, r3
 8017942:	f7fd fcd0 	bl	80152e6 <unlock_fs>
 8017946:	2301      	movs	r3, #1
 8017948:	e096      	b.n	8017a78 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	7d1b      	ldrb	r3, [r3, #20]
 801794e:	b25b      	sxtb	r3, r3
 8017950:	2b00      	cmp	r3, #0
 8017952:	da14      	bge.n	801797e <f_read+0x1da>
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6a1a      	ldr	r2, [r3, #32]
 8017958:	69bb      	ldr	r3, [r7, #24]
 801795a:	1ad3      	subs	r3, r2, r3
 801795c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801795e:	429a      	cmp	r2, r3
 8017960:	d90d      	bls.n	801797e <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	6a1a      	ldr	r2, [r3, #32]
 8017966:	69bb      	ldr	r3, [r7, #24]
 8017968:	1ad3      	subs	r3, r2, r3
 801796a:	025b      	lsls	r3, r3, #9
 801796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801796e:	18d0      	adds	r0, r2, r3
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	3330      	adds	r3, #48	; 0x30
 8017974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017978:	4619      	mov	r1, r3
 801797a:	f7fd fc21 	bl	80151c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017980:	025b      	lsls	r3, r3, #9
 8017982:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017984:	e05a      	b.n	8017a3c <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	6a1b      	ldr	r3, [r3, #32]
 801798a:	69ba      	ldr	r2, [r7, #24]
 801798c:	429a      	cmp	r2, r3
 801798e:	d038      	beq.n	8017a02 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	7d1b      	ldrb	r3, [r3, #20]
 8017994:	b25b      	sxtb	r3, r3
 8017996:	2b00      	cmp	r3, #0
 8017998:	da1d      	bge.n	80179d6 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	7858      	ldrb	r0, [r3, #1]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	6a1a      	ldr	r2, [r3, #32]
 80179a8:	2301      	movs	r3, #1
 80179aa:	f7fd fb49 	bl	8015040 <disk_write>
 80179ae:	4603      	mov	r3, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d009      	beq.n	80179c8 <f_read+0x224>
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2201      	movs	r2, #1
 80179b8:	755a      	strb	r2, [r3, #21]
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	2101      	movs	r1, #1
 80179be:	4618      	mov	r0, r3
 80179c0:	f7fd fc91 	bl	80152e6 <unlock_fs>
 80179c4:	2301      	movs	r3, #1
 80179c6:	e057      	b.n	8017a78 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	7d1b      	ldrb	r3, [r3, #20]
 80179cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179d0:	b2da      	uxtb	r2, r3
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80179d6:	697b      	ldr	r3, [r7, #20]
 80179d8:	7858      	ldrb	r0, [r3, #1]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179e0:	2301      	movs	r3, #1
 80179e2:	69ba      	ldr	r2, [r7, #24]
 80179e4:	f7fd fb0c 	bl	8015000 <disk_read>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d009      	beq.n	8017a02 <f_read+0x25e>
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2201      	movs	r2, #1
 80179f2:	755a      	strb	r2, [r3, #21]
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	2101      	movs	r1, #1
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fd fc74 	bl	80152e6 <unlock_fs>
 80179fe:	2301      	movs	r3, #1
 8017a00:	e03a      	b.n	8017a78 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	69ba      	ldr	r2, [r7, #24]
 8017a06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	699b      	ldr	r3, [r3, #24]
 8017a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017a10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017a14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d901      	bls.n	8017a22 <f_read+0x27e>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	699b      	ldr	r3, [r3, #24]
 8017a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017a30:	4413      	add	r3, r2
 8017a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a34:	4619      	mov	r1, r3
 8017a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a38:	f7fd fbc2 	bl	80151c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a40:	4413      	add	r3, r2
 8017a42:	627b      	str	r3, [r7, #36]	; 0x24
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	699a      	ldr	r2, [r3, #24]
 8017a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4a:	441a      	add	r2, r3
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	619a      	str	r2, [r3, #24]
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	681a      	ldr	r2, [r3, #0]
 8017a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a56:	441a      	add	r2, r3
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	601a      	str	r2, [r3, #0]
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a60:	1ad3      	subs	r3, r2, r3
 8017a62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f47f aee3 	bne.w	8017832 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	2100      	movs	r1, #0
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7fd fc38 	bl	80152e6 <unlock_fs>
 8017a76:	2300      	movs	r3, #0
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3738      	adds	r7, #56	; 0x38
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}

08017a80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b08c      	sub	sp, #48	; 0x30
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	60b9      	str	r1, [r7, #8]
 8017a8a:	607a      	str	r2, [r7, #4]
 8017a8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	2200      	movs	r2, #0
 8017a96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	f107 0210 	add.w	r2, r7, #16
 8017a9e:	4611      	mov	r1, r2
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7ff fb81 	bl	80171a8 <validate>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d107      	bne.n	8017ac4 <f_write+0x44>
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	7d5b      	ldrb	r3, [r3, #21]
 8017ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d009      	beq.n	8017ad8 <f_write+0x58>
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017aca:	4611      	mov	r1, r2
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7fd fc0a 	bl	80152e6 <unlock_fs>
 8017ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ad6:	e173      	b.n	8017dc0 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	7d1b      	ldrb	r3, [r3, #20]
 8017adc:	f003 0302 	and.w	r3, r3, #2
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d106      	bne.n	8017af2 <f_write+0x72>
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	2107      	movs	r1, #7
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f7fd fbfc 	bl	80152e6 <unlock_fs>
 8017aee:	2307      	movs	r3, #7
 8017af0:	e166      	b.n	8017dc0 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	699a      	ldr	r2, [r3, #24]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	441a      	add	r2, r3
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	699b      	ldr	r3, [r3, #24]
 8017afe:	429a      	cmp	r2, r3
 8017b00:	f080 814b 	bcs.w	8017d9a <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	699b      	ldr	r3, [r3, #24]
 8017b08:	43db      	mvns	r3, r3
 8017b0a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017b0c:	e145      	b.n	8017d9a <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	699b      	ldr	r3, [r3, #24]
 8017b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	f040 8101 	bne.w	8017d1e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	699b      	ldr	r3, [r3, #24]
 8017b20:	0a5b      	lsrs	r3, r3, #9
 8017b22:	693a      	ldr	r2, [r7, #16]
 8017b24:	8952      	ldrh	r2, [r2, #10]
 8017b26:	3a01      	subs	r2, #1
 8017b28:	4013      	ands	r3, r2
 8017b2a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d14d      	bne.n	8017bce <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	699b      	ldr	r3, [r3, #24]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d10c      	bne.n	8017b54 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	689b      	ldr	r3, [r3, #8]
 8017b3e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d11a      	bne.n	8017b7c <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	2100      	movs	r1, #0
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7fe f842 	bl	8015bd4 <create_chain>
 8017b50:	62b8      	str	r0, [r7, #40]	; 0x28
 8017b52:	e013      	b.n	8017b7c <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d007      	beq.n	8017b6c <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	699b      	ldr	r3, [r3, #24]
 8017b60:	4619      	mov	r1, r3
 8017b62:	68f8      	ldr	r0, [r7, #12]
 8017b64:	f7fe f8ce 	bl	8015d04 <clmt_clust>
 8017b68:	62b8      	str	r0, [r7, #40]	; 0x28
 8017b6a:	e007      	b.n	8017b7c <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017b6c:	68fa      	ldr	r2, [r7, #12]
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	69db      	ldr	r3, [r3, #28]
 8017b72:	4619      	mov	r1, r3
 8017b74:	4610      	mov	r0, r2
 8017b76:	f7fe f82d 	bl	8015bd4 <create_chain>
 8017b7a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	f000 8110 	beq.w	8017da4 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b86:	2b01      	cmp	r3, #1
 8017b88:	d109      	bne.n	8017b9e <f_write+0x11e>
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	2202      	movs	r2, #2
 8017b8e:	755a      	strb	r2, [r3, #21]
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	2102      	movs	r1, #2
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7fd fba6 	bl	80152e6 <unlock_fs>
 8017b9a:	2302      	movs	r3, #2
 8017b9c:	e110      	b.n	8017dc0 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ba4:	d109      	bne.n	8017bba <f_write+0x13a>
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	2201      	movs	r2, #1
 8017baa:	755a      	strb	r2, [r3, #21]
 8017bac:	693b      	ldr	r3, [r7, #16]
 8017bae:	2101      	movs	r1, #1
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7fd fb98 	bl	80152e6 <unlock_fs>
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	e102      	b.n	8017dc0 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bbe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	689b      	ldr	r3, [r3, #8]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d102      	bne.n	8017bce <f_write+0x14e>
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bcc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	7d1b      	ldrb	r3, [r3, #20]
 8017bd2:	b25b      	sxtb	r3, r3
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	da1d      	bge.n	8017c14 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	7858      	ldrb	r0, [r3, #1]
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	6a1a      	ldr	r2, [r3, #32]
 8017be6:	2301      	movs	r3, #1
 8017be8:	f7fd fa2a 	bl	8015040 <disk_write>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d009      	beq.n	8017c06 <f_write+0x186>
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	755a      	strb	r2, [r3, #21]
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	2101      	movs	r1, #1
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7fd fb72 	bl	80152e6 <unlock_fs>
 8017c02:	2301      	movs	r3, #1
 8017c04:	e0dc      	b.n	8017dc0 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	7d1b      	ldrb	r3, [r3, #20]
 8017c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c0e:	b2da      	uxtb	r2, r3
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017c14:	693a      	ldr	r2, [r7, #16]
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	69db      	ldr	r3, [r3, #28]
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	4610      	mov	r0, r2
 8017c1e:	f7fd fdc9 	bl	80157b4 <clust2sect>
 8017c22:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d109      	bne.n	8017c3e <f_write+0x1be>
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2202      	movs	r2, #2
 8017c2e:	755a      	strb	r2, [r3, #21]
 8017c30:	693b      	ldr	r3, [r7, #16]
 8017c32:	2102      	movs	r1, #2
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7fd fb56 	bl	80152e6 <unlock_fs>
 8017c3a:	2302      	movs	r3, #2
 8017c3c:	e0c0      	b.n	8017dc0 <f_write+0x340>
			sect += csect;
 8017c3e:	697a      	ldr	r2, [r7, #20]
 8017c40:	69bb      	ldr	r3, [r7, #24]
 8017c42:	4413      	add	r3, r2
 8017c44:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	0a5b      	lsrs	r3, r3, #9
 8017c4a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017c4c:	6a3b      	ldr	r3, [r7, #32]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d041      	beq.n	8017cd6 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017c52:	69ba      	ldr	r2, [r7, #24]
 8017c54:	6a3b      	ldr	r3, [r7, #32]
 8017c56:	4413      	add	r3, r2
 8017c58:	693a      	ldr	r2, [r7, #16]
 8017c5a:	8952      	ldrh	r2, [r2, #10]
 8017c5c:	4293      	cmp	r3, r2
 8017c5e:	d905      	bls.n	8017c6c <f_write+0x1ec>
					cc = fs->csize - csect;
 8017c60:	693b      	ldr	r3, [r7, #16]
 8017c62:	895b      	ldrh	r3, [r3, #10]
 8017c64:	461a      	mov	r2, r3
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	1ad3      	subs	r3, r2, r3
 8017c6a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	7858      	ldrb	r0, [r3, #1]
 8017c70:	6a3b      	ldr	r3, [r7, #32]
 8017c72:	697a      	ldr	r2, [r7, #20]
 8017c74:	69f9      	ldr	r1, [r7, #28]
 8017c76:	f7fd f9e3 	bl	8015040 <disk_write>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d009      	beq.n	8017c94 <f_write+0x214>
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2201      	movs	r2, #1
 8017c84:	755a      	strb	r2, [r3, #21]
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	2101      	movs	r1, #1
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fd fb2b 	bl	80152e6 <unlock_fs>
 8017c90:	2301      	movs	r3, #1
 8017c92:	e095      	b.n	8017dc0 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	6a1a      	ldr	r2, [r3, #32]
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	1ad3      	subs	r3, r2, r3
 8017c9c:	6a3a      	ldr	r2, [r7, #32]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d915      	bls.n	8017cce <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6a1a      	ldr	r2, [r3, #32]
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	1ad3      	subs	r3, r2, r3
 8017cb0:	025b      	lsls	r3, r3, #9
 8017cb2:	69fa      	ldr	r2, [r7, #28]
 8017cb4:	4413      	add	r3, r2
 8017cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017cba:	4619      	mov	r1, r3
 8017cbc:	f7fd fa80 	bl	80151c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	7d1b      	ldrb	r3, [r3, #20]
 8017cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017cc8:	b2da      	uxtb	r2, r3
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017cce:	6a3b      	ldr	r3, [r7, #32]
 8017cd0:	025b      	lsls	r3, r3, #9
 8017cd2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017cd4:	e044      	b.n	8017d60 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	6a1b      	ldr	r3, [r3, #32]
 8017cda:	697a      	ldr	r2, [r7, #20]
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d01b      	beq.n	8017d18 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	699a      	ldr	r2, [r3, #24]
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d215      	bcs.n	8017d18 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	7858      	ldrb	r0, [r3, #1]
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	697a      	ldr	r2, [r7, #20]
 8017cfa:	f7fd f981 	bl	8015000 <disk_read>
 8017cfe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d009      	beq.n	8017d18 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2201      	movs	r2, #1
 8017d08:	755a      	strb	r2, [r3, #21]
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	2101      	movs	r1, #1
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fd fae9 	bl	80152e6 <unlock_fs>
 8017d14:	2301      	movs	r3, #1
 8017d16:	e053      	b.n	8017dc0 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	697a      	ldr	r2, [r7, #20]
 8017d1c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	699b      	ldr	r3, [r3, #24]
 8017d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d26:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017d2a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d901      	bls.n	8017d38 <f_write+0x2b8>
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	699b      	ldr	r3, [r3, #24]
 8017d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d46:	4413      	add	r3, r2
 8017d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d4a:	69f9      	ldr	r1, [r7, #28]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f7fd fa37 	bl	80151c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	7d1b      	ldrb	r3, [r3, #20]
 8017d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017d5a:	b2da      	uxtb	r2, r3
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017d60:	69fa      	ldr	r2, [r7, #28]
 8017d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d64:	4413      	add	r3, r2
 8017d66:	61fb      	str	r3, [r7, #28]
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	699a      	ldr	r2, [r3, #24]
 8017d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d6e:	441a      	add	r2, r3
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	619a      	str	r2, [r3, #24]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	68da      	ldr	r2, [r3, #12]
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	699b      	ldr	r3, [r3, #24]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	bf38      	it	cc
 8017d80:	461a      	movcc	r2, r3
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	60da      	str	r2, [r3, #12]
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	681a      	ldr	r2, [r3, #0]
 8017d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8c:	441a      	add	r2, r3
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	601a      	str	r2, [r3, #0]
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d96:	1ad3      	subs	r3, r2, r3
 8017d98:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	f47f aeb6 	bne.w	8017b0e <f_write+0x8e>
 8017da2:	e000      	b.n	8017da6 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017da4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	7d1b      	ldrb	r3, [r3, #20]
 8017daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dae:	b2da      	uxtb	r2, r3
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	2100      	movs	r1, #0
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7fd fa94 	bl	80152e6 <unlock_fs>
 8017dbe:	2300      	movs	r3, #0
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	3730      	adds	r7, #48	; 0x30
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b086      	sub	sp, #24
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f107 0208 	add.w	r2, r7, #8
 8017dd6:	4611      	mov	r1, r2
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f7ff f9e5 	bl	80171a8 <validate>
 8017dde:	4603      	mov	r3, r0
 8017de0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017de2:	7dfb      	ldrb	r3, [r7, #23]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d16d      	bne.n	8017ec4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	7d1b      	ldrb	r3, [r3, #20]
 8017dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d067      	beq.n	8017ec4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	7d1b      	ldrb	r3, [r3, #20]
 8017df8:	b25b      	sxtb	r3, r3
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	da1a      	bge.n	8017e34 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	7858      	ldrb	r0, [r3, #1]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6a1a      	ldr	r2, [r3, #32]
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	f7fd f917 	bl	8015040 <disk_write>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d006      	beq.n	8017e26 <f_sync+0x5e>
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	2101      	movs	r1, #1
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7fd fa62 	bl	80152e6 <unlock_fs>
 8017e22:	2301      	movs	r3, #1
 8017e24:	e055      	b.n	8017ed2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	7d1b      	ldrb	r3, [r3, #20]
 8017e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e2e:	b2da      	uxtb	r2, r3
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017e34:	f7fd f846 	bl	8014ec4 <get_fattime>
 8017e38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017e3a:	68ba      	ldr	r2, [r7, #8]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e40:	4619      	mov	r1, r3
 8017e42:	4610      	mov	r0, r2
 8017e44:	f7fd fc1a 	bl	801567c <move_window>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017e4c:	7dfb      	ldrb	r3, [r7, #23]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d138      	bne.n	8017ec4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	330b      	adds	r3, #11
 8017e5c:	781a      	ldrb	r2, [r3, #0]
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	330b      	adds	r3, #11
 8017e62:	f042 0220 	orr.w	r2, r2, #32
 8017e66:	b2d2      	uxtb	r2, r2
 8017e68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	6818      	ldr	r0, [r3, #0]
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	461a      	mov	r2, r3
 8017e74:	68f9      	ldr	r1, [r7, #12]
 8017e76:	f7fe f91f 	bl	80160b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	f103 021c 	add.w	r2, r3, #28
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	68db      	ldr	r3, [r3, #12]
 8017e84:	4619      	mov	r1, r3
 8017e86:	4610      	mov	r0, r2
 8017e88:	f7fd f96e 	bl	8015168 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	3316      	adds	r3, #22
 8017e90:	6939      	ldr	r1, [r7, #16]
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7fd f968 	bl	8015168 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	3312      	adds	r3, #18
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7fd f947 	bl	8015132 <st_word>
					fs->wflag = 1;
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	2201      	movs	r2, #1
 8017ea8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7fd fc13 	bl	80156d8 <sync_fs>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	7d1b      	ldrb	r3, [r3, #20]
 8017eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017ebe:	b2da      	uxtb	r2, r3
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	7dfa      	ldrb	r2, [r7, #23]
 8017ec8:	4611      	mov	r1, r2
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7fd fa0b 	bl	80152e6 <unlock_fs>
 8017ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3718      	adds	r7, #24
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b084      	sub	sp, #16
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f7ff ff70 	bl	8017dc8 <f_sync>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017eec:	7bfb      	ldrb	r3, [r7, #15]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d11d      	bne.n	8017f2e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f107 0208 	add.w	r2, r7, #8
 8017ef8:	4611      	mov	r1, r2
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ff f954 	bl	80171a8 <validate>
 8017f00:	4603      	mov	r3, r0
 8017f02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017f04:	7bfb      	ldrb	r3, [r7, #15]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d111      	bne.n	8017f2e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	691b      	ldr	r3, [r3, #16]
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7fd fb10 	bl	8015534 <dec_lock>
 8017f14:	4603      	mov	r3, r0
 8017f16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017f18:	7bfb      	ldrb	r3, [r7, #15]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d102      	bne.n	8017f24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2200      	movs	r2, #0
 8017f22:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8017f24:	68bb      	ldr	r3, [r7, #8]
 8017f26:	2100      	movs	r1, #0
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7fd f9dc 	bl	80152e6 <unlock_fs>
#endif
		}
	}
	return res;
 8017f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	3710      	adds	r7, #16
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}

08017f38 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b092      	sub	sp, #72	; 0x48
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8017f44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8017f48:	f107 030c 	add.w	r3, r7, #12
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fe fed6 	bl	8016d00 <find_volume>
 8017f54:	4603      	mov	r3, r0
 8017f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8017f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	f040 8099 	bne.w	8018096 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8017f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8017f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6c:	699a      	ldr	r2, [r3, #24]
 8017f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f70:	69db      	ldr	r3, [r3, #28]
 8017f72:	3b02      	subs	r3, #2
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d804      	bhi.n	8017f82 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8017f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7a:	699a      	ldr	r2, [r3, #24]
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	e089      	b.n	8018096 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8017f82:	2300      	movs	r3, #0
 8017f84:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8017f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d128      	bne.n	8017fe0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8017f8e:	2302      	movs	r3, #2
 8017f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f94:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8017f96:	f107 0314 	add.w	r3, r7, #20
 8017f9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7fd fc28 	bl	80157f2 <get_fat>
 8017fa2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8017fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017faa:	d103      	bne.n	8017fb4 <f_getfree+0x7c>
 8017fac:	2301      	movs	r3, #1
 8017fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017fb2:	e063      	b.n	801807c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	2b01      	cmp	r3, #1
 8017fb8:	d103      	bne.n	8017fc2 <f_getfree+0x8a>
 8017fba:	2302      	movs	r3, #2
 8017fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017fc0:	e05c      	b.n	801807c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8017fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d102      	bne.n	8017fce <f_getfree+0x96>
 8017fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fca:	3301      	adds	r3, #1
 8017fcc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8017fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd6:	69db      	ldr	r3, [r3, #28]
 8017fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d3db      	bcc.n	8017f96 <f_getfree+0x5e>
 8017fde:	e04d      	b.n	801807c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8017fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe2:	69db      	ldr	r3, [r3, #28]
 8017fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fea:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8017fec:	2300      	movs	r3, #0
 8017fee:	637b      	str	r3, [r7, #52]	; 0x34
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8017ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d113      	bne.n	8018022 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8017ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ffe:	1c5a      	adds	r2, r3, #1
 8018000:	63ba      	str	r2, [r7, #56]	; 0x38
 8018002:	4619      	mov	r1, r3
 8018004:	f7fd fb3a 	bl	801567c <move_window>
 8018008:	4603      	mov	r3, r0
 801800a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801800e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018012:	2b00      	cmp	r3, #0
 8018014:	d131      	bne.n	801807a <f_getfree+0x142>
							p = fs->win;
 8018016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018018:	3338      	adds	r3, #56	; 0x38
 801801a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801801c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018020:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8018022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	2b02      	cmp	r3, #2
 8018028:	d10f      	bne.n	801804a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801802a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801802c:	f7fd f846 	bl	80150bc <ld_word>
 8018030:	4603      	mov	r3, r0
 8018032:	2b00      	cmp	r3, #0
 8018034:	d102      	bne.n	801803c <f_getfree+0x104>
 8018036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018038:	3301      	adds	r3, #1
 801803a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803e:	3302      	adds	r3, #2
 8018040:	633b      	str	r3, [r7, #48]	; 0x30
 8018042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018044:	3b02      	subs	r3, #2
 8018046:	637b      	str	r3, [r7, #52]	; 0x34
 8018048:	e010      	b.n	801806c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801804a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801804c:	f7fd f84e 	bl	80150ec <ld_dword>
 8018050:	4603      	mov	r3, r0
 8018052:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8018056:	2b00      	cmp	r3, #0
 8018058:	d102      	bne.n	8018060 <f_getfree+0x128>
 801805a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801805c:	3301      	adds	r3, #1
 801805e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8018060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018062:	3304      	adds	r3, #4
 8018064:	633b      	str	r3, [r7, #48]	; 0x30
 8018066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018068:	3b04      	subs	r3, #4
 801806a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801806c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801806e:	3b01      	subs	r3, #1
 8018070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018074:	2b00      	cmp	r3, #0
 8018076:	d1bd      	bne.n	8017ff4 <f_getfree+0xbc>
 8018078:	e000      	b.n	801807c <f_getfree+0x144>
							if (res != FR_OK) break;
 801807a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018080:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8018082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018086:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8018088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808a:	791a      	ldrb	r2, [r3, #4]
 801808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808e:	f042 0201 	orr.w	r2, r2, #1
 8018092:	b2d2      	uxtb	r2, r2
 8018094:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8018096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018098:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 801809c:	4611      	mov	r1, r2
 801809e:	4618      	mov	r0, r3
 80180a0:	f7fd f921 	bl	80152e6 <unlock_fs>
 80180a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80180a8:	4618      	mov	r0, r3
 80180aa:	3748      	adds	r7, #72	; 0x48
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}

080180b0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b088      	sub	sp, #32
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	60f8      	str	r0, [r7, #12]
 80180b8:	60b9      	str	r1, [r7, #8]
 80180ba:	607a      	str	r2, [r7, #4]
	int n = 0;
 80180bc:	2300      	movs	r3, #0
 80180be:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80180c4:	e01b      	b.n	80180fe <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80180c6:	f107 0310 	add.w	r3, r7, #16
 80180ca:	f107 0114 	add.w	r1, r7, #20
 80180ce:	2201      	movs	r2, #1
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7ff fb67 	bl	80177a4 <f_read>
		if (rc != 1) break;
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	2b01      	cmp	r3, #1
 80180da:	d116      	bne.n	801810a <f_gets+0x5a>
		c = s[0];
 80180dc:	7d3b      	ldrb	r3, [r7, #20]
 80180de:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80180e0:	7dfb      	ldrb	r3, [r7, #23]
 80180e2:	2b0d      	cmp	r3, #13
 80180e4:	d100      	bne.n	80180e8 <f_gets+0x38>
 80180e6:	e00a      	b.n	80180fe <f_gets+0x4e>
		*p++ = c;
 80180e8:	69bb      	ldr	r3, [r7, #24]
 80180ea:	1c5a      	adds	r2, r3, #1
 80180ec:	61ba      	str	r2, [r7, #24]
 80180ee:	7dfa      	ldrb	r2, [r7, #23]
 80180f0:	701a      	strb	r2, [r3, #0]
		n++;
 80180f2:	69fb      	ldr	r3, [r7, #28]
 80180f4:	3301      	adds	r3, #1
 80180f6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80180f8:	7dfb      	ldrb	r3, [r7, #23]
 80180fa:	2b0a      	cmp	r3, #10
 80180fc:	d007      	beq.n	801810e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	3b01      	subs	r3, #1
 8018102:	69fa      	ldr	r2, [r7, #28]
 8018104:	429a      	cmp	r2, r3
 8018106:	dbde      	blt.n	80180c6 <f_gets+0x16>
 8018108:	e002      	b.n	8018110 <f_gets+0x60>
		if (rc != 1) break;
 801810a:	bf00      	nop
 801810c:	e000      	b.n	8018110 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801810e:	bf00      	nop
	}
	*p = 0;
 8018110:	69bb      	ldr	r3, [r7, #24]
 8018112:	2200      	movs	r2, #0
 8018114:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8018116:	69fb      	ldr	r3, [r7, #28]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d001      	beq.n	8018120 <f_gets+0x70>
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	e000      	b.n	8018122 <f_gets+0x72>
 8018120:	2300      	movs	r3, #0
}
 8018122:	4618      	mov	r0, r3
 8018124:	3720      	adds	r7, #32
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}

0801812a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801812a:	b580      	push	{r7, lr}
 801812c:	b084      	sub	sp, #16
 801812e:	af00      	add	r7, sp, #0
 8018130:	6078      	str	r0, [r7, #4]
 8018132:	460b      	mov	r3, r1
 8018134:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8018136:	78fb      	ldrb	r3, [r7, #3]
 8018138:	2b0a      	cmp	r3, #10
 801813a:	d103      	bne.n	8018144 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801813c:	210d      	movs	r1, #13
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7ff fff3 	bl	801812a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	685b      	ldr	r3, [r3, #4]
 8018148:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	2b00      	cmp	r3, #0
 801814e:	db25      	blt.n	801819c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	1c5a      	adds	r2, r3, #1
 8018154:	60fa      	str	r2, [r7, #12]
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	4413      	add	r3, r2
 801815a:	78fa      	ldrb	r2, [r7, #3]
 801815c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2b3c      	cmp	r3, #60	; 0x3c
 8018162:	dd12      	ble.n	801818a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	6818      	ldr	r0, [r3, #0]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f103 010c 	add.w	r1, r3, #12
 801816e:	68fa      	ldr	r2, [r7, #12]
 8018170:	f107 0308 	add.w	r3, r7, #8
 8018174:	f7ff fc84 	bl	8017a80 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018178:	68ba      	ldr	r2, [r7, #8]
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	429a      	cmp	r2, r3
 801817e:	d101      	bne.n	8018184 <putc_bfd+0x5a>
 8018180:	2300      	movs	r3, #0
 8018182:	e001      	b.n	8018188 <putc_bfd+0x5e>
 8018184:	f04f 33ff 	mov.w	r3, #4294967295
 8018188:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	68fa      	ldr	r2, [r7, #12]
 801818e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	689b      	ldr	r3, [r3, #8]
 8018194:	1c5a      	adds	r2, r3, #1
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	609a      	str	r2, [r3, #8]
 801819a:	e000      	b.n	801819e <putc_bfd+0x74>
	if (i < 0) return;
 801819c:	bf00      	nop
}
 801819e:	3710      	adds	r7, #16
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}

080181a4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	db17      	blt.n	80181e4 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6818      	ldr	r0, [r3, #0]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f103 010c 	add.w	r1, r3, #12
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	685b      	ldr	r3, [r3, #4]
 80181c2:	461a      	mov	r2, r3
 80181c4:	f107 030c 	add.w	r3, r7, #12
 80181c8:	f7ff fc5a 	bl	8017a80 <f_write>
 80181cc:	4603      	mov	r3, r0
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d108      	bne.n	80181e4 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	461a      	mov	r2, r3
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	429a      	cmp	r2, r3
 80181dc:	d102      	bne.n	80181e4 <putc_flush+0x40>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	689b      	ldr	r3, [r3, #8]
 80181e2:	e001      	b.n	80181e8 <putc_flush+0x44>
	return EOF;
 80181e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3710      	adds	r7, #16
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	683a      	ldr	r2, [r7, #0]
 80181fe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2200      	movs	r2, #0
 8018204:	605a      	str	r2, [r3, #4]
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	685a      	ldr	r2, [r3, #4]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	609a      	str	r2, [r3, #8]
}
 801820e:	bf00      	nop
 8018210:	370c      	adds	r7, #12
 8018212:	46bd      	mov	sp, r7
 8018214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018218:	4770      	bx	lr

0801821a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801821a:	b580      	push	{r7, lr}
 801821c:	b096      	sub	sp, #88	; 0x58
 801821e:	af00      	add	r7, sp, #0
 8018220:	6078      	str	r0, [r7, #4]
 8018222:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8018224:	f107 030c 	add.w	r3, r7, #12
 8018228:	6839      	ldr	r1, [r7, #0]
 801822a:	4618      	mov	r0, r3
 801822c:	f7ff ffe0 	bl	80181f0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8018230:	e009      	b.n	8018246 <f_puts+0x2c>
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	1c5a      	adds	r2, r3, #1
 8018236:	607a      	str	r2, [r7, #4]
 8018238:	781a      	ldrb	r2, [r3, #0]
 801823a:	f107 030c 	add.w	r3, r7, #12
 801823e:	4611      	mov	r1, r2
 8018240:	4618      	mov	r0, r3
 8018242:	f7ff ff72 	bl	801812a <putc_bfd>
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	781b      	ldrb	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1f1      	bne.n	8018232 <f_puts+0x18>
	return putc_flush(&pb);
 801824e:	f107 030c 	add.w	r3, r7, #12
 8018252:	4618      	mov	r0, r3
 8018254:	f7ff ffa6 	bl	80181a4 <putc_flush>
 8018258:	4603      	mov	r3, r0
}
 801825a:	4618      	mov	r0, r3
 801825c:	3758      	adds	r7, #88	; 0x58
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}
	...

08018264 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018264:	b480      	push	{r7}
 8018266:	b087      	sub	sp, #28
 8018268:	af00      	add	r7, sp, #0
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	60b9      	str	r1, [r7, #8]
 801826e:	4613      	mov	r3, r2
 8018270:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018272:	2301      	movs	r3, #1
 8018274:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018276:	2300      	movs	r3, #0
 8018278:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801827a:	4b1f      	ldr	r3, [pc, #124]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 801827c:	7a5b      	ldrb	r3, [r3, #9]
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b00      	cmp	r3, #0
 8018282:	d131      	bne.n	80182e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018284:	4b1c      	ldr	r3, [pc, #112]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 8018286:	7a5b      	ldrb	r3, [r3, #9]
 8018288:	b2db      	uxtb	r3, r3
 801828a:	461a      	mov	r2, r3
 801828c:	4b1a      	ldr	r3, [pc, #104]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 801828e:	2100      	movs	r1, #0
 8018290:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018292:	4b19      	ldr	r3, [pc, #100]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 8018294:	7a5b      	ldrb	r3, [r3, #9]
 8018296:	b2db      	uxtb	r3, r3
 8018298:	4a17      	ldr	r2, [pc, #92]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	4413      	add	r3, r2
 801829e:	68fa      	ldr	r2, [r7, #12]
 80182a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80182a2:	4b15      	ldr	r3, [pc, #84]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 80182a4:	7a5b      	ldrb	r3, [r3, #9]
 80182a6:	b2db      	uxtb	r3, r3
 80182a8:	461a      	mov	r2, r3
 80182aa:	4b13      	ldr	r3, [pc, #76]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 80182ac:	4413      	add	r3, r2
 80182ae:	79fa      	ldrb	r2, [r7, #7]
 80182b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80182b2:	4b11      	ldr	r3, [pc, #68]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 80182b4:	7a5b      	ldrb	r3, [r3, #9]
 80182b6:	b2db      	uxtb	r3, r3
 80182b8:	1c5a      	adds	r2, r3, #1
 80182ba:	b2d1      	uxtb	r1, r2
 80182bc:	4a0e      	ldr	r2, [pc, #56]	; (80182f8 <FATFS_LinkDriverEx+0x94>)
 80182be:	7251      	strb	r1, [r2, #9]
 80182c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80182c2:	7dbb      	ldrb	r3, [r7, #22]
 80182c4:	3330      	adds	r3, #48	; 0x30
 80182c6:	b2da      	uxtb	r2, r3
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	3301      	adds	r3, #1
 80182d0:	223a      	movs	r2, #58	; 0x3a
 80182d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	3302      	adds	r3, #2
 80182d8:	222f      	movs	r2, #47	; 0x2f
 80182da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	3303      	adds	r3, #3
 80182e0:	2200      	movs	r2, #0
 80182e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80182e4:	2300      	movs	r3, #0
 80182e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80182e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	371c      	adds	r7, #28
 80182ee:	46bd      	mov	sp, r7
 80182f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f4:	4770      	bx	lr
 80182f6:	bf00      	nop
 80182f8:	20000688 	.word	0x20000688

080182fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018306:	2200      	movs	r2, #0
 8018308:	6839      	ldr	r1, [r7, #0]
 801830a:	6878      	ldr	r0, [r7, #4]
 801830c:	f7ff ffaa 	bl	8018264 <FATFS_LinkDriverEx>
 8018310:	4603      	mov	r3, r0
}
 8018312:	4618      	mov	r0, r3
 8018314:	3708      	adds	r7, #8
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}
	...

0801831c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801831c:	b480      	push	{r7}
 801831e:	b085      	sub	sp, #20
 8018320:	af00      	add	r7, sp, #0
 8018322:	4603      	mov	r3, r0
 8018324:	6039      	str	r1, [r7, #0]
 8018326:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018328:	88fb      	ldrh	r3, [r7, #6]
 801832a:	2b7f      	cmp	r3, #127	; 0x7f
 801832c:	d802      	bhi.n	8018334 <ff_convert+0x18>
		c = chr;
 801832e:	88fb      	ldrh	r3, [r7, #6]
 8018330:	81fb      	strh	r3, [r7, #14]
 8018332:	e025      	b.n	8018380 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018334:	683b      	ldr	r3, [r7, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d00b      	beq.n	8018352 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801833a:	88fb      	ldrh	r3, [r7, #6]
 801833c:	2bff      	cmp	r3, #255	; 0xff
 801833e:	d805      	bhi.n	801834c <ff_convert+0x30>
 8018340:	88fb      	ldrh	r3, [r7, #6]
 8018342:	3b80      	subs	r3, #128	; 0x80
 8018344:	4a12      	ldr	r2, [pc, #72]	; (8018390 <ff_convert+0x74>)
 8018346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801834a:	e000      	b.n	801834e <ff_convert+0x32>
 801834c:	2300      	movs	r3, #0
 801834e:	81fb      	strh	r3, [r7, #14]
 8018350:	e016      	b.n	8018380 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018352:	2300      	movs	r3, #0
 8018354:	81fb      	strh	r3, [r7, #14]
 8018356:	e009      	b.n	801836c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018358:	89fb      	ldrh	r3, [r7, #14]
 801835a:	4a0d      	ldr	r2, [pc, #52]	; (8018390 <ff_convert+0x74>)
 801835c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018360:	88fa      	ldrh	r2, [r7, #6]
 8018362:	429a      	cmp	r2, r3
 8018364:	d006      	beq.n	8018374 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018366:	89fb      	ldrh	r3, [r7, #14]
 8018368:	3301      	adds	r3, #1
 801836a:	81fb      	strh	r3, [r7, #14]
 801836c:	89fb      	ldrh	r3, [r7, #14]
 801836e:	2b7f      	cmp	r3, #127	; 0x7f
 8018370:	d9f2      	bls.n	8018358 <ff_convert+0x3c>
 8018372:	e000      	b.n	8018376 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018374:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018376:	89fb      	ldrh	r3, [r7, #14]
 8018378:	3380      	adds	r3, #128	; 0x80
 801837a:	b29b      	uxth	r3, r3
 801837c:	b2db      	uxtb	r3, r3
 801837e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018380:	89fb      	ldrh	r3, [r7, #14]
}
 8018382:	4618      	mov	r0, r3
 8018384:	3714      	adds	r7, #20
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr
 801838e:	bf00      	nop
 8018390:	0801f5dc 	.word	0x0801f5dc

08018394 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018394:	b480      	push	{r7}
 8018396:	b087      	sub	sp, #28
 8018398:	af00      	add	r7, sp, #0
 801839a:	4603      	mov	r3, r0
 801839c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801839e:	88fb      	ldrh	r3, [r7, #6]
 80183a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80183a4:	d201      	bcs.n	80183aa <ff_wtoupper+0x16>
 80183a6:	4b3e      	ldr	r3, [pc, #248]	; (80184a0 <ff_wtoupper+0x10c>)
 80183a8:	e000      	b.n	80183ac <ff_wtoupper+0x18>
 80183aa:	4b3e      	ldr	r3, [pc, #248]	; (80184a4 <ff_wtoupper+0x110>)
 80183ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	1c9a      	adds	r2, r3, #2
 80183b2:	617a      	str	r2, [r7, #20]
 80183b4:	881b      	ldrh	r3, [r3, #0]
 80183b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80183b8:	8a7b      	ldrh	r3, [r7, #18]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d068      	beq.n	8018490 <ff_wtoupper+0xfc>
 80183be:	88fa      	ldrh	r2, [r7, #6]
 80183c0:	8a7b      	ldrh	r3, [r7, #18]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d364      	bcc.n	8018490 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80183c6:	697b      	ldr	r3, [r7, #20]
 80183c8:	1c9a      	adds	r2, r3, #2
 80183ca:	617a      	str	r2, [r7, #20]
 80183cc:	881b      	ldrh	r3, [r3, #0]
 80183ce:	823b      	strh	r3, [r7, #16]
 80183d0:	8a3b      	ldrh	r3, [r7, #16]
 80183d2:	0a1b      	lsrs	r3, r3, #8
 80183d4:	81fb      	strh	r3, [r7, #14]
 80183d6:	8a3b      	ldrh	r3, [r7, #16]
 80183d8:	b2db      	uxtb	r3, r3
 80183da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80183dc:	88fa      	ldrh	r2, [r7, #6]
 80183de:	8a79      	ldrh	r1, [r7, #18]
 80183e0:	8a3b      	ldrh	r3, [r7, #16]
 80183e2:	440b      	add	r3, r1
 80183e4:	429a      	cmp	r2, r3
 80183e6:	da49      	bge.n	801847c <ff_wtoupper+0xe8>
			switch (cmd) {
 80183e8:	89fb      	ldrh	r3, [r7, #14]
 80183ea:	2b08      	cmp	r3, #8
 80183ec:	d84f      	bhi.n	801848e <ff_wtoupper+0xfa>
 80183ee:	a201      	add	r2, pc, #4	; (adr r2, 80183f4 <ff_wtoupper+0x60>)
 80183f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183f4:	08018419 	.word	0x08018419
 80183f8:	0801842b 	.word	0x0801842b
 80183fc:	08018441 	.word	0x08018441
 8018400:	08018449 	.word	0x08018449
 8018404:	08018451 	.word	0x08018451
 8018408:	08018459 	.word	0x08018459
 801840c:	08018461 	.word	0x08018461
 8018410:	08018469 	.word	0x08018469
 8018414:	08018471 	.word	0x08018471
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018418:	88fa      	ldrh	r2, [r7, #6]
 801841a:	8a7b      	ldrh	r3, [r7, #18]
 801841c:	1ad3      	subs	r3, r2, r3
 801841e:	005b      	lsls	r3, r3, #1
 8018420:	697a      	ldr	r2, [r7, #20]
 8018422:	4413      	add	r3, r2
 8018424:	881b      	ldrh	r3, [r3, #0]
 8018426:	80fb      	strh	r3, [r7, #6]
 8018428:	e027      	b.n	801847a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801842a:	88fa      	ldrh	r2, [r7, #6]
 801842c:	8a7b      	ldrh	r3, [r7, #18]
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	b29b      	uxth	r3, r3
 8018432:	f003 0301 	and.w	r3, r3, #1
 8018436:	b29b      	uxth	r3, r3
 8018438:	88fa      	ldrh	r2, [r7, #6]
 801843a:	1ad3      	subs	r3, r2, r3
 801843c:	80fb      	strh	r3, [r7, #6]
 801843e:	e01c      	b.n	801847a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018440:	88fb      	ldrh	r3, [r7, #6]
 8018442:	3b10      	subs	r3, #16
 8018444:	80fb      	strh	r3, [r7, #6]
 8018446:	e018      	b.n	801847a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018448:	88fb      	ldrh	r3, [r7, #6]
 801844a:	3b20      	subs	r3, #32
 801844c:	80fb      	strh	r3, [r7, #6]
 801844e:	e014      	b.n	801847a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018450:	88fb      	ldrh	r3, [r7, #6]
 8018452:	3b30      	subs	r3, #48	; 0x30
 8018454:	80fb      	strh	r3, [r7, #6]
 8018456:	e010      	b.n	801847a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018458:	88fb      	ldrh	r3, [r7, #6]
 801845a:	3b1a      	subs	r3, #26
 801845c:	80fb      	strh	r3, [r7, #6]
 801845e:	e00c      	b.n	801847a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018460:	88fb      	ldrh	r3, [r7, #6]
 8018462:	3308      	adds	r3, #8
 8018464:	80fb      	strh	r3, [r7, #6]
 8018466:	e008      	b.n	801847a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018468:	88fb      	ldrh	r3, [r7, #6]
 801846a:	3b50      	subs	r3, #80	; 0x50
 801846c:	80fb      	strh	r3, [r7, #6]
 801846e:	e004      	b.n	801847a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018470:	88fb      	ldrh	r3, [r7, #6]
 8018472:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018476:	80fb      	strh	r3, [r7, #6]
 8018478:	bf00      	nop
			}
			break;
 801847a:	e008      	b.n	801848e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801847c:	89fb      	ldrh	r3, [r7, #14]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d195      	bne.n	80183ae <ff_wtoupper+0x1a>
 8018482:	8a3b      	ldrh	r3, [r7, #16]
 8018484:	005b      	lsls	r3, r3, #1
 8018486:	697a      	ldr	r2, [r7, #20]
 8018488:	4413      	add	r3, r2
 801848a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801848c:	e78f      	b.n	80183ae <ff_wtoupper+0x1a>
			break;
 801848e:	bf00      	nop
	}

	return chr;
 8018490:	88fb      	ldrh	r3, [r7, #6]
}
 8018492:	4618      	mov	r0, r3
 8018494:	371c      	adds	r7, #28
 8018496:	46bd      	mov	sp, r7
 8018498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop
 80184a0:	0801f6dc 	.word	0x0801f6dc
 80184a4:	0801f8d0 	.word	0x0801f8d0

080184a8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b086      	sub	sp, #24
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	4603      	mov	r3, r0
 80184b0:	6039      	str	r1, [r7, #0]
 80184b2:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 80184b4:	2300      	movs	r3, #0
 80184b6:	60fb      	str	r3, [r7, #12]
 80184b8:	2300      	movs	r3, #0
 80184ba:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 80184bc:	f107 030c 	add.w	r3, r7, #12
 80184c0:	4618      	mov	r0, r3
 80184c2:	f000 f959 	bl	8018778 <osMutexCreate>
 80184c6:	4602      	mov	r2, r0
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	bf14      	ite	ne
 80184d4:	2301      	movne	r3, #1
 80184d6:	2300      	moveq	r3, #0
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	617b      	str	r3, [r7, #20]

    return ret;
 80184dc:	697b      	ldr	r3, [r7, #20]
}
 80184de:	4618      	mov	r0, r3
 80184e0:	3718      	adds	r7, #24
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b082      	sub	sp, #8
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 f9de 	bl	80188b0 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 80184f4:	2301      	movs	r3, #1
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3708      	adds	r7, #8
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}

080184fe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80184fe:	b580      	push	{r7, lr}
 8018500:	b084      	sub	sp, #16
 8018502:	af00      	add	r7, sp, #0
 8018504:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8018506:	2300      	movs	r3, #0
 8018508:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 801850a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f000 f94a 	bl	80187a8 <osMutexWait>
 8018514:	4603      	mov	r3, r0
 8018516:	2b00      	cmp	r3, #0
 8018518:	d101      	bne.n	801851e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801851a:	2301      	movs	r3, #1
 801851c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801851e:	68fb      	ldr	r3, [r7, #12]
}
 8018520:	4618      	mov	r0, r3
 8018522:	3710      	adds	r7, #16
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	f000 f987 	bl	8018844 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8018536:	bf00      	nop
 8018538:	3708      	adds	r7, #8
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}

0801853e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801853e:	b480      	push	{r7}
 8018540:	b085      	sub	sp, #20
 8018542:	af00      	add	r7, sp, #0
 8018544:	4603      	mov	r3, r0
 8018546:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018548:	2300      	movs	r3, #0
 801854a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801854c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018550:	2b84      	cmp	r3, #132	; 0x84
 8018552:	d005      	beq.n	8018560 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018554:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	4413      	add	r3, r2
 801855c:	3303      	adds	r3, #3
 801855e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018560:	68fb      	ldr	r3, [r7, #12]
}
 8018562:	4618      	mov	r0, r3
 8018564:	3714      	adds	r7, #20
 8018566:	46bd      	mov	sp, r7
 8018568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856c:	4770      	bx	lr

0801856e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801856e:	b480      	push	{r7}
 8018570:	b083      	sub	sp, #12
 8018572:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018574:	f3ef 8305 	mrs	r3, IPSR
 8018578:	607b      	str	r3, [r7, #4]
  return(result);
 801857a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801857c:	2b00      	cmp	r3, #0
 801857e:	bf14      	ite	ne
 8018580:	2301      	movne	r3, #1
 8018582:	2300      	moveq	r3, #0
 8018584:	b2db      	uxtb	r3, r3
}
 8018586:	4618      	mov	r0, r3
 8018588:	370c      	adds	r7, #12
 801858a:	46bd      	mov	sp, r7
 801858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018590:	4770      	bx	lr

08018592 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018592:	b580      	push	{r7, lr}
 8018594:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018596:	f001 fa1b 	bl	80199d0 <vTaskStartScheduler>
  
  return osOK;
 801859a:	2300      	movs	r3, #0
}
 801859c:	4618      	mov	r0, r3
 801859e:	bd80      	pop	{r7, pc}

080185a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80185a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185a2:	b089      	sub	sp, #36	; 0x24
 80185a4:	af04      	add	r7, sp, #16
 80185a6:	6078      	str	r0, [r7, #4]
 80185a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	695b      	ldr	r3, [r3, #20]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d020      	beq.n	80185f4 <osThreadCreate+0x54>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	699b      	ldr	r3, [r3, #24]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d01c      	beq.n	80185f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	685c      	ldr	r4, [r3, #4]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681d      	ldr	r5, [r3, #0]
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	691e      	ldr	r6, [r3, #16]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7ff ffb6 	bl	801853e <makeFreeRtosPriority>
 80185d2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	695b      	ldr	r3, [r3, #20]
 80185d8:	687a      	ldr	r2, [r7, #4]
 80185da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185dc:	9202      	str	r2, [sp, #8]
 80185de:	9301      	str	r3, [sp, #4]
 80185e0:	9100      	str	r1, [sp, #0]
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	4632      	mov	r2, r6
 80185e6:	4629      	mov	r1, r5
 80185e8:	4620      	mov	r0, r4
 80185ea:	f001 f82d 	bl	8019648 <xTaskCreateStatic>
 80185ee:	4603      	mov	r3, r0
 80185f0:	60fb      	str	r3, [r7, #12]
 80185f2:	e01c      	b.n	801862e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	685c      	ldr	r4, [r3, #4]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018600:	b29e      	uxth	r6, r3
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018608:	4618      	mov	r0, r3
 801860a:	f7ff ff98 	bl	801853e <makeFreeRtosPriority>
 801860e:	4602      	mov	r2, r0
 8018610:	f107 030c 	add.w	r3, r7, #12
 8018614:	9301      	str	r3, [sp, #4]
 8018616:	9200      	str	r2, [sp, #0]
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	4632      	mov	r2, r6
 801861c:	4629      	mov	r1, r5
 801861e:	4620      	mov	r0, r4
 8018620:	f001 f86c 	bl	80196fc <xTaskCreate>
 8018624:	4603      	mov	r3, r0
 8018626:	2b01      	cmp	r3, #1
 8018628:	d001      	beq.n	801862e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801862a:	2300      	movs	r3, #0
 801862c:	e000      	b.n	8018630 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801862e:	68fb      	ldr	r3, [r7, #12]
}
 8018630:	4618      	mov	r0, r3
 8018632:	3714      	adds	r7, #20
 8018634:	46bd      	mov	sp, r7
 8018636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018638 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b084      	sub	sp, #16
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d001      	beq.n	801864e <osDelay+0x16>
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	e000      	b.n	8018650 <osDelay+0x18>
 801864e:	2301      	movs	r3, #1
 8018650:	4618      	mov	r0, r3
 8018652:	f001 f989 	bl	8019968 <vTaskDelay>
  
  return osOK;
 8018656:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018658:	4618      	mov	r0, r3
 801865a:	3710      	adds	r7, #16
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b086      	sub	sp, #24
 8018664:	af02      	add	r7, sp, #8
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801866a:	2300      	movs	r3, #0
 801866c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 801866e:	2300      	movs	r3, #0
 8018670:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8018672:	f7ff ff7c 	bl	801856e <inHandlerMode>
 8018676:	4603      	mov	r3, r0
 8018678:	2b00      	cmp	r3, #0
 801867a:	d01c      	beq.n	80186b6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 801867c:	6839      	ldr	r1, [r7, #0]
 801867e:	f107 0208 	add.w	r2, r7, #8
 8018682:	f107 030c 	add.w	r3, r7, #12
 8018686:	9300      	str	r3, [sp, #0]
 8018688:	4613      	mov	r3, r2
 801868a:	2201      	movs	r2, #1
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f002 f86d 	bl	801a76c <xTaskGenericNotifyFromISR>
 8018692:	4603      	mov	r3, r0
 8018694:	2b01      	cmp	r3, #1
 8018696:	d002      	beq.n	801869e <osSignalSet+0x3e>
      return 0x80000000;
 8018698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801869c:	e019      	b.n	80186d2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d015      	beq.n	80186d0 <osSignalSet+0x70>
 80186a4:	4b0d      	ldr	r3, [pc, #52]	; (80186dc <osSignalSet+0x7c>)
 80186a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186aa:	601a      	str	r2, [r3, #0]
 80186ac:	f3bf 8f4f 	dsb	sy
 80186b0:	f3bf 8f6f 	isb	sy
 80186b4:	e00c      	b.n	80186d0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80186b6:	6839      	ldr	r1, [r7, #0]
 80186b8:	f107 0308 	add.w	r3, r7, #8
 80186bc:	2201      	movs	r2, #1
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f001 ffa2 	bl	801a608 <xTaskGenericNotify>
 80186c4:	4603      	mov	r3, r0
 80186c6:	2b01      	cmp	r3, #1
 80186c8:	d002      	beq.n	80186d0 <osSignalSet+0x70>
    return 0x80000000;
 80186ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80186ce:	e000      	b.n	80186d2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80186d0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	3710      	adds	r7, #16
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	e000ed04 	.word	0xe000ed04

080186e0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80186e0:	b590      	push	{r4, r7, lr}
 80186e2:	b089      	sub	sp, #36	; 0x24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80186ec:	2300      	movs	r3, #0
 80186ee:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80186f0:	2300      	movs	r3, #0
 80186f2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186fa:	d103      	bne.n	8018704 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80186fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018700:	61fb      	str	r3, [r7, #28]
 8018702:	e009      	b.n	8018718 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d006      	beq.n	8018718 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d101      	bne.n	8018718 <osSignalWait+0x38>
      ticks = 1;
 8018714:	2301      	movs	r3, #1
 8018716:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8018718:	f7ff ff29 	bl	801856e <inHandlerMode>
 801871c:	4603      	mov	r3, r0
 801871e:	2b00      	cmp	r3, #0
 8018720:	d002      	beq.n	8018728 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8018722:	2382      	movs	r3, #130	; 0x82
 8018724:	613b      	str	r3, [r7, #16]
 8018726:	e01b      	b.n	8018760 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8018728:	68b9      	ldr	r1, [r7, #8]
 801872a:	f107 0310 	add.w	r3, r7, #16
 801872e:	1d1a      	adds	r2, r3, #4
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	2000      	movs	r0, #0
 8018734:	f001 ff0e 	bl	801a554 <xTaskNotifyWait>
 8018738:	4603      	mov	r3, r0
 801873a:	2b01      	cmp	r3, #1
 801873c:	d008      	beq.n	8018750 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d102      	bne.n	801874a <osSignalWait+0x6a>
 8018744:	2300      	movs	r3, #0
 8018746:	613b      	str	r3, [r7, #16]
 8018748:	e00a      	b.n	8018760 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 801874a:	2340      	movs	r3, #64	; 0x40
 801874c:	613b      	str	r3, [r7, #16]
 801874e:	e007      	b.n	8018760 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	2b00      	cmp	r3, #0
 8018754:	da02      	bge.n	801875c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8018756:	2386      	movs	r3, #134	; 0x86
 8018758:	613b      	str	r3, [r7, #16]
 801875a:	e001      	b.n	8018760 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 801875c:	2308      	movs	r3, #8
 801875e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	461c      	mov	r4, r3
 8018764:	f107 0310 	add.w	r3, r7, #16
 8018768:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801876c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018770:	68f8      	ldr	r0, [r7, #12]
 8018772:	3724      	adds	r7, #36	; 0x24
 8018774:	46bd      	mov	sp, r7
 8018776:	bd90      	pop	{r4, r7, pc}

08018778 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d007      	beq.n	8018798 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	4619      	mov	r1, r3
 801878e:	2001      	movs	r0, #1
 8018790:	f000 fac1 	bl	8018d16 <xQueueCreateMutexStatic>
 8018794:	4603      	mov	r3, r0
 8018796:	e003      	b.n	80187a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8018798:	2001      	movs	r0, #1
 801879a:	f000 faa4 	bl	8018ce6 <xQueueCreateMutex>
 801879e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	3708      	adds	r7, #8
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b084      	sub	sp, #16
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80187b2:	2300      	movs	r3, #0
 80187b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d101      	bne.n	80187c0 <osMutexWait+0x18>
    return osErrorParameter;
 80187bc:	2380      	movs	r3, #128	; 0x80
 80187be:	e03a      	b.n	8018836 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80187c0:	2300      	movs	r3, #0
 80187c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187ca:	d103      	bne.n	80187d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80187cc:	f04f 33ff 	mov.w	r3, #4294967295
 80187d0:	60fb      	str	r3, [r7, #12]
 80187d2:	e009      	b.n	80187e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d006      	beq.n	80187e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d101      	bne.n	80187e8 <osMutexWait+0x40>
      ticks = 1;
 80187e4:	2301      	movs	r3, #1
 80187e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80187e8:	f7ff fec1 	bl	801856e <inHandlerMode>
 80187ec:	4603      	mov	r3, r0
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d017      	beq.n	8018822 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80187f2:	f107 0308 	add.w	r3, r7, #8
 80187f6:	461a      	mov	r2, r3
 80187f8:	2100      	movs	r1, #0
 80187fa:	6878      	ldr	r0, [r7, #4]
 80187fc:	f000 fd32 	bl	8019264 <xQueueReceiveFromISR>
 8018800:	4603      	mov	r3, r0
 8018802:	2b01      	cmp	r3, #1
 8018804:	d001      	beq.n	801880a <osMutexWait+0x62>
      return osErrorOS;
 8018806:	23ff      	movs	r3, #255	; 0xff
 8018808:	e015      	b.n	8018836 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801880a:	68bb      	ldr	r3, [r7, #8]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d011      	beq.n	8018834 <osMutexWait+0x8c>
 8018810:	4b0b      	ldr	r3, [pc, #44]	; (8018840 <osMutexWait+0x98>)
 8018812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018816:	601a      	str	r2, [r3, #0]
 8018818:	f3bf 8f4f 	dsb	sy
 801881c:	f3bf 8f6f 	isb	sy
 8018820:	e008      	b.n	8018834 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8018822:	68f9      	ldr	r1, [r7, #12]
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f000 fc15 	bl	8019054 <xQueueSemaphoreTake>
 801882a:	4603      	mov	r3, r0
 801882c:	2b01      	cmp	r3, #1
 801882e:	d001      	beq.n	8018834 <osMutexWait+0x8c>
    return osErrorOS;
 8018830:	23ff      	movs	r3, #255	; 0xff
 8018832:	e000      	b.n	8018836 <osMutexWait+0x8e>
  }
  
  return osOK;
 8018834:	2300      	movs	r3, #0
}
 8018836:	4618      	mov	r0, r3
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	e000ed04 	.word	0xe000ed04

08018844 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b084      	sub	sp, #16
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801884c:	2300      	movs	r3, #0
 801884e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8018850:	2300      	movs	r3, #0
 8018852:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8018854:	f7ff fe8b 	bl	801856e <inHandlerMode>
 8018858:	4603      	mov	r3, r0
 801885a:	2b00      	cmp	r3, #0
 801885c:	d016      	beq.n	801888c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801885e:	f107 0308 	add.w	r3, r7, #8
 8018862:	4619      	mov	r1, r3
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f000 fb6b 	bl	8018f40 <xQueueGiveFromISR>
 801886a:	4603      	mov	r3, r0
 801886c:	2b01      	cmp	r3, #1
 801886e:	d001      	beq.n	8018874 <osMutexRelease+0x30>
      return osErrorOS;
 8018870:	23ff      	movs	r3, #255	; 0xff
 8018872:	e017      	b.n	80188a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d013      	beq.n	80188a2 <osMutexRelease+0x5e>
 801887a:	4b0c      	ldr	r3, [pc, #48]	; (80188ac <osMutexRelease+0x68>)
 801887c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018880:	601a      	str	r2, [r3, #0]
 8018882:	f3bf 8f4f 	dsb	sy
 8018886:	f3bf 8f6f 	isb	sy
 801888a:	e00a      	b.n	80188a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801888c:	2300      	movs	r3, #0
 801888e:	2200      	movs	r2, #0
 8018890:	2100      	movs	r1, #0
 8018892:	6878      	ldr	r0, [r7, #4]
 8018894:	f000 fa5a 	bl	8018d4c <xQueueGenericSend>
 8018898:	4603      	mov	r3, r0
 801889a:	2b01      	cmp	r3, #1
 801889c:	d001      	beq.n	80188a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801889e:	23ff      	movs	r3, #255	; 0xff
 80188a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80188a2:	68fb      	ldr	r3, [r7, #12]
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3710      	adds	r7, #16
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	e000ed04 	.word	0xe000ed04

080188b0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80188b8:	f7ff fe59 	bl	801856e <inHandlerMode>
 80188bc:	4603      	mov	r3, r0
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d001      	beq.n	80188c6 <osMutexDelete+0x16>
    return osErrorISR;
 80188c2:	2382      	movs	r3, #130	; 0x82
 80188c4:	e003      	b.n	80188ce <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f000 fd49 	bl	801935e <vQueueDelete>

  return osOK;
 80188cc:	2300      	movs	r3, #0
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3708      	adds	r7, #8
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80188d6:	b480      	push	{r7}
 80188d8:	b083      	sub	sp, #12
 80188da:	af00      	add	r7, sp, #0
 80188dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f103 0208 	add.w	r2, r3, #8
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f04f 32ff 	mov.w	r2, #4294967295
 80188ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	f103 0208 	add.w	r2, r3, #8
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f103 0208 	add.w	r2, r3, #8
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2200      	movs	r2, #0
 8018908:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801890a:	bf00      	nop
 801890c:	370c      	adds	r7, #12
 801890e:	46bd      	mov	sp, r7
 8018910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018914:	4770      	bx	lr

08018916 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018916:	b480      	push	{r7}
 8018918:	b083      	sub	sp, #12
 801891a:	af00      	add	r7, sp, #0
 801891c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2200      	movs	r2, #0
 8018922:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018924:	bf00      	nop
 8018926:	370c      	adds	r7, #12
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018930:	b480      	push	{r7}
 8018932:	b085      	sub	sp, #20
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	685b      	ldr	r3, [r3, #4]
 801893e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	68fa      	ldr	r2, [r7, #12]
 8018944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	689a      	ldr	r2, [r3, #8]
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	689b      	ldr	r3, [r3, #8]
 8018952:	683a      	ldr	r2, [r7, #0]
 8018954:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	683a      	ldr	r2, [r7, #0]
 801895a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801895c:	683b      	ldr	r3, [r7, #0]
 801895e:	687a      	ldr	r2, [r7, #4]
 8018960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	1c5a      	adds	r2, r3, #1
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	601a      	str	r2, [r3, #0]
}
 801896c:	bf00      	nop
 801896e:	3714      	adds	r7, #20
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr

08018978 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018978:	b480      	push	{r7}
 801897a:	b085      	sub	sp, #20
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801898e:	d103      	bne.n	8018998 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	691b      	ldr	r3, [r3, #16]
 8018994:	60fb      	str	r3, [r7, #12]
 8018996:	e00c      	b.n	80189b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	3308      	adds	r3, #8
 801899c:	60fb      	str	r3, [r7, #12]
 801899e:	e002      	b.n	80189a6 <vListInsert+0x2e>
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	685b      	ldr	r3, [r3, #4]
 80189a4:	60fb      	str	r3, [r7, #12]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	685b      	ldr	r3, [r3, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	68ba      	ldr	r2, [r7, #8]
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d2f6      	bcs.n	80189a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	685a      	ldr	r2, [r3, #4]
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	685b      	ldr	r3, [r3, #4]
 80189be:	683a      	ldr	r2, [r7, #0]
 80189c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	68fa      	ldr	r2, [r7, #12]
 80189c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	683a      	ldr	r2, [r7, #0]
 80189cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	1c5a      	adds	r2, r3, #1
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	601a      	str	r2, [r3, #0]
}
 80189de:	bf00      	nop
 80189e0:	3714      	adds	r7, #20
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr

080189ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80189ea:	b480      	push	{r7}
 80189ec:	b085      	sub	sp, #20
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	691b      	ldr	r3, [r3, #16]
 80189f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	687a      	ldr	r2, [r7, #4]
 80189fe:	6892      	ldr	r2, [r2, #8]
 8018a00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	689b      	ldr	r3, [r3, #8]
 8018a06:	687a      	ldr	r2, [r7, #4]
 8018a08:	6852      	ldr	r2, [r2, #4]
 8018a0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d103      	bne.n	8018a1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	689a      	ldr	r2, [r3, #8]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	2200      	movs	r2, #0
 8018a22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	1e5a      	subs	r2, r3, #1
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	681b      	ldr	r3, [r3, #0]
}
 8018a32:	4618      	mov	r0, r3
 8018a34:	3714      	adds	r7, #20
 8018a36:	46bd      	mov	sp, r7
 8018a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3c:	4770      	bx	lr
	...

08018a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d109      	bne.n	8018a68 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a58:	f383 8811 	msr	BASEPRI, r3
 8018a5c:	f3bf 8f6f 	isb	sy
 8018a60:	f3bf 8f4f 	dsb	sy
 8018a64:	60bb      	str	r3, [r7, #8]
 8018a66:	e7fe      	b.n	8018a66 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8018a68:	f002 f8e8 	bl	801ac3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	681a      	ldr	r2, [r3, #0]
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a74:	68f9      	ldr	r1, [r7, #12]
 8018a76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018a78:	fb01 f303 	mul.w	r3, r1, r3
 8018a7c:	441a      	add	r2, r3
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	2200      	movs	r2, #0
 8018a86:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	681a      	ldr	r2, [r3, #0]
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	68f9      	ldr	r1, [r7, #12]
 8018a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018a9e:	fb01 f303 	mul.w	r3, r1, r3
 8018aa2:	441a      	add	r2, r3
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	22ff      	movs	r2, #255	; 0xff
 8018aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	22ff      	movs	r2, #255	; 0xff
 8018ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018ab8:	683b      	ldr	r3, [r7, #0]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d114      	bne.n	8018ae8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	691b      	ldr	r3, [r3, #16]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d01a      	beq.n	8018afc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	3310      	adds	r3, #16
 8018aca:	4618      	mov	r0, r3
 8018acc:	f001 f9be 	bl	8019e4c <xTaskRemoveFromEventList>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d012      	beq.n	8018afc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018ad6:	4b0d      	ldr	r3, [pc, #52]	; (8018b0c <xQueueGenericReset+0xcc>)
 8018ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018adc:	601a      	str	r2, [r3, #0]
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	f3bf 8f6f 	isb	sy
 8018ae6:	e009      	b.n	8018afc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	3310      	adds	r3, #16
 8018aec:	4618      	mov	r0, r3
 8018aee:	f7ff fef2 	bl	80188d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	3324      	adds	r3, #36	; 0x24
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7ff feed 	bl	80188d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018afc:	f002 f8cc 	bl	801ac98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018b00:	2301      	movs	r3, #1
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	3710      	adds	r7, #16
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	e000ed04 	.word	0xe000ed04

08018b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b08e      	sub	sp, #56	; 0x38
 8018b14:	af02      	add	r7, sp, #8
 8018b16:	60f8      	str	r0, [r7, #12]
 8018b18:	60b9      	str	r1, [r7, #8]
 8018b1a:	607a      	str	r2, [r7, #4]
 8018b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d109      	bne.n	8018b38 <xQueueGenericCreateStatic+0x28>
 8018b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b28:	f383 8811 	msr	BASEPRI, r3
 8018b2c:	f3bf 8f6f 	isb	sy
 8018b30:	f3bf 8f4f 	dsb	sy
 8018b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b36:	e7fe      	b.n	8018b36 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d109      	bne.n	8018b52 <xQueueGenericCreateStatic+0x42>
 8018b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b42:	f383 8811 	msr	BASEPRI, r3
 8018b46:	f3bf 8f6f 	isb	sy
 8018b4a:	f3bf 8f4f 	dsb	sy
 8018b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8018b50:	e7fe      	b.n	8018b50 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d002      	beq.n	8018b5e <xQueueGenericCreateStatic+0x4e>
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d001      	beq.n	8018b62 <xQueueGenericCreateStatic+0x52>
 8018b5e:	2301      	movs	r3, #1
 8018b60:	e000      	b.n	8018b64 <xQueueGenericCreateStatic+0x54>
 8018b62:	2300      	movs	r3, #0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d109      	bne.n	8018b7c <xQueueGenericCreateStatic+0x6c>
 8018b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b6c:	f383 8811 	msr	BASEPRI, r3
 8018b70:	f3bf 8f6f 	isb	sy
 8018b74:	f3bf 8f4f 	dsb	sy
 8018b78:	623b      	str	r3, [r7, #32]
 8018b7a:	e7fe      	b.n	8018b7a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d102      	bne.n	8018b88 <xQueueGenericCreateStatic+0x78>
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d101      	bne.n	8018b8c <xQueueGenericCreateStatic+0x7c>
 8018b88:	2301      	movs	r3, #1
 8018b8a:	e000      	b.n	8018b8e <xQueueGenericCreateStatic+0x7e>
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d109      	bne.n	8018ba6 <xQueueGenericCreateStatic+0x96>
 8018b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b96:	f383 8811 	msr	BASEPRI, r3
 8018b9a:	f3bf 8f6f 	isb	sy
 8018b9e:	f3bf 8f4f 	dsb	sy
 8018ba2:	61fb      	str	r3, [r7, #28]
 8018ba4:	e7fe      	b.n	8018ba4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018ba6:	2348      	movs	r3, #72	; 0x48
 8018ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	2b48      	cmp	r3, #72	; 0x48
 8018bae:	d009      	beq.n	8018bc4 <xQueueGenericCreateStatic+0xb4>
 8018bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb4:	f383 8811 	msr	BASEPRI, r3
 8018bb8:	f3bf 8f6f 	isb	sy
 8018bbc:	f3bf 8f4f 	dsb	sy
 8018bc0:	61bb      	str	r3, [r7, #24]
 8018bc2:	e7fe      	b.n	8018bc2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018bc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d00d      	beq.n	8018bec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018bd8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bde:	9300      	str	r3, [sp, #0]
 8018be0:	4613      	mov	r3, r2
 8018be2:	687a      	ldr	r2, [r7, #4]
 8018be4:	68b9      	ldr	r1, [r7, #8]
 8018be6:	68f8      	ldr	r0, [r7, #12]
 8018be8:	f000 f844 	bl	8018c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3730      	adds	r7, #48	; 0x30
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}

08018bf6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018bf6:	b580      	push	{r7, lr}
 8018bf8:	b08a      	sub	sp, #40	; 0x28
 8018bfa:	af02      	add	r7, sp, #8
 8018bfc:	60f8      	str	r0, [r7, #12]
 8018bfe:	60b9      	str	r1, [r7, #8]
 8018c00:	4613      	mov	r3, r2
 8018c02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d109      	bne.n	8018c1e <xQueueGenericCreate+0x28>
 8018c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c0e:	f383 8811 	msr	BASEPRI, r3
 8018c12:	f3bf 8f6f 	isb	sy
 8018c16:	f3bf 8f4f 	dsb	sy
 8018c1a:	613b      	str	r3, [r7, #16]
 8018c1c:	e7fe      	b.n	8018c1c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d102      	bne.n	8018c2a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018c24:	2300      	movs	r3, #0
 8018c26:	61fb      	str	r3, [r7, #28]
 8018c28:	e004      	b.n	8018c34 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	68ba      	ldr	r2, [r7, #8]
 8018c2e:	fb02 f303 	mul.w	r3, r2, r3
 8018c32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018c34:	69fb      	ldr	r3, [r7, #28]
 8018c36:	3348      	adds	r3, #72	; 0x48
 8018c38:	4618      	mov	r0, r3
 8018c3a:	f002 f919 	bl	801ae70 <pvPortMalloc>
 8018c3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018c40:	69bb      	ldr	r3, [r7, #24]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d011      	beq.n	8018c6a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018c46:	69bb      	ldr	r3, [r7, #24]
 8018c48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	3348      	adds	r3, #72	; 0x48
 8018c4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018c50:	69bb      	ldr	r3, [r7, #24]
 8018c52:	2200      	movs	r2, #0
 8018c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018c58:	79fa      	ldrb	r2, [r7, #7]
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	9300      	str	r3, [sp, #0]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	697a      	ldr	r2, [r7, #20]
 8018c62:	68b9      	ldr	r1, [r7, #8]
 8018c64:	68f8      	ldr	r0, [r7, #12]
 8018c66:	f000 f805 	bl	8018c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018c6a:	69bb      	ldr	r3, [r7, #24]
	}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3720      	adds	r7, #32
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	60f8      	str	r0, [r7, #12]
 8018c7c:	60b9      	str	r1, [r7, #8]
 8018c7e:	607a      	str	r2, [r7, #4]
 8018c80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d103      	bne.n	8018c90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018c88:	69bb      	ldr	r3, [r7, #24]
 8018c8a:	69ba      	ldr	r2, [r7, #24]
 8018c8c:	601a      	str	r2, [r3, #0]
 8018c8e:	e002      	b.n	8018c96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018c90:	69bb      	ldr	r3, [r7, #24]
 8018c92:	687a      	ldr	r2, [r7, #4]
 8018c94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018c96:	69bb      	ldr	r3, [r7, #24]
 8018c98:	68fa      	ldr	r2, [r7, #12]
 8018c9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018c9c:	69bb      	ldr	r3, [r7, #24]
 8018c9e:	68ba      	ldr	r2, [r7, #8]
 8018ca0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018ca2:	2101      	movs	r1, #1
 8018ca4:	69b8      	ldr	r0, [r7, #24]
 8018ca6:	f7ff fecb 	bl	8018a40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018caa:	bf00      	nop
 8018cac:	3710      	adds	r7, #16
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}

08018cb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8018cb2:	b580      	push	{r7, lr}
 8018cb4:	b082      	sub	sp, #8
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d00e      	beq.n	8018cde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	2200      	movs	r2, #0
 8018cca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	2100      	movs	r1, #0
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 f837 	bl	8018d4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8018cde:	bf00      	nop
 8018ce0:	3708      	adds	r7, #8
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}

08018ce6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8018ce6:	b580      	push	{r7, lr}
 8018ce8:	b086      	sub	sp, #24
 8018cea:	af00      	add	r7, sp, #0
 8018cec:	4603      	mov	r3, r0
 8018cee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	617b      	str	r3, [r7, #20]
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018cf8:	79fb      	ldrb	r3, [r7, #7]
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	6939      	ldr	r1, [r7, #16]
 8018cfe:	6978      	ldr	r0, [r7, #20]
 8018d00:	f7ff ff79 	bl	8018bf6 <xQueueGenericCreate>
 8018d04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018d06:	68f8      	ldr	r0, [r7, #12]
 8018d08:	f7ff ffd3 	bl	8018cb2 <prvInitialiseMutex>

		return xNewQueue;
 8018d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3718      	adds	r7, #24
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}

08018d16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b088      	sub	sp, #32
 8018d1a:	af02      	add	r7, sp, #8
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	6039      	str	r1, [r7, #0]
 8018d20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018d22:	2301      	movs	r3, #1
 8018d24:	617b      	str	r3, [r7, #20]
 8018d26:	2300      	movs	r3, #0
 8018d28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018d2a:	79fb      	ldrb	r3, [r7, #7]
 8018d2c:	9300      	str	r3, [sp, #0]
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	2200      	movs	r2, #0
 8018d32:	6939      	ldr	r1, [r7, #16]
 8018d34:	6978      	ldr	r0, [r7, #20]
 8018d36:	f7ff feeb 	bl	8018b10 <xQueueGenericCreateStatic>
 8018d3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018d3c:	68f8      	ldr	r0, [r7, #12]
 8018d3e:	f7ff ffb8 	bl	8018cb2 <prvInitialiseMutex>

		return xNewQueue;
 8018d42:	68fb      	ldr	r3, [r7, #12]
	}
 8018d44:	4618      	mov	r0, r3
 8018d46:	3718      	adds	r7, #24
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}

08018d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b08e      	sub	sp, #56	; 0x38
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	60b9      	str	r1, [r7, #8]
 8018d56:	607a      	str	r2, [r7, #4]
 8018d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d109      	bne.n	8018d7c <xQueueGenericSend+0x30>
 8018d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d6c:	f383 8811 	msr	BASEPRI, r3
 8018d70:	f3bf 8f6f 	isb	sy
 8018d74:	f3bf 8f4f 	dsb	sy
 8018d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d7a:	e7fe      	b.n	8018d7a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d103      	bne.n	8018d8a <xQueueGenericSend+0x3e>
 8018d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d101      	bne.n	8018d8e <xQueueGenericSend+0x42>
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	e000      	b.n	8018d90 <xQueueGenericSend+0x44>
 8018d8e:	2300      	movs	r3, #0
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d109      	bne.n	8018da8 <xQueueGenericSend+0x5c>
 8018d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d98:	f383 8811 	msr	BASEPRI, r3
 8018d9c:	f3bf 8f6f 	isb	sy
 8018da0:	f3bf 8f4f 	dsb	sy
 8018da4:	627b      	str	r3, [r7, #36]	; 0x24
 8018da6:	e7fe      	b.n	8018da6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	2b02      	cmp	r3, #2
 8018dac:	d103      	bne.n	8018db6 <xQueueGenericSend+0x6a>
 8018dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	d101      	bne.n	8018dba <xQueueGenericSend+0x6e>
 8018db6:	2301      	movs	r3, #1
 8018db8:	e000      	b.n	8018dbc <xQueueGenericSend+0x70>
 8018dba:	2300      	movs	r3, #0
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d109      	bne.n	8018dd4 <xQueueGenericSend+0x88>
 8018dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc4:	f383 8811 	msr	BASEPRI, r3
 8018dc8:	f3bf 8f6f 	isb	sy
 8018dcc:	f3bf 8f4f 	dsb	sy
 8018dd0:	623b      	str	r3, [r7, #32]
 8018dd2:	e7fe      	b.n	8018dd2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018dd4:	f001 f9f0 	bl	801a1b8 <xTaskGetSchedulerState>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d102      	bne.n	8018de4 <xQueueGenericSend+0x98>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d101      	bne.n	8018de8 <xQueueGenericSend+0x9c>
 8018de4:	2301      	movs	r3, #1
 8018de6:	e000      	b.n	8018dea <xQueueGenericSend+0x9e>
 8018de8:	2300      	movs	r3, #0
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d109      	bne.n	8018e02 <xQueueGenericSend+0xb6>
 8018dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df2:	f383 8811 	msr	BASEPRI, r3
 8018df6:	f3bf 8f6f 	isb	sy
 8018dfa:	f3bf 8f4f 	dsb	sy
 8018dfe:	61fb      	str	r3, [r7, #28]
 8018e00:	e7fe      	b.n	8018e00 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018e02:	f001 ff1b 	bl	801ac3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	d302      	bcc.n	8018e18 <xQueueGenericSend+0xcc>
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	2b02      	cmp	r3, #2
 8018e16:	d129      	bne.n	8018e6c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018e18:	683a      	ldr	r2, [r7, #0]
 8018e1a:	68b9      	ldr	r1, [r7, #8]
 8018e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e1e:	f000 fad8 	bl	80193d2 <prvCopyDataToQueue>
 8018e22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d010      	beq.n	8018e4e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e2e:	3324      	adds	r3, #36	; 0x24
 8018e30:	4618      	mov	r0, r3
 8018e32:	f001 f80b 	bl	8019e4c <xTaskRemoveFromEventList>
 8018e36:	4603      	mov	r3, r0
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d013      	beq.n	8018e64 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018e3c:	4b3f      	ldr	r3, [pc, #252]	; (8018f3c <xQueueGenericSend+0x1f0>)
 8018e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e42:	601a      	str	r2, [r3, #0]
 8018e44:	f3bf 8f4f 	dsb	sy
 8018e48:	f3bf 8f6f 	isb	sy
 8018e4c:	e00a      	b.n	8018e64 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d007      	beq.n	8018e64 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018e54:	4b39      	ldr	r3, [pc, #228]	; (8018f3c <xQueueGenericSend+0x1f0>)
 8018e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e5a:	601a      	str	r2, [r3, #0]
 8018e5c:	f3bf 8f4f 	dsb	sy
 8018e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018e64:	f001 ff18 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 8018e68:	2301      	movs	r3, #1
 8018e6a:	e063      	b.n	8018f34 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d103      	bne.n	8018e7a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018e72:	f001 ff11 	bl	801ac98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018e76:	2300      	movs	r3, #0
 8018e78:	e05c      	b.n	8018f34 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d106      	bne.n	8018e8e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018e80:	f107 0314 	add.w	r3, r7, #20
 8018e84:	4618      	mov	r0, r3
 8018e86:	f001 f843 	bl	8019f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018e8e:	f001 ff03 	bl	801ac98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018e92:	f000 fdfb 	bl	8019a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018e96:	f001 fed1 	bl	801ac3c <vPortEnterCritical>
 8018e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018ea0:	b25b      	sxtb	r3, r3
 8018ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ea6:	d103      	bne.n	8018eb0 <xQueueGenericSend+0x164>
 8018ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018eb6:	b25b      	sxtb	r3, r3
 8018eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ebc:	d103      	bne.n	8018ec6 <xQueueGenericSend+0x17a>
 8018ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018ec6:	f001 fee7 	bl	801ac98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018eca:	1d3a      	adds	r2, r7, #4
 8018ecc:	f107 0314 	add.w	r3, r7, #20
 8018ed0:	4611      	mov	r1, r2
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f001 f832 	bl	8019f3c <xTaskCheckForTimeOut>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d124      	bne.n	8018f28 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ee0:	f000 fb6f 	bl	80195c2 <prvIsQueueFull>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d018      	beq.n	8018f1c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eec:	3310      	adds	r3, #16
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	4611      	mov	r1, r2
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f000 ff86 	bl	8019e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018efa:	f000 fafa 	bl	80194f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018efe:	f000 fdd3 	bl	8019aa8 <xTaskResumeAll>
 8018f02:	4603      	mov	r3, r0
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	f47f af7c 	bne.w	8018e02 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8018f0a:	4b0c      	ldr	r3, [pc, #48]	; (8018f3c <xQueueGenericSend+0x1f0>)
 8018f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f10:	601a      	str	r2, [r3, #0]
 8018f12:	f3bf 8f4f 	dsb	sy
 8018f16:	f3bf 8f6f 	isb	sy
 8018f1a:	e772      	b.n	8018e02 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f1e:	f000 fae8 	bl	80194f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018f22:	f000 fdc1 	bl	8019aa8 <xTaskResumeAll>
 8018f26:	e76c      	b.n	8018e02 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f2a:	f000 fae2 	bl	80194f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018f2e:	f000 fdbb 	bl	8019aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018f34:	4618      	mov	r0, r3
 8018f36:	3738      	adds	r7, #56	; 0x38
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	e000ed04 	.word	0xe000ed04

08018f40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b08e      	sub	sp, #56	; 0x38
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d109      	bne.n	8018f68 <xQueueGiveFromISR+0x28>
 8018f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f58:	f383 8811 	msr	BASEPRI, r3
 8018f5c:	f3bf 8f6f 	isb	sy
 8018f60:	f3bf 8f4f 	dsb	sy
 8018f64:	623b      	str	r3, [r7, #32]
 8018f66:	e7fe      	b.n	8018f66 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d009      	beq.n	8018f84 <xQueueGiveFromISR+0x44>
 8018f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f74:	f383 8811 	msr	BASEPRI, r3
 8018f78:	f3bf 8f6f 	isb	sy
 8018f7c:	f3bf 8f4f 	dsb	sy
 8018f80:	61fb      	str	r3, [r7, #28]
 8018f82:	e7fe      	b.n	8018f82 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d103      	bne.n	8018f94 <xQueueGiveFromISR+0x54>
 8018f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f8e:	689b      	ldr	r3, [r3, #8]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d101      	bne.n	8018f98 <xQueueGiveFromISR+0x58>
 8018f94:	2301      	movs	r3, #1
 8018f96:	e000      	b.n	8018f9a <xQueueGiveFromISR+0x5a>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d109      	bne.n	8018fb2 <xQueueGiveFromISR+0x72>
 8018f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa2:	f383 8811 	msr	BASEPRI, r3
 8018fa6:	f3bf 8f6f 	isb	sy
 8018faa:	f3bf 8f4f 	dsb	sy
 8018fae:	61bb      	str	r3, [r7, #24]
 8018fb0:	e7fe      	b.n	8018fb0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018fb2:	f001 ff1f 	bl	801adf4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8018fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fbe:	f383 8811 	msr	BASEPRI, r3
 8018fc2:	f3bf 8f6f 	isb	sy
 8018fc6:	f3bf 8f4f 	dsb	sy
 8018fca:	617a      	str	r2, [r7, #20]
 8018fcc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018fce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	d22b      	bcs.n	801903a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fee:	1c5a      	adds	r2, r3, #1
 8018ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ffc:	d112      	bne.n	8019024 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019002:	2b00      	cmp	r3, #0
 8019004:	d016      	beq.n	8019034 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	3324      	adds	r3, #36	; 0x24
 801900a:	4618      	mov	r0, r3
 801900c:	f000 ff1e 	bl	8019e4c <xTaskRemoveFromEventList>
 8019010:	4603      	mov	r3, r0
 8019012:	2b00      	cmp	r3, #0
 8019014:	d00e      	beq.n	8019034 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00b      	beq.n	8019034 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	2201      	movs	r2, #1
 8019020:	601a      	str	r2, [r3, #0]
 8019022:	e007      	b.n	8019034 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019028:	3301      	adds	r3, #1
 801902a:	b2db      	uxtb	r3, r3
 801902c:	b25a      	sxtb	r2, r3
 801902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019034:	2301      	movs	r3, #1
 8019036:	637b      	str	r3, [r7, #52]	; 0x34
 8019038:	e001      	b.n	801903e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801903a:	2300      	movs	r3, #0
 801903c:	637b      	str	r3, [r7, #52]	; 0x34
 801903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019040:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801904a:	4618      	mov	r0, r3
 801904c:	3738      	adds	r7, #56	; 0x38
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
	...

08019054 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b08e      	sub	sp, #56	; 0x38
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801905e:	2300      	movs	r3, #0
 8019060:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019066:	2300      	movs	r3, #0
 8019068:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801906c:	2b00      	cmp	r3, #0
 801906e:	d109      	bne.n	8019084 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8019070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019074:	f383 8811 	msr	BASEPRI, r3
 8019078:	f3bf 8f6f 	isb	sy
 801907c:	f3bf 8f4f 	dsb	sy
 8019080:	623b      	str	r3, [r7, #32]
 8019082:	e7fe      	b.n	8019082 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019088:	2b00      	cmp	r3, #0
 801908a:	d009      	beq.n	80190a0 <xQueueSemaphoreTake+0x4c>
 801908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019090:	f383 8811 	msr	BASEPRI, r3
 8019094:	f3bf 8f6f 	isb	sy
 8019098:	f3bf 8f4f 	dsb	sy
 801909c:	61fb      	str	r3, [r7, #28]
 801909e:	e7fe      	b.n	801909e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80190a0:	f001 f88a 	bl	801a1b8 <xTaskGetSchedulerState>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d102      	bne.n	80190b0 <xQueueSemaphoreTake+0x5c>
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d101      	bne.n	80190b4 <xQueueSemaphoreTake+0x60>
 80190b0:	2301      	movs	r3, #1
 80190b2:	e000      	b.n	80190b6 <xQueueSemaphoreTake+0x62>
 80190b4:	2300      	movs	r3, #0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d109      	bne.n	80190ce <xQueueSemaphoreTake+0x7a>
 80190ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190be:	f383 8811 	msr	BASEPRI, r3
 80190c2:	f3bf 8f6f 	isb	sy
 80190c6:	f3bf 8f4f 	dsb	sy
 80190ca:	61bb      	str	r3, [r7, #24]
 80190cc:	e7fe      	b.n	80190cc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80190ce:	f001 fdb5 	bl	801ac3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80190d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190d6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80190d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d024      	beq.n	8019128 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80190de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e0:	1e5a      	subs	r2, r3, #1
 80190e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80190e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d104      	bne.n	80190f8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80190ee:	f001 fa1d 	bl	801a52c <pvTaskIncrementMutexHeldCount>
 80190f2:	4602      	mov	r2, r0
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fa:	691b      	ldr	r3, [r3, #16]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d00f      	beq.n	8019120 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019102:	3310      	adds	r3, #16
 8019104:	4618      	mov	r0, r3
 8019106:	f000 fea1 	bl	8019e4c <xTaskRemoveFromEventList>
 801910a:	4603      	mov	r3, r0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d007      	beq.n	8019120 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019110:	4b53      	ldr	r3, [pc, #332]	; (8019260 <xQueueSemaphoreTake+0x20c>)
 8019112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019116:	601a      	str	r2, [r3, #0]
 8019118:	f3bf 8f4f 	dsb	sy
 801911c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019120:	f001 fdba 	bl	801ac98 <vPortExitCritical>
				return pdPASS;
 8019124:	2301      	movs	r3, #1
 8019126:	e096      	b.n	8019256 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d110      	bne.n	8019150 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019130:	2b00      	cmp	r3, #0
 8019132:	d009      	beq.n	8019148 <xQueueSemaphoreTake+0xf4>
 8019134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019138:	f383 8811 	msr	BASEPRI, r3
 801913c:	f3bf 8f6f 	isb	sy
 8019140:	f3bf 8f4f 	dsb	sy
 8019144:	617b      	str	r3, [r7, #20]
 8019146:	e7fe      	b.n	8019146 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019148:	f001 fda6 	bl	801ac98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801914c:	2300      	movs	r3, #0
 801914e:	e082      	b.n	8019256 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019152:	2b00      	cmp	r3, #0
 8019154:	d106      	bne.n	8019164 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019156:	f107 030c 	add.w	r3, r7, #12
 801915a:	4618      	mov	r0, r3
 801915c:	f000 fed8 	bl	8019f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019160:	2301      	movs	r3, #1
 8019162:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019164:	f001 fd98 	bl	801ac98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019168:	f000 fc90 	bl	8019a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801916c:	f001 fd66 	bl	801ac3c <vPortEnterCritical>
 8019170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019176:	b25b      	sxtb	r3, r3
 8019178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801917c:	d103      	bne.n	8019186 <xQueueSemaphoreTake+0x132>
 801917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019180:	2200      	movs	r2, #0
 8019182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801918c:	b25b      	sxtb	r3, r3
 801918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019192:	d103      	bne.n	801919c <xQueueSemaphoreTake+0x148>
 8019194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019196:	2200      	movs	r2, #0
 8019198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801919c:	f001 fd7c 	bl	801ac98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80191a0:	463a      	mov	r2, r7
 80191a2:	f107 030c 	add.w	r3, r7, #12
 80191a6:	4611      	mov	r1, r2
 80191a8:	4618      	mov	r0, r3
 80191aa:	f000 fec7 	bl	8019f3c <xTaskCheckForTimeOut>
 80191ae:	4603      	mov	r3, r0
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d132      	bne.n	801921a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80191b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191b6:	f000 f9ee 	bl	8019596 <prvIsQueueEmpty>
 80191ba:	4603      	mov	r3, r0
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d026      	beq.n	801920e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80191c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d109      	bne.n	80191dc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80191c8:	f001 fd38 	bl	801ac3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80191cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ce:	689b      	ldr	r3, [r3, #8]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f001 f80f 	bl	801a1f4 <xTaskPriorityInherit>
 80191d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80191d8:	f001 fd5e 	bl	801ac98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80191dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191de:	3324      	adds	r3, #36	; 0x24
 80191e0:	683a      	ldr	r2, [r7, #0]
 80191e2:	4611      	mov	r1, r2
 80191e4:	4618      	mov	r0, r3
 80191e6:	f000 fe0d 	bl	8019e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80191ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191ec:	f000 f981 	bl	80194f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80191f0:	f000 fc5a 	bl	8019aa8 <xTaskResumeAll>
 80191f4:	4603      	mov	r3, r0
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f47f af69 	bne.w	80190ce <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80191fc:	4b18      	ldr	r3, [pc, #96]	; (8019260 <xQueueSemaphoreTake+0x20c>)
 80191fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019202:	601a      	str	r2, [r3, #0]
 8019204:	f3bf 8f4f 	dsb	sy
 8019208:	f3bf 8f6f 	isb	sy
 801920c:	e75f      	b.n	80190ce <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801920e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019210:	f000 f96f 	bl	80194f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019214:	f000 fc48 	bl	8019aa8 <xTaskResumeAll>
 8019218:	e759      	b.n	80190ce <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801921a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801921c:	f000 f969 	bl	80194f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019220:	f000 fc42 	bl	8019aa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019226:	f000 f9b6 	bl	8019596 <prvIsQueueEmpty>
 801922a:	4603      	mov	r3, r0
 801922c:	2b00      	cmp	r3, #0
 801922e:	f43f af4e 	beq.w	80190ce <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019234:	2b00      	cmp	r3, #0
 8019236:	d00d      	beq.n	8019254 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8019238:	f001 fd00 	bl	801ac3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801923c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801923e:	f000 f8b0 	bl	80193a2 <prvGetDisinheritPriorityAfterTimeout>
 8019242:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019246:	689b      	ldr	r3, [r3, #8]
 8019248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801924a:	4618      	mov	r0, r3
 801924c:	f001 f8d6 	bl	801a3fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019250:	f001 fd22 	bl	801ac98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019256:	4618      	mov	r0, r3
 8019258:	3738      	adds	r7, #56	; 0x38
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	e000ed04 	.word	0xe000ed04

08019264 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b08e      	sub	sp, #56	; 0x38
 8019268:	af00      	add	r7, sp, #0
 801926a:	60f8      	str	r0, [r7, #12]
 801926c:	60b9      	str	r1, [r7, #8]
 801926e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019276:	2b00      	cmp	r3, #0
 8019278:	d109      	bne.n	801928e <xQueueReceiveFromISR+0x2a>
 801927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801927e:	f383 8811 	msr	BASEPRI, r3
 8019282:	f3bf 8f6f 	isb	sy
 8019286:	f3bf 8f4f 	dsb	sy
 801928a:	623b      	str	r3, [r7, #32]
 801928c:	e7fe      	b.n	801928c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d103      	bne.n	801929c <xQueueReceiveFromISR+0x38>
 8019294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019298:	2b00      	cmp	r3, #0
 801929a:	d101      	bne.n	80192a0 <xQueueReceiveFromISR+0x3c>
 801929c:	2301      	movs	r3, #1
 801929e:	e000      	b.n	80192a2 <xQueueReceiveFromISR+0x3e>
 80192a0:	2300      	movs	r3, #0
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d109      	bne.n	80192ba <xQueueReceiveFromISR+0x56>
 80192a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192aa:	f383 8811 	msr	BASEPRI, r3
 80192ae:	f3bf 8f6f 	isb	sy
 80192b2:	f3bf 8f4f 	dsb	sy
 80192b6:	61fb      	str	r3, [r7, #28]
 80192b8:	e7fe      	b.n	80192b8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80192ba:	f001 fd9b 	bl	801adf4 <vPortValidateInterruptPriority>
	__asm volatile
 80192be:	f3ef 8211 	mrs	r2, BASEPRI
 80192c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192c6:	f383 8811 	msr	BASEPRI, r3
 80192ca:	f3bf 8f6f 	isb	sy
 80192ce:	f3bf 8f4f 	dsb	sy
 80192d2:	61ba      	str	r2, [r7, #24]
 80192d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80192d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80192d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80192e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d02f      	beq.n	8019346 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80192e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80192ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192f0:	68b9      	ldr	r1, [r7, #8]
 80192f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192f4:	f000 f8d7 	bl	80194a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80192f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192fa:	1e5a      	subs	r2, r3, #1
 80192fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019300:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019308:	d112      	bne.n	8019330 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801930c:	691b      	ldr	r3, [r3, #16]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d016      	beq.n	8019340 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019314:	3310      	adds	r3, #16
 8019316:	4618      	mov	r0, r3
 8019318:	f000 fd98 	bl	8019e4c <xTaskRemoveFromEventList>
 801931c:	4603      	mov	r3, r0
 801931e:	2b00      	cmp	r3, #0
 8019320:	d00e      	beq.n	8019340 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d00b      	beq.n	8019340 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2201      	movs	r2, #1
 801932c:	601a      	str	r2, [r3, #0]
 801932e:	e007      	b.n	8019340 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019334:	3301      	adds	r3, #1
 8019336:	b2db      	uxtb	r3, r3
 8019338:	b25a      	sxtb	r2, r3
 801933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801933c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8019340:	2301      	movs	r3, #1
 8019342:	637b      	str	r3, [r7, #52]	; 0x34
 8019344:	e001      	b.n	801934a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8019346:	2300      	movs	r3, #0
 8019348:	637b      	str	r3, [r7, #52]	; 0x34
 801934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019356:	4618      	mov	r0, r3
 8019358:	3738      	adds	r7, #56	; 0x38
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801935e:	b580      	push	{r7, lr}
 8019360:	b084      	sub	sp, #16
 8019362:	af00      	add	r7, sp, #0
 8019364:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d109      	bne.n	8019384 <vQueueDelete+0x26>
	__asm volatile
 8019370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019374:	f383 8811 	msr	BASEPRI, r3
 8019378:	f3bf 8f6f 	isb	sy
 801937c:	f3bf 8f4f 	dsb	sy
 8019380:	60bb      	str	r3, [r7, #8]
 8019382:	e7fe      	b.n	8019382 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8019384:	68f8      	ldr	r0, [r7, #12]
 8019386:	f000 f935 	bl	80195f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019390:	2b00      	cmp	r3, #0
 8019392:	d102      	bne.n	801939a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8019394:	68f8      	ldr	r0, [r7, #12]
 8019396:	f001 fe2d 	bl	801aff4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801939a:	bf00      	nop
 801939c:	3710      	adds	r7, #16
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}

080193a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80193a2:	b480      	push	{r7}
 80193a4:	b085      	sub	sp, #20
 80193a6:	af00      	add	r7, sp, #0
 80193a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d006      	beq.n	80193c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	f1c3 0307 	rsb	r3, r3, #7
 80193bc:	60fb      	str	r3, [r7, #12]
 80193be:	e001      	b.n	80193c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80193c0:	2300      	movs	r3, #0
 80193c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80193c4:	68fb      	ldr	r3, [r7, #12]
	}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3714      	adds	r7, #20
 80193ca:	46bd      	mov	sp, r7
 80193cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d0:	4770      	bx	lr

080193d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80193d2:	b580      	push	{r7, lr}
 80193d4:	b086      	sub	sp, #24
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	60f8      	str	r0, [r7, #12]
 80193da:	60b9      	str	r1, [r7, #8]
 80193dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80193de:	2300      	movs	r3, #0
 80193e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d10d      	bne.n	801940c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d14d      	bne.n	8019494 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	689b      	ldr	r3, [r3, #8]
 80193fc:	4618      	mov	r0, r3
 80193fe:	f000 ff79 	bl	801a2f4 <xTaskPriorityDisinherit>
 8019402:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2200      	movs	r2, #0
 8019408:	609a      	str	r2, [r3, #8]
 801940a:	e043      	b.n	8019494 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d119      	bne.n	8019446 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	6858      	ldr	r0, [r3, #4]
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801941a:	461a      	mov	r2, r3
 801941c:	68b9      	ldr	r1, [r7, #8]
 801941e:	f001 ff37 	bl	801b290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	685a      	ldr	r2, [r3, #4]
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801942a:	441a      	add	r2, r3
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	685a      	ldr	r2, [r3, #4]
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	689b      	ldr	r3, [r3, #8]
 8019438:	429a      	cmp	r2, r3
 801943a:	d32b      	bcc.n	8019494 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	681a      	ldr	r2, [r3, #0]
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	605a      	str	r2, [r3, #4]
 8019444:	e026      	b.n	8019494 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	68d8      	ldr	r0, [r3, #12]
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801944e:	461a      	mov	r2, r3
 8019450:	68b9      	ldr	r1, [r7, #8]
 8019452:	f001 ff1d 	bl	801b290 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	68da      	ldr	r2, [r3, #12]
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801945e:	425b      	negs	r3, r3
 8019460:	441a      	add	r2, r3
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	68da      	ldr	r2, [r3, #12]
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	429a      	cmp	r2, r3
 8019470:	d207      	bcs.n	8019482 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	689a      	ldr	r2, [r3, #8]
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801947a:	425b      	negs	r3, r3
 801947c:	441a      	add	r2, r3
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	2b02      	cmp	r3, #2
 8019486:	d105      	bne.n	8019494 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d002      	beq.n	8019494 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	3b01      	subs	r3, #1
 8019492:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	1c5a      	adds	r2, r3, #1
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801949c:	697b      	ldr	r3, [r7, #20]
}
 801949e:	4618      	mov	r0, r3
 80194a0:	3718      	adds	r7, #24
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}

080194a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80194a6:	b580      	push	{r7, lr}
 80194a8:	b082      	sub	sp, #8
 80194aa:	af00      	add	r7, sp, #0
 80194ac:	6078      	str	r0, [r7, #4]
 80194ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d018      	beq.n	80194ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	68da      	ldr	r2, [r3, #12]
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194c0:	441a      	add	r2, r3
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	68da      	ldr	r2, [r3, #12]
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	689b      	ldr	r3, [r3, #8]
 80194ce:	429a      	cmp	r2, r3
 80194d0:	d303      	bcc.n	80194da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681a      	ldr	r2, [r3, #0]
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	68d9      	ldr	r1, [r3, #12]
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194e2:	461a      	mov	r2, r3
 80194e4:	6838      	ldr	r0, [r7, #0]
 80194e6:	f001 fed3 	bl	801b290 <memcpy>
	}
}
 80194ea:	bf00      	nop
 80194ec:	3708      	adds	r7, #8
 80194ee:	46bd      	mov	sp, r7
 80194f0:	bd80      	pop	{r7, pc}

080194f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80194f2:	b580      	push	{r7, lr}
 80194f4:	b084      	sub	sp, #16
 80194f6:	af00      	add	r7, sp, #0
 80194f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80194fa:	f001 fb9f 	bl	801ac3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019504:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019506:	e011      	b.n	801952c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801950c:	2b00      	cmp	r3, #0
 801950e:	d012      	beq.n	8019536 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	3324      	adds	r3, #36	; 0x24
 8019514:	4618      	mov	r0, r3
 8019516:	f000 fc99 	bl	8019e4c <xTaskRemoveFromEventList>
 801951a:	4603      	mov	r3, r0
 801951c:	2b00      	cmp	r3, #0
 801951e:	d001      	beq.n	8019524 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019520:	f000 fd6c 	bl	8019ffc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019524:	7bfb      	ldrb	r3, [r7, #15]
 8019526:	3b01      	subs	r3, #1
 8019528:	b2db      	uxtb	r3, r3
 801952a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801952c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019530:	2b00      	cmp	r3, #0
 8019532:	dce9      	bgt.n	8019508 <prvUnlockQueue+0x16>
 8019534:	e000      	b.n	8019538 <prvUnlockQueue+0x46>
					break;
 8019536:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	22ff      	movs	r2, #255	; 0xff
 801953c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019540:	f001 fbaa 	bl	801ac98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019544:	f001 fb7a 	bl	801ac3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801954e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019550:	e011      	b.n	8019576 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	691b      	ldr	r3, [r3, #16]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d012      	beq.n	8019580 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	3310      	adds	r3, #16
 801955e:	4618      	mov	r0, r3
 8019560:	f000 fc74 	bl	8019e4c <xTaskRemoveFromEventList>
 8019564:	4603      	mov	r3, r0
 8019566:	2b00      	cmp	r3, #0
 8019568:	d001      	beq.n	801956e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801956a:	f000 fd47 	bl	8019ffc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801956e:	7bbb      	ldrb	r3, [r7, #14]
 8019570:	3b01      	subs	r3, #1
 8019572:	b2db      	uxtb	r3, r3
 8019574:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801957a:	2b00      	cmp	r3, #0
 801957c:	dce9      	bgt.n	8019552 <prvUnlockQueue+0x60>
 801957e:	e000      	b.n	8019582 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019580:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	22ff      	movs	r2, #255	; 0xff
 8019586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801958a:	f001 fb85 	bl	801ac98 <vPortExitCritical>
}
 801958e:	bf00      	nop
 8019590:	3710      	adds	r7, #16
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}

08019596 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019596:	b580      	push	{r7, lr}
 8019598:	b084      	sub	sp, #16
 801959a:	af00      	add	r7, sp, #0
 801959c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801959e:	f001 fb4d 	bl	801ac3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d102      	bne.n	80195b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80195aa:	2301      	movs	r3, #1
 80195ac:	60fb      	str	r3, [r7, #12]
 80195ae:	e001      	b.n	80195b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80195b0:	2300      	movs	r3, #0
 80195b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80195b4:	f001 fb70 	bl	801ac98 <vPortExitCritical>

	return xReturn;
 80195b8:	68fb      	ldr	r3, [r7, #12]
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	3710      	adds	r7, #16
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}

080195c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80195c2:	b580      	push	{r7, lr}
 80195c4:	b084      	sub	sp, #16
 80195c6:	af00      	add	r7, sp, #0
 80195c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80195ca:	f001 fb37 	bl	801ac3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d102      	bne.n	80195e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80195da:	2301      	movs	r3, #1
 80195dc:	60fb      	str	r3, [r7, #12]
 80195de:	e001      	b.n	80195e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80195e0:	2300      	movs	r3, #0
 80195e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80195e4:	f001 fb58 	bl	801ac98 <vPortExitCritical>

	return xReturn;
 80195e8:	68fb      	ldr	r3, [r7, #12]
}
 80195ea:	4618      	mov	r0, r3
 80195ec:	3710      	adds	r7, #16
 80195ee:	46bd      	mov	sp, r7
 80195f0:	bd80      	pop	{r7, pc}
	...

080195f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80195f4:	b480      	push	{r7}
 80195f6:	b085      	sub	sp, #20
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80195fc:	2300      	movs	r3, #0
 80195fe:	60fb      	str	r3, [r7, #12]
 8019600:	e016      	b.n	8019630 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019602:	4a10      	ldr	r2, [pc, #64]	; (8019644 <vQueueUnregisterQueue+0x50>)
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	00db      	lsls	r3, r3, #3
 8019608:	4413      	add	r3, r2
 801960a:	685b      	ldr	r3, [r3, #4]
 801960c:	687a      	ldr	r2, [r7, #4]
 801960e:	429a      	cmp	r2, r3
 8019610:	d10b      	bne.n	801962a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019612:	4a0c      	ldr	r2, [pc, #48]	; (8019644 <vQueueUnregisterQueue+0x50>)
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	2100      	movs	r1, #0
 8019618:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801961c:	4a09      	ldr	r2, [pc, #36]	; (8019644 <vQueueUnregisterQueue+0x50>)
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	00db      	lsls	r3, r3, #3
 8019622:	4413      	add	r3, r2
 8019624:	2200      	movs	r2, #0
 8019626:	605a      	str	r2, [r3, #4]
				break;
 8019628:	e005      	b.n	8019636 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	3301      	adds	r3, #1
 801962e:	60fb      	str	r3, [r7, #12]
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	2b07      	cmp	r3, #7
 8019634:	d9e5      	bls.n	8019602 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8019636:	bf00      	nop
 8019638:	3714      	adds	r7, #20
 801963a:	46bd      	mov	sp, r7
 801963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019640:	4770      	bx	lr
 8019642:	bf00      	nop
 8019644:	2000b9d0 	.word	0x2000b9d0

08019648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019648:	b580      	push	{r7, lr}
 801964a:	b08e      	sub	sp, #56	; 0x38
 801964c:	af04      	add	r7, sp, #16
 801964e:	60f8      	str	r0, [r7, #12]
 8019650:	60b9      	str	r1, [r7, #8]
 8019652:	607a      	str	r2, [r7, #4]
 8019654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019658:	2b00      	cmp	r3, #0
 801965a:	d109      	bne.n	8019670 <xTaskCreateStatic+0x28>
 801965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019660:	f383 8811 	msr	BASEPRI, r3
 8019664:	f3bf 8f6f 	isb	sy
 8019668:	f3bf 8f4f 	dsb	sy
 801966c:	623b      	str	r3, [r7, #32]
 801966e:	e7fe      	b.n	801966e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8019670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019672:	2b00      	cmp	r3, #0
 8019674:	d109      	bne.n	801968a <xTaskCreateStatic+0x42>
 8019676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801967a:	f383 8811 	msr	BASEPRI, r3
 801967e:	f3bf 8f6f 	isb	sy
 8019682:	f3bf 8f4f 	dsb	sy
 8019686:	61fb      	str	r3, [r7, #28]
 8019688:	e7fe      	b.n	8019688 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801968a:	2354      	movs	r3, #84	; 0x54
 801968c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801968e:	693b      	ldr	r3, [r7, #16]
 8019690:	2b54      	cmp	r3, #84	; 0x54
 8019692:	d009      	beq.n	80196a8 <xTaskCreateStatic+0x60>
 8019694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019698:	f383 8811 	msr	BASEPRI, r3
 801969c:	f3bf 8f6f 	isb	sy
 80196a0:	f3bf 8f4f 	dsb	sy
 80196a4:	61bb      	str	r3, [r7, #24]
 80196a6:	e7fe      	b.n	80196a6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80196a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80196aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d01e      	beq.n	80196ee <xTaskCreateStatic+0xa6>
 80196b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d01b      	beq.n	80196ee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80196b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80196ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80196be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80196c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c2:	2202      	movs	r2, #2
 80196c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80196c8:	2300      	movs	r3, #0
 80196ca:	9303      	str	r3, [sp, #12]
 80196cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ce:	9302      	str	r3, [sp, #8]
 80196d0:	f107 0314 	add.w	r3, r7, #20
 80196d4:	9301      	str	r3, [sp, #4]
 80196d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	687a      	ldr	r2, [r7, #4]
 80196de:	68b9      	ldr	r1, [r7, #8]
 80196e0:	68f8      	ldr	r0, [r7, #12]
 80196e2:	f000 f850 	bl	8019786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80196e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196e8:	f000 f8d4 	bl	8019894 <prvAddNewTaskToReadyList>
 80196ec:	e001      	b.n	80196f2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80196ee:	2300      	movs	r3, #0
 80196f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80196f2:	697b      	ldr	r3, [r7, #20]
	}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3728      	adds	r7, #40	; 0x28
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b08c      	sub	sp, #48	; 0x30
 8019700:	af04      	add	r7, sp, #16
 8019702:	60f8      	str	r0, [r7, #12]
 8019704:	60b9      	str	r1, [r7, #8]
 8019706:	603b      	str	r3, [r7, #0]
 8019708:	4613      	mov	r3, r2
 801970a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801970c:	88fb      	ldrh	r3, [r7, #6]
 801970e:	009b      	lsls	r3, r3, #2
 8019710:	4618      	mov	r0, r3
 8019712:	f001 fbad 	bl	801ae70 <pvPortMalloc>
 8019716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d00e      	beq.n	801973c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801971e:	2054      	movs	r0, #84	; 0x54
 8019720:	f001 fba6 	bl	801ae70 <pvPortMalloc>
 8019724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d003      	beq.n	8019734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	697a      	ldr	r2, [r7, #20]
 8019730:	631a      	str	r2, [r3, #48]	; 0x30
 8019732:	e005      	b.n	8019740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019734:	6978      	ldr	r0, [r7, #20]
 8019736:	f001 fc5d 	bl	801aff4 <vPortFree>
 801973a:	e001      	b.n	8019740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801973c:	2300      	movs	r3, #0
 801973e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019740:	69fb      	ldr	r3, [r7, #28]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d017      	beq.n	8019776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	2200      	movs	r2, #0
 801974a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801974e:	88fa      	ldrh	r2, [r7, #6]
 8019750:	2300      	movs	r3, #0
 8019752:	9303      	str	r3, [sp, #12]
 8019754:	69fb      	ldr	r3, [r7, #28]
 8019756:	9302      	str	r3, [sp, #8]
 8019758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975a:	9301      	str	r3, [sp, #4]
 801975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975e:	9300      	str	r3, [sp, #0]
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	68b9      	ldr	r1, [r7, #8]
 8019764:	68f8      	ldr	r0, [r7, #12]
 8019766:	f000 f80e 	bl	8019786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801976a:	69f8      	ldr	r0, [r7, #28]
 801976c:	f000 f892 	bl	8019894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019770:	2301      	movs	r3, #1
 8019772:	61bb      	str	r3, [r7, #24]
 8019774:	e002      	b.n	801977c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019776:	f04f 33ff 	mov.w	r3, #4294967295
 801977a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801977c:	69bb      	ldr	r3, [r7, #24]
	}
 801977e:	4618      	mov	r0, r3
 8019780:	3720      	adds	r7, #32
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}

08019786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019786:	b580      	push	{r7, lr}
 8019788:	b088      	sub	sp, #32
 801978a:	af00      	add	r7, sp, #0
 801978c:	60f8      	str	r0, [r7, #12]
 801978e:	60b9      	str	r1, [r7, #8]
 8019790:	607a      	str	r2, [r7, #4]
 8019792:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801979e:	3b01      	subs	r3, #1
 80197a0:	009b      	lsls	r3, r3, #2
 80197a2:	4413      	add	r3, r2
 80197a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80197a6:	69bb      	ldr	r3, [r7, #24]
 80197a8:	f023 0307 	bic.w	r3, r3, #7
 80197ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80197ae:	69bb      	ldr	r3, [r7, #24]
 80197b0:	f003 0307 	and.w	r3, r3, #7
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d009      	beq.n	80197cc <prvInitialiseNewTask+0x46>
 80197b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197bc:	f383 8811 	msr	BASEPRI, r3
 80197c0:	f3bf 8f6f 	isb	sy
 80197c4:	f3bf 8f4f 	dsb	sy
 80197c8:	617b      	str	r3, [r7, #20]
 80197ca:	e7fe      	b.n	80197ca <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d01f      	beq.n	8019812 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197d2:	2300      	movs	r3, #0
 80197d4:	61fb      	str	r3, [r7, #28]
 80197d6:	e012      	b.n	80197fe <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80197d8:	68ba      	ldr	r2, [r7, #8]
 80197da:	69fb      	ldr	r3, [r7, #28]
 80197dc:	4413      	add	r3, r2
 80197de:	7819      	ldrb	r1, [r3, #0]
 80197e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	4413      	add	r3, r2
 80197e6:	3334      	adds	r3, #52	; 0x34
 80197e8:	460a      	mov	r2, r1
 80197ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80197ec:	68ba      	ldr	r2, [r7, #8]
 80197ee:	69fb      	ldr	r3, [r7, #28]
 80197f0:	4413      	add	r3, r2
 80197f2:	781b      	ldrb	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d006      	beq.n	8019806 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	3301      	adds	r3, #1
 80197fc:	61fb      	str	r3, [r7, #28]
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	2b0f      	cmp	r3, #15
 8019802:	d9e9      	bls.n	80197d8 <prvInitialiseNewTask+0x52>
 8019804:	e000      	b.n	8019808 <prvInitialiseNewTask+0x82>
			{
				break;
 8019806:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801980a:	2200      	movs	r2, #0
 801980c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019810:	e003      	b.n	801981a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019814:	2200      	movs	r2, #0
 8019816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981c:	2b06      	cmp	r3, #6
 801981e:	d901      	bls.n	8019824 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019820:	2306      	movs	r3, #6
 8019822:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019828:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801982c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801982e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019832:	2200      	movs	r2, #0
 8019834:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019838:	3304      	adds	r3, #4
 801983a:	4618      	mov	r0, r3
 801983c:	f7ff f86b 	bl	8018916 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019842:	3318      	adds	r3, #24
 8019844:	4618      	mov	r0, r3
 8019846:	f7ff f866 	bl	8018916 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801984e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019852:	f1c3 0207 	rsb	r2, r3, #7
 8019856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019858:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801985e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019862:	2200      	movs	r2, #0
 8019864:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019868:	2200      	movs	r2, #0
 801986a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801986e:	683a      	ldr	r2, [r7, #0]
 8019870:	68f9      	ldr	r1, [r7, #12]
 8019872:	69b8      	ldr	r0, [r7, #24]
 8019874:	f001 f8b8 	bl	801a9e8 <pxPortInitialiseStack>
 8019878:	4602      	mov	r2, r0
 801987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801987c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019880:	2b00      	cmp	r3, #0
 8019882:	d002      	beq.n	801988a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801988a:	bf00      	nop
 801988c:	3720      	adds	r7, #32
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
	...

08019894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019894:	b580      	push	{r7, lr}
 8019896:	b082      	sub	sp, #8
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801989c:	f001 f9ce 	bl	801ac3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80198a0:	4b2a      	ldr	r3, [pc, #168]	; (801994c <prvAddNewTaskToReadyList+0xb8>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	3301      	adds	r3, #1
 80198a6:	4a29      	ldr	r2, [pc, #164]	; (801994c <prvAddNewTaskToReadyList+0xb8>)
 80198a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80198aa:	4b29      	ldr	r3, [pc, #164]	; (8019950 <prvAddNewTaskToReadyList+0xbc>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d109      	bne.n	80198c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80198b2:	4a27      	ldr	r2, [pc, #156]	; (8019950 <prvAddNewTaskToReadyList+0xbc>)
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80198b8:	4b24      	ldr	r3, [pc, #144]	; (801994c <prvAddNewTaskToReadyList+0xb8>)
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d110      	bne.n	80198e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80198c0:	f000 fbc0 	bl	801a044 <prvInitialiseTaskLists>
 80198c4:	e00d      	b.n	80198e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80198c6:	4b23      	ldr	r3, [pc, #140]	; (8019954 <prvAddNewTaskToReadyList+0xc0>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d109      	bne.n	80198e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80198ce:	4b20      	ldr	r3, [pc, #128]	; (8019950 <prvAddNewTaskToReadyList+0xbc>)
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198d8:	429a      	cmp	r2, r3
 80198da:	d802      	bhi.n	80198e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80198dc:	4a1c      	ldr	r2, [pc, #112]	; (8019950 <prvAddNewTaskToReadyList+0xbc>)
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80198e2:	4b1d      	ldr	r3, [pc, #116]	; (8019958 <prvAddNewTaskToReadyList+0xc4>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	3301      	adds	r3, #1
 80198e8:	4a1b      	ldr	r2, [pc, #108]	; (8019958 <prvAddNewTaskToReadyList+0xc4>)
 80198ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198f0:	2201      	movs	r2, #1
 80198f2:	409a      	lsls	r2, r3
 80198f4:	4b19      	ldr	r3, [pc, #100]	; (801995c <prvAddNewTaskToReadyList+0xc8>)
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	4313      	orrs	r3, r2
 80198fa:	4a18      	ldr	r2, [pc, #96]	; (801995c <prvAddNewTaskToReadyList+0xc8>)
 80198fc:	6013      	str	r3, [r2, #0]
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019902:	4613      	mov	r3, r2
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	4413      	add	r3, r2
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	4a15      	ldr	r2, [pc, #84]	; (8019960 <prvAddNewTaskToReadyList+0xcc>)
 801990c:	441a      	add	r2, r3
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	3304      	adds	r3, #4
 8019912:	4619      	mov	r1, r3
 8019914:	4610      	mov	r0, r2
 8019916:	f7ff f80b 	bl	8018930 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801991a:	f001 f9bd 	bl	801ac98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801991e:	4b0d      	ldr	r3, [pc, #52]	; (8019954 <prvAddNewTaskToReadyList+0xc0>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d00e      	beq.n	8019944 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019926:	4b0a      	ldr	r3, [pc, #40]	; (8019950 <prvAddNewTaskToReadyList+0xbc>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019930:	429a      	cmp	r2, r3
 8019932:	d207      	bcs.n	8019944 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019934:	4b0b      	ldr	r3, [pc, #44]	; (8019964 <prvAddNewTaskToReadyList+0xd0>)
 8019936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801993a:	601a      	str	r2, [r3, #0]
 801993c:	f3bf 8f4f 	dsb	sy
 8019940:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019944:	bf00      	nop
 8019946:	3708      	adds	r7, #8
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	20000794 	.word	0x20000794
 8019950:	20000694 	.word	0x20000694
 8019954:	200007a0 	.word	0x200007a0
 8019958:	200007b0 	.word	0x200007b0
 801995c:	2000079c 	.word	0x2000079c
 8019960:	20000698 	.word	0x20000698
 8019964:	e000ed04 	.word	0xe000ed04

08019968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019968:	b580      	push	{r7, lr}
 801996a:	b084      	sub	sp, #16
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019970:	2300      	movs	r3, #0
 8019972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d016      	beq.n	80199a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801997a:	4b13      	ldr	r3, [pc, #76]	; (80199c8 <vTaskDelay+0x60>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d009      	beq.n	8019996 <vTaskDelay+0x2e>
 8019982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019986:	f383 8811 	msr	BASEPRI, r3
 801998a:	f3bf 8f6f 	isb	sy
 801998e:	f3bf 8f4f 	dsb	sy
 8019992:	60bb      	str	r3, [r7, #8]
 8019994:	e7fe      	b.n	8019994 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8019996:	f000 f879 	bl	8019a8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801999a:	2100      	movs	r1, #0
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f000 ffbd 	bl	801a91c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80199a2:	f000 f881 	bl	8019aa8 <xTaskResumeAll>
 80199a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d107      	bne.n	80199be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80199ae:	4b07      	ldr	r3, [pc, #28]	; (80199cc <vTaskDelay+0x64>)
 80199b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199b4:	601a      	str	r2, [r3, #0]
 80199b6:	f3bf 8f4f 	dsb	sy
 80199ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80199be:	bf00      	nop
 80199c0:	3710      	adds	r7, #16
 80199c2:	46bd      	mov	sp, r7
 80199c4:	bd80      	pop	{r7, pc}
 80199c6:	bf00      	nop
 80199c8:	200007bc 	.word	0x200007bc
 80199cc:	e000ed04 	.word	0xe000ed04

080199d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b08a      	sub	sp, #40	; 0x28
 80199d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80199d6:	2300      	movs	r3, #0
 80199d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80199da:	2300      	movs	r3, #0
 80199dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80199de:	463a      	mov	r2, r7
 80199e0:	1d39      	adds	r1, r7, #4
 80199e2:	f107 0308 	add.w	r3, r7, #8
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7ec fe16 	bl	8006618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80199ec:	6839      	ldr	r1, [r7, #0]
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	68ba      	ldr	r2, [r7, #8]
 80199f2:	9202      	str	r2, [sp, #8]
 80199f4:	9301      	str	r3, [sp, #4]
 80199f6:	2300      	movs	r3, #0
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	2300      	movs	r3, #0
 80199fc:	460a      	mov	r2, r1
 80199fe:	491d      	ldr	r1, [pc, #116]	; (8019a74 <vTaskStartScheduler+0xa4>)
 8019a00:	481d      	ldr	r0, [pc, #116]	; (8019a78 <vTaskStartScheduler+0xa8>)
 8019a02:	f7ff fe21 	bl	8019648 <xTaskCreateStatic>
 8019a06:	4602      	mov	r2, r0
 8019a08:	4b1c      	ldr	r3, [pc, #112]	; (8019a7c <vTaskStartScheduler+0xac>)
 8019a0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019a0c:	4b1b      	ldr	r3, [pc, #108]	; (8019a7c <vTaskStartScheduler+0xac>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d002      	beq.n	8019a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019a14:	2301      	movs	r3, #1
 8019a16:	617b      	str	r3, [r7, #20]
 8019a18:	e001      	b.n	8019a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019a1e:	697b      	ldr	r3, [r7, #20]
 8019a20:	2b01      	cmp	r3, #1
 8019a22:	d115      	bne.n	8019a50 <vTaskStartScheduler+0x80>
 8019a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a28:	f383 8811 	msr	BASEPRI, r3
 8019a2c:	f3bf 8f6f 	isb	sy
 8019a30:	f3bf 8f4f 	dsb	sy
 8019a34:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019a36:	4b12      	ldr	r3, [pc, #72]	; (8019a80 <vTaskStartScheduler+0xb0>)
 8019a38:	f04f 32ff 	mov.w	r2, #4294967295
 8019a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019a3e:	4b11      	ldr	r3, [pc, #68]	; (8019a84 <vTaskStartScheduler+0xb4>)
 8019a40:	2201      	movs	r2, #1
 8019a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019a44:	4b10      	ldr	r3, [pc, #64]	; (8019a88 <vTaskStartScheduler+0xb8>)
 8019a46:	2200      	movs	r2, #0
 8019a48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019a4a:	f001 f859 	bl	801ab00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019a4e:	e00d      	b.n	8019a6c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a56:	d109      	bne.n	8019a6c <vTaskStartScheduler+0x9c>
 8019a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a5c:	f383 8811 	msr	BASEPRI, r3
 8019a60:	f3bf 8f6f 	isb	sy
 8019a64:	f3bf 8f4f 	dsb	sy
 8019a68:	60fb      	str	r3, [r7, #12]
 8019a6a:	e7fe      	b.n	8019a6a <vTaskStartScheduler+0x9a>
}
 8019a6c:	bf00      	nop
 8019a6e:	3718      	adds	r7, #24
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	0801f4fc 	.word	0x0801f4fc
 8019a78:	0801a015 	.word	0x0801a015
 8019a7c:	200007b8 	.word	0x200007b8
 8019a80:	200007b4 	.word	0x200007b4
 8019a84:	200007a0 	.word	0x200007a0
 8019a88:	20000798 	.word	0x20000798

08019a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8019a90:	4b04      	ldr	r3, [pc, #16]	; (8019aa4 <vTaskSuspendAll+0x18>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	3301      	adds	r3, #1
 8019a96:	4a03      	ldr	r2, [pc, #12]	; (8019aa4 <vTaskSuspendAll+0x18>)
 8019a98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8019a9a:	bf00      	nop
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa2:	4770      	bx	lr
 8019aa4:	200007bc 	.word	0x200007bc

08019aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b084      	sub	sp, #16
 8019aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019aae:	2300      	movs	r3, #0
 8019ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019ab6:	4b41      	ldr	r3, [pc, #260]	; (8019bbc <xTaskResumeAll+0x114>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d109      	bne.n	8019ad2 <xTaskResumeAll+0x2a>
 8019abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ac2:	f383 8811 	msr	BASEPRI, r3
 8019ac6:	f3bf 8f6f 	isb	sy
 8019aca:	f3bf 8f4f 	dsb	sy
 8019ace:	603b      	str	r3, [r7, #0]
 8019ad0:	e7fe      	b.n	8019ad0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019ad2:	f001 f8b3 	bl	801ac3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019ad6:	4b39      	ldr	r3, [pc, #228]	; (8019bbc <xTaskResumeAll+0x114>)
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	3b01      	subs	r3, #1
 8019adc:	4a37      	ldr	r2, [pc, #220]	; (8019bbc <xTaskResumeAll+0x114>)
 8019ade:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019ae0:	4b36      	ldr	r3, [pc, #216]	; (8019bbc <xTaskResumeAll+0x114>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d161      	bne.n	8019bac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019ae8:	4b35      	ldr	r3, [pc, #212]	; (8019bc0 <xTaskResumeAll+0x118>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d05d      	beq.n	8019bac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019af0:	e02e      	b.n	8019b50 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019af2:	4b34      	ldr	r3, [pc, #208]	; (8019bc4 <xTaskResumeAll+0x11c>)
 8019af4:	68db      	ldr	r3, [r3, #12]
 8019af6:	68db      	ldr	r3, [r3, #12]
 8019af8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	3318      	adds	r3, #24
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7fe ff73 	bl	80189ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	3304      	adds	r3, #4
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7fe ff6e 	bl	80189ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b12:	2201      	movs	r2, #1
 8019b14:	409a      	lsls	r2, r3
 8019b16:	4b2c      	ldr	r3, [pc, #176]	; (8019bc8 <xTaskResumeAll+0x120>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	4313      	orrs	r3, r2
 8019b1c:	4a2a      	ldr	r2, [pc, #168]	; (8019bc8 <xTaskResumeAll+0x120>)
 8019b1e:	6013      	str	r3, [r2, #0]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b24:	4613      	mov	r3, r2
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	4413      	add	r3, r2
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	4a27      	ldr	r2, [pc, #156]	; (8019bcc <xTaskResumeAll+0x124>)
 8019b2e:	441a      	add	r2, r3
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	3304      	adds	r3, #4
 8019b34:	4619      	mov	r1, r3
 8019b36:	4610      	mov	r0, r2
 8019b38:	f7fe fefa 	bl	8018930 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b40:	4b23      	ldr	r3, [pc, #140]	; (8019bd0 <xTaskResumeAll+0x128>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b46:	429a      	cmp	r2, r3
 8019b48:	d302      	bcc.n	8019b50 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8019b4a:	4b22      	ldr	r3, [pc, #136]	; (8019bd4 <xTaskResumeAll+0x12c>)
 8019b4c:	2201      	movs	r2, #1
 8019b4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019b50:	4b1c      	ldr	r3, [pc, #112]	; (8019bc4 <xTaskResumeAll+0x11c>)
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d1cc      	bne.n	8019af2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d001      	beq.n	8019b62 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019b5e:	f000 fb0b 	bl	801a178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019b62:	4b1d      	ldr	r3, [pc, #116]	; (8019bd8 <xTaskResumeAll+0x130>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d010      	beq.n	8019b90 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019b6e:	f000 f837 	bl	8019be0 <xTaskIncrementTick>
 8019b72:	4603      	mov	r3, r0
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d002      	beq.n	8019b7e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8019b78:	4b16      	ldr	r3, [pc, #88]	; (8019bd4 <xTaskResumeAll+0x12c>)
 8019b7a:	2201      	movs	r2, #1
 8019b7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	3b01      	subs	r3, #1
 8019b82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d1f1      	bne.n	8019b6e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8019b8a:	4b13      	ldr	r3, [pc, #76]	; (8019bd8 <xTaskResumeAll+0x130>)
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019b90:	4b10      	ldr	r3, [pc, #64]	; (8019bd4 <xTaskResumeAll+0x12c>)
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d009      	beq.n	8019bac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019b9c:	4b0f      	ldr	r3, [pc, #60]	; (8019bdc <xTaskResumeAll+0x134>)
 8019b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ba2:	601a      	str	r2, [r3, #0]
 8019ba4:	f3bf 8f4f 	dsb	sy
 8019ba8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019bac:	f001 f874 	bl	801ac98 <vPortExitCritical>

	return xAlreadyYielded;
 8019bb0:	68bb      	ldr	r3, [r7, #8]
}
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	3710      	adds	r7, #16
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	bd80      	pop	{r7, pc}
 8019bba:	bf00      	nop
 8019bbc:	200007bc 	.word	0x200007bc
 8019bc0:	20000794 	.word	0x20000794
 8019bc4:	20000754 	.word	0x20000754
 8019bc8:	2000079c 	.word	0x2000079c
 8019bcc:	20000698 	.word	0x20000698
 8019bd0:	20000694 	.word	0x20000694
 8019bd4:	200007a8 	.word	0x200007a8
 8019bd8:	200007a4 	.word	0x200007a4
 8019bdc:	e000ed04 	.word	0xe000ed04

08019be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b086      	sub	sp, #24
 8019be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019be6:	2300      	movs	r3, #0
 8019be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019bea:	4b4e      	ldr	r3, [pc, #312]	; (8019d24 <xTaskIncrementTick+0x144>)
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	f040 8087 	bne.w	8019d02 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019bf4:	4b4c      	ldr	r3, [pc, #304]	; (8019d28 <xTaskIncrementTick+0x148>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019bfc:	4a4a      	ldr	r2, [pc, #296]	; (8019d28 <xTaskIncrementTick+0x148>)
 8019bfe:	693b      	ldr	r3, [r7, #16]
 8019c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d11f      	bne.n	8019c48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8019c08:	4b48      	ldr	r3, [pc, #288]	; (8019d2c <xTaskIncrementTick+0x14c>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d009      	beq.n	8019c26 <xTaskIncrementTick+0x46>
 8019c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c16:	f383 8811 	msr	BASEPRI, r3
 8019c1a:	f3bf 8f6f 	isb	sy
 8019c1e:	f3bf 8f4f 	dsb	sy
 8019c22:	603b      	str	r3, [r7, #0]
 8019c24:	e7fe      	b.n	8019c24 <xTaskIncrementTick+0x44>
 8019c26:	4b41      	ldr	r3, [pc, #260]	; (8019d2c <xTaskIncrementTick+0x14c>)
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	60fb      	str	r3, [r7, #12]
 8019c2c:	4b40      	ldr	r3, [pc, #256]	; (8019d30 <xTaskIncrementTick+0x150>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	4a3e      	ldr	r2, [pc, #248]	; (8019d2c <xTaskIncrementTick+0x14c>)
 8019c32:	6013      	str	r3, [r2, #0]
 8019c34:	4a3e      	ldr	r2, [pc, #248]	; (8019d30 <xTaskIncrementTick+0x150>)
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	6013      	str	r3, [r2, #0]
 8019c3a:	4b3e      	ldr	r3, [pc, #248]	; (8019d34 <xTaskIncrementTick+0x154>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	3301      	adds	r3, #1
 8019c40:	4a3c      	ldr	r2, [pc, #240]	; (8019d34 <xTaskIncrementTick+0x154>)
 8019c42:	6013      	str	r3, [r2, #0]
 8019c44:	f000 fa98 	bl	801a178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019c48:	4b3b      	ldr	r3, [pc, #236]	; (8019d38 <xTaskIncrementTick+0x158>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	693a      	ldr	r2, [r7, #16]
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d348      	bcc.n	8019ce4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019c52:	4b36      	ldr	r3, [pc, #216]	; (8019d2c <xTaskIncrementTick+0x14c>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d104      	bne.n	8019c66 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c5c:	4b36      	ldr	r3, [pc, #216]	; (8019d38 <xTaskIncrementTick+0x158>)
 8019c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8019c62:	601a      	str	r2, [r3, #0]
					break;
 8019c64:	e03e      	b.n	8019ce4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c66:	4b31      	ldr	r3, [pc, #196]	; (8019d2c <xTaskIncrementTick+0x14c>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	68db      	ldr	r3, [r3, #12]
 8019c6c:	68db      	ldr	r3, [r3, #12]
 8019c6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	685b      	ldr	r3, [r3, #4]
 8019c74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019c76:	693a      	ldr	r2, [r7, #16]
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	429a      	cmp	r2, r3
 8019c7c:	d203      	bcs.n	8019c86 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019c7e:	4a2e      	ldr	r2, [pc, #184]	; (8019d38 <xTaskIncrementTick+0x158>)
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019c84:	e02e      	b.n	8019ce4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	3304      	adds	r3, #4
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fe fead 	bl	80189ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d004      	beq.n	8019ca2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	3318      	adds	r3, #24
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7fe fea4 	bl	80189ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019ca2:	68bb      	ldr	r3, [r7, #8]
 8019ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ca6:	2201      	movs	r2, #1
 8019ca8:	409a      	lsls	r2, r3
 8019caa:	4b24      	ldr	r3, [pc, #144]	; (8019d3c <xTaskIncrementTick+0x15c>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	4313      	orrs	r3, r2
 8019cb0:	4a22      	ldr	r2, [pc, #136]	; (8019d3c <xTaskIncrementTick+0x15c>)
 8019cb2:	6013      	str	r3, [r2, #0]
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cb8:	4613      	mov	r3, r2
 8019cba:	009b      	lsls	r3, r3, #2
 8019cbc:	4413      	add	r3, r2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	4a1f      	ldr	r2, [pc, #124]	; (8019d40 <xTaskIncrementTick+0x160>)
 8019cc2:	441a      	add	r2, r3
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	3304      	adds	r3, #4
 8019cc8:	4619      	mov	r1, r3
 8019cca:	4610      	mov	r0, r2
 8019ccc:	f7fe fe30 	bl	8018930 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cd4:	4b1b      	ldr	r3, [pc, #108]	; (8019d44 <xTaskIncrementTick+0x164>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cda:	429a      	cmp	r2, r3
 8019cdc:	d3b9      	bcc.n	8019c52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8019cde:	2301      	movs	r3, #1
 8019ce0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019ce2:	e7b6      	b.n	8019c52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019ce4:	4b17      	ldr	r3, [pc, #92]	; (8019d44 <xTaskIncrementTick+0x164>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cea:	4915      	ldr	r1, [pc, #84]	; (8019d40 <xTaskIncrementTick+0x160>)
 8019cec:	4613      	mov	r3, r2
 8019cee:	009b      	lsls	r3, r3, #2
 8019cf0:	4413      	add	r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	440b      	add	r3, r1
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2b01      	cmp	r3, #1
 8019cfa:	d907      	bls.n	8019d0c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8019cfc:	2301      	movs	r3, #1
 8019cfe:	617b      	str	r3, [r7, #20]
 8019d00:	e004      	b.n	8019d0c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019d02:	4b11      	ldr	r3, [pc, #68]	; (8019d48 <xTaskIncrementTick+0x168>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	3301      	adds	r3, #1
 8019d08:	4a0f      	ldr	r2, [pc, #60]	; (8019d48 <xTaskIncrementTick+0x168>)
 8019d0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019d0c:	4b0f      	ldr	r3, [pc, #60]	; (8019d4c <xTaskIncrementTick+0x16c>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d001      	beq.n	8019d18 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8019d14:	2301      	movs	r3, #1
 8019d16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8019d18:	697b      	ldr	r3, [r7, #20]
}
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	3718      	adds	r7, #24
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bd80      	pop	{r7, pc}
 8019d22:	bf00      	nop
 8019d24:	200007bc 	.word	0x200007bc
 8019d28:	20000798 	.word	0x20000798
 8019d2c:	2000074c 	.word	0x2000074c
 8019d30:	20000750 	.word	0x20000750
 8019d34:	200007ac 	.word	0x200007ac
 8019d38:	200007b4 	.word	0x200007b4
 8019d3c:	2000079c 	.word	0x2000079c
 8019d40:	20000698 	.word	0x20000698
 8019d44:	20000694 	.word	0x20000694
 8019d48:	200007a4 	.word	0x200007a4
 8019d4c:	200007a8 	.word	0x200007a8

08019d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019d50:	b480      	push	{r7}
 8019d52:	b087      	sub	sp, #28
 8019d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019d56:	4b26      	ldr	r3, [pc, #152]	; (8019df0 <vTaskSwitchContext+0xa0>)
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d003      	beq.n	8019d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019d5e:	4b25      	ldr	r3, [pc, #148]	; (8019df4 <vTaskSwitchContext+0xa4>)
 8019d60:	2201      	movs	r2, #1
 8019d62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019d64:	e03e      	b.n	8019de4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8019d66:	4b23      	ldr	r3, [pc, #140]	; (8019df4 <vTaskSwitchContext+0xa4>)
 8019d68:	2200      	movs	r2, #0
 8019d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d6c:	4b22      	ldr	r3, [pc, #136]	; (8019df8 <vTaskSwitchContext+0xa8>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	fab3 f383 	clz	r3, r3
 8019d78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019d7a:	7afb      	ldrb	r3, [r7, #11]
 8019d7c:	f1c3 031f 	rsb	r3, r3, #31
 8019d80:	617b      	str	r3, [r7, #20]
 8019d82:	491e      	ldr	r1, [pc, #120]	; (8019dfc <vTaskSwitchContext+0xac>)
 8019d84:	697a      	ldr	r2, [r7, #20]
 8019d86:	4613      	mov	r3, r2
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	4413      	add	r3, r2
 8019d8c:	009b      	lsls	r3, r3, #2
 8019d8e:	440b      	add	r3, r1
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d109      	bne.n	8019daa <vTaskSwitchContext+0x5a>
	__asm volatile
 8019d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d9a:	f383 8811 	msr	BASEPRI, r3
 8019d9e:	f3bf 8f6f 	isb	sy
 8019da2:	f3bf 8f4f 	dsb	sy
 8019da6:	607b      	str	r3, [r7, #4]
 8019da8:	e7fe      	b.n	8019da8 <vTaskSwitchContext+0x58>
 8019daa:	697a      	ldr	r2, [r7, #20]
 8019dac:	4613      	mov	r3, r2
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	4413      	add	r3, r2
 8019db2:	009b      	lsls	r3, r3, #2
 8019db4:	4a11      	ldr	r2, [pc, #68]	; (8019dfc <vTaskSwitchContext+0xac>)
 8019db6:	4413      	add	r3, r2
 8019db8:	613b      	str	r3, [r7, #16]
 8019dba:	693b      	ldr	r3, [r7, #16]
 8019dbc:	685b      	ldr	r3, [r3, #4]
 8019dbe:	685a      	ldr	r2, [r3, #4]
 8019dc0:	693b      	ldr	r3, [r7, #16]
 8019dc2:	605a      	str	r2, [r3, #4]
 8019dc4:	693b      	ldr	r3, [r7, #16]
 8019dc6:	685a      	ldr	r2, [r3, #4]
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	3308      	adds	r3, #8
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d104      	bne.n	8019dda <vTaskSwitchContext+0x8a>
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	685b      	ldr	r3, [r3, #4]
 8019dd4:	685a      	ldr	r2, [r3, #4]
 8019dd6:	693b      	ldr	r3, [r7, #16]
 8019dd8:	605a      	str	r2, [r3, #4]
 8019dda:	693b      	ldr	r3, [r7, #16]
 8019ddc:	685b      	ldr	r3, [r3, #4]
 8019dde:	68db      	ldr	r3, [r3, #12]
 8019de0:	4a07      	ldr	r2, [pc, #28]	; (8019e00 <vTaskSwitchContext+0xb0>)
 8019de2:	6013      	str	r3, [r2, #0]
}
 8019de4:	bf00      	nop
 8019de6:	371c      	adds	r7, #28
 8019de8:	46bd      	mov	sp, r7
 8019dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dee:	4770      	bx	lr
 8019df0:	200007bc 	.word	0x200007bc
 8019df4:	200007a8 	.word	0x200007a8
 8019df8:	2000079c 	.word	0x2000079c
 8019dfc:	20000698 	.word	0x20000698
 8019e00:	20000694 	.word	0x20000694

08019e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d109      	bne.n	8019e28 <vTaskPlaceOnEventList+0x24>
 8019e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e18:	f383 8811 	msr	BASEPRI, r3
 8019e1c:	f3bf 8f6f 	isb	sy
 8019e20:	f3bf 8f4f 	dsb	sy
 8019e24:	60fb      	str	r3, [r7, #12]
 8019e26:	e7fe      	b.n	8019e26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019e28:	4b07      	ldr	r3, [pc, #28]	; (8019e48 <vTaskPlaceOnEventList+0x44>)
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	3318      	adds	r3, #24
 8019e2e:	4619      	mov	r1, r3
 8019e30:	6878      	ldr	r0, [r7, #4]
 8019e32:	f7fe fda1 	bl	8018978 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019e36:	2101      	movs	r1, #1
 8019e38:	6838      	ldr	r0, [r7, #0]
 8019e3a:	f000 fd6f 	bl	801a91c <prvAddCurrentTaskToDelayedList>
}
 8019e3e:	bf00      	nop
 8019e40:	3710      	adds	r7, #16
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	20000694 	.word	0x20000694

08019e4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	68db      	ldr	r3, [r3, #12]
 8019e58:	68db      	ldr	r3, [r3, #12]
 8019e5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d109      	bne.n	8019e76 <xTaskRemoveFromEventList+0x2a>
 8019e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e66:	f383 8811 	msr	BASEPRI, r3
 8019e6a:	f3bf 8f6f 	isb	sy
 8019e6e:	f3bf 8f4f 	dsb	sy
 8019e72:	60fb      	str	r3, [r7, #12]
 8019e74:	e7fe      	b.n	8019e74 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	3318      	adds	r3, #24
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f7fe fdb5 	bl	80189ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019e80:	4b1d      	ldr	r3, [pc, #116]	; (8019ef8 <xTaskRemoveFromEventList+0xac>)
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d11c      	bne.n	8019ec2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019e88:	693b      	ldr	r3, [r7, #16]
 8019e8a:	3304      	adds	r3, #4
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7fe fdac 	bl	80189ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e96:	2201      	movs	r2, #1
 8019e98:	409a      	lsls	r2, r3
 8019e9a:	4b18      	ldr	r3, [pc, #96]	; (8019efc <xTaskRemoveFromEventList+0xb0>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	4313      	orrs	r3, r2
 8019ea0:	4a16      	ldr	r2, [pc, #88]	; (8019efc <xTaskRemoveFromEventList+0xb0>)
 8019ea2:	6013      	str	r3, [r2, #0]
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ea8:	4613      	mov	r3, r2
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	4413      	add	r3, r2
 8019eae:	009b      	lsls	r3, r3, #2
 8019eb0:	4a13      	ldr	r2, [pc, #76]	; (8019f00 <xTaskRemoveFromEventList+0xb4>)
 8019eb2:	441a      	add	r2, r3
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	3304      	adds	r3, #4
 8019eb8:	4619      	mov	r1, r3
 8019eba:	4610      	mov	r0, r2
 8019ebc:	f7fe fd38 	bl	8018930 <vListInsertEnd>
 8019ec0:	e005      	b.n	8019ece <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	3318      	adds	r3, #24
 8019ec6:	4619      	mov	r1, r3
 8019ec8:	480e      	ldr	r0, [pc, #56]	; (8019f04 <xTaskRemoveFromEventList+0xb8>)
 8019eca:	f7fe fd31 	bl	8018930 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ed2:	4b0d      	ldr	r3, [pc, #52]	; (8019f08 <xTaskRemoveFromEventList+0xbc>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d905      	bls.n	8019ee8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019edc:	2301      	movs	r3, #1
 8019ede:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019ee0:	4b0a      	ldr	r3, [pc, #40]	; (8019f0c <xTaskRemoveFromEventList+0xc0>)
 8019ee2:	2201      	movs	r2, #1
 8019ee4:	601a      	str	r2, [r3, #0]
 8019ee6:	e001      	b.n	8019eec <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8019ee8:	2300      	movs	r3, #0
 8019eea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019eec:	697b      	ldr	r3, [r7, #20]
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	3718      	adds	r7, #24
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}
 8019ef6:	bf00      	nop
 8019ef8:	200007bc 	.word	0x200007bc
 8019efc:	2000079c 	.word	0x2000079c
 8019f00:	20000698 	.word	0x20000698
 8019f04:	20000754 	.word	0x20000754
 8019f08:	20000694 	.word	0x20000694
 8019f0c:	200007a8 	.word	0x200007a8

08019f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019f10:	b480      	push	{r7}
 8019f12:	b083      	sub	sp, #12
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019f18:	4b06      	ldr	r3, [pc, #24]	; (8019f34 <vTaskInternalSetTimeOutState+0x24>)
 8019f1a:	681a      	ldr	r2, [r3, #0]
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019f20:	4b05      	ldr	r3, [pc, #20]	; (8019f38 <vTaskInternalSetTimeOutState+0x28>)
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	605a      	str	r2, [r3, #4]
}
 8019f28:	bf00      	nop
 8019f2a:	370c      	adds	r7, #12
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f32:	4770      	bx	lr
 8019f34:	200007ac 	.word	0x200007ac
 8019f38:	20000798 	.word	0x20000798

08019f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b088      	sub	sp, #32
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d109      	bne.n	8019f60 <xTaskCheckForTimeOut+0x24>
 8019f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f50:	f383 8811 	msr	BASEPRI, r3
 8019f54:	f3bf 8f6f 	isb	sy
 8019f58:	f3bf 8f4f 	dsb	sy
 8019f5c:	613b      	str	r3, [r7, #16]
 8019f5e:	e7fe      	b.n	8019f5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8019f60:	683b      	ldr	r3, [r7, #0]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d109      	bne.n	8019f7a <xTaskCheckForTimeOut+0x3e>
 8019f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f6a:	f383 8811 	msr	BASEPRI, r3
 8019f6e:	f3bf 8f6f 	isb	sy
 8019f72:	f3bf 8f4f 	dsb	sy
 8019f76:	60fb      	str	r3, [r7, #12]
 8019f78:	e7fe      	b.n	8019f78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8019f7a:	f000 fe5f 	bl	801ac3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019f7e:	4b1d      	ldr	r3, [pc, #116]	; (8019ff4 <xTaskCheckForTimeOut+0xb8>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	69ba      	ldr	r2, [r7, #24]
 8019f8a:	1ad3      	subs	r3, r2, r3
 8019f8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f96:	d102      	bne.n	8019f9e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	61fb      	str	r3, [r7, #28]
 8019f9c:	e023      	b.n	8019fe6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	681a      	ldr	r2, [r3, #0]
 8019fa2:	4b15      	ldr	r3, [pc, #84]	; (8019ff8 <xTaskCheckForTimeOut+0xbc>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d007      	beq.n	8019fba <xTaskCheckForTimeOut+0x7e>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	69ba      	ldr	r2, [r7, #24]
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	d302      	bcc.n	8019fba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	61fb      	str	r3, [r7, #28]
 8019fb8:	e015      	b.n	8019fe6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019fba:	683b      	ldr	r3, [r7, #0]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	697a      	ldr	r2, [r7, #20]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d20b      	bcs.n	8019fdc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	681a      	ldr	r2, [r3, #0]
 8019fc8:	697b      	ldr	r3, [r7, #20]
 8019fca:	1ad2      	subs	r2, r2, r3
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f7ff ff9d 	bl	8019f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	61fb      	str	r3, [r7, #28]
 8019fda:	e004      	b.n	8019fe6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	2200      	movs	r2, #0
 8019fe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019fe6:	f000 fe57 	bl	801ac98 <vPortExitCritical>

	return xReturn;
 8019fea:	69fb      	ldr	r3, [r7, #28]
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	3720      	adds	r7, #32
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}
 8019ff4:	20000798 	.word	0x20000798
 8019ff8:	200007ac 	.word	0x200007ac

08019ffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019ffc:	b480      	push	{r7}
 8019ffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a000:	4b03      	ldr	r3, [pc, #12]	; (801a010 <vTaskMissedYield+0x14>)
 801a002:	2201      	movs	r2, #1
 801a004:	601a      	str	r2, [r3, #0]
}
 801a006:	bf00      	nop
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr
 801a010:	200007a8 	.word	0x200007a8

0801a014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b082      	sub	sp, #8
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a01c:	f000 f852 	bl	801a0c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a020:	4b06      	ldr	r3, [pc, #24]	; (801a03c <prvIdleTask+0x28>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2b01      	cmp	r3, #1
 801a026:	d9f9      	bls.n	801a01c <prvIdleTask+0x8>
			{
				taskYIELD();
 801a028:	4b05      	ldr	r3, [pc, #20]	; (801a040 <prvIdleTask+0x2c>)
 801a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a02e:	601a      	str	r2, [r3, #0]
 801a030:	f3bf 8f4f 	dsb	sy
 801a034:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a038:	e7f0      	b.n	801a01c <prvIdleTask+0x8>
 801a03a:	bf00      	nop
 801a03c:	20000698 	.word	0x20000698
 801a040:	e000ed04 	.word	0xe000ed04

0801a044 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a04a:	2300      	movs	r3, #0
 801a04c:	607b      	str	r3, [r7, #4]
 801a04e:	e00c      	b.n	801a06a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a050:	687a      	ldr	r2, [r7, #4]
 801a052:	4613      	mov	r3, r2
 801a054:	009b      	lsls	r3, r3, #2
 801a056:	4413      	add	r3, r2
 801a058:	009b      	lsls	r3, r3, #2
 801a05a:	4a12      	ldr	r2, [pc, #72]	; (801a0a4 <prvInitialiseTaskLists+0x60>)
 801a05c:	4413      	add	r3, r2
 801a05e:	4618      	mov	r0, r3
 801a060:	f7fe fc39 	bl	80188d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	3301      	adds	r3, #1
 801a068:	607b      	str	r3, [r7, #4]
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	2b06      	cmp	r3, #6
 801a06e:	d9ef      	bls.n	801a050 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a070:	480d      	ldr	r0, [pc, #52]	; (801a0a8 <prvInitialiseTaskLists+0x64>)
 801a072:	f7fe fc30 	bl	80188d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a076:	480d      	ldr	r0, [pc, #52]	; (801a0ac <prvInitialiseTaskLists+0x68>)
 801a078:	f7fe fc2d 	bl	80188d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a07c:	480c      	ldr	r0, [pc, #48]	; (801a0b0 <prvInitialiseTaskLists+0x6c>)
 801a07e:	f7fe fc2a 	bl	80188d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a082:	480c      	ldr	r0, [pc, #48]	; (801a0b4 <prvInitialiseTaskLists+0x70>)
 801a084:	f7fe fc27 	bl	80188d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a088:	480b      	ldr	r0, [pc, #44]	; (801a0b8 <prvInitialiseTaskLists+0x74>)
 801a08a:	f7fe fc24 	bl	80188d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a08e:	4b0b      	ldr	r3, [pc, #44]	; (801a0bc <prvInitialiseTaskLists+0x78>)
 801a090:	4a05      	ldr	r2, [pc, #20]	; (801a0a8 <prvInitialiseTaskLists+0x64>)
 801a092:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a094:	4b0a      	ldr	r3, [pc, #40]	; (801a0c0 <prvInitialiseTaskLists+0x7c>)
 801a096:	4a05      	ldr	r2, [pc, #20]	; (801a0ac <prvInitialiseTaskLists+0x68>)
 801a098:	601a      	str	r2, [r3, #0]
}
 801a09a:	bf00      	nop
 801a09c:	3708      	adds	r7, #8
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	20000698 	.word	0x20000698
 801a0a8:	20000724 	.word	0x20000724
 801a0ac:	20000738 	.word	0x20000738
 801a0b0:	20000754 	.word	0x20000754
 801a0b4:	20000768 	.word	0x20000768
 801a0b8:	20000780 	.word	0x20000780
 801a0bc:	2000074c 	.word	0x2000074c
 801a0c0:	20000750 	.word	0x20000750

0801a0c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b082      	sub	sp, #8
 801a0c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a0ca:	e019      	b.n	801a100 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a0cc:	f000 fdb6 	bl	801ac3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a0d0:	4b0f      	ldr	r3, [pc, #60]	; (801a110 <prvCheckTasksWaitingTermination+0x4c>)
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	3304      	adds	r3, #4
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7fe fc84 	bl	80189ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a0e2:	4b0c      	ldr	r3, [pc, #48]	; (801a114 <prvCheckTasksWaitingTermination+0x50>)
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	3b01      	subs	r3, #1
 801a0e8:	4a0a      	ldr	r2, [pc, #40]	; (801a114 <prvCheckTasksWaitingTermination+0x50>)
 801a0ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a0ec:	4b0a      	ldr	r3, [pc, #40]	; (801a118 <prvCheckTasksWaitingTermination+0x54>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	3b01      	subs	r3, #1
 801a0f2:	4a09      	ldr	r2, [pc, #36]	; (801a118 <prvCheckTasksWaitingTermination+0x54>)
 801a0f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a0f6:	f000 fdcf 	bl	801ac98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f000 f80e 	bl	801a11c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a100:	4b05      	ldr	r3, [pc, #20]	; (801a118 <prvCheckTasksWaitingTermination+0x54>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d1e1      	bne.n	801a0cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a108:	bf00      	nop
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	20000768 	.word	0x20000768
 801a114:	20000794 	.word	0x20000794
 801a118:	2000077c 	.word	0x2000077c

0801a11c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b084      	sub	sp, #16
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d108      	bne.n	801a140 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a132:	4618      	mov	r0, r3
 801a134:	f000 ff5e 	bl	801aff4 <vPortFree>
				vPortFree( pxTCB );
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f000 ff5b 	bl	801aff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a13e:	e017      	b.n	801a170 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a146:	2b01      	cmp	r3, #1
 801a148:	d103      	bne.n	801a152 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f000 ff52 	bl	801aff4 <vPortFree>
	}
 801a150:	e00e      	b.n	801a170 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a158:	2b02      	cmp	r3, #2
 801a15a:	d009      	beq.n	801a170 <prvDeleteTCB+0x54>
 801a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a160:	f383 8811 	msr	BASEPRI, r3
 801a164:	f3bf 8f6f 	isb	sy
 801a168:	f3bf 8f4f 	dsb	sy
 801a16c:	60fb      	str	r3, [r7, #12]
 801a16e:	e7fe      	b.n	801a16e <prvDeleteTCB+0x52>
	}
 801a170:	bf00      	nop
 801a172:	3710      	adds	r7, #16
 801a174:	46bd      	mov	sp, r7
 801a176:	bd80      	pop	{r7, pc}

0801a178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a178:	b480      	push	{r7}
 801a17a:	b083      	sub	sp, #12
 801a17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a17e:	4b0c      	ldr	r3, [pc, #48]	; (801a1b0 <prvResetNextTaskUnblockTime+0x38>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d104      	bne.n	801a192 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a188:	4b0a      	ldr	r3, [pc, #40]	; (801a1b4 <prvResetNextTaskUnblockTime+0x3c>)
 801a18a:	f04f 32ff 	mov.w	r2, #4294967295
 801a18e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a190:	e008      	b.n	801a1a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a192:	4b07      	ldr	r3, [pc, #28]	; (801a1b0 <prvResetNextTaskUnblockTime+0x38>)
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	68db      	ldr	r3, [r3, #12]
 801a198:	68db      	ldr	r3, [r3, #12]
 801a19a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	685b      	ldr	r3, [r3, #4]
 801a1a0:	4a04      	ldr	r2, [pc, #16]	; (801a1b4 <prvResetNextTaskUnblockTime+0x3c>)
 801a1a2:	6013      	str	r3, [r2, #0]
}
 801a1a4:	bf00      	nop
 801a1a6:	370c      	adds	r7, #12
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ae:	4770      	bx	lr
 801a1b0:	2000074c 	.word	0x2000074c
 801a1b4:	200007b4 	.word	0x200007b4

0801a1b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a1b8:	b480      	push	{r7}
 801a1ba:	b083      	sub	sp, #12
 801a1bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a1be:	4b0b      	ldr	r3, [pc, #44]	; (801a1ec <xTaskGetSchedulerState+0x34>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d102      	bne.n	801a1cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	607b      	str	r3, [r7, #4]
 801a1ca:	e008      	b.n	801a1de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1cc:	4b08      	ldr	r3, [pc, #32]	; (801a1f0 <xTaskGetSchedulerState+0x38>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d102      	bne.n	801a1da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a1d4:	2302      	movs	r3, #2
 801a1d6:	607b      	str	r3, [r7, #4]
 801a1d8:	e001      	b.n	801a1de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a1de:	687b      	ldr	r3, [r7, #4]
	}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	370c      	adds	r7, #12
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ea:	4770      	bx	lr
 801a1ec:	200007a0 	.word	0x200007a0
 801a1f0:	200007bc 	.word	0x200007bc

0801a1f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b084      	sub	sp, #16
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a200:	2300      	movs	r3, #0
 801a202:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d069      	beq.n	801a2de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a20e:	4b36      	ldr	r3, [pc, #216]	; (801a2e8 <xTaskPriorityInherit+0xf4>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a214:	429a      	cmp	r2, r3
 801a216:	d259      	bcs.n	801a2cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	699b      	ldr	r3, [r3, #24]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	db06      	blt.n	801a22e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a220:	4b31      	ldr	r3, [pc, #196]	; (801a2e8 <xTaskPriorityInherit+0xf4>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a226:	f1c3 0207 	rsb	r2, r3, #7
 801a22a:	68bb      	ldr	r3, [r7, #8]
 801a22c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	6959      	ldr	r1, [r3, #20]
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a236:	4613      	mov	r3, r2
 801a238:	009b      	lsls	r3, r3, #2
 801a23a:	4413      	add	r3, r2
 801a23c:	009b      	lsls	r3, r3, #2
 801a23e:	4a2b      	ldr	r2, [pc, #172]	; (801a2ec <xTaskPriorityInherit+0xf8>)
 801a240:	4413      	add	r3, r2
 801a242:	4299      	cmp	r1, r3
 801a244:	d13a      	bne.n	801a2bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	3304      	adds	r3, #4
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7fe fbcd 	bl	80189ea <uxListRemove>
 801a250:	4603      	mov	r3, r0
 801a252:	2b00      	cmp	r3, #0
 801a254:	d115      	bne.n	801a282 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a25a:	4924      	ldr	r1, [pc, #144]	; (801a2ec <xTaskPriorityInherit+0xf8>)
 801a25c:	4613      	mov	r3, r2
 801a25e:	009b      	lsls	r3, r3, #2
 801a260:	4413      	add	r3, r2
 801a262:	009b      	lsls	r3, r3, #2
 801a264:	440b      	add	r3, r1
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d10a      	bne.n	801a282 <xTaskPriorityInherit+0x8e>
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a270:	2201      	movs	r2, #1
 801a272:	fa02 f303 	lsl.w	r3, r2, r3
 801a276:	43da      	mvns	r2, r3
 801a278:	4b1d      	ldr	r3, [pc, #116]	; (801a2f0 <xTaskPriorityInherit+0xfc>)
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	4013      	ands	r3, r2
 801a27e:	4a1c      	ldr	r2, [pc, #112]	; (801a2f0 <xTaskPriorityInherit+0xfc>)
 801a280:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a282:	4b19      	ldr	r3, [pc, #100]	; (801a2e8 <xTaskPriorityInherit+0xf4>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a28c:	68bb      	ldr	r3, [r7, #8]
 801a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a290:	2201      	movs	r2, #1
 801a292:	409a      	lsls	r2, r3
 801a294:	4b16      	ldr	r3, [pc, #88]	; (801a2f0 <xTaskPriorityInherit+0xfc>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	4313      	orrs	r3, r2
 801a29a:	4a15      	ldr	r2, [pc, #84]	; (801a2f0 <xTaskPriorityInherit+0xfc>)
 801a29c:	6013      	str	r3, [r2, #0]
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	009b      	lsls	r3, r3, #2
 801a2a6:	4413      	add	r3, r2
 801a2a8:	009b      	lsls	r3, r3, #2
 801a2aa:	4a10      	ldr	r2, [pc, #64]	; (801a2ec <xTaskPriorityInherit+0xf8>)
 801a2ac:	441a      	add	r2, r3
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	3304      	adds	r3, #4
 801a2b2:	4619      	mov	r1, r3
 801a2b4:	4610      	mov	r0, r2
 801a2b6:	f7fe fb3b 	bl	8018930 <vListInsertEnd>
 801a2ba:	e004      	b.n	801a2c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a2bc:	4b0a      	ldr	r3, [pc, #40]	; (801a2e8 <xTaskPriorityInherit+0xf4>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2c2:	68bb      	ldr	r3, [r7, #8]
 801a2c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	60fb      	str	r3, [r7, #12]
 801a2ca:	e008      	b.n	801a2de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a2d0:	4b05      	ldr	r3, [pc, #20]	; (801a2e8 <xTaskPriorityInherit+0xf4>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2d6:	429a      	cmp	r2, r3
 801a2d8:	d201      	bcs.n	801a2de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a2da:	2301      	movs	r3, #1
 801a2dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a2de:	68fb      	ldr	r3, [r7, #12]
	}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	20000694 	.word	0x20000694
 801a2ec:	20000698 	.word	0x20000698
 801a2f0:	2000079c 	.word	0x2000079c

0801a2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b086      	sub	sp, #24
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a300:	2300      	movs	r3, #0
 801a302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d06c      	beq.n	801a3e4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a30a:	4b39      	ldr	r3, [pc, #228]	; (801a3f0 <xTaskPriorityDisinherit+0xfc>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	693a      	ldr	r2, [r7, #16]
 801a310:	429a      	cmp	r2, r3
 801a312:	d009      	beq.n	801a328 <xTaskPriorityDisinherit+0x34>
 801a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a318:	f383 8811 	msr	BASEPRI, r3
 801a31c:	f3bf 8f6f 	isb	sy
 801a320:	f3bf 8f4f 	dsb	sy
 801a324:	60fb      	str	r3, [r7, #12]
 801a326:	e7fe      	b.n	801a326 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801a328:	693b      	ldr	r3, [r7, #16]
 801a32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d109      	bne.n	801a344 <xTaskPriorityDisinherit+0x50>
 801a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a334:	f383 8811 	msr	BASEPRI, r3
 801a338:	f3bf 8f6f 	isb	sy
 801a33c:	f3bf 8f4f 	dsb	sy
 801a340:	60bb      	str	r3, [r7, #8]
 801a342:	e7fe      	b.n	801a342 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a348:	1e5a      	subs	r2, r3, #1
 801a34a:	693b      	ldr	r3, [r7, #16]
 801a34c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a352:	693b      	ldr	r3, [r7, #16]
 801a354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a356:	429a      	cmp	r2, r3
 801a358:	d044      	beq.n	801a3e4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d140      	bne.n	801a3e4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a362:	693b      	ldr	r3, [r7, #16]
 801a364:	3304      	adds	r3, #4
 801a366:	4618      	mov	r0, r3
 801a368:	f7fe fb3f 	bl	80189ea <uxListRemove>
 801a36c:	4603      	mov	r3, r0
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d115      	bne.n	801a39e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a376:	491f      	ldr	r1, [pc, #124]	; (801a3f4 <xTaskPriorityDisinherit+0x100>)
 801a378:	4613      	mov	r3, r2
 801a37a:	009b      	lsls	r3, r3, #2
 801a37c:	4413      	add	r3, r2
 801a37e:	009b      	lsls	r3, r3, #2
 801a380:	440b      	add	r3, r1
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d10a      	bne.n	801a39e <xTaskPriorityDisinherit+0xaa>
 801a388:	693b      	ldr	r3, [r7, #16]
 801a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a38c:	2201      	movs	r2, #1
 801a38e:	fa02 f303 	lsl.w	r3, r2, r3
 801a392:	43da      	mvns	r2, r3
 801a394:	4b18      	ldr	r3, [pc, #96]	; (801a3f8 <xTaskPriorityDisinherit+0x104>)
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	4013      	ands	r3, r2
 801a39a:	4a17      	ldr	r2, [pc, #92]	; (801a3f8 <xTaskPriorityDisinherit+0x104>)
 801a39c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a39e:	693b      	ldr	r3, [r7, #16]
 801a3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a3a2:	693b      	ldr	r3, [r7, #16]
 801a3a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3aa:	f1c3 0207 	rsb	r2, r3, #7
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a3b2:	693b      	ldr	r3, [r7, #16]
 801a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3b6:	2201      	movs	r2, #1
 801a3b8:	409a      	lsls	r2, r3
 801a3ba:	4b0f      	ldr	r3, [pc, #60]	; (801a3f8 <xTaskPriorityDisinherit+0x104>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	4313      	orrs	r3, r2
 801a3c0:	4a0d      	ldr	r2, [pc, #52]	; (801a3f8 <xTaskPriorityDisinherit+0x104>)
 801a3c2:	6013      	str	r3, [r2, #0]
 801a3c4:	693b      	ldr	r3, [r7, #16]
 801a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3c8:	4613      	mov	r3, r2
 801a3ca:	009b      	lsls	r3, r3, #2
 801a3cc:	4413      	add	r3, r2
 801a3ce:	009b      	lsls	r3, r3, #2
 801a3d0:	4a08      	ldr	r2, [pc, #32]	; (801a3f4 <xTaskPriorityDisinherit+0x100>)
 801a3d2:	441a      	add	r2, r3
 801a3d4:	693b      	ldr	r3, [r7, #16]
 801a3d6:	3304      	adds	r3, #4
 801a3d8:	4619      	mov	r1, r3
 801a3da:	4610      	mov	r0, r2
 801a3dc:	f7fe faa8 	bl	8018930 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a3e4:	697b      	ldr	r3, [r7, #20]
	}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3718      	adds	r7, #24
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	20000694 	.word	0x20000694
 801a3f4:	20000698 	.word	0x20000698
 801a3f8:	2000079c 	.word	0x2000079c

0801a3fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b088      	sub	sp, #32
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a40a:	2301      	movs	r3, #1
 801a40c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	2b00      	cmp	r3, #0
 801a412:	f000 8081 	beq.w	801a518 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a416:	69bb      	ldr	r3, [r7, #24]
 801a418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d109      	bne.n	801a432 <vTaskPriorityDisinheritAfterTimeout+0x36>
 801a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a422:	f383 8811 	msr	BASEPRI, r3
 801a426:	f3bf 8f6f 	isb	sy
 801a42a:	f3bf 8f4f 	dsb	sy
 801a42e:	60fb      	str	r3, [r7, #12]
 801a430:	e7fe      	b.n	801a430 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a432:	69bb      	ldr	r3, [r7, #24]
 801a434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d902      	bls.n	801a442 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	61fb      	str	r3, [r7, #28]
 801a440:	e002      	b.n	801a448 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a442:	69bb      	ldr	r3, [r7, #24]
 801a444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a446:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a448:	69bb      	ldr	r3, [r7, #24]
 801a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a44c:	69fa      	ldr	r2, [r7, #28]
 801a44e:	429a      	cmp	r2, r3
 801a450:	d062      	beq.n	801a518 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a452:	69bb      	ldr	r3, [r7, #24]
 801a454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a456:	697a      	ldr	r2, [r7, #20]
 801a458:	429a      	cmp	r2, r3
 801a45a:	d15d      	bne.n	801a518 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a45c:	4b30      	ldr	r3, [pc, #192]	; (801a520 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	69ba      	ldr	r2, [r7, #24]
 801a462:	429a      	cmp	r2, r3
 801a464:	d109      	bne.n	801a47a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a46a:	f383 8811 	msr	BASEPRI, r3
 801a46e:	f3bf 8f6f 	isb	sy
 801a472:	f3bf 8f4f 	dsb	sy
 801a476:	60bb      	str	r3, [r7, #8]
 801a478:	e7fe      	b.n	801a478 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a47a:	69bb      	ldr	r3, [r7, #24]
 801a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a47e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a480:	69bb      	ldr	r3, [r7, #24]
 801a482:	69fa      	ldr	r2, [r7, #28]
 801a484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a486:	69bb      	ldr	r3, [r7, #24]
 801a488:	699b      	ldr	r3, [r3, #24]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	db04      	blt.n	801a498 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a48e:	69fb      	ldr	r3, [r7, #28]
 801a490:	f1c3 0207 	rsb	r2, r3, #7
 801a494:	69bb      	ldr	r3, [r7, #24]
 801a496:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a498:	69bb      	ldr	r3, [r7, #24]
 801a49a:	6959      	ldr	r1, [r3, #20]
 801a49c:	693a      	ldr	r2, [r7, #16]
 801a49e:	4613      	mov	r3, r2
 801a4a0:	009b      	lsls	r3, r3, #2
 801a4a2:	4413      	add	r3, r2
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	4a1f      	ldr	r2, [pc, #124]	; (801a524 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801a4a8:	4413      	add	r3, r2
 801a4aa:	4299      	cmp	r1, r3
 801a4ac:	d134      	bne.n	801a518 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	3304      	adds	r3, #4
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7fe fa99 	bl	80189ea <uxListRemove>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d115      	bne.n	801a4ea <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a4c2:	4918      	ldr	r1, [pc, #96]	; (801a524 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801a4c4:	4613      	mov	r3, r2
 801a4c6:	009b      	lsls	r3, r3, #2
 801a4c8:	4413      	add	r3, r2
 801a4ca:	009b      	lsls	r3, r3, #2
 801a4cc:	440b      	add	r3, r1
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d10a      	bne.n	801a4ea <vTaskPriorityDisinheritAfterTimeout+0xee>
 801a4d4:	69bb      	ldr	r3, [r7, #24]
 801a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4d8:	2201      	movs	r2, #1
 801a4da:	fa02 f303 	lsl.w	r3, r2, r3
 801a4de:	43da      	mvns	r2, r3
 801a4e0:	4b11      	ldr	r3, [pc, #68]	; (801a528 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	4013      	ands	r3, r2
 801a4e6:	4a10      	ldr	r2, [pc, #64]	; (801a528 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801a4e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4ee:	2201      	movs	r2, #1
 801a4f0:	409a      	lsls	r2, r3
 801a4f2:	4b0d      	ldr	r3, [pc, #52]	; (801a528 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4313      	orrs	r3, r2
 801a4f8:	4a0b      	ldr	r2, [pc, #44]	; (801a528 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801a4fa:	6013      	str	r3, [r2, #0]
 801a4fc:	69bb      	ldr	r3, [r7, #24]
 801a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a500:	4613      	mov	r3, r2
 801a502:	009b      	lsls	r3, r3, #2
 801a504:	4413      	add	r3, r2
 801a506:	009b      	lsls	r3, r3, #2
 801a508:	4a06      	ldr	r2, [pc, #24]	; (801a524 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801a50a:	441a      	add	r2, r3
 801a50c:	69bb      	ldr	r3, [r7, #24]
 801a50e:	3304      	adds	r3, #4
 801a510:	4619      	mov	r1, r3
 801a512:	4610      	mov	r0, r2
 801a514:	f7fe fa0c 	bl	8018930 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a518:	bf00      	nop
 801a51a:	3720      	adds	r7, #32
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}
 801a520:	20000694 	.word	0x20000694
 801a524:	20000698 	.word	0x20000698
 801a528:	2000079c 	.word	0x2000079c

0801a52c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a52c:	b480      	push	{r7}
 801a52e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a530:	4b07      	ldr	r3, [pc, #28]	; (801a550 <pvTaskIncrementMutexHeldCount+0x24>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d004      	beq.n	801a542 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a538:	4b05      	ldr	r3, [pc, #20]	; (801a550 <pvTaskIncrementMutexHeldCount+0x24>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a53e:	3201      	adds	r2, #1
 801a540:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801a542:	4b03      	ldr	r3, [pc, #12]	; (801a550 <pvTaskIncrementMutexHeldCount+0x24>)
 801a544:	681b      	ldr	r3, [r3, #0]
	}
 801a546:	4618      	mov	r0, r3
 801a548:	46bd      	mov	sp, r7
 801a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54e:	4770      	bx	lr
 801a550:	20000694 	.word	0x20000694

0801a554 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801a554:	b580      	push	{r7, lr}
 801a556:	b086      	sub	sp, #24
 801a558:	af00      	add	r7, sp, #0
 801a55a:	60f8      	str	r0, [r7, #12]
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	607a      	str	r2, [r7, #4]
 801a560:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801a562:	f000 fb6b 	bl	801ac3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801a566:	4b26      	ldr	r3, [pc, #152]	; (801a600 <xTaskNotifyWait+0xac>)
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a56e:	b2db      	uxtb	r3, r3
 801a570:	2b02      	cmp	r3, #2
 801a572:	d01a      	beq.n	801a5aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801a574:	4b22      	ldr	r3, [pc, #136]	; (801a600 <xTaskNotifyWait+0xac>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801a57a:	68fa      	ldr	r2, [r7, #12]
 801a57c:	43d2      	mvns	r2, r2
 801a57e:	400a      	ands	r2, r1
 801a580:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801a582:	4b1f      	ldr	r3, [pc, #124]	; (801a600 <xTaskNotifyWait+0xac>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2201      	movs	r2, #1
 801a588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801a58c:	683b      	ldr	r3, [r7, #0]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d00b      	beq.n	801a5aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a592:	2101      	movs	r1, #1
 801a594:	6838      	ldr	r0, [r7, #0]
 801a596:	f000 f9c1 	bl	801a91c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801a59a:	4b1a      	ldr	r3, [pc, #104]	; (801a604 <xTaskNotifyWait+0xb0>)
 801a59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5a0:	601a      	str	r2, [r3, #0]
 801a5a2:	f3bf 8f4f 	dsb	sy
 801a5a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a5aa:	f000 fb75 	bl	801ac98 <vPortExitCritical>

		taskENTER_CRITICAL();
 801a5ae:	f000 fb45 	bl	801ac3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d004      	beq.n	801a5c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801a5b8:	4b11      	ldr	r3, [pc, #68]	; (801a600 <xTaskNotifyWait+0xac>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801a5c2:	4b0f      	ldr	r3, [pc, #60]	; (801a600 <xTaskNotifyWait+0xac>)
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	2b02      	cmp	r3, #2
 801a5ce:	d002      	beq.n	801a5d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	617b      	str	r3, [r7, #20]
 801a5d4:	e008      	b.n	801a5e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801a5d6:	4b0a      	ldr	r3, [pc, #40]	; (801a600 <xTaskNotifyWait+0xac>)
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801a5dc:	68ba      	ldr	r2, [r7, #8]
 801a5de:	43d2      	mvns	r2, r2
 801a5e0:	400a      	ands	r2, r1
 801a5e2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801a5e4:	2301      	movs	r3, #1
 801a5e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a5e8:	4b05      	ldr	r3, [pc, #20]	; (801a600 <xTaskNotifyWait+0xac>)
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801a5f2:	f000 fb51 	bl	801ac98 <vPortExitCritical>

		return xReturn;
 801a5f6:	697b      	ldr	r3, [r7, #20]
	}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3718      	adds	r7, #24
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	20000694 	.word	0x20000694
 801a604:	e000ed04 	.word	0xe000ed04

0801a608 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b08a      	sub	sp, #40	; 0x28
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	60b9      	str	r1, [r7, #8]
 801a612:	603b      	str	r3, [r7, #0]
 801a614:	4613      	mov	r3, r2
 801a616:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801a618:	2301      	movs	r3, #1
 801a61a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d109      	bne.n	801a636 <xTaskGenericNotify+0x2e>
 801a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a626:	f383 8811 	msr	BASEPRI, r3
 801a62a:	f3bf 8f6f 	isb	sy
 801a62e:	f3bf 8f4f 	dsb	sy
 801a632:	61bb      	str	r3, [r7, #24]
 801a634:	e7fe      	b.n	801a634 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801a63a:	f000 faff 	bl	801ac3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d003      	beq.n	801a64c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801a644:	6a3b      	ldr	r3, [r7, #32]
 801a646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801a64c:	6a3b      	ldr	r3, [r7, #32]
 801a64e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a652:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801a654:	6a3b      	ldr	r3, [r7, #32]
 801a656:	2202      	movs	r2, #2
 801a658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801a65c:	79fb      	ldrb	r3, [r7, #7]
 801a65e:	2b04      	cmp	r3, #4
 801a660:	d827      	bhi.n	801a6b2 <xTaskGenericNotify+0xaa>
 801a662:	a201      	add	r2, pc, #4	; (adr r2, 801a668 <xTaskGenericNotify+0x60>)
 801a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a668:	0801a6d1 	.word	0x0801a6d1
 801a66c:	0801a67d 	.word	0x0801a67d
 801a670:	0801a68b 	.word	0x0801a68b
 801a674:	0801a697 	.word	0x0801a697
 801a678:	0801a69f 	.word	0x0801a69f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801a67c:	6a3b      	ldr	r3, [r7, #32]
 801a67e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	431a      	orrs	r2, r3
 801a684:	6a3b      	ldr	r3, [r7, #32]
 801a686:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a688:	e025      	b.n	801a6d6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801a68a:	6a3b      	ldr	r3, [r7, #32]
 801a68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a68e:	1c5a      	adds	r2, r3, #1
 801a690:	6a3b      	ldr	r3, [r7, #32]
 801a692:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a694:	e01f      	b.n	801a6d6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801a696:	6a3b      	ldr	r3, [r7, #32]
 801a698:	68ba      	ldr	r2, [r7, #8]
 801a69a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a69c:	e01b      	b.n	801a6d6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801a69e:	7ffb      	ldrb	r3, [r7, #31]
 801a6a0:	2b02      	cmp	r3, #2
 801a6a2:	d003      	beq.n	801a6ac <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801a6a4:	6a3b      	ldr	r3, [r7, #32]
 801a6a6:	68ba      	ldr	r2, [r7, #8]
 801a6a8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801a6aa:	e014      	b.n	801a6d6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801a6b0:	e011      	b.n	801a6d6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801a6b2:	6a3b      	ldr	r3, [r7, #32]
 801a6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6ba:	d00b      	beq.n	801a6d4 <xTaskGenericNotify+0xcc>
 801a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6c0:	f383 8811 	msr	BASEPRI, r3
 801a6c4:	f3bf 8f6f 	isb	sy
 801a6c8:	f3bf 8f4f 	dsb	sy
 801a6cc:	617b      	str	r3, [r7, #20]
 801a6ce:	e7fe      	b.n	801a6ce <xTaskGenericNotify+0xc6>
					break;
 801a6d0:	bf00      	nop
 801a6d2:	e000      	b.n	801a6d6 <xTaskGenericNotify+0xce>

					break;
 801a6d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801a6d6:	7ffb      	ldrb	r3, [r7, #31]
 801a6d8:	2b01      	cmp	r3, #1
 801a6da:	d138      	bne.n	801a74e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a6dc:	6a3b      	ldr	r3, [r7, #32]
 801a6de:	3304      	adds	r3, #4
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7fe f982 	bl	80189ea <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801a6e6:	6a3b      	ldr	r3, [r7, #32]
 801a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6ea:	2201      	movs	r2, #1
 801a6ec:	409a      	lsls	r2, r3
 801a6ee:	4b1b      	ldr	r3, [pc, #108]	; (801a75c <xTaskGenericNotify+0x154>)
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	4313      	orrs	r3, r2
 801a6f4:	4a19      	ldr	r2, [pc, #100]	; (801a75c <xTaskGenericNotify+0x154>)
 801a6f6:	6013      	str	r3, [r2, #0]
 801a6f8:	6a3b      	ldr	r3, [r7, #32]
 801a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6fc:	4613      	mov	r3, r2
 801a6fe:	009b      	lsls	r3, r3, #2
 801a700:	4413      	add	r3, r2
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	4a16      	ldr	r2, [pc, #88]	; (801a760 <xTaskGenericNotify+0x158>)
 801a706:	441a      	add	r2, r3
 801a708:	6a3b      	ldr	r3, [r7, #32]
 801a70a:	3304      	adds	r3, #4
 801a70c:	4619      	mov	r1, r3
 801a70e:	4610      	mov	r0, r2
 801a710:	f7fe f90e 	bl	8018930 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801a714:	6a3b      	ldr	r3, [r7, #32]
 801a716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d009      	beq.n	801a730 <xTaskGenericNotify+0x128>
 801a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a720:	f383 8811 	msr	BASEPRI, r3
 801a724:	f3bf 8f6f 	isb	sy
 801a728:	f3bf 8f4f 	dsb	sy
 801a72c:	613b      	str	r3, [r7, #16]
 801a72e:	e7fe      	b.n	801a72e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a730:	6a3b      	ldr	r3, [r7, #32]
 801a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a734:	4b0b      	ldr	r3, [pc, #44]	; (801a764 <xTaskGenericNotify+0x15c>)
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a73a:	429a      	cmp	r2, r3
 801a73c:	d907      	bls.n	801a74e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801a73e:	4b0a      	ldr	r3, [pc, #40]	; (801a768 <xTaskGenericNotify+0x160>)
 801a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a744:	601a      	str	r2, [r3, #0]
 801a746:	f3bf 8f4f 	dsb	sy
 801a74a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a74e:	f000 faa3 	bl	801ac98 <vPortExitCritical>

		return xReturn;
 801a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a754:	4618      	mov	r0, r3
 801a756:	3728      	adds	r7, #40	; 0x28
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}
 801a75c:	2000079c 	.word	0x2000079c
 801a760:	20000698 	.word	0x20000698
 801a764:	20000694 	.word	0x20000694
 801a768:	e000ed04 	.word	0xe000ed04

0801a76c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b08e      	sub	sp, #56	; 0x38
 801a770:	af00      	add	r7, sp, #0
 801a772:	60f8      	str	r0, [r7, #12]
 801a774:	60b9      	str	r1, [r7, #8]
 801a776:	603b      	str	r3, [r7, #0]
 801a778:	4613      	mov	r3, r2
 801a77a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801a77c:	2301      	movs	r3, #1
 801a77e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d109      	bne.n	801a79a <xTaskGenericNotifyFromISR+0x2e>
 801a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a78a:	f383 8811 	msr	BASEPRI, r3
 801a78e:	f3bf 8f6f 	isb	sy
 801a792:	f3bf 8f4f 	dsb	sy
 801a796:	627b      	str	r3, [r7, #36]	; 0x24
 801a798:	e7fe      	b.n	801a798 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a79a:	f000 fb2b 	bl	801adf4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801a7a2:	f3ef 8211 	mrs	r2, BASEPRI
 801a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7aa:	f383 8811 	msr	BASEPRI, r3
 801a7ae:	f3bf 8f6f 	isb	sy
 801a7b2:	f3bf 8f4f 	dsb	sy
 801a7b6:	623a      	str	r2, [r7, #32]
 801a7b8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801a7ba:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801a7be:	683b      	ldr	r3, [r7, #0]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d003      	beq.n	801a7cc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a7c8:	683b      	ldr	r3, [r7, #0]
 801a7ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7d8:	2202      	movs	r2, #2
 801a7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801a7de:	79fb      	ldrb	r3, [r7, #7]
 801a7e0:	2b04      	cmp	r3, #4
 801a7e2:	d829      	bhi.n	801a838 <xTaskGenericNotifyFromISR+0xcc>
 801a7e4:	a201      	add	r2, pc, #4	; (adr r2, 801a7ec <xTaskGenericNotifyFromISR+0x80>)
 801a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7ea:	bf00      	nop
 801a7ec:	0801a857 	.word	0x0801a857
 801a7f0:	0801a801 	.word	0x0801a801
 801a7f4:	0801a80f 	.word	0x0801a80f
 801a7f8:	0801a81b 	.word	0x0801a81b
 801a7fc:	0801a823 	.word	0x0801a823
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	431a      	orrs	r2, r3
 801a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a80a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a80c:	e026      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a812:	1c5a      	adds	r2, r3, #1
 801a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a816:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a818:	e020      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a81c:	68ba      	ldr	r2, [r7, #8]
 801a81e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801a820:	e01c      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801a822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a826:	2b02      	cmp	r3, #2
 801a828:	d003      	beq.n	801a832 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82c:	68ba      	ldr	r2, [r7, #8]
 801a82e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801a830:	e014      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801a832:	2300      	movs	r3, #0
 801a834:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801a836:	e011      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a840:	d00b      	beq.n	801a85a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a846:	f383 8811 	msr	BASEPRI, r3
 801a84a:	f3bf 8f6f 	isb	sy
 801a84e:	f3bf 8f4f 	dsb	sy
 801a852:	61bb      	str	r3, [r7, #24]
 801a854:	e7fe      	b.n	801a854 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801a856:	bf00      	nop
 801a858:	e000      	b.n	801a85c <xTaskGenericNotifyFromISR+0xf0>
					break;
 801a85a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801a85c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a860:	2b01      	cmp	r3, #1
 801a862:	d144      	bne.n	801a8ee <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d009      	beq.n	801a880 <xTaskGenericNotifyFromISR+0x114>
 801a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a870:	f383 8811 	msr	BASEPRI, r3
 801a874:	f3bf 8f6f 	isb	sy
 801a878:	f3bf 8f4f 	dsb	sy
 801a87c:	617b      	str	r3, [r7, #20]
 801a87e:	e7fe      	b.n	801a87e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a880:	4b20      	ldr	r3, [pc, #128]	; (801a904 <xTaskGenericNotifyFromISR+0x198>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d11c      	bne.n	801a8c2 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a88a:	3304      	adds	r3, #4
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7fe f8ac 	bl	80189ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a896:	2201      	movs	r2, #1
 801a898:	409a      	lsls	r2, r3
 801a89a:	4b1b      	ldr	r3, [pc, #108]	; (801a908 <xTaskGenericNotifyFromISR+0x19c>)
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	4313      	orrs	r3, r2
 801a8a0:	4a19      	ldr	r2, [pc, #100]	; (801a908 <xTaskGenericNotifyFromISR+0x19c>)
 801a8a2:	6013      	str	r3, [r2, #0]
 801a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8a8:	4613      	mov	r3, r2
 801a8aa:	009b      	lsls	r3, r3, #2
 801a8ac:	4413      	add	r3, r2
 801a8ae:	009b      	lsls	r3, r3, #2
 801a8b0:	4a16      	ldr	r2, [pc, #88]	; (801a90c <xTaskGenericNotifyFromISR+0x1a0>)
 801a8b2:	441a      	add	r2, r3
 801a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8b6:	3304      	adds	r3, #4
 801a8b8:	4619      	mov	r1, r3
 801a8ba:	4610      	mov	r0, r2
 801a8bc:	f7fe f838 	bl	8018930 <vListInsertEnd>
 801a8c0:	e005      	b.n	801a8ce <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c4:	3318      	adds	r3, #24
 801a8c6:	4619      	mov	r1, r3
 801a8c8:	4811      	ldr	r0, [pc, #68]	; (801a910 <xTaskGenericNotifyFromISR+0x1a4>)
 801a8ca:	f7fe f831 	bl	8018930 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8d2:	4b10      	ldr	r3, [pc, #64]	; (801a914 <xTaskGenericNotifyFromISR+0x1a8>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8d8:	429a      	cmp	r2, r3
 801a8da:	d908      	bls.n	801a8ee <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801a8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d002      	beq.n	801a8e8 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801a8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8e4:	2201      	movs	r2, #1
 801a8e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801a8e8:	4b0b      	ldr	r3, [pc, #44]	; (801a918 <xTaskGenericNotifyFromISR+0x1ac>)
 801a8ea:	2201      	movs	r2, #1
 801a8ec:	601a      	str	r2, [r3, #0]
 801a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a8f2:	693b      	ldr	r3, [r7, #16]
 801a8f4:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	3738      	adds	r7, #56	; 0x38
 801a8fe:	46bd      	mov	sp, r7
 801a900:	bd80      	pop	{r7, pc}
 801a902:	bf00      	nop
 801a904:	200007bc 	.word	0x200007bc
 801a908:	2000079c 	.word	0x2000079c
 801a90c:	20000698 	.word	0x20000698
 801a910:	20000754 	.word	0x20000754
 801a914:	20000694 	.word	0x20000694
 801a918:	200007a8 	.word	0x200007a8

0801a91c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a926:	4b29      	ldr	r3, [pc, #164]	; (801a9cc <prvAddCurrentTaskToDelayedList+0xb0>)
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a92c:	4b28      	ldr	r3, [pc, #160]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	3304      	adds	r3, #4
 801a932:	4618      	mov	r0, r3
 801a934:	f7fe f859 	bl	80189ea <uxListRemove>
 801a938:	4603      	mov	r3, r0
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d10b      	bne.n	801a956 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a93e:	4b24      	ldr	r3, [pc, #144]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a944:	2201      	movs	r2, #1
 801a946:	fa02 f303 	lsl.w	r3, r2, r3
 801a94a:	43da      	mvns	r2, r3
 801a94c:	4b21      	ldr	r3, [pc, #132]	; (801a9d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	4013      	ands	r3, r2
 801a952:	4a20      	ldr	r2, [pc, #128]	; (801a9d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a954:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a95c:	d10a      	bne.n	801a974 <prvAddCurrentTaskToDelayedList+0x58>
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d007      	beq.n	801a974 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a964:	4b1a      	ldr	r3, [pc, #104]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	3304      	adds	r3, #4
 801a96a:	4619      	mov	r1, r3
 801a96c:	481a      	ldr	r0, [pc, #104]	; (801a9d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801a96e:	f7fd ffdf 	bl	8018930 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a972:	e026      	b.n	801a9c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	4413      	add	r3, r2
 801a97a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a97c:	4b14      	ldr	r3, [pc, #80]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	68ba      	ldr	r2, [r7, #8]
 801a982:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a984:	68ba      	ldr	r2, [r7, #8]
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	429a      	cmp	r2, r3
 801a98a:	d209      	bcs.n	801a9a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a98c:	4b13      	ldr	r3, [pc, #76]	; (801a9dc <prvAddCurrentTaskToDelayedList+0xc0>)
 801a98e:	681a      	ldr	r2, [r3, #0]
 801a990:	4b0f      	ldr	r3, [pc, #60]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	3304      	adds	r3, #4
 801a996:	4619      	mov	r1, r3
 801a998:	4610      	mov	r0, r2
 801a99a:	f7fd ffed 	bl	8018978 <vListInsert>
}
 801a99e:	e010      	b.n	801a9c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a9a0:	4b0f      	ldr	r3, [pc, #60]	; (801a9e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a9a2:	681a      	ldr	r2, [r3, #0]
 801a9a4:	4b0a      	ldr	r3, [pc, #40]	; (801a9d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	3304      	adds	r3, #4
 801a9aa:	4619      	mov	r1, r3
 801a9ac:	4610      	mov	r0, r2
 801a9ae:	f7fd ffe3 	bl	8018978 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a9b2:	4b0c      	ldr	r3, [pc, #48]	; (801a9e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	68ba      	ldr	r2, [r7, #8]
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	d202      	bcs.n	801a9c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a9bc:	4a09      	ldr	r2, [pc, #36]	; (801a9e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a9be:	68bb      	ldr	r3, [r7, #8]
 801a9c0:	6013      	str	r3, [r2, #0]
}
 801a9c2:	bf00      	nop
 801a9c4:	3710      	adds	r7, #16
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	20000798 	.word	0x20000798
 801a9d0:	20000694 	.word	0x20000694
 801a9d4:	2000079c 	.word	0x2000079c
 801a9d8:	20000780 	.word	0x20000780
 801a9dc:	20000750 	.word	0x20000750
 801a9e0:	2000074c 	.word	0x2000074c
 801a9e4:	200007b4 	.word	0x200007b4

0801a9e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a9e8:	b480      	push	{r7}
 801a9ea:	b085      	sub	sp, #20
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	60f8      	str	r0, [r7, #12]
 801a9f0:	60b9      	str	r1, [r7, #8]
 801a9f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	3b04      	subs	r3, #4
 801a9f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801aa00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	3b04      	subs	r3, #4
 801aa06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	f023 0201 	bic.w	r2, r3, #1
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	3b04      	subs	r3, #4
 801aa16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801aa18:	4a0c      	ldr	r2, [pc, #48]	; (801aa4c <pxPortInitialiseStack+0x64>)
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	3b14      	subs	r3, #20
 801aa22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801aa24:	687a      	ldr	r2, [r7, #4]
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	3b04      	subs	r3, #4
 801aa2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	f06f 0202 	mvn.w	r2, #2
 801aa36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	3b20      	subs	r3, #32
 801aa3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801aa3e:	68fb      	ldr	r3, [r7, #12]
}
 801aa40:	4618      	mov	r0, r3
 801aa42:	3714      	adds	r7, #20
 801aa44:	46bd      	mov	sp, r7
 801aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4a:	4770      	bx	lr
 801aa4c:	0801aa51 	.word	0x0801aa51

0801aa50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801aa50:	b480      	push	{r7}
 801aa52:	b085      	sub	sp, #20
 801aa54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801aa56:	2300      	movs	r3, #0
 801aa58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801aa5a:	4b11      	ldr	r3, [pc, #68]	; (801aaa0 <prvTaskExitError+0x50>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa62:	d009      	beq.n	801aa78 <prvTaskExitError+0x28>
	__asm volatile
 801aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa68:	f383 8811 	msr	BASEPRI, r3
 801aa6c:	f3bf 8f6f 	isb	sy
 801aa70:	f3bf 8f4f 	dsb	sy
 801aa74:	60fb      	str	r3, [r7, #12]
 801aa76:	e7fe      	b.n	801aa76 <prvTaskExitError+0x26>
 801aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa7c:	f383 8811 	msr	BASEPRI, r3
 801aa80:	f3bf 8f6f 	isb	sy
 801aa84:	f3bf 8f4f 	dsb	sy
 801aa88:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801aa8a:	bf00      	nop
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d0fc      	beq.n	801aa8c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801aa92:	bf00      	nop
 801aa94:	3714      	adds	r7, #20
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr
 801aa9e:	bf00      	nop
 801aaa0:	200001ac 	.word	0x200001ac
	...

0801aab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801aab0:	4b07      	ldr	r3, [pc, #28]	; (801aad0 <pxCurrentTCBConst2>)
 801aab2:	6819      	ldr	r1, [r3, #0]
 801aab4:	6808      	ldr	r0, [r1, #0]
 801aab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaba:	f380 8809 	msr	PSP, r0
 801aabe:	f3bf 8f6f 	isb	sy
 801aac2:	f04f 0000 	mov.w	r0, #0
 801aac6:	f380 8811 	msr	BASEPRI, r0
 801aaca:	4770      	bx	lr
 801aacc:	f3af 8000 	nop.w

0801aad0 <pxCurrentTCBConst2>:
 801aad0:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801aad4:	bf00      	nop
 801aad6:	bf00      	nop

0801aad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801aad8:	4808      	ldr	r0, [pc, #32]	; (801aafc <prvPortStartFirstTask+0x24>)
 801aada:	6800      	ldr	r0, [r0, #0]
 801aadc:	6800      	ldr	r0, [r0, #0]
 801aade:	f380 8808 	msr	MSP, r0
 801aae2:	f04f 0000 	mov.w	r0, #0
 801aae6:	f380 8814 	msr	CONTROL, r0
 801aaea:	b662      	cpsie	i
 801aaec:	b661      	cpsie	f
 801aaee:	f3bf 8f4f 	dsb	sy
 801aaf2:	f3bf 8f6f 	isb	sy
 801aaf6:	df00      	svc	0
 801aaf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801aafa:	bf00      	nop
 801aafc:	e000ed08 	.word	0xe000ed08

0801ab00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b086      	sub	sp, #24
 801ab04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ab06:	4b44      	ldr	r3, [pc, #272]	; (801ac18 <xPortStartScheduler+0x118>)
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	4a44      	ldr	r2, [pc, #272]	; (801ac1c <xPortStartScheduler+0x11c>)
 801ab0c:	4293      	cmp	r3, r2
 801ab0e:	d109      	bne.n	801ab24 <xPortStartScheduler+0x24>
 801ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab14:	f383 8811 	msr	BASEPRI, r3
 801ab18:	f3bf 8f6f 	isb	sy
 801ab1c:	f3bf 8f4f 	dsb	sy
 801ab20:	613b      	str	r3, [r7, #16]
 801ab22:	e7fe      	b.n	801ab22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ab24:	4b3c      	ldr	r3, [pc, #240]	; (801ac18 <xPortStartScheduler+0x118>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	4a3d      	ldr	r2, [pc, #244]	; (801ac20 <xPortStartScheduler+0x120>)
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	d109      	bne.n	801ab42 <xPortStartScheduler+0x42>
 801ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab32:	f383 8811 	msr	BASEPRI, r3
 801ab36:	f3bf 8f6f 	isb	sy
 801ab3a:	f3bf 8f4f 	dsb	sy
 801ab3e:	60fb      	str	r3, [r7, #12]
 801ab40:	e7fe      	b.n	801ab40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801ab42:	4b38      	ldr	r3, [pc, #224]	; (801ac24 <xPortStartScheduler+0x124>)
 801ab44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	781b      	ldrb	r3, [r3, #0]
 801ab4a:	b2db      	uxtb	r3, r3
 801ab4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	22ff      	movs	r2, #255	; 0xff
 801ab52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ab54:	697b      	ldr	r3, [r7, #20]
 801ab56:	781b      	ldrb	r3, [r3, #0]
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ab5c:	78fb      	ldrb	r3, [r7, #3]
 801ab5e:	b2db      	uxtb	r3, r3
 801ab60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ab64:	b2da      	uxtb	r2, r3
 801ab66:	4b30      	ldr	r3, [pc, #192]	; (801ac28 <xPortStartScheduler+0x128>)
 801ab68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ab6a:	4b30      	ldr	r3, [pc, #192]	; (801ac2c <xPortStartScheduler+0x12c>)
 801ab6c:	2207      	movs	r2, #7
 801ab6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ab70:	e009      	b.n	801ab86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 801ab72:	4b2e      	ldr	r3, [pc, #184]	; (801ac2c <xPortStartScheduler+0x12c>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	3b01      	subs	r3, #1
 801ab78:	4a2c      	ldr	r2, [pc, #176]	; (801ac2c <xPortStartScheduler+0x12c>)
 801ab7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ab7c:	78fb      	ldrb	r3, [r7, #3]
 801ab7e:	b2db      	uxtb	r3, r3
 801ab80:	005b      	lsls	r3, r3, #1
 801ab82:	b2db      	uxtb	r3, r3
 801ab84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ab86:	78fb      	ldrb	r3, [r7, #3]
 801ab88:	b2db      	uxtb	r3, r3
 801ab8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ab8e:	2b80      	cmp	r3, #128	; 0x80
 801ab90:	d0ef      	beq.n	801ab72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ab92:	4b26      	ldr	r3, [pc, #152]	; (801ac2c <xPortStartScheduler+0x12c>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	f1c3 0307 	rsb	r3, r3, #7
 801ab9a:	2b04      	cmp	r3, #4
 801ab9c:	d009      	beq.n	801abb2 <xPortStartScheduler+0xb2>
 801ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aba2:	f383 8811 	msr	BASEPRI, r3
 801aba6:	f3bf 8f6f 	isb	sy
 801abaa:	f3bf 8f4f 	dsb	sy
 801abae:	60bb      	str	r3, [r7, #8]
 801abb0:	e7fe      	b.n	801abb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801abb2:	4b1e      	ldr	r3, [pc, #120]	; (801ac2c <xPortStartScheduler+0x12c>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	021b      	lsls	r3, r3, #8
 801abb8:	4a1c      	ldr	r2, [pc, #112]	; (801ac2c <xPortStartScheduler+0x12c>)
 801abba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801abbc:	4b1b      	ldr	r3, [pc, #108]	; (801ac2c <xPortStartScheduler+0x12c>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801abc4:	4a19      	ldr	r2, [pc, #100]	; (801ac2c <xPortStartScheduler+0x12c>)
 801abc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	b2da      	uxtb	r2, r3
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801abd0:	4b17      	ldr	r3, [pc, #92]	; (801ac30 <xPortStartScheduler+0x130>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	4a16      	ldr	r2, [pc, #88]	; (801ac30 <xPortStartScheduler+0x130>)
 801abd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801abda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801abdc:	4b14      	ldr	r3, [pc, #80]	; (801ac30 <xPortStartScheduler+0x130>)
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	4a13      	ldr	r2, [pc, #76]	; (801ac30 <xPortStartScheduler+0x130>)
 801abe2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801abe6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801abe8:	f000 f8d6 	bl	801ad98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801abec:	4b11      	ldr	r3, [pc, #68]	; (801ac34 <xPortStartScheduler+0x134>)
 801abee:	2200      	movs	r2, #0
 801abf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801abf2:	f000 f8f5 	bl	801ade0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801abf6:	4b10      	ldr	r3, [pc, #64]	; (801ac38 <xPortStartScheduler+0x138>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	4a0f      	ldr	r2, [pc, #60]	; (801ac38 <xPortStartScheduler+0x138>)
 801abfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801ac00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801ac02:	f7ff ff69 	bl	801aad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801ac06:	f7ff f8a3 	bl	8019d50 <vTaskSwitchContext>
	prvTaskExitError();
 801ac0a:	f7ff ff21 	bl	801aa50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801ac0e:	2300      	movs	r3, #0
}
 801ac10:	4618      	mov	r0, r3
 801ac12:	3718      	adds	r7, #24
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	e000ed00 	.word	0xe000ed00
 801ac1c:	410fc271 	.word	0x410fc271
 801ac20:	410fc270 	.word	0x410fc270
 801ac24:	e000e400 	.word	0xe000e400
 801ac28:	200007c0 	.word	0x200007c0
 801ac2c:	200007c4 	.word	0x200007c4
 801ac30:	e000ed20 	.word	0xe000ed20
 801ac34:	200001ac 	.word	0x200001ac
 801ac38:	e000ef34 	.word	0xe000ef34

0801ac3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801ac3c:	b480      	push	{r7}
 801ac3e:	b083      	sub	sp, #12
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac46:	f383 8811 	msr	BASEPRI, r3
 801ac4a:	f3bf 8f6f 	isb	sy
 801ac4e:	f3bf 8f4f 	dsb	sy
 801ac52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801ac54:	4b0e      	ldr	r3, [pc, #56]	; (801ac90 <vPortEnterCritical+0x54>)
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	3301      	adds	r3, #1
 801ac5a:	4a0d      	ldr	r2, [pc, #52]	; (801ac90 <vPortEnterCritical+0x54>)
 801ac5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801ac5e:	4b0c      	ldr	r3, [pc, #48]	; (801ac90 <vPortEnterCritical+0x54>)
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	2b01      	cmp	r3, #1
 801ac64:	d10e      	bne.n	801ac84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801ac66:	4b0b      	ldr	r3, [pc, #44]	; (801ac94 <vPortEnterCritical+0x58>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	b2db      	uxtb	r3, r3
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d009      	beq.n	801ac84 <vPortEnterCritical+0x48>
 801ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac74:	f383 8811 	msr	BASEPRI, r3
 801ac78:	f3bf 8f6f 	isb	sy
 801ac7c:	f3bf 8f4f 	dsb	sy
 801ac80:	603b      	str	r3, [r7, #0]
 801ac82:	e7fe      	b.n	801ac82 <vPortEnterCritical+0x46>
	}
}
 801ac84:	bf00      	nop
 801ac86:	370c      	adds	r7, #12
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac8e:	4770      	bx	lr
 801ac90:	200001ac 	.word	0x200001ac
 801ac94:	e000ed04 	.word	0xe000ed04

0801ac98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801ac98:	b480      	push	{r7}
 801ac9a:	b083      	sub	sp, #12
 801ac9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801ac9e:	4b11      	ldr	r3, [pc, #68]	; (801ace4 <vPortExitCritical+0x4c>)
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d109      	bne.n	801acba <vPortExitCritical+0x22>
 801aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acaa:	f383 8811 	msr	BASEPRI, r3
 801acae:	f3bf 8f6f 	isb	sy
 801acb2:	f3bf 8f4f 	dsb	sy
 801acb6:	607b      	str	r3, [r7, #4]
 801acb8:	e7fe      	b.n	801acb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801acba:	4b0a      	ldr	r3, [pc, #40]	; (801ace4 <vPortExitCritical+0x4c>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	3b01      	subs	r3, #1
 801acc0:	4a08      	ldr	r2, [pc, #32]	; (801ace4 <vPortExitCritical+0x4c>)
 801acc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801acc4:	4b07      	ldr	r3, [pc, #28]	; (801ace4 <vPortExitCritical+0x4c>)
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d104      	bne.n	801acd6 <vPortExitCritical+0x3e>
 801accc:	2300      	movs	r3, #0
 801acce:	603b      	str	r3, [r7, #0]
	__asm volatile
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801acd6:	bf00      	nop
 801acd8:	370c      	adds	r7, #12
 801acda:	46bd      	mov	sp, r7
 801acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace0:	4770      	bx	lr
 801ace2:	bf00      	nop
 801ace4:	200001ac 	.word	0x200001ac
	...

0801acf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801acf0:	f3ef 8009 	mrs	r0, PSP
 801acf4:	f3bf 8f6f 	isb	sy
 801acf8:	4b15      	ldr	r3, [pc, #84]	; (801ad50 <pxCurrentTCBConst>)
 801acfa:	681a      	ldr	r2, [r3, #0]
 801acfc:	f01e 0f10 	tst.w	lr, #16
 801ad00:	bf08      	it	eq
 801ad02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ad06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad0a:	6010      	str	r0, [r2, #0]
 801ad0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ad10:	f04f 0050 	mov.w	r0, #80	; 0x50
 801ad14:	f380 8811 	msr	BASEPRI, r0
 801ad18:	f3bf 8f4f 	dsb	sy
 801ad1c:	f3bf 8f6f 	isb	sy
 801ad20:	f7ff f816 	bl	8019d50 <vTaskSwitchContext>
 801ad24:	f04f 0000 	mov.w	r0, #0
 801ad28:	f380 8811 	msr	BASEPRI, r0
 801ad2c:	bc09      	pop	{r0, r3}
 801ad2e:	6819      	ldr	r1, [r3, #0]
 801ad30:	6808      	ldr	r0, [r1, #0]
 801ad32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad36:	f01e 0f10 	tst.w	lr, #16
 801ad3a:	bf08      	it	eq
 801ad3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801ad40:	f380 8809 	msr	PSP, r0
 801ad44:	f3bf 8f6f 	isb	sy
 801ad48:	4770      	bx	lr
 801ad4a:	bf00      	nop
 801ad4c:	f3af 8000 	nop.w

0801ad50 <pxCurrentTCBConst>:
 801ad50:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801ad54:	bf00      	nop
 801ad56:	bf00      	nop

0801ad58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
	__asm volatile
 801ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad62:	f383 8811 	msr	BASEPRI, r3
 801ad66:	f3bf 8f6f 	isb	sy
 801ad6a:	f3bf 8f4f 	dsb	sy
 801ad6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801ad70:	f7fe ff36 	bl	8019be0 <xTaskIncrementTick>
 801ad74:	4603      	mov	r3, r0
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d003      	beq.n	801ad82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801ad7a:	4b06      	ldr	r3, [pc, #24]	; (801ad94 <SysTick_Handler+0x3c>)
 801ad7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ad80:	601a      	str	r2, [r3, #0]
 801ad82:	2300      	movs	r3, #0
 801ad84:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801ad8c:	bf00      	nop
 801ad8e:	3708      	adds	r7, #8
 801ad90:	46bd      	mov	sp, r7
 801ad92:	bd80      	pop	{r7, pc}
 801ad94:	e000ed04 	.word	0xe000ed04

0801ad98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801ad98:	b480      	push	{r7}
 801ad9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ad9c:	4b0b      	ldr	r3, [pc, #44]	; (801adcc <vPortSetupTimerInterrupt+0x34>)
 801ad9e:	2200      	movs	r2, #0
 801ada0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ada2:	4b0b      	ldr	r3, [pc, #44]	; (801add0 <vPortSetupTimerInterrupt+0x38>)
 801ada4:	2200      	movs	r2, #0
 801ada6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ada8:	4b0a      	ldr	r3, [pc, #40]	; (801add4 <vPortSetupTimerInterrupt+0x3c>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	4a0a      	ldr	r2, [pc, #40]	; (801add8 <vPortSetupTimerInterrupt+0x40>)
 801adae:	fba2 2303 	umull	r2, r3, r2, r3
 801adb2:	099b      	lsrs	r3, r3, #6
 801adb4:	4a09      	ldr	r2, [pc, #36]	; (801addc <vPortSetupTimerInterrupt+0x44>)
 801adb6:	3b01      	subs	r3, #1
 801adb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801adba:	4b04      	ldr	r3, [pc, #16]	; (801adcc <vPortSetupTimerInterrupt+0x34>)
 801adbc:	2207      	movs	r2, #7
 801adbe:	601a      	str	r2, [r3, #0]
}
 801adc0:	bf00      	nop
 801adc2:	46bd      	mov	sp, r7
 801adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc8:	4770      	bx	lr
 801adca:	bf00      	nop
 801adcc:	e000e010 	.word	0xe000e010
 801add0:	e000e018 	.word	0xe000e018
 801add4:	2000018c 	.word	0x2000018c
 801add8:	10624dd3 	.word	0x10624dd3
 801addc:	e000e014 	.word	0xe000e014

0801ade0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ade0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801adf0 <vPortEnableVFP+0x10>
 801ade4:	6801      	ldr	r1, [r0, #0]
 801ade6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801adea:	6001      	str	r1, [r0, #0]
 801adec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801adee:	bf00      	nop
 801adf0:	e000ed88 	.word	0xe000ed88

0801adf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801adf4:	b480      	push	{r7}
 801adf6:	b085      	sub	sp, #20
 801adf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801adfa:	f3ef 8305 	mrs	r3, IPSR
 801adfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	2b0f      	cmp	r3, #15
 801ae04:	d913      	bls.n	801ae2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ae06:	4a16      	ldr	r2, [pc, #88]	; (801ae60 <vPortValidateInterruptPriority+0x6c>)
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	4413      	add	r3, r2
 801ae0c:	781b      	ldrb	r3, [r3, #0]
 801ae0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ae10:	4b14      	ldr	r3, [pc, #80]	; (801ae64 <vPortValidateInterruptPriority+0x70>)
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	7afa      	ldrb	r2, [r7, #11]
 801ae16:	429a      	cmp	r2, r3
 801ae18:	d209      	bcs.n	801ae2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae1e:	f383 8811 	msr	BASEPRI, r3
 801ae22:	f3bf 8f6f 	isb	sy
 801ae26:	f3bf 8f4f 	dsb	sy
 801ae2a:	607b      	str	r3, [r7, #4]
 801ae2c:	e7fe      	b.n	801ae2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ae2e:	4b0e      	ldr	r3, [pc, #56]	; (801ae68 <vPortValidateInterruptPriority+0x74>)
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ae36:	4b0d      	ldr	r3, [pc, #52]	; (801ae6c <vPortValidateInterruptPriority+0x78>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	429a      	cmp	r2, r3
 801ae3c:	d909      	bls.n	801ae52 <vPortValidateInterruptPriority+0x5e>
 801ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae42:	f383 8811 	msr	BASEPRI, r3
 801ae46:	f3bf 8f6f 	isb	sy
 801ae4a:	f3bf 8f4f 	dsb	sy
 801ae4e:	603b      	str	r3, [r7, #0]
 801ae50:	e7fe      	b.n	801ae50 <vPortValidateInterruptPriority+0x5c>
	}
 801ae52:	bf00      	nop
 801ae54:	3714      	adds	r7, #20
 801ae56:	46bd      	mov	sp, r7
 801ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5c:	4770      	bx	lr
 801ae5e:	bf00      	nop
 801ae60:	e000e3f0 	.word	0xe000e3f0
 801ae64:	200007c0 	.word	0x200007c0
 801ae68:	e000ed0c 	.word	0xe000ed0c
 801ae6c:	200007c4 	.word	0x200007c4

0801ae70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b08a      	sub	sp, #40	; 0x28
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801ae7c:	f7fe fe06 	bl	8019a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801ae80:	4b57      	ldr	r3, [pc, #348]	; (801afe0 <pvPortMalloc+0x170>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d101      	bne.n	801ae8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801ae88:	f000 f90c 	bl	801b0a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801ae8c:	4b55      	ldr	r3, [pc, #340]	; (801afe4 <pvPortMalloc+0x174>)
 801ae8e:	681a      	ldr	r2, [r3, #0]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	4013      	ands	r3, r2
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	f040 808c 	bne.w	801afb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d01c      	beq.n	801aeda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801aea0:	2208      	movs	r2, #8
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	4413      	add	r3, r2
 801aea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	f003 0307 	and.w	r3, r3, #7
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d013      	beq.n	801aeda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	f023 0307 	bic.w	r3, r3, #7
 801aeb8:	3308      	adds	r3, #8
 801aeba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	f003 0307 	and.w	r3, r3, #7
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d009      	beq.n	801aeda <pvPortMalloc+0x6a>
 801aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aeca:	f383 8811 	msr	BASEPRI, r3
 801aece:	f3bf 8f6f 	isb	sy
 801aed2:	f3bf 8f4f 	dsb	sy
 801aed6:	617b      	str	r3, [r7, #20]
 801aed8:	e7fe      	b.n	801aed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d068      	beq.n	801afb2 <pvPortMalloc+0x142>
 801aee0:	4b41      	ldr	r3, [pc, #260]	; (801afe8 <pvPortMalloc+0x178>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	687a      	ldr	r2, [r7, #4]
 801aee6:	429a      	cmp	r2, r3
 801aee8:	d863      	bhi.n	801afb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801aeea:	4b40      	ldr	r3, [pc, #256]	; (801afec <pvPortMalloc+0x17c>)
 801aeec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801aeee:	4b3f      	ldr	r3, [pc, #252]	; (801afec <pvPortMalloc+0x17c>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801aef4:	e004      	b.n	801af00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 801aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	429a      	cmp	r2, r3
 801af08:	d903      	bls.n	801af12 <pvPortMalloc+0xa2>
 801af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d1f1      	bne.n	801aef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801af12:	4b33      	ldr	r3, [pc, #204]	; (801afe0 <pvPortMalloc+0x170>)
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af18:	429a      	cmp	r2, r3
 801af1a:	d04a      	beq.n	801afb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801af1c:	6a3b      	ldr	r3, [r7, #32]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	2208      	movs	r2, #8
 801af22:	4413      	add	r3, r2
 801af24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af28:	681a      	ldr	r2, [r3, #0]
 801af2a:	6a3b      	ldr	r3, [r7, #32]
 801af2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af30:	685a      	ldr	r2, [r3, #4]
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	1ad2      	subs	r2, r2, r3
 801af36:	2308      	movs	r3, #8
 801af38:	005b      	lsls	r3, r3, #1
 801af3a:	429a      	cmp	r2, r3
 801af3c:	d91e      	bls.n	801af7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801af3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	4413      	add	r3, r2
 801af44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801af46:	69bb      	ldr	r3, [r7, #24]
 801af48:	f003 0307 	and.w	r3, r3, #7
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d009      	beq.n	801af64 <pvPortMalloc+0xf4>
 801af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af54:	f383 8811 	msr	BASEPRI, r3
 801af58:	f3bf 8f6f 	isb	sy
 801af5c:	f3bf 8f4f 	dsb	sy
 801af60:	613b      	str	r3, [r7, #16]
 801af62:	e7fe      	b.n	801af62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af66:	685a      	ldr	r2, [r3, #4]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	1ad2      	subs	r2, r2, r3
 801af6c:	69bb      	ldr	r3, [r7, #24]
 801af6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af72:	687a      	ldr	r2, [r7, #4]
 801af74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801af76:	69b8      	ldr	r0, [r7, #24]
 801af78:	f000 f8f6 	bl	801b168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801af7c:	4b1a      	ldr	r3, [pc, #104]	; (801afe8 <pvPortMalloc+0x178>)
 801af7e:	681a      	ldr	r2, [r3, #0]
 801af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af82:	685b      	ldr	r3, [r3, #4]
 801af84:	1ad3      	subs	r3, r2, r3
 801af86:	4a18      	ldr	r2, [pc, #96]	; (801afe8 <pvPortMalloc+0x178>)
 801af88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801af8a:	4b17      	ldr	r3, [pc, #92]	; (801afe8 <pvPortMalloc+0x178>)
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	4b18      	ldr	r3, [pc, #96]	; (801aff0 <pvPortMalloc+0x180>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	429a      	cmp	r2, r3
 801af94:	d203      	bcs.n	801af9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801af96:	4b14      	ldr	r3, [pc, #80]	; (801afe8 <pvPortMalloc+0x178>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	4a15      	ldr	r2, [pc, #84]	; (801aff0 <pvPortMalloc+0x180>)
 801af9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa0:	685a      	ldr	r2, [r3, #4]
 801afa2:	4b10      	ldr	r3, [pc, #64]	; (801afe4 <pvPortMalloc+0x174>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	431a      	orrs	r2, r3
 801afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afae:	2200      	movs	r2, #0
 801afb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801afb2:	f7fe fd79 	bl	8019aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801afb6:	69fb      	ldr	r3, [r7, #28]
 801afb8:	f003 0307 	and.w	r3, r3, #7
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d009      	beq.n	801afd4 <pvPortMalloc+0x164>
 801afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afc4:	f383 8811 	msr	BASEPRI, r3
 801afc8:	f3bf 8f6f 	isb	sy
 801afcc:	f3bf 8f4f 	dsb	sy
 801afd0:	60fb      	str	r3, [r7, #12]
 801afd2:	e7fe      	b.n	801afd2 <pvPortMalloc+0x162>
	return pvReturn;
 801afd4:	69fb      	ldr	r3, [r7, #28]
}
 801afd6:	4618      	mov	r0, r3
 801afd8:	3728      	adds	r7, #40	; 0x28
 801afda:	46bd      	mov	sp, r7
 801afdc:	bd80      	pop	{r7, pc}
 801afde:	bf00      	nop
 801afe0:	20001fd0 	.word	0x20001fd0
 801afe4:	20001fdc 	.word	0x20001fdc
 801afe8:	20001fd4 	.word	0x20001fd4
 801afec:	20001fc8 	.word	0x20001fc8
 801aff0:	20001fd8 	.word	0x20001fd8

0801aff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b086      	sub	sp, #24
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d046      	beq.n	801b094 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b006:	2308      	movs	r3, #8
 801b008:	425b      	negs	r3, r3
 801b00a:	697a      	ldr	r2, [r7, #20]
 801b00c:	4413      	add	r3, r2
 801b00e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b014:	693b      	ldr	r3, [r7, #16]
 801b016:	685a      	ldr	r2, [r3, #4]
 801b018:	4b20      	ldr	r3, [pc, #128]	; (801b09c <vPortFree+0xa8>)
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	4013      	ands	r3, r2
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d109      	bne.n	801b036 <vPortFree+0x42>
 801b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b026:	f383 8811 	msr	BASEPRI, r3
 801b02a:	f3bf 8f6f 	isb	sy
 801b02e:	f3bf 8f4f 	dsb	sy
 801b032:	60fb      	str	r3, [r7, #12]
 801b034:	e7fe      	b.n	801b034 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b036:	693b      	ldr	r3, [r7, #16]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d009      	beq.n	801b052 <vPortFree+0x5e>
 801b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b042:	f383 8811 	msr	BASEPRI, r3
 801b046:	f3bf 8f6f 	isb	sy
 801b04a:	f3bf 8f4f 	dsb	sy
 801b04e:	60bb      	str	r3, [r7, #8]
 801b050:	e7fe      	b.n	801b050 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b052:	693b      	ldr	r3, [r7, #16]
 801b054:	685a      	ldr	r2, [r3, #4]
 801b056:	4b11      	ldr	r3, [pc, #68]	; (801b09c <vPortFree+0xa8>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	4013      	ands	r3, r2
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d019      	beq.n	801b094 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b060:	693b      	ldr	r3, [r7, #16]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d115      	bne.n	801b094 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	685a      	ldr	r2, [r3, #4]
 801b06c:	4b0b      	ldr	r3, [pc, #44]	; (801b09c <vPortFree+0xa8>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	43db      	mvns	r3, r3
 801b072:	401a      	ands	r2, r3
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b078:	f7fe fd08 	bl	8019a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b07c:	693b      	ldr	r3, [r7, #16]
 801b07e:	685a      	ldr	r2, [r3, #4]
 801b080:	4b07      	ldr	r3, [pc, #28]	; (801b0a0 <vPortFree+0xac>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4413      	add	r3, r2
 801b086:	4a06      	ldr	r2, [pc, #24]	; (801b0a0 <vPortFree+0xac>)
 801b088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b08a:	6938      	ldr	r0, [r7, #16]
 801b08c:	f000 f86c 	bl	801b168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801b090:	f7fe fd0a 	bl	8019aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b094:	bf00      	nop
 801b096:	3718      	adds	r7, #24
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}
 801b09c:	20001fdc 	.word	0x20001fdc
 801b0a0:	20001fd4 	.word	0x20001fd4

0801b0a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b0a4:	b480      	push	{r7}
 801b0a6:	b085      	sub	sp, #20
 801b0a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b0aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801b0ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b0b0:	4b27      	ldr	r3, [pc, #156]	; (801b150 <prvHeapInit+0xac>)
 801b0b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	f003 0307 	and.w	r3, r3, #7
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d00c      	beq.n	801b0d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	3307      	adds	r3, #7
 801b0c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	f023 0307 	bic.w	r3, r3, #7
 801b0ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b0cc:	68ba      	ldr	r2, [r7, #8]
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	1ad3      	subs	r3, r2, r3
 801b0d2:	4a1f      	ldr	r2, [pc, #124]	; (801b150 <prvHeapInit+0xac>)
 801b0d4:	4413      	add	r3, r2
 801b0d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b0dc:	4a1d      	ldr	r2, [pc, #116]	; (801b154 <prvHeapInit+0xb0>)
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b0e2:	4b1c      	ldr	r3, [pc, #112]	; (801b154 <prvHeapInit+0xb0>)
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	68ba      	ldr	r2, [r7, #8]
 801b0ec:	4413      	add	r3, r2
 801b0ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b0f0:	2208      	movs	r2, #8
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	1a9b      	subs	r3, r3, r2
 801b0f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	f023 0307 	bic.w	r3, r3, #7
 801b0fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	4a15      	ldr	r2, [pc, #84]	; (801b158 <prvHeapInit+0xb4>)
 801b104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b106:	4b14      	ldr	r3, [pc, #80]	; (801b158 <prvHeapInit+0xb4>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	2200      	movs	r2, #0
 801b10c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b10e:	4b12      	ldr	r3, [pc, #72]	; (801b158 <prvHeapInit+0xb4>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	2200      	movs	r2, #0
 801b114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	68fa      	ldr	r2, [r7, #12]
 801b11e:	1ad2      	subs	r2, r2, r3
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b124:	4b0c      	ldr	r3, [pc, #48]	; (801b158 <prvHeapInit+0xb4>)
 801b126:	681a      	ldr	r2, [r3, #0]
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	685b      	ldr	r3, [r3, #4]
 801b130:	4a0a      	ldr	r2, [pc, #40]	; (801b15c <prvHeapInit+0xb8>)
 801b132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	685b      	ldr	r3, [r3, #4]
 801b138:	4a09      	ldr	r2, [pc, #36]	; (801b160 <prvHeapInit+0xbc>)
 801b13a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b13c:	4b09      	ldr	r3, [pc, #36]	; (801b164 <prvHeapInit+0xc0>)
 801b13e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b142:	601a      	str	r2, [r3, #0]
}
 801b144:	bf00      	nop
 801b146:	3714      	adds	r7, #20
 801b148:	46bd      	mov	sp, r7
 801b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14e:	4770      	bx	lr
 801b150:	200007c8 	.word	0x200007c8
 801b154:	20001fc8 	.word	0x20001fc8
 801b158:	20001fd0 	.word	0x20001fd0
 801b15c:	20001fd8 	.word	0x20001fd8
 801b160:	20001fd4 	.word	0x20001fd4
 801b164:	20001fdc 	.word	0x20001fdc

0801b168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b168:	b480      	push	{r7}
 801b16a:	b085      	sub	sp, #20
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b170:	4b28      	ldr	r3, [pc, #160]	; (801b214 <prvInsertBlockIntoFreeList+0xac>)
 801b172:	60fb      	str	r3, [r7, #12]
 801b174:	e002      	b.n	801b17c <prvInsertBlockIntoFreeList+0x14>
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	60fb      	str	r3, [r7, #12]
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	687a      	ldr	r2, [r7, #4]
 801b182:	429a      	cmp	r2, r3
 801b184:	d8f7      	bhi.n	801b176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	68ba      	ldr	r2, [r7, #8]
 801b190:	4413      	add	r3, r2
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	429a      	cmp	r2, r3
 801b196:	d108      	bne.n	801b1aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	685a      	ldr	r2, [r3, #4]
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	685b      	ldr	r3, [r3, #4]
 801b1a0:	441a      	add	r2, r3
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	685b      	ldr	r3, [r3, #4]
 801b1b2:	68ba      	ldr	r2, [r7, #8]
 801b1b4:	441a      	add	r2, r3
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	429a      	cmp	r2, r3
 801b1bc:	d118      	bne.n	801b1f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	681a      	ldr	r2, [r3, #0]
 801b1c2:	4b15      	ldr	r3, [pc, #84]	; (801b218 <prvInsertBlockIntoFreeList+0xb0>)
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d00d      	beq.n	801b1e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	685a      	ldr	r2, [r3, #4]
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	441a      	add	r2, r3
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	681a      	ldr	r2, [r3, #0]
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	601a      	str	r2, [r3, #0]
 801b1e4:	e008      	b.n	801b1f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b1e6:	4b0c      	ldr	r3, [pc, #48]	; (801b218 <prvInsertBlockIntoFreeList+0xb0>)
 801b1e8:	681a      	ldr	r2, [r3, #0]
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	601a      	str	r2, [r3, #0]
 801b1ee:	e003      	b.n	801b1f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	681a      	ldr	r2, [r3, #0]
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b1f8:	68fa      	ldr	r2, [r7, #12]
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d002      	beq.n	801b206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	687a      	ldr	r2, [r7, #4]
 801b204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b206:	bf00      	nop
 801b208:	3714      	adds	r7, #20
 801b20a:	46bd      	mov	sp, r7
 801b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b210:	4770      	bx	lr
 801b212:	bf00      	nop
 801b214:	20001fc8 	.word	0x20001fc8
 801b218:	20001fd0 	.word	0x20001fd0

0801b21c <atoi>:
 801b21c:	220a      	movs	r2, #10
 801b21e:	2100      	movs	r1, #0
 801b220:	f000 befc 	b.w	801c01c <strtol>

0801b224 <atol>:
 801b224:	220a      	movs	r2, #10
 801b226:	2100      	movs	r1, #0
 801b228:	f000 bef8 	b.w	801c01c <strtol>

0801b22c <__errno>:
 801b22c:	4b01      	ldr	r3, [pc, #4]	; (801b234 <__errno+0x8>)
 801b22e:	6818      	ldr	r0, [r3, #0]
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	200001b0 	.word	0x200001b0

0801b238 <__libc_init_array>:
 801b238:	b570      	push	{r4, r5, r6, lr}
 801b23a:	4e0d      	ldr	r6, [pc, #52]	; (801b270 <__libc_init_array+0x38>)
 801b23c:	4c0d      	ldr	r4, [pc, #52]	; (801b274 <__libc_init_array+0x3c>)
 801b23e:	1ba4      	subs	r4, r4, r6
 801b240:	10a4      	asrs	r4, r4, #2
 801b242:	2500      	movs	r5, #0
 801b244:	42a5      	cmp	r5, r4
 801b246:	d109      	bne.n	801b25c <__libc_init_array+0x24>
 801b248:	4e0b      	ldr	r6, [pc, #44]	; (801b278 <__libc_init_array+0x40>)
 801b24a:	4c0c      	ldr	r4, [pc, #48]	; (801b27c <__libc_init_array+0x44>)
 801b24c:	f002 fe80 	bl	801df50 <_init>
 801b250:	1ba4      	subs	r4, r4, r6
 801b252:	10a4      	asrs	r4, r4, #2
 801b254:	2500      	movs	r5, #0
 801b256:	42a5      	cmp	r5, r4
 801b258:	d105      	bne.n	801b266 <__libc_init_array+0x2e>
 801b25a:	bd70      	pop	{r4, r5, r6, pc}
 801b25c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b260:	4798      	blx	r3
 801b262:	3501      	adds	r5, #1
 801b264:	e7ee      	b.n	801b244 <__libc_init_array+0xc>
 801b266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b26a:	4798      	blx	r3
 801b26c:	3501      	adds	r5, #1
 801b26e:	e7f2      	b.n	801b256 <__libc_init_array+0x1e>
 801b270:	0801fc58 	.word	0x0801fc58
 801b274:	0801fc58 	.word	0x0801fc58
 801b278:	0801fc58 	.word	0x0801fc58
 801b27c:	0801fc5c 	.word	0x0801fc5c

0801b280 <malloc>:
 801b280:	4b02      	ldr	r3, [pc, #8]	; (801b28c <malloc+0xc>)
 801b282:	4601      	mov	r1, r0
 801b284:	6818      	ldr	r0, [r3, #0]
 801b286:	f000 b865 	b.w	801b354 <_malloc_r>
 801b28a:	bf00      	nop
 801b28c:	200001b0 	.word	0x200001b0

0801b290 <memcpy>:
 801b290:	b510      	push	{r4, lr}
 801b292:	1e43      	subs	r3, r0, #1
 801b294:	440a      	add	r2, r1
 801b296:	4291      	cmp	r1, r2
 801b298:	d100      	bne.n	801b29c <memcpy+0xc>
 801b29a:	bd10      	pop	{r4, pc}
 801b29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b2a4:	e7f7      	b.n	801b296 <memcpy+0x6>

0801b2a6 <memset>:
 801b2a6:	4402      	add	r2, r0
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	d100      	bne.n	801b2b0 <memset+0xa>
 801b2ae:	4770      	bx	lr
 801b2b0:	f803 1b01 	strb.w	r1, [r3], #1
 801b2b4:	e7f9      	b.n	801b2aa <memset+0x4>
	...

0801b2b8 <_free_r>:
 801b2b8:	b538      	push	{r3, r4, r5, lr}
 801b2ba:	4605      	mov	r5, r0
 801b2bc:	2900      	cmp	r1, #0
 801b2be:	d045      	beq.n	801b34c <_free_r+0x94>
 801b2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b2c4:	1f0c      	subs	r4, r1, #4
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	bfb8      	it	lt
 801b2ca:	18e4      	addlt	r4, r4, r3
 801b2cc:	f001 ffc2 	bl	801d254 <__malloc_lock>
 801b2d0:	4a1f      	ldr	r2, [pc, #124]	; (801b350 <_free_r+0x98>)
 801b2d2:	6813      	ldr	r3, [r2, #0]
 801b2d4:	4610      	mov	r0, r2
 801b2d6:	b933      	cbnz	r3, 801b2e6 <_free_r+0x2e>
 801b2d8:	6063      	str	r3, [r4, #4]
 801b2da:	6014      	str	r4, [r2, #0]
 801b2dc:	4628      	mov	r0, r5
 801b2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2e2:	f001 bfb8 	b.w	801d256 <__malloc_unlock>
 801b2e6:	42a3      	cmp	r3, r4
 801b2e8:	d90c      	bls.n	801b304 <_free_r+0x4c>
 801b2ea:	6821      	ldr	r1, [r4, #0]
 801b2ec:	1862      	adds	r2, r4, r1
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	bf04      	itt	eq
 801b2f2:	681a      	ldreq	r2, [r3, #0]
 801b2f4:	685b      	ldreq	r3, [r3, #4]
 801b2f6:	6063      	str	r3, [r4, #4]
 801b2f8:	bf04      	itt	eq
 801b2fa:	1852      	addeq	r2, r2, r1
 801b2fc:	6022      	streq	r2, [r4, #0]
 801b2fe:	6004      	str	r4, [r0, #0]
 801b300:	e7ec      	b.n	801b2dc <_free_r+0x24>
 801b302:	4613      	mov	r3, r2
 801b304:	685a      	ldr	r2, [r3, #4]
 801b306:	b10a      	cbz	r2, 801b30c <_free_r+0x54>
 801b308:	42a2      	cmp	r2, r4
 801b30a:	d9fa      	bls.n	801b302 <_free_r+0x4a>
 801b30c:	6819      	ldr	r1, [r3, #0]
 801b30e:	1858      	adds	r0, r3, r1
 801b310:	42a0      	cmp	r0, r4
 801b312:	d10b      	bne.n	801b32c <_free_r+0x74>
 801b314:	6820      	ldr	r0, [r4, #0]
 801b316:	4401      	add	r1, r0
 801b318:	1858      	adds	r0, r3, r1
 801b31a:	4282      	cmp	r2, r0
 801b31c:	6019      	str	r1, [r3, #0]
 801b31e:	d1dd      	bne.n	801b2dc <_free_r+0x24>
 801b320:	6810      	ldr	r0, [r2, #0]
 801b322:	6852      	ldr	r2, [r2, #4]
 801b324:	605a      	str	r2, [r3, #4]
 801b326:	4401      	add	r1, r0
 801b328:	6019      	str	r1, [r3, #0]
 801b32a:	e7d7      	b.n	801b2dc <_free_r+0x24>
 801b32c:	d902      	bls.n	801b334 <_free_r+0x7c>
 801b32e:	230c      	movs	r3, #12
 801b330:	602b      	str	r3, [r5, #0]
 801b332:	e7d3      	b.n	801b2dc <_free_r+0x24>
 801b334:	6820      	ldr	r0, [r4, #0]
 801b336:	1821      	adds	r1, r4, r0
 801b338:	428a      	cmp	r2, r1
 801b33a:	bf04      	itt	eq
 801b33c:	6811      	ldreq	r1, [r2, #0]
 801b33e:	6852      	ldreq	r2, [r2, #4]
 801b340:	6062      	str	r2, [r4, #4]
 801b342:	bf04      	itt	eq
 801b344:	1809      	addeq	r1, r1, r0
 801b346:	6021      	streq	r1, [r4, #0]
 801b348:	605c      	str	r4, [r3, #4]
 801b34a:	e7c7      	b.n	801b2dc <_free_r+0x24>
 801b34c:	bd38      	pop	{r3, r4, r5, pc}
 801b34e:	bf00      	nop
 801b350:	20001fe0 	.word	0x20001fe0

0801b354 <_malloc_r>:
 801b354:	b570      	push	{r4, r5, r6, lr}
 801b356:	1ccd      	adds	r5, r1, #3
 801b358:	f025 0503 	bic.w	r5, r5, #3
 801b35c:	3508      	adds	r5, #8
 801b35e:	2d0c      	cmp	r5, #12
 801b360:	bf38      	it	cc
 801b362:	250c      	movcc	r5, #12
 801b364:	2d00      	cmp	r5, #0
 801b366:	4606      	mov	r6, r0
 801b368:	db01      	blt.n	801b36e <_malloc_r+0x1a>
 801b36a:	42a9      	cmp	r1, r5
 801b36c:	d903      	bls.n	801b376 <_malloc_r+0x22>
 801b36e:	230c      	movs	r3, #12
 801b370:	6033      	str	r3, [r6, #0]
 801b372:	2000      	movs	r0, #0
 801b374:	bd70      	pop	{r4, r5, r6, pc}
 801b376:	f001 ff6d 	bl	801d254 <__malloc_lock>
 801b37a:	4a21      	ldr	r2, [pc, #132]	; (801b400 <_malloc_r+0xac>)
 801b37c:	6814      	ldr	r4, [r2, #0]
 801b37e:	4621      	mov	r1, r4
 801b380:	b991      	cbnz	r1, 801b3a8 <_malloc_r+0x54>
 801b382:	4c20      	ldr	r4, [pc, #128]	; (801b404 <_malloc_r+0xb0>)
 801b384:	6823      	ldr	r3, [r4, #0]
 801b386:	b91b      	cbnz	r3, 801b390 <_malloc_r+0x3c>
 801b388:	4630      	mov	r0, r6
 801b38a:	f000 fd15 	bl	801bdb8 <_sbrk_r>
 801b38e:	6020      	str	r0, [r4, #0]
 801b390:	4629      	mov	r1, r5
 801b392:	4630      	mov	r0, r6
 801b394:	f000 fd10 	bl	801bdb8 <_sbrk_r>
 801b398:	1c43      	adds	r3, r0, #1
 801b39a:	d124      	bne.n	801b3e6 <_malloc_r+0x92>
 801b39c:	230c      	movs	r3, #12
 801b39e:	6033      	str	r3, [r6, #0]
 801b3a0:	4630      	mov	r0, r6
 801b3a2:	f001 ff58 	bl	801d256 <__malloc_unlock>
 801b3a6:	e7e4      	b.n	801b372 <_malloc_r+0x1e>
 801b3a8:	680b      	ldr	r3, [r1, #0]
 801b3aa:	1b5b      	subs	r3, r3, r5
 801b3ac:	d418      	bmi.n	801b3e0 <_malloc_r+0x8c>
 801b3ae:	2b0b      	cmp	r3, #11
 801b3b0:	d90f      	bls.n	801b3d2 <_malloc_r+0x7e>
 801b3b2:	600b      	str	r3, [r1, #0]
 801b3b4:	50cd      	str	r5, [r1, r3]
 801b3b6:	18cc      	adds	r4, r1, r3
 801b3b8:	4630      	mov	r0, r6
 801b3ba:	f001 ff4c 	bl	801d256 <__malloc_unlock>
 801b3be:	f104 000b 	add.w	r0, r4, #11
 801b3c2:	1d23      	adds	r3, r4, #4
 801b3c4:	f020 0007 	bic.w	r0, r0, #7
 801b3c8:	1ac3      	subs	r3, r0, r3
 801b3ca:	d0d3      	beq.n	801b374 <_malloc_r+0x20>
 801b3cc:	425a      	negs	r2, r3
 801b3ce:	50e2      	str	r2, [r4, r3]
 801b3d0:	e7d0      	b.n	801b374 <_malloc_r+0x20>
 801b3d2:	428c      	cmp	r4, r1
 801b3d4:	684b      	ldr	r3, [r1, #4]
 801b3d6:	bf16      	itet	ne
 801b3d8:	6063      	strne	r3, [r4, #4]
 801b3da:	6013      	streq	r3, [r2, #0]
 801b3dc:	460c      	movne	r4, r1
 801b3de:	e7eb      	b.n	801b3b8 <_malloc_r+0x64>
 801b3e0:	460c      	mov	r4, r1
 801b3e2:	6849      	ldr	r1, [r1, #4]
 801b3e4:	e7cc      	b.n	801b380 <_malloc_r+0x2c>
 801b3e6:	1cc4      	adds	r4, r0, #3
 801b3e8:	f024 0403 	bic.w	r4, r4, #3
 801b3ec:	42a0      	cmp	r0, r4
 801b3ee:	d005      	beq.n	801b3fc <_malloc_r+0xa8>
 801b3f0:	1a21      	subs	r1, r4, r0
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f000 fce0 	bl	801bdb8 <_sbrk_r>
 801b3f8:	3001      	adds	r0, #1
 801b3fa:	d0cf      	beq.n	801b39c <_malloc_r+0x48>
 801b3fc:	6025      	str	r5, [r4, #0]
 801b3fe:	e7db      	b.n	801b3b8 <_malloc_r+0x64>
 801b400:	20001fe0 	.word	0x20001fe0
 801b404:	20001fe4 	.word	0x20001fe4

0801b408 <__cvt>:
 801b408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b40c:	ec55 4b10 	vmov	r4, r5, d0
 801b410:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b412:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b416:	2d00      	cmp	r5, #0
 801b418:	460e      	mov	r6, r1
 801b41a:	4691      	mov	r9, r2
 801b41c:	4619      	mov	r1, r3
 801b41e:	bfb8      	it	lt
 801b420:	4622      	movlt	r2, r4
 801b422:	462b      	mov	r3, r5
 801b424:	f027 0720 	bic.w	r7, r7, #32
 801b428:	bfbb      	ittet	lt
 801b42a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b42e:	461d      	movlt	r5, r3
 801b430:	2300      	movge	r3, #0
 801b432:	232d      	movlt	r3, #45	; 0x2d
 801b434:	bfb8      	it	lt
 801b436:	4614      	movlt	r4, r2
 801b438:	2f46      	cmp	r7, #70	; 0x46
 801b43a:	700b      	strb	r3, [r1, #0]
 801b43c:	d004      	beq.n	801b448 <__cvt+0x40>
 801b43e:	2f45      	cmp	r7, #69	; 0x45
 801b440:	d100      	bne.n	801b444 <__cvt+0x3c>
 801b442:	3601      	adds	r6, #1
 801b444:	2102      	movs	r1, #2
 801b446:	e000      	b.n	801b44a <__cvt+0x42>
 801b448:	2103      	movs	r1, #3
 801b44a:	ab03      	add	r3, sp, #12
 801b44c:	9301      	str	r3, [sp, #4]
 801b44e:	ab02      	add	r3, sp, #8
 801b450:	9300      	str	r3, [sp, #0]
 801b452:	4632      	mov	r2, r6
 801b454:	4653      	mov	r3, sl
 801b456:	ec45 4b10 	vmov	d0, r4, r5
 801b45a:	f000 ff41 	bl	801c2e0 <_dtoa_r>
 801b45e:	2f47      	cmp	r7, #71	; 0x47
 801b460:	4680      	mov	r8, r0
 801b462:	d102      	bne.n	801b46a <__cvt+0x62>
 801b464:	f019 0f01 	tst.w	r9, #1
 801b468:	d026      	beq.n	801b4b8 <__cvt+0xb0>
 801b46a:	2f46      	cmp	r7, #70	; 0x46
 801b46c:	eb08 0906 	add.w	r9, r8, r6
 801b470:	d111      	bne.n	801b496 <__cvt+0x8e>
 801b472:	f898 3000 	ldrb.w	r3, [r8]
 801b476:	2b30      	cmp	r3, #48	; 0x30
 801b478:	d10a      	bne.n	801b490 <__cvt+0x88>
 801b47a:	2200      	movs	r2, #0
 801b47c:	2300      	movs	r3, #0
 801b47e:	4620      	mov	r0, r4
 801b480:	4629      	mov	r1, r5
 801b482:	f7e5 fb31 	bl	8000ae8 <__aeabi_dcmpeq>
 801b486:	b918      	cbnz	r0, 801b490 <__cvt+0x88>
 801b488:	f1c6 0601 	rsb	r6, r6, #1
 801b48c:	f8ca 6000 	str.w	r6, [sl]
 801b490:	f8da 3000 	ldr.w	r3, [sl]
 801b494:	4499      	add	r9, r3
 801b496:	2200      	movs	r2, #0
 801b498:	2300      	movs	r3, #0
 801b49a:	4620      	mov	r0, r4
 801b49c:	4629      	mov	r1, r5
 801b49e:	f7e5 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 801b4a2:	b938      	cbnz	r0, 801b4b4 <__cvt+0xac>
 801b4a4:	2230      	movs	r2, #48	; 0x30
 801b4a6:	9b03      	ldr	r3, [sp, #12]
 801b4a8:	454b      	cmp	r3, r9
 801b4aa:	d205      	bcs.n	801b4b8 <__cvt+0xb0>
 801b4ac:	1c59      	adds	r1, r3, #1
 801b4ae:	9103      	str	r1, [sp, #12]
 801b4b0:	701a      	strb	r2, [r3, #0]
 801b4b2:	e7f8      	b.n	801b4a6 <__cvt+0x9e>
 801b4b4:	f8cd 900c 	str.w	r9, [sp, #12]
 801b4b8:	9b03      	ldr	r3, [sp, #12]
 801b4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b4bc:	eba3 0308 	sub.w	r3, r3, r8
 801b4c0:	4640      	mov	r0, r8
 801b4c2:	6013      	str	r3, [r2, #0]
 801b4c4:	b004      	add	sp, #16
 801b4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b4ca <__exponent>:
 801b4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b4cc:	2900      	cmp	r1, #0
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	bfba      	itte	lt
 801b4d2:	4249      	neglt	r1, r1
 801b4d4:	232d      	movlt	r3, #45	; 0x2d
 801b4d6:	232b      	movge	r3, #43	; 0x2b
 801b4d8:	2909      	cmp	r1, #9
 801b4da:	f804 2b02 	strb.w	r2, [r4], #2
 801b4de:	7043      	strb	r3, [r0, #1]
 801b4e0:	dd20      	ble.n	801b524 <__exponent+0x5a>
 801b4e2:	f10d 0307 	add.w	r3, sp, #7
 801b4e6:	461f      	mov	r7, r3
 801b4e8:	260a      	movs	r6, #10
 801b4ea:	fb91 f5f6 	sdiv	r5, r1, r6
 801b4ee:	fb06 1115 	mls	r1, r6, r5, r1
 801b4f2:	3130      	adds	r1, #48	; 0x30
 801b4f4:	2d09      	cmp	r5, #9
 801b4f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b4fa:	f103 32ff 	add.w	r2, r3, #4294967295
 801b4fe:	4629      	mov	r1, r5
 801b500:	dc09      	bgt.n	801b516 <__exponent+0x4c>
 801b502:	3130      	adds	r1, #48	; 0x30
 801b504:	3b02      	subs	r3, #2
 801b506:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b50a:	42bb      	cmp	r3, r7
 801b50c:	4622      	mov	r2, r4
 801b50e:	d304      	bcc.n	801b51a <__exponent+0x50>
 801b510:	1a10      	subs	r0, r2, r0
 801b512:	b003      	add	sp, #12
 801b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b516:	4613      	mov	r3, r2
 801b518:	e7e7      	b.n	801b4ea <__exponent+0x20>
 801b51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b51e:	f804 2b01 	strb.w	r2, [r4], #1
 801b522:	e7f2      	b.n	801b50a <__exponent+0x40>
 801b524:	2330      	movs	r3, #48	; 0x30
 801b526:	4419      	add	r1, r3
 801b528:	7083      	strb	r3, [r0, #2]
 801b52a:	1d02      	adds	r2, r0, #4
 801b52c:	70c1      	strb	r1, [r0, #3]
 801b52e:	e7ef      	b.n	801b510 <__exponent+0x46>

0801b530 <_printf_float>:
 801b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b534:	b08d      	sub	sp, #52	; 0x34
 801b536:	460c      	mov	r4, r1
 801b538:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801b53c:	4616      	mov	r6, r2
 801b53e:	461f      	mov	r7, r3
 801b540:	4605      	mov	r5, r0
 801b542:	f001 fe03 	bl	801d14c <_localeconv_r>
 801b546:	6803      	ldr	r3, [r0, #0]
 801b548:	9304      	str	r3, [sp, #16]
 801b54a:	4618      	mov	r0, r3
 801b54c:	f7e4 fe4a 	bl	80001e4 <strlen>
 801b550:	2300      	movs	r3, #0
 801b552:	930a      	str	r3, [sp, #40]	; 0x28
 801b554:	f8d8 3000 	ldr.w	r3, [r8]
 801b558:	9005      	str	r0, [sp, #20]
 801b55a:	3307      	adds	r3, #7
 801b55c:	f023 0307 	bic.w	r3, r3, #7
 801b560:	f103 0208 	add.w	r2, r3, #8
 801b564:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b568:	f8d4 b000 	ldr.w	fp, [r4]
 801b56c:	f8c8 2000 	str.w	r2, [r8]
 801b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b574:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b578:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b57c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b580:	9307      	str	r3, [sp, #28]
 801b582:	f8cd 8018 	str.w	r8, [sp, #24]
 801b586:	f04f 32ff 	mov.w	r2, #4294967295
 801b58a:	4ba7      	ldr	r3, [pc, #668]	; (801b828 <_printf_float+0x2f8>)
 801b58c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b590:	f7e5 fadc 	bl	8000b4c <__aeabi_dcmpun>
 801b594:	bb70      	cbnz	r0, 801b5f4 <_printf_float+0xc4>
 801b596:	f04f 32ff 	mov.w	r2, #4294967295
 801b59a:	4ba3      	ldr	r3, [pc, #652]	; (801b828 <_printf_float+0x2f8>)
 801b59c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b5a0:	f7e5 fab6 	bl	8000b10 <__aeabi_dcmple>
 801b5a4:	bb30      	cbnz	r0, 801b5f4 <_printf_float+0xc4>
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	4640      	mov	r0, r8
 801b5ac:	4649      	mov	r1, r9
 801b5ae:	f7e5 faa5 	bl	8000afc <__aeabi_dcmplt>
 801b5b2:	b110      	cbz	r0, 801b5ba <_printf_float+0x8a>
 801b5b4:	232d      	movs	r3, #45	; 0x2d
 801b5b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5ba:	4a9c      	ldr	r2, [pc, #624]	; (801b82c <_printf_float+0x2fc>)
 801b5bc:	4b9c      	ldr	r3, [pc, #624]	; (801b830 <_printf_float+0x300>)
 801b5be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b5c2:	bf8c      	ite	hi
 801b5c4:	4690      	movhi	r8, r2
 801b5c6:	4698      	movls	r8, r3
 801b5c8:	2303      	movs	r3, #3
 801b5ca:	f02b 0204 	bic.w	r2, fp, #4
 801b5ce:	6123      	str	r3, [r4, #16]
 801b5d0:	6022      	str	r2, [r4, #0]
 801b5d2:	f04f 0900 	mov.w	r9, #0
 801b5d6:	9700      	str	r7, [sp, #0]
 801b5d8:	4633      	mov	r3, r6
 801b5da:	aa0b      	add	r2, sp, #44	; 0x2c
 801b5dc:	4621      	mov	r1, r4
 801b5de:	4628      	mov	r0, r5
 801b5e0:	f000 f9e6 	bl	801b9b0 <_printf_common>
 801b5e4:	3001      	adds	r0, #1
 801b5e6:	f040 808d 	bne.w	801b704 <_printf_float+0x1d4>
 801b5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801b5ee:	b00d      	add	sp, #52	; 0x34
 801b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5f4:	4642      	mov	r2, r8
 801b5f6:	464b      	mov	r3, r9
 801b5f8:	4640      	mov	r0, r8
 801b5fa:	4649      	mov	r1, r9
 801b5fc:	f7e5 faa6 	bl	8000b4c <__aeabi_dcmpun>
 801b600:	b110      	cbz	r0, 801b608 <_printf_float+0xd8>
 801b602:	4a8c      	ldr	r2, [pc, #560]	; (801b834 <_printf_float+0x304>)
 801b604:	4b8c      	ldr	r3, [pc, #560]	; (801b838 <_printf_float+0x308>)
 801b606:	e7da      	b.n	801b5be <_printf_float+0x8e>
 801b608:	6861      	ldr	r1, [r4, #4]
 801b60a:	1c4b      	adds	r3, r1, #1
 801b60c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801b610:	a80a      	add	r0, sp, #40	; 0x28
 801b612:	d13e      	bne.n	801b692 <_printf_float+0x162>
 801b614:	2306      	movs	r3, #6
 801b616:	6063      	str	r3, [r4, #4]
 801b618:	2300      	movs	r3, #0
 801b61a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b61e:	ab09      	add	r3, sp, #36	; 0x24
 801b620:	9300      	str	r3, [sp, #0]
 801b622:	ec49 8b10 	vmov	d0, r8, r9
 801b626:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b62a:	6022      	str	r2, [r4, #0]
 801b62c:	f8cd a004 	str.w	sl, [sp, #4]
 801b630:	6861      	ldr	r1, [r4, #4]
 801b632:	4628      	mov	r0, r5
 801b634:	f7ff fee8 	bl	801b408 <__cvt>
 801b638:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801b63c:	2b47      	cmp	r3, #71	; 0x47
 801b63e:	4680      	mov	r8, r0
 801b640:	d109      	bne.n	801b656 <_printf_float+0x126>
 801b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b644:	1cd8      	adds	r0, r3, #3
 801b646:	db02      	blt.n	801b64e <_printf_float+0x11e>
 801b648:	6862      	ldr	r2, [r4, #4]
 801b64a:	4293      	cmp	r3, r2
 801b64c:	dd47      	ble.n	801b6de <_printf_float+0x1ae>
 801b64e:	f1aa 0a02 	sub.w	sl, sl, #2
 801b652:	fa5f fa8a 	uxtb.w	sl, sl
 801b656:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b65c:	d824      	bhi.n	801b6a8 <_printf_float+0x178>
 801b65e:	3901      	subs	r1, #1
 801b660:	4652      	mov	r2, sl
 801b662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b666:	9109      	str	r1, [sp, #36]	; 0x24
 801b668:	f7ff ff2f 	bl	801b4ca <__exponent>
 801b66c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b66e:	1813      	adds	r3, r2, r0
 801b670:	2a01      	cmp	r2, #1
 801b672:	4681      	mov	r9, r0
 801b674:	6123      	str	r3, [r4, #16]
 801b676:	dc02      	bgt.n	801b67e <_printf_float+0x14e>
 801b678:	6822      	ldr	r2, [r4, #0]
 801b67a:	07d1      	lsls	r1, r2, #31
 801b67c:	d501      	bpl.n	801b682 <_printf_float+0x152>
 801b67e:	3301      	adds	r3, #1
 801b680:	6123      	str	r3, [r4, #16]
 801b682:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b686:	2b00      	cmp	r3, #0
 801b688:	d0a5      	beq.n	801b5d6 <_printf_float+0xa6>
 801b68a:	232d      	movs	r3, #45	; 0x2d
 801b68c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b690:	e7a1      	b.n	801b5d6 <_printf_float+0xa6>
 801b692:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801b696:	f000 8177 	beq.w	801b988 <_printf_float+0x458>
 801b69a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801b69e:	d1bb      	bne.n	801b618 <_printf_float+0xe8>
 801b6a0:	2900      	cmp	r1, #0
 801b6a2:	d1b9      	bne.n	801b618 <_printf_float+0xe8>
 801b6a4:	2301      	movs	r3, #1
 801b6a6:	e7b6      	b.n	801b616 <_printf_float+0xe6>
 801b6a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801b6ac:	d119      	bne.n	801b6e2 <_printf_float+0x1b2>
 801b6ae:	2900      	cmp	r1, #0
 801b6b0:	6863      	ldr	r3, [r4, #4]
 801b6b2:	dd0c      	ble.n	801b6ce <_printf_float+0x19e>
 801b6b4:	6121      	str	r1, [r4, #16]
 801b6b6:	b913      	cbnz	r3, 801b6be <_printf_float+0x18e>
 801b6b8:	6822      	ldr	r2, [r4, #0]
 801b6ba:	07d2      	lsls	r2, r2, #31
 801b6bc:	d502      	bpl.n	801b6c4 <_printf_float+0x194>
 801b6be:	3301      	adds	r3, #1
 801b6c0:	440b      	add	r3, r1
 801b6c2:	6123      	str	r3, [r4, #16]
 801b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6c6:	65a3      	str	r3, [r4, #88]	; 0x58
 801b6c8:	f04f 0900 	mov.w	r9, #0
 801b6cc:	e7d9      	b.n	801b682 <_printf_float+0x152>
 801b6ce:	b913      	cbnz	r3, 801b6d6 <_printf_float+0x1a6>
 801b6d0:	6822      	ldr	r2, [r4, #0]
 801b6d2:	07d0      	lsls	r0, r2, #31
 801b6d4:	d501      	bpl.n	801b6da <_printf_float+0x1aa>
 801b6d6:	3302      	adds	r3, #2
 801b6d8:	e7f3      	b.n	801b6c2 <_printf_float+0x192>
 801b6da:	2301      	movs	r3, #1
 801b6dc:	e7f1      	b.n	801b6c2 <_printf_float+0x192>
 801b6de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801b6e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b6e6:	4293      	cmp	r3, r2
 801b6e8:	db05      	blt.n	801b6f6 <_printf_float+0x1c6>
 801b6ea:	6822      	ldr	r2, [r4, #0]
 801b6ec:	6123      	str	r3, [r4, #16]
 801b6ee:	07d1      	lsls	r1, r2, #31
 801b6f0:	d5e8      	bpl.n	801b6c4 <_printf_float+0x194>
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	e7e5      	b.n	801b6c2 <_printf_float+0x192>
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	bfd4      	ite	le
 801b6fa:	f1c3 0302 	rsble	r3, r3, #2
 801b6fe:	2301      	movgt	r3, #1
 801b700:	4413      	add	r3, r2
 801b702:	e7de      	b.n	801b6c2 <_printf_float+0x192>
 801b704:	6823      	ldr	r3, [r4, #0]
 801b706:	055a      	lsls	r2, r3, #21
 801b708:	d407      	bmi.n	801b71a <_printf_float+0x1ea>
 801b70a:	6923      	ldr	r3, [r4, #16]
 801b70c:	4642      	mov	r2, r8
 801b70e:	4631      	mov	r1, r6
 801b710:	4628      	mov	r0, r5
 801b712:	47b8      	blx	r7
 801b714:	3001      	adds	r0, #1
 801b716:	d12b      	bne.n	801b770 <_printf_float+0x240>
 801b718:	e767      	b.n	801b5ea <_printf_float+0xba>
 801b71a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801b71e:	f240 80dc 	bls.w	801b8da <_printf_float+0x3aa>
 801b722:	2200      	movs	r2, #0
 801b724:	2300      	movs	r3, #0
 801b726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b72a:	f7e5 f9dd 	bl	8000ae8 <__aeabi_dcmpeq>
 801b72e:	2800      	cmp	r0, #0
 801b730:	d033      	beq.n	801b79a <_printf_float+0x26a>
 801b732:	2301      	movs	r3, #1
 801b734:	4a41      	ldr	r2, [pc, #260]	; (801b83c <_printf_float+0x30c>)
 801b736:	4631      	mov	r1, r6
 801b738:	4628      	mov	r0, r5
 801b73a:	47b8      	blx	r7
 801b73c:	3001      	adds	r0, #1
 801b73e:	f43f af54 	beq.w	801b5ea <_printf_float+0xba>
 801b742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b746:	429a      	cmp	r2, r3
 801b748:	db02      	blt.n	801b750 <_printf_float+0x220>
 801b74a:	6823      	ldr	r3, [r4, #0]
 801b74c:	07d8      	lsls	r0, r3, #31
 801b74e:	d50f      	bpl.n	801b770 <_printf_float+0x240>
 801b750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b754:	4631      	mov	r1, r6
 801b756:	4628      	mov	r0, r5
 801b758:	47b8      	blx	r7
 801b75a:	3001      	adds	r0, #1
 801b75c:	f43f af45 	beq.w	801b5ea <_printf_float+0xba>
 801b760:	f04f 0800 	mov.w	r8, #0
 801b764:	f104 091a 	add.w	r9, r4, #26
 801b768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b76a:	3b01      	subs	r3, #1
 801b76c:	4543      	cmp	r3, r8
 801b76e:	dc09      	bgt.n	801b784 <_printf_float+0x254>
 801b770:	6823      	ldr	r3, [r4, #0]
 801b772:	079b      	lsls	r3, r3, #30
 801b774:	f100 8103 	bmi.w	801b97e <_printf_float+0x44e>
 801b778:	68e0      	ldr	r0, [r4, #12]
 801b77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b77c:	4298      	cmp	r0, r3
 801b77e:	bfb8      	it	lt
 801b780:	4618      	movlt	r0, r3
 801b782:	e734      	b.n	801b5ee <_printf_float+0xbe>
 801b784:	2301      	movs	r3, #1
 801b786:	464a      	mov	r2, r9
 801b788:	4631      	mov	r1, r6
 801b78a:	4628      	mov	r0, r5
 801b78c:	47b8      	blx	r7
 801b78e:	3001      	adds	r0, #1
 801b790:	f43f af2b 	beq.w	801b5ea <_printf_float+0xba>
 801b794:	f108 0801 	add.w	r8, r8, #1
 801b798:	e7e6      	b.n	801b768 <_printf_float+0x238>
 801b79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	dc2b      	bgt.n	801b7f8 <_printf_float+0x2c8>
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	4a26      	ldr	r2, [pc, #152]	; (801b83c <_printf_float+0x30c>)
 801b7a4:	4631      	mov	r1, r6
 801b7a6:	4628      	mov	r0, r5
 801b7a8:	47b8      	blx	r7
 801b7aa:	3001      	adds	r0, #1
 801b7ac:	f43f af1d 	beq.w	801b5ea <_printf_float+0xba>
 801b7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7b2:	b923      	cbnz	r3, 801b7be <_printf_float+0x28e>
 801b7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7b6:	b913      	cbnz	r3, 801b7be <_printf_float+0x28e>
 801b7b8:	6823      	ldr	r3, [r4, #0]
 801b7ba:	07d9      	lsls	r1, r3, #31
 801b7bc:	d5d8      	bpl.n	801b770 <_printf_float+0x240>
 801b7be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b7c2:	4631      	mov	r1, r6
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	47b8      	blx	r7
 801b7c8:	3001      	adds	r0, #1
 801b7ca:	f43f af0e 	beq.w	801b5ea <_printf_float+0xba>
 801b7ce:	f04f 0900 	mov.w	r9, #0
 801b7d2:	f104 0a1a 	add.w	sl, r4, #26
 801b7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7d8:	425b      	negs	r3, r3
 801b7da:	454b      	cmp	r3, r9
 801b7dc:	dc01      	bgt.n	801b7e2 <_printf_float+0x2b2>
 801b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7e0:	e794      	b.n	801b70c <_printf_float+0x1dc>
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	4652      	mov	r2, sl
 801b7e6:	4631      	mov	r1, r6
 801b7e8:	4628      	mov	r0, r5
 801b7ea:	47b8      	blx	r7
 801b7ec:	3001      	adds	r0, #1
 801b7ee:	f43f aefc 	beq.w	801b5ea <_printf_float+0xba>
 801b7f2:	f109 0901 	add.w	r9, r9, #1
 801b7f6:	e7ee      	b.n	801b7d6 <_printf_float+0x2a6>
 801b7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b7fc:	429a      	cmp	r2, r3
 801b7fe:	bfa8      	it	ge
 801b800:	461a      	movge	r2, r3
 801b802:	2a00      	cmp	r2, #0
 801b804:	4691      	mov	r9, r2
 801b806:	dd07      	ble.n	801b818 <_printf_float+0x2e8>
 801b808:	4613      	mov	r3, r2
 801b80a:	4631      	mov	r1, r6
 801b80c:	4642      	mov	r2, r8
 801b80e:	4628      	mov	r0, r5
 801b810:	47b8      	blx	r7
 801b812:	3001      	adds	r0, #1
 801b814:	f43f aee9 	beq.w	801b5ea <_printf_float+0xba>
 801b818:	f104 031a 	add.w	r3, r4, #26
 801b81c:	f04f 0b00 	mov.w	fp, #0
 801b820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b824:	9306      	str	r3, [sp, #24]
 801b826:	e015      	b.n	801b854 <_printf_float+0x324>
 801b828:	7fefffff 	.word	0x7fefffff
 801b82c:	0801f994 	.word	0x0801f994
 801b830:	0801f990 	.word	0x0801f990
 801b834:	0801f99c 	.word	0x0801f99c
 801b838:	0801f998 	.word	0x0801f998
 801b83c:	0801f9a0 	.word	0x0801f9a0
 801b840:	2301      	movs	r3, #1
 801b842:	9a06      	ldr	r2, [sp, #24]
 801b844:	4631      	mov	r1, r6
 801b846:	4628      	mov	r0, r5
 801b848:	47b8      	blx	r7
 801b84a:	3001      	adds	r0, #1
 801b84c:	f43f aecd 	beq.w	801b5ea <_printf_float+0xba>
 801b850:	f10b 0b01 	add.w	fp, fp, #1
 801b854:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801b858:	ebaa 0309 	sub.w	r3, sl, r9
 801b85c:	455b      	cmp	r3, fp
 801b85e:	dcef      	bgt.n	801b840 <_printf_float+0x310>
 801b860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b864:	429a      	cmp	r2, r3
 801b866:	44d0      	add	r8, sl
 801b868:	db15      	blt.n	801b896 <_printf_float+0x366>
 801b86a:	6823      	ldr	r3, [r4, #0]
 801b86c:	07da      	lsls	r2, r3, #31
 801b86e:	d412      	bmi.n	801b896 <_printf_float+0x366>
 801b870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b872:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b874:	eba3 020a 	sub.w	r2, r3, sl
 801b878:	eba3 0a01 	sub.w	sl, r3, r1
 801b87c:	4592      	cmp	sl, r2
 801b87e:	bfa8      	it	ge
 801b880:	4692      	movge	sl, r2
 801b882:	f1ba 0f00 	cmp.w	sl, #0
 801b886:	dc0e      	bgt.n	801b8a6 <_printf_float+0x376>
 801b888:	f04f 0800 	mov.w	r8, #0
 801b88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b890:	f104 091a 	add.w	r9, r4, #26
 801b894:	e019      	b.n	801b8ca <_printf_float+0x39a>
 801b896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b89a:	4631      	mov	r1, r6
 801b89c:	4628      	mov	r0, r5
 801b89e:	47b8      	blx	r7
 801b8a0:	3001      	adds	r0, #1
 801b8a2:	d1e5      	bne.n	801b870 <_printf_float+0x340>
 801b8a4:	e6a1      	b.n	801b5ea <_printf_float+0xba>
 801b8a6:	4653      	mov	r3, sl
 801b8a8:	4642      	mov	r2, r8
 801b8aa:	4631      	mov	r1, r6
 801b8ac:	4628      	mov	r0, r5
 801b8ae:	47b8      	blx	r7
 801b8b0:	3001      	adds	r0, #1
 801b8b2:	d1e9      	bne.n	801b888 <_printf_float+0x358>
 801b8b4:	e699      	b.n	801b5ea <_printf_float+0xba>
 801b8b6:	2301      	movs	r3, #1
 801b8b8:	464a      	mov	r2, r9
 801b8ba:	4631      	mov	r1, r6
 801b8bc:	4628      	mov	r0, r5
 801b8be:	47b8      	blx	r7
 801b8c0:	3001      	adds	r0, #1
 801b8c2:	f43f ae92 	beq.w	801b5ea <_printf_float+0xba>
 801b8c6:	f108 0801 	add.w	r8, r8, #1
 801b8ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b8ce:	1a9b      	subs	r3, r3, r2
 801b8d0:	eba3 030a 	sub.w	r3, r3, sl
 801b8d4:	4543      	cmp	r3, r8
 801b8d6:	dcee      	bgt.n	801b8b6 <_printf_float+0x386>
 801b8d8:	e74a      	b.n	801b770 <_printf_float+0x240>
 801b8da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8dc:	2a01      	cmp	r2, #1
 801b8de:	dc01      	bgt.n	801b8e4 <_printf_float+0x3b4>
 801b8e0:	07db      	lsls	r3, r3, #31
 801b8e2:	d53a      	bpl.n	801b95a <_printf_float+0x42a>
 801b8e4:	2301      	movs	r3, #1
 801b8e6:	4642      	mov	r2, r8
 801b8e8:	4631      	mov	r1, r6
 801b8ea:	4628      	mov	r0, r5
 801b8ec:	47b8      	blx	r7
 801b8ee:	3001      	adds	r0, #1
 801b8f0:	f43f ae7b 	beq.w	801b5ea <_printf_float+0xba>
 801b8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b8f8:	4631      	mov	r1, r6
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	47b8      	blx	r7
 801b8fe:	3001      	adds	r0, #1
 801b900:	f108 0801 	add.w	r8, r8, #1
 801b904:	f43f ae71 	beq.w	801b5ea <_printf_float+0xba>
 801b908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b90a:	2200      	movs	r2, #0
 801b90c:	f103 3aff 	add.w	sl, r3, #4294967295
 801b910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b914:	2300      	movs	r3, #0
 801b916:	f7e5 f8e7 	bl	8000ae8 <__aeabi_dcmpeq>
 801b91a:	b9c8      	cbnz	r0, 801b950 <_printf_float+0x420>
 801b91c:	4653      	mov	r3, sl
 801b91e:	4642      	mov	r2, r8
 801b920:	4631      	mov	r1, r6
 801b922:	4628      	mov	r0, r5
 801b924:	47b8      	blx	r7
 801b926:	3001      	adds	r0, #1
 801b928:	d10e      	bne.n	801b948 <_printf_float+0x418>
 801b92a:	e65e      	b.n	801b5ea <_printf_float+0xba>
 801b92c:	2301      	movs	r3, #1
 801b92e:	4652      	mov	r2, sl
 801b930:	4631      	mov	r1, r6
 801b932:	4628      	mov	r0, r5
 801b934:	47b8      	blx	r7
 801b936:	3001      	adds	r0, #1
 801b938:	f43f ae57 	beq.w	801b5ea <_printf_float+0xba>
 801b93c:	f108 0801 	add.w	r8, r8, #1
 801b940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b942:	3b01      	subs	r3, #1
 801b944:	4543      	cmp	r3, r8
 801b946:	dcf1      	bgt.n	801b92c <_printf_float+0x3fc>
 801b948:	464b      	mov	r3, r9
 801b94a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b94e:	e6de      	b.n	801b70e <_printf_float+0x1de>
 801b950:	f04f 0800 	mov.w	r8, #0
 801b954:	f104 0a1a 	add.w	sl, r4, #26
 801b958:	e7f2      	b.n	801b940 <_printf_float+0x410>
 801b95a:	2301      	movs	r3, #1
 801b95c:	e7df      	b.n	801b91e <_printf_float+0x3ee>
 801b95e:	2301      	movs	r3, #1
 801b960:	464a      	mov	r2, r9
 801b962:	4631      	mov	r1, r6
 801b964:	4628      	mov	r0, r5
 801b966:	47b8      	blx	r7
 801b968:	3001      	adds	r0, #1
 801b96a:	f43f ae3e 	beq.w	801b5ea <_printf_float+0xba>
 801b96e:	f108 0801 	add.w	r8, r8, #1
 801b972:	68e3      	ldr	r3, [r4, #12]
 801b974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b976:	1a9b      	subs	r3, r3, r2
 801b978:	4543      	cmp	r3, r8
 801b97a:	dcf0      	bgt.n	801b95e <_printf_float+0x42e>
 801b97c:	e6fc      	b.n	801b778 <_printf_float+0x248>
 801b97e:	f04f 0800 	mov.w	r8, #0
 801b982:	f104 0919 	add.w	r9, r4, #25
 801b986:	e7f4      	b.n	801b972 <_printf_float+0x442>
 801b988:	2900      	cmp	r1, #0
 801b98a:	f43f ae8b 	beq.w	801b6a4 <_printf_float+0x174>
 801b98e:	2300      	movs	r3, #0
 801b990:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801b994:	ab09      	add	r3, sp, #36	; 0x24
 801b996:	9300      	str	r3, [sp, #0]
 801b998:	ec49 8b10 	vmov	d0, r8, r9
 801b99c:	6022      	str	r2, [r4, #0]
 801b99e:	f8cd a004 	str.w	sl, [sp, #4]
 801b9a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b9a6:	4628      	mov	r0, r5
 801b9a8:	f7ff fd2e 	bl	801b408 <__cvt>
 801b9ac:	4680      	mov	r8, r0
 801b9ae:	e648      	b.n	801b642 <_printf_float+0x112>

0801b9b0 <_printf_common>:
 801b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9b4:	4691      	mov	r9, r2
 801b9b6:	461f      	mov	r7, r3
 801b9b8:	688a      	ldr	r2, [r1, #8]
 801b9ba:	690b      	ldr	r3, [r1, #16]
 801b9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	bfb8      	it	lt
 801b9c4:	4613      	movlt	r3, r2
 801b9c6:	f8c9 3000 	str.w	r3, [r9]
 801b9ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b9ce:	4606      	mov	r6, r0
 801b9d0:	460c      	mov	r4, r1
 801b9d2:	b112      	cbz	r2, 801b9da <_printf_common+0x2a>
 801b9d4:	3301      	adds	r3, #1
 801b9d6:	f8c9 3000 	str.w	r3, [r9]
 801b9da:	6823      	ldr	r3, [r4, #0]
 801b9dc:	0699      	lsls	r1, r3, #26
 801b9de:	bf42      	ittt	mi
 801b9e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b9e4:	3302      	addmi	r3, #2
 801b9e6:	f8c9 3000 	strmi.w	r3, [r9]
 801b9ea:	6825      	ldr	r5, [r4, #0]
 801b9ec:	f015 0506 	ands.w	r5, r5, #6
 801b9f0:	d107      	bne.n	801ba02 <_printf_common+0x52>
 801b9f2:	f104 0a19 	add.w	sl, r4, #25
 801b9f6:	68e3      	ldr	r3, [r4, #12]
 801b9f8:	f8d9 2000 	ldr.w	r2, [r9]
 801b9fc:	1a9b      	subs	r3, r3, r2
 801b9fe:	42ab      	cmp	r3, r5
 801ba00:	dc28      	bgt.n	801ba54 <_printf_common+0xa4>
 801ba02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ba06:	6822      	ldr	r2, [r4, #0]
 801ba08:	3300      	adds	r3, #0
 801ba0a:	bf18      	it	ne
 801ba0c:	2301      	movne	r3, #1
 801ba0e:	0692      	lsls	r2, r2, #26
 801ba10:	d42d      	bmi.n	801ba6e <_printf_common+0xbe>
 801ba12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba16:	4639      	mov	r1, r7
 801ba18:	4630      	mov	r0, r6
 801ba1a:	47c0      	blx	r8
 801ba1c:	3001      	adds	r0, #1
 801ba1e:	d020      	beq.n	801ba62 <_printf_common+0xb2>
 801ba20:	6823      	ldr	r3, [r4, #0]
 801ba22:	68e5      	ldr	r5, [r4, #12]
 801ba24:	f8d9 2000 	ldr.w	r2, [r9]
 801ba28:	f003 0306 	and.w	r3, r3, #6
 801ba2c:	2b04      	cmp	r3, #4
 801ba2e:	bf08      	it	eq
 801ba30:	1aad      	subeq	r5, r5, r2
 801ba32:	68a3      	ldr	r3, [r4, #8]
 801ba34:	6922      	ldr	r2, [r4, #16]
 801ba36:	bf0c      	ite	eq
 801ba38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba3c:	2500      	movne	r5, #0
 801ba3e:	4293      	cmp	r3, r2
 801ba40:	bfc4      	itt	gt
 801ba42:	1a9b      	subgt	r3, r3, r2
 801ba44:	18ed      	addgt	r5, r5, r3
 801ba46:	f04f 0900 	mov.w	r9, #0
 801ba4a:	341a      	adds	r4, #26
 801ba4c:	454d      	cmp	r5, r9
 801ba4e:	d11a      	bne.n	801ba86 <_printf_common+0xd6>
 801ba50:	2000      	movs	r0, #0
 801ba52:	e008      	b.n	801ba66 <_printf_common+0xb6>
 801ba54:	2301      	movs	r3, #1
 801ba56:	4652      	mov	r2, sl
 801ba58:	4639      	mov	r1, r7
 801ba5a:	4630      	mov	r0, r6
 801ba5c:	47c0      	blx	r8
 801ba5e:	3001      	adds	r0, #1
 801ba60:	d103      	bne.n	801ba6a <_printf_common+0xba>
 801ba62:	f04f 30ff 	mov.w	r0, #4294967295
 801ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba6a:	3501      	adds	r5, #1
 801ba6c:	e7c3      	b.n	801b9f6 <_printf_common+0x46>
 801ba6e:	18e1      	adds	r1, r4, r3
 801ba70:	1c5a      	adds	r2, r3, #1
 801ba72:	2030      	movs	r0, #48	; 0x30
 801ba74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba78:	4422      	add	r2, r4
 801ba7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba82:	3302      	adds	r3, #2
 801ba84:	e7c5      	b.n	801ba12 <_printf_common+0x62>
 801ba86:	2301      	movs	r3, #1
 801ba88:	4622      	mov	r2, r4
 801ba8a:	4639      	mov	r1, r7
 801ba8c:	4630      	mov	r0, r6
 801ba8e:	47c0      	blx	r8
 801ba90:	3001      	adds	r0, #1
 801ba92:	d0e6      	beq.n	801ba62 <_printf_common+0xb2>
 801ba94:	f109 0901 	add.w	r9, r9, #1
 801ba98:	e7d8      	b.n	801ba4c <_printf_common+0x9c>
	...

0801ba9c <_printf_i>:
 801ba9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801baa4:	460c      	mov	r4, r1
 801baa6:	7e09      	ldrb	r1, [r1, #24]
 801baa8:	b085      	sub	sp, #20
 801baaa:	296e      	cmp	r1, #110	; 0x6e
 801baac:	4617      	mov	r7, r2
 801baae:	4606      	mov	r6, r0
 801bab0:	4698      	mov	r8, r3
 801bab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bab4:	f000 80b3 	beq.w	801bc1e <_printf_i+0x182>
 801bab8:	d822      	bhi.n	801bb00 <_printf_i+0x64>
 801baba:	2963      	cmp	r1, #99	; 0x63
 801babc:	d036      	beq.n	801bb2c <_printf_i+0x90>
 801babe:	d80a      	bhi.n	801bad6 <_printf_i+0x3a>
 801bac0:	2900      	cmp	r1, #0
 801bac2:	f000 80b9 	beq.w	801bc38 <_printf_i+0x19c>
 801bac6:	2958      	cmp	r1, #88	; 0x58
 801bac8:	f000 8083 	beq.w	801bbd2 <_printf_i+0x136>
 801bacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bad0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801bad4:	e032      	b.n	801bb3c <_printf_i+0xa0>
 801bad6:	2964      	cmp	r1, #100	; 0x64
 801bad8:	d001      	beq.n	801bade <_printf_i+0x42>
 801bada:	2969      	cmp	r1, #105	; 0x69
 801badc:	d1f6      	bne.n	801bacc <_printf_i+0x30>
 801bade:	6820      	ldr	r0, [r4, #0]
 801bae0:	6813      	ldr	r3, [r2, #0]
 801bae2:	0605      	lsls	r5, r0, #24
 801bae4:	f103 0104 	add.w	r1, r3, #4
 801bae8:	d52a      	bpl.n	801bb40 <_printf_i+0xa4>
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	6011      	str	r1, [r2, #0]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	da03      	bge.n	801bafa <_printf_i+0x5e>
 801baf2:	222d      	movs	r2, #45	; 0x2d
 801baf4:	425b      	negs	r3, r3
 801baf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bafa:	486f      	ldr	r0, [pc, #444]	; (801bcb8 <_printf_i+0x21c>)
 801bafc:	220a      	movs	r2, #10
 801bafe:	e039      	b.n	801bb74 <_printf_i+0xd8>
 801bb00:	2973      	cmp	r1, #115	; 0x73
 801bb02:	f000 809d 	beq.w	801bc40 <_printf_i+0x1a4>
 801bb06:	d808      	bhi.n	801bb1a <_printf_i+0x7e>
 801bb08:	296f      	cmp	r1, #111	; 0x6f
 801bb0a:	d020      	beq.n	801bb4e <_printf_i+0xb2>
 801bb0c:	2970      	cmp	r1, #112	; 0x70
 801bb0e:	d1dd      	bne.n	801bacc <_printf_i+0x30>
 801bb10:	6823      	ldr	r3, [r4, #0]
 801bb12:	f043 0320 	orr.w	r3, r3, #32
 801bb16:	6023      	str	r3, [r4, #0]
 801bb18:	e003      	b.n	801bb22 <_printf_i+0x86>
 801bb1a:	2975      	cmp	r1, #117	; 0x75
 801bb1c:	d017      	beq.n	801bb4e <_printf_i+0xb2>
 801bb1e:	2978      	cmp	r1, #120	; 0x78
 801bb20:	d1d4      	bne.n	801bacc <_printf_i+0x30>
 801bb22:	2378      	movs	r3, #120	; 0x78
 801bb24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bb28:	4864      	ldr	r0, [pc, #400]	; (801bcbc <_printf_i+0x220>)
 801bb2a:	e055      	b.n	801bbd8 <_printf_i+0x13c>
 801bb2c:	6813      	ldr	r3, [r2, #0]
 801bb2e:	1d19      	adds	r1, r3, #4
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	6011      	str	r1, [r2, #0]
 801bb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb3c:	2301      	movs	r3, #1
 801bb3e:	e08c      	b.n	801bc5a <_printf_i+0x1be>
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	6011      	str	r1, [r2, #0]
 801bb44:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bb48:	bf18      	it	ne
 801bb4a:	b21b      	sxthne	r3, r3
 801bb4c:	e7cf      	b.n	801baee <_printf_i+0x52>
 801bb4e:	6813      	ldr	r3, [r2, #0]
 801bb50:	6825      	ldr	r5, [r4, #0]
 801bb52:	1d18      	adds	r0, r3, #4
 801bb54:	6010      	str	r0, [r2, #0]
 801bb56:	0628      	lsls	r0, r5, #24
 801bb58:	d501      	bpl.n	801bb5e <_printf_i+0xc2>
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	e002      	b.n	801bb64 <_printf_i+0xc8>
 801bb5e:	0668      	lsls	r0, r5, #25
 801bb60:	d5fb      	bpl.n	801bb5a <_printf_i+0xbe>
 801bb62:	881b      	ldrh	r3, [r3, #0]
 801bb64:	4854      	ldr	r0, [pc, #336]	; (801bcb8 <_printf_i+0x21c>)
 801bb66:	296f      	cmp	r1, #111	; 0x6f
 801bb68:	bf14      	ite	ne
 801bb6a:	220a      	movne	r2, #10
 801bb6c:	2208      	moveq	r2, #8
 801bb6e:	2100      	movs	r1, #0
 801bb70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb74:	6865      	ldr	r5, [r4, #4]
 801bb76:	60a5      	str	r5, [r4, #8]
 801bb78:	2d00      	cmp	r5, #0
 801bb7a:	f2c0 8095 	blt.w	801bca8 <_printf_i+0x20c>
 801bb7e:	6821      	ldr	r1, [r4, #0]
 801bb80:	f021 0104 	bic.w	r1, r1, #4
 801bb84:	6021      	str	r1, [r4, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d13d      	bne.n	801bc06 <_printf_i+0x16a>
 801bb8a:	2d00      	cmp	r5, #0
 801bb8c:	f040 808e 	bne.w	801bcac <_printf_i+0x210>
 801bb90:	4665      	mov	r5, ip
 801bb92:	2a08      	cmp	r2, #8
 801bb94:	d10b      	bne.n	801bbae <_printf_i+0x112>
 801bb96:	6823      	ldr	r3, [r4, #0]
 801bb98:	07db      	lsls	r3, r3, #31
 801bb9a:	d508      	bpl.n	801bbae <_printf_i+0x112>
 801bb9c:	6923      	ldr	r3, [r4, #16]
 801bb9e:	6862      	ldr	r2, [r4, #4]
 801bba0:	429a      	cmp	r2, r3
 801bba2:	bfde      	ittt	le
 801bba4:	2330      	movle	r3, #48	; 0x30
 801bba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bbaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bbae:	ebac 0305 	sub.w	r3, ip, r5
 801bbb2:	6123      	str	r3, [r4, #16]
 801bbb4:	f8cd 8000 	str.w	r8, [sp]
 801bbb8:	463b      	mov	r3, r7
 801bbba:	aa03      	add	r2, sp, #12
 801bbbc:	4621      	mov	r1, r4
 801bbbe:	4630      	mov	r0, r6
 801bbc0:	f7ff fef6 	bl	801b9b0 <_printf_common>
 801bbc4:	3001      	adds	r0, #1
 801bbc6:	d14d      	bne.n	801bc64 <_printf_i+0x1c8>
 801bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbcc:	b005      	add	sp, #20
 801bbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbd2:	4839      	ldr	r0, [pc, #228]	; (801bcb8 <_printf_i+0x21c>)
 801bbd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801bbd8:	6813      	ldr	r3, [r2, #0]
 801bbda:	6821      	ldr	r1, [r4, #0]
 801bbdc:	1d1d      	adds	r5, r3, #4
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	6015      	str	r5, [r2, #0]
 801bbe2:	060a      	lsls	r2, r1, #24
 801bbe4:	d50b      	bpl.n	801bbfe <_printf_i+0x162>
 801bbe6:	07ca      	lsls	r2, r1, #31
 801bbe8:	bf44      	itt	mi
 801bbea:	f041 0120 	orrmi.w	r1, r1, #32
 801bbee:	6021      	strmi	r1, [r4, #0]
 801bbf0:	b91b      	cbnz	r3, 801bbfa <_printf_i+0x15e>
 801bbf2:	6822      	ldr	r2, [r4, #0]
 801bbf4:	f022 0220 	bic.w	r2, r2, #32
 801bbf8:	6022      	str	r2, [r4, #0]
 801bbfa:	2210      	movs	r2, #16
 801bbfc:	e7b7      	b.n	801bb6e <_printf_i+0xd2>
 801bbfe:	064d      	lsls	r5, r1, #25
 801bc00:	bf48      	it	mi
 801bc02:	b29b      	uxthmi	r3, r3
 801bc04:	e7ef      	b.n	801bbe6 <_printf_i+0x14a>
 801bc06:	4665      	mov	r5, ip
 801bc08:	fbb3 f1f2 	udiv	r1, r3, r2
 801bc0c:	fb02 3311 	mls	r3, r2, r1, r3
 801bc10:	5cc3      	ldrb	r3, [r0, r3]
 801bc12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801bc16:	460b      	mov	r3, r1
 801bc18:	2900      	cmp	r1, #0
 801bc1a:	d1f5      	bne.n	801bc08 <_printf_i+0x16c>
 801bc1c:	e7b9      	b.n	801bb92 <_printf_i+0xf6>
 801bc1e:	6813      	ldr	r3, [r2, #0]
 801bc20:	6825      	ldr	r5, [r4, #0]
 801bc22:	6961      	ldr	r1, [r4, #20]
 801bc24:	1d18      	adds	r0, r3, #4
 801bc26:	6010      	str	r0, [r2, #0]
 801bc28:	0628      	lsls	r0, r5, #24
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	d501      	bpl.n	801bc32 <_printf_i+0x196>
 801bc2e:	6019      	str	r1, [r3, #0]
 801bc30:	e002      	b.n	801bc38 <_printf_i+0x19c>
 801bc32:	066a      	lsls	r2, r5, #25
 801bc34:	d5fb      	bpl.n	801bc2e <_printf_i+0x192>
 801bc36:	8019      	strh	r1, [r3, #0]
 801bc38:	2300      	movs	r3, #0
 801bc3a:	6123      	str	r3, [r4, #16]
 801bc3c:	4665      	mov	r5, ip
 801bc3e:	e7b9      	b.n	801bbb4 <_printf_i+0x118>
 801bc40:	6813      	ldr	r3, [r2, #0]
 801bc42:	1d19      	adds	r1, r3, #4
 801bc44:	6011      	str	r1, [r2, #0]
 801bc46:	681d      	ldr	r5, [r3, #0]
 801bc48:	6862      	ldr	r2, [r4, #4]
 801bc4a:	2100      	movs	r1, #0
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	f7e4 fad7 	bl	8000200 <memchr>
 801bc52:	b108      	cbz	r0, 801bc58 <_printf_i+0x1bc>
 801bc54:	1b40      	subs	r0, r0, r5
 801bc56:	6060      	str	r0, [r4, #4]
 801bc58:	6863      	ldr	r3, [r4, #4]
 801bc5a:	6123      	str	r3, [r4, #16]
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc62:	e7a7      	b.n	801bbb4 <_printf_i+0x118>
 801bc64:	6923      	ldr	r3, [r4, #16]
 801bc66:	462a      	mov	r2, r5
 801bc68:	4639      	mov	r1, r7
 801bc6a:	4630      	mov	r0, r6
 801bc6c:	47c0      	blx	r8
 801bc6e:	3001      	adds	r0, #1
 801bc70:	d0aa      	beq.n	801bbc8 <_printf_i+0x12c>
 801bc72:	6823      	ldr	r3, [r4, #0]
 801bc74:	079b      	lsls	r3, r3, #30
 801bc76:	d413      	bmi.n	801bca0 <_printf_i+0x204>
 801bc78:	68e0      	ldr	r0, [r4, #12]
 801bc7a:	9b03      	ldr	r3, [sp, #12]
 801bc7c:	4298      	cmp	r0, r3
 801bc7e:	bfb8      	it	lt
 801bc80:	4618      	movlt	r0, r3
 801bc82:	e7a3      	b.n	801bbcc <_printf_i+0x130>
 801bc84:	2301      	movs	r3, #1
 801bc86:	464a      	mov	r2, r9
 801bc88:	4639      	mov	r1, r7
 801bc8a:	4630      	mov	r0, r6
 801bc8c:	47c0      	blx	r8
 801bc8e:	3001      	adds	r0, #1
 801bc90:	d09a      	beq.n	801bbc8 <_printf_i+0x12c>
 801bc92:	3501      	adds	r5, #1
 801bc94:	68e3      	ldr	r3, [r4, #12]
 801bc96:	9a03      	ldr	r2, [sp, #12]
 801bc98:	1a9b      	subs	r3, r3, r2
 801bc9a:	42ab      	cmp	r3, r5
 801bc9c:	dcf2      	bgt.n	801bc84 <_printf_i+0x1e8>
 801bc9e:	e7eb      	b.n	801bc78 <_printf_i+0x1dc>
 801bca0:	2500      	movs	r5, #0
 801bca2:	f104 0919 	add.w	r9, r4, #25
 801bca6:	e7f5      	b.n	801bc94 <_printf_i+0x1f8>
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d1ac      	bne.n	801bc06 <_printf_i+0x16a>
 801bcac:	7803      	ldrb	r3, [r0, #0]
 801bcae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bcb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bcb6:	e76c      	b.n	801bb92 <_printf_i+0xf6>
 801bcb8:	0801f9a2 	.word	0x0801f9a2
 801bcbc:	0801f9b3 	.word	0x0801f9b3

0801bcc0 <iprintf>:
 801bcc0:	b40f      	push	{r0, r1, r2, r3}
 801bcc2:	4b0a      	ldr	r3, [pc, #40]	; (801bcec <iprintf+0x2c>)
 801bcc4:	b513      	push	{r0, r1, r4, lr}
 801bcc6:	681c      	ldr	r4, [r3, #0]
 801bcc8:	b124      	cbz	r4, 801bcd4 <iprintf+0x14>
 801bcca:	69a3      	ldr	r3, [r4, #24]
 801bccc:	b913      	cbnz	r3, 801bcd4 <iprintf+0x14>
 801bcce:	4620      	mov	r0, r4
 801bcd0:	f001 f9ae 	bl	801d030 <__sinit>
 801bcd4:	ab05      	add	r3, sp, #20
 801bcd6:	9a04      	ldr	r2, [sp, #16]
 801bcd8:	68a1      	ldr	r1, [r4, #8]
 801bcda:	9301      	str	r3, [sp, #4]
 801bcdc:	4620      	mov	r0, r4
 801bcde:	f001 ff21 	bl	801db24 <_vfiprintf_r>
 801bce2:	b002      	add	sp, #8
 801bce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bce8:	b004      	add	sp, #16
 801bcea:	4770      	bx	lr
 801bcec:	200001b0 	.word	0x200001b0

0801bcf0 <_puts_r>:
 801bcf0:	b570      	push	{r4, r5, r6, lr}
 801bcf2:	460e      	mov	r6, r1
 801bcf4:	4605      	mov	r5, r0
 801bcf6:	b118      	cbz	r0, 801bd00 <_puts_r+0x10>
 801bcf8:	6983      	ldr	r3, [r0, #24]
 801bcfa:	b90b      	cbnz	r3, 801bd00 <_puts_r+0x10>
 801bcfc:	f001 f998 	bl	801d030 <__sinit>
 801bd00:	69ab      	ldr	r3, [r5, #24]
 801bd02:	68ac      	ldr	r4, [r5, #8]
 801bd04:	b913      	cbnz	r3, 801bd0c <_puts_r+0x1c>
 801bd06:	4628      	mov	r0, r5
 801bd08:	f001 f992 	bl	801d030 <__sinit>
 801bd0c:	4b23      	ldr	r3, [pc, #140]	; (801bd9c <_puts_r+0xac>)
 801bd0e:	429c      	cmp	r4, r3
 801bd10:	d117      	bne.n	801bd42 <_puts_r+0x52>
 801bd12:	686c      	ldr	r4, [r5, #4]
 801bd14:	89a3      	ldrh	r3, [r4, #12]
 801bd16:	071b      	lsls	r3, r3, #28
 801bd18:	d51d      	bpl.n	801bd56 <_puts_r+0x66>
 801bd1a:	6923      	ldr	r3, [r4, #16]
 801bd1c:	b1db      	cbz	r3, 801bd56 <_puts_r+0x66>
 801bd1e:	3e01      	subs	r6, #1
 801bd20:	68a3      	ldr	r3, [r4, #8]
 801bd22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bd26:	3b01      	subs	r3, #1
 801bd28:	60a3      	str	r3, [r4, #8]
 801bd2a:	b9e9      	cbnz	r1, 801bd68 <_puts_r+0x78>
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	da2e      	bge.n	801bd8e <_puts_r+0x9e>
 801bd30:	4622      	mov	r2, r4
 801bd32:	210a      	movs	r1, #10
 801bd34:	4628      	mov	r0, r5
 801bd36:	f000 f987 	bl	801c048 <__swbuf_r>
 801bd3a:	3001      	adds	r0, #1
 801bd3c:	d011      	beq.n	801bd62 <_puts_r+0x72>
 801bd3e:	200a      	movs	r0, #10
 801bd40:	e011      	b.n	801bd66 <_puts_r+0x76>
 801bd42:	4b17      	ldr	r3, [pc, #92]	; (801bda0 <_puts_r+0xb0>)
 801bd44:	429c      	cmp	r4, r3
 801bd46:	d101      	bne.n	801bd4c <_puts_r+0x5c>
 801bd48:	68ac      	ldr	r4, [r5, #8]
 801bd4a:	e7e3      	b.n	801bd14 <_puts_r+0x24>
 801bd4c:	4b15      	ldr	r3, [pc, #84]	; (801bda4 <_puts_r+0xb4>)
 801bd4e:	429c      	cmp	r4, r3
 801bd50:	bf08      	it	eq
 801bd52:	68ec      	ldreq	r4, [r5, #12]
 801bd54:	e7de      	b.n	801bd14 <_puts_r+0x24>
 801bd56:	4621      	mov	r1, r4
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f000 f9c7 	bl	801c0ec <__swsetup_r>
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	d0dd      	beq.n	801bd1e <_puts_r+0x2e>
 801bd62:	f04f 30ff 	mov.w	r0, #4294967295
 801bd66:	bd70      	pop	{r4, r5, r6, pc}
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	da04      	bge.n	801bd76 <_puts_r+0x86>
 801bd6c:	69a2      	ldr	r2, [r4, #24]
 801bd6e:	429a      	cmp	r2, r3
 801bd70:	dc06      	bgt.n	801bd80 <_puts_r+0x90>
 801bd72:	290a      	cmp	r1, #10
 801bd74:	d004      	beq.n	801bd80 <_puts_r+0x90>
 801bd76:	6823      	ldr	r3, [r4, #0]
 801bd78:	1c5a      	adds	r2, r3, #1
 801bd7a:	6022      	str	r2, [r4, #0]
 801bd7c:	7019      	strb	r1, [r3, #0]
 801bd7e:	e7cf      	b.n	801bd20 <_puts_r+0x30>
 801bd80:	4622      	mov	r2, r4
 801bd82:	4628      	mov	r0, r5
 801bd84:	f000 f960 	bl	801c048 <__swbuf_r>
 801bd88:	3001      	adds	r0, #1
 801bd8a:	d1c9      	bne.n	801bd20 <_puts_r+0x30>
 801bd8c:	e7e9      	b.n	801bd62 <_puts_r+0x72>
 801bd8e:	6823      	ldr	r3, [r4, #0]
 801bd90:	200a      	movs	r0, #10
 801bd92:	1c5a      	adds	r2, r3, #1
 801bd94:	6022      	str	r2, [r4, #0]
 801bd96:	7018      	strb	r0, [r3, #0]
 801bd98:	e7e5      	b.n	801bd66 <_puts_r+0x76>
 801bd9a:	bf00      	nop
 801bd9c:	0801f9f4 	.word	0x0801f9f4
 801bda0:	0801fa14 	.word	0x0801fa14
 801bda4:	0801f9d4 	.word	0x0801f9d4

0801bda8 <puts>:
 801bda8:	4b02      	ldr	r3, [pc, #8]	; (801bdb4 <puts+0xc>)
 801bdaa:	4601      	mov	r1, r0
 801bdac:	6818      	ldr	r0, [r3, #0]
 801bdae:	f7ff bf9f 	b.w	801bcf0 <_puts_r>
 801bdb2:	bf00      	nop
 801bdb4:	200001b0 	.word	0x200001b0

0801bdb8 <_sbrk_r>:
 801bdb8:	b538      	push	{r3, r4, r5, lr}
 801bdba:	4c06      	ldr	r4, [pc, #24]	; (801bdd4 <_sbrk_r+0x1c>)
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	4605      	mov	r5, r0
 801bdc0:	4608      	mov	r0, r1
 801bdc2:	6023      	str	r3, [r4, #0]
 801bdc4:	f7f2 fdc8 	bl	800e958 <_sbrk>
 801bdc8:	1c43      	adds	r3, r0, #1
 801bdca:	d102      	bne.n	801bdd2 <_sbrk_r+0x1a>
 801bdcc:	6823      	ldr	r3, [r4, #0]
 801bdce:	b103      	cbz	r3, 801bdd2 <_sbrk_r+0x1a>
 801bdd0:	602b      	str	r3, [r5, #0]
 801bdd2:	bd38      	pop	{r3, r4, r5, pc}
 801bdd4:	2000ba10 	.word	0x2000ba10

0801bdd8 <siprintf>:
 801bdd8:	b40e      	push	{r1, r2, r3}
 801bdda:	b500      	push	{lr}
 801bddc:	b09c      	sub	sp, #112	; 0x70
 801bdde:	ab1d      	add	r3, sp, #116	; 0x74
 801bde0:	9002      	str	r0, [sp, #8]
 801bde2:	9006      	str	r0, [sp, #24]
 801bde4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bde8:	4809      	ldr	r0, [pc, #36]	; (801be10 <siprintf+0x38>)
 801bdea:	9107      	str	r1, [sp, #28]
 801bdec:	9104      	str	r1, [sp, #16]
 801bdee:	4909      	ldr	r1, [pc, #36]	; (801be14 <siprintf+0x3c>)
 801bdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdf4:	9105      	str	r1, [sp, #20]
 801bdf6:	6800      	ldr	r0, [r0, #0]
 801bdf8:	9301      	str	r3, [sp, #4]
 801bdfa:	a902      	add	r1, sp, #8
 801bdfc:	f001 fd70 	bl	801d8e0 <_svfiprintf_r>
 801be00:	9b02      	ldr	r3, [sp, #8]
 801be02:	2200      	movs	r2, #0
 801be04:	701a      	strb	r2, [r3, #0]
 801be06:	b01c      	add	sp, #112	; 0x70
 801be08:	f85d eb04 	ldr.w	lr, [sp], #4
 801be0c:	b003      	add	sp, #12
 801be0e:	4770      	bx	lr
 801be10:	200001b0 	.word	0x200001b0
 801be14:	ffff0208 	.word	0xffff0208

0801be18 <strcat>:
 801be18:	b510      	push	{r4, lr}
 801be1a:	4603      	mov	r3, r0
 801be1c:	781a      	ldrb	r2, [r3, #0]
 801be1e:	1c5c      	adds	r4, r3, #1
 801be20:	b93a      	cbnz	r2, 801be32 <strcat+0x1a>
 801be22:	3b01      	subs	r3, #1
 801be24:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be28:	f803 2f01 	strb.w	r2, [r3, #1]!
 801be2c:	2a00      	cmp	r2, #0
 801be2e:	d1f9      	bne.n	801be24 <strcat+0xc>
 801be30:	bd10      	pop	{r4, pc}
 801be32:	4623      	mov	r3, r4
 801be34:	e7f2      	b.n	801be1c <strcat+0x4>

0801be36 <strcpy>:
 801be36:	4603      	mov	r3, r0
 801be38:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be3c:	f803 2b01 	strb.w	r2, [r3], #1
 801be40:	2a00      	cmp	r2, #0
 801be42:	d1f9      	bne.n	801be38 <strcpy+0x2>
 801be44:	4770      	bx	lr

0801be46 <strstr>:
 801be46:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be48:	7803      	ldrb	r3, [r0, #0]
 801be4a:	b17b      	cbz	r3, 801be6c <strstr+0x26>
 801be4c:	4604      	mov	r4, r0
 801be4e:	7823      	ldrb	r3, [r4, #0]
 801be50:	4620      	mov	r0, r4
 801be52:	1c66      	adds	r6, r4, #1
 801be54:	b17b      	cbz	r3, 801be76 <strstr+0x30>
 801be56:	1e4a      	subs	r2, r1, #1
 801be58:	1e63      	subs	r3, r4, #1
 801be5a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801be5e:	b14d      	cbz	r5, 801be74 <strstr+0x2e>
 801be60:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801be64:	42af      	cmp	r7, r5
 801be66:	4634      	mov	r4, r6
 801be68:	d0f7      	beq.n	801be5a <strstr+0x14>
 801be6a:	e7f0      	b.n	801be4e <strstr+0x8>
 801be6c:	780b      	ldrb	r3, [r1, #0]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	bf18      	it	ne
 801be72:	2000      	movne	r0, #0
 801be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be76:	4618      	mov	r0, r3
 801be78:	e7fc      	b.n	801be74 <strstr+0x2e>
	...

0801be7c <strtok>:
 801be7c:	4b13      	ldr	r3, [pc, #76]	; (801becc <strtok+0x50>)
 801be7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be82:	681d      	ldr	r5, [r3, #0]
 801be84:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801be86:	4606      	mov	r6, r0
 801be88:	460f      	mov	r7, r1
 801be8a:	b9b4      	cbnz	r4, 801beba <strtok+0x3e>
 801be8c:	2050      	movs	r0, #80	; 0x50
 801be8e:	f7ff f9f7 	bl	801b280 <malloc>
 801be92:	65a8      	str	r0, [r5, #88]	; 0x58
 801be94:	e9c0 4400 	strd	r4, r4, [r0]
 801be98:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801be9c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801bea0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801bea4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801bea8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801beac:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801beb0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801beb4:	6184      	str	r4, [r0, #24]
 801beb6:	7704      	strb	r4, [r0, #28]
 801beb8:	6244      	str	r4, [r0, #36]	; 0x24
 801beba:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801bebc:	4639      	mov	r1, r7
 801bebe:	4630      	mov	r0, r6
 801bec0:	2301      	movs	r3, #1
 801bec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bec6:	f000 b803 	b.w	801bed0 <__strtok_r>
 801beca:	bf00      	nop
 801becc:	200001b0 	.word	0x200001b0

0801bed0 <__strtok_r>:
 801bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bed2:	b918      	cbnz	r0, 801bedc <__strtok_r+0xc>
 801bed4:	6810      	ldr	r0, [r2, #0]
 801bed6:	b908      	cbnz	r0, 801bedc <__strtok_r+0xc>
 801bed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beda:	4620      	mov	r0, r4
 801bedc:	4604      	mov	r4, r0
 801bede:	460f      	mov	r7, r1
 801bee0:	f814 5b01 	ldrb.w	r5, [r4], #1
 801bee4:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bee8:	b91e      	cbnz	r6, 801bef2 <__strtok_r+0x22>
 801beea:	b96d      	cbnz	r5, 801bf08 <__strtok_r+0x38>
 801beec:	6015      	str	r5, [r2, #0]
 801beee:	4628      	mov	r0, r5
 801bef0:	e7f2      	b.n	801bed8 <__strtok_r+0x8>
 801bef2:	42b5      	cmp	r5, r6
 801bef4:	d1f6      	bne.n	801bee4 <__strtok_r+0x14>
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d1ef      	bne.n	801beda <__strtok_r+0xa>
 801befa:	6014      	str	r4, [r2, #0]
 801befc:	7003      	strb	r3, [r0, #0]
 801befe:	e7eb      	b.n	801bed8 <__strtok_r+0x8>
 801bf00:	462b      	mov	r3, r5
 801bf02:	e00d      	b.n	801bf20 <__strtok_r+0x50>
 801bf04:	b926      	cbnz	r6, 801bf10 <__strtok_r+0x40>
 801bf06:	461c      	mov	r4, r3
 801bf08:	4623      	mov	r3, r4
 801bf0a:	460f      	mov	r7, r1
 801bf0c:	f813 5b01 	ldrb.w	r5, [r3], #1
 801bf10:	f817 6b01 	ldrb.w	r6, [r7], #1
 801bf14:	42b5      	cmp	r5, r6
 801bf16:	d1f5      	bne.n	801bf04 <__strtok_r+0x34>
 801bf18:	2d00      	cmp	r5, #0
 801bf1a:	d0f1      	beq.n	801bf00 <__strtok_r+0x30>
 801bf1c:	2100      	movs	r1, #0
 801bf1e:	7021      	strb	r1, [r4, #0]
 801bf20:	6013      	str	r3, [r2, #0]
 801bf22:	e7d9      	b.n	801bed8 <__strtok_r+0x8>

0801bf24 <_strtol_l.isra.0>:
 801bf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf28:	4680      	mov	r8, r0
 801bf2a:	4689      	mov	r9, r1
 801bf2c:	4692      	mov	sl, r2
 801bf2e:	461e      	mov	r6, r3
 801bf30:	460f      	mov	r7, r1
 801bf32:	463d      	mov	r5, r7
 801bf34:	9808      	ldr	r0, [sp, #32]
 801bf36:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf3a:	f001 f903 	bl	801d144 <__locale_ctype_ptr_l>
 801bf3e:	4420      	add	r0, r4
 801bf40:	7843      	ldrb	r3, [r0, #1]
 801bf42:	f013 0308 	ands.w	r3, r3, #8
 801bf46:	d132      	bne.n	801bfae <_strtol_l.isra.0+0x8a>
 801bf48:	2c2d      	cmp	r4, #45	; 0x2d
 801bf4a:	d132      	bne.n	801bfb2 <_strtol_l.isra.0+0x8e>
 801bf4c:	787c      	ldrb	r4, [r7, #1]
 801bf4e:	1cbd      	adds	r5, r7, #2
 801bf50:	2201      	movs	r2, #1
 801bf52:	2e00      	cmp	r6, #0
 801bf54:	d05d      	beq.n	801c012 <_strtol_l.isra.0+0xee>
 801bf56:	2e10      	cmp	r6, #16
 801bf58:	d109      	bne.n	801bf6e <_strtol_l.isra.0+0x4a>
 801bf5a:	2c30      	cmp	r4, #48	; 0x30
 801bf5c:	d107      	bne.n	801bf6e <_strtol_l.isra.0+0x4a>
 801bf5e:	782b      	ldrb	r3, [r5, #0]
 801bf60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bf64:	2b58      	cmp	r3, #88	; 0x58
 801bf66:	d14f      	bne.n	801c008 <_strtol_l.isra.0+0xe4>
 801bf68:	786c      	ldrb	r4, [r5, #1]
 801bf6a:	2610      	movs	r6, #16
 801bf6c:	3502      	adds	r5, #2
 801bf6e:	2a00      	cmp	r2, #0
 801bf70:	bf14      	ite	ne
 801bf72:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801bf76:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801bf7a:	2700      	movs	r7, #0
 801bf7c:	fbb1 fcf6 	udiv	ip, r1, r6
 801bf80:	4638      	mov	r0, r7
 801bf82:	fb06 1e1c 	mls	lr, r6, ip, r1
 801bf86:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801bf8a:	2b09      	cmp	r3, #9
 801bf8c:	d817      	bhi.n	801bfbe <_strtol_l.isra.0+0x9a>
 801bf8e:	461c      	mov	r4, r3
 801bf90:	42a6      	cmp	r6, r4
 801bf92:	dd23      	ble.n	801bfdc <_strtol_l.isra.0+0xb8>
 801bf94:	1c7b      	adds	r3, r7, #1
 801bf96:	d007      	beq.n	801bfa8 <_strtol_l.isra.0+0x84>
 801bf98:	4584      	cmp	ip, r0
 801bf9a:	d31c      	bcc.n	801bfd6 <_strtol_l.isra.0+0xb2>
 801bf9c:	d101      	bne.n	801bfa2 <_strtol_l.isra.0+0x7e>
 801bf9e:	45a6      	cmp	lr, r4
 801bfa0:	db19      	blt.n	801bfd6 <_strtol_l.isra.0+0xb2>
 801bfa2:	fb00 4006 	mla	r0, r0, r6, r4
 801bfa6:	2701      	movs	r7, #1
 801bfa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bfac:	e7eb      	b.n	801bf86 <_strtol_l.isra.0+0x62>
 801bfae:	462f      	mov	r7, r5
 801bfb0:	e7bf      	b.n	801bf32 <_strtol_l.isra.0+0xe>
 801bfb2:	2c2b      	cmp	r4, #43	; 0x2b
 801bfb4:	bf04      	itt	eq
 801bfb6:	1cbd      	addeq	r5, r7, #2
 801bfb8:	787c      	ldrbeq	r4, [r7, #1]
 801bfba:	461a      	mov	r2, r3
 801bfbc:	e7c9      	b.n	801bf52 <_strtol_l.isra.0+0x2e>
 801bfbe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801bfc2:	2b19      	cmp	r3, #25
 801bfc4:	d801      	bhi.n	801bfca <_strtol_l.isra.0+0xa6>
 801bfc6:	3c37      	subs	r4, #55	; 0x37
 801bfc8:	e7e2      	b.n	801bf90 <_strtol_l.isra.0+0x6c>
 801bfca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801bfce:	2b19      	cmp	r3, #25
 801bfd0:	d804      	bhi.n	801bfdc <_strtol_l.isra.0+0xb8>
 801bfd2:	3c57      	subs	r4, #87	; 0x57
 801bfd4:	e7dc      	b.n	801bf90 <_strtol_l.isra.0+0x6c>
 801bfd6:	f04f 37ff 	mov.w	r7, #4294967295
 801bfda:	e7e5      	b.n	801bfa8 <_strtol_l.isra.0+0x84>
 801bfdc:	1c7b      	adds	r3, r7, #1
 801bfde:	d108      	bne.n	801bff2 <_strtol_l.isra.0+0xce>
 801bfe0:	2322      	movs	r3, #34	; 0x22
 801bfe2:	f8c8 3000 	str.w	r3, [r8]
 801bfe6:	4608      	mov	r0, r1
 801bfe8:	f1ba 0f00 	cmp.w	sl, #0
 801bfec:	d107      	bne.n	801bffe <_strtol_l.isra.0+0xda>
 801bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bff2:	b102      	cbz	r2, 801bff6 <_strtol_l.isra.0+0xd2>
 801bff4:	4240      	negs	r0, r0
 801bff6:	f1ba 0f00 	cmp.w	sl, #0
 801bffa:	d0f8      	beq.n	801bfee <_strtol_l.isra.0+0xca>
 801bffc:	b10f      	cbz	r7, 801c002 <_strtol_l.isra.0+0xde>
 801bffe:	f105 39ff 	add.w	r9, r5, #4294967295
 801c002:	f8ca 9000 	str.w	r9, [sl]
 801c006:	e7f2      	b.n	801bfee <_strtol_l.isra.0+0xca>
 801c008:	2430      	movs	r4, #48	; 0x30
 801c00a:	2e00      	cmp	r6, #0
 801c00c:	d1af      	bne.n	801bf6e <_strtol_l.isra.0+0x4a>
 801c00e:	2608      	movs	r6, #8
 801c010:	e7ad      	b.n	801bf6e <_strtol_l.isra.0+0x4a>
 801c012:	2c30      	cmp	r4, #48	; 0x30
 801c014:	d0a3      	beq.n	801bf5e <_strtol_l.isra.0+0x3a>
 801c016:	260a      	movs	r6, #10
 801c018:	e7a9      	b.n	801bf6e <_strtol_l.isra.0+0x4a>
	...

0801c01c <strtol>:
 801c01c:	4b08      	ldr	r3, [pc, #32]	; (801c040 <strtol+0x24>)
 801c01e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c020:	681c      	ldr	r4, [r3, #0]
 801c022:	4d08      	ldr	r5, [pc, #32]	; (801c044 <strtol+0x28>)
 801c024:	6a23      	ldr	r3, [r4, #32]
 801c026:	2b00      	cmp	r3, #0
 801c028:	bf08      	it	eq
 801c02a:	462b      	moveq	r3, r5
 801c02c:	9300      	str	r3, [sp, #0]
 801c02e:	4613      	mov	r3, r2
 801c030:	460a      	mov	r2, r1
 801c032:	4601      	mov	r1, r0
 801c034:	4620      	mov	r0, r4
 801c036:	f7ff ff75 	bl	801bf24 <_strtol_l.isra.0>
 801c03a:	b003      	add	sp, #12
 801c03c:	bd30      	pop	{r4, r5, pc}
 801c03e:	bf00      	nop
 801c040:	200001b0 	.word	0x200001b0
 801c044:	20000214 	.word	0x20000214

0801c048 <__swbuf_r>:
 801c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c04a:	460e      	mov	r6, r1
 801c04c:	4614      	mov	r4, r2
 801c04e:	4605      	mov	r5, r0
 801c050:	b118      	cbz	r0, 801c05a <__swbuf_r+0x12>
 801c052:	6983      	ldr	r3, [r0, #24]
 801c054:	b90b      	cbnz	r3, 801c05a <__swbuf_r+0x12>
 801c056:	f000 ffeb 	bl	801d030 <__sinit>
 801c05a:	4b21      	ldr	r3, [pc, #132]	; (801c0e0 <__swbuf_r+0x98>)
 801c05c:	429c      	cmp	r4, r3
 801c05e:	d12a      	bne.n	801c0b6 <__swbuf_r+0x6e>
 801c060:	686c      	ldr	r4, [r5, #4]
 801c062:	69a3      	ldr	r3, [r4, #24]
 801c064:	60a3      	str	r3, [r4, #8]
 801c066:	89a3      	ldrh	r3, [r4, #12]
 801c068:	071a      	lsls	r2, r3, #28
 801c06a:	d52e      	bpl.n	801c0ca <__swbuf_r+0x82>
 801c06c:	6923      	ldr	r3, [r4, #16]
 801c06e:	b363      	cbz	r3, 801c0ca <__swbuf_r+0x82>
 801c070:	6923      	ldr	r3, [r4, #16]
 801c072:	6820      	ldr	r0, [r4, #0]
 801c074:	1ac0      	subs	r0, r0, r3
 801c076:	6963      	ldr	r3, [r4, #20]
 801c078:	b2f6      	uxtb	r6, r6
 801c07a:	4283      	cmp	r3, r0
 801c07c:	4637      	mov	r7, r6
 801c07e:	dc04      	bgt.n	801c08a <__swbuf_r+0x42>
 801c080:	4621      	mov	r1, r4
 801c082:	4628      	mov	r0, r5
 801c084:	f000 ff6a 	bl	801cf5c <_fflush_r>
 801c088:	bb28      	cbnz	r0, 801c0d6 <__swbuf_r+0x8e>
 801c08a:	68a3      	ldr	r3, [r4, #8]
 801c08c:	3b01      	subs	r3, #1
 801c08e:	60a3      	str	r3, [r4, #8]
 801c090:	6823      	ldr	r3, [r4, #0]
 801c092:	1c5a      	adds	r2, r3, #1
 801c094:	6022      	str	r2, [r4, #0]
 801c096:	701e      	strb	r6, [r3, #0]
 801c098:	6963      	ldr	r3, [r4, #20]
 801c09a:	3001      	adds	r0, #1
 801c09c:	4283      	cmp	r3, r0
 801c09e:	d004      	beq.n	801c0aa <__swbuf_r+0x62>
 801c0a0:	89a3      	ldrh	r3, [r4, #12]
 801c0a2:	07db      	lsls	r3, r3, #31
 801c0a4:	d519      	bpl.n	801c0da <__swbuf_r+0x92>
 801c0a6:	2e0a      	cmp	r6, #10
 801c0a8:	d117      	bne.n	801c0da <__swbuf_r+0x92>
 801c0aa:	4621      	mov	r1, r4
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	f000 ff55 	bl	801cf5c <_fflush_r>
 801c0b2:	b190      	cbz	r0, 801c0da <__swbuf_r+0x92>
 801c0b4:	e00f      	b.n	801c0d6 <__swbuf_r+0x8e>
 801c0b6:	4b0b      	ldr	r3, [pc, #44]	; (801c0e4 <__swbuf_r+0x9c>)
 801c0b8:	429c      	cmp	r4, r3
 801c0ba:	d101      	bne.n	801c0c0 <__swbuf_r+0x78>
 801c0bc:	68ac      	ldr	r4, [r5, #8]
 801c0be:	e7d0      	b.n	801c062 <__swbuf_r+0x1a>
 801c0c0:	4b09      	ldr	r3, [pc, #36]	; (801c0e8 <__swbuf_r+0xa0>)
 801c0c2:	429c      	cmp	r4, r3
 801c0c4:	bf08      	it	eq
 801c0c6:	68ec      	ldreq	r4, [r5, #12]
 801c0c8:	e7cb      	b.n	801c062 <__swbuf_r+0x1a>
 801c0ca:	4621      	mov	r1, r4
 801c0cc:	4628      	mov	r0, r5
 801c0ce:	f000 f80d 	bl	801c0ec <__swsetup_r>
 801c0d2:	2800      	cmp	r0, #0
 801c0d4:	d0cc      	beq.n	801c070 <__swbuf_r+0x28>
 801c0d6:	f04f 37ff 	mov.w	r7, #4294967295
 801c0da:	4638      	mov	r0, r7
 801c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0de:	bf00      	nop
 801c0e0:	0801f9f4 	.word	0x0801f9f4
 801c0e4:	0801fa14 	.word	0x0801fa14
 801c0e8:	0801f9d4 	.word	0x0801f9d4

0801c0ec <__swsetup_r>:
 801c0ec:	4b32      	ldr	r3, [pc, #200]	; (801c1b8 <__swsetup_r+0xcc>)
 801c0ee:	b570      	push	{r4, r5, r6, lr}
 801c0f0:	681d      	ldr	r5, [r3, #0]
 801c0f2:	4606      	mov	r6, r0
 801c0f4:	460c      	mov	r4, r1
 801c0f6:	b125      	cbz	r5, 801c102 <__swsetup_r+0x16>
 801c0f8:	69ab      	ldr	r3, [r5, #24]
 801c0fa:	b913      	cbnz	r3, 801c102 <__swsetup_r+0x16>
 801c0fc:	4628      	mov	r0, r5
 801c0fe:	f000 ff97 	bl	801d030 <__sinit>
 801c102:	4b2e      	ldr	r3, [pc, #184]	; (801c1bc <__swsetup_r+0xd0>)
 801c104:	429c      	cmp	r4, r3
 801c106:	d10f      	bne.n	801c128 <__swsetup_r+0x3c>
 801c108:	686c      	ldr	r4, [r5, #4]
 801c10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c10e:	b29a      	uxth	r2, r3
 801c110:	0715      	lsls	r5, r2, #28
 801c112:	d42c      	bmi.n	801c16e <__swsetup_r+0x82>
 801c114:	06d0      	lsls	r0, r2, #27
 801c116:	d411      	bmi.n	801c13c <__swsetup_r+0x50>
 801c118:	2209      	movs	r2, #9
 801c11a:	6032      	str	r2, [r6, #0]
 801c11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c120:	81a3      	strh	r3, [r4, #12]
 801c122:	f04f 30ff 	mov.w	r0, #4294967295
 801c126:	e03e      	b.n	801c1a6 <__swsetup_r+0xba>
 801c128:	4b25      	ldr	r3, [pc, #148]	; (801c1c0 <__swsetup_r+0xd4>)
 801c12a:	429c      	cmp	r4, r3
 801c12c:	d101      	bne.n	801c132 <__swsetup_r+0x46>
 801c12e:	68ac      	ldr	r4, [r5, #8]
 801c130:	e7eb      	b.n	801c10a <__swsetup_r+0x1e>
 801c132:	4b24      	ldr	r3, [pc, #144]	; (801c1c4 <__swsetup_r+0xd8>)
 801c134:	429c      	cmp	r4, r3
 801c136:	bf08      	it	eq
 801c138:	68ec      	ldreq	r4, [r5, #12]
 801c13a:	e7e6      	b.n	801c10a <__swsetup_r+0x1e>
 801c13c:	0751      	lsls	r1, r2, #29
 801c13e:	d512      	bpl.n	801c166 <__swsetup_r+0x7a>
 801c140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c142:	b141      	cbz	r1, 801c156 <__swsetup_r+0x6a>
 801c144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c148:	4299      	cmp	r1, r3
 801c14a:	d002      	beq.n	801c152 <__swsetup_r+0x66>
 801c14c:	4630      	mov	r0, r6
 801c14e:	f7ff f8b3 	bl	801b2b8 <_free_r>
 801c152:	2300      	movs	r3, #0
 801c154:	6363      	str	r3, [r4, #52]	; 0x34
 801c156:	89a3      	ldrh	r3, [r4, #12]
 801c158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c15c:	81a3      	strh	r3, [r4, #12]
 801c15e:	2300      	movs	r3, #0
 801c160:	6063      	str	r3, [r4, #4]
 801c162:	6923      	ldr	r3, [r4, #16]
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	89a3      	ldrh	r3, [r4, #12]
 801c168:	f043 0308 	orr.w	r3, r3, #8
 801c16c:	81a3      	strh	r3, [r4, #12]
 801c16e:	6923      	ldr	r3, [r4, #16]
 801c170:	b94b      	cbnz	r3, 801c186 <__swsetup_r+0x9a>
 801c172:	89a3      	ldrh	r3, [r4, #12]
 801c174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c17c:	d003      	beq.n	801c186 <__swsetup_r+0x9a>
 801c17e:	4621      	mov	r1, r4
 801c180:	4630      	mov	r0, r6
 801c182:	f001 f815 	bl	801d1b0 <__smakebuf_r>
 801c186:	89a2      	ldrh	r2, [r4, #12]
 801c188:	f012 0301 	ands.w	r3, r2, #1
 801c18c:	d00c      	beq.n	801c1a8 <__swsetup_r+0xbc>
 801c18e:	2300      	movs	r3, #0
 801c190:	60a3      	str	r3, [r4, #8]
 801c192:	6963      	ldr	r3, [r4, #20]
 801c194:	425b      	negs	r3, r3
 801c196:	61a3      	str	r3, [r4, #24]
 801c198:	6923      	ldr	r3, [r4, #16]
 801c19a:	b953      	cbnz	r3, 801c1b2 <__swsetup_r+0xc6>
 801c19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c1a4:	d1ba      	bne.n	801c11c <__swsetup_r+0x30>
 801c1a6:	bd70      	pop	{r4, r5, r6, pc}
 801c1a8:	0792      	lsls	r2, r2, #30
 801c1aa:	bf58      	it	pl
 801c1ac:	6963      	ldrpl	r3, [r4, #20]
 801c1ae:	60a3      	str	r3, [r4, #8]
 801c1b0:	e7f2      	b.n	801c198 <__swsetup_r+0xac>
 801c1b2:	2000      	movs	r0, #0
 801c1b4:	e7f7      	b.n	801c1a6 <__swsetup_r+0xba>
 801c1b6:	bf00      	nop
 801c1b8:	200001b0 	.word	0x200001b0
 801c1bc:	0801f9f4 	.word	0x0801f9f4
 801c1c0:	0801fa14 	.word	0x0801fa14
 801c1c4:	0801f9d4 	.word	0x0801f9d4

0801c1c8 <quorem>:
 801c1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1cc:	6903      	ldr	r3, [r0, #16]
 801c1ce:	690c      	ldr	r4, [r1, #16]
 801c1d0:	42a3      	cmp	r3, r4
 801c1d2:	4680      	mov	r8, r0
 801c1d4:	f2c0 8082 	blt.w	801c2dc <quorem+0x114>
 801c1d8:	3c01      	subs	r4, #1
 801c1da:	f101 0714 	add.w	r7, r1, #20
 801c1de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c1e2:	f100 0614 	add.w	r6, r0, #20
 801c1e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c1ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c1ee:	eb06 030c 	add.w	r3, r6, ip
 801c1f2:	3501      	adds	r5, #1
 801c1f4:	eb07 090c 	add.w	r9, r7, ip
 801c1f8:	9301      	str	r3, [sp, #4]
 801c1fa:	fbb0 f5f5 	udiv	r5, r0, r5
 801c1fe:	b395      	cbz	r5, 801c266 <quorem+0x9e>
 801c200:	f04f 0a00 	mov.w	sl, #0
 801c204:	4638      	mov	r0, r7
 801c206:	46b6      	mov	lr, r6
 801c208:	46d3      	mov	fp, sl
 801c20a:	f850 2b04 	ldr.w	r2, [r0], #4
 801c20e:	b293      	uxth	r3, r2
 801c210:	fb05 a303 	mla	r3, r5, r3, sl
 801c214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c218:	b29b      	uxth	r3, r3
 801c21a:	ebab 0303 	sub.w	r3, fp, r3
 801c21e:	0c12      	lsrs	r2, r2, #16
 801c220:	f8de b000 	ldr.w	fp, [lr]
 801c224:	fb05 a202 	mla	r2, r5, r2, sl
 801c228:	fa13 f38b 	uxtah	r3, r3, fp
 801c22c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c230:	fa1f fb82 	uxth.w	fp, r2
 801c234:	f8de 2000 	ldr.w	r2, [lr]
 801c238:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c23c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c240:	b29b      	uxth	r3, r3
 801c242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c246:	4581      	cmp	r9, r0
 801c248:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c24c:	f84e 3b04 	str.w	r3, [lr], #4
 801c250:	d2db      	bcs.n	801c20a <quorem+0x42>
 801c252:	f856 300c 	ldr.w	r3, [r6, ip]
 801c256:	b933      	cbnz	r3, 801c266 <quorem+0x9e>
 801c258:	9b01      	ldr	r3, [sp, #4]
 801c25a:	3b04      	subs	r3, #4
 801c25c:	429e      	cmp	r6, r3
 801c25e:	461a      	mov	r2, r3
 801c260:	d330      	bcc.n	801c2c4 <quorem+0xfc>
 801c262:	f8c8 4010 	str.w	r4, [r8, #16]
 801c266:	4640      	mov	r0, r8
 801c268:	f001 fa0c 	bl	801d684 <__mcmp>
 801c26c:	2800      	cmp	r0, #0
 801c26e:	db25      	blt.n	801c2bc <quorem+0xf4>
 801c270:	3501      	adds	r5, #1
 801c272:	4630      	mov	r0, r6
 801c274:	f04f 0c00 	mov.w	ip, #0
 801c278:	f857 2b04 	ldr.w	r2, [r7], #4
 801c27c:	f8d0 e000 	ldr.w	lr, [r0]
 801c280:	b293      	uxth	r3, r2
 801c282:	ebac 0303 	sub.w	r3, ip, r3
 801c286:	0c12      	lsrs	r2, r2, #16
 801c288:	fa13 f38e 	uxtah	r3, r3, lr
 801c28c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c294:	b29b      	uxth	r3, r3
 801c296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c29a:	45b9      	cmp	r9, r7
 801c29c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c2a0:	f840 3b04 	str.w	r3, [r0], #4
 801c2a4:	d2e8      	bcs.n	801c278 <quorem+0xb0>
 801c2a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c2aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c2ae:	b92a      	cbnz	r2, 801c2bc <quorem+0xf4>
 801c2b0:	3b04      	subs	r3, #4
 801c2b2:	429e      	cmp	r6, r3
 801c2b4:	461a      	mov	r2, r3
 801c2b6:	d30b      	bcc.n	801c2d0 <quorem+0x108>
 801c2b8:	f8c8 4010 	str.w	r4, [r8, #16]
 801c2bc:	4628      	mov	r0, r5
 801c2be:	b003      	add	sp, #12
 801c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2c4:	6812      	ldr	r2, [r2, #0]
 801c2c6:	3b04      	subs	r3, #4
 801c2c8:	2a00      	cmp	r2, #0
 801c2ca:	d1ca      	bne.n	801c262 <quorem+0x9a>
 801c2cc:	3c01      	subs	r4, #1
 801c2ce:	e7c5      	b.n	801c25c <quorem+0x94>
 801c2d0:	6812      	ldr	r2, [r2, #0]
 801c2d2:	3b04      	subs	r3, #4
 801c2d4:	2a00      	cmp	r2, #0
 801c2d6:	d1ef      	bne.n	801c2b8 <quorem+0xf0>
 801c2d8:	3c01      	subs	r4, #1
 801c2da:	e7ea      	b.n	801c2b2 <quorem+0xea>
 801c2dc:	2000      	movs	r0, #0
 801c2de:	e7ee      	b.n	801c2be <quorem+0xf6>

0801c2e0 <_dtoa_r>:
 801c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e4:	ec57 6b10 	vmov	r6, r7, d0
 801c2e8:	b097      	sub	sp, #92	; 0x5c
 801c2ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c2ec:	9106      	str	r1, [sp, #24]
 801c2ee:	4604      	mov	r4, r0
 801c2f0:	920b      	str	r2, [sp, #44]	; 0x2c
 801c2f2:	9312      	str	r3, [sp, #72]	; 0x48
 801c2f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c2f8:	e9cd 6700 	strd	r6, r7, [sp]
 801c2fc:	b93d      	cbnz	r5, 801c30e <_dtoa_r+0x2e>
 801c2fe:	2010      	movs	r0, #16
 801c300:	f7fe ffbe 	bl	801b280 <malloc>
 801c304:	6260      	str	r0, [r4, #36]	; 0x24
 801c306:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c30a:	6005      	str	r5, [r0, #0]
 801c30c:	60c5      	str	r5, [r0, #12]
 801c30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c310:	6819      	ldr	r1, [r3, #0]
 801c312:	b151      	cbz	r1, 801c32a <_dtoa_r+0x4a>
 801c314:	685a      	ldr	r2, [r3, #4]
 801c316:	604a      	str	r2, [r1, #4]
 801c318:	2301      	movs	r3, #1
 801c31a:	4093      	lsls	r3, r2
 801c31c:	608b      	str	r3, [r1, #8]
 801c31e:	4620      	mov	r0, r4
 801c320:	f000 ffce 	bl	801d2c0 <_Bfree>
 801c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c326:	2200      	movs	r2, #0
 801c328:	601a      	str	r2, [r3, #0]
 801c32a:	1e3b      	subs	r3, r7, #0
 801c32c:	bfbb      	ittet	lt
 801c32e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c332:	9301      	strlt	r3, [sp, #4]
 801c334:	2300      	movge	r3, #0
 801c336:	2201      	movlt	r2, #1
 801c338:	bfac      	ite	ge
 801c33a:	f8c8 3000 	strge.w	r3, [r8]
 801c33e:	f8c8 2000 	strlt.w	r2, [r8]
 801c342:	4baf      	ldr	r3, [pc, #700]	; (801c600 <_dtoa_r+0x320>)
 801c344:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c348:	ea33 0308 	bics.w	r3, r3, r8
 801c34c:	d114      	bne.n	801c378 <_dtoa_r+0x98>
 801c34e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c350:	f242 730f 	movw	r3, #9999	; 0x270f
 801c354:	6013      	str	r3, [r2, #0]
 801c356:	9b00      	ldr	r3, [sp, #0]
 801c358:	b923      	cbnz	r3, 801c364 <_dtoa_r+0x84>
 801c35a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c35e:	2800      	cmp	r0, #0
 801c360:	f000 8542 	beq.w	801cde8 <_dtoa_r+0xb08>
 801c364:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c366:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801c614 <_dtoa_r+0x334>
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	f000 8544 	beq.w	801cdf8 <_dtoa_r+0xb18>
 801c370:	f10b 0303 	add.w	r3, fp, #3
 801c374:	f000 bd3e 	b.w	801cdf4 <_dtoa_r+0xb14>
 801c378:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c37c:	2200      	movs	r2, #0
 801c37e:	2300      	movs	r3, #0
 801c380:	4630      	mov	r0, r6
 801c382:	4639      	mov	r1, r7
 801c384:	f7e4 fbb0 	bl	8000ae8 <__aeabi_dcmpeq>
 801c388:	4681      	mov	r9, r0
 801c38a:	b168      	cbz	r0, 801c3a8 <_dtoa_r+0xc8>
 801c38c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c38e:	2301      	movs	r3, #1
 801c390:	6013      	str	r3, [r2, #0]
 801c392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c394:	2b00      	cmp	r3, #0
 801c396:	f000 8524 	beq.w	801cde2 <_dtoa_r+0xb02>
 801c39a:	4b9a      	ldr	r3, [pc, #616]	; (801c604 <_dtoa_r+0x324>)
 801c39c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c39e:	f103 3bff 	add.w	fp, r3, #4294967295
 801c3a2:	6013      	str	r3, [r2, #0]
 801c3a4:	f000 bd28 	b.w	801cdf8 <_dtoa_r+0xb18>
 801c3a8:	aa14      	add	r2, sp, #80	; 0x50
 801c3aa:	a915      	add	r1, sp, #84	; 0x54
 801c3ac:	ec47 6b10 	vmov	d0, r6, r7
 801c3b0:	4620      	mov	r0, r4
 801c3b2:	f001 f9de 	bl	801d772 <__d2b>
 801c3b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c3ba:	9004      	str	r0, [sp, #16]
 801c3bc:	2d00      	cmp	r5, #0
 801c3be:	d07c      	beq.n	801c4ba <_dtoa_r+0x1da>
 801c3c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c3c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801c3c8:	46b2      	mov	sl, r6
 801c3ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801c3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c3d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801c3d6:	2200      	movs	r2, #0
 801c3d8:	4b8b      	ldr	r3, [pc, #556]	; (801c608 <_dtoa_r+0x328>)
 801c3da:	4650      	mov	r0, sl
 801c3dc:	4659      	mov	r1, fp
 801c3de:	f7e3 ff63 	bl	80002a8 <__aeabi_dsub>
 801c3e2:	a381      	add	r3, pc, #516	; (adr r3, 801c5e8 <_dtoa_r+0x308>)
 801c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e8:	f7e4 f916 	bl	8000618 <__aeabi_dmul>
 801c3ec:	a380      	add	r3, pc, #512	; (adr r3, 801c5f0 <_dtoa_r+0x310>)
 801c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f2:	f7e3 ff5b 	bl	80002ac <__adddf3>
 801c3f6:	4606      	mov	r6, r0
 801c3f8:	4628      	mov	r0, r5
 801c3fa:	460f      	mov	r7, r1
 801c3fc:	f7e4 f8a2 	bl	8000544 <__aeabi_i2d>
 801c400:	a37d      	add	r3, pc, #500	; (adr r3, 801c5f8 <_dtoa_r+0x318>)
 801c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c406:	f7e4 f907 	bl	8000618 <__aeabi_dmul>
 801c40a:	4602      	mov	r2, r0
 801c40c:	460b      	mov	r3, r1
 801c40e:	4630      	mov	r0, r6
 801c410:	4639      	mov	r1, r7
 801c412:	f7e3 ff4b 	bl	80002ac <__adddf3>
 801c416:	4606      	mov	r6, r0
 801c418:	460f      	mov	r7, r1
 801c41a:	f7e4 fbad 	bl	8000b78 <__aeabi_d2iz>
 801c41e:	2200      	movs	r2, #0
 801c420:	4682      	mov	sl, r0
 801c422:	2300      	movs	r3, #0
 801c424:	4630      	mov	r0, r6
 801c426:	4639      	mov	r1, r7
 801c428:	f7e4 fb68 	bl	8000afc <__aeabi_dcmplt>
 801c42c:	b148      	cbz	r0, 801c442 <_dtoa_r+0x162>
 801c42e:	4650      	mov	r0, sl
 801c430:	f7e4 f888 	bl	8000544 <__aeabi_i2d>
 801c434:	4632      	mov	r2, r6
 801c436:	463b      	mov	r3, r7
 801c438:	f7e4 fb56 	bl	8000ae8 <__aeabi_dcmpeq>
 801c43c:	b908      	cbnz	r0, 801c442 <_dtoa_r+0x162>
 801c43e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c442:	f1ba 0f16 	cmp.w	sl, #22
 801c446:	d859      	bhi.n	801c4fc <_dtoa_r+0x21c>
 801c448:	4970      	ldr	r1, [pc, #448]	; (801c60c <_dtoa_r+0x32c>)
 801c44a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801c44e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c452:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c456:	f7e4 fb6f 	bl	8000b38 <__aeabi_dcmpgt>
 801c45a:	2800      	cmp	r0, #0
 801c45c:	d050      	beq.n	801c500 <_dtoa_r+0x220>
 801c45e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c462:	2300      	movs	r3, #0
 801c464:	930f      	str	r3, [sp, #60]	; 0x3c
 801c466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c468:	1b5d      	subs	r5, r3, r5
 801c46a:	f1b5 0801 	subs.w	r8, r5, #1
 801c46e:	bf49      	itett	mi
 801c470:	f1c5 0301 	rsbmi	r3, r5, #1
 801c474:	2300      	movpl	r3, #0
 801c476:	9305      	strmi	r3, [sp, #20]
 801c478:	f04f 0800 	movmi.w	r8, #0
 801c47c:	bf58      	it	pl
 801c47e:	9305      	strpl	r3, [sp, #20]
 801c480:	f1ba 0f00 	cmp.w	sl, #0
 801c484:	db3e      	blt.n	801c504 <_dtoa_r+0x224>
 801c486:	2300      	movs	r3, #0
 801c488:	44d0      	add	r8, sl
 801c48a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801c48e:	9307      	str	r3, [sp, #28]
 801c490:	9b06      	ldr	r3, [sp, #24]
 801c492:	2b09      	cmp	r3, #9
 801c494:	f200 8090 	bhi.w	801c5b8 <_dtoa_r+0x2d8>
 801c498:	2b05      	cmp	r3, #5
 801c49a:	bfc4      	itt	gt
 801c49c:	3b04      	subgt	r3, #4
 801c49e:	9306      	strgt	r3, [sp, #24]
 801c4a0:	9b06      	ldr	r3, [sp, #24]
 801c4a2:	f1a3 0302 	sub.w	r3, r3, #2
 801c4a6:	bfcc      	ite	gt
 801c4a8:	2500      	movgt	r5, #0
 801c4aa:	2501      	movle	r5, #1
 801c4ac:	2b03      	cmp	r3, #3
 801c4ae:	f200 808f 	bhi.w	801c5d0 <_dtoa_r+0x2f0>
 801c4b2:	e8df f003 	tbb	[pc, r3]
 801c4b6:	7f7d      	.short	0x7f7d
 801c4b8:	7131      	.short	0x7131
 801c4ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801c4be:	441d      	add	r5, r3
 801c4c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801c4c4:	2820      	cmp	r0, #32
 801c4c6:	dd13      	ble.n	801c4f0 <_dtoa_r+0x210>
 801c4c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801c4cc:	9b00      	ldr	r3, [sp, #0]
 801c4ce:	fa08 f800 	lsl.w	r8, r8, r0
 801c4d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801c4d6:	fa23 f000 	lsr.w	r0, r3, r0
 801c4da:	ea48 0000 	orr.w	r0, r8, r0
 801c4de:	f7e4 f821 	bl	8000524 <__aeabi_ui2d>
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	4682      	mov	sl, r0
 801c4e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801c4ea:	3d01      	subs	r5, #1
 801c4ec:	9313      	str	r3, [sp, #76]	; 0x4c
 801c4ee:	e772      	b.n	801c3d6 <_dtoa_r+0xf6>
 801c4f0:	9b00      	ldr	r3, [sp, #0]
 801c4f2:	f1c0 0020 	rsb	r0, r0, #32
 801c4f6:	fa03 f000 	lsl.w	r0, r3, r0
 801c4fa:	e7f0      	b.n	801c4de <_dtoa_r+0x1fe>
 801c4fc:	2301      	movs	r3, #1
 801c4fe:	e7b1      	b.n	801c464 <_dtoa_r+0x184>
 801c500:	900f      	str	r0, [sp, #60]	; 0x3c
 801c502:	e7b0      	b.n	801c466 <_dtoa_r+0x186>
 801c504:	9b05      	ldr	r3, [sp, #20]
 801c506:	eba3 030a 	sub.w	r3, r3, sl
 801c50a:	9305      	str	r3, [sp, #20]
 801c50c:	f1ca 0300 	rsb	r3, sl, #0
 801c510:	9307      	str	r3, [sp, #28]
 801c512:	2300      	movs	r3, #0
 801c514:	930e      	str	r3, [sp, #56]	; 0x38
 801c516:	e7bb      	b.n	801c490 <_dtoa_r+0x1b0>
 801c518:	2301      	movs	r3, #1
 801c51a:	930a      	str	r3, [sp, #40]	; 0x28
 801c51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c51e:	2b00      	cmp	r3, #0
 801c520:	dd59      	ble.n	801c5d6 <_dtoa_r+0x2f6>
 801c522:	9302      	str	r3, [sp, #8]
 801c524:	4699      	mov	r9, r3
 801c526:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c528:	2200      	movs	r2, #0
 801c52a:	6072      	str	r2, [r6, #4]
 801c52c:	2204      	movs	r2, #4
 801c52e:	f102 0014 	add.w	r0, r2, #20
 801c532:	4298      	cmp	r0, r3
 801c534:	6871      	ldr	r1, [r6, #4]
 801c536:	d953      	bls.n	801c5e0 <_dtoa_r+0x300>
 801c538:	4620      	mov	r0, r4
 801c53a:	f000 fe8d 	bl	801d258 <_Balloc>
 801c53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c540:	6030      	str	r0, [r6, #0]
 801c542:	f1b9 0f0e 	cmp.w	r9, #14
 801c546:	f8d3 b000 	ldr.w	fp, [r3]
 801c54a:	f200 80e6 	bhi.w	801c71a <_dtoa_r+0x43a>
 801c54e:	2d00      	cmp	r5, #0
 801c550:	f000 80e3 	beq.w	801c71a <_dtoa_r+0x43a>
 801c554:	ed9d 7b00 	vldr	d7, [sp]
 801c558:	f1ba 0f00 	cmp.w	sl, #0
 801c55c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801c560:	dd74      	ble.n	801c64c <_dtoa_r+0x36c>
 801c562:	4a2a      	ldr	r2, [pc, #168]	; (801c60c <_dtoa_r+0x32c>)
 801c564:	f00a 030f 	and.w	r3, sl, #15
 801c568:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c56c:	ed93 7b00 	vldr	d7, [r3]
 801c570:	ea4f 162a 	mov.w	r6, sl, asr #4
 801c574:	06f0      	lsls	r0, r6, #27
 801c576:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c57a:	d565      	bpl.n	801c648 <_dtoa_r+0x368>
 801c57c:	4b24      	ldr	r3, [pc, #144]	; (801c610 <_dtoa_r+0x330>)
 801c57e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c582:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c586:	f7e4 f971 	bl	800086c <__aeabi_ddiv>
 801c58a:	e9cd 0100 	strd	r0, r1, [sp]
 801c58e:	f006 060f 	and.w	r6, r6, #15
 801c592:	2503      	movs	r5, #3
 801c594:	4f1e      	ldr	r7, [pc, #120]	; (801c610 <_dtoa_r+0x330>)
 801c596:	e04c      	b.n	801c632 <_dtoa_r+0x352>
 801c598:	2301      	movs	r3, #1
 801c59a:	930a      	str	r3, [sp, #40]	; 0x28
 801c59c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c59e:	4453      	add	r3, sl
 801c5a0:	f103 0901 	add.w	r9, r3, #1
 801c5a4:	9302      	str	r3, [sp, #8]
 801c5a6:	464b      	mov	r3, r9
 801c5a8:	2b01      	cmp	r3, #1
 801c5aa:	bfb8      	it	lt
 801c5ac:	2301      	movlt	r3, #1
 801c5ae:	e7ba      	b.n	801c526 <_dtoa_r+0x246>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	e7b2      	b.n	801c51a <_dtoa_r+0x23a>
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	e7f0      	b.n	801c59a <_dtoa_r+0x2ba>
 801c5b8:	2501      	movs	r5, #1
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	9306      	str	r3, [sp, #24]
 801c5be:	950a      	str	r5, [sp, #40]	; 0x28
 801c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c4:	9302      	str	r3, [sp, #8]
 801c5c6:	4699      	mov	r9, r3
 801c5c8:	2200      	movs	r2, #0
 801c5ca:	2312      	movs	r3, #18
 801c5cc:	920b      	str	r2, [sp, #44]	; 0x2c
 801c5ce:	e7aa      	b.n	801c526 <_dtoa_r+0x246>
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	930a      	str	r3, [sp, #40]	; 0x28
 801c5d4:	e7f4      	b.n	801c5c0 <_dtoa_r+0x2e0>
 801c5d6:	2301      	movs	r3, #1
 801c5d8:	9302      	str	r3, [sp, #8]
 801c5da:	4699      	mov	r9, r3
 801c5dc:	461a      	mov	r2, r3
 801c5de:	e7f5      	b.n	801c5cc <_dtoa_r+0x2ec>
 801c5e0:	3101      	adds	r1, #1
 801c5e2:	6071      	str	r1, [r6, #4]
 801c5e4:	0052      	lsls	r2, r2, #1
 801c5e6:	e7a2      	b.n	801c52e <_dtoa_r+0x24e>
 801c5e8:	636f4361 	.word	0x636f4361
 801c5ec:	3fd287a7 	.word	0x3fd287a7
 801c5f0:	8b60c8b3 	.word	0x8b60c8b3
 801c5f4:	3fc68a28 	.word	0x3fc68a28
 801c5f8:	509f79fb 	.word	0x509f79fb
 801c5fc:	3fd34413 	.word	0x3fd34413
 801c600:	7ff00000 	.word	0x7ff00000
 801c604:	0801f9a1 	.word	0x0801f9a1
 801c608:	3ff80000 	.word	0x3ff80000
 801c60c:	0801fa68 	.word	0x0801fa68
 801c610:	0801fa40 	.word	0x0801fa40
 801c614:	0801f9cd 	.word	0x0801f9cd
 801c618:	07f1      	lsls	r1, r6, #31
 801c61a:	d508      	bpl.n	801c62e <_dtoa_r+0x34e>
 801c61c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c620:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c624:	f7e3 fff8 	bl	8000618 <__aeabi_dmul>
 801c628:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c62c:	3501      	adds	r5, #1
 801c62e:	1076      	asrs	r6, r6, #1
 801c630:	3708      	adds	r7, #8
 801c632:	2e00      	cmp	r6, #0
 801c634:	d1f0      	bne.n	801c618 <_dtoa_r+0x338>
 801c636:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c63a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c63e:	f7e4 f915 	bl	800086c <__aeabi_ddiv>
 801c642:	e9cd 0100 	strd	r0, r1, [sp]
 801c646:	e01a      	b.n	801c67e <_dtoa_r+0x39e>
 801c648:	2502      	movs	r5, #2
 801c64a:	e7a3      	b.n	801c594 <_dtoa_r+0x2b4>
 801c64c:	f000 80a0 	beq.w	801c790 <_dtoa_r+0x4b0>
 801c650:	f1ca 0600 	rsb	r6, sl, #0
 801c654:	4b9f      	ldr	r3, [pc, #636]	; (801c8d4 <_dtoa_r+0x5f4>)
 801c656:	4fa0      	ldr	r7, [pc, #640]	; (801c8d8 <_dtoa_r+0x5f8>)
 801c658:	f006 020f 	and.w	r2, r6, #15
 801c65c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c664:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c668:	f7e3 ffd6 	bl	8000618 <__aeabi_dmul>
 801c66c:	e9cd 0100 	strd	r0, r1, [sp]
 801c670:	1136      	asrs	r6, r6, #4
 801c672:	2300      	movs	r3, #0
 801c674:	2502      	movs	r5, #2
 801c676:	2e00      	cmp	r6, #0
 801c678:	d17f      	bne.n	801c77a <_dtoa_r+0x49a>
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d1e1      	bne.n	801c642 <_dtoa_r+0x362>
 801c67e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c680:	2b00      	cmp	r3, #0
 801c682:	f000 8087 	beq.w	801c794 <_dtoa_r+0x4b4>
 801c686:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c68a:	2200      	movs	r2, #0
 801c68c:	4b93      	ldr	r3, [pc, #588]	; (801c8dc <_dtoa_r+0x5fc>)
 801c68e:	4630      	mov	r0, r6
 801c690:	4639      	mov	r1, r7
 801c692:	f7e4 fa33 	bl	8000afc <__aeabi_dcmplt>
 801c696:	2800      	cmp	r0, #0
 801c698:	d07c      	beq.n	801c794 <_dtoa_r+0x4b4>
 801c69a:	f1b9 0f00 	cmp.w	r9, #0
 801c69e:	d079      	beq.n	801c794 <_dtoa_r+0x4b4>
 801c6a0:	9b02      	ldr	r3, [sp, #8]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	dd35      	ble.n	801c712 <_dtoa_r+0x432>
 801c6a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c6aa:	9308      	str	r3, [sp, #32]
 801c6ac:	4639      	mov	r1, r7
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	4b8b      	ldr	r3, [pc, #556]	; (801c8e0 <_dtoa_r+0x600>)
 801c6b2:	4630      	mov	r0, r6
 801c6b4:	f7e3 ffb0 	bl	8000618 <__aeabi_dmul>
 801c6b8:	e9cd 0100 	strd	r0, r1, [sp]
 801c6bc:	9f02      	ldr	r7, [sp, #8]
 801c6be:	3501      	adds	r5, #1
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	f7e3 ff3f 	bl	8000544 <__aeabi_i2d>
 801c6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c6ca:	f7e3 ffa5 	bl	8000618 <__aeabi_dmul>
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	4b84      	ldr	r3, [pc, #528]	; (801c8e4 <_dtoa_r+0x604>)
 801c6d2:	f7e3 fdeb 	bl	80002ac <__adddf3>
 801c6d6:	4605      	mov	r5, r0
 801c6d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801c6dc:	2f00      	cmp	r7, #0
 801c6de:	d15d      	bne.n	801c79c <_dtoa_r+0x4bc>
 801c6e0:	2200      	movs	r2, #0
 801c6e2:	4b81      	ldr	r3, [pc, #516]	; (801c8e8 <_dtoa_r+0x608>)
 801c6e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c6e8:	f7e3 fdde 	bl	80002a8 <__aeabi_dsub>
 801c6ec:	462a      	mov	r2, r5
 801c6ee:	4633      	mov	r3, r6
 801c6f0:	e9cd 0100 	strd	r0, r1, [sp]
 801c6f4:	f7e4 fa20 	bl	8000b38 <__aeabi_dcmpgt>
 801c6f8:	2800      	cmp	r0, #0
 801c6fa:	f040 8288 	bne.w	801cc0e <_dtoa_r+0x92e>
 801c6fe:	462a      	mov	r2, r5
 801c700:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c704:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c708:	f7e4 f9f8 	bl	8000afc <__aeabi_dcmplt>
 801c70c:	2800      	cmp	r0, #0
 801c70e:	f040 827c 	bne.w	801cc0a <_dtoa_r+0x92a>
 801c712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c716:	e9cd 2300 	strd	r2, r3, [sp]
 801c71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	f2c0 8150 	blt.w	801c9c2 <_dtoa_r+0x6e2>
 801c722:	f1ba 0f0e 	cmp.w	sl, #14
 801c726:	f300 814c 	bgt.w	801c9c2 <_dtoa_r+0x6e2>
 801c72a:	4b6a      	ldr	r3, [pc, #424]	; (801c8d4 <_dtoa_r+0x5f4>)
 801c72c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c730:	ed93 7b00 	vldr	d7, [r3]
 801c734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c736:	2b00      	cmp	r3, #0
 801c738:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c73c:	f280 80d8 	bge.w	801c8f0 <_dtoa_r+0x610>
 801c740:	f1b9 0f00 	cmp.w	r9, #0
 801c744:	f300 80d4 	bgt.w	801c8f0 <_dtoa_r+0x610>
 801c748:	f040 825e 	bne.w	801cc08 <_dtoa_r+0x928>
 801c74c:	2200      	movs	r2, #0
 801c74e:	4b66      	ldr	r3, [pc, #408]	; (801c8e8 <_dtoa_r+0x608>)
 801c750:	ec51 0b17 	vmov	r0, r1, d7
 801c754:	f7e3 ff60 	bl	8000618 <__aeabi_dmul>
 801c758:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c75c:	f7e4 f9e2 	bl	8000b24 <__aeabi_dcmpge>
 801c760:	464f      	mov	r7, r9
 801c762:	464e      	mov	r6, r9
 801c764:	2800      	cmp	r0, #0
 801c766:	f040 8234 	bne.w	801cbd2 <_dtoa_r+0x8f2>
 801c76a:	2331      	movs	r3, #49	; 0x31
 801c76c:	f10b 0501 	add.w	r5, fp, #1
 801c770:	f88b 3000 	strb.w	r3, [fp]
 801c774:	f10a 0a01 	add.w	sl, sl, #1
 801c778:	e22f      	b.n	801cbda <_dtoa_r+0x8fa>
 801c77a:	07f2      	lsls	r2, r6, #31
 801c77c:	d505      	bpl.n	801c78a <_dtoa_r+0x4aa>
 801c77e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c782:	f7e3 ff49 	bl	8000618 <__aeabi_dmul>
 801c786:	3501      	adds	r5, #1
 801c788:	2301      	movs	r3, #1
 801c78a:	1076      	asrs	r6, r6, #1
 801c78c:	3708      	adds	r7, #8
 801c78e:	e772      	b.n	801c676 <_dtoa_r+0x396>
 801c790:	2502      	movs	r5, #2
 801c792:	e774      	b.n	801c67e <_dtoa_r+0x39e>
 801c794:	f8cd a020 	str.w	sl, [sp, #32]
 801c798:	464f      	mov	r7, r9
 801c79a:	e791      	b.n	801c6c0 <_dtoa_r+0x3e0>
 801c79c:	4b4d      	ldr	r3, [pc, #308]	; (801c8d4 <_dtoa_r+0x5f4>)
 801c79e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c7a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801c7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d047      	beq.n	801c83c <_dtoa_r+0x55c>
 801c7ac:	4602      	mov	r2, r0
 801c7ae:	460b      	mov	r3, r1
 801c7b0:	2000      	movs	r0, #0
 801c7b2:	494e      	ldr	r1, [pc, #312]	; (801c8ec <_dtoa_r+0x60c>)
 801c7b4:	f7e4 f85a 	bl	800086c <__aeabi_ddiv>
 801c7b8:	462a      	mov	r2, r5
 801c7ba:	4633      	mov	r3, r6
 801c7bc:	f7e3 fd74 	bl	80002a8 <__aeabi_dsub>
 801c7c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c7c4:	465d      	mov	r5, fp
 801c7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ca:	f7e4 f9d5 	bl	8000b78 <__aeabi_d2iz>
 801c7ce:	4606      	mov	r6, r0
 801c7d0:	f7e3 feb8 	bl	8000544 <__aeabi_i2d>
 801c7d4:	4602      	mov	r2, r0
 801c7d6:	460b      	mov	r3, r1
 801c7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7dc:	f7e3 fd64 	bl	80002a8 <__aeabi_dsub>
 801c7e0:	3630      	adds	r6, #48	; 0x30
 801c7e2:	f805 6b01 	strb.w	r6, [r5], #1
 801c7e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c7ea:	e9cd 0100 	strd	r0, r1, [sp]
 801c7ee:	f7e4 f985 	bl	8000afc <__aeabi_dcmplt>
 801c7f2:	2800      	cmp	r0, #0
 801c7f4:	d163      	bne.n	801c8be <_dtoa_r+0x5de>
 801c7f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c7fa:	2000      	movs	r0, #0
 801c7fc:	4937      	ldr	r1, [pc, #220]	; (801c8dc <_dtoa_r+0x5fc>)
 801c7fe:	f7e3 fd53 	bl	80002a8 <__aeabi_dsub>
 801c802:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c806:	f7e4 f979 	bl	8000afc <__aeabi_dcmplt>
 801c80a:	2800      	cmp	r0, #0
 801c80c:	f040 80b7 	bne.w	801c97e <_dtoa_r+0x69e>
 801c810:	eba5 030b 	sub.w	r3, r5, fp
 801c814:	429f      	cmp	r7, r3
 801c816:	f77f af7c 	ble.w	801c712 <_dtoa_r+0x432>
 801c81a:	2200      	movs	r2, #0
 801c81c:	4b30      	ldr	r3, [pc, #192]	; (801c8e0 <_dtoa_r+0x600>)
 801c81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c822:	f7e3 fef9 	bl	8000618 <__aeabi_dmul>
 801c826:	2200      	movs	r2, #0
 801c828:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c82c:	4b2c      	ldr	r3, [pc, #176]	; (801c8e0 <_dtoa_r+0x600>)
 801c82e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c832:	f7e3 fef1 	bl	8000618 <__aeabi_dmul>
 801c836:	e9cd 0100 	strd	r0, r1, [sp]
 801c83a:	e7c4      	b.n	801c7c6 <_dtoa_r+0x4e6>
 801c83c:	462a      	mov	r2, r5
 801c83e:	4633      	mov	r3, r6
 801c840:	f7e3 feea 	bl	8000618 <__aeabi_dmul>
 801c844:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c848:	eb0b 0507 	add.w	r5, fp, r7
 801c84c:	465e      	mov	r6, fp
 801c84e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c852:	f7e4 f991 	bl	8000b78 <__aeabi_d2iz>
 801c856:	4607      	mov	r7, r0
 801c858:	f7e3 fe74 	bl	8000544 <__aeabi_i2d>
 801c85c:	3730      	adds	r7, #48	; 0x30
 801c85e:	4602      	mov	r2, r0
 801c860:	460b      	mov	r3, r1
 801c862:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c866:	f7e3 fd1f 	bl	80002a8 <__aeabi_dsub>
 801c86a:	f806 7b01 	strb.w	r7, [r6], #1
 801c86e:	42ae      	cmp	r6, r5
 801c870:	e9cd 0100 	strd	r0, r1, [sp]
 801c874:	f04f 0200 	mov.w	r2, #0
 801c878:	d126      	bne.n	801c8c8 <_dtoa_r+0x5e8>
 801c87a:	4b1c      	ldr	r3, [pc, #112]	; (801c8ec <_dtoa_r+0x60c>)
 801c87c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c880:	f7e3 fd14 	bl	80002ac <__adddf3>
 801c884:	4602      	mov	r2, r0
 801c886:	460b      	mov	r3, r1
 801c888:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c88c:	f7e4 f954 	bl	8000b38 <__aeabi_dcmpgt>
 801c890:	2800      	cmp	r0, #0
 801c892:	d174      	bne.n	801c97e <_dtoa_r+0x69e>
 801c894:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c898:	2000      	movs	r0, #0
 801c89a:	4914      	ldr	r1, [pc, #80]	; (801c8ec <_dtoa_r+0x60c>)
 801c89c:	f7e3 fd04 	bl	80002a8 <__aeabi_dsub>
 801c8a0:	4602      	mov	r2, r0
 801c8a2:	460b      	mov	r3, r1
 801c8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c8a8:	f7e4 f928 	bl	8000afc <__aeabi_dcmplt>
 801c8ac:	2800      	cmp	r0, #0
 801c8ae:	f43f af30 	beq.w	801c712 <_dtoa_r+0x432>
 801c8b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c8b6:	2b30      	cmp	r3, #48	; 0x30
 801c8b8:	f105 32ff 	add.w	r2, r5, #4294967295
 801c8bc:	d002      	beq.n	801c8c4 <_dtoa_r+0x5e4>
 801c8be:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c8c2:	e04a      	b.n	801c95a <_dtoa_r+0x67a>
 801c8c4:	4615      	mov	r5, r2
 801c8c6:	e7f4      	b.n	801c8b2 <_dtoa_r+0x5d2>
 801c8c8:	4b05      	ldr	r3, [pc, #20]	; (801c8e0 <_dtoa_r+0x600>)
 801c8ca:	f7e3 fea5 	bl	8000618 <__aeabi_dmul>
 801c8ce:	e9cd 0100 	strd	r0, r1, [sp]
 801c8d2:	e7bc      	b.n	801c84e <_dtoa_r+0x56e>
 801c8d4:	0801fa68 	.word	0x0801fa68
 801c8d8:	0801fa40 	.word	0x0801fa40
 801c8dc:	3ff00000 	.word	0x3ff00000
 801c8e0:	40240000 	.word	0x40240000
 801c8e4:	401c0000 	.word	0x401c0000
 801c8e8:	40140000 	.word	0x40140000
 801c8ec:	3fe00000 	.word	0x3fe00000
 801c8f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c8f4:	465d      	mov	r5, fp
 801c8f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8fa:	4630      	mov	r0, r6
 801c8fc:	4639      	mov	r1, r7
 801c8fe:	f7e3 ffb5 	bl	800086c <__aeabi_ddiv>
 801c902:	f7e4 f939 	bl	8000b78 <__aeabi_d2iz>
 801c906:	4680      	mov	r8, r0
 801c908:	f7e3 fe1c 	bl	8000544 <__aeabi_i2d>
 801c90c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c910:	f7e3 fe82 	bl	8000618 <__aeabi_dmul>
 801c914:	4602      	mov	r2, r0
 801c916:	460b      	mov	r3, r1
 801c918:	4630      	mov	r0, r6
 801c91a:	4639      	mov	r1, r7
 801c91c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801c920:	f7e3 fcc2 	bl	80002a8 <__aeabi_dsub>
 801c924:	f805 6b01 	strb.w	r6, [r5], #1
 801c928:	eba5 060b 	sub.w	r6, r5, fp
 801c92c:	45b1      	cmp	r9, r6
 801c92e:	4602      	mov	r2, r0
 801c930:	460b      	mov	r3, r1
 801c932:	d139      	bne.n	801c9a8 <_dtoa_r+0x6c8>
 801c934:	f7e3 fcba 	bl	80002ac <__adddf3>
 801c938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c93c:	4606      	mov	r6, r0
 801c93e:	460f      	mov	r7, r1
 801c940:	f7e4 f8fa 	bl	8000b38 <__aeabi_dcmpgt>
 801c944:	b9c8      	cbnz	r0, 801c97a <_dtoa_r+0x69a>
 801c946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c94a:	4630      	mov	r0, r6
 801c94c:	4639      	mov	r1, r7
 801c94e:	f7e4 f8cb 	bl	8000ae8 <__aeabi_dcmpeq>
 801c952:	b110      	cbz	r0, 801c95a <_dtoa_r+0x67a>
 801c954:	f018 0f01 	tst.w	r8, #1
 801c958:	d10f      	bne.n	801c97a <_dtoa_r+0x69a>
 801c95a:	9904      	ldr	r1, [sp, #16]
 801c95c:	4620      	mov	r0, r4
 801c95e:	f000 fcaf 	bl	801d2c0 <_Bfree>
 801c962:	2300      	movs	r3, #0
 801c964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c966:	702b      	strb	r3, [r5, #0]
 801c968:	f10a 0301 	add.w	r3, sl, #1
 801c96c:	6013      	str	r3, [r2, #0]
 801c96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c970:	2b00      	cmp	r3, #0
 801c972:	f000 8241 	beq.w	801cdf8 <_dtoa_r+0xb18>
 801c976:	601d      	str	r5, [r3, #0]
 801c978:	e23e      	b.n	801cdf8 <_dtoa_r+0xb18>
 801c97a:	f8cd a020 	str.w	sl, [sp, #32]
 801c97e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c982:	2a39      	cmp	r2, #57	; 0x39
 801c984:	f105 33ff 	add.w	r3, r5, #4294967295
 801c988:	d108      	bne.n	801c99c <_dtoa_r+0x6bc>
 801c98a:	459b      	cmp	fp, r3
 801c98c:	d10a      	bne.n	801c9a4 <_dtoa_r+0x6c4>
 801c98e:	9b08      	ldr	r3, [sp, #32]
 801c990:	3301      	adds	r3, #1
 801c992:	9308      	str	r3, [sp, #32]
 801c994:	2330      	movs	r3, #48	; 0x30
 801c996:	f88b 3000 	strb.w	r3, [fp]
 801c99a:	465b      	mov	r3, fp
 801c99c:	781a      	ldrb	r2, [r3, #0]
 801c99e:	3201      	adds	r2, #1
 801c9a0:	701a      	strb	r2, [r3, #0]
 801c9a2:	e78c      	b.n	801c8be <_dtoa_r+0x5de>
 801c9a4:	461d      	mov	r5, r3
 801c9a6:	e7ea      	b.n	801c97e <_dtoa_r+0x69e>
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	4b9b      	ldr	r3, [pc, #620]	; (801cc18 <_dtoa_r+0x938>)
 801c9ac:	f7e3 fe34 	bl	8000618 <__aeabi_dmul>
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	4606      	mov	r6, r0
 801c9b6:	460f      	mov	r7, r1
 801c9b8:	f7e4 f896 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	d09a      	beq.n	801c8f6 <_dtoa_r+0x616>
 801c9c0:	e7cb      	b.n	801c95a <_dtoa_r+0x67a>
 801c9c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9c4:	2a00      	cmp	r2, #0
 801c9c6:	f000 808b 	beq.w	801cae0 <_dtoa_r+0x800>
 801c9ca:	9a06      	ldr	r2, [sp, #24]
 801c9cc:	2a01      	cmp	r2, #1
 801c9ce:	dc6e      	bgt.n	801caae <_dtoa_r+0x7ce>
 801c9d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9d2:	2a00      	cmp	r2, #0
 801c9d4:	d067      	beq.n	801caa6 <_dtoa_r+0x7c6>
 801c9d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c9da:	9f07      	ldr	r7, [sp, #28]
 801c9dc:	9d05      	ldr	r5, [sp, #20]
 801c9de:	9a05      	ldr	r2, [sp, #20]
 801c9e0:	2101      	movs	r1, #1
 801c9e2:	441a      	add	r2, r3
 801c9e4:	4620      	mov	r0, r4
 801c9e6:	9205      	str	r2, [sp, #20]
 801c9e8:	4498      	add	r8, r3
 801c9ea:	f000 fd09 	bl	801d400 <__i2b>
 801c9ee:	4606      	mov	r6, r0
 801c9f0:	2d00      	cmp	r5, #0
 801c9f2:	dd0c      	ble.n	801ca0e <_dtoa_r+0x72e>
 801c9f4:	f1b8 0f00 	cmp.w	r8, #0
 801c9f8:	dd09      	ble.n	801ca0e <_dtoa_r+0x72e>
 801c9fa:	4545      	cmp	r5, r8
 801c9fc:	9a05      	ldr	r2, [sp, #20]
 801c9fe:	462b      	mov	r3, r5
 801ca00:	bfa8      	it	ge
 801ca02:	4643      	movge	r3, r8
 801ca04:	1ad2      	subs	r2, r2, r3
 801ca06:	9205      	str	r2, [sp, #20]
 801ca08:	1aed      	subs	r5, r5, r3
 801ca0a:	eba8 0803 	sub.w	r8, r8, r3
 801ca0e:	9b07      	ldr	r3, [sp, #28]
 801ca10:	b1eb      	cbz	r3, 801ca4e <_dtoa_r+0x76e>
 801ca12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d067      	beq.n	801cae8 <_dtoa_r+0x808>
 801ca18:	b18f      	cbz	r7, 801ca3e <_dtoa_r+0x75e>
 801ca1a:	4631      	mov	r1, r6
 801ca1c:	463a      	mov	r2, r7
 801ca1e:	4620      	mov	r0, r4
 801ca20:	f000 fd8e 	bl	801d540 <__pow5mult>
 801ca24:	9a04      	ldr	r2, [sp, #16]
 801ca26:	4601      	mov	r1, r0
 801ca28:	4606      	mov	r6, r0
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f000 fcf1 	bl	801d412 <__multiply>
 801ca30:	9904      	ldr	r1, [sp, #16]
 801ca32:	9008      	str	r0, [sp, #32]
 801ca34:	4620      	mov	r0, r4
 801ca36:	f000 fc43 	bl	801d2c0 <_Bfree>
 801ca3a:	9b08      	ldr	r3, [sp, #32]
 801ca3c:	9304      	str	r3, [sp, #16]
 801ca3e:	9b07      	ldr	r3, [sp, #28]
 801ca40:	1bda      	subs	r2, r3, r7
 801ca42:	d004      	beq.n	801ca4e <_dtoa_r+0x76e>
 801ca44:	9904      	ldr	r1, [sp, #16]
 801ca46:	4620      	mov	r0, r4
 801ca48:	f000 fd7a 	bl	801d540 <__pow5mult>
 801ca4c:	9004      	str	r0, [sp, #16]
 801ca4e:	2101      	movs	r1, #1
 801ca50:	4620      	mov	r0, r4
 801ca52:	f000 fcd5 	bl	801d400 <__i2b>
 801ca56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca58:	4607      	mov	r7, r0
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	f000 81d0 	beq.w	801ce00 <_dtoa_r+0xb20>
 801ca60:	461a      	mov	r2, r3
 801ca62:	4601      	mov	r1, r0
 801ca64:	4620      	mov	r0, r4
 801ca66:	f000 fd6b 	bl	801d540 <__pow5mult>
 801ca6a:	9b06      	ldr	r3, [sp, #24]
 801ca6c:	2b01      	cmp	r3, #1
 801ca6e:	4607      	mov	r7, r0
 801ca70:	dc40      	bgt.n	801caf4 <_dtoa_r+0x814>
 801ca72:	9b00      	ldr	r3, [sp, #0]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d139      	bne.n	801caec <_dtoa_r+0x80c>
 801ca78:	9b01      	ldr	r3, [sp, #4]
 801ca7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d136      	bne.n	801caf0 <_dtoa_r+0x810>
 801ca82:	9b01      	ldr	r3, [sp, #4]
 801ca84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ca88:	0d1b      	lsrs	r3, r3, #20
 801ca8a:	051b      	lsls	r3, r3, #20
 801ca8c:	b12b      	cbz	r3, 801ca9a <_dtoa_r+0x7ba>
 801ca8e:	9b05      	ldr	r3, [sp, #20]
 801ca90:	3301      	adds	r3, #1
 801ca92:	9305      	str	r3, [sp, #20]
 801ca94:	f108 0801 	add.w	r8, r8, #1
 801ca98:	2301      	movs	r3, #1
 801ca9a:	9307      	str	r3, [sp, #28]
 801ca9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d12a      	bne.n	801caf8 <_dtoa_r+0x818>
 801caa2:	2001      	movs	r0, #1
 801caa4:	e030      	b.n	801cb08 <_dtoa_r+0x828>
 801caa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801caa8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801caac:	e795      	b.n	801c9da <_dtoa_r+0x6fa>
 801caae:	9b07      	ldr	r3, [sp, #28]
 801cab0:	f109 37ff 	add.w	r7, r9, #4294967295
 801cab4:	42bb      	cmp	r3, r7
 801cab6:	bfbf      	itttt	lt
 801cab8:	9b07      	ldrlt	r3, [sp, #28]
 801caba:	9707      	strlt	r7, [sp, #28]
 801cabc:	1afa      	sublt	r2, r7, r3
 801cabe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801cac0:	bfbb      	ittet	lt
 801cac2:	189b      	addlt	r3, r3, r2
 801cac4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cac6:	1bdf      	subge	r7, r3, r7
 801cac8:	2700      	movlt	r7, #0
 801caca:	f1b9 0f00 	cmp.w	r9, #0
 801cace:	bfb5      	itete	lt
 801cad0:	9b05      	ldrlt	r3, [sp, #20]
 801cad2:	9d05      	ldrge	r5, [sp, #20]
 801cad4:	eba3 0509 	sublt.w	r5, r3, r9
 801cad8:	464b      	movge	r3, r9
 801cada:	bfb8      	it	lt
 801cadc:	2300      	movlt	r3, #0
 801cade:	e77e      	b.n	801c9de <_dtoa_r+0x6fe>
 801cae0:	9f07      	ldr	r7, [sp, #28]
 801cae2:	9d05      	ldr	r5, [sp, #20]
 801cae4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801cae6:	e783      	b.n	801c9f0 <_dtoa_r+0x710>
 801cae8:	9a07      	ldr	r2, [sp, #28]
 801caea:	e7ab      	b.n	801ca44 <_dtoa_r+0x764>
 801caec:	2300      	movs	r3, #0
 801caee:	e7d4      	b.n	801ca9a <_dtoa_r+0x7ba>
 801caf0:	9b00      	ldr	r3, [sp, #0]
 801caf2:	e7d2      	b.n	801ca9a <_dtoa_r+0x7ba>
 801caf4:	2300      	movs	r3, #0
 801caf6:	9307      	str	r3, [sp, #28]
 801caf8:	693b      	ldr	r3, [r7, #16]
 801cafa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801cafe:	6918      	ldr	r0, [r3, #16]
 801cb00:	f000 fc30 	bl	801d364 <__hi0bits>
 801cb04:	f1c0 0020 	rsb	r0, r0, #32
 801cb08:	4440      	add	r0, r8
 801cb0a:	f010 001f 	ands.w	r0, r0, #31
 801cb0e:	d047      	beq.n	801cba0 <_dtoa_r+0x8c0>
 801cb10:	f1c0 0320 	rsb	r3, r0, #32
 801cb14:	2b04      	cmp	r3, #4
 801cb16:	dd3b      	ble.n	801cb90 <_dtoa_r+0x8b0>
 801cb18:	9b05      	ldr	r3, [sp, #20]
 801cb1a:	f1c0 001c 	rsb	r0, r0, #28
 801cb1e:	4403      	add	r3, r0
 801cb20:	9305      	str	r3, [sp, #20]
 801cb22:	4405      	add	r5, r0
 801cb24:	4480      	add	r8, r0
 801cb26:	9b05      	ldr	r3, [sp, #20]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	dd05      	ble.n	801cb38 <_dtoa_r+0x858>
 801cb2c:	461a      	mov	r2, r3
 801cb2e:	9904      	ldr	r1, [sp, #16]
 801cb30:	4620      	mov	r0, r4
 801cb32:	f000 fd53 	bl	801d5dc <__lshift>
 801cb36:	9004      	str	r0, [sp, #16]
 801cb38:	f1b8 0f00 	cmp.w	r8, #0
 801cb3c:	dd05      	ble.n	801cb4a <_dtoa_r+0x86a>
 801cb3e:	4639      	mov	r1, r7
 801cb40:	4642      	mov	r2, r8
 801cb42:	4620      	mov	r0, r4
 801cb44:	f000 fd4a 	bl	801d5dc <__lshift>
 801cb48:	4607      	mov	r7, r0
 801cb4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cb4c:	b353      	cbz	r3, 801cba4 <_dtoa_r+0x8c4>
 801cb4e:	4639      	mov	r1, r7
 801cb50:	9804      	ldr	r0, [sp, #16]
 801cb52:	f000 fd97 	bl	801d684 <__mcmp>
 801cb56:	2800      	cmp	r0, #0
 801cb58:	da24      	bge.n	801cba4 <_dtoa_r+0x8c4>
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	220a      	movs	r2, #10
 801cb5e:	9904      	ldr	r1, [sp, #16]
 801cb60:	4620      	mov	r0, r4
 801cb62:	f000 fbc4 	bl	801d2ee <__multadd>
 801cb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb68:	9004      	str	r0, [sp, #16]
 801cb6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	f000 814d 	beq.w	801ce0e <_dtoa_r+0xb2e>
 801cb74:	2300      	movs	r3, #0
 801cb76:	4631      	mov	r1, r6
 801cb78:	220a      	movs	r2, #10
 801cb7a:	4620      	mov	r0, r4
 801cb7c:	f000 fbb7 	bl	801d2ee <__multadd>
 801cb80:	9b02      	ldr	r3, [sp, #8]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	4606      	mov	r6, r0
 801cb86:	dc4f      	bgt.n	801cc28 <_dtoa_r+0x948>
 801cb88:	9b06      	ldr	r3, [sp, #24]
 801cb8a:	2b02      	cmp	r3, #2
 801cb8c:	dd4c      	ble.n	801cc28 <_dtoa_r+0x948>
 801cb8e:	e011      	b.n	801cbb4 <_dtoa_r+0x8d4>
 801cb90:	d0c9      	beq.n	801cb26 <_dtoa_r+0x846>
 801cb92:	9a05      	ldr	r2, [sp, #20]
 801cb94:	331c      	adds	r3, #28
 801cb96:	441a      	add	r2, r3
 801cb98:	9205      	str	r2, [sp, #20]
 801cb9a:	441d      	add	r5, r3
 801cb9c:	4498      	add	r8, r3
 801cb9e:	e7c2      	b.n	801cb26 <_dtoa_r+0x846>
 801cba0:	4603      	mov	r3, r0
 801cba2:	e7f6      	b.n	801cb92 <_dtoa_r+0x8b2>
 801cba4:	f1b9 0f00 	cmp.w	r9, #0
 801cba8:	dc38      	bgt.n	801cc1c <_dtoa_r+0x93c>
 801cbaa:	9b06      	ldr	r3, [sp, #24]
 801cbac:	2b02      	cmp	r3, #2
 801cbae:	dd35      	ble.n	801cc1c <_dtoa_r+0x93c>
 801cbb0:	f8cd 9008 	str.w	r9, [sp, #8]
 801cbb4:	9b02      	ldr	r3, [sp, #8]
 801cbb6:	b963      	cbnz	r3, 801cbd2 <_dtoa_r+0x8f2>
 801cbb8:	4639      	mov	r1, r7
 801cbba:	2205      	movs	r2, #5
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	f000 fb96 	bl	801d2ee <__multadd>
 801cbc2:	4601      	mov	r1, r0
 801cbc4:	4607      	mov	r7, r0
 801cbc6:	9804      	ldr	r0, [sp, #16]
 801cbc8:	f000 fd5c 	bl	801d684 <__mcmp>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	f73f adcc 	bgt.w	801c76a <_dtoa_r+0x48a>
 801cbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbd4:	465d      	mov	r5, fp
 801cbd6:	ea6f 0a03 	mvn.w	sl, r3
 801cbda:	f04f 0900 	mov.w	r9, #0
 801cbde:	4639      	mov	r1, r7
 801cbe0:	4620      	mov	r0, r4
 801cbe2:	f000 fb6d 	bl	801d2c0 <_Bfree>
 801cbe6:	2e00      	cmp	r6, #0
 801cbe8:	f43f aeb7 	beq.w	801c95a <_dtoa_r+0x67a>
 801cbec:	f1b9 0f00 	cmp.w	r9, #0
 801cbf0:	d005      	beq.n	801cbfe <_dtoa_r+0x91e>
 801cbf2:	45b1      	cmp	r9, r6
 801cbf4:	d003      	beq.n	801cbfe <_dtoa_r+0x91e>
 801cbf6:	4649      	mov	r1, r9
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f000 fb61 	bl	801d2c0 <_Bfree>
 801cbfe:	4631      	mov	r1, r6
 801cc00:	4620      	mov	r0, r4
 801cc02:	f000 fb5d 	bl	801d2c0 <_Bfree>
 801cc06:	e6a8      	b.n	801c95a <_dtoa_r+0x67a>
 801cc08:	2700      	movs	r7, #0
 801cc0a:	463e      	mov	r6, r7
 801cc0c:	e7e1      	b.n	801cbd2 <_dtoa_r+0x8f2>
 801cc0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cc12:	463e      	mov	r6, r7
 801cc14:	e5a9      	b.n	801c76a <_dtoa_r+0x48a>
 801cc16:	bf00      	nop
 801cc18:	40240000 	.word	0x40240000
 801cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc1e:	f8cd 9008 	str.w	r9, [sp, #8]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	f000 80fa 	beq.w	801ce1c <_dtoa_r+0xb3c>
 801cc28:	2d00      	cmp	r5, #0
 801cc2a:	dd05      	ble.n	801cc38 <_dtoa_r+0x958>
 801cc2c:	4631      	mov	r1, r6
 801cc2e:	462a      	mov	r2, r5
 801cc30:	4620      	mov	r0, r4
 801cc32:	f000 fcd3 	bl	801d5dc <__lshift>
 801cc36:	4606      	mov	r6, r0
 801cc38:	9b07      	ldr	r3, [sp, #28]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d04c      	beq.n	801ccd8 <_dtoa_r+0x9f8>
 801cc3e:	6871      	ldr	r1, [r6, #4]
 801cc40:	4620      	mov	r0, r4
 801cc42:	f000 fb09 	bl	801d258 <_Balloc>
 801cc46:	6932      	ldr	r2, [r6, #16]
 801cc48:	3202      	adds	r2, #2
 801cc4a:	4605      	mov	r5, r0
 801cc4c:	0092      	lsls	r2, r2, #2
 801cc4e:	f106 010c 	add.w	r1, r6, #12
 801cc52:	300c      	adds	r0, #12
 801cc54:	f7fe fb1c 	bl	801b290 <memcpy>
 801cc58:	2201      	movs	r2, #1
 801cc5a:	4629      	mov	r1, r5
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	f000 fcbd 	bl	801d5dc <__lshift>
 801cc62:	9b00      	ldr	r3, [sp, #0]
 801cc64:	f8cd b014 	str.w	fp, [sp, #20]
 801cc68:	f003 0301 	and.w	r3, r3, #1
 801cc6c:	46b1      	mov	r9, r6
 801cc6e:	9307      	str	r3, [sp, #28]
 801cc70:	4606      	mov	r6, r0
 801cc72:	4639      	mov	r1, r7
 801cc74:	9804      	ldr	r0, [sp, #16]
 801cc76:	f7ff faa7 	bl	801c1c8 <quorem>
 801cc7a:	4649      	mov	r1, r9
 801cc7c:	4605      	mov	r5, r0
 801cc7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801cc82:	9804      	ldr	r0, [sp, #16]
 801cc84:	f000 fcfe 	bl	801d684 <__mcmp>
 801cc88:	4632      	mov	r2, r6
 801cc8a:	9000      	str	r0, [sp, #0]
 801cc8c:	4639      	mov	r1, r7
 801cc8e:	4620      	mov	r0, r4
 801cc90:	f000 fd12 	bl	801d6b8 <__mdiff>
 801cc94:	68c3      	ldr	r3, [r0, #12]
 801cc96:	4602      	mov	r2, r0
 801cc98:	bb03      	cbnz	r3, 801ccdc <_dtoa_r+0x9fc>
 801cc9a:	4601      	mov	r1, r0
 801cc9c:	9008      	str	r0, [sp, #32]
 801cc9e:	9804      	ldr	r0, [sp, #16]
 801cca0:	f000 fcf0 	bl	801d684 <__mcmp>
 801cca4:	9a08      	ldr	r2, [sp, #32]
 801cca6:	4603      	mov	r3, r0
 801cca8:	4611      	mov	r1, r2
 801ccaa:	4620      	mov	r0, r4
 801ccac:	9308      	str	r3, [sp, #32]
 801ccae:	f000 fb07 	bl	801d2c0 <_Bfree>
 801ccb2:	9b08      	ldr	r3, [sp, #32]
 801ccb4:	b9a3      	cbnz	r3, 801cce0 <_dtoa_r+0xa00>
 801ccb6:	9a06      	ldr	r2, [sp, #24]
 801ccb8:	b992      	cbnz	r2, 801cce0 <_dtoa_r+0xa00>
 801ccba:	9a07      	ldr	r2, [sp, #28]
 801ccbc:	b982      	cbnz	r2, 801cce0 <_dtoa_r+0xa00>
 801ccbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ccc2:	d029      	beq.n	801cd18 <_dtoa_r+0xa38>
 801ccc4:	9b00      	ldr	r3, [sp, #0]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	dd01      	ble.n	801ccce <_dtoa_r+0x9ee>
 801ccca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801ccce:	9b05      	ldr	r3, [sp, #20]
 801ccd0:	1c5d      	adds	r5, r3, #1
 801ccd2:	f883 8000 	strb.w	r8, [r3]
 801ccd6:	e782      	b.n	801cbde <_dtoa_r+0x8fe>
 801ccd8:	4630      	mov	r0, r6
 801ccda:	e7c2      	b.n	801cc62 <_dtoa_r+0x982>
 801ccdc:	2301      	movs	r3, #1
 801ccde:	e7e3      	b.n	801cca8 <_dtoa_r+0x9c8>
 801cce0:	9a00      	ldr	r2, [sp, #0]
 801cce2:	2a00      	cmp	r2, #0
 801cce4:	db04      	blt.n	801ccf0 <_dtoa_r+0xa10>
 801cce6:	d125      	bne.n	801cd34 <_dtoa_r+0xa54>
 801cce8:	9a06      	ldr	r2, [sp, #24]
 801ccea:	bb1a      	cbnz	r2, 801cd34 <_dtoa_r+0xa54>
 801ccec:	9a07      	ldr	r2, [sp, #28]
 801ccee:	bb0a      	cbnz	r2, 801cd34 <_dtoa_r+0xa54>
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	ddec      	ble.n	801ccce <_dtoa_r+0x9ee>
 801ccf4:	2201      	movs	r2, #1
 801ccf6:	9904      	ldr	r1, [sp, #16]
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f000 fc6f 	bl	801d5dc <__lshift>
 801ccfe:	4639      	mov	r1, r7
 801cd00:	9004      	str	r0, [sp, #16]
 801cd02:	f000 fcbf 	bl	801d684 <__mcmp>
 801cd06:	2800      	cmp	r0, #0
 801cd08:	dc03      	bgt.n	801cd12 <_dtoa_r+0xa32>
 801cd0a:	d1e0      	bne.n	801ccce <_dtoa_r+0x9ee>
 801cd0c:	f018 0f01 	tst.w	r8, #1
 801cd10:	d0dd      	beq.n	801ccce <_dtoa_r+0x9ee>
 801cd12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cd16:	d1d8      	bne.n	801ccca <_dtoa_r+0x9ea>
 801cd18:	9b05      	ldr	r3, [sp, #20]
 801cd1a:	9a05      	ldr	r2, [sp, #20]
 801cd1c:	1c5d      	adds	r5, r3, #1
 801cd1e:	2339      	movs	r3, #57	; 0x39
 801cd20:	7013      	strb	r3, [r2, #0]
 801cd22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cd26:	2b39      	cmp	r3, #57	; 0x39
 801cd28:	f105 32ff 	add.w	r2, r5, #4294967295
 801cd2c:	d04f      	beq.n	801cdce <_dtoa_r+0xaee>
 801cd2e:	3301      	adds	r3, #1
 801cd30:	7013      	strb	r3, [r2, #0]
 801cd32:	e754      	b.n	801cbde <_dtoa_r+0x8fe>
 801cd34:	9a05      	ldr	r2, [sp, #20]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	f102 0501 	add.w	r5, r2, #1
 801cd3c:	dd06      	ble.n	801cd4c <_dtoa_r+0xa6c>
 801cd3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801cd42:	d0e9      	beq.n	801cd18 <_dtoa_r+0xa38>
 801cd44:	f108 0801 	add.w	r8, r8, #1
 801cd48:	9b05      	ldr	r3, [sp, #20]
 801cd4a:	e7c2      	b.n	801ccd2 <_dtoa_r+0x9f2>
 801cd4c:	9a02      	ldr	r2, [sp, #8]
 801cd4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 801cd52:	eba5 030b 	sub.w	r3, r5, fp
 801cd56:	4293      	cmp	r3, r2
 801cd58:	d021      	beq.n	801cd9e <_dtoa_r+0xabe>
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	220a      	movs	r2, #10
 801cd5e:	9904      	ldr	r1, [sp, #16]
 801cd60:	4620      	mov	r0, r4
 801cd62:	f000 fac4 	bl	801d2ee <__multadd>
 801cd66:	45b1      	cmp	r9, r6
 801cd68:	9004      	str	r0, [sp, #16]
 801cd6a:	f04f 0300 	mov.w	r3, #0
 801cd6e:	f04f 020a 	mov.w	r2, #10
 801cd72:	4649      	mov	r1, r9
 801cd74:	4620      	mov	r0, r4
 801cd76:	d105      	bne.n	801cd84 <_dtoa_r+0xaa4>
 801cd78:	f000 fab9 	bl	801d2ee <__multadd>
 801cd7c:	4681      	mov	r9, r0
 801cd7e:	4606      	mov	r6, r0
 801cd80:	9505      	str	r5, [sp, #20]
 801cd82:	e776      	b.n	801cc72 <_dtoa_r+0x992>
 801cd84:	f000 fab3 	bl	801d2ee <__multadd>
 801cd88:	4631      	mov	r1, r6
 801cd8a:	4681      	mov	r9, r0
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	220a      	movs	r2, #10
 801cd90:	4620      	mov	r0, r4
 801cd92:	f000 faac 	bl	801d2ee <__multadd>
 801cd96:	4606      	mov	r6, r0
 801cd98:	e7f2      	b.n	801cd80 <_dtoa_r+0xaa0>
 801cd9a:	f04f 0900 	mov.w	r9, #0
 801cd9e:	2201      	movs	r2, #1
 801cda0:	9904      	ldr	r1, [sp, #16]
 801cda2:	4620      	mov	r0, r4
 801cda4:	f000 fc1a 	bl	801d5dc <__lshift>
 801cda8:	4639      	mov	r1, r7
 801cdaa:	9004      	str	r0, [sp, #16]
 801cdac:	f000 fc6a 	bl	801d684 <__mcmp>
 801cdb0:	2800      	cmp	r0, #0
 801cdb2:	dcb6      	bgt.n	801cd22 <_dtoa_r+0xa42>
 801cdb4:	d102      	bne.n	801cdbc <_dtoa_r+0xadc>
 801cdb6:	f018 0f01 	tst.w	r8, #1
 801cdba:	d1b2      	bne.n	801cd22 <_dtoa_r+0xa42>
 801cdbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cdc0:	2b30      	cmp	r3, #48	; 0x30
 801cdc2:	f105 32ff 	add.w	r2, r5, #4294967295
 801cdc6:	f47f af0a 	bne.w	801cbde <_dtoa_r+0x8fe>
 801cdca:	4615      	mov	r5, r2
 801cdcc:	e7f6      	b.n	801cdbc <_dtoa_r+0xadc>
 801cdce:	4593      	cmp	fp, r2
 801cdd0:	d105      	bne.n	801cdde <_dtoa_r+0xafe>
 801cdd2:	2331      	movs	r3, #49	; 0x31
 801cdd4:	f10a 0a01 	add.w	sl, sl, #1
 801cdd8:	f88b 3000 	strb.w	r3, [fp]
 801cddc:	e6ff      	b.n	801cbde <_dtoa_r+0x8fe>
 801cdde:	4615      	mov	r5, r2
 801cde0:	e79f      	b.n	801cd22 <_dtoa_r+0xa42>
 801cde2:	f8df b064 	ldr.w	fp, [pc, #100]	; 801ce48 <_dtoa_r+0xb68>
 801cde6:	e007      	b.n	801cdf8 <_dtoa_r+0xb18>
 801cde8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cdea:	f8df b060 	ldr.w	fp, [pc, #96]	; 801ce4c <_dtoa_r+0xb6c>
 801cdee:	b11b      	cbz	r3, 801cdf8 <_dtoa_r+0xb18>
 801cdf0:	f10b 0308 	add.w	r3, fp, #8
 801cdf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cdf6:	6013      	str	r3, [r2, #0]
 801cdf8:	4658      	mov	r0, fp
 801cdfa:	b017      	add	sp, #92	; 0x5c
 801cdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce00:	9b06      	ldr	r3, [sp, #24]
 801ce02:	2b01      	cmp	r3, #1
 801ce04:	f77f ae35 	ble.w	801ca72 <_dtoa_r+0x792>
 801ce08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce0a:	9307      	str	r3, [sp, #28]
 801ce0c:	e649      	b.n	801caa2 <_dtoa_r+0x7c2>
 801ce0e:	9b02      	ldr	r3, [sp, #8]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	dc03      	bgt.n	801ce1c <_dtoa_r+0xb3c>
 801ce14:	9b06      	ldr	r3, [sp, #24]
 801ce16:	2b02      	cmp	r3, #2
 801ce18:	f73f aecc 	bgt.w	801cbb4 <_dtoa_r+0x8d4>
 801ce1c:	465d      	mov	r5, fp
 801ce1e:	4639      	mov	r1, r7
 801ce20:	9804      	ldr	r0, [sp, #16]
 801ce22:	f7ff f9d1 	bl	801c1c8 <quorem>
 801ce26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ce2a:	f805 8b01 	strb.w	r8, [r5], #1
 801ce2e:	9a02      	ldr	r2, [sp, #8]
 801ce30:	eba5 030b 	sub.w	r3, r5, fp
 801ce34:	429a      	cmp	r2, r3
 801ce36:	ddb0      	ble.n	801cd9a <_dtoa_r+0xaba>
 801ce38:	2300      	movs	r3, #0
 801ce3a:	220a      	movs	r2, #10
 801ce3c:	9904      	ldr	r1, [sp, #16]
 801ce3e:	4620      	mov	r0, r4
 801ce40:	f000 fa55 	bl	801d2ee <__multadd>
 801ce44:	9004      	str	r0, [sp, #16]
 801ce46:	e7ea      	b.n	801ce1e <_dtoa_r+0xb3e>
 801ce48:	0801f9a0 	.word	0x0801f9a0
 801ce4c:	0801f9c4 	.word	0x0801f9c4

0801ce50 <__sflush_r>:
 801ce50:	898a      	ldrh	r2, [r1, #12]
 801ce52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce56:	4605      	mov	r5, r0
 801ce58:	0710      	lsls	r0, r2, #28
 801ce5a:	460c      	mov	r4, r1
 801ce5c:	d458      	bmi.n	801cf10 <__sflush_r+0xc0>
 801ce5e:	684b      	ldr	r3, [r1, #4]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	dc05      	bgt.n	801ce70 <__sflush_r+0x20>
 801ce64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	dc02      	bgt.n	801ce70 <__sflush_r+0x20>
 801ce6a:	2000      	movs	r0, #0
 801ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce72:	2e00      	cmp	r6, #0
 801ce74:	d0f9      	beq.n	801ce6a <__sflush_r+0x1a>
 801ce76:	2300      	movs	r3, #0
 801ce78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce7c:	682f      	ldr	r7, [r5, #0]
 801ce7e:	6a21      	ldr	r1, [r4, #32]
 801ce80:	602b      	str	r3, [r5, #0]
 801ce82:	d032      	beq.n	801ceea <__sflush_r+0x9a>
 801ce84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ce86:	89a3      	ldrh	r3, [r4, #12]
 801ce88:	075a      	lsls	r2, r3, #29
 801ce8a:	d505      	bpl.n	801ce98 <__sflush_r+0x48>
 801ce8c:	6863      	ldr	r3, [r4, #4]
 801ce8e:	1ac0      	subs	r0, r0, r3
 801ce90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce92:	b10b      	cbz	r3, 801ce98 <__sflush_r+0x48>
 801ce94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce96:	1ac0      	subs	r0, r0, r3
 801ce98:	2300      	movs	r3, #0
 801ce9a:	4602      	mov	r2, r0
 801ce9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce9e:	6a21      	ldr	r1, [r4, #32]
 801cea0:	4628      	mov	r0, r5
 801cea2:	47b0      	blx	r6
 801cea4:	1c43      	adds	r3, r0, #1
 801cea6:	89a3      	ldrh	r3, [r4, #12]
 801cea8:	d106      	bne.n	801ceb8 <__sflush_r+0x68>
 801ceaa:	6829      	ldr	r1, [r5, #0]
 801ceac:	291d      	cmp	r1, #29
 801ceae:	d848      	bhi.n	801cf42 <__sflush_r+0xf2>
 801ceb0:	4a29      	ldr	r2, [pc, #164]	; (801cf58 <__sflush_r+0x108>)
 801ceb2:	40ca      	lsrs	r2, r1
 801ceb4:	07d6      	lsls	r6, r2, #31
 801ceb6:	d544      	bpl.n	801cf42 <__sflush_r+0xf2>
 801ceb8:	2200      	movs	r2, #0
 801ceba:	6062      	str	r2, [r4, #4]
 801cebc:	04d9      	lsls	r1, r3, #19
 801cebe:	6922      	ldr	r2, [r4, #16]
 801cec0:	6022      	str	r2, [r4, #0]
 801cec2:	d504      	bpl.n	801cece <__sflush_r+0x7e>
 801cec4:	1c42      	adds	r2, r0, #1
 801cec6:	d101      	bne.n	801cecc <__sflush_r+0x7c>
 801cec8:	682b      	ldr	r3, [r5, #0]
 801ceca:	b903      	cbnz	r3, 801cece <__sflush_r+0x7e>
 801cecc:	6560      	str	r0, [r4, #84]	; 0x54
 801cece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ced0:	602f      	str	r7, [r5, #0]
 801ced2:	2900      	cmp	r1, #0
 801ced4:	d0c9      	beq.n	801ce6a <__sflush_r+0x1a>
 801ced6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ceda:	4299      	cmp	r1, r3
 801cedc:	d002      	beq.n	801cee4 <__sflush_r+0x94>
 801cede:	4628      	mov	r0, r5
 801cee0:	f7fe f9ea 	bl	801b2b8 <_free_r>
 801cee4:	2000      	movs	r0, #0
 801cee6:	6360      	str	r0, [r4, #52]	; 0x34
 801cee8:	e7c0      	b.n	801ce6c <__sflush_r+0x1c>
 801ceea:	2301      	movs	r3, #1
 801ceec:	4628      	mov	r0, r5
 801ceee:	47b0      	blx	r6
 801cef0:	1c41      	adds	r1, r0, #1
 801cef2:	d1c8      	bne.n	801ce86 <__sflush_r+0x36>
 801cef4:	682b      	ldr	r3, [r5, #0]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d0c5      	beq.n	801ce86 <__sflush_r+0x36>
 801cefa:	2b1d      	cmp	r3, #29
 801cefc:	d001      	beq.n	801cf02 <__sflush_r+0xb2>
 801cefe:	2b16      	cmp	r3, #22
 801cf00:	d101      	bne.n	801cf06 <__sflush_r+0xb6>
 801cf02:	602f      	str	r7, [r5, #0]
 801cf04:	e7b1      	b.n	801ce6a <__sflush_r+0x1a>
 801cf06:	89a3      	ldrh	r3, [r4, #12]
 801cf08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf0c:	81a3      	strh	r3, [r4, #12]
 801cf0e:	e7ad      	b.n	801ce6c <__sflush_r+0x1c>
 801cf10:	690f      	ldr	r7, [r1, #16]
 801cf12:	2f00      	cmp	r7, #0
 801cf14:	d0a9      	beq.n	801ce6a <__sflush_r+0x1a>
 801cf16:	0793      	lsls	r3, r2, #30
 801cf18:	680e      	ldr	r6, [r1, #0]
 801cf1a:	bf08      	it	eq
 801cf1c:	694b      	ldreq	r3, [r1, #20]
 801cf1e:	600f      	str	r7, [r1, #0]
 801cf20:	bf18      	it	ne
 801cf22:	2300      	movne	r3, #0
 801cf24:	eba6 0807 	sub.w	r8, r6, r7
 801cf28:	608b      	str	r3, [r1, #8]
 801cf2a:	f1b8 0f00 	cmp.w	r8, #0
 801cf2e:	dd9c      	ble.n	801ce6a <__sflush_r+0x1a>
 801cf30:	4643      	mov	r3, r8
 801cf32:	463a      	mov	r2, r7
 801cf34:	6a21      	ldr	r1, [r4, #32]
 801cf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cf38:	4628      	mov	r0, r5
 801cf3a:	47b0      	blx	r6
 801cf3c:	2800      	cmp	r0, #0
 801cf3e:	dc06      	bgt.n	801cf4e <__sflush_r+0xfe>
 801cf40:	89a3      	ldrh	r3, [r4, #12]
 801cf42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf46:	81a3      	strh	r3, [r4, #12]
 801cf48:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4c:	e78e      	b.n	801ce6c <__sflush_r+0x1c>
 801cf4e:	4407      	add	r7, r0
 801cf50:	eba8 0800 	sub.w	r8, r8, r0
 801cf54:	e7e9      	b.n	801cf2a <__sflush_r+0xda>
 801cf56:	bf00      	nop
 801cf58:	20400001 	.word	0x20400001

0801cf5c <_fflush_r>:
 801cf5c:	b538      	push	{r3, r4, r5, lr}
 801cf5e:	690b      	ldr	r3, [r1, #16]
 801cf60:	4605      	mov	r5, r0
 801cf62:	460c      	mov	r4, r1
 801cf64:	b1db      	cbz	r3, 801cf9e <_fflush_r+0x42>
 801cf66:	b118      	cbz	r0, 801cf70 <_fflush_r+0x14>
 801cf68:	6983      	ldr	r3, [r0, #24]
 801cf6a:	b90b      	cbnz	r3, 801cf70 <_fflush_r+0x14>
 801cf6c:	f000 f860 	bl	801d030 <__sinit>
 801cf70:	4b0c      	ldr	r3, [pc, #48]	; (801cfa4 <_fflush_r+0x48>)
 801cf72:	429c      	cmp	r4, r3
 801cf74:	d109      	bne.n	801cf8a <_fflush_r+0x2e>
 801cf76:	686c      	ldr	r4, [r5, #4]
 801cf78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf7c:	b17b      	cbz	r3, 801cf9e <_fflush_r+0x42>
 801cf7e:	4621      	mov	r1, r4
 801cf80:	4628      	mov	r0, r5
 801cf82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf86:	f7ff bf63 	b.w	801ce50 <__sflush_r>
 801cf8a:	4b07      	ldr	r3, [pc, #28]	; (801cfa8 <_fflush_r+0x4c>)
 801cf8c:	429c      	cmp	r4, r3
 801cf8e:	d101      	bne.n	801cf94 <_fflush_r+0x38>
 801cf90:	68ac      	ldr	r4, [r5, #8]
 801cf92:	e7f1      	b.n	801cf78 <_fflush_r+0x1c>
 801cf94:	4b05      	ldr	r3, [pc, #20]	; (801cfac <_fflush_r+0x50>)
 801cf96:	429c      	cmp	r4, r3
 801cf98:	bf08      	it	eq
 801cf9a:	68ec      	ldreq	r4, [r5, #12]
 801cf9c:	e7ec      	b.n	801cf78 <_fflush_r+0x1c>
 801cf9e:	2000      	movs	r0, #0
 801cfa0:	bd38      	pop	{r3, r4, r5, pc}
 801cfa2:	bf00      	nop
 801cfa4:	0801f9f4 	.word	0x0801f9f4
 801cfa8:	0801fa14 	.word	0x0801fa14
 801cfac:	0801f9d4 	.word	0x0801f9d4

0801cfb0 <std>:
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	b510      	push	{r4, lr}
 801cfb4:	4604      	mov	r4, r0
 801cfb6:	e9c0 3300 	strd	r3, r3, [r0]
 801cfba:	6083      	str	r3, [r0, #8]
 801cfbc:	8181      	strh	r1, [r0, #12]
 801cfbe:	6643      	str	r3, [r0, #100]	; 0x64
 801cfc0:	81c2      	strh	r2, [r0, #14]
 801cfc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cfc6:	6183      	str	r3, [r0, #24]
 801cfc8:	4619      	mov	r1, r3
 801cfca:	2208      	movs	r2, #8
 801cfcc:	305c      	adds	r0, #92	; 0x5c
 801cfce:	f7fe f96a 	bl	801b2a6 <memset>
 801cfd2:	4b05      	ldr	r3, [pc, #20]	; (801cfe8 <std+0x38>)
 801cfd4:	6263      	str	r3, [r4, #36]	; 0x24
 801cfd6:	4b05      	ldr	r3, [pc, #20]	; (801cfec <std+0x3c>)
 801cfd8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cfda:	4b05      	ldr	r3, [pc, #20]	; (801cff0 <std+0x40>)
 801cfdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cfde:	4b05      	ldr	r3, [pc, #20]	; (801cff4 <std+0x44>)
 801cfe0:	6224      	str	r4, [r4, #32]
 801cfe2:	6323      	str	r3, [r4, #48]	; 0x30
 801cfe4:	bd10      	pop	{r4, pc}
 801cfe6:	bf00      	nop
 801cfe8:	0801dd51 	.word	0x0801dd51
 801cfec:	0801dd73 	.word	0x0801dd73
 801cff0:	0801ddab 	.word	0x0801ddab
 801cff4:	0801ddcf 	.word	0x0801ddcf

0801cff8 <_cleanup_r>:
 801cff8:	4901      	ldr	r1, [pc, #4]	; (801d000 <_cleanup_r+0x8>)
 801cffa:	f000 b885 	b.w	801d108 <_fwalk_reent>
 801cffe:	bf00      	nop
 801d000:	0801cf5d 	.word	0x0801cf5d

0801d004 <__sfmoreglue>:
 801d004:	b570      	push	{r4, r5, r6, lr}
 801d006:	1e4a      	subs	r2, r1, #1
 801d008:	2568      	movs	r5, #104	; 0x68
 801d00a:	4355      	muls	r5, r2
 801d00c:	460e      	mov	r6, r1
 801d00e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d012:	f7fe f99f 	bl	801b354 <_malloc_r>
 801d016:	4604      	mov	r4, r0
 801d018:	b140      	cbz	r0, 801d02c <__sfmoreglue+0x28>
 801d01a:	2100      	movs	r1, #0
 801d01c:	e9c0 1600 	strd	r1, r6, [r0]
 801d020:	300c      	adds	r0, #12
 801d022:	60a0      	str	r0, [r4, #8]
 801d024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d028:	f7fe f93d 	bl	801b2a6 <memset>
 801d02c:	4620      	mov	r0, r4
 801d02e:	bd70      	pop	{r4, r5, r6, pc}

0801d030 <__sinit>:
 801d030:	6983      	ldr	r3, [r0, #24]
 801d032:	b510      	push	{r4, lr}
 801d034:	4604      	mov	r4, r0
 801d036:	bb33      	cbnz	r3, 801d086 <__sinit+0x56>
 801d038:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801d03c:	6503      	str	r3, [r0, #80]	; 0x50
 801d03e:	4b12      	ldr	r3, [pc, #72]	; (801d088 <__sinit+0x58>)
 801d040:	4a12      	ldr	r2, [pc, #72]	; (801d08c <__sinit+0x5c>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	6282      	str	r2, [r0, #40]	; 0x28
 801d046:	4298      	cmp	r0, r3
 801d048:	bf04      	itt	eq
 801d04a:	2301      	moveq	r3, #1
 801d04c:	6183      	streq	r3, [r0, #24]
 801d04e:	f000 f81f 	bl	801d090 <__sfp>
 801d052:	6060      	str	r0, [r4, #4]
 801d054:	4620      	mov	r0, r4
 801d056:	f000 f81b 	bl	801d090 <__sfp>
 801d05a:	60a0      	str	r0, [r4, #8]
 801d05c:	4620      	mov	r0, r4
 801d05e:	f000 f817 	bl	801d090 <__sfp>
 801d062:	2200      	movs	r2, #0
 801d064:	60e0      	str	r0, [r4, #12]
 801d066:	2104      	movs	r1, #4
 801d068:	6860      	ldr	r0, [r4, #4]
 801d06a:	f7ff ffa1 	bl	801cfb0 <std>
 801d06e:	2201      	movs	r2, #1
 801d070:	2109      	movs	r1, #9
 801d072:	68a0      	ldr	r0, [r4, #8]
 801d074:	f7ff ff9c 	bl	801cfb0 <std>
 801d078:	2202      	movs	r2, #2
 801d07a:	2112      	movs	r1, #18
 801d07c:	68e0      	ldr	r0, [r4, #12]
 801d07e:	f7ff ff97 	bl	801cfb0 <std>
 801d082:	2301      	movs	r3, #1
 801d084:	61a3      	str	r3, [r4, #24]
 801d086:	bd10      	pop	{r4, pc}
 801d088:	0801f98c 	.word	0x0801f98c
 801d08c:	0801cff9 	.word	0x0801cff9

0801d090 <__sfp>:
 801d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d092:	4b1b      	ldr	r3, [pc, #108]	; (801d100 <__sfp+0x70>)
 801d094:	681e      	ldr	r6, [r3, #0]
 801d096:	69b3      	ldr	r3, [r6, #24]
 801d098:	4607      	mov	r7, r0
 801d09a:	b913      	cbnz	r3, 801d0a2 <__sfp+0x12>
 801d09c:	4630      	mov	r0, r6
 801d09e:	f7ff ffc7 	bl	801d030 <__sinit>
 801d0a2:	3648      	adds	r6, #72	; 0x48
 801d0a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d0a8:	3b01      	subs	r3, #1
 801d0aa:	d503      	bpl.n	801d0b4 <__sfp+0x24>
 801d0ac:	6833      	ldr	r3, [r6, #0]
 801d0ae:	b133      	cbz	r3, 801d0be <__sfp+0x2e>
 801d0b0:	6836      	ldr	r6, [r6, #0]
 801d0b2:	e7f7      	b.n	801d0a4 <__sfp+0x14>
 801d0b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d0b8:	b16d      	cbz	r5, 801d0d6 <__sfp+0x46>
 801d0ba:	3468      	adds	r4, #104	; 0x68
 801d0bc:	e7f4      	b.n	801d0a8 <__sfp+0x18>
 801d0be:	2104      	movs	r1, #4
 801d0c0:	4638      	mov	r0, r7
 801d0c2:	f7ff ff9f 	bl	801d004 <__sfmoreglue>
 801d0c6:	6030      	str	r0, [r6, #0]
 801d0c8:	2800      	cmp	r0, #0
 801d0ca:	d1f1      	bne.n	801d0b0 <__sfp+0x20>
 801d0cc:	230c      	movs	r3, #12
 801d0ce:	603b      	str	r3, [r7, #0]
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	4620      	mov	r0, r4
 801d0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0d6:	4b0b      	ldr	r3, [pc, #44]	; (801d104 <__sfp+0x74>)
 801d0d8:	6665      	str	r5, [r4, #100]	; 0x64
 801d0da:	e9c4 5500 	strd	r5, r5, [r4]
 801d0de:	60a5      	str	r5, [r4, #8]
 801d0e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801d0e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801d0e8:	2208      	movs	r2, #8
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d0f0:	f7fe f8d9 	bl	801b2a6 <memset>
 801d0f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d0f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d0fc:	e7e9      	b.n	801d0d2 <__sfp+0x42>
 801d0fe:	bf00      	nop
 801d100:	0801f98c 	.word	0x0801f98c
 801d104:	ffff0001 	.word	0xffff0001

0801d108 <_fwalk_reent>:
 801d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d10c:	4680      	mov	r8, r0
 801d10e:	4689      	mov	r9, r1
 801d110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d114:	2600      	movs	r6, #0
 801d116:	b914      	cbnz	r4, 801d11e <_fwalk_reent+0x16>
 801d118:	4630      	mov	r0, r6
 801d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d11e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801d122:	3f01      	subs	r7, #1
 801d124:	d501      	bpl.n	801d12a <_fwalk_reent+0x22>
 801d126:	6824      	ldr	r4, [r4, #0]
 801d128:	e7f5      	b.n	801d116 <_fwalk_reent+0xe>
 801d12a:	89ab      	ldrh	r3, [r5, #12]
 801d12c:	2b01      	cmp	r3, #1
 801d12e:	d907      	bls.n	801d140 <_fwalk_reent+0x38>
 801d130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d134:	3301      	adds	r3, #1
 801d136:	d003      	beq.n	801d140 <_fwalk_reent+0x38>
 801d138:	4629      	mov	r1, r5
 801d13a:	4640      	mov	r0, r8
 801d13c:	47c8      	blx	r9
 801d13e:	4306      	orrs	r6, r0
 801d140:	3568      	adds	r5, #104	; 0x68
 801d142:	e7ee      	b.n	801d122 <_fwalk_reent+0x1a>

0801d144 <__locale_ctype_ptr_l>:
 801d144:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801d148:	4770      	bx	lr
	...

0801d14c <_localeconv_r>:
 801d14c:	4b04      	ldr	r3, [pc, #16]	; (801d160 <_localeconv_r+0x14>)
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	6a18      	ldr	r0, [r3, #32]
 801d152:	4b04      	ldr	r3, [pc, #16]	; (801d164 <_localeconv_r+0x18>)
 801d154:	2800      	cmp	r0, #0
 801d156:	bf08      	it	eq
 801d158:	4618      	moveq	r0, r3
 801d15a:	30f0      	adds	r0, #240	; 0xf0
 801d15c:	4770      	bx	lr
 801d15e:	bf00      	nop
 801d160:	200001b0 	.word	0x200001b0
 801d164:	20000214 	.word	0x20000214

0801d168 <__swhatbuf_r>:
 801d168:	b570      	push	{r4, r5, r6, lr}
 801d16a:	460e      	mov	r6, r1
 801d16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d170:	2900      	cmp	r1, #0
 801d172:	b096      	sub	sp, #88	; 0x58
 801d174:	4614      	mov	r4, r2
 801d176:	461d      	mov	r5, r3
 801d178:	da07      	bge.n	801d18a <__swhatbuf_r+0x22>
 801d17a:	2300      	movs	r3, #0
 801d17c:	602b      	str	r3, [r5, #0]
 801d17e:	89b3      	ldrh	r3, [r6, #12]
 801d180:	061a      	lsls	r2, r3, #24
 801d182:	d410      	bmi.n	801d1a6 <__swhatbuf_r+0x3e>
 801d184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d188:	e00e      	b.n	801d1a8 <__swhatbuf_r+0x40>
 801d18a:	466a      	mov	r2, sp
 801d18c:	f000 fe52 	bl	801de34 <_fstat_r>
 801d190:	2800      	cmp	r0, #0
 801d192:	dbf2      	blt.n	801d17a <__swhatbuf_r+0x12>
 801d194:	9a01      	ldr	r2, [sp, #4]
 801d196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d19a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d19e:	425a      	negs	r2, r3
 801d1a0:	415a      	adcs	r2, r3
 801d1a2:	602a      	str	r2, [r5, #0]
 801d1a4:	e7ee      	b.n	801d184 <__swhatbuf_r+0x1c>
 801d1a6:	2340      	movs	r3, #64	; 0x40
 801d1a8:	2000      	movs	r0, #0
 801d1aa:	6023      	str	r3, [r4, #0]
 801d1ac:	b016      	add	sp, #88	; 0x58
 801d1ae:	bd70      	pop	{r4, r5, r6, pc}

0801d1b0 <__smakebuf_r>:
 801d1b0:	898b      	ldrh	r3, [r1, #12]
 801d1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1b4:	079d      	lsls	r5, r3, #30
 801d1b6:	4606      	mov	r6, r0
 801d1b8:	460c      	mov	r4, r1
 801d1ba:	d507      	bpl.n	801d1cc <__smakebuf_r+0x1c>
 801d1bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1c0:	6023      	str	r3, [r4, #0]
 801d1c2:	6123      	str	r3, [r4, #16]
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	6163      	str	r3, [r4, #20]
 801d1c8:	b002      	add	sp, #8
 801d1ca:	bd70      	pop	{r4, r5, r6, pc}
 801d1cc:	ab01      	add	r3, sp, #4
 801d1ce:	466a      	mov	r2, sp
 801d1d0:	f7ff ffca 	bl	801d168 <__swhatbuf_r>
 801d1d4:	9900      	ldr	r1, [sp, #0]
 801d1d6:	4605      	mov	r5, r0
 801d1d8:	4630      	mov	r0, r6
 801d1da:	f7fe f8bb 	bl	801b354 <_malloc_r>
 801d1de:	b948      	cbnz	r0, 801d1f4 <__smakebuf_r+0x44>
 801d1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1e4:	059a      	lsls	r2, r3, #22
 801d1e6:	d4ef      	bmi.n	801d1c8 <__smakebuf_r+0x18>
 801d1e8:	f023 0303 	bic.w	r3, r3, #3
 801d1ec:	f043 0302 	orr.w	r3, r3, #2
 801d1f0:	81a3      	strh	r3, [r4, #12]
 801d1f2:	e7e3      	b.n	801d1bc <__smakebuf_r+0xc>
 801d1f4:	4b0d      	ldr	r3, [pc, #52]	; (801d22c <__smakebuf_r+0x7c>)
 801d1f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801d1f8:	89a3      	ldrh	r3, [r4, #12]
 801d1fa:	6020      	str	r0, [r4, #0]
 801d1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d200:	81a3      	strh	r3, [r4, #12]
 801d202:	9b00      	ldr	r3, [sp, #0]
 801d204:	6163      	str	r3, [r4, #20]
 801d206:	9b01      	ldr	r3, [sp, #4]
 801d208:	6120      	str	r0, [r4, #16]
 801d20a:	b15b      	cbz	r3, 801d224 <__smakebuf_r+0x74>
 801d20c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d210:	4630      	mov	r0, r6
 801d212:	f000 fe21 	bl	801de58 <_isatty_r>
 801d216:	b128      	cbz	r0, 801d224 <__smakebuf_r+0x74>
 801d218:	89a3      	ldrh	r3, [r4, #12]
 801d21a:	f023 0303 	bic.w	r3, r3, #3
 801d21e:	f043 0301 	orr.w	r3, r3, #1
 801d222:	81a3      	strh	r3, [r4, #12]
 801d224:	89a3      	ldrh	r3, [r4, #12]
 801d226:	431d      	orrs	r5, r3
 801d228:	81a5      	strh	r5, [r4, #12]
 801d22a:	e7cd      	b.n	801d1c8 <__smakebuf_r+0x18>
 801d22c:	0801cff9 	.word	0x0801cff9

0801d230 <__ascii_mbtowc>:
 801d230:	b082      	sub	sp, #8
 801d232:	b901      	cbnz	r1, 801d236 <__ascii_mbtowc+0x6>
 801d234:	a901      	add	r1, sp, #4
 801d236:	b142      	cbz	r2, 801d24a <__ascii_mbtowc+0x1a>
 801d238:	b14b      	cbz	r3, 801d24e <__ascii_mbtowc+0x1e>
 801d23a:	7813      	ldrb	r3, [r2, #0]
 801d23c:	600b      	str	r3, [r1, #0]
 801d23e:	7812      	ldrb	r2, [r2, #0]
 801d240:	1c10      	adds	r0, r2, #0
 801d242:	bf18      	it	ne
 801d244:	2001      	movne	r0, #1
 801d246:	b002      	add	sp, #8
 801d248:	4770      	bx	lr
 801d24a:	4610      	mov	r0, r2
 801d24c:	e7fb      	b.n	801d246 <__ascii_mbtowc+0x16>
 801d24e:	f06f 0001 	mvn.w	r0, #1
 801d252:	e7f8      	b.n	801d246 <__ascii_mbtowc+0x16>

0801d254 <__malloc_lock>:
 801d254:	4770      	bx	lr

0801d256 <__malloc_unlock>:
 801d256:	4770      	bx	lr

0801d258 <_Balloc>:
 801d258:	b570      	push	{r4, r5, r6, lr}
 801d25a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d25c:	4604      	mov	r4, r0
 801d25e:	460e      	mov	r6, r1
 801d260:	b93d      	cbnz	r5, 801d272 <_Balloc+0x1a>
 801d262:	2010      	movs	r0, #16
 801d264:	f7fe f80c 	bl	801b280 <malloc>
 801d268:	6260      	str	r0, [r4, #36]	; 0x24
 801d26a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d26e:	6005      	str	r5, [r0, #0]
 801d270:	60c5      	str	r5, [r0, #12]
 801d272:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d274:	68eb      	ldr	r3, [r5, #12]
 801d276:	b183      	cbz	r3, 801d29a <_Balloc+0x42>
 801d278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d27a:	68db      	ldr	r3, [r3, #12]
 801d27c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d280:	b9b8      	cbnz	r0, 801d2b2 <_Balloc+0x5a>
 801d282:	2101      	movs	r1, #1
 801d284:	fa01 f506 	lsl.w	r5, r1, r6
 801d288:	1d6a      	adds	r2, r5, #5
 801d28a:	0092      	lsls	r2, r2, #2
 801d28c:	4620      	mov	r0, r4
 801d28e:	f000 fabf 	bl	801d810 <_calloc_r>
 801d292:	b160      	cbz	r0, 801d2ae <_Balloc+0x56>
 801d294:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d298:	e00e      	b.n	801d2b8 <_Balloc+0x60>
 801d29a:	2221      	movs	r2, #33	; 0x21
 801d29c:	2104      	movs	r1, #4
 801d29e:	4620      	mov	r0, r4
 801d2a0:	f000 fab6 	bl	801d810 <_calloc_r>
 801d2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2a6:	60e8      	str	r0, [r5, #12]
 801d2a8:	68db      	ldr	r3, [r3, #12]
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d1e4      	bne.n	801d278 <_Balloc+0x20>
 801d2ae:	2000      	movs	r0, #0
 801d2b0:	bd70      	pop	{r4, r5, r6, pc}
 801d2b2:	6802      	ldr	r2, [r0, #0]
 801d2b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d2be:	e7f7      	b.n	801d2b0 <_Balloc+0x58>

0801d2c0 <_Bfree>:
 801d2c0:	b570      	push	{r4, r5, r6, lr}
 801d2c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d2c4:	4606      	mov	r6, r0
 801d2c6:	460d      	mov	r5, r1
 801d2c8:	b93c      	cbnz	r4, 801d2da <_Bfree+0x1a>
 801d2ca:	2010      	movs	r0, #16
 801d2cc:	f7fd ffd8 	bl	801b280 <malloc>
 801d2d0:	6270      	str	r0, [r6, #36]	; 0x24
 801d2d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d2d6:	6004      	str	r4, [r0, #0]
 801d2d8:	60c4      	str	r4, [r0, #12]
 801d2da:	b13d      	cbz	r5, 801d2ec <_Bfree+0x2c>
 801d2dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d2de:	686a      	ldr	r2, [r5, #4]
 801d2e0:	68db      	ldr	r3, [r3, #12]
 801d2e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2e6:	6029      	str	r1, [r5, #0]
 801d2e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d2ec:	bd70      	pop	{r4, r5, r6, pc}

0801d2ee <__multadd>:
 801d2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2f2:	690d      	ldr	r5, [r1, #16]
 801d2f4:	461f      	mov	r7, r3
 801d2f6:	4606      	mov	r6, r0
 801d2f8:	460c      	mov	r4, r1
 801d2fa:	f101 0c14 	add.w	ip, r1, #20
 801d2fe:	2300      	movs	r3, #0
 801d300:	f8dc 0000 	ldr.w	r0, [ip]
 801d304:	b281      	uxth	r1, r0
 801d306:	fb02 7101 	mla	r1, r2, r1, r7
 801d30a:	0c0f      	lsrs	r7, r1, #16
 801d30c:	0c00      	lsrs	r0, r0, #16
 801d30e:	fb02 7000 	mla	r0, r2, r0, r7
 801d312:	b289      	uxth	r1, r1
 801d314:	3301      	adds	r3, #1
 801d316:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d31a:	429d      	cmp	r5, r3
 801d31c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d320:	f84c 1b04 	str.w	r1, [ip], #4
 801d324:	dcec      	bgt.n	801d300 <__multadd+0x12>
 801d326:	b1d7      	cbz	r7, 801d35e <__multadd+0x70>
 801d328:	68a3      	ldr	r3, [r4, #8]
 801d32a:	42ab      	cmp	r3, r5
 801d32c:	dc12      	bgt.n	801d354 <__multadd+0x66>
 801d32e:	6861      	ldr	r1, [r4, #4]
 801d330:	4630      	mov	r0, r6
 801d332:	3101      	adds	r1, #1
 801d334:	f7ff ff90 	bl	801d258 <_Balloc>
 801d338:	6922      	ldr	r2, [r4, #16]
 801d33a:	3202      	adds	r2, #2
 801d33c:	f104 010c 	add.w	r1, r4, #12
 801d340:	4680      	mov	r8, r0
 801d342:	0092      	lsls	r2, r2, #2
 801d344:	300c      	adds	r0, #12
 801d346:	f7fd ffa3 	bl	801b290 <memcpy>
 801d34a:	4621      	mov	r1, r4
 801d34c:	4630      	mov	r0, r6
 801d34e:	f7ff ffb7 	bl	801d2c0 <_Bfree>
 801d352:	4644      	mov	r4, r8
 801d354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d358:	3501      	adds	r5, #1
 801d35a:	615f      	str	r7, [r3, #20]
 801d35c:	6125      	str	r5, [r4, #16]
 801d35e:	4620      	mov	r0, r4
 801d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d364 <__hi0bits>:
 801d364:	0c02      	lsrs	r2, r0, #16
 801d366:	0412      	lsls	r2, r2, #16
 801d368:	4603      	mov	r3, r0
 801d36a:	b9b2      	cbnz	r2, 801d39a <__hi0bits+0x36>
 801d36c:	0403      	lsls	r3, r0, #16
 801d36e:	2010      	movs	r0, #16
 801d370:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d374:	bf04      	itt	eq
 801d376:	021b      	lsleq	r3, r3, #8
 801d378:	3008      	addeq	r0, #8
 801d37a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d37e:	bf04      	itt	eq
 801d380:	011b      	lsleq	r3, r3, #4
 801d382:	3004      	addeq	r0, #4
 801d384:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d388:	bf04      	itt	eq
 801d38a:	009b      	lsleq	r3, r3, #2
 801d38c:	3002      	addeq	r0, #2
 801d38e:	2b00      	cmp	r3, #0
 801d390:	db06      	blt.n	801d3a0 <__hi0bits+0x3c>
 801d392:	005b      	lsls	r3, r3, #1
 801d394:	d503      	bpl.n	801d39e <__hi0bits+0x3a>
 801d396:	3001      	adds	r0, #1
 801d398:	4770      	bx	lr
 801d39a:	2000      	movs	r0, #0
 801d39c:	e7e8      	b.n	801d370 <__hi0bits+0xc>
 801d39e:	2020      	movs	r0, #32
 801d3a0:	4770      	bx	lr

0801d3a2 <__lo0bits>:
 801d3a2:	6803      	ldr	r3, [r0, #0]
 801d3a4:	f013 0207 	ands.w	r2, r3, #7
 801d3a8:	4601      	mov	r1, r0
 801d3aa:	d00b      	beq.n	801d3c4 <__lo0bits+0x22>
 801d3ac:	07da      	lsls	r2, r3, #31
 801d3ae:	d423      	bmi.n	801d3f8 <__lo0bits+0x56>
 801d3b0:	0798      	lsls	r0, r3, #30
 801d3b2:	bf49      	itett	mi
 801d3b4:	085b      	lsrmi	r3, r3, #1
 801d3b6:	089b      	lsrpl	r3, r3, #2
 801d3b8:	2001      	movmi	r0, #1
 801d3ba:	600b      	strmi	r3, [r1, #0]
 801d3bc:	bf5c      	itt	pl
 801d3be:	600b      	strpl	r3, [r1, #0]
 801d3c0:	2002      	movpl	r0, #2
 801d3c2:	4770      	bx	lr
 801d3c4:	b298      	uxth	r0, r3
 801d3c6:	b9a8      	cbnz	r0, 801d3f4 <__lo0bits+0x52>
 801d3c8:	0c1b      	lsrs	r3, r3, #16
 801d3ca:	2010      	movs	r0, #16
 801d3cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d3d0:	bf04      	itt	eq
 801d3d2:	0a1b      	lsreq	r3, r3, #8
 801d3d4:	3008      	addeq	r0, #8
 801d3d6:	071a      	lsls	r2, r3, #28
 801d3d8:	bf04      	itt	eq
 801d3da:	091b      	lsreq	r3, r3, #4
 801d3dc:	3004      	addeq	r0, #4
 801d3de:	079a      	lsls	r2, r3, #30
 801d3e0:	bf04      	itt	eq
 801d3e2:	089b      	lsreq	r3, r3, #2
 801d3e4:	3002      	addeq	r0, #2
 801d3e6:	07da      	lsls	r2, r3, #31
 801d3e8:	d402      	bmi.n	801d3f0 <__lo0bits+0x4e>
 801d3ea:	085b      	lsrs	r3, r3, #1
 801d3ec:	d006      	beq.n	801d3fc <__lo0bits+0x5a>
 801d3ee:	3001      	adds	r0, #1
 801d3f0:	600b      	str	r3, [r1, #0]
 801d3f2:	4770      	bx	lr
 801d3f4:	4610      	mov	r0, r2
 801d3f6:	e7e9      	b.n	801d3cc <__lo0bits+0x2a>
 801d3f8:	2000      	movs	r0, #0
 801d3fa:	4770      	bx	lr
 801d3fc:	2020      	movs	r0, #32
 801d3fe:	4770      	bx	lr

0801d400 <__i2b>:
 801d400:	b510      	push	{r4, lr}
 801d402:	460c      	mov	r4, r1
 801d404:	2101      	movs	r1, #1
 801d406:	f7ff ff27 	bl	801d258 <_Balloc>
 801d40a:	2201      	movs	r2, #1
 801d40c:	6144      	str	r4, [r0, #20]
 801d40e:	6102      	str	r2, [r0, #16]
 801d410:	bd10      	pop	{r4, pc}

0801d412 <__multiply>:
 801d412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d416:	4614      	mov	r4, r2
 801d418:	690a      	ldr	r2, [r1, #16]
 801d41a:	6923      	ldr	r3, [r4, #16]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	bfb8      	it	lt
 801d420:	460b      	movlt	r3, r1
 801d422:	4688      	mov	r8, r1
 801d424:	bfbc      	itt	lt
 801d426:	46a0      	movlt	r8, r4
 801d428:	461c      	movlt	r4, r3
 801d42a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d42e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d436:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d43a:	eb07 0609 	add.w	r6, r7, r9
 801d43e:	42b3      	cmp	r3, r6
 801d440:	bfb8      	it	lt
 801d442:	3101      	addlt	r1, #1
 801d444:	f7ff ff08 	bl	801d258 <_Balloc>
 801d448:	f100 0514 	add.w	r5, r0, #20
 801d44c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d450:	462b      	mov	r3, r5
 801d452:	2200      	movs	r2, #0
 801d454:	4573      	cmp	r3, lr
 801d456:	d316      	bcc.n	801d486 <__multiply+0x74>
 801d458:	f104 0214 	add.w	r2, r4, #20
 801d45c:	f108 0114 	add.w	r1, r8, #20
 801d460:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d464:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d468:	9300      	str	r3, [sp, #0]
 801d46a:	9b00      	ldr	r3, [sp, #0]
 801d46c:	9201      	str	r2, [sp, #4]
 801d46e:	4293      	cmp	r3, r2
 801d470:	d80c      	bhi.n	801d48c <__multiply+0x7a>
 801d472:	2e00      	cmp	r6, #0
 801d474:	dd03      	ble.n	801d47e <__multiply+0x6c>
 801d476:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d05d      	beq.n	801d53a <__multiply+0x128>
 801d47e:	6106      	str	r6, [r0, #16]
 801d480:	b003      	add	sp, #12
 801d482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d486:	f843 2b04 	str.w	r2, [r3], #4
 801d48a:	e7e3      	b.n	801d454 <__multiply+0x42>
 801d48c:	f8b2 b000 	ldrh.w	fp, [r2]
 801d490:	f1bb 0f00 	cmp.w	fp, #0
 801d494:	d023      	beq.n	801d4de <__multiply+0xcc>
 801d496:	4689      	mov	r9, r1
 801d498:	46ac      	mov	ip, r5
 801d49a:	f04f 0800 	mov.w	r8, #0
 801d49e:	f859 4b04 	ldr.w	r4, [r9], #4
 801d4a2:	f8dc a000 	ldr.w	sl, [ip]
 801d4a6:	b2a3      	uxth	r3, r4
 801d4a8:	fa1f fa8a 	uxth.w	sl, sl
 801d4ac:	fb0b a303 	mla	r3, fp, r3, sl
 801d4b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d4b4:	f8dc 4000 	ldr.w	r4, [ip]
 801d4b8:	4443      	add	r3, r8
 801d4ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d4be:	fb0b 840a 	mla	r4, fp, sl, r8
 801d4c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d4c6:	46e2      	mov	sl, ip
 801d4c8:	b29b      	uxth	r3, r3
 801d4ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d4ce:	454f      	cmp	r7, r9
 801d4d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d4d4:	f84a 3b04 	str.w	r3, [sl], #4
 801d4d8:	d82b      	bhi.n	801d532 <__multiply+0x120>
 801d4da:	f8cc 8004 	str.w	r8, [ip, #4]
 801d4de:	9b01      	ldr	r3, [sp, #4]
 801d4e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d4e4:	3204      	adds	r2, #4
 801d4e6:	f1ba 0f00 	cmp.w	sl, #0
 801d4ea:	d020      	beq.n	801d52e <__multiply+0x11c>
 801d4ec:	682b      	ldr	r3, [r5, #0]
 801d4ee:	4689      	mov	r9, r1
 801d4f0:	46a8      	mov	r8, r5
 801d4f2:	f04f 0b00 	mov.w	fp, #0
 801d4f6:	f8b9 c000 	ldrh.w	ip, [r9]
 801d4fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d4fe:	fb0a 440c 	mla	r4, sl, ip, r4
 801d502:	445c      	add	r4, fp
 801d504:	46c4      	mov	ip, r8
 801d506:	b29b      	uxth	r3, r3
 801d508:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d50c:	f84c 3b04 	str.w	r3, [ip], #4
 801d510:	f859 3b04 	ldr.w	r3, [r9], #4
 801d514:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d518:	0c1b      	lsrs	r3, r3, #16
 801d51a:	fb0a b303 	mla	r3, sl, r3, fp
 801d51e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d522:	454f      	cmp	r7, r9
 801d524:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d528:	d805      	bhi.n	801d536 <__multiply+0x124>
 801d52a:	f8c8 3004 	str.w	r3, [r8, #4]
 801d52e:	3504      	adds	r5, #4
 801d530:	e79b      	b.n	801d46a <__multiply+0x58>
 801d532:	46d4      	mov	ip, sl
 801d534:	e7b3      	b.n	801d49e <__multiply+0x8c>
 801d536:	46e0      	mov	r8, ip
 801d538:	e7dd      	b.n	801d4f6 <__multiply+0xe4>
 801d53a:	3e01      	subs	r6, #1
 801d53c:	e799      	b.n	801d472 <__multiply+0x60>
	...

0801d540 <__pow5mult>:
 801d540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d544:	4615      	mov	r5, r2
 801d546:	f012 0203 	ands.w	r2, r2, #3
 801d54a:	4606      	mov	r6, r0
 801d54c:	460f      	mov	r7, r1
 801d54e:	d007      	beq.n	801d560 <__pow5mult+0x20>
 801d550:	3a01      	subs	r2, #1
 801d552:	4c21      	ldr	r4, [pc, #132]	; (801d5d8 <__pow5mult+0x98>)
 801d554:	2300      	movs	r3, #0
 801d556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d55a:	f7ff fec8 	bl	801d2ee <__multadd>
 801d55e:	4607      	mov	r7, r0
 801d560:	10ad      	asrs	r5, r5, #2
 801d562:	d035      	beq.n	801d5d0 <__pow5mult+0x90>
 801d564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d566:	b93c      	cbnz	r4, 801d578 <__pow5mult+0x38>
 801d568:	2010      	movs	r0, #16
 801d56a:	f7fd fe89 	bl	801b280 <malloc>
 801d56e:	6270      	str	r0, [r6, #36]	; 0x24
 801d570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d574:	6004      	str	r4, [r0, #0]
 801d576:	60c4      	str	r4, [r0, #12]
 801d578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d580:	b94c      	cbnz	r4, 801d596 <__pow5mult+0x56>
 801d582:	f240 2171 	movw	r1, #625	; 0x271
 801d586:	4630      	mov	r0, r6
 801d588:	f7ff ff3a 	bl	801d400 <__i2b>
 801d58c:	2300      	movs	r3, #0
 801d58e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d592:	4604      	mov	r4, r0
 801d594:	6003      	str	r3, [r0, #0]
 801d596:	f04f 0800 	mov.w	r8, #0
 801d59a:	07eb      	lsls	r3, r5, #31
 801d59c:	d50a      	bpl.n	801d5b4 <__pow5mult+0x74>
 801d59e:	4639      	mov	r1, r7
 801d5a0:	4622      	mov	r2, r4
 801d5a2:	4630      	mov	r0, r6
 801d5a4:	f7ff ff35 	bl	801d412 <__multiply>
 801d5a8:	4639      	mov	r1, r7
 801d5aa:	4681      	mov	r9, r0
 801d5ac:	4630      	mov	r0, r6
 801d5ae:	f7ff fe87 	bl	801d2c0 <_Bfree>
 801d5b2:	464f      	mov	r7, r9
 801d5b4:	106d      	asrs	r5, r5, #1
 801d5b6:	d00b      	beq.n	801d5d0 <__pow5mult+0x90>
 801d5b8:	6820      	ldr	r0, [r4, #0]
 801d5ba:	b938      	cbnz	r0, 801d5cc <__pow5mult+0x8c>
 801d5bc:	4622      	mov	r2, r4
 801d5be:	4621      	mov	r1, r4
 801d5c0:	4630      	mov	r0, r6
 801d5c2:	f7ff ff26 	bl	801d412 <__multiply>
 801d5c6:	6020      	str	r0, [r4, #0]
 801d5c8:	f8c0 8000 	str.w	r8, [r0]
 801d5cc:	4604      	mov	r4, r0
 801d5ce:	e7e4      	b.n	801d59a <__pow5mult+0x5a>
 801d5d0:	4638      	mov	r0, r7
 801d5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5d6:	bf00      	nop
 801d5d8:	0801fb30 	.word	0x0801fb30

0801d5dc <__lshift>:
 801d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5e0:	460c      	mov	r4, r1
 801d5e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d5e6:	6923      	ldr	r3, [r4, #16]
 801d5e8:	6849      	ldr	r1, [r1, #4]
 801d5ea:	eb0a 0903 	add.w	r9, sl, r3
 801d5ee:	68a3      	ldr	r3, [r4, #8]
 801d5f0:	4607      	mov	r7, r0
 801d5f2:	4616      	mov	r6, r2
 801d5f4:	f109 0501 	add.w	r5, r9, #1
 801d5f8:	42ab      	cmp	r3, r5
 801d5fa:	db32      	blt.n	801d662 <__lshift+0x86>
 801d5fc:	4638      	mov	r0, r7
 801d5fe:	f7ff fe2b 	bl	801d258 <_Balloc>
 801d602:	2300      	movs	r3, #0
 801d604:	4680      	mov	r8, r0
 801d606:	f100 0114 	add.w	r1, r0, #20
 801d60a:	461a      	mov	r2, r3
 801d60c:	4553      	cmp	r3, sl
 801d60e:	db2b      	blt.n	801d668 <__lshift+0x8c>
 801d610:	6920      	ldr	r0, [r4, #16]
 801d612:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d616:	f104 0314 	add.w	r3, r4, #20
 801d61a:	f016 021f 	ands.w	r2, r6, #31
 801d61e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d622:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d626:	d025      	beq.n	801d674 <__lshift+0x98>
 801d628:	f1c2 0e20 	rsb	lr, r2, #32
 801d62c:	2000      	movs	r0, #0
 801d62e:	681e      	ldr	r6, [r3, #0]
 801d630:	468a      	mov	sl, r1
 801d632:	4096      	lsls	r6, r2
 801d634:	4330      	orrs	r0, r6
 801d636:	f84a 0b04 	str.w	r0, [sl], #4
 801d63a:	f853 0b04 	ldr.w	r0, [r3], #4
 801d63e:	459c      	cmp	ip, r3
 801d640:	fa20 f00e 	lsr.w	r0, r0, lr
 801d644:	d814      	bhi.n	801d670 <__lshift+0x94>
 801d646:	6048      	str	r0, [r1, #4]
 801d648:	b108      	cbz	r0, 801d64e <__lshift+0x72>
 801d64a:	f109 0502 	add.w	r5, r9, #2
 801d64e:	3d01      	subs	r5, #1
 801d650:	4638      	mov	r0, r7
 801d652:	f8c8 5010 	str.w	r5, [r8, #16]
 801d656:	4621      	mov	r1, r4
 801d658:	f7ff fe32 	bl	801d2c0 <_Bfree>
 801d65c:	4640      	mov	r0, r8
 801d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d662:	3101      	adds	r1, #1
 801d664:	005b      	lsls	r3, r3, #1
 801d666:	e7c7      	b.n	801d5f8 <__lshift+0x1c>
 801d668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d66c:	3301      	adds	r3, #1
 801d66e:	e7cd      	b.n	801d60c <__lshift+0x30>
 801d670:	4651      	mov	r1, sl
 801d672:	e7dc      	b.n	801d62e <__lshift+0x52>
 801d674:	3904      	subs	r1, #4
 801d676:	f853 2b04 	ldr.w	r2, [r3], #4
 801d67a:	f841 2f04 	str.w	r2, [r1, #4]!
 801d67e:	459c      	cmp	ip, r3
 801d680:	d8f9      	bhi.n	801d676 <__lshift+0x9a>
 801d682:	e7e4      	b.n	801d64e <__lshift+0x72>

0801d684 <__mcmp>:
 801d684:	6903      	ldr	r3, [r0, #16]
 801d686:	690a      	ldr	r2, [r1, #16]
 801d688:	1a9b      	subs	r3, r3, r2
 801d68a:	b530      	push	{r4, r5, lr}
 801d68c:	d10c      	bne.n	801d6a8 <__mcmp+0x24>
 801d68e:	0092      	lsls	r2, r2, #2
 801d690:	3014      	adds	r0, #20
 801d692:	3114      	adds	r1, #20
 801d694:	1884      	adds	r4, r0, r2
 801d696:	4411      	add	r1, r2
 801d698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d69c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d6a0:	4295      	cmp	r5, r2
 801d6a2:	d003      	beq.n	801d6ac <__mcmp+0x28>
 801d6a4:	d305      	bcc.n	801d6b2 <__mcmp+0x2e>
 801d6a6:	2301      	movs	r3, #1
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	bd30      	pop	{r4, r5, pc}
 801d6ac:	42a0      	cmp	r0, r4
 801d6ae:	d3f3      	bcc.n	801d698 <__mcmp+0x14>
 801d6b0:	e7fa      	b.n	801d6a8 <__mcmp+0x24>
 801d6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b6:	e7f7      	b.n	801d6a8 <__mcmp+0x24>

0801d6b8 <__mdiff>:
 801d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6bc:	460d      	mov	r5, r1
 801d6be:	4607      	mov	r7, r0
 801d6c0:	4611      	mov	r1, r2
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	4614      	mov	r4, r2
 801d6c6:	f7ff ffdd 	bl	801d684 <__mcmp>
 801d6ca:	1e06      	subs	r6, r0, #0
 801d6cc:	d108      	bne.n	801d6e0 <__mdiff+0x28>
 801d6ce:	4631      	mov	r1, r6
 801d6d0:	4638      	mov	r0, r7
 801d6d2:	f7ff fdc1 	bl	801d258 <_Balloc>
 801d6d6:	2301      	movs	r3, #1
 801d6d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6e0:	bfa4      	itt	ge
 801d6e2:	4623      	movge	r3, r4
 801d6e4:	462c      	movge	r4, r5
 801d6e6:	4638      	mov	r0, r7
 801d6e8:	6861      	ldr	r1, [r4, #4]
 801d6ea:	bfa6      	itte	ge
 801d6ec:	461d      	movge	r5, r3
 801d6ee:	2600      	movge	r6, #0
 801d6f0:	2601      	movlt	r6, #1
 801d6f2:	f7ff fdb1 	bl	801d258 <_Balloc>
 801d6f6:	692b      	ldr	r3, [r5, #16]
 801d6f8:	60c6      	str	r6, [r0, #12]
 801d6fa:	6926      	ldr	r6, [r4, #16]
 801d6fc:	f105 0914 	add.w	r9, r5, #20
 801d700:	f104 0214 	add.w	r2, r4, #20
 801d704:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d708:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d70c:	f100 0514 	add.w	r5, r0, #20
 801d710:	f04f 0e00 	mov.w	lr, #0
 801d714:	f852 ab04 	ldr.w	sl, [r2], #4
 801d718:	f859 4b04 	ldr.w	r4, [r9], #4
 801d71c:	fa1e f18a 	uxtah	r1, lr, sl
 801d720:	b2a3      	uxth	r3, r4
 801d722:	1ac9      	subs	r1, r1, r3
 801d724:	0c23      	lsrs	r3, r4, #16
 801d726:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801d72a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801d72e:	b289      	uxth	r1, r1
 801d730:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801d734:	45c8      	cmp	r8, r9
 801d736:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801d73a:	4694      	mov	ip, r2
 801d73c:	f845 3b04 	str.w	r3, [r5], #4
 801d740:	d8e8      	bhi.n	801d714 <__mdiff+0x5c>
 801d742:	45bc      	cmp	ip, r7
 801d744:	d304      	bcc.n	801d750 <__mdiff+0x98>
 801d746:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801d74a:	b183      	cbz	r3, 801d76e <__mdiff+0xb6>
 801d74c:	6106      	str	r6, [r0, #16]
 801d74e:	e7c5      	b.n	801d6dc <__mdiff+0x24>
 801d750:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d754:	fa1e f381 	uxtah	r3, lr, r1
 801d758:	141a      	asrs	r2, r3, #16
 801d75a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d75e:	b29b      	uxth	r3, r3
 801d760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d764:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d768:	f845 3b04 	str.w	r3, [r5], #4
 801d76c:	e7e9      	b.n	801d742 <__mdiff+0x8a>
 801d76e:	3e01      	subs	r6, #1
 801d770:	e7e9      	b.n	801d746 <__mdiff+0x8e>

0801d772 <__d2b>:
 801d772:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d776:	460e      	mov	r6, r1
 801d778:	2101      	movs	r1, #1
 801d77a:	ec59 8b10 	vmov	r8, r9, d0
 801d77e:	4615      	mov	r5, r2
 801d780:	f7ff fd6a 	bl	801d258 <_Balloc>
 801d784:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801d788:	4607      	mov	r7, r0
 801d78a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d78e:	bb34      	cbnz	r4, 801d7de <__d2b+0x6c>
 801d790:	9301      	str	r3, [sp, #4]
 801d792:	f1b8 0300 	subs.w	r3, r8, #0
 801d796:	d027      	beq.n	801d7e8 <__d2b+0x76>
 801d798:	a802      	add	r0, sp, #8
 801d79a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801d79e:	f7ff fe00 	bl	801d3a2 <__lo0bits>
 801d7a2:	9900      	ldr	r1, [sp, #0]
 801d7a4:	b1f0      	cbz	r0, 801d7e4 <__d2b+0x72>
 801d7a6:	9a01      	ldr	r2, [sp, #4]
 801d7a8:	f1c0 0320 	rsb	r3, r0, #32
 801d7ac:	fa02 f303 	lsl.w	r3, r2, r3
 801d7b0:	430b      	orrs	r3, r1
 801d7b2:	40c2      	lsrs	r2, r0
 801d7b4:	617b      	str	r3, [r7, #20]
 801d7b6:	9201      	str	r2, [sp, #4]
 801d7b8:	9b01      	ldr	r3, [sp, #4]
 801d7ba:	61bb      	str	r3, [r7, #24]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	bf14      	ite	ne
 801d7c0:	2102      	movne	r1, #2
 801d7c2:	2101      	moveq	r1, #1
 801d7c4:	6139      	str	r1, [r7, #16]
 801d7c6:	b1c4      	cbz	r4, 801d7fa <__d2b+0x88>
 801d7c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d7cc:	4404      	add	r4, r0
 801d7ce:	6034      	str	r4, [r6, #0]
 801d7d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d7d4:	6028      	str	r0, [r5, #0]
 801d7d6:	4638      	mov	r0, r7
 801d7d8:	b003      	add	sp, #12
 801d7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d7e2:	e7d5      	b.n	801d790 <__d2b+0x1e>
 801d7e4:	6179      	str	r1, [r7, #20]
 801d7e6:	e7e7      	b.n	801d7b8 <__d2b+0x46>
 801d7e8:	a801      	add	r0, sp, #4
 801d7ea:	f7ff fdda 	bl	801d3a2 <__lo0bits>
 801d7ee:	9b01      	ldr	r3, [sp, #4]
 801d7f0:	617b      	str	r3, [r7, #20]
 801d7f2:	2101      	movs	r1, #1
 801d7f4:	6139      	str	r1, [r7, #16]
 801d7f6:	3020      	adds	r0, #32
 801d7f8:	e7e5      	b.n	801d7c6 <__d2b+0x54>
 801d7fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d7fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d802:	6030      	str	r0, [r6, #0]
 801d804:	6918      	ldr	r0, [r3, #16]
 801d806:	f7ff fdad 	bl	801d364 <__hi0bits>
 801d80a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d80e:	e7e1      	b.n	801d7d4 <__d2b+0x62>

0801d810 <_calloc_r>:
 801d810:	b538      	push	{r3, r4, r5, lr}
 801d812:	fb02 f401 	mul.w	r4, r2, r1
 801d816:	4621      	mov	r1, r4
 801d818:	f7fd fd9c 	bl	801b354 <_malloc_r>
 801d81c:	4605      	mov	r5, r0
 801d81e:	b118      	cbz	r0, 801d828 <_calloc_r+0x18>
 801d820:	4622      	mov	r2, r4
 801d822:	2100      	movs	r1, #0
 801d824:	f7fd fd3f 	bl	801b2a6 <memset>
 801d828:	4628      	mov	r0, r5
 801d82a:	bd38      	pop	{r3, r4, r5, pc}

0801d82c <__ssputs_r>:
 801d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d830:	688e      	ldr	r6, [r1, #8]
 801d832:	429e      	cmp	r6, r3
 801d834:	4682      	mov	sl, r0
 801d836:	460c      	mov	r4, r1
 801d838:	4690      	mov	r8, r2
 801d83a:	4699      	mov	r9, r3
 801d83c:	d837      	bhi.n	801d8ae <__ssputs_r+0x82>
 801d83e:	898a      	ldrh	r2, [r1, #12]
 801d840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d844:	d031      	beq.n	801d8aa <__ssputs_r+0x7e>
 801d846:	6825      	ldr	r5, [r4, #0]
 801d848:	6909      	ldr	r1, [r1, #16]
 801d84a:	1a6f      	subs	r7, r5, r1
 801d84c:	6965      	ldr	r5, [r4, #20]
 801d84e:	2302      	movs	r3, #2
 801d850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d854:	fb95 f5f3 	sdiv	r5, r5, r3
 801d858:	f109 0301 	add.w	r3, r9, #1
 801d85c:	443b      	add	r3, r7
 801d85e:	429d      	cmp	r5, r3
 801d860:	bf38      	it	cc
 801d862:	461d      	movcc	r5, r3
 801d864:	0553      	lsls	r3, r2, #21
 801d866:	d530      	bpl.n	801d8ca <__ssputs_r+0x9e>
 801d868:	4629      	mov	r1, r5
 801d86a:	f7fd fd73 	bl	801b354 <_malloc_r>
 801d86e:	4606      	mov	r6, r0
 801d870:	b950      	cbnz	r0, 801d888 <__ssputs_r+0x5c>
 801d872:	230c      	movs	r3, #12
 801d874:	f8ca 3000 	str.w	r3, [sl]
 801d878:	89a3      	ldrh	r3, [r4, #12]
 801d87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d87e:	81a3      	strh	r3, [r4, #12]
 801d880:	f04f 30ff 	mov.w	r0, #4294967295
 801d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d888:	463a      	mov	r2, r7
 801d88a:	6921      	ldr	r1, [r4, #16]
 801d88c:	f7fd fd00 	bl	801b290 <memcpy>
 801d890:	89a3      	ldrh	r3, [r4, #12]
 801d892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d89a:	81a3      	strh	r3, [r4, #12]
 801d89c:	6126      	str	r6, [r4, #16]
 801d89e:	6165      	str	r5, [r4, #20]
 801d8a0:	443e      	add	r6, r7
 801d8a2:	1bed      	subs	r5, r5, r7
 801d8a4:	6026      	str	r6, [r4, #0]
 801d8a6:	60a5      	str	r5, [r4, #8]
 801d8a8:	464e      	mov	r6, r9
 801d8aa:	454e      	cmp	r6, r9
 801d8ac:	d900      	bls.n	801d8b0 <__ssputs_r+0x84>
 801d8ae:	464e      	mov	r6, r9
 801d8b0:	4632      	mov	r2, r6
 801d8b2:	4641      	mov	r1, r8
 801d8b4:	6820      	ldr	r0, [r4, #0]
 801d8b6:	f000 faf1 	bl	801de9c <memmove>
 801d8ba:	68a3      	ldr	r3, [r4, #8]
 801d8bc:	1b9b      	subs	r3, r3, r6
 801d8be:	60a3      	str	r3, [r4, #8]
 801d8c0:	6823      	ldr	r3, [r4, #0]
 801d8c2:	441e      	add	r6, r3
 801d8c4:	6026      	str	r6, [r4, #0]
 801d8c6:	2000      	movs	r0, #0
 801d8c8:	e7dc      	b.n	801d884 <__ssputs_r+0x58>
 801d8ca:	462a      	mov	r2, r5
 801d8cc:	f000 faff 	bl	801dece <_realloc_r>
 801d8d0:	4606      	mov	r6, r0
 801d8d2:	2800      	cmp	r0, #0
 801d8d4:	d1e2      	bne.n	801d89c <__ssputs_r+0x70>
 801d8d6:	6921      	ldr	r1, [r4, #16]
 801d8d8:	4650      	mov	r0, sl
 801d8da:	f7fd fced 	bl	801b2b8 <_free_r>
 801d8de:	e7c8      	b.n	801d872 <__ssputs_r+0x46>

0801d8e0 <_svfiprintf_r>:
 801d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e4:	461d      	mov	r5, r3
 801d8e6:	898b      	ldrh	r3, [r1, #12]
 801d8e8:	061f      	lsls	r7, r3, #24
 801d8ea:	b09d      	sub	sp, #116	; 0x74
 801d8ec:	4680      	mov	r8, r0
 801d8ee:	460c      	mov	r4, r1
 801d8f0:	4616      	mov	r6, r2
 801d8f2:	d50f      	bpl.n	801d914 <_svfiprintf_r+0x34>
 801d8f4:	690b      	ldr	r3, [r1, #16]
 801d8f6:	b96b      	cbnz	r3, 801d914 <_svfiprintf_r+0x34>
 801d8f8:	2140      	movs	r1, #64	; 0x40
 801d8fa:	f7fd fd2b 	bl	801b354 <_malloc_r>
 801d8fe:	6020      	str	r0, [r4, #0]
 801d900:	6120      	str	r0, [r4, #16]
 801d902:	b928      	cbnz	r0, 801d910 <_svfiprintf_r+0x30>
 801d904:	230c      	movs	r3, #12
 801d906:	f8c8 3000 	str.w	r3, [r8]
 801d90a:	f04f 30ff 	mov.w	r0, #4294967295
 801d90e:	e0c8      	b.n	801daa2 <_svfiprintf_r+0x1c2>
 801d910:	2340      	movs	r3, #64	; 0x40
 801d912:	6163      	str	r3, [r4, #20]
 801d914:	2300      	movs	r3, #0
 801d916:	9309      	str	r3, [sp, #36]	; 0x24
 801d918:	2320      	movs	r3, #32
 801d91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d91e:	2330      	movs	r3, #48	; 0x30
 801d920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d924:	9503      	str	r5, [sp, #12]
 801d926:	f04f 0b01 	mov.w	fp, #1
 801d92a:	4637      	mov	r7, r6
 801d92c:	463d      	mov	r5, r7
 801d92e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d932:	b10b      	cbz	r3, 801d938 <_svfiprintf_r+0x58>
 801d934:	2b25      	cmp	r3, #37	; 0x25
 801d936:	d13e      	bne.n	801d9b6 <_svfiprintf_r+0xd6>
 801d938:	ebb7 0a06 	subs.w	sl, r7, r6
 801d93c:	d00b      	beq.n	801d956 <_svfiprintf_r+0x76>
 801d93e:	4653      	mov	r3, sl
 801d940:	4632      	mov	r2, r6
 801d942:	4621      	mov	r1, r4
 801d944:	4640      	mov	r0, r8
 801d946:	f7ff ff71 	bl	801d82c <__ssputs_r>
 801d94a:	3001      	adds	r0, #1
 801d94c:	f000 80a4 	beq.w	801da98 <_svfiprintf_r+0x1b8>
 801d950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d952:	4453      	add	r3, sl
 801d954:	9309      	str	r3, [sp, #36]	; 0x24
 801d956:	783b      	ldrb	r3, [r7, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	f000 809d 	beq.w	801da98 <_svfiprintf_r+0x1b8>
 801d95e:	2300      	movs	r3, #0
 801d960:	f04f 32ff 	mov.w	r2, #4294967295
 801d964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d968:	9304      	str	r3, [sp, #16]
 801d96a:	9307      	str	r3, [sp, #28]
 801d96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d970:	931a      	str	r3, [sp, #104]	; 0x68
 801d972:	462f      	mov	r7, r5
 801d974:	2205      	movs	r2, #5
 801d976:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d97a:	4850      	ldr	r0, [pc, #320]	; (801dabc <_svfiprintf_r+0x1dc>)
 801d97c:	f7e2 fc40 	bl	8000200 <memchr>
 801d980:	9b04      	ldr	r3, [sp, #16]
 801d982:	b9d0      	cbnz	r0, 801d9ba <_svfiprintf_r+0xda>
 801d984:	06d9      	lsls	r1, r3, #27
 801d986:	bf44      	itt	mi
 801d988:	2220      	movmi	r2, #32
 801d98a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d98e:	071a      	lsls	r2, r3, #28
 801d990:	bf44      	itt	mi
 801d992:	222b      	movmi	r2, #43	; 0x2b
 801d994:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d998:	782a      	ldrb	r2, [r5, #0]
 801d99a:	2a2a      	cmp	r2, #42	; 0x2a
 801d99c:	d015      	beq.n	801d9ca <_svfiprintf_r+0xea>
 801d99e:	9a07      	ldr	r2, [sp, #28]
 801d9a0:	462f      	mov	r7, r5
 801d9a2:	2000      	movs	r0, #0
 801d9a4:	250a      	movs	r5, #10
 801d9a6:	4639      	mov	r1, r7
 801d9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d9ac:	3b30      	subs	r3, #48	; 0x30
 801d9ae:	2b09      	cmp	r3, #9
 801d9b0:	d94d      	bls.n	801da4e <_svfiprintf_r+0x16e>
 801d9b2:	b1b8      	cbz	r0, 801d9e4 <_svfiprintf_r+0x104>
 801d9b4:	e00f      	b.n	801d9d6 <_svfiprintf_r+0xf6>
 801d9b6:	462f      	mov	r7, r5
 801d9b8:	e7b8      	b.n	801d92c <_svfiprintf_r+0x4c>
 801d9ba:	4a40      	ldr	r2, [pc, #256]	; (801dabc <_svfiprintf_r+0x1dc>)
 801d9bc:	1a80      	subs	r0, r0, r2
 801d9be:	fa0b f000 	lsl.w	r0, fp, r0
 801d9c2:	4318      	orrs	r0, r3
 801d9c4:	9004      	str	r0, [sp, #16]
 801d9c6:	463d      	mov	r5, r7
 801d9c8:	e7d3      	b.n	801d972 <_svfiprintf_r+0x92>
 801d9ca:	9a03      	ldr	r2, [sp, #12]
 801d9cc:	1d11      	adds	r1, r2, #4
 801d9ce:	6812      	ldr	r2, [r2, #0]
 801d9d0:	9103      	str	r1, [sp, #12]
 801d9d2:	2a00      	cmp	r2, #0
 801d9d4:	db01      	blt.n	801d9da <_svfiprintf_r+0xfa>
 801d9d6:	9207      	str	r2, [sp, #28]
 801d9d8:	e004      	b.n	801d9e4 <_svfiprintf_r+0x104>
 801d9da:	4252      	negs	r2, r2
 801d9dc:	f043 0302 	orr.w	r3, r3, #2
 801d9e0:	9207      	str	r2, [sp, #28]
 801d9e2:	9304      	str	r3, [sp, #16]
 801d9e4:	783b      	ldrb	r3, [r7, #0]
 801d9e6:	2b2e      	cmp	r3, #46	; 0x2e
 801d9e8:	d10c      	bne.n	801da04 <_svfiprintf_r+0x124>
 801d9ea:	787b      	ldrb	r3, [r7, #1]
 801d9ec:	2b2a      	cmp	r3, #42	; 0x2a
 801d9ee:	d133      	bne.n	801da58 <_svfiprintf_r+0x178>
 801d9f0:	9b03      	ldr	r3, [sp, #12]
 801d9f2:	1d1a      	adds	r2, r3, #4
 801d9f4:	681b      	ldr	r3, [r3, #0]
 801d9f6:	9203      	str	r2, [sp, #12]
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	bfb8      	it	lt
 801d9fc:	f04f 33ff 	movlt.w	r3, #4294967295
 801da00:	3702      	adds	r7, #2
 801da02:	9305      	str	r3, [sp, #20]
 801da04:	4d2e      	ldr	r5, [pc, #184]	; (801dac0 <_svfiprintf_r+0x1e0>)
 801da06:	7839      	ldrb	r1, [r7, #0]
 801da08:	2203      	movs	r2, #3
 801da0a:	4628      	mov	r0, r5
 801da0c:	f7e2 fbf8 	bl	8000200 <memchr>
 801da10:	b138      	cbz	r0, 801da22 <_svfiprintf_r+0x142>
 801da12:	2340      	movs	r3, #64	; 0x40
 801da14:	1b40      	subs	r0, r0, r5
 801da16:	fa03 f000 	lsl.w	r0, r3, r0
 801da1a:	9b04      	ldr	r3, [sp, #16]
 801da1c:	4303      	orrs	r3, r0
 801da1e:	3701      	adds	r7, #1
 801da20:	9304      	str	r3, [sp, #16]
 801da22:	7839      	ldrb	r1, [r7, #0]
 801da24:	4827      	ldr	r0, [pc, #156]	; (801dac4 <_svfiprintf_r+0x1e4>)
 801da26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da2a:	2206      	movs	r2, #6
 801da2c:	1c7e      	adds	r6, r7, #1
 801da2e:	f7e2 fbe7 	bl	8000200 <memchr>
 801da32:	2800      	cmp	r0, #0
 801da34:	d038      	beq.n	801daa8 <_svfiprintf_r+0x1c8>
 801da36:	4b24      	ldr	r3, [pc, #144]	; (801dac8 <_svfiprintf_r+0x1e8>)
 801da38:	bb13      	cbnz	r3, 801da80 <_svfiprintf_r+0x1a0>
 801da3a:	9b03      	ldr	r3, [sp, #12]
 801da3c:	3307      	adds	r3, #7
 801da3e:	f023 0307 	bic.w	r3, r3, #7
 801da42:	3308      	adds	r3, #8
 801da44:	9303      	str	r3, [sp, #12]
 801da46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da48:	444b      	add	r3, r9
 801da4a:	9309      	str	r3, [sp, #36]	; 0x24
 801da4c:	e76d      	b.n	801d92a <_svfiprintf_r+0x4a>
 801da4e:	fb05 3202 	mla	r2, r5, r2, r3
 801da52:	2001      	movs	r0, #1
 801da54:	460f      	mov	r7, r1
 801da56:	e7a6      	b.n	801d9a6 <_svfiprintf_r+0xc6>
 801da58:	2300      	movs	r3, #0
 801da5a:	3701      	adds	r7, #1
 801da5c:	9305      	str	r3, [sp, #20]
 801da5e:	4619      	mov	r1, r3
 801da60:	250a      	movs	r5, #10
 801da62:	4638      	mov	r0, r7
 801da64:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da68:	3a30      	subs	r2, #48	; 0x30
 801da6a:	2a09      	cmp	r2, #9
 801da6c:	d903      	bls.n	801da76 <_svfiprintf_r+0x196>
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d0c8      	beq.n	801da04 <_svfiprintf_r+0x124>
 801da72:	9105      	str	r1, [sp, #20]
 801da74:	e7c6      	b.n	801da04 <_svfiprintf_r+0x124>
 801da76:	fb05 2101 	mla	r1, r5, r1, r2
 801da7a:	2301      	movs	r3, #1
 801da7c:	4607      	mov	r7, r0
 801da7e:	e7f0      	b.n	801da62 <_svfiprintf_r+0x182>
 801da80:	ab03      	add	r3, sp, #12
 801da82:	9300      	str	r3, [sp, #0]
 801da84:	4622      	mov	r2, r4
 801da86:	4b11      	ldr	r3, [pc, #68]	; (801dacc <_svfiprintf_r+0x1ec>)
 801da88:	a904      	add	r1, sp, #16
 801da8a:	4640      	mov	r0, r8
 801da8c:	f7fd fd50 	bl	801b530 <_printf_float>
 801da90:	f1b0 3fff 	cmp.w	r0, #4294967295
 801da94:	4681      	mov	r9, r0
 801da96:	d1d6      	bne.n	801da46 <_svfiprintf_r+0x166>
 801da98:	89a3      	ldrh	r3, [r4, #12]
 801da9a:	065b      	lsls	r3, r3, #25
 801da9c:	f53f af35 	bmi.w	801d90a <_svfiprintf_r+0x2a>
 801daa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801daa2:	b01d      	add	sp, #116	; 0x74
 801daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa8:	ab03      	add	r3, sp, #12
 801daaa:	9300      	str	r3, [sp, #0]
 801daac:	4622      	mov	r2, r4
 801daae:	4b07      	ldr	r3, [pc, #28]	; (801dacc <_svfiprintf_r+0x1ec>)
 801dab0:	a904      	add	r1, sp, #16
 801dab2:	4640      	mov	r0, r8
 801dab4:	f7fd fff2 	bl	801ba9c <_printf_i>
 801dab8:	e7ea      	b.n	801da90 <_svfiprintf_r+0x1b0>
 801daba:	bf00      	nop
 801dabc:	0801fb3c 	.word	0x0801fb3c
 801dac0:	0801fb42 	.word	0x0801fb42
 801dac4:	0801fb46 	.word	0x0801fb46
 801dac8:	0801b531 	.word	0x0801b531
 801dacc:	0801d82d 	.word	0x0801d82d

0801dad0 <__sfputc_r>:
 801dad0:	6893      	ldr	r3, [r2, #8]
 801dad2:	3b01      	subs	r3, #1
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	b410      	push	{r4}
 801dad8:	6093      	str	r3, [r2, #8]
 801dada:	da08      	bge.n	801daee <__sfputc_r+0x1e>
 801dadc:	6994      	ldr	r4, [r2, #24]
 801dade:	42a3      	cmp	r3, r4
 801dae0:	db01      	blt.n	801dae6 <__sfputc_r+0x16>
 801dae2:	290a      	cmp	r1, #10
 801dae4:	d103      	bne.n	801daee <__sfputc_r+0x1e>
 801dae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801daea:	f7fe baad 	b.w	801c048 <__swbuf_r>
 801daee:	6813      	ldr	r3, [r2, #0]
 801daf0:	1c58      	adds	r0, r3, #1
 801daf2:	6010      	str	r0, [r2, #0]
 801daf4:	7019      	strb	r1, [r3, #0]
 801daf6:	4608      	mov	r0, r1
 801daf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dafc:	4770      	bx	lr

0801dafe <__sfputs_r>:
 801dafe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db00:	4606      	mov	r6, r0
 801db02:	460f      	mov	r7, r1
 801db04:	4614      	mov	r4, r2
 801db06:	18d5      	adds	r5, r2, r3
 801db08:	42ac      	cmp	r4, r5
 801db0a:	d101      	bne.n	801db10 <__sfputs_r+0x12>
 801db0c:	2000      	movs	r0, #0
 801db0e:	e007      	b.n	801db20 <__sfputs_r+0x22>
 801db10:	463a      	mov	r2, r7
 801db12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db16:	4630      	mov	r0, r6
 801db18:	f7ff ffda 	bl	801dad0 <__sfputc_r>
 801db1c:	1c43      	adds	r3, r0, #1
 801db1e:	d1f3      	bne.n	801db08 <__sfputs_r+0xa>
 801db20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db24 <_vfiprintf_r>:
 801db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db28:	460c      	mov	r4, r1
 801db2a:	b09d      	sub	sp, #116	; 0x74
 801db2c:	4617      	mov	r7, r2
 801db2e:	461d      	mov	r5, r3
 801db30:	4606      	mov	r6, r0
 801db32:	b118      	cbz	r0, 801db3c <_vfiprintf_r+0x18>
 801db34:	6983      	ldr	r3, [r0, #24]
 801db36:	b90b      	cbnz	r3, 801db3c <_vfiprintf_r+0x18>
 801db38:	f7ff fa7a 	bl	801d030 <__sinit>
 801db3c:	4b7c      	ldr	r3, [pc, #496]	; (801dd30 <_vfiprintf_r+0x20c>)
 801db3e:	429c      	cmp	r4, r3
 801db40:	d158      	bne.n	801dbf4 <_vfiprintf_r+0xd0>
 801db42:	6874      	ldr	r4, [r6, #4]
 801db44:	89a3      	ldrh	r3, [r4, #12]
 801db46:	0718      	lsls	r0, r3, #28
 801db48:	d55e      	bpl.n	801dc08 <_vfiprintf_r+0xe4>
 801db4a:	6923      	ldr	r3, [r4, #16]
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d05b      	beq.n	801dc08 <_vfiprintf_r+0xe4>
 801db50:	2300      	movs	r3, #0
 801db52:	9309      	str	r3, [sp, #36]	; 0x24
 801db54:	2320      	movs	r3, #32
 801db56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db5a:	2330      	movs	r3, #48	; 0x30
 801db5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db60:	9503      	str	r5, [sp, #12]
 801db62:	f04f 0b01 	mov.w	fp, #1
 801db66:	46b8      	mov	r8, r7
 801db68:	4645      	mov	r5, r8
 801db6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801db6e:	b10b      	cbz	r3, 801db74 <_vfiprintf_r+0x50>
 801db70:	2b25      	cmp	r3, #37	; 0x25
 801db72:	d154      	bne.n	801dc1e <_vfiprintf_r+0xfa>
 801db74:	ebb8 0a07 	subs.w	sl, r8, r7
 801db78:	d00b      	beq.n	801db92 <_vfiprintf_r+0x6e>
 801db7a:	4653      	mov	r3, sl
 801db7c:	463a      	mov	r2, r7
 801db7e:	4621      	mov	r1, r4
 801db80:	4630      	mov	r0, r6
 801db82:	f7ff ffbc 	bl	801dafe <__sfputs_r>
 801db86:	3001      	adds	r0, #1
 801db88:	f000 80c2 	beq.w	801dd10 <_vfiprintf_r+0x1ec>
 801db8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db8e:	4453      	add	r3, sl
 801db90:	9309      	str	r3, [sp, #36]	; 0x24
 801db92:	f898 3000 	ldrb.w	r3, [r8]
 801db96:	2b00      	cmp	r3, #0
 801db98:	f000 80ba 	beq.w	801dd10 <_vfiprintf_r+0x1ec>
 801db9c:	2300      	movs	r3, #0
 801db9e:	f04f 32ff 	mov.w	r2, #4294967295
 801dba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dba6:	9304      	str	r3, [sp, #16]
 801dba8:	9307      	str	r3, [sp, #28]
 801dbaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbae:	931a      	str	r3, [sp, #104]	; 0x68
 801dbb0:	46a8      	mov	r8, r5
 801dbb2:	2205      	movs	r2, #5
 801dbb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 801dbb8:	485e      	ldr	r0, [pc, #376]	; (801dd34 <_vfiprintf_r+0x210>)
 801dbba:	f7e2 fb21 	bl	8000200 <memchr>
 801dbbe:	9b04      	ldr	r3, [sp, #16]
 801dbc0:	bb78      	cbnz	r0, 801dc22 <_vfiprintf_r+0xfe>
 801dbc2:	06d9      	lsls	r1, r3, #27
 801dbc4:	bf44      	itt	mi
 801dbc6:	2220      	movmi	r2, #32
 801dbc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbcc:	071a      	lsls	r2, r3, #28
 801dbce:	bf44      	itt	mi
 801dbd0:	222b      	movmi	r2, #43	; 0x2b
 801dbd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbd6:	782a      	ldrb	r2, [r5, #0]
 801dbd8:	2a2a      	cmp	r2, #42	; 0x2a
 801dbda:	d02a      	beq.n	801dc32 <_vfiprintf_r+0x10e>
 801dbdc:	9a07      	ldr	r2, [sp, #28]
 801dbde:	46a8      	mov	r8, r5
 801dbe0:	2000      	movs	r0, #0
 801dbe2:	250a      	movs	r5, #10
 801dbe4:	4641      	mov	r1, r8
 801dbe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbea:	3b30      	subs	r3, #48	; 0x30
 801dbec:	2b09      	cmp	r3, #9
 801dbee:	d969      	bls.n	801dcc4 <_vfiprintf_r+0x1a0>
 801dbf0:	b360      	cbz	r0, 801dc4c <_vfiprintf_r+0x128>
 801dbf2:	e024      	b.n	801dc3e <_vfiprintf_r+0x11a>
 801dbf4:	4b50      	ldr	r3, [pc, #320]	; (801dd38 <_vfiprintf_r+0x214>)
 801dbf6:	429c      	cmp	r4, r3
 801dbf8:	d101      	bne.n	801dbfe <_vfiprintf_r+0xda>
 801dbfa:	68b4      	ldr	r4, [r6, #8]
 801dbfc:	e7a2      	b.n	801db44 <_vfiprintf_r+0x20>
 801dbfe:	4b4f      	ldr	r3, [pc, #316]	; (801dd3c <_vfiprintf_r+0x218>)
 801dc00:	429c      	cmp	r4, r3
 801dc02:	bf08      	it	eq
 801dc04:	68f4      	ldreq	r4, [r6, #12]
 801dc06:	e79d      	b.n	801db44 <_vfiprintf_r+0x20>
 801dc08:	4621      	mov	r1, r4
 801dc0a:	4630      	mov	r0, r6
 801dc0c:	f7fe fa6e 	bl	801c0ec <__swsetup_r>
 801dc10:	2800      	cmp	r0, #0
 801dc12:	d09d      	beq.n	801db50 <_vfiprintf_r+0x2c>
 801dc14:	f04f 30ff 	mov.w	r0, #4294967295
 801dc18:	b01d      	add	sp, #116	; 0x74
 801dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc1e:	46a8      	mov	r8, r5
 801dc20:	e7a2      	b.n	801db68 <_vfiprintf_r+0x44>
 801dc22:	4a44      	ldr	r2, [pc, #272]	; (801dd34 <_vfiprintf_r+0x210>)
 801dc24:	1a80      	subs	r0, r0, r2
 801dc26:	fa0b f000 	lsl.w	r0, fp, r0
 801dc2a:	4318      	orrs	r0, r3
 801dc2c:	9004      	str	r0, [sp, #16]
 801dc2e:	4645      	mov	r5, r8
 801dc30:	e7be      	b.n	801dbb0 <_vfiprintf_r+0x8c>
 801dc32:	9a03      	ldr	r2, [sp, #12]
 801dc34:	1d11      	adds	r1, r2, #4
 801dc36:	6812      	ldr	r2, [r2, #0]
 801dc38:	9103      	str	r1, [sp, #12]
 801dc3a:	2a00      	cmp	r2, #0
 801dc3c:	db01      	blt.n	801dc42 <_vfiprintf_r+0x11e>
 801dc3e:	9207      	str	r2, [sp, #28]
 801dc40:	e004      	b.n	801dc4c <_vfiprintf_r+0x128>
 801dc42:	4252      	negs	r2, r2
 801dc44:	f043 0302 	orr.w	r3, r3, #2
 801dc48:	9207      	str	r2, [sp, #28]
 801dc4a:	9304      	str	r3, [sp, #16]
 801dc4c:	f898 3000 	ldrb.w	r3, [r8]
 801dc50:	2b2e      	cmp	r3, #46	; 0x2e
 801dc52:	d10e      	bne.n	801dc72 <_vfiprintf_r+0x14e>
 801dc54:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dc58:	2b2a      	cmp	r3, #42	; 0x2a
 801dc5a:	d138      	bne.n	801dcce <_vfiprintf_r+0x1aa>
 801dc5c:	9b03      	ldr	r3, [sp, #12]
 801dc5e:	1d1a      	adds	r2, r3, #4
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	9203      	str	r2, [sp, #12]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	bfb8      	it	lt
 801dc68:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc6c:	f108 0802 	add.w	r8, r8, #2
 801dc70:	9305      	str	r3, [sp, #20]
 801dc72:	4d33      	ldr	r5, [pc, #204]	; (801dd40 <_vfiprintf_r+0x21c>)
 801dc74:	f898 1000 	ldrb.w	r1, [r8]
 801dc78:	2203      	movs	r2, #3
 801dc7a:	4628      	mov	r0, r5
 801dc7c:	f7e2 fac0 	bl	8000200 <memchr>
 801dc80:	b140      	cbz	r0, 801dc94 <_vfiprintf_r+0x170>
 801dc82:	2340      	movs	r3, #64	; 0x40
 801dc84:	1b40      	subs	r0, r0, r5
 801dc86:	fa03 f000 	lsl.w	r0, r3, r0
 801dc8a:	9b04      	ldr	r3, [sp, #16]
 801dc8c:	4303      	orrs	r3, r0
 801dc8e:	f108 0801 	add.w	r8, r8, #1
 801dc92:	9304      	str	r3, [sp, #16]
 801dc94:	f898 1000 	ldrb.w	r1, [r8]
 801dc98:	482a      	ldr	r0, [pc, #168]	; (801dd44 <_vfiprintf_r+0x220>)
 801dc9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc9e:	2206      	movs	r2, #6
 801dca0:	f108 0701 	add.w	r7, r8, #1
 801dca4:	f7e2 faac 	bl	8000200 <memchr>
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	d037      	beq.n	801dd1c <_vfiprintf_r+0x1f8>
 801dcac:	4b26      	ldr	r3, [pc, #152]	; (801dd48 <_vfiprintf_r+0x224>)
 801dcae:	bb1b      	cbnz	r3, 801dcf8 <_vfiprintf_r+0x1d4>
 801dcb0:	9b03      	ldr	r3, [sp, #12]
 801dcb2:	3307      	adds	r3, #7
 801dcb4:	f023 0307 	bic.w	r3, r3, #7
 801dcb8:	3308      	adds	r3, #8
 801dcba:	9303      	str	r3, [sp, #12]
 801dcbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcbe:	444b      	add	r3, r9
 801dcc0:	9309      	str	r3, [sp, #36]	; 0x24
 801dcc2:	e750      	b.n	801db66 <_vfiprintf_r+0x42>
 801dcc4:	fb05 3202 	mla	r2, r5, r2, r3
 801dcc8:	2001      	movs	r0, #1
 801dcca:	4688      	mov	r8, r1
 801dccc:	e78a      	b.n	801dbe4 <_vfiprintf_r+0xc0>
 801dcce:	2300      	movs	r3, #0
 801dcd0:	f108 0801 	add.w	r8, r8, #1
 801dcd4:	9305      	str	r3, [sp, #20]
 801dcd6:	4619      	mov	r1, r3
 801dcd8:	250a      	movs	r5, #10
 801dcda:	4640      	mov	r0, r8
 801dcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dce0:	3a30      	subs	r2, #48	; 0x30
 801dce2:	2a09      	cmp	r2, #9
 801dce4:	d903      	bls.n	801dcee <_vfiprintf_r+0x1ca>
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d0c3      	beq.n	801dc72 <_vfiprintf_r+0x14e>
 801dcea:	9105      	str	r1, [sp, #20]
 801dcec:	e7c1      	b.n	801dc72 <_vfiprintf_r+0x14e>
 801dcee:	fb05 2101 	mla	r1, r5, r1, r2
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	4680      	mov	r8, r0
 801dcf6:	e7f0      	b.n	801dcda <_vfiprintf_r+0x1b6>
 801dcf8:	ab03      	add	r3, sp, #12
 801dcfa:	9300      	str	r3, [sp, #0]
 801dcfc:	4622      	mov	r2, r4
 801dcfe:	4b13      	ldr	r3, [pc, #76]	; (801dd4c <_vfiprintf_r+0x228>)
 801dd00:	a904      	add	r1, sp, #16
 801dd02:	4630      	mov	r0, r6
 801dd04:	f7fd fc14 	bl	801b530 <_printf_float>
 801dd08:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dd0c:	4681      	mov	r9, r0
 801dd0e:	d1d5      	bne.n	801dcbc <_vfiprintf_r+0x198>
 801dd10:	89a3      	ldrh	r3, [r4, #12]
 801dd12:	065b      	lsls	r3, r3, #25
 801dd14:	f53f af7e 	bmi.w	801dc14 <_vfiprintf_r+0xf0>
 801dd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd1a:	e77d      	b.n	801dc18 <_vfiprintf_r+0xf4>
 801dd1c:	ab03      	add	r3, sp, #12
 801dd1e:	9300      	str	r3, [sp, #0]
 801dd20:	4622      	mov	r2, r4
 801dd22:	4b0a      	ldr	r3, [pc, #40]	; (801dd4c <_vfiprintf_r+0x228>)
 801dd24:	a904      	add	r1, sp, #16
 801dd26:	4630      	mov	r0, r6
 801dd28:	f7fd feb8 	bl	801ba9c <_printf_i>
 801dd2c:	e7ec      	b.n	801dd08 <_vfiprintf_r+0x1e4>
 801dd2e:	bf00      	nop
 801dd30:	0801f9f4 	.word	0x0801f9f4
 801dd34:	0801fb3c 	.word	0x0801fb3c
 801dd38:	0801fa14 	.word	0x0801fa14
 801dd3c:	0801f9d4 	.word	0x0801f9d4
 801dd40:	0801fb42 	.word	0x0801fb42
 801dd44:	0801fb46 	.word	0x0801fb46
 801dd48:	0801b531 	.word	0x0801b531
 801dd4c:	0801daff 	.word	0x0801daff

0801dd50 <__sread>:
 801dd50:	b510      	push	{r4, lr}
 801dd52:	460c      	mov	r4, r1
 801dd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd58:	f000 f8e0 	bl	801df1c <_read_r>
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	bfab      	itete	ge
 801dd60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd62:	89a3      	ldrhlt	r3, [r4, #12]
 801dd64:	181b      	addge	r3, r3, r0
 801dd66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd6a:	bfac      	ite	ge
 801dd6c:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd6e:	81a3      	strhlt	r3, [r4, #12]
 801dd70:	bd10      	pop	{r4, pc}

0801dd72 <__swrite>:
 801dd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd76:	461f      	mov	r7, r3
 801dd78:	898b      	ldrh	r3, [r1, #12]
 801dd7a:	05db      	lsls	r3, r3, #23
 801dd7c:	4605      	mov	r5, r0
 801dd7e:	460c      	mov	r4, r1
 801dd80:	4616      	mov	r6, r2
 801dd82:	d505      	bpl.n	801dd90 <__swrite+0x1e>
 801dd84:	2302      	movs	r3, #2
 801dd86:	2200      	movs	r2, #0
 801dd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd8c:	f000 f874 	bl	801de78 <_lseek_r>
 801dd90:	89a3      	ldrh	r3, [r4, #12]
 801dd92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dd9a:	81a3      	strh	r3, [r4, #12]
 801dd9c:	4632      	mov	r2, r6
 801dd9e:	463b      	mov	r3, r7
 801dda0:	4628      	mov	r0, r5
 801dda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dda6:	f000 b823 	b.w	801ddf0 <_write_r>

0801ddaa <__sseek>:
 801ddaa:	b510      	push	{r4, lr}
 801ddac:	460c      	mov	r4, r1
 801ddae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddb2:	f000 f861 	bl	801de78 <_lseek_r>
 801ddb6:	1c43      	adds	r3, r0, #1
 801ddb8:	89a3      	ldrh	r3, [r4, #12]
 801ddba:	bf15      	itete	ne
 801ddbc:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ddc6:	81a3      	strheq	r3, [r4, #12]
 801ddc8:	bf18      	it	ne
 801ddca:	81a3      	strhne	r3, [r4, #12]
 801ddcc:	bd10      	pop	{r4, pc}

0801ddce <__sclose>:
 801ddce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddd2:	f000 b81f 	b.w	801de14 <_close_r>

0801ddd6 <__ascii_wctomb>:
 801ddd6:	b149      	cbz	r1, 801ddec <__ascii_wctomb+0x16>
 801ddd8:	2aff      	cmp	r2, #255	; 0xff
 801ddda:	bf85      	ittet	hi
 801dddc:	238a      	movhi	r3, #138	; 0x8a
 801ddde:	6003      	strhi	r3, [r0, #0]
 801dde0:	700a      	strbls	r2, [r1, #0]
 801dde2:	f04f 30ff 	movhi.w	r0, #4294967295
 801dde6:	bf98      	it	ls
 801dde8:	2001      	movls	r0, #1
 801ddea:	4770      	bx	lr
 801ddec:	4608      	mov	r0, r1
 801ddee:	4770      	bx	lr

0801ddf0 <_write_r>:
 801ddf0:	b538      	push	{r3, r4, r5, lr}
 801ddf2:	4c07      	ldr	r4, [pc, #28]	; (801de10 <_write_r+0x20>)
 801ddf4:	4605      	mov	r5, r0
 801ddf6:	4608      	mov	r0, r1
 801ddf8:	4611      	mov	r1, r2
 801ddfa:	2200      	movs	r2, #0
 801ddfc:	6022      	str	r2, [r4, #0]
 801ddfe:	461a      	mov	r2, r3
 801de00:	f7ea fa1c 	bl	800823c <_write>
 801de04:	1c43      	adds	r3, r0, #1
 801de06:	d102      	bne.n	801de0e <_write_r+0x1e>
 801de08:	6823      	ldr	r3, [r4, #0]
 801de0a:	b103      	cbz	r3, 801de0e <_write_r+0x1e>
 801de0c:	602b      	str	r3, [r5, #0]
 801de0e:	bd38      	pop	{r3, r4, r5, pc}
 801de10:	2000ba10 	.word	0x2000ba10

0801de14 <_close_r>:
 801de14:	b538      	push	{r3, r4, r5, lr}
 801de16:	4c06      	ldr	r4, [pc, #24]	; (801de30 <_close_r+0x1c>)
 801de18:	2300      	movs	r3, #0
 801de1a:	4605      	mov	r5, r0
 801de1c:	4608      	mov	r0, r1
 801de1e:	6023      	str	r3, [r4, #0]
 801de20:	f7f0 fd65 	bl	800e8ee <_close>
 801de24:	1c43      	adds	r3, r0, #1
 801de26:	d102      	bne.n	801de2e <_close_r+0x1a>
 801de28:	6823      	ldr	r3, [r4, #0]
 801de2a:	b103      	cbz	r3, 801de2e <_close_r+0x1a>
 801de2c:	602b      	str	r3, [r5, #0]
 801de2e:	bd38      	pop	{r3, r4, r5, pc}
 801de30:	2000ba10 	.word	0x2000ba10

0801de34 <_fstat_r>:
 801de34:	b538      	push	{r3, r4, r5, lr}
 801de36:	4c07      	ldr	r4, [pc, #28]	; (801de54 <_fstat_r+0x20>)
 801de38:	2300      	movs	r3, #0
 801de3a:	4605      	mov	r5, r0
 801de3c:	4608      	mov	r0, r1
 801de3e:	4611      	mov	r1, r2
 801de40:	6023      	str	r3, [r4, #0]
 801de42:	f7f0 fd60 	bl	800e906 <_fstat>
 801de46:	1c43      	adds	r3, r0, #1
 801de48:	d102      	bne.n	801de50 <_fstat_r+0x1c>
 801de4a:	6823      	ldr	r3, [r4, #0]
 801de4c:	b103      	cbz	r3, 801de50 <_fstat_r+0x1c>
 801de4e:	602b      	str	r3, [r5, #0]
 801de50:	bd38      	pop	{r3, r4, r5, pc}
 801de52:	bf00      	nop
 801de54:	2000ba10 	.word	0x2000ba10

0801de58 <_isatty_r>:
 801de58:	b538      	push	{r3, r4, r5, lr}
 801de5a:	4c06      	ldr	r4, [pc, #24]	; (801de74 <_isatty_r+0x1c>)
 801de5c:	2300      	movs	r3, #0
 801de5e:	4605      	mov	r5, r0
 801de60:	4608      	mov	r0, r1
 801de62:	6023      	str	r3, [r4, #0]
 801de64:	f7f0 fd5f 	bl	800e926 <_isatty>
 801de68:	1c43      	adds	r3, r0, #1
 801de6a:	d102      	bne.n	801de72 <_isatty_r+0x1a>
 801de6c:	6823      	ldr	r3, [r4, #0]
 801de6e:	b103      	cbz	r3, 801de72 <_isatty_r+0x1a>
 801de70:	602b      	str	r3, [r5, #0]
 801de72:	bd38      	pop	{r3, r4, r5, pc}
 801de74:	2000ba10 	.word	0x2000ba10

0801de78 <_lseek_r>:
 801de78:	b538      	push	{r3, r4, r5, lr}
 801de7a:	4c07      	ldr	r4, [pc, #28]	; (801de98 <_lseek_r+0x20>)
 801de7c:	4605      	mov	r5, r0
 801de7e:	4608      	mov	r0, r1
 801de80:	4611      	mov	r1, r2
 801de82:	2200      	movs	r2, #0
 801de84:	6022      	str	r2, [r4, #0]
 801de86:	461a      	mov	r2, r3
 801de88:	f7f0 fd58 	bl	800e93c <_lseek>
 801de8c:	1c43      	adds	r3, r0, #1
 801de8e:	d102      	bne.n	801de96 <_lseek_r+0x1e>
 801de90:	6823      	ldr	r3, [r4, #0]
 801de92:	b103      	cbz	r3, 801de96 <_lseek_r+0x1e>
 801de94:	602b      	str	r3, [r5, #0]
 801de96:	bd38      	pop	{r3, r4, r5, pc}
 801de98:	2000ba10 	.word	0x2000ba10

0801de9c <memmove>:
 801de9c:	4288      	cmp	r0, r1
 801de9e:	b510      	push	{r4, lr}
 801dea0:	eb01 0302 	add.w	r3, r1, r2
 801dea4:	d807      	bhi.n	801deb6 <memmove+0x1a>
 801dea6:	1e42      	subs	r2, r0, #1
 801dea8:	4299      	cmp	r1, r3
 801deaa:	d00a      	beq.n	801dec2 <memmove+0x26>
 801deac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801deb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801deb4:	e7f8      	b.n	801dea8 <memmove+0xc>
 801deb6:	4283      	cmp	r3, r0
 801deb8:	d9f5      	bls.n	801dea6 <memmove+0xa>
 801deba:	1881      	adds	r1, r0, r2
 801debc:	1ad2      	subs	r2, r2, r3
 801debe:	42d3      	cmn	r3, r2
 801dec0:	d100      	bne.n	801dec4 <memmove+0x28>
 801dec2:	bd10      	pop	{r4, pc}
 801dec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dec8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801decc:	e7f7      	b.n	801debe <memmove+0x22>

0801dece <_realloc_r>:
 801dece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded0:	4607      	mov	r7, r0
 801ded2:	4614      	mov	r4, r2
 801ded4:	460e      	mov	r6, r1
 801ded6:	b921      	cbnz	r1, 801dee2 <_realloc_r+0x14>
 801ded8:	4611      	mov	r1, r2
 801deda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dede:	f7fd ba39 	b.w	801b354 <_malloc_r>
 801dee2:	b922      	cbnz	r2, 801deee <_realloc_r+0x20>
 801dee4:	f7fd f9e8 	bl	801b2b8 <_free_r>
 801dee8:	4625      	mov	r5, r4
 801deea:	4628      	mov	r0, r5
 801deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801deee:	f000 f827 	bl	801df40 <_malloc_usable_size_r>
 801def2:	42a0      	cmp	r0, r4
 801def4:	d20f      	bcs.n	801df16 <_realloc_r+0x48>
 801def6:	4621      	mov	r1, r4
 801def8:	4638      	mov	r0, r7
 801defa:	f7fd fa2b 	bl	801b354 <_malloc_r>
 801defe:	4605      	mov	r5, r0
 801df00:	2800      	cmp	r0, #0
 801df02:	d0f2      	beq.n	801deea <_realloc_r+0x1c>
 801df04:	4631      	mov	r1, r6
 801df06:	4622      	mov	r2, r4
 801df08:	f7fd f9c2 	bl	801b290 <memcpy>
 801df0c:	4631      	mov	r1, r6
 801df0e:	4638      	mov	r0, r7
 801df10:	f7fd f9d2 	bl	801b2b8 <_free_r>
 801df14:	e7e9      	b.n	801deea <_realloc_r+0x1c>
 801df16:	4635      	mov	r5, r6
 801df18:	e7e7      	b.n	801deea <_realloc_r+0x1c>
	...

0801df1c <_read_r>:
 801df1c:	b538      	push	{r3, r4, r5, lr}
 801df1e:	4c07      	ldr	r4, [pc, #28]	; (801df3c <_read_r+0x20>)
 801df20:	4605      	mov	r5, r0
 801df22:	4608      	mov	r0, r1
 801df24:	4611      	mov	r1, r2
 801df26:	2200      	movs	r2, #0
 801df28:	6022      	str	r2, [r4, #0]
 801df2a:	461a      	mov	r2, r3
 801df2c:	f7f0 fcc2 	bl	800e8b4 <_read>
 801df30:	1c43      	adds	r3, r0, #1
 801df32:	d102      	bne.n	801df3a <_read_r+0x1e>
 801df34:	6823      	ldr	r3, [r4, #0]
 801df36:	b103      	cbz	r3, 801df3a <_read_r+0x1e>
 801df38:	602b      	str	r3, [r5, #0]
 801df3a:	bd38      	pop	{r3, r4, r5, pc}
 801df3c:	2000ba10 	.word	0x2000ba10

0801df40 <_malloc_usable_size_r>:
 801df40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df44:	1f18      	subs	r0, r3, #4
 801df46:	2b00      	cmp	r3, #0
 801df48:	bfbc      	itt	lt
 801df4a:	580b      	ldrlt	r3, [r1, r0]
 801df4c:	18c0      	addlt	r0, r0, r3
 801df4e:	4770      	bx	lr

0801df50 <_init>:
 801df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df52:	bf00      	nop
 801df54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df56:	bc08      	pop	{r3}
 801df58:	469e      	mov	lr, r3
 801df5a:	4770      	bx	lr

0801df5c <_fini>:
 801df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df5e:	bf00      	nop
 801df60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df62:	bc08      	pop	{r3}
 801df64:	469e      	mov	lr, r3
 801df66:	4770      	bx	lr
