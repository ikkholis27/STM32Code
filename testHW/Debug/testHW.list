
testHW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e68  0801e948  0801e948  0002e948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207b0  080207b0  00040380  2**0
                  CONTENTS
  4 .ARM          00000008  080207b0  080207b0  000307b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080207b8  080207b8  00040380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080207b8  080207b8  000307b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080207bc  080207bc  000307bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  080207c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b69c  20000380  08020b40  00040380  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ba1c  08020b40  0004ba1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042698  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000670e  00000000  00000000  00082a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003198  00000000  00000000  00089158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003090  00000000  00000000  0008c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b133  00000000  00000000  0008f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033ce8  00000000  00000000  000ba4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd375  00000000  00000000  000ee19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001eb510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e920  00000000  00000000  001eb564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e930 	.word	0x0801e930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	0801e930 	.word	0x0801e930

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <clearCrc>:

//---------------------------------------------------
// Initialize crc calculation
//---------------------------------------------------
void clearCrc()
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	_crc = _xorIn;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <clearCrc+0x14>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	801a      	strh	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	2000039c 	.word	0x2000039c

08000f18 <fastCrc>:
// Modbus: 		width=16 poly=0x8005 init=0xffff refin=true  refout=true  xorout=0x0000 check=0x4b37
// XModem: 		width=16 poly=0x1021 init=0x0000 refin=false refout=false xorout=0x0000 check=0x31c3
// CCITT-False:	width=16 poly=0x1021 init=0xffff refin=false refout=false xorout=0x0000 check=0x29b1
//---------------------------------------------------
unsigned int fastCrc(uint8_t data[], uint8_t start, uint16_t length, uint8_t reflectIn, uint8_t reflectOut, uint16_t polynomial, uint16_t xorIn, uint16_t xorOut, uint16_t msbMask, uint16_t mask)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	4608      	mov	r0, r1
 8000f22:	4611      	mov	r1, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	70fb      	strb	r3, [r7, #3]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	803b      	strh	r3, [r7, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	70bb      	strb	r3, [r7, #2]
  uint16_t crc = xorIn;
 8000f32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f34:	83fb      	strh	r3, [r7, #30]

	int j;
	uint8_t c;
	unsigned int bit;

	if (length == 0) return crc;
 8000f36:	883b      	ldrh	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <fastCrc+0x28>
 8000f3c:	8bfb      	ldrh	r3, [r7, #30]
 8000f3e:	e04b      	b.n	8000fd8 <fastCrc+0xc0>

	for (int i = start; i < (start + length); i++)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e031      	b.n	8000faa <fastCrc+0x92>
	{
		c = data[i];
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	75fb      	strb	r3, [r7, #23]

		if (reflectIn != 0)
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <fastCrc+0x4a>
			c = (uint8_t) reflect(c);
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f841 	bl	8000fe0 <reflect>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]

		j = 0x80;
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	61bb      	str	r3, [r7, #24]

		while (j > 0)
 8000f66:	e01a      	b.n	8000f9e <fastCrc+0x86>
		{
			bit = (unsigned int)(crc & msbMask);
 8000f68:	8bfa      	ldrh	r2, [r7, #30]
 8000f6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	613b      	str	r3, [r7, #16]
			crc <<= 1;
 8000f72:	8bfb      	ldrh	r3, [r7, #30]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	83fb      	strh	r3, [r7, #30]

			if ((c & j) != 0)
 8000f78:	7dfa      	ldrb	r2, [r7, #23]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <fastCrc+0x72>
			{
				bit = (unsigned int)(bit ^ msbMask);
 8000f82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4053      	eors	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
			}

			if (bit != 0)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <fastCrc+0x80>
			{
				crc ^= polynomial;
 8000f90:	8bfa      	ldrh	r2, [r7, #30]
 8000f92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f94:	4053      	eors	r3, r2
 8000f96:	83fb      	strh	r3, [r7, #30]
			}

			j >>= 1;
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	105b      	asrs	r3, r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
		while (j > 0)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dce1      	bgt.n	8000f68 <fastCrc+0x50>
	for (int i = start; i < (start + length); i++)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	883b      	ldrh	r3, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbc7      	blt.n	8000f46 <fastCrc+0x2e>
		}
	}

  if (reflectOut != 0)
 8000fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <fastCrc+0xbe>
    crc = (unsigned int)((reflect16((uint16_t) crc) ^ xorOut) & mask);
 8000fbe:	8bfb      	ldrh	r3, [r7, #30]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f83b 	bl	800103c <reflect16>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000fcc:	4053      	eors	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	83fb      	strh	r3, [r7, #30]

	return crc;
 8000fd6:	8bfb      	ldrh	r3, [r7, #30]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <reflect>:

//-------------------------------------------------------
// Reflects bit in a uint8_t
//-------------------------------------------------------
uint8_t reflect(uint8_t data)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  const uint8_t bits = 8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	72bb      	strb	r3, [r7, #10]
	unsigned long reflection = 0x00000000;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	// Reflect the data about the center bit.
	for (uint8_t bit = 0; bit < bits; bit++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	72fb      	strb	r3, [r7, #11]
 8000ff6:	e015      	b.n	8001024 <reflect+0x44>
	{
		// If the LSB bit is set, set the reflection of it.
		if ((data & 0x01) != 0)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00a      	beq.n	8001018 <reflect+0x38>
		{
			reflection |= (unsigned long)(1 << ((bits - 1) - bit));
 8001002:	7abb      	ldrb	r3, [r7, #10]
 8001004:	1e5a      	subs	r2, r3, #1
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2201      	movs	r2, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
		}

		data = (uint8_t)(data >> 1);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bit = 0; bit < bits; bit++)
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	3301      	adds	r3, #1
 8001022:	72fb      	strb	r3, [r7, #11]
 8001024:	7afa      	ldrb	r2, [r7, #11]
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3e5      	bcc.n	8000ff8 <reflect+0x18>
	}

	return reflection;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	b2db      	uxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <reflect16>:
//-------------------------------------------------------
// Reflects bit in a uint16_t
//-------------------------------------------------------
uint16_t reflect16(uint16_t data)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  const uint8_t bits = 16;
 8001046:	2310      	movs	r3, #16
 8001048:	72bb      	strb	r3, [r7, #10]
  unsigned long reflection = 0x00000000;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  // Reflect the data about the center bit.
  for (uint8_t bit = 0; bit < bits; bit++)
 800104e:	2300      	movs	r3, #0
 8001050:	72fb      	strb	r3, [r7, #11]
 8001052:	e015      	b.n	8001080 <reflect16+0x44>
  {
    // If the LSB bit is set, set the reflection of it.
    if ((data & 0x01) != 0)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00a      	beq.n	8001074 <reflect16+0x38>
    {
      reflection |= (unsigned long)(1 << ((bits - 1) - bit));
 800105e:	7abb      	ldrb	r3, [r7, #10]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2201      	movs	r2, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
    }

    data = (uint16_t)(data >> 1);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	80fb      	strh	r3, [r7, #6]
  for (uint8_t bit = 0; bit < bits; bit++)
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	3301      	adds	r3, #1
 800107e:	72fb      	strb	r3, [r7, #11]
 8001080:	7afa      	ldrb	r2, [r7, #11]
 8001082:	7abb      	ldrb	r3, [r7, #10]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3e5      	bcc.n	8001054 <reflect16+0x18>
  }

  return reflection;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	b29b      	uxth	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <XModemCrc>:

unsigned int XModemCrc(uint8_t data[], uint8_t start, uint16_t length){
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af06      	add	r7, sp, #24
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	803b      	strh	r3, [r7, #0]
            //  XModem parameters: poly=0x1021 init=0x0000 refin=false refout=false xorout=0x0000
    return fastCrc(data, start, length, false, false, 0x1021, 0x0000, 0x0000, 0x8000, 0xffff);
 80010a8:	883a      	ldrh	r2, [r7, #0]
 80010aa:	78f9      	ldrb	r1, [r7, #3]
 80010ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b0:	9305      	str	r3, [sp, #20]
 80010b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b6:	9304      	str	r3, [sp, #16]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9303      	str	r3, [sp, #12]
 80010bc:	2300      	movs	r3, #0
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	f241 0321 	movw	r3, #4129	; 0x1021
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff23 	bl	8000f18 <fastCrc>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <dataallclearMK6N>:
char datastrMK6N[1500];
unsigned char dataMK6N[BUFFSIZEMK6N];
char data2MK6N[100];

void dataallclearMK6N(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK6N; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e007      	b.n	80010f8 <dataallclearMK6N+0x1c>
	{
		dataMK6N[i] = '\0';
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <dataallclearMK6N+0x70>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK6N; i++)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f240 424b 	movw	r2, #1099	; 0x44b
 80010fe:	4293      	cmp	r3, r2
 8001100:	ddf2      	ble.n	80010e8 <dataallclearMK6N+0xc>
	}
	for (int i=0; i < 100; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	e007      	b.n	8001118 <dataallclearMK6N+0x3c>
	{
		data2MK6N[i] = '\0';
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <dataallclearMK6N+0x74>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 100; i++)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b63      	cmp	r3, #99	; 0x63
 800111c:	ddf4      	ble.n	8001108 <dataallclearMK6N+0x2c>
	}
	for (int i=0; i < 1500; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e007      	b.n	8001134 <dataallclearMK6N+0x58>
	{
		datastrMK6N[i] = '\0';
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <dataallclearMK6N+0x78>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1500; i++)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f240 52db 	movw	r2, #1499	; 0x5db
 800113a:	4293      	cmp	r3, r2
 800113c:	ddf2      	ble.n	8001124 <dataallclearMK6N+0x48>
	}
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	200039c0 	.word	0x200039c0
 8001150:	20002644 	.word	0x20002644
 8001154:	20001fe8 	.word	0x20001fe8

08001158 <datastrclearMK6N>:

void datastrclearMK6N(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
	for (int i=0; i < 1500; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	e007      	b.n	8001174 <datastrclearMK6N+0x1c>
	{
		datastrMK6N[i] = '\0';
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <datastrclearMK6N+0x34>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1500; i++)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3301      	adds	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f240 52db 	movw	r2, #1499	; 0x5db
 800117a:	4293      	cmp	r3, r2
 800117c:	ddf2      	ble.n	8001164 <datastrclearMK6N+0xc>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20001fe8 	.word	0x20001fe8

08001190 <datasizestrMK6N>:

int datasizestrMK6N(char buf[])
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 800119c:	e002      	b.n	80011a4 <datasizestrMK6N+0x14>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f6      	bne.n	800119e <datasizestrMK6N+0xe>
	return i+1;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <data2clearMK6N>:

void data2clearMK6N(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	for (int i=0; i < 100; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e007      	b.n	80011dc <data2clearMK6N+0x1c>
	{
		data2MK6N[i] = '\0';
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <data2clearMK6N+0x30>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 100; i++)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3301      	adds	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b63      	cmp	r3, #99	; 0x63
 80011e0:	ddf4      	ble.n	80011cc <data2clearMK6N+0xc>
	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20002644 	.word	0x20002644

080011f4 <setPaddingMK6N>:
//  time_t pctime = makeTime(myElements);
//  setTime(pctime); // Sync Arduino clock to the time received on the serial port
//}


void setPaddingMK6N(){
 80011f4:	b4b0      	push	{r4, r5, r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	466b      	mov	r3, sp
 80011fc:	461d      	mov	r5, r3
  unsigned int lentemp=data_lenMK6N, idx=0;
 80011fe:	4b61      	ldr	r3, [pc, #388]	; (8001384 <setPaddingMK6N+0x190>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  uint8_t datatemp[data_lenMK6N];
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <setPaddingMK6N+0x190>)
 800120a:	681c      	ldr	r4, [r3, #0]
 800120c:	1e63      	subs	r3, r4, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4623      	mov	r3, r4
 8001212:	4618      	mov	r0, r3
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	00cb      	lsls	r3, r1, #3
 8001222:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001226:	00c2      	lsls	r2, r0, #3
 8001228:	4623      	mov	r3, r4
 800122a:	4618      	mov	r0, r3
 800122c:	f04f 0100 	mov.w	r1, #0
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	00cb      	lsls	r3, r1, #3
 800123a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800123e:	00c2      	lsls	r2, r0, #3
 8001240:	4623      	mov	r3, r4
 8001242:	3307      	adds	r3, #7
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	ebad 0d03 	sub.w	sp, sp, r3
 800124c:	466b      	mov	r3, sp
 800124e:	3300      	adds	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e00b      	b.n	8001270 <setPaddingMK6N+0x7c>
    datatemp[i]=data2MK6N[i];
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <setPaddingMK6N+0x194>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4413      	add	r3, r2
 800125e:	7819      	ldrb	r1, [r3, #0]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	460a      	mov	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <setPaddingMK6N+0x190>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4293      	cmp	r3, r2
 800127a:	d3ed      	bcc.n	8001258 <setPaddingMK6N+0x64>
  }
  for(unsigned int i=0;i<lentemp;i++){
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e073      	b.n	800136a <setPaddingMK6N+0x176>
    if(i==0){
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <setPaddingMK6N+0xa0>
      data2MK6N[idx]=0x02;
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <setPaddingMK6N+0x194>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e064      	b.n	800135e <setPaddingMK6N+0x16a>
    }
    else if(i==lentemp-1){
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3b01      	subs	r3, #1
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	429a      	cmp	r2, r3
 800129c:	d105      	bne.n	80012aa <setPaddingMK6N+0xb6>
      data2MK6N[idx]=0x03;
 800129e:	4a3a      	ldr	r2, [pc, #232]	; (8001388 <setPaddingMK6N+0x194>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e059      	b.n	800135e <setPaddingMK6N+0x16a>
    }
    else if((datatemp[i]==0x13 && (i<lentemp-1 && i>0)) || datatemp[i]==0x02 || datatemp[i]==0x10 || datatemp[i]==0x11){
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b13      	cmp	r3, #19
 80012b4:	d107      	bne.n	80012c6 <setPaddingMK6N+0xd2>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d202      	bcs.n	80012c6 <setPaddingMK6N+0xd2>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <setPaddingMK6N+0xf6>
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d00b      	beq.n	80012ea <setPaddingMK6N+0xf6>
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d005      	beq.n	80012ea <setPaddingMK6N+0xf6>
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d112      	bne.n	8001310 <setPaddingMK6N+0x11c>
      data2MK6N[idx++]=0x10;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60fa      	str	r2, [r7, #12]
 80012f0:	4a25      	ldr	r2, [pc, #148]	; (8001388 <setPaddingMK6N+0x194>)
 80012f2:	2110      	movs	r1, #16
 80012f4:	54d1      	strb	r1, [r2, r3]
      data2MK6N[idx]=datatemp[i]|0x40;
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <setPaddingMK6N+0x194>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	460a      	mov	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e026      	b.n	800135e <setPaddingMK6N+0x16a>
    }
    else if(i<lentemp-1 && datatemp[i]==0x03){
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	429a      	cmp	r2, r3
 8001318:	d218      	bcs.n	800134c <setPaddingMK6N+0x158>
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d112      	bne.n	800134c <setPaddingMK6N+0x158>
      data2MK6N[idx++]=0x10;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	60fa      	str	r2, [r7, #12]
 800132c:	4a16      	ldr	r2, [pc, #88]	; (8001388 <setPaddingMK6N+0x194>)
 800132e:	2110      	movs	r1, #16
 8001330:	54d1      	strb	r1, [r2, r3]
      data2MK6N[idx]=datatemp[i]|0x40;
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133e:	b2d9      	uxtb	r1, r3
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <setPaddingMK6N+0x194>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e008      	b.n	800135e <setPaddingMK6N+0x16a>
    }
    else    data2MK6N[idx]=datatemp[i];
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <setPaddingMK6N+0x194>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
    idx++;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3301      	adds	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<lentemp;i++){
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d387      	bcc.n	8001282 <setPaddingMK6N+0x8e>
  }
  data_lenMK6N = idx;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <setPaddingMK6N+0x190>)
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	46ad      	mov	sp, r5
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bcb0      	pop	{r4, r5, r7}
 8001382:	4770      	bx	lr
 8001384:	20002968 	.word	0x20002968
 8001388:	20002644 	.word	0x20002644

0800138c <removePaddingMK6N>:

void removePaddingMK6N(){
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
  unsigned int lentemp=data_lenMK6N;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <removePaddingMK6N+0x90>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
//  char mydata[lentemp];
//  memcpy(mydata,dataMK6N,data_lenMK6N);
//  dataallclearMK6N();
  for(unsigned int i=0;i<data_lenMK6N;i++){
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	e02e      	b.n	80013fc <removePaddingMK6N+0x70>
    if(dataMK6N[i]==0x10){
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <removePaddingMK6N+0x94>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d125      	bne.n	80013f6 <removePaddingMK6N+0x6a>
      dataMK6N[i]=dataMK6N[i+1]^0x40;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <removePaddingMK6N+0x94>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80013b6:	b2d9      	uxtb	r1, r3
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <removePaddingMK6N+0x94>)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	460a      	mov	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK6N-1;j++){
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3301      	adds	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	e00b      	b.n	80013e2 <removePaddingMK6N+0x56>
    	  dataMK6N[j]=dataMK6N[j+1];
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a14      	ldr	r2, [pc, #80]	; (8001420 <removePaddingMK6N+0x94>)
 80013d0:	5cd1      	ldrb	r1, [r2, r3]
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <removePaddingMK6N+0x94>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	460a      	mov	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK6N-1;j++){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <removePaddingMK6N+0x90>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	461a      	mov	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d3ec      	bcc.n	80013ca <removePaddingMK6N+0x3e>
      }
      lentemp--;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <removePaddingMK6N+0x90>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	4293      	cmp	r3, r2
 8001406:	d3ca      	bcc.n	800139e <removePaddingMK6N+0x12>
    }
  }
  data_lenMK6N = lentemp;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <removePaddingMK6N+0x90>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20002968 	.word	0x20002968
 8001420:	200039c0 	.word	0x200039c0

08001424 <getRawDataMK6N>:

bool getRawDataMK6N(int headcmd){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    clearCrc();
 800142c:	f7ff fd68 	bl	8000f00 <clearCrc>
    data_lenMK6N = datasize(dataMK6N);
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <getRawDataMK6N+0x2c>)
 8001432:	f004 fdcd 	bl	8005fd0 <datasize>
 8001436:	4603      	mov	r3, r0
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <getRawDataMK6N+0x30>)
 800143a:	6013      	str	r3, [r2, #0]
    removePaddingMK6N();
 800143c:	f7ff ffa6 	bl	800138c <removePaddingMK6N>
    removeheadcrctailMK6N(headcmd);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f809 	bl	8001458 <removeheadcrctailMK6N>
//    valuecrc = XModemCrc(dataMK10E,0,data_lenMK10E-3);
//    if(checkcrcMK10E()){
//      SerialMonprintln("RemoveHeadCRCTail");
//      printData(dataMK10E,data_lenMK10E);
//      osDelay(100);
      return true;
 8001446:	2301      	movs	r3, #1
//    }
    return true;
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200039c0 	.word	0x200039c0
 8001454:	20002968 	.word	0x20002968

08001458 <removeheadcrctailMK6N>:
		datastr[i] = ptr++;
	}
	return len+sizeof(ptr);
}

void removeheadcrctailMK6N(int sizeheadcmd){
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  // remove CRC and Tail
  dataMK6N[data_lenMK6N-1]='\0';
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <removeheadcrctailMK6N+0x8c>)
 8001468:	2100      	movs	r1, #0
 800146a:	54d1      	strb	r1, [r2, r3]
  dataMK6N[data_lenMK6N-2]='\0';
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b02      	subs	r3, #2
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <removeheadcrctailMK6N+0x8c>)
 8001474:	2100      	movs	r1, #0
 8001476:	54d1      	strb	r1, [r2, r3]
  dataMK6N[data_lenMK6N-3]='\0';
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b03      	subs	r3, #3
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <removeheadcrctailMK6N+0x8c>)
 8001480:	2100      	movs	r1, #0
 8001482:	54d1      	strb	r1, [r2, r3]
  data_lenMK6N=data_lenMK6N-3;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b03      	subs	r3, #3
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 800148c:	6013      	str	r3, [r2, #0]
  //remove head
  for(unsigned int i=0;i<data_lenMK6N;i++){
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e013      	b.n	80014bc <removeheadcrctailMK6N+0x64>
    if(i+sizeheadcmd<=BUFFSIZEMK6N){
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	f240 424c 	movw	r2, #1100	; 0x44c
 800149e:	4293      	cmp	r3, r2
 80014a0:	d809      	bhi.n	80014b6 <removeheadcrctailMK6N+0x5e>
      dataMK6N[i]=dataMK6N[i+sizeheadcmd];
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <removeheadcrctailMK6N+0x8c>)
 80014aa:	5cd1      	ldrb	r1, [r2, r3]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <removeheadcrctailMK6N+0x8c>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	460a      	mov	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK6N;i++){
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d3e5      	bcc.n	8001494 <removeheadcrctailMK6N+0x3c>
    }
  }
  // update data_lenMK6N
  data_lenMK6N=data_lenMK6N-sizeheadcmd;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <removeheadcrctailMK6N+0x88>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20002968 	.word	0x20002968
 80014e4:	200039c0 	.word	0x200039c0

080014e8 <setSNMK6N>:
//        return 1;
    }
    return meterSNMK6N;
}

void setSNMK6N(char * datain, int len){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	dataallclearMK6N();
 80014f2:	f7ff fdf3 	bl	80010dc <dataallclearMK6N>
	data_lenMK6N=len;
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <setSNMK6N+0x28>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6013      	str	r3, [r2, #0]
	memcpy(meterSNMK6N,datain, len);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <setSNMK6N+0x2c>)
 8001504:	f01a f9a4 	bl	801b850 <memcpy>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20002968 	.word	0x20002968
 8001514:	200003a0 	.word	0x200003a0

08001518 <setCommandMK6N>:

void setCommandMK6N(char array[], uint16_t sizearr){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
  for(int i=0;i<sizearr;i++){
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e00b      	b.n	8001542 <setCommandMK6N+0x2a>
    data2MK6N[i]=array[i];
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	7819      	ldrb	r1, [r3, #0]
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <setCommandMK6N+0x94>)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<sizearr;i++){
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	dbef      	blt.n	800152a <setCommandMK6N+0x12>
  }
  data_lenMK6N = sizearr;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <setCommandMK6N+0x98>)
 800154e:	6013      	str	r3, [r2, #0]
  clearCrc();
 8001550:	f7ff fcd6 	bl	8000f00 <clearCrc>
   valuecrc = XModemCrc(array,0,sizearr);
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	461a      	mov	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fd9c 	bl	8001098 <XModemCrc>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <setCommandMK6N+0x9c>)
 8001566:	801a      	strh	r2, [r3, #0]
   data2MK6N[sizearr+2]=0x03;
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	3302      	adds	r3, #2
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <setCommandMK6N+0x94>)
 800156e:	2103      	movs	r1, #3
 8001570:	54d1      	strb	r1, [r2, r3]
   data2MK6N[sizearr+1]= (uint8_t) valuecrc;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <setCommandMK6N+0x9c>)
 8001574:	881a      	ldrh	r2, [r3, #0]
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	3301      	adds	r3, #1
 800157a:	b2d1      	uxtb	r1, r2
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <setCommandMK6N+0x94>)
 800157e:	54d1      	strb	r1, [r2, r3]
   valuecrc  = valuecrc >> 8;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <setCommandMK6N+0x9c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <setCommandMK6N+0x9c>)
 800158a:	801a      	strh	r2, [r3, #0]
   data2MK6N[sizearr]  = (uint8_t)valuecrc;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <setCommandMK6N+0x9c>)
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <setCommandMK6N+0x94>)
 8001596:	54d1      	strb	r1, [r2, r3]
   data_lenMK6N = sizearr+3;
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	3303      	adds	r3, #3
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <setCommandMK6N+0x98>)
 800159e:	6013      	str	r3, [r2, #0]
   setPaddingMK6N();
 80015a0:	f7ff fe28 	bl	80011f4 <setPaddingMK6N>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20002644 	.word	0x20002644
 80015b0:	20002968 	.word	0x20002968
 80015b4:	200028b6 	.word	0x200028b6

080015b8 <txInstantMK6N>:
		  *outstr++=datastrMK6N[i];
	  }
  }
}

void txInstantMK6N(int i){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08e      	sub	sp, #56	; 0x38
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
	dataallclearMK6N();
 80015c0:	f7ff fd8c 	bl	80010dc <dataallclearMK6N>
  char mychar[sizeof(instant)];
//  for(int i=0;i<3;i++){
    for(int j=0;j<sizeof(instant);j++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
 80015c8:	e031      	b.n	800162e <txInstantMK6N+0x76>
      mychar[j]=instant[j];
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <txInstantMK6N+0xa0>)
 80015cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ce:	4413      	add	r3, r2
 80015d0:	7819      	ldrb	r1, [r3, #0]
 80015d2:	f107 020c 	add.w	r2, r7, #12
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	4413      	add	r3, r2
 80015da:	460a      	mov	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
      if(j==9 || j==13 || j==17 || j==21 || j==25 || j==29 || j==33){
 80015de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d011      	beq.n	8001608 <txInstantMK6N+0x50>
 80015e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e6:	2b0d      	cmp	r3, #13
 80015e8:	d00e      	beq.n	8001608 <txInstantMK6N+0x50>
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	2b11      	cmp	r3, #17
 80015ee:	d00b      	beq.n	8001608 <txInstantMK6N+0x50>
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	2b15      	cmp	r3, #21
 80015f4:	d008      	beq.n	8001608 <txInstantMK6N+0x50>
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	2b19      	cmp	r3, #25
 80015fa:	d005      	beq.n	8001608 <txInstantMK6N+0x50>
 80015fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fe:	2b1d      	cmp	r3, #29
 8001600:	d002      	beq.n	8001608 <txInstantMK6N+0x50>
 8001602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001604:	2b21      	cmp	r3, #33	; 0x21
 8001606:	d10f      	bne.n	8001628 <txInstantMK6N+0x70>
        mychar[j]=instant[j] | i;
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <txInstantMK6N+0xa0>)
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b25a      	sxtb	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b25b      	sxtb	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b25b      	sxtb	r3, r3
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001622:	4413      	add	r3, r2
 8001624:	460a      	mov	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
    for(int j=0;j<sizeof(instant);j++){
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	3301      	adds	r3, #1
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	2b25      	cmp	r3, #37	; 0x25
 8001632:	d9ca      	bls.n	80015ca <txInstantMK6N+0x12>
      }
    }
    setCommandMK6N(mychar, sizeof(mychar));
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2126      	movs	r1, #38	; 0x26
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff6c 	bl	8001518 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 200);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <txInstantMK6N+0xa4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29a      	uxth	r2, r3
 8001646:	23c8      	movs	r3, #200	; 0xc8
 8001648:	4905      	ldr	r1, [pc, #20]	; (8001660 <txInstantMK6N+0xa8>)
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <txInstantMK6N+0xac>)
 800164c:	f012 fea6 	bl	801439c <HAL_UART_Transmit>
}
 8001650:	bf00      	nop
 8001652:	3738      	adds	r7, #56	; 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000068 	.word	0x20000068
 800165c:	20002968 	.word	0x20002968
 8001660:	20002644 	.word	0x20002644
 8001664:	20002770 	.word	0x20002770

08001668 <parsingDataRawInstantMK6N>:

void parsingDataRawInstantMK6N(unsigned char buf[],int len,int i){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
	dataallclearMK6N();
 8001674:	f7ff fd32 	bl	80010dc <dataallclearMK6N>
	memcpy(dataMK6N,buf,len);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	461a      	mov	r2, r3
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <parsingDataRawInstantMK6N+0x9c>)
 8001680:	f01a f8e6 	bl	801b850 <memcpy>
	data_lenMK6N=0;
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <parsingDataRawInstantMK6N+0xa0>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 800168a:	481e      	ldr	r0, [pc, #120]	; (8001704 <parsingDataRawInstantMK6N+0x9c>)
 800168c:	f004 fca0 	bl	8005fd0 <datasize>
 8001690:	4603      	mov	r3, r0
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <parsingDataRawInstantMK6N+0xa0>)
 8001694:	6013      	str	r3, [r2, #0]
    if(getRawDataMK6N(6)){
 8001696:	2006      	movs	r0, #6
 8001698:	f7ff fec4 	bl	8001424 <getRawDataMK6N>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d02b      	beq.n	80016fa <parsingDataRawInstantMK6N+0x92>
//      eoblenMK6N=9;
      for(int k=0;k<8;k++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e025      	b.n	80016f4 <parsingDataRawInstantMK6N+0x8c>
        hex2Float(dataMK6N,4*k);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4619      	mov	r1, r3
 80016ae:	4815      	ldr	r0, [pc, #84]	; (8001704 <parsingDataRawInstantMK6N+0x9c>)
 80016b0:	f004 fdb2 	bl	8006218 <hex2Float>
        if(i==0) instantA[k]=myFloat.f;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d107      	bne.n	80016ca <parsingDataRawInstantMK6N+0x62>
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <parsingDataRawInstantMK6N+0xa4>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <parsingDataRawInstantMK6N+0xa8>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e011      	b.n	80016ee <parsingDataRawInstantMK6N+0x86>
        else if(i==1) instantB[k]=myFloat.f;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <parsingDataRawInstantMK6N+0x78>
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <parsingDataRawInstantMK6N+0xa4>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490f      	ldr	r1, [pc, #60]	; (8001714 <parsingDataRawInstantMK6N+0xac>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e006      	b.n	80016ee <parsingDataRawInstantMK6N+0x86>
        else instantC[k]=myFloat.f;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <parsingDataRawInstantMK6N+0xa4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <parsingDataRawInstantMK6N+0xb0>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	601a      	str	r2, [r3, #0]
      for(int k=0;k<8;k++){
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	ddd6      	ble.n	80016a8 <parsingDataRawInstantMK6N+0x40>
//    	printf(" %.5f ",myFloat.f);
      }
//      printf(" \r\n");
    }
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200039c0 	.word	0x200039c0
 8001708:	20002968 	.word	0x20002968
 800170c:	20003f64 	.word	0x20003f64
 8001710:	20002894 	.word	0x20002894
 8001714:	20003840 	.word	0x20003840
 8001718:	20002700 	.word	0x20002700

0800171c <decodeJsonInstantMK6N>:

void decodeJsonInstantMK6N(char * outstr){
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	  if(decodeInstant()) {
 8001724:	f000 f944 	bl	80019b0 <decodeInstant>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <decodeJsonInstantMK6N+0x3c>
		  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e00a      	b.n	800174a <decodeJsonInstantMK6N+0x2e>
			  *outstr++=datastrMK6N[i];
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	4909      	ldr	r1, [pc, #36]	; (8001760 <decodeJsonInstantMK6N+0x44>)
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	440a      	add	r2, r1
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <decodeJsonInstantMK6N+0x44>)
 800174c:	f7ff fd20 	bl	8001190 <datasizestrMK6N>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4293      	cmp	r3, r2
 8001756:	dbed      	blt.n	8001734 <decodeJsonInstantMK6N+0x18>
		  }
	  }
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20001fe8 	.word	0x20001fe8

08001764 <checkregInstant>:

const char * checkregInstant(uint8_t reg){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b60      	cmp	r3, #96	; 0x60
 8001772:	f200 80ed 	bhi.w	8001950 <checkregInstant+0x1ec>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <checkregInstant+0x18>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	08001901 	.word	0x08001901
 8001780:	08001905 	.word	0x08001905
 8001784:	08001909 	.word	0x08001909
 8001788:	08001951 	.word	0x08001951
 800178c:	08001951 	.word	0x08001951
 8001790:	08001951 	.word	0x08001951
 8001794:	08001951 	.word	0x08001951
 8001798:	08001951 	.word	0x08001951
 800179c:	08001951 	.word	0x08001951
 80017a0:	08001951 	.word	0x08001951
 80017a4:	08001951 	.word	0x08001951
 80017a8:	08001951 	.word	0x08001951
 80017ac:	08001951 	.word	0x08001951
 80017b0:	08001951 	.word	0x08001951
 80017b4:	08001951 	.word	0x08001951
 80017b8:	08001951 	.word	0x08001951
 80017bc:	0800190d 	.word	0x0800190d
 80017c0:	08001911 	.word	0x08001911
 80017c4:	08001915 	.word	0x08001915
 80017c8:	08001951 	.word	0x08001951
 80017cc:	08001951 	.word	0x08001951
 80017d0:	08001951 	.word	0x08001951
 80017d4:	08001951 	.word	0x08001951
 80017d8:	08001951 	.word	0x08001951
 80017dc:	08001951 	.word	0x08001951
 80017e0:	08001951 	.word	0x08001951
 80017e4:	08001951 	.word	0x08001951
 80017e8:	08001951 	.word	0x08001951
 80017ec:	08001951 	.word	0x08001951
 80017f0:	08001951 	.word	0x08001951
 80017f4:	08001951 	.word	0x08001951
 80017f8:	08001951 	.word	0x08001951
 80017fc:	08001919 	.word	0x08001919
 8001800:	0800191d 	.word	0x0800191d
 8001804:	08001921 	.word	0x08001921
 8001808:	08001951 	.word	0x08001951
 800180c:	08001951 	.word	0x08001951
 8001810:	0800194d 	.word	0x0800194d
 8001814:	08001951 	.word	0x08001951
 8001818:	08001951 	.word	0x08001951
 800181c:	08001951 	.word	0x08001951
 8001820:	08001951 	.word	0x08001951
 8001824:	08001951 	.word	0x08001951
 8001828:	08001951 	.word	0x08001951
 800182c:	08001951 	.word	0x08001951
 8001830:	08001951 	.word	0x08001951
 8001834:	08001951 	.word	0x08001951
 8001838:	08001951 	.word	0x08001951
 800183c:	08001925 	.word	0x08001925
 8001840:	08001929 	.word	0x08001929
 8001844:	0800192d 	.word	0x0800192d
 8001848:	08001951 	.word	0x08001951
 800184c:	08001951 	.word	0x08001951
 8001850:	08001951 	.word	0x08001951
 8001854:	08001951 	.word	0x08001951
 8001858:	08001951 	.word	0x08001951
 800185c:	08001951 	.word	0x08001951
 8001860:	08001951 	.word	0x08001951
 8001864:	08001951 	.word	0x08001951
 8001868:	08001951 	.word	0x08001951
 800186c:	08001951 	.word	0x08001951
 8001870:	08001951 	.word	0x08001951
 8001874:	08001951 	.word	0x08001951
 8001878:	08001951 	.word	0x08001951
 800187c:	08001931 	.word	0x08001931
 8001880:	08001935 	.word	0x08001935
 8001884:	08001939 	.word	0x08001939
 8001888:	08001951 	.word	0x08001951
 800188c:	08001951 	.word	0x08001951
 8001890:	08001951 	.word	0x08001951
 8001894:	08001951 	.word	0x08001951
 8001898:	08001951 	.word	0x08001951
 800189c:	08001951 	.word	0x08001951
 80018a0:	08001951 	.word	0x08001951
 80018a4:	08001951 	.word	0x08001951
 80018a8:	08001951 	.word	0x08001951
 80018ac:	08001951 	.word	0x08001951
 80018b0:	08001951 	.word	0x08001951
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001951 	.word	0x08001951
 80018bc:	0800193d 	.word	0x0800193d
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001945 	.word	0x08001945
 80018c8:	08001951 	.word	0x08001951
 80018cc:	08001951 	.word	0x08001951
 80018d0:	08001951 	.word	0x08001951
 80018d4:	08001951 	.word	0x08001951
 80018d8:	08001951 	.word	0x08001951
 80018dc:	08001951 	.word	0x08001951
 80018e0:	08001951 	.word	0x08001951
 80018e4:	08001951 	.word	0x08001951
 80018e8:	08001951 	.word	0x08001951
 80018ec:	08001951 	.word	0x08001951
 80018f0:	08001951 	.word	0x08001951
 80018f4:	08001951 	.word	0x08001951
 80018f8:	08001951 	.word	0x08001951
 80018fc:	08001949 	.word	0x08001949
    case 0x00:
            return "\"3P59\"";
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <checkregInstant+0x1fc>)
 8001902:	e026      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x01:
            return "\"3P60\"";
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <checkregInstant+0x200>)
 8001906:	e024      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x02:
            return "\"3P61\"";
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <checkregInstant+0x204>)
 800190a:	e022      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x10:
            return "\"3P09\"";
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <checkregInstant+0x208>)
 800190e:	e020      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x11:
            return "\"3P10\"";
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <checkregInstant+0x20c>)
 8001912:	e01e      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x12:
            return "\"3P11\"";
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <checkregInstant+0x210>)
 8001916:	e01c      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x20:
            return "\"3P62\""; // phase angle A
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <checkregInstant+0x214>)
 800191a:	e01a      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x21:
            return "\"3P63\""; // phase angle B
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <checkregInstant+0x218>)
 800191e:	e018      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x22:
            return "\"3P64\""; // phase angle C
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <checkregInstant+0x21c>)
 8001922:	e016      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x30:
            return "\"3P01\""; // phase A Watts
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <checkregInstant+0x220>)
 8001926:	e014      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x31:
            return "\"3P02\""; // phase B Watts
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <checkregInstant+0x224>)
 800192a:	e012      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x32:
            return "\"3P03\""; // phase C Watts
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <checkregInstant+0x228>)
 800192e:	e010      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x40:
            return "\"3P43\""; // phase A Vars
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <checkregInstant+0x22c>)
 8001932:	e00e      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x41:
            return "\"3P44\""; // phase B Vars
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <checkregInstant+0x230>)
 8001936:	e00c      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x42:
            return "\"3P45\""; // phase C Vars
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <checkregInstant+0x234>)
 800193a:	e00a      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x50:
            return "\"3P05\""; // Total Apparent Power of A
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <checkregInstant+0x238>)
 800193e:	e008      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x51:
            return "\"3P06\""; // Total Apparent Power of B
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <checkregInstant+0x23c>)
 8001942:	e006      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x52:
            return "\"3P07\""; // Total Apparent Power of C
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <checkregInstant+0x240>)
 8001946:	e004      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x60:
            return "\"3P13\""; // Freq
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <checkregInstant+0x244>)
 800194a:	e002      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    case 0x25:
            return "\"3P42\""; 	// PF
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <checkregInstant+0x248>)
 800194e:	e000      	b.n	8001952 <checkregInstant+0x1ee>
            break;
    default:
    		return "\"3P42\""; 	// PF
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <checkregInstant+0x248>)
            break;
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	0801e954 	.word	0x0801e954
 8001964:	0801e95c 	.word	0x0801e95c
 8001968:	0801e964 	.word	0x0801e964
 800196c:	0801e96c 	.word	0x0801e96c
 8001970:	0801e974 	.word	0x0801e974
 8001974:	0801e97c 	.word	0x0801e97c
 8001978:	0801e984 	.word	0x0801e984
 800197c:	0801e98c 	.word	0x0801e98c
 8001980:	0801e994 	.word	0x0801e994
 8001984:	0801e99c 	.word	0x0801e99c
 8001988:	0801e9a4 	.word	0x0801e9a4
 800198c:	0801e9ac 	.word	0x0801e9ac
 8001990:	0801e9b4 	.word	0x0801e9b4
 8001994:	0801e9bc 	.word	0x0801e9bc
 8001998:	0801e9c4 	.word	0x0801e9c4
 800199c:	0801e9cc 	.word	0x0801e9cc
 80019a0:	0801e9d4 	.word	0x0801e9d4
 80019a4:	0801e9dc 	.word	0x0801e9dc
 80019a8:	0801e9e4 	.word	0x0801e9e4
 80019ac:	0801e9ec 	.word	0x0801e9ec

080019b0 <decodeInstant>:


bool decodeInstant(){
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	data_lenMK6N = 0;
 80019b6:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <decodeInstant+0x278>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 80019bc:	f7ff fbcc 	bl	8001158 <datastrclearMK6N>
//	printf("decodeInstant begin \r\n");

	strcpy(datastrMK6N,"{\"mid\":");
 80019c0:	4a9a      	ldr	r2, [pc, #616]	; (8001c2c <decodeInstant+0x27c>)
 80019c2:	4b9b      	ldr	r3, [pc, #620]	; (8001c30 <decodeInstant+0x280>)
 80019c4:	cb03      	ldmia	r3!, {r0, r1}
 80019c6:	6010      	str	r0, [r2, #0]
 80019c8:	6051      	str	r1, [r2, #4]
	strcat(datastrMK6N, meterSNMK6N);
 80019ca:	499a      	ldr	r1, [pc, #616]	; (8001c34 <decodeInstant+0x284>)
 80019cc:	4897      	ldr	r0, [pc, #604]	; (8001c2c <decodeInstant+0x27c>)
 80019ce:	f01a fd27 	bl	801c420 <strcat>
	strcat(datastrMK6N, ",\"pid\":\"InstantMK6N\",");
 80019d2:	4896      	ldr	r0, [pc, #600]	; (8001c2c <decodeInstant+0x27c>)
 80019d4:	f7fe fc06 	bl	80001e4 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <decodeInstant+0x27c>)
 80019de:	4413      	add	r3, r2
 80019e0:	4a95      	ldr	r2, [pc, #596]	; (8001c38 <decodeInstant+0x288>)
 80019e2:	461d      	mov	r5, r3
 80019e4:	4614      	mov	r4, r2
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	6028      	str	r0, [r5, #0]
 80019ea:	6069      	str	r1, [r5, #4]
 80019ec:	60aa      	str	r2, [r5, #8]
 80019ee:	60eb      	str	r3, [r5, #12]
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	6128      	str	r0, [r5, #16]
 80019f4:	88a3      	ldrh	r3, [r4, #4]
 80019f6:	82ab      	strh	r3, [r5, #20]
//	  data2clearMK10E();
//	  sprintf(data2MK10E,"%d,",timestamp_now);
//	  strcat(datastrMK6N, data2MK10E);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
//  datastr+="123456789,";
  for(int i=0;i<8;i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	e10a      	b.n	8001c14 <decodeInstant+0x264>
    if(i==7){
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d178      	bne.n	8001af6 <decodeInstant+0x146>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001a04:	2025      	movs	r0, #37	; 0x25
 8001a06:	f7ff fead 	bl	8001764 <checkregInstant>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4887      	ldr	r0, [pc, #540]	; (8001c2c <decodeInstant+0x27c>)
 8001a10:	f01a fd06 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001a14:	4885      	ldr	r0, [pc, #532]	; (8001c2c <decodeInstant+0x27c>)
 8001a16:	f7fe fbe5 	bl	80001e4 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <decodeInstant+0x27c>)
 8001a20:	4413      	add	r3, r2
 8001a22:	4986      	ldr	r1, [pc, #536]	; (8001c3c <decodeInstant+0x28c>)
 8001a24:	461a      	mov	r2, r3
 8001a26:	460b      	mov	r3, r1
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001a2c:	f7ff fbc8 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantA[i]);
 8001a30:	4a83      	ldr	r2, [pc, #524]	; (8001c40 <decodeInstant+0x290>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd94 	bl	8000568 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	497f      	ldr	r1, [pc, #508]	; (8001c44 <decodeInstant+0x294>)
 8001a46:	4880      	ldr	r0, [pc, #512]	; (8001c48 <decodeInstant+0x298>)
 8001a48:	f01a fcca 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001a4c:	497e      	ldr	r1, [pc, #504]	; (8001c48 <decodeInstant+0x298>)
 8001a4e:	4877      	ldr	r0, [pc, #476]	; (8001c2c <decodeInstant+0x27c>)
 8001a50:	f01a fce6 	bl	801c420 <strcat>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001a54:	2025      	movs	r0, #37	; 0x25
 8001a56:	f7ff fe85 	bl	8001764 <checkregInstant>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4873      	ldr	r0, [pc, #460]	; (8001c2c <decodeInstant+0x27c>)
 8001a60:	f01a fcde 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001a64:	4871      	ldr	r0, [pc, #452]	; (8001c2c <decodeInstant+0x27c>)
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <decodeInstant+0x27c>)
 8001a70:	4413      	add	r3, r2
 8001a72:	4972      	ldr	r1, [pc, #456]	; (8001c3c <decodeInstant+0x28c>)
 8001a74:	461a      	mov	r2, r3
 8001a76:	460b      	mov	r3, r1
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001a7c:	f7ff fba0 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantB[i]);
 8001a80:	4a72      	ldr	r2, [pc, #456]	; (8001c4c <decodeInstant+0x29c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd6c 	bl	8000568 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	496b      	ldr	r1, [pc, #428]	; (8001c44 <decodeInstant+0x294>)
 8001a96:	486c      	ldr	r0, [pc, #432]	; (8001c48 <decodeInstant+0x298>)
 8001a98:	f01a fca2 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001a9c:	496a      	ldr	r1, [pc, #424]	; (8001c48 <decodeInstant+0x298>)
 8001a9e:	4863      	ldr	r0, [pc, #396]	; (8001c2c <decodeInstant+0x27c>)
 8001aa0:	f01a fcbe 	bl	801c420 <strcat>
    	strcat(datastrMK6N, checkregInstant(0x25));
 8001aa4:	2025      	movs	r0, #37	; 0x25
 8001aa6:	f7ff fe5d 	bl	8001764 <checkregInstant>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4619      	mov	r1, r3
 8001aae:	485f      	ldr	r0, [pc, #380]	; (8001c2c <decodeInstant+0x27c>)
 8001ab0:	f01a fcb6 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001ab4:	485d      	ldr	r0, [pc, #372]	; (8001c2c <decodeInstant+0x27c>)
 8001ab6:	f7fe fb95 	bl	80001e4 <strlen>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <decodeInstant+0x27c>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	495e      	ldr	r1, [pc, #376]	; (8001c3c <decodeInstant+0x28c>)
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001acc:	f7ff fb78 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f}",instantC[i]);
 8001ad0:	4a5f      	ldr	r2, [pc, #380]	; (8001c50 <decodeInstant+0x2a0>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd44 	bl	8000568 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	495b      	ldr	r1, [pc, #364]	; (8001c54 <decodeInstant+0x2a4>)
 8001ae6:	4858      	ldr	r0, [pc, #352]	; (8001c48 <decodeInstant+0x298>)
 8001ae8:	f01a fc7a 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001aec:	4956      	ldr	r1, [pc, #344]	; (8001c48 <decodeInstant+0x298>)
 8001aee:	484f      	ldr	r0, [pc, #316]	; (8001c2c <decodeInstant+0x27c>)
 8001af0:	f01a fc96 	bl	801c420 <strcat>
 8001af4:	e08b      	b.n	8001c0e <decodeInstant+0x25e>
//      datastr+="}";
    }
    else {
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fe30 	bl	8001764 <checkregInstant>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4848      	ldr	r0, [pc, #288]	; (8001c2c <decodeInstant+0x27c>)
 8001b0a:	f01a fc89 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001b0e:	4847      	ldr	r0, [pc, #284]	; (8001c2c <decodeInstant+0x27c>)
 8001b10:	f7fe fb68 	bl	80001e4 <strlen>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <decodeInstant+0x27c>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4947      	ldr	r1, [pc, #284]	; (8001c3c <decodeInstant+0x28c>)
 8001b1e:	461a      	mov	r2, r3
 8001b20:	460b      	mov	r3, r1
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001b26:	f7ff fb4b 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantA[i]);
 8001b2a:	4a45      	ldr	r2, [pc, #276]	; (8001c40 <decodeInstant+0x290>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fd17 	bl	8000568 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4941      	ldr	r1, [pc, #260]	; (8001c44 <decodeInstant+0x294>)
 8001b40:	4841      	ldr	r0, [pc, #260]	; (8001c48 <decodeInstant+0x298>)
 8001b42:	f01a fc4d 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001b46:	4940      	ldr	r1, [pc, #256]	; (8001c48 <decodeInstant+0x298>)
 8001b48:	4838      	ldr	r0, [pc, #224]	; (8001c2c <decodeInstant+0x27c>)
 8001b4a:	f01a fc69 	bl	801c420 <strcat>
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4 | 0x01));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fe00 	bl	8001764 <checkregInstant>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4830      	ldr	r0, [pc, #192]	; (8001c2c <decodeInstant+0x27c>)
 8001b6a:	f01a fc59 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001b6e:	482f      	ldr	r0, [pc, #188]	; (8001c2c <decodeInstant+0x27c>)
 8001b70:	f7fe fb38 	bl	80001e4 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <decodeInstant+0x27c>)
 8001b7a:	4413      	add	r3, r2
 8001b7c:	492f      	ldr	r1, [pc, #188]	; (8001c3c <decodeInstant+0x28c>)
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001b86:	f7ff fb1b 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantB[i]);
 8001b8a:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <decodeInstant+0x29c>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fce7 	bl	8000568 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4929      	ldr	r1, [pc, #164]	; (8001c44 <decodeInstant+0x294>)
 8001ba0:	4829      	ldr	r0, [pc, #164]	; (8001c48 <decodeInstant+0x298>)
 8001ba2:	f01a fc1d 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001ba6:	4928      	ldr	r1, [pc, #160]	; (8001c48 <decodeInstant+0x298>)
 8001ba8:	4820      	ldr	r0, [pc, #128]	; (8001c2c <decodeInstant+0x27c>)
 8001baa:	f01a fc39 	bl	801c420 <strcat>
    	strcat(datastrMK6N, checkregInstant((uint8_t)i<<4 | 0x02));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fdd0 	bl	8001764 <checkregInstant>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <decodeInstant+0x27c>)
 8001bca:	f01a fc29 	bl	801c420 <strcat>
    	strcat(datastrMK6N, ":");
 8001bce:	4817      	ldr	r0, [pc, #92]	; (8001c2c <decodeInstant+0x27c>)
 8001bd0:	f7fe fb08 	bl	80001e4 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <decodeInstant+0x27c>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	4917      	ldr	r1, [pc, #92]	; (8001c3c <decodeInstant+0x28c>)
 8001bde:	461a      	mov	r2, r3
 8001be0:	460b      	mov	r3, r1
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	8013      	strh	r3, [r2, #0]
    	data2clearMK6N();
 8001be6:	f7ff faeb 	bl	80011c0 <data2clearMK6N>
    	sprintf(data2MK6N,"%.5f,",instantC[i]);
 8001bea:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <decodeInstant+0x2a0>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcb7 	bl	8000568 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4911      	ldr	r1, [pc, #68]	; (8001c44 <decodeInstant+0x294>)
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <decodeInstant+0x298>)
 8001c02:	f01a fbed 	bl	801c3e0 <siprintf>
    	strcat(datastrMK6N, data2MK6N);
 8001c06:	4910      	ldr	r1, [pc, #64]	; (8001c48 <decodeInstant+0x298>)
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <decodeInstant+0x27c>)
 8001c0a:	f01a fc09 	bl	801c420 <strcat>
  for(int i=0;i<8;i++){
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3301      	adds	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	f77f aef1 	ble.w	80019fe <decodeInstant+0x4e>
    }
  }
//  SerialMonprintlnMK6N(datastrMK6N);
    return true;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20002968 	.word	0x20002968
 8001c2c:	20001fe8 	.word	0x20001fe8
 8001c30:	0801e9f4 	.word	0x0801e9f4
 8001c34:	200003a0 	.word	0x200003a0
 8001c38:	0801e9fc 	.word	0x0801e9fc
 8001c3c:	0801ea14 	.word	0x0801ea14
 8001c40:	20002894 	.word	0x20002894
 8001c44:	0801ea18 	.word	0x0801ea18
 8001c48:	20002644 	.word	0x20002644
 8001c4c:	20003840 	.word	0x20003840
 8001c50:	20002700 	.word	0x20002700
 8001c54:	0801ea20 	.word	0x0801ea20

08001c58 <checkregLPMK6N>:

// ----------------------- LP --------------------------------
const char * checkregLPMK6N(uint8_t reg){
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b60      	cmp	r3, #96	; 0x60
 8001c66:	f200 80ed 	bhi.w	8001e44 <checkregLPMK6N+0x1ec>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <checkregLPMK6N+0x18>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001df5 	.word	0x08001df5
 8001c74:	08001df9 	.word	0x08001df9
 8001c78:	08001dfd 	.word	0x08001dfd
 8001c7c:	08001e01 	.word	0x08001e01
 8001c80:	08001e05 	.word	0x08001e05
 8001c84:	08001e09 	.word	0x08001e09
 8001c88:	08001e0d 	.word	0x08001e0d
 8001c8c:	08001e11 	.word	0x08001e11
 8001c90:	08001e15 	.word	0x08001e15
 8001c94:	08001e19 	.word	0x08001e19
 8001c98:	08001e1d 	.word	0x08001e1d
 8001c9c:	08001e21 	.word	0x08001e21
 8001ca0:	08001e25 	.word	0x08001e25
 8001ca4:	08001e29 	.word	0x08001e29
 8001ca8:	08001e2d 	.word	0x08001e2d
 8001cac:	08001e31 	.word	0x08001e31
 8001cb0:	08001e45 	.word	0x08001e45
 8001cb4:	08001e45 	.word	0x08001e45
 8001cb8:	08001e45 	.word	0x08001e45
 8001cbc:	08001e45 	.word	0x08001e45
 8001cc0:	08001e45 	.word	0x08001e45
 8001cc4:	08001e45 	.word	0x08001e45
 8001cc8:	08001e45 	.word	0x08001e45
 8001ccc:	08001e45 	.word	0x08001e45
 8001cd0:	08001e45 	.word	0x08001e45
 8001cd4:	08001e45 	.word	0x08001e45
 8001cd8:	08001e45 	.word	0x08001e45
 8001cdc:	08001e45 	.word	0x08001e45
 8001ce0:	08001e45 	.word	0x08001e45
 8001ce4:	08001e45 	.word	0x08001e45
 8001ce8:	08001e45 	.word	0x08001e45
 8001cec:	08001e45 	.word	0x08001e45
 8001cf0:	08001e45 	.word	0x08001e45
 8001cf4:	08001e45 	.word	0x08001e45
 8001cf8:	08001e45 	.word	0x08001e45
 8001cfc:	08001e45 	.word	0x08001e45
 8001d00:	08001e45 	.word	0x08001e45
 8001d04:	08001e41 	.word	0x08001e41
 8001d08:	08001e45 	.word	0x08001e45
 8001d0c:	08001e45 	.word	0x08001e45
 8001d10:	08001e45 	.word	0x08001e45
 8001d14:	08001e45 	.word	0x08001e45
 8001d18:	08001e45 	.word	0x08001e45
 8001d1c:	08001e45 	.word	0x08001e45
 8001d20:	08001e45 	.word	0x08001e45
 8001d24:	08001e45 	.word	0x08001e45
 8001d28:	08001e45 	.word	0x08001e45
 8001d2c:	08001e45 	.word	0x08001e45
 8001d30:	08001e45 	.word	0x08001e45
 8001d34:	08001e45 	.word	0x08001e45
 8001d38:	08001e45 	.word	0x08001e45
 8001d3c:	08001e45 	.word	0x08001e45
 8001d40:	08001e45 	.word	0x08001e45
 8001d44:	08001e45 	.word	0x08001e45
 8001d48:	08001e45 	.word	0x08001e45
 8001d4c:	08001e45 	.word	0x08001e45
 8001d50:	08001e45 	.word	0x08001e45
 8001d54:	08001e45 	.word	0x08001e45
 8001d58:	08001e45 	.word	0x08001e45
 8001d5c:	08001e45 	.word	0x08001e45
 8001d60:	08001e45 	.word	0x08001e45
 8001d64:	08001e45 	.word	0x08001e45
 8001d68:	08001e45 	.word	0x08001e45
 8001d6c:	08001e45 	.word	0x08001e45
 8001d70:	08001e45 	.word	0x08001e45
 8001d74:	08001e45 	.word	0x08001e45
 8001d78:	08001e45 	.word	0x08001e45
 8001d7c:	08001e45 	.word	0x08001e45
 8001d80:	08001e45 	.word	0x08001e45
 8001d84:	08001e45 	.word	0x08001e45
 8001d88:	08001e45 	.word	0x08001e45
 8001d8c:	08001e45 	.word	0x08001e45
 8001d90:	08001e45 	.word	0x08001e45
 8001d94:	08001e45 	.word	0x08001e45
 8001d98:	08001e45 	.word	0x08001e45
 8001d9c:	08001e45 	.word	0x08001e45
 8001da0:	08001e45 	.word	0x08001e45
 8001da4:	08001e45 	.word	0x08001e45
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e45 	.word	0x08001e45
 8001db0:	08001e45 	.word	0x08001e45
 8001db4:	08001e35 	.word	0x08001e35
 8001db8:	08001e39 	.word	0x08001e39
 8001dbc:	08001e45 	.word	0x08001e45
 8001dc0:	08001e45 	.word	0x08001e45
 8001dc4:	08001e45 	.word	0x08001e45
 8001dc8:	08001e45 	.word	0x08001e45
 8001dcc:	08001e45 	.word	0x08001e45
 8001dd0:	08001e45 	.word	0x08001e45
 8001dd4:	08001e45 	.word	0x08001e45
 8001dd8:	08001e45 	.word	0x08001e45
 8001ddc:	08001e45 	.word	0x08001e45
 8001de0:	08001e45 	.word	0x08001e45
 8001de4:	08001e45 	.word	0x08001e45
 8001de8:	08001e45 	.word	0x08001e45
 8001dec:	08001e45 	.word	0x08001e45
 8001df0:	08001e3d 	.word	0x08001e3d
    case 0x00:
            return "\"3P59\"";
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <checkregLPMK6N+0x1fc>)
 8001df6:	e026      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x01:
            return "\"3P60\"";
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <checkregLPMK6N+0x200>)
 8001dfa:	e024      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x02:
            return "\"3P61\"";
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <checkregLPMK6N+0x204>)
 8001dfe:	e022      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x03:
            return "\"3P09\"";
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <checkregLPMK6N+0x208>)
 8001e02:	e020      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x04:
            return "\"3P10\"";
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <checkregLPMK6N+0x20c>)
 8001e06:	e01e      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x05:
            return "\"3P11\"";
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <checkregLPMK6N+0x210>)
 8001e0a:	e01c      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x06:
            return "\"3P62\""; // phase angle A
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <checkregLPMK6N+0x214>)
 8001e0e:	e01a      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x07:
            return "\"3P63\""; // phase angle B
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <checkregLPMK6N+0x218>)
 8001e12:	e018      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x08:
            return "\"3P64\""; // phase angle C
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <checkregLPMK6N+0x21c>)
 8001e16:	e016      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x09:
            return "\"3P01\""; // phase A Watts
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <checkregLPMK6N+0x220>)
 8001e1a:	e014      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0A:
            return "\"3P02\""; // phase B Watts
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <checkregLPMK6N+0x224>)
 8001e1e:	e012      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0B:
            return "\"3P03\""; // phase C Watts
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <checkregLPMK6N+0x228>)
 8001e22:	e010      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0C:
            return "\"3P43\""; // phase A Vars
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <checkregLPMK6N+0x22c>)
 8001e26:	e00e      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0D:
            return "\"3P44\""; // phase B Vars
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <checkregLPMK6N+0x230>)
 8001e2a:	e00c      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0E:
            return "\"3P45\""; // phase C Vars
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <checkregLPMK6N+0x234>)
 8001e2e:	e00a      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x0F:
            return "\"3P05\""; // Total Apparent Power of A
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <checkregLPMK6N+0x238>)
 8001e32:	e008      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x51:
            return "\"3P06\""; // Total Apparent Power of B
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <checkregLPMK6N+0x23c>)
 8001e36:	e006      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x52:
            return "\"3P07\""; // Total Apparent Power of C
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <checkregLPMK6N+0x240>)
 8001e3a:	e004      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x60:
            return "\"3P13\""; // Freq
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <checkregLPMK6N+0x244>)
 8001e3e:	e002      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    case 0x25:
            return "\"3P42\"";   // PF
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <checkregLPMK6N+0x248>)
 8001e42:	e000      	b.n	8001e46 <checkregLPMK6N+0x1ee>
            break;
    default:
            return "\"3P42\"";   // PF
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <checkregLPMK6N+0x248>)
            break;
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	0801e954 	.word	0x0801e954
 8001e58:	0801e95c 	.word	0x0801e95c
 8001e5c:	0801e964 	.word	0x0801e964
 8001e60:	0801e96c 	.word	0x0801e96c
 8001e64:	0801e974 	.word	0x0801e974
 8001e68:	0801e97c 	.word	0x0801e97c
 8001e6c:	0801e984 	.word	0x0801e984
 8001e70:	0801e98c 	.word	0x0801e98c
 8001e74:	0801e994 	.word	0x0801e994
 8001e78:	0801e99c 	.word	0x0801e99c
 8001e7c:	0801e9a4 	.word	0x0801e9a4
 8001e80:	0801e9ac 	.word	0x0801e9ac
 8001e84:	0801e9b4 	.word	0x0801e9b4
 8001e88:	0801e9bc 	.word	0x0801e9bc
 8001e8c:	0801e9c4 	.word	0x0801e9c4
 8001e90:	0801e9cc 	.word	0x0801e9cc
 8001e94:	0801e9d4 	.word	0x0801e9d4
 8001e98:	0801e9dc 	.word	0x0801e9dc
 8001e9c:	0801e9e4 	.word	0x0801e9e4
 8001ea0:	0801e9ec 	.word	0x0801e9ec

08001ea4 <decodelpdata>:

int decodelpdata(){
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
//    uint8_t mylpdata[data_lenMK6N+1];

  for(int i=0;i<jmlchannelMK6N;i++){
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e067      	b.n	8001f80 <decodelpdata+0xdc>
    hex2Long(dataMK6N,i*4+2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4837      	ldr	r0, [pc, #220]	; (8001f98 <decodelpdata+0xf4>)
 8001eba:	f004 f9f3 	bl	80062a4 <hex2Long>
    lpdatalong[i]=myFloat.l;
 8001ebe:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <decodelpdata+0xf8>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4937      	ldr	r1, [pc, #220]	; (8001fa0 <decodelpdata+0xfc>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdataulong[i]=myFloat.ul;
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <decodelpdata+0xf8>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <decodelpdata+0x100>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if(lptype[i+1]==0x4F){
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a33      	ldr	r2, [pc, #204]	; (8001fa8 <decodelpdata+0x104>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	2b4f      	cmp	r3, #79	; 0x4f
 8001ee0:	d120      	bne.n	8001f24 <decodelpdata+0x80>
      lpdata[i]=(double) lpdatalong[i]*lpscaleMK6N[i+1];    
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <decodelpdata+0xfc>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb2a 	bl	8000544 <__aeabi_i2d>
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <decodelpdata+0x108>)
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb31 	bl	8000568 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f7fe fb83 	bl	8000618 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4826      	ldr	r0, [pc, #152]	; (8001fb0 <decodelpdata+0x10c>)
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	00c9      	lsls	r1, r1, #3
 8001f1c:	4401      	add	r1, r0
 8001f1e:	e9c1 2300 	strd	r2, r3, [r1]
 8001f22:	e02a      	b.n	8001f7a <decodelpdata+0xd6>
    }
    else if(lptype[i+1]==0x46){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <decodelpdata+0x104>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	2b46      	cmp	r3, #70	; 0x46
 8001f2e:	d124      	bne.n	8001f7a <decodelpdata+0xd6>
      hex2Float(dataMK6N,i*4+2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	4619      	mov	r1, r3
 8001f38:	4817      	ldr	r0, [pc, #92]	; (8001f98 <decodelpdata+0xf4>)
 8001f3a:	f004 f96d 	bl	8006218 <hex2Float>
      lpdata[i]=(double) myFloat.f*lpscaleMK6N[i+1];
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <decodelpdata+0xf8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb10 	bl	8000568 <__aeabi_f2d>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	460d      	mov	r5, r1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4a16      	ldr	r2, [pc, #88]	; (8001fac <decodelpdata+0x108>)
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fb05 	bl	8000568 <__aeabi_f2d>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe fb57 	bl	8000618 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <decodelpdata+0x10c>)
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	00c9      	lsls	r1, r1, #3
 8001f74:	4401      	add	r1, r0
 8001f76:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i=0;i<jmlchannelMK6N;i++){
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <decodelpdata+0x110>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	db91      	blt.n	8001eb0 <decodelpdata+0xc>
    }
//    printf("%d %.5f %.5f\r\n",lpdatalong[i],lpscaleMK6N[i+1],lpdata[i]);
  }
  return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bdb0      	pop	{r4, r5, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200039c0 	.word	0x200039c0
 8001f9c:	20003f64 	.word	0x20003f64
 8001fa0:	20002930 	.word	0x20002930
 8001fa4:	20002838 	.word	0x20002838
 8001fa8:	20002f7c 	.word	0x20002f7c
 8001fac:	200037b0 	.word	0x200037b0
 8001fb0:	20003740 	.word	0x20003740
 8001fb4:	200036f8 	.word	0x200036f8

08001fb8 <txlpMK6NRec>:
      }
  }
//  return "{\"nodata\":0}";
}

void txlpMK6NRec(int lp_index){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	dataallclearMK6N();
 8001fc0:	f7ff f88c 	bl	80010dc <dataallclearMK6N>
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  unsigned long lpindex = lp_index;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	61fb      	str	r3, [r7, #28]
  lprecordMK6N = lpindex;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <txlpMK6NRec+0xbc>)
 8001fcc:	6013      	str	r3, [r2, #0]
  char mydata[17];
  mydata[0]=0x02;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	723b      	strb	r3, [r7, #8]
  mydata[1]=0x46;
 8001fd2:	2346      	movs	r3, #70	; 0x46
 8001fd4:	727b      	strb	r3, [r7, #9]
  mydata[2]=0x52;
 8001fd6:	2352      	movs	r3, #82	; 0x52
 8001fd8:	72bb      	strb	r3, [r7, #10]
  mydata[3]=0x03;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	72fb      	strb	r3, [r7, #11]
  mydata[4]=0x05;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	733b      	strb	r3, [r7, #12]
  mydata[5]=0xF0;
 8001fe2:	23f0      	movs	r3, #240	; 0xf0
 8001fe4:	737b      	strb	r3, [r7, #13]
  mydata[6]=0x08;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	73bb      	strb	r3, [r7, #14]
  if(lpindex<65536){
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d20b      	bcs.n	800200a <txlpMK6NRec+0x52>
  mydata[7]=0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  mydata[8]=0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	74bb      	strb	r3, [r7, #18]
 8002008:	e00e      	b.n	8002028 <txlpMK6NRec+0x70>
  }
  else {
  mydata[7]=lpindex>>24;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	0e1b      	lsrs	r3, r3, #24
 800200e:	b2db      	uxtb	r3, r3
 8002010:	73fb      	strb	r3, [r7, #15]
  mydata[8]=lpindex>>16;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0c1b      	lsrs	r3, r3, #16
 8002016:	b2db      	uxtb	r3, r3
 8002018:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b2db      	uxtb	r3, r3
 8002020:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	74bb      	strb	r3, [r7, #18]
  }
  mydata[11]=0x00;
 8002028:	2300      	movs	r3, #0
 800202a:	74fb      	strb	r3, [r7, #19]
  mydata[12]=0x01;
 800202c:	2301      	movs	r3, #1
 800202e:	753b      	strb	r3, [r7, #20]
  mydata[13]=0x00;
 8002030:	2300      	movs	r3, #0
 8002032:	757b      	strb	r3, [r7, #21]
  mydata[14]=0x00;
 8002034:	2300      	movs	r3, #0
 8002036:	75bb      	strb	r3, [r7, #22]
  mydata[15]=0x05;
 8002038:	2305      	movs	r3, #5
 800203a:	75fb      	strb	r3, [r7, #23]
  mydata[16]=0xDC;
 800203c:	23dc      	movs	r3, #220	; 0xdc
 800203e:	763b      	strb	r3, [r7, #24]
  data_lenMK6N = 17;
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <txlpMK6NRec+0xc0>)
 8002042:	2211      	movs	r2, #17
 8002044:	601a      	str	r2, [r3, #0]
  setCommandMK6N(mydata, data_lenMK6N);
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <txlpMK6NRec+0xc0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29a      	uxth	r2, r3
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fa60 	bl	8001518 <setCommandMK6N>
  	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <txlpMK6NRec+0xc0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002062:	4906      	ldr	r1, [pc, #24]	; (800207c <txlpMK6NRec+0xc4>)
 8002064:	4806      	ldr	r0, [pc, #24]	; (8002080 <txlpMK6NRec+0xc8>)
 8002066:	f012 f999 	bl	801439c <HAL_UART_Transmit>
}
 800206a:	bf00      	nop
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200038e0 	.word	0x200038e0
 8002078:	20002968 	.word	0x20002968
 800207c:	20002644 	.word	0x20002644
 8002080:	20002770 	.word	0x20002770

08002084 <txlpMK6N>:

void txlpMK6N(int indexmin1){
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	dataallclearMK6N();
 800208c:	f7ff f826 	bl	80010dc <dataallclearMK6N>
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  unsigned long lpindex = lplastentryMK6N-indexmin1;
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <txlpMK6N+0xc0>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	61fb      	str	r3, [r7, #28]
  lprecordMK6N = lpindex;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <txlpMK6N+0xc4>)
 800209e:	6013      	str	r3, [r2, #0]
  char mydata[17];
  mydata[0]=0x02;
 80020a0:	2302      	movs	r3, #2
 80020a2:	723b      	strb	r3, [r7, #8]
  mydata[1]=0x46;
 80020a4:	2346      	movs	r3, #70	; 0x46
 80020a6:	727b      	strb	r3, [r7, #9]
  mydata[2]=0x52;
 80020a8:	2352      	movs	r3, #82	; 0x52
 80020aa:	72bb      	strb	r3, [r7, #10]
  mydata[3]=0x03;
 80020ac:	2303      	movs	r3, #3
 80020ae:	72fb      	strb	r3, [r7, #11]
  mydata[4]=0x05;
 80020b0:	2305      	movs	r3, #5
 80020b2:	733b      	strb	r3, [r7, #12]
  mydata[5]=0xF0;
 80020b4:	23f0      	movs	r3, #240	; 0xf0
 80020b6:	737b      	strb	r3, [r7, #13]
  mydata[6]=0x08;
 80020b8:	2308      	movs	r3, #8
 80020ba:	73bb      	strb	r3, [r7, #14]
  if(lpindex<65536){
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d20b      	bcs.n	80020dc <txlpMK6N+0x58>
  mydata[7]=0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  mydata[8]=0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	74bb      	strb	r3, [r7, #18]
 80020da:	e00e      	b.n	80020fa <txlpMK6N+0x76>
  }
  else {
  mydata[7]=lpindex>>24;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	0e1b      	lsrs	r3, r3, #24
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	73fb      	strb	r3, [r7, #15]
  mydata[8]=lpindex>>16;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	743b      	strb	r3, [r7, #16]
  mydata[9]=lpindex>>8;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	747b      	strb	r3, [r7, #17]
  mydata[10]=(uint8_t)lpindex;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	74bb      	strb	r3, [r7, #18]
  }
  mydata[11]=0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	74fb      	strb	r3, [r7, #19]
  mydata[12]=0x01;
 80020fe:	2301      	movs	r3, #1
 8002100:	753b      	strb	r3, [r7, #20]
  mydata[13]=0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	757b      	strb	r3, [r7, #21]
  mydata[14]=0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	75bb      	strb	r3, [r7, #22]
  mydata[15]=0x05;
 800210a:	2305      	movs	r3, #5
 800210c:	75fb      	strb	r3, [r7, #23]
  mydata[16]=0xDC;
 800210e:	23dc      	movs	r3, #220	; 0xdc
 8002110:	763b      	strb	r3, [r7, #24]
  data_lenMK6N = 17;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <txlpMK6N+0xc8>)
 8002114:	2211      	movs	r2, #17
 8002116:	601a      	str	r2, [r3, #0]
  setCommandMK6N(mydata, data_lenMK6N);
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <txlpMK6N+0xc8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29a      	uxth	r2, r3
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f9f7 	bl	8001518 <setCommandMK6N>
  	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <txlpMK6N+0xc8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29a      	uxth	r2, r3
 8002130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002134:	4906      	ldr	r1, [pc, #24]	; (8002150 <txlpMK6N+0xcc>)
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <txlpMK6N+0xd0>)
 8002138:	f012 f930 	bl	801439c <HAL_UART_Transmit>
}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20002fdc 	.word	0x20002fdc
 8002148:	200038e0 	.word	0x200038e0
 800214c:	20002968 	.word	0x20002968
 8002150:	20002644 	.word	0x20002644
 8002154:	20002770 	.word	0x20002770

08002158 <rxlpMK6N>:

void rxlpMK6N(char* outstr,char* datain, int len){
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4817      	ldr	r0, [pc, #92]	; (80021c8 <rxlpMK6N+0x70>)
 800216c:	f019 fb70 	bl	801b850 <memcpy>
  	data_lenMK6N=datasize(dataMK6N);
 8002170:	4815      	ldr	r0, [pc, #84]	; (80021c8 <rxlpMK6N+0x70>)
 8002172:	f003 ff2d 	bl	8005fd0 <datasize>
 8002176:	4603      	mov	r3, r0
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <rxlpMK6N+0x74>)
 800217a:	6013      	str	r3, [r2, #0]
  if(getRawDataMK6N(17)){
 800217c:	2011      	movs	r0, #17
 800217e:	f7ff f951 	bl	8001424 <getRawDataMK6N>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <rxlpMK6N+0x68>
      if(decodelpdata())   {
 8002188:	f7ff fe8c 	bl	8001ea4 <decodelpdata>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <rxlpMK6N+0x68>
    	  lp2JsonMK6N();
 8002192:	f000 f81f 	bl	80021d4 <lp2JsonMK6N>
    	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e00a      	b.n	80021b2 <rxlpMK6N+0x5a>
    		  *outstr++=datastrMK6N[i];
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60fa      	str	r2, [r7, #12]
 80021a2:	490b      	ldr	r1, [pc, #44]	; (80021d0 <rxlpMK6N+0x78>)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	440a      	add	r2, r1
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	701a      	strb	r2, [r3, #0]
    	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3301      	adds	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <rxlpMK6N+0x78>)
 80021b4:	f7fe ffec 	bl	8001190 <datasizestrMK6N>
 80021b8:	4602      	mov	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4293      	cmp	r3, r2
 80021be:	dbed      	blt.n	800219c <rxlpMK6N+0x44>
    	  }
      }
  }
}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200039c0 	.word	0x200039c0
 80021cc:	20002968 	.word	0x20002968
 80021d0:	20001fe8 	.word	0x20001fe8

080021d4 <lp2JsonMK6N>:

void lp2JsonMK6N(){
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	data_lenMK6N = 0;
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <lp2JsonMK6N+0x114>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 80021e0:	f7fe ffba 	bl	8001158 <datastrclearMK6N>
	strcpy(datastrMK6N,"{\"mid\":");
 80021e4:	4a41      	ldr	r2, [pc, #260]	; (80022ec <lp2JsonMK6N+0x118>)
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <lp2JsonMK6N+0x11c>)
 80021e8:	cb03      	ldmia	r3!, {r0, r1}
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	6051      	str	r1, [r2, #4]
	  strcat(datastrMK6N, meterSNMK6N);
 80021ee:	4941      	ldr	r1, [pc, #260]	; (80022f4 <lp2JsonMK6N+0x120>)
 80021f0:	483e      	ldr	r0, [pc, #248]	; (80022ec <lp2JsonMK6N+0x118>)
 80021f2:	f01a f915 	bl	801c420 <strcat>
	  strcat(datastrMK6N, ",\"pid\":\"LPMK6N\",");
 80021f6:	483d      	ldr	r0, [pc, #244]	; (80022ec <lp2JsonMK6N+0x118>)
 80021f8:	f7fd fff4 	bl	80001e4 <strlen>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <lp2JsonMK6N+0x118>)
 8002202:	4413      	add	r3, r2
 8002204:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <lp2JsonMK6N+0x124>)
 8002206:	461d      	mov	r5, r3
 8002208:	4614      	mov	r4, r2
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	6028      	str	r0, [r5, #0]
 800220e:	6069      	str	r1, [r5, #4]
 8002210:	60aa      	str	r2, [r5, #8]
 8002212:	60eb      	str	r3, [r5, #12]
 8002214:	7823      	ldrb	r3, [r4, #0]
 8002216:	742b      	strb	r3, [r5, #16]
//  data_lenMK6N = setdatastr(",\"pid\":\"LPMK6N\",\"readdate\":",data_lenMK6N);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
	  strcat(datastrMK6N, "\"3P9B\":");
 8002218:	4834      	ldr	r0, [pc, #208]	; (80022ec <lp2JsonMK6N+0x118>)
 800221a:	f7fd ffe3 	bl	80001e4 <strlen>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <lp2JsonMK6N+0x118>)
 8002224:	4413      	add	r3, r2
 8002226:	4935      	ldr	r1, [pc, #212]	; (80022fc <lp2JsonMK6N+0x128>)
 8002228:	461a      	mov	r2, r3
 800222a:	460b      	mov	r3, r1
 800222c:	cb03      	ldmia	r3!, {r0, r1}
 800222e:	6010      	str	r0, [r2, #0]
 8002230:	6051      	str	r1, [r2, #4]

  	data2clearMK6N();
 8002232:	f7fe ffc5 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%ld,",lprecordMK6N);
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <lp2JsonMK6N+0x12c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	4931      	ldr	r1, [pc, #196]	; (8002304 <lp2JsonMK6N+0x130>)
 800223e:	4832      	ldr	r0, [pc, #200]	; (8002308 <lp2JsonMK6N+0x134>)
 8002240:	f01a f8ce 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 8002244:	4930      	ldr	r1, [pc, #192]	; (8002308 <lp2JsonMK6N+0x134>)
 8002246:	4829      	ldr	r0, [pc, #164]	; (80022ec <lp2JsonMK6N+0x118>)
 8002248:	f01a f8ea 	bl	801c420 <strcat>
//  datastr+=",\"3P9B\":";
//  datastr+=String(lplastentry-1);
//  datastr+=",";
  for(int i=0;i<jmlchannelMK6N;i++){
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	e03f      	b.n	80022d2 <lp2JsonMK6N+0xfe>
	strcat(datastrMK6N, checkregLPMK6N(reglpinit1[i]));
 8002252:	4a2e      	ldr	r2, [pc, #184]	; (800230c <lp2JsonMK6N+0x138>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fcfc 	bl	8001c58 <checkregLPMK6N>
 8002260:	4603      	mov	r3, r0
 8002262:	4619      	mov	r1, r3
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <lp2JsonMK6N+0x118>)
 8002266:	f01a f8db 	bl	801c420 <strcat>
	strcat(datastrMK6N, ":");
 800226a:	4820      	ldr	r0, [pc, #128]	; (80022ec <lp2JsonMK6N+0x118>)
 800226c:	f7fd ffba 	bl	80001e4 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <lp2JsonMK6N+0x118>)
 8002276:	4413      	add	r3, r2
 8002278:	4925      	ldr	r1, [pc, #148]	; (8002310 <lp2JsonMK6N+0x13c>)
 800227a:	461a      	mov	r2, r3
 800227c:	460b      	mov	r3, r1
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	8013      	strh	r3, [r2, #0]
    data2clearMK6N();
 8002282:	f7fe ff9d 	bl	80011c0 <data2clearMK6N>
    if(i<jmlchannelMK6N-1){
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <lp2JsonMK6N+0x140>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3b01      	subs	r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	da0e      	bge.n	80022b0 <lp2JsonMK6N+0xdc>
      	sprintf(data2MK6N,"%.5f,",lpdata[i]);
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <lp2JsonMK6N+0x144>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	491f      	ldr	r1, [pc, #124]	; (800231c <lp2JsonMK6N+0x148>)
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <lp2JsonMK6N+0x134>)
 80022a2:	f01a f89d 	bl	801c3e0 <siprintf>
      	strcat(datastrMK6N, data2MK6N);
 80022a6:	4918      	ldr	r1, [pc, #96]	; (8002308 <lp2JsonMK6N+0x134>)
 80022a8:	4810      	ldr	r0, [pc, #64]	; (80022ec <lp2JsonMK6N+0x118>)
 80022aa:	f01a f8b9 	bl	801c420 <strcat>
 80022ae:	e00d      	b.n	80022cc <lp2JsonMK6N+0xf8>
    }
    else {
      	sprintf(data2MK6N,"%.5f}",lpdata[i]);
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <lp2JsonMK6N+0x144>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	4918      	ldr	r1, [pc, #96]	; (8002320 <lp2JsonMK6N+0x14c>)
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <lp2JsonMK6N+0x134>)
 80022c0:	f01a f88e 	bl	801c3e0 <siprintf>
      	strcat(datastrMK6N, data2MK6N);
 80022c4:	4910      	ldr	r1, [pc, #64]	; (8002308 <lp2JsonMK6N+0x134>)
 80022c6:	4809      	ldr	r0, [pc, #36]	; (80022ec <lp2JsonMK6N+0x118>)
 80022c8:	f01a f8aa 	bl	801c420 <strcat>
  for(int i=0;i<jmlchannelMK6N;i++){
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3301      	adds	r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <lp2JsonMK6N+0x140>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4293      	cmp	r3, r2
 80022dc:	dbb9      	blt.n	8002252 <lp2JsonMK6N+0x7e>
    }
  }
//  SerialMonprintlnMK6N(datastrMK6N);
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}
 80022e8:	20002968 	.word	0x20002968
 80022ec:	20001fe8 	.word	0x20001fe8
 80022f0:	0801e9f4 	.word	0x0801e9f4
 80022f4:	200003a0 	.word	0x200003a0
 80022f8:	0801ea28 	.word	0x0801ea28
 80022fc:	0801ea3c 	.word	0x0801ea3c
 8002300:	200038e0 	.word	0x200038e0
 8002304:	0801ea44 	.word	0x0801ea44
 8002308:	20002644 	.word	0x20002644
 800230c:	200030f0 	.word	0x200030f0
 8002310:	0801ea14 	.word	0x0801ea14
 8002314:	200036f8 	.word	0x200036f8
 8002318:	20003740 	.word	0x20003740
 800231c:	0801ea18 	.word	0x0801ea18
 8002320:	0801ea20 	.word	0x0801ea20

08002324 <txlpInit1MK6N>:
//      return 1;
    }
    return 0;
}

void txlpInit1MK6N(){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 800232a:	f7fe fed7 	bl	80010dc <dataallclearMK6N>
  data2MK6N[0]=0x02;
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
  data2MK6N[1]=0x4D;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002336:	224d      	movs	r2, #77	; 0x4d
 8002338:	705a      	strb	r2, [r3, #1]
  data2MK6N[2]=0x00;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <txlpInit1MK6N+0x80>)
 800233c:	2200      	movs	r2, #0
 800233e:	709a      	strb	r2, [r3, #2]
  data2MK6N[3]=0x00;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]
  data2MK6N[4]=0xFF;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	711a      	strb	r2, [r3, #4]
  data2MK6N[5]=0xF0;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <txlpInit1MK6N+0x80>)
 800234e:	22f0      	movs	r2, #240	; 0xf0
 8002350:	715a      	strb	r2, [r3, #5]
    for(int j=0;j<sizeof(lpinit1);j++){
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	e00a      	b.n	800236e <txlpInit1MK6N+0x4a>
      data2MK6N[j+6]=lpinit1[j];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3306      	adds	r3, #6
 800235c:	4912      	ldr	r1, [pc, #72]	; (80023a8 <txlpInit1MK6N+0x84>)
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	440a      	add	r2, r1
 8002362:	7811      	ldrb	r1, [r2, #0]
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002366:	54d1      	strb	r1, [r2, r3]
    for(int j=0;j<sizeof(lpinit1);j++){
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b13      	cmp	r3, #19
 8002372:	d9f1      	bls.n	8002358 <txlpInit1MK6N+0x34>
    }
    data_lenMK6N=sizeof(lpinit1)+6;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <txlpInit1MK6N+0x88>)
 8002376:	221a      	movs	r2, #26
 8002378:	601a      	str	r2, [r3, #0]
    setCommandMK6N(data2MK6N, data_lenMK6N);
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <txlpInit1MK6N+0x88>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	4808      	ldr	r0, [pc, #32]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002384:	f7ff f8c8 	bl	8001518 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <txlpInit1MK6N+0x88>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b29a      	uxth	r2, r3
 800238e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002392:	4904      	ldr	r1, [pc, #16]	; (80023a4 <txlpInit1MK6N+0x80>)
 8002394:	4806      	ldr	r0, [pc, #24]	; (80023b0 <txlpInit1MK6N+0x8c>)
 8002396:	f012 f801 	bl	801439c <HAL_UART_Transmit>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20002644 	.word	0x20002644
 80023a8:	20000090 	.word	0x20000090
 80023ac:	20002968 	.word	0x20002968
 80023b0:	20002770 	.word	0x20002770

080023b4 <rxlpInit1MK6N>:

void rxlpInit1MK6N(char* datain, int len){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	480c      	ldr	r0, [pc, #48]	; (80023f8 <rxlpInit1MK6N+0x44>)
 80023c6:	f019 fa43 	bl	801b850 <memcpy>
	data_lenMK6N=0;
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <rxlpInit1MK6N+0x48>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <rxlpInit1MK6N+0x44>)
 80023d2:	f003 fdfd 	bl	8005fd0 <datasize>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <rxlpInit1MK6N+0x48>)
 80023da:	6013      	str	r3, [r2, #0]
    if(getRawDataMK6N(6)){
 80023dc:	2006      	movs	r0, #6
 80023de:	f7ff f821 	bl	8001424 <getRawDataMK6N>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <rxlpInit1MK6N+0x3a>
      decodelpinit1MK6N(dataMK6N);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <rxlpInit1MK6N+0x44>)
 80023ea:	f000 f809 	bl	8002400 <decodelpinit1MK6N>
    }
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200039c0 	.word	0x200039c0
 80023fc:	20002968 	.word	0x20002968

08002400 <decodelpinit1MK6N>:

int decodelpinit1MK6N(unsigned char datalpinit[]){
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af04      	add	r7, sp, #16
 8002406:	6078      	str	r0, [r7, #4]
  dateTgl = datalpinit[0];
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <decodelpinit1MK6N+0xc8>)
 800240e:	701a      	strb	r2, [r3, #0]
  dateBln = datalpinit[1];
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	785a      	ldrb	r2, [r3, #1]
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <decodelpinit1MK6N+0xcc>)
 8002416:	701a      	strb	r2, [r3, #0]
  dateThn = datalpinit[2];
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	789a      	ldrb	r2, [r3, #2]
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <decodelpinit1MK6N+0xd0>)
 800241e:	701a      	strb	r2, [r3, #0]
  dateJam = datalpinit[3];
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	78da      	ldrb	r2, [r3, #3]
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <decodelpinit1MK6N+0xd4>)
 8002426:	701a      	strb	r2, [r3, #0]
  dateMnt = datalpinit[4];
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	791a      	ldrb	r2, [r3, #4]
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <decodelpinit1MK6N+0xd8>)
 800242e:	701a      	strb	r2, [r3, #0]
  dateDtk = datalpinit[5];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	795a      	ldrb	r2, [r3, #5]
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <decodelpinit1MK6N+0xdc>)
 8002436:	701a      	strb	r2, [r3, #0]
  lpintervalMK6N = hex2ULong(dataMK6N,6);
 8002438:	2106      	movs	r1, #6
 800243a:	4829      	ldr	r0, [pc, #164]	; (80024e0 <decodelpinit1MK6N+0xe0>)
 800243c:	f003 ff76 	bl	800632c <hex2ULong>
 8002440:	4603      	mov	r3, r0
 8002442:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <decodelpinit1MK6N+0xe4>)
 8002444:	6013      	str	r3, [r2, #0]
  lplastentryMK6N = hex2Long(dataMK6N,10);
 8002446:	210a      	movs	r1, #10
 8002448:	4825      	ldr	r0, [pc, #148]	; (80024e0 <decodelpinit1MK6N+0xe0>)
 800244a:	f003 ff2b 	bl	80062a4 <hex2Long>
 800244e:	4603      	mov	r3, r0
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <decodelpinit1MK6N+0xe8>)
 8002452:	6013      	str	r3, [r2, #0]
  lpmaxentryMK6N = hex2Long(dataMK6N,14);
 8002454:	210e      	movs	r1, #14
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <decodelpinit1MK6N+0xe0>)
 8002458:	f003 ff24 	bl	80062a4 <hex2Long>
 800245c:	4603      	mov	r3, r0
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <decodelpinit1MK6N+0xec>)
 8002460:	6013      	str	r3, [r2, #0]
  jmlchannelMK6N = dataMK6N[data_lenMK6N-1];
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <decodelpinit1MK6N+0xf0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3b01      	subs	r3, #1
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <decodelpinit1MK6N+0xe0>)
 800246a:	5cd2      	ldrb	r2, [r2, r3]
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <decodelpinit1MK6N+0xf4>)
 800246e:	701a      	strb	r2, [r3, #0]
  printf("%d %d %d %d %d %d\r\n", dateTgl,dateBln,dateThn,dateJam,dateMnt,dateDtk);
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <decodelpinit1MK6N+0xc8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <decodelpinit1MK6N+0xcc>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461c      	mov	r4, r3
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <decodelpinit1MK6N+0xd0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461d      	mov	r5, r3
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <decodelpinit1MK6N+0xd4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <decodelpinit1MK6N+0xd8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <decodelpinit1MK6N+0xdc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	9101      	str	r1, [sp, #4]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	462b      	mov	r3, r5
 800249a:	4622      	mov	r2, r4
 800249c:	4601      	mov	r1, r0
 800249e:	4816      	ldr	r0, [pc, #88]	; (80024f8 <decodelpinit1MK6N+0xf8>)
 80024a0:	f019 ff00 	bl	801c2a4 <iprintf>
  printf("%ld %ld %ld %d\r\n", lpintervalMK6N,lplastentryMK6N,lpmaxentryMK6N,jmlchannelMK6N);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <decodelpinit1MK6N+0xe4>)
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <decodelpinit1MK6N+0xe8>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <decodelpinit1MK6N+0xec>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4810      	ldr	r0, [pc, #64]	; (80024f4 <decodelpinit1MK6N+0xf4>)
 80024b2:	7800      	ldrb	r0, [r0, #0]
 80024b4:	9000      	str	r0, [sp, #0]
 80024b6:	4811      	ldr	r0, [pc, #68]	; (80024fc <decodelpinit1MK6N+0xfc>)
 80024b8:	f019 fef4 	bl	801c2a4 <iprintf>
  return 1;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdb0      	pop	{r4, r5, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20002f78 	.word	0x20002f78
 80024cc:	200038d4 	.word	0x200038d4
 80024d0:	200028b4 	.word	0x200028b4
 80024d4:	20003684 	.word	0x20003684
 80024d8:	20003685 	.word	0x20003685
 80024dc:	200037ec 	.word	0x200037ec
 80024e0:	200039c0 	.word	0x200039c0
 80024e4:	20003738 	.word	0x20003738
 80024e8:	20002fdc 	.word	0x20002fdc
 80024ec:	2000288c 	.word	0x2000288c
 80024f0:	20002968 	.word	0x20002968
 80024f4:	200036f8 	.word	0x200036f8
 80024f8:	0801ea4c 	.word	0x0801ea4c
 80024fc:	0801ea60 	.word	0x0801ea60

08002500 <txlpMK6NInit2>:
    }
	
  return 1;
}

void txlpMK6NInit2(){
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 8002506:	f7fe fde9 	bl	80010dc <dataallclearMK6N>
	int idxnow;
	data2MK6N[0]=0x02;
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <txlpMK6NInit2+0xc0>)
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
  data2MK6N[1]=0x4D;
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <txlpMK6NInit2+0xc0>)
 8002512:	224d      	movs	r2, #77	; 0x4d
 8002514:	705a      	strb	r2, [r3, #1]
  data2MK6N[2]=0x00;
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <txlpMK6NInit2+0xc0>)
 8002518:	2200      	movs	r2, #0
 800251a:	709a      	strb	r2, [r3, #2]
  data2MK6N[3]=0x00;
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <txlpMK6NInit2+0xc0>)
 800251e:	2200      	movs	r2, #0
 8002520:	70da      	strb	r2, [r3, #3]
  data2MK6N[4]=0xFF;
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <txlpMK6NInit2+0xc0>)
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	711a      	strb	r2, [r3, #4]
  data2MK6N[5]=0xF0;
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <txlpMK6NInit2+0xc0>)
 800252a:	22f0      	movs	r2, #240	; 0xf0
 800252c:	715a      	strb	r2, [r3, #5]
  idxnow = 6;
 800252e:	2306      	movs	r3, #6
 8002530:	60fb      	str	r3, [r7, #12]
  for(int i=0;i<8;i++){
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	e029      	b.n	800258c <txlpMK6NInit2+0x8c>
    for(int j=0;j<sizeof(lpinit2);j++){
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	e020      	b.n	8002580 <txlpMK6NInit2+0x80>
      data2MK6N[idxnow]=lpinit2[j];
 800253e:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <txlpMK6NInit2+0xc4>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	7819      	ldrb	r1, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <txlpMK6NInit2+0xc0>)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	460a      	mov	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
      if(j==3) data2MK6N[idxnow]=lpinit2[j] | i;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d10e      	bne.n	8002574 <txlpMK6NInit2+0x74>
 8002556:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <txlpMK6NInit2+0xc4>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25a      	sxtb	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b25b      	sxtb	r3, r3
 8002568:	b2d9      	uxtb	r1, r3
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <txlpMK6NInit2+0xc0>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	460a      	mov	r2, r1
 8002572:	701a      	strb	r2, [r3, #0]
	  idxnow++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    for(int j=0;j<sizeof(lpinit2);j++){
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3301      	adds	r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d9db      	bls.n	800253e <txlpMK6NInit2+0x3e>
  for(int i=0;i<8;i++){
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b07      	cmp	r3, #7
 8002590:	ddd2      	ble.n	8002538 <txlpMK6NInit2+0x38>
    }
  }
    data_lenMK6N=idxnow;
 8002592:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <txlpMK6NInit2+0xc8>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6013      	str	r3, [r2, #0]
    setCommandMK6N(data2MK6N, data_lenMK6N);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <txlpMK6NInit2+0xc8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <txlpMK6NInit2+0xc0>)
 80025a2:	f7fe ffb9 	bl	8001518 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <txlpMK6NInit2+0xc8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <txlpMK6NInit2+0xc0>)
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <txlpMK6NInit2+0xcc>)
 80025b4:	f011 fef2 	bl	801439c <HAL_UART_Transmit>
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20002644 	.word	0x20002644
 80025c4:	200000a4 	.word	0x200000a4
 80025c8:	20002968 	.word	0x20002968
 80025cc:	20002770 	.word	0x20002770

080025d0 <rxlpMK6NInit2>:

void rxlpMK6NInit2(char* datain, int len){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4814      	ldr	r0, [pc, #80]	; (8002634 <rxlpMK6NInit2+0x64>)
 80025e2:	f019 f935 	bl	801b850 <memcpy>
	data_lenMK6N=0;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <rxlpMK6NInit2+0x68>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 80025ec:	4811      	ldr	r0, [pc, #68]	; (8002634 <rxlpMK6NInit2+0x64>)
 80025ee:	f003 fcef 	bl	8005fd0 <datasize>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a10      	ldr	r2, [pc, #64]	; (8002638 <rxlpMK6NInit2+0x68>)
 80025f6:	6013      	str	r3, [r2, #0]
//    printData(dataMK6N,data_lenMK6N);
    if(getRawDataMK6N(6)){
 80025f8:	2006      	movs	r0, #6
 80025fa:	f7fe ff13 	bl	8001424 <getRawDataMK6N>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <rxlpMK6NInit2+0x5a>
//		printData(dataMK6N,data_lenMK6N);
    	for(int i=0;i<8;i++){
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e00c      	b.n	8002624 <rxlpMK6NInit2+0x54>
    		reglpinit1[i]=dataMK6N[4*i+3];
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	3303      	adds	r3, #3
 8002610:	4a08      	ldr	r2, [pc, #32]	; (8002634 <rxlpMK6NInit2+0x64>)
 8002612:	5cd1      	ldrb	r1, [r2, r3]
 8002614:	4a09      	ldr	r2, [pc, #36]	; (800263c <rxlpMK6NInit2+0x6c>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	460a      	mov	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]
    	for(int i=0;i<8;i++){
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3301      	adds	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b07      	cmp	r3, #7
 8002628:	ddef      	ble.n	800260a <rxlpMK6NInit2+0x3a>
//    		printf("0x%X ",reglpinit1[i]);
    	}
//    	printf("\r\n");
    }
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200039c0 	.word	0x200039c0
 8002638:	20002968 	.word	0x20002968
 800263c:	200030f0 	.word	0x200030f0

08002640 <getJumlahChannelMK6N>:
//  for(int i=0;i<jmlchannelMK6N;i++){
//      printf("0x%X %.7f\r\n",lptype[i],lpscaleMK6N[i]);
//  }
  return 1;
}
int getJumlahChannelMK6N(){
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
	return jmlchannelMK6N;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <getJumlahChannelMK6N+0x14>)
 8002646:	781b      	ldrb	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200036f8 	.word	0x200036f8

08002658 <txlpMK6NInit2a>:
void txlpMK6NInit2a(int i){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  int idxnow;
  data[0]=0x02;
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <txlpMK6NInit2a+0xb0>)
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
  data[1]=0x4D;
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <txlpMK6NInit2a+0xb0>)
 8002668:	224d      	movs	r2, #77	; 0x4d
 800266a:	705a      	strb	r2, [r3, #1]
  data[2]=0x00;
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <txlpMK6NInit2a+0xb0>)
 800266e:	2200      	movs	r2, #0
 8002670:	709a      	strb	r2, [r3, #2]
  data[3]=0x00;
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <txlpMK6NInit2a+0xb0>)
 8002674:	2200      	movs	r2, #0
 8002676:	70da      	strb	r2, [r3, #3]
  data[4]=0xFF;
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <txlpMK6NInit2a+0xb0>)
 800267a:	22ff      	movs	r2, #255	; 0xff
 800267c:	711a      	strb	r2, [r3, #4]
  data[5]=0xF0;
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <txlpMK6NInit2a+0xb0>)
 8002680:	22f0      	movs	r2, #240	; 0xf0
 8002682:	715a      	strb	r2, [r3, #5]
    for(int j=0;j<sizeof(lpinit2a);j++){
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e023      	b.n	80026d2 <txlpMK6NInit2a+0x7a>
      idxnow = j+6;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3306      	adds	r3, #6
 800268e:	60bb      	str	r3, [r7, #8]
      data[idxnow]=lpinit2a[j];
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <txlpMK6NInit2a+0xb4>)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	7819      	ldrb	r1, [r3, #0]
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <txlpMK6NInit2a+0xb0>)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
      if(j==3 || j==7){
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d002      	beq.n	80026ae <txlpMK6NInit2a+0x56>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d10e      	bne.n	80026cc <txlpMK6NInit2a+0x74>
        data[idxnow]=lpinit2a[j] | i;
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <txlpMK6NInit2a+0xb4>)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	b2d9      	uxtb	r1, r3
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <txlpMK6NInit2a+0xb0>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4413      	add	r3, r2
 80026c8:	460a      	mov	r2, r1
 80026ca:	701a      	strb	r2, [r3, #0]
    for(int j=0;j<sizeof(lpinit2a);j++){
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	d9d8      	bls.n	800268a <txlpMK6NInit2a+0x32>
      }
    }
    data_lenMK6N=sizeof(lpinit2a)+6;
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <txlpMK6NInit2a+0xb8>)
 80026da:	220e      	movs	r2, #14
 80026dc:	601a      	str	r2, [r3, #0]
    setCommandMK6N(data, data_lenMK6N);
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <txlpMK6NInit2a+0xb8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	4808      	ldr	r0, [pc, #32]	; (8002708 <txlpMK6NInit2a+0xb0>)
 80026e8:	f7fe ff16 	bl	8001518 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <txlpMK6NInit2a+0xb8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026f6:	4907      	ldr	r1, [pc, #28]	; (8002714 <txlpMK6NInit2a+0xbc>)
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <txlpMK6NInit2a+0xc0>)
 80026fa:	f011 fe4f 	bl	801439c <HAL_UART_Transmit>
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20003670 	.word	0x20003670
 800270c:	200000a8 	.word	0x200000a8
 8002710:	20002968 	.word	0x20002968
 8002714:	20002644 	.word	0x20002644
 8002718:	20002770 	.word	0x20002770

0800271c <rxlpMK6NInit2a>:

void rxlpMK6NInit2a(char* datain, int len, int i){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	461a      	mov	r2, r3
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	4814      	ldr	r0, [pc, #80]	; (8002780 <rxlpMK6NInit2a+0x64>)
 8002730:	f019 f88e 	bl	801b850 <memcpy>
	data_lenMK6N=datasize(dataMK6N);
 8002734:	4812      	ldr	r0, [pc, #72]	; (8002780 <rxlpMK6NInit2a+0x64>)
 8002736:	f003 fc4b 	bl	8005fd0 <datasize>
 800273a:	4603      	mov	r3, r0
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <rxlpMK6NInit2a+0x68>)
 800273e:	6013      	str	r3, [r2, #0]
    if(getRawDataMK6N(6)){
 8002740:	2006      	movs	r0, #6
 8002742:	f7fe fe6f 	bl	8001424 <getRawDataMK6N>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d014      	beq.n	8002776 <rxlpMK6NInit2a+0x5a>
      hex2Float(dataMK6N,0);
 800274c:	2100      	movs	r1, #0
 800274e:	480c      	ldr	r0, [pc, #48]	; (8002780 <rxlpMK6NInit2a+0x64>)
 8002750:	f003 fd62 	bl	8006218 <hex2Float>
      lpscaleMK6N[i]=myFloat.f;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <rxlpMK6NInit2a+0x6c>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <rxlpMK6NInit2a+0x70>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	601a      	str	r2, [r3, #0]
      lptype[i]=dataMK6N[data_lenMK6N-1];
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <rxlpMK6NInit2a+0x68>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3b01      	subs	r3, #1
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <rxlpMK6NInit2a+0x64>)
 800276a:	5cd1      	ldrb	r1, [r2, r3]
 800276c:	4a08      	ldr	r2, [pc, #32]	; (8002790 <rxlpMK6NInit2a+0x74>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	460a      	mov	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
    }
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200039c0 	.word	0x200039c0
 8002784:	20002968 	.word	0x20002968
 8002788:	20003f64 	.word	0x20003f64
 800278c:	200037b0 	.word	0x200037b0
 8002790:	20002f7c 	.word	0x20002f7c

08002794 <checkregEoBRate9>:
    		return "\"3P68\""; //"Total ABS VAh";
            break;
  }
}

const char * checkregEoBRate9(uint8_t reg){
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2be7      	cmp	r3, #231	; 0xe7
 80027a2:	d03d      	beq.n	8002820 <checkregEoBRate9+0x8c>
 80027a4:	2be7      	cmp	r3, #231	; 0xe7
 80027a6:	dc43      	bgt.n	8002830 <checkregEoBRate9+0x9c>
 80027a8:	2be3      	cmp	r3, #227	; 0xe3
 80027aa:	d037      	beq.n	800281c <checkregEoBRate9+0x88>
 80027ac:	2be3      	cmp	r3, #227	; 0xe3
 80027ae:	dc3f      	bgt.n	8002830 <checkregEoBRate9+0x9c>
 80027b0:	2b9f      	cmp	r3, #159	; 0x9f
 80027b2:	dc3d      	bgt.n	8002830 <checkregEoBRate9+0x9c>
 80027b4:	2b93      	cmp	r3, #147	; 0x93
 80027b6:	da08      	bge.n	80027ca <checkregEoBRate9+0x36>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d037      	beq.n	800282c <checkregEoBRate9+0x98>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	dc37      	bgt.n	8002830 <checkregEoBRate9+0x9c>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d02f      	beq.n	8002824 <checkregEoBRate9+0x90>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d02f      	beq.n	8002828 <checkregEoBRate9+0x94>
 80027c8:	e032      	b.n	8002830 <checkregEoBRate9+0x9c>
 80027ca:	3b93      	subs	r3, #147	; 0x93
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d82f      	bhi.n	8002830 <checkregEoBRate9+0x9c>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <checkregEoBRate9+0x44>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002831 	.word	0x08002831
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002831 	.word	0x08002831
 80027e8:	08002811 	.word	0x08002811
 80027ec:	08002831 	.word	0x08002831
 80027f0:	08002831 	.word	0x08002831
 80027f4:	08002831 	.word	0x08002831
 80027f8:	08002815 	.word	0x08002815
 80027fc:	08002831 	.word	0x08002831
 8002800:	08002831 	.word	0x08002831
 8002804:	08002831 	.word	0x08002831
 8002808:	08002819 	.word	0x08002819
    case 0x93:
            return "\"3P76\""; //"Total Import Wh";
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <checkregEoBRate9+0xac>)
 800280e:	e010      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x97:
            return "\"3P70\""; //"Total Export Wh";
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <checkregEoBRate9+0xb0>)
 8002812:	e00e      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x9B:
            return "\"3P88\""; //"Total Import varh";
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <checkregEoBRate9+0xb4>)
 8002816:	e00c      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x9F:
            return "\"3P82\""; //"Total Export varh";
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <checkregEoBRate9+0xb8>)
 800281a:	e00a      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0xE3:
            return "\"3P0A\""; //"Total Import VAh";
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <checkregEoBRate9+0xbc>)
 800281e:	e008      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0xE7:
            return "\"3P94\""; //"Total Export VAh";
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <checkregEoBRate9+0xc0>)
 8002822:	e006      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x00:
            return "\"3P6A\""; //"Total ABS Wh";
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <checkregEoBRate9+0xc4>)
 8002826:	e004      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x01:
            return "\"3PCA\""; //"Total ABS varh";
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <checkregEoBRate9+0xc8>)
 800282a:	e002      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    case 0x02:
            return "\"3P2B\""; //"Total ABS VAh";
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <checkregEoBRate9+0xcc>)
 800282e:	e000      	b.n	8002832 <checkregEoBRate9+0x9e>
            break;
    default:
    		return "\"3P2B\""; //"Total ABS VAh";
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <checkregEoBRate9+0xcc>)
            break;
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	0801eac0 	.word	0x0801eac0
 8002844:	0801eac8 	.word	0x0801eac8
 8002848:	0801ead0 	.word	0x0801ead0
 800284c:	0801ead8 	.word	0x0801ead8
 8002850:	0801eae0 	.word	0x0801eae0
 8002854:	0801eae8 	.word	0x0801eae8
 8002858:	0801eaf0 	.word	0x0801eaf0
 800285c:	0801eaf8 	.word	0x0801eaf8
 8002860:	0801eb00 	.word	0x0801eb00

08002864 <checkregEoBRate1>:

const char * checkregEoBRate1(uint8_t reg){
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2be7      	cmp	r3, #231	; 0xe7
 8002872:	d03d      	beq.n	80028f0 <checkregEoBRate1+0x8c>
 8002874:	2be7      	cmp	r3, #231	; 0xe7
 8002876:	dc43      	bgt.n	8002900 <checkregEoBRate1+0x9c>
 8002878:	2be3      	cmp	r3, #227	; 0xe3
 800287a:	d037      	beq.n	80028ec <checkregEoBRate1+0x88>
 800287c:	2be3      	cmp	r3, #227	; 0xe3
 800287e:	dc3f      	bgt.n	8002900 <checkregEoBRate1+0x9c>
 8002880:	2b9f      	cmp	r3, #159	; 0x9f
 8002882:	dc3d      	bgt.n	8002900 <checkregEoBRate1+0x9c>
 8002884:	2b93      	cmp	r3, #147	; 0x93
 8002886:	da08      	bge.n	800289a <checkregEoBRate1+0x36>
 8002888:	2b02      	cmp	r3, #2
 800288a:	d037      	beq.n	80028fc <checkregEoBRate1+0x98>
 800288c:	2b02      	cmp	r3, #2
 800288e:	dc37      	bgt.n	8002900 <checkregEoBRate1+0x9c>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d02f      	beq.n	80028f4 <checkregEoBRate1+0x90>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d02f      	beq.n	80028f8 <checkregEoBRate1+0x94>
 8002898:	e032      	b.n	8002900 <checkregEoBRate1+0x9c>
 800289a:	3b93      	subs	r3, #147	; 0x93
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d82f      	bhi.n	8002900 <checkregEoBRate1+0x9c>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <checkregEoBRate1+0x44>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	08002901 	.word	0x08002901
 80028b0:	08002901 	.word	0x08002901
 80028b4:	08002901 	.word	0x08002901
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	08002901 	.word	0x08002901
 80028c0:	08002901 	.word	0x08002901
 80028c4:	08002901 	.word	0x08002901
 80028c8:	080028e5 	.word	0x080028e5
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002901 	.word	0x08002901
 80028d4:	08002901 	.word	0x08002901
 80028d8:	080028e9 	.word	0x080028e9
    case 0x93:
            return "\"3P77\""; //"Total Import Wh";
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <checkregEoBRate1+0xac>)
 80028de:	e010      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x97:
            return "\"3P71\""; //"Total Export Wh";
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <checkregEoBRate1+0xb0>)
 80028e2:	e00e      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x9B:
            return "\"3P89\""; //"Total Import varh";
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <checkregEoBRate1+0xb4>)
 80028e6:	e00c      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x9F:
            return "\"3P83\""; //"Total Export varh";
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <checkregEoBRate1+0xb8>)
 80028ea:	e00a      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0xE3:
            return "\"3P1A\""; //"Total Import VAh";
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <checkregEoBRate1+0xbc>)
 80028ee:	e008      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0xE7:
            return "\"3P95\""; //"Total Export VAh";
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <checkregEoBRate1+0xc0>)
 80028f2:	e006      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x00:
            return "\"3P7A\""; //"Total ABS Wh";
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <checkregEoBRate1+0xc4>)
 80028f6:	e004      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x01:
            return "\"3PDA\""; //"Total ABS varh";
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <checkregEoBRate1+0xc8>)
 80028fa:	e002      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    case 0x02:
            return "\"3P3B\""; //"Total ABS VAh";
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <checkregEoBRate1+0xcc>)
 80028fe:	e000      	b.n	8002902 <checkregEoBRate1+0x9e>
            break;
    default:
    		return "\"3P3B\""; //"Total ABS VAh";
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <checkregEoBRate1+0xcc>)
            break;
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	0801eb08 	.word	0x0801eb08
 8002914:	0801eb10 	.word	0x0801eb10
 8002918:	0801eb18 	.word	0x0801eb18
 800291c:	0801eb20 	.word	0x0801eb20
 8002920:	0801eb28 	.word	0x0801eb28
 8002924:	0801eb30 	.word	0x0801eb30
 8002928:	0801eb38 	.word	0x0801eb38
 800292c:	0801eb40 	.word	0x0801eb40
 8002930:	0801eb48 	.word	0x0801eb48

08002934 <checkregEoBRate2>:

const char * checkregEoBRate2(uint8_t reg){
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2be7      	cmp	r3, #231	; 0xe7
 8002942:	d03d      	beq.n	80029c0 <checkregEoBRate2+0x8c>
 8002944:	2be7      	cmp	r3, #231	; 0xe7
 8002946:	dc43      	bgt.n	80029d0 <checkregEoBRate2+0x9c>
 8002948:	2be3      	cmp	r3, #227	; 0xe3
 800294a:	d037      	beq.n	80029bc <checkregEoBRate2+0x88>
 800294c:	2be3      	cmp	r3, #227	; 0xe3
 800294e:	dc3f      	bgt.n	80029d0 <checkregEoBRate2+0x9c>
 8002950:	2b9f      	cmp	r3, #159	; 0x9f
 8002952:	dc3d      	bgt.n	80029d0 <checkregEoBRate2+0x9c>
 8002954:	2b93      	cmp	r3, #147	; 0x93
 8002956:	da08      	bge.n	800296a <checkregEoBRate2+0x36>
 8002958:	2b02      	cmp	r3, #2
 800295a:	d037      	beq.n	80029cc <checkregEoBRate2+0x98>
 800295c:	2b02      	cmp	r3, #2
 800295e:	dc37      	bgt.n	80029d0 <checkregEoBRate2+0x9c>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02f      	beq.n	80029c4 <checkregEoBRate2+0x90>
 8002964:	2b01      	cmp	r3, #1
 8002966:	d02f      	beq.n	80029c8 <checkregEoBRate2+0x94>
 8002968:	e032      	b.n	80029d0 <checkregEoBRate2+0x9c>
 800296a:	3b93      	subs	r3, #147	; 0x93
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d82f      	bhi.n	80029d0 <checkregEoBRate2+0x9c>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <checkregEoBRate2+0x44>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	080029ad 	.word	0x080029ad
 800297c:	080029d1 	.word	0x080029d1
 8002980:	080029d1 	.word	0x080029d1
 8002984:	080029d1 	.word	0x080029d1
 8002988:	080029b1 	.word	0x080029b1
 800298c:	080029d1 	.word	0x080029d1
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029d1 	.word	0x080029d1
 8002998:	080029b5 	.word	0x080029b5
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029d1 	.word	0x080029d1
 80029a4:	080029d1 	.word	0x080029d1
 80029a8:	080029b9 	.word	0x080029b9
    case 0x93:
            return "\"3P78\""; //"Total Import Wh";
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <checkregEoBRate2+0xac>)
 80029ae:	e010      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x97:
            return "\"3P72\""; //"Total Export Wh";
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <checkregEoBRate2+0xb0>)
 80029b2:	e00e      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x9B:
            return "\"3P90\""; //"Total Import varh";
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <checkregEoBRate2+0xb4>)
 80029b6:	e00c      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x9F:
            return "\"3P84\""; //"Total Export varh";
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <checkregEoBRate2+0xb8>)
 80029ba:	e00a      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0xE3:
            return "\"3P2A\""; //"Total Import VAh";
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <checkregEoBRate2+0xbc>)
 80029be:	e008      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0xE7:
            return "\"3P96\""; //"Total Export VAh";
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <checkregEoBRate2+0xc0>)
 80029c2:	e006      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x00:
            return "\"3P8A\""; //"Total ABS Wh";
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <checkregEoBRate2+0xc4>)
 80029c6:	e004      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x01:
            return "\"3PEA\""; //"Total ABS varh";
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <checkregEoBRate2+0xc8>)
 80029ca:	e002      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    case 0x02:
            return "\"3P4B\""; //"Total ABS VAh";
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <checkregEoBRate2+0xcc>)
 80029ce:	e000      	b.n	80029d2 <checkregEoBRate2+0x9e>
            break;
    default:
    		return "\"3P4B\""; //"Total ABS VAh";
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <checkregEoBRate2+0xcc>)
            break;
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	0801eb50 	.word	0x0801eb50
 80029e4:	0801eb58 	.word	0x0801eb58
 80029e8:	0801eb60 	.word	0x0801eb60
 80029ec:	0801eb68 	.word	0x0801eb68
 80029f0:	0801eb70 	.word	0x0801eb70
 80029f4:	0801eb78 	.word	0x0801eb78
 80029f8:	0801eb80 	.word	0x0801eb80
 80029fc:	0801eb88 	.word	0x0801eb88
 8002a00:	0801eb90 	.word	0x0801eb90

08002a04 <checkregEoBRate3>:

const char * checkregEoBRate3(uint8_t reg){
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2be7      	cmp	r3, #231	; 0xe7
 8002a12:	d03d      	beq.n	8002a90 <checkregEoBRate3+0x8c>
 8002a14:	2be7      	cmp	r3, #231	; 0xe7
 8002a16:	dc43      	bgt.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a18:	2be3      	cmp	r3, #227	; 0xe3
 8002a1a:	d037      	beq.n	8002a8c <checkregEoBRate3+0x88>
 8002a1c:	2be3      	cmp	r3, #227	; 0xe3
 8002a1e:	dc3f      	bgt.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a20:	2b9f      	cmp	r3, #159	; 0x9f
 8002a22:	dc3d      	bgt.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a24:	2b93      	cmp	r3, #147	; 0x93
 8002a26:	da08      	bge.n	8002a3a <checkregEoBRate3+0x36>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d037      	beq.n	8002a9c <checkregEoBRate3+0x98>
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	dc37      	bgt.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02f      	beq.n	8002a94 <checkregEoBRate3+0x90>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d02f      	beq.n	8002a98 <checkregEoBRate3+0x94>
 8002a38:	e032      	b.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a3a:	3b93      	subs	r3, #147	; 0x93
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d82f      	bhi.n	8002aa0 <checkregEoBRate3+0x9c>
 8002a40:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <checkregEoBRate3+0x44>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002aa1 	.word	0x08002aa1
 8002a50:	08002aa1 	.word	0x08002aa1
 8002a54:	08002aa1 	.word	0x08002aa1
 8002a58:	08002a81 	.word	0x08002a81
 8002a5c:	08002aa1 	.word	0x08002aa1
 8002a60:	08002aa1 	.word	0x08002aa1
 8002a64:	08002aa1 	.word	0x08002aa1
 8002a68:	08002a85 	.word	0x08002a85
 8002a6c:	08002aa1 	.word	0x08002aa1
 8002a70:	08002aa1 	.word	0x08002aa1
 8002a74:	08002aa1 	.word	0x08002aa1
 8002a78:	08002a89 	.word	0x08002a89
    case 0x93:
            return "\"3P79\""; //"Total Import Wh";
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <checkregEoBRate3+0xac>)
 8002a7e:	e010      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x97:
            return "\"3P73\""; //"Total Export Wh";
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <checkregEoBRate3+0xb0>)
 8002a82:	e00e      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x9B:
            return "\"3P91\""; //"Total Import varh";
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <checkregEoBRate3+0xb4>)
 8002a86:	e00c      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x9F:
            return "\"3P85\""; //"Total Export varh";
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <checkregEoBRate3+0xb8>)
 8002a8a:	e00a      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0xE3:
            return "\"3P3A\""; //"Total Import VAh";
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <checkregEoBRate3+0xbc>)
 8002a8e:	e008      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0xE7:
            return "\"3P97\""; //"Total Export VAh";
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <checkregEoBRate3+0xc0>)
 8002a92:	e006      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x00:
            return "\"3P9A\""; //"Total ABS Wh";
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <checkregEoBRate3+0xc4>)
 8002a96:	e004      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x01:
            return "\"3PFA\""; //"Total ABS varh";
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <checkregEoBRate3+0xc8>)
 8002a9a:	e002      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    case 0x02:
            return "\"3P5B\""; //"Total ABS VAh";
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <checkregEoBRate3+0xcc>)
 8002a9e:	e000      	b.n	8002aa2 <checkregEoBRate3+0x9e>
            break;
    default:
    		return "\"3P5B\""; //"Total ABS VAh";
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <checkregEoBRate3+0xcc>)
            break;
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	0801eb98 	.word	0x0801eb98
 8002ab4:	0801eba0 	.word	0x0801eba0
 8002ab8:	0801eba8 	.word	0x0801eba8
 8002abc:	0801ebb0 	.word	0x0801ebb0
 8002ac0:	0801ebb8 	.word	0x0801ebb8
 8002ac4:	0801ebc0 	.word	0x0801ebc0
 8002ac8:	0801ebc8 	.word	0x0801ebc8
 8002acc:	0801ebd0 	.word	0x0801ebd0
 8002ad0:	0801ebd8 	.word	0x0801ebd8

08002ad4 <checkregEoBRate4>:

const char * checkregEoBRate4(uint8_t reg){
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2be7      	cmp	r3, #231	; 0xe7
 8002ae2:	d03d      	beq.n	8002b60 <checkregEoBRate4+0x8c>
 8002ae4:	2be7      	cmp	r3, #231	; 0xe7
 8002ae6:	dc43      	bgt.n	8002b70 <checkregEoBRate4+0x9c>
 8002ae8:	2be3      	cmp	r3, #227	; 0xe3
 8002aea:	d037      	beq.n	8002b5c <checkregEoBRate4+0x88>
 8002aec:	2be3      	cmp	r3, #227	; 0xe3
 8002aee:	dc3f      	bgt.n	8002b70 <checkregEoBRate4+0x9c>
 8002af0:	2b9f      	cmp	r3, #159	; 0x9f
 8002af2:	dc3d      	bgt.n	8002b70 <checkregEoBRate4+0x9c>
 8002af4:	2b93      	cmp	r3, #147	; 0x93
 8002af6:	da08      	bge.n	8002b0a <checkregEoBRate4+0x36>
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d037      	beq.n	8002b6c <checkregEoBRate4+0x98>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	dc37      	bgt.n	8002b70 <checkregEoBRate4+0x9c>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d02f      	beq.n	8002b64 <checkregEoBRate4+0x90>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d02f      	beq.n	8002b68 <checkregEoBRate4+0x94>
 8002b08:	e032      	b.n	8002b70 <checkregEoBRate4+0x9c>
 8002b0a:	3b93      	subs	r3, #147	; 0x93
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d82f      	bhi.n	8002b70 <checkregEoBRate4+0x9c>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <checkregEoBRate4+0x44>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b4d 	.word	0x08002b4d
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002b71 	.word	0x08002b71
 8002b24:	08002b71 	.word	0x08002b71
 8002b28:	08002b51 	.word	0x08002b51
 8002b2c:	08002b71 	.word	0x08002b71
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b71 	.word	0x08002b71
 8002b38:	08002b55 	.word	0x08002b55
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002b71 	.word	0x08002b71
 8002b44:	08002b71 	.word	0x08002b71
 8002b48:	08002b59 	.word	0x08002b59
    case 0x93:
            return "\"3P80\""; //"Total Import Wh";
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <checkregEoBRate4+0xac>)
 8002b4e:	e010      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x97:
            return "\"3P74\""; //"Total Export Wh";
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <checkregEoBRate4+0xb0>)
 8002b52:	e00e      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x9B:
            return "\"3P92\""; //"Total Import varh";
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <checkregEoBRate4+0xb4>)
 8002b56:	e00c      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x9F:
            return "\"3P86\""; //"Total Export varh";
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <checkregEoBRate4+0xb8>)
 8002b5a:	e00a      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0xE3:
            return "\"3P4A\""; //"Total Import VAh";
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <checkregEoBRate4+0xbc>)
 8002b5e:	e008      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0xE7:
            return "\"3P98\""; //"Total Export VAh";
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <checkregEoBRate4+0xc0>)
 8002b62:	e006      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x00:
            return "\"3PAA\""; //"Total ABS Wh";
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <checkregEoBRate4+0xc4>)
 8002b66:	e004      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x01:
            return "\"3P0B\""; //"Total ABS varh";
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <checkregEoBRate4+0xc8>)
 8002b6a:	e002      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    case 0x02:
            return "\"3P6B\""; //"Total ABS VAh";
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <checkregEoBRate4+0xcc>)
 8002b6e:	e000      	b.n	8002b72 <checkregEoBRate4+0x9e>
            break;
    default:
    		return "\"3P6B\""; //"Total ABS VAh";
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <checkregEoBRate4+0xcc>)
            break;
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	0801ebe0 	.word	0x0801ebe0
 8002b84:	0801ebe8 	.word	0x0801ebe8
 8002b88:	0801ebf0 	.word	0x0801ebf0
 8002b8c:	0801ebf8 	.word	0x0801ebf8
 8002b90:	0801ec00 	.word	0x0801ec00
 8002b94:	0801ec08 	.word	0x0801ec08
 8002b98:	0801ec10 	.word	0x0801ec10
 8002b9c:	0801ec18 	.word	0x0801ec18
 8002ba0:	0801ec20 	.word	0x0801ec20

08002ba4 <checkregEoBRate5>:

const char * checkregEoBRate5(uint8_t reg){
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2be7      	cmp	r3, #231	; 0xe7
 8002bb2:	d03d      	beq.n	8002c30 <checkregEoBRate5+0x8c>
 8002bb4:	2be7      	cmp	r3, #231	; 0xe7
 8002bb6:	dc43      	bgt.n	8002c40 <checkregEoBRate5+0x9c>
 8002bb8:	2be3      	cmp	r3, #227	; 0xe3
 8002bba:	d037      	beq.n	8002c2c <checkregEoBRate5+0x88>
 8002bbc:	2be3      	cmp	r3, #227	; 0xe3
 8002bbe:	dc3f      	bgt.n	8002c40 <checkregEoBRate5+0x9c>
 8002bc0:	2b9f      	cmp	r3, #159	; 0x9f
 8002bc2:	dc3d      	bgt.n	8002c40 <checkregEoBRate5+0x9c>
 8002bc4:	2b93      	cmp	r3, #147	; 0x93
 8002bc6:	da08      	bge.n	8002bda <checkregEoBRate5+0x36>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d037      	beq.n	8002c3c <checkregEoBRate5+0x98>
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	dc37      	bgt.n	8002c40 <checkregEoBRate5+0x9c>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02f      	beq.n	8002c34 <checkregEoBRate5+0x90>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d02f      	beq.n	8002c38 <checkregEoBRate5+0x94>
 8002bd8:	e032      	b.n	8002c40 <checkregEoBRate5+0x9c>
 8002bda:	3b93      	subs	r3, #147	; 0x93
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d82f      	bhi.n	8002c40 <checkregEoBRate5+0x9c>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <checkregEoBRate5+0x44>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c41 	.word	0x08002c41
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002c41 	.word	0x08002c41
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c41 	.word	0x08002c41
 8002c00:	08002c41 	.word	0x08002c41
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c25 	.word	0x08002c25
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002c41 	.word	0x08002c41
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002c29 	.word	0x08002c29
    case 0x93:
            return "\"3P85\""; //"Total Import Wh";
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <checkregEoBRate5+0xac>)
 8002c1e:	e010      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x97:
            return "\"3P75\""; //"Total Export Wh";
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <checkregEoBRate5+0xb0>)
 8002c22:	e00e      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x9B:
            return "\"3P93\""; //"Total Import varh";
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <checkregEoBRate5+0xb4>)
 8002c26:	e00c      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x9F:
            return "\"3P87\""; //"Total Export varh";
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <checkregEoBRate5+0xb8>)
 8002c2a:	e00a      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0xE3:
            return "\"3P5A\""; //"Total Import VAh";
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <checkregEoBRate5+0xbc>)
 8002c2e:	e008      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0xE7:
            return "\"3P99\""; //"Total Export VAh";
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <checkregEoBRate5+0xc0>)
 8002c32:	e006      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x00:
            return "\"3PBA\""; //"Total ABS Wh";
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <checkregEoBRate5+0xc4>)
 8002c36:	e004      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x01:
            return "\"3P1B\""; //"Total ABS varh";
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <checkregEoBRate5+0xc8>)
 8002c3a:	e002      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    case 0x02:
            return "\"3P7B\""; //"Total ABS VAh";
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <checkregEoBRate5+0xcc>)
 8002c3e:	e000      	b.n	8002c42 <checkregEoBRate5+0x9e>
            break;
    default:
    		return "\"3P7B\""; //"Total ABS VAh";
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <checkregEoBRate5+0xcc>)
            break;
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	0801ebb0 	.word	0x0801ebb0
 8002c54:	0801ec28 	.word	0x0801ec28
 8002c58:	0801ec30 	.word	0x0801ec30
 8002c5c:	0801ec38 	.word	0x0801ec38
 8002c60:	0801ec40 	.word	0x0801ec40
 8002c64:	0801ec48 	.word	0x0801ec48
 8002c68:	0801ec50 	.word	0x0801ec50
 8002c6c:	0801ec58 	.word	0x0801ec58
 8002c70:	0801ec60 	.word	0x0801ec60

08002c74 <readEoB2>:
  }
//  return "{\"nodata\":0}";
//    return 0;
}

void readEoB2(int i){
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  //reading 00000400 eob rate1,2,3,4,5,unified for user0-8
  char mychar[sizeof(eobuser0)];
  memcpy(mychar,eobuser0,sizeof(eobuser0));
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <readEoB2+0xb0>)
 8002c7e:	f107 0408 	add.w	r4, r7, #8
 8002c82:	461d      	mov	r5, r3
 8002c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c8c:	c407      	stmia	r4!, {r0, r1, r2}
 8002c8e:	8023      	strh	r3, [r4, #0]
  mychar[8] = eobuser0[8] | i;
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <readEoB2+0xb0>)
 8002c92:	7a1b      	ldrb	r3, [r3, #8]
 8002c94:	b25a      	sxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	743b      	strb	r3, [r7, #16]
  mychar[12] = eobuser0[12] | i;
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <readEoB2+0xb0>)
 8002ca4:	7b1b      	ldrb	r3, [r3, #12]
 8002ca6:	b25a      	sxtb	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	753b      	strb	r3, [r7, #20]
  mychar[16] = eobuser0[16] | i;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <readEoB2+0xb0>)
 8002cb6:	7c1b      	ldrb	r3, [r3, #16]
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	763b      	strb	r3, [r7, #24]
  mychar[20] = eobuser0[20] | i;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <readEoB2+0xb0>)
 8002cc8:	7d1b      	ldrb	r3, [r3, #20]
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	773b      	strb	r3, [r7, #28]
  mychar[24] = eobuser0[24] | i;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <readEoB2+0xb0>)
 8002cda:	7e1b      	ldrb	r3, [r3, #24]
 8002cdc:	b25a      	sxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f887 3020 	strb.w	r3, [r7, #32]
  mychar[28] = eobuser0[28] | i;
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <readEoB2+0xb0>)
 8002cee:	7f1b      	ldrb	r3, [r3, #28]
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
//      if(j==8 || j==12 || j==16 || j==20 || j==24 || j==28){
//    	eobuser0[j]=eobuser0[j] | i;
//      }
//    }

    setCommandMK6N(mychar, sizeof(mychar));
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	211e      	movs	r1, #30
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fc06 	bl	8001518 <setCommandMK6N>
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 200);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <readEoB2+0xb4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	23c8      	movs	r3, #200	; 0xc8
 8002d14:	4905      	ldr	r1, [pc, #20]	; (8002d2c <readEoB2+0xb8>)
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <readEoB2+0xbc>)
 8002d18:	f011 fb40 	bl	801439c <HAL_UART_Transmit>
}
 8002d1c:	bf00      	nop
 8002d1e:	3728      	adds	r7, #40	; 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdb0      	pop	{r4, r5, r7, pc}
 8002d24:	20000048 	.word	0x20000048
 8002d28:	20002968 	.word	0x20002968
 8002d2c:	20002644 	.word	0x20002644
 8002d30:	20002770 	.word	0x20002770

08002d34 <readEoB3>:

void readEoB3(char* datain, int len, int i){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	memcpy(dataMK6N,datain,len);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	4837      	ldr	r0, [pc, #220]	; (8002e24 <readEoB3+0xf0>)
 8002d48:	f018 fd82 	bl	801b850 <memcpy>
	data_lenMK6N=datasize(dataMK6N);
 8002d4c:	4835      	ldr	r0, [pc, #212]	; (8002e24 <readEoB3+0xf0>)
 8002d4e:	f003 f93f 	bl	8005fd0 <datasize>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <readEoB3+0xf4>)
 8002d56:	6013      	str	r3, [r2, #0]
    if(getRawDataMK6N(6)){
 8002d58:	2006      	movs	r0, #6
 8002d5a:	f7fe fb63 	bl	8001424 <getRawDataMK6N>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05b      	beq.n	8002e1c <readEoB3+0xe8>
//    	printData(dataMK6N, data_lenMK6N);
      eoblen=9;
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <readEoB3+0xf8>)
 8002d66:	2209      	movs	r2, #9
 8002d68:	601a      	str	r2, [r3, #0]
//      printf("datasize: %d,readEoB: ",data_lenMK6N);
      for(int k=0;k<6;k++){
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e052      	b.n	8002e16 <readEoB3+0xe2>
        hex2Double(dataMK6N,8*k);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4619      	mov	r1, r3
 8002d76:	482b      	ldr	r0, [pc, #172]	; (8002e24 <readEoB3+0xf0>)
 8002d78:	f003 f942 	bl	8006000 <hex2Double>
        if(k==0) eob0MK6N[i]=ulf.f;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <readEoB3+0x62>
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <readEoB3+0xfc>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	482a      	ldr	r0, [pc, #168]	; (8002e34 <readEoB3+0x100>)
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	00c9      	lsls	r1, r1, #3
 8002d8e:	4401      	add	r1, r0
 8002d90:	e9c1 2300 	strd	r2, r3, [r1]
 8002d94:	e03c      	b.n	8002e10 <readEoB3+0xdc>
        else if(k==1) eob1MK6N[i]=ulf.f;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d109      	bne.n	8002db0 <readEoB3+0x7c>
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <readEoB3+0xfc>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	4825      	ldr	r0, [pc, #148]	; (8002e38 <readEoB3+0x104>)
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	00c9      	lsls	r1, r1, #3
 8002da8:	4401      	add	r1, r0
 8002daa:	e9c1 2300 	strd	r2, r3, [r1]
 8002dae:	e02f      	b.n	8002e10 <readEoB3+0xdc>
        else if(k==2) eob2MK6N[i]=ulf.f;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d109      	bne.n	8002dca <readEoB3+0x96>
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <readEoB3+0xfc>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	481f      	ldr	r0, [pc, #124]	; (8002e3c <readEoB3+0x108>)
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	00c9      	lsls	r1, r1, #3
 8002dc2:	4401      	add	r1, r0
 8002dc4:	e9c1 2300 	strd	r2, r3, [r1]
 8002dc8:	e022      	b.n	8002e10 <readEoB3+0xdc>
        else if(k==3) eob3MK6N[i]=ulf.f;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d109      	bne.n	8002de4 <readEoB3+0xb0>
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <readEoB3+0xfc>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	481a      	ldr	r0, [pc, #104]	; (8002e40 <readEoB3+0x10c>)
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	00c9      	lsls	r1, r1, #3
 8002ddc:	4401      	add	r1, r0
 8002dde:	e9c1 2300 	strd	r2, r3, [r1]
 8002de2:	e015      	b.n	8002e10 <readEoB3+0xdc>
        else if(k==4) eob4MK6N[i]=ulf.f;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d109      	bne.n	8002dfe <readEoB3+0xca>
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <readEoB3+0xfc>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	4814      	ldr	r0, [pc, #80]	; (8002e44 <readEoB3+0x110>)
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	00c9      	lsls	r1, r1, #3
 8002df6:	4401      	add	r1, r0
 8002df8:	e9c1 2300 	strd	r2, r3, [r1]
 8002dfc:	e008      	b.n	8002e10 <readEoB3+0xdc>
        else eob9MK6N[i]=ulf.f;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <readEoB3+0xfc>)
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	4810      	ldr	r0, [pc, #64]	; (8002e48 <readEoB3+0x114>)
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	00c9      	lsls	r1, r1, #3
 8002e0a:	4401      	add	r1, r0
 8002e0c:	e9c1 2300 	strd	r2, r3, [r1]
      for(int k=0;k<6;k++){
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	dda9      	ble.n	8002d70 <readEoB3+0x3c>
//        printf("%.5f ",ulf.f);
      }
//      printf("\r\n");
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200039c0 	.word	0x200039c0
 8002e28:	20002968 	.word	0x20002968
 8002e2c:	20002640 	.word	0x20002640
 8002e30:	200038d8 	.word	0x200038d8
 8002e34:	20003e48 	.word	0x20003e48
 8002e38:	20003548 	.word	0x20003548
 8002e3c:	200026a8 	.word	0x200026a8
 8002e40:	200035c0 	.word	0x200035c0
 8002e44:	20003618 	.word	0x20003618
 8002e48:	20003968 	.word	0x20003968

08002e4c <decodeEoB3>:

void decodeEoB3(char* outstr){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  if(decodeEoB()) {
 8002e54:	f000 f898 	bl	8002f88 <decodeEoB>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01c      	beq.n	8002e98 <decodeEoB3+0x4c>
	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e00a      	b.n	8002e7a <decodeEoB3+0x2e>
		  *outstr++=datastrMK6N[i];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <decodeEoB3+0x54>)
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	440a      	add	r2, r1
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<datasizestrMK6N(datastrMK6N);i++){
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <decodeEoB3+0x54>)
 8002e7c:	f7fe f988 	bl	8001190 <datasizestrMK6N>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	dbed      	blt.n	8002e64 <decodeEoB3+0x18>
	  }
	  printf("%d\r\n",datasizestrMK6N(datastrMK6N));
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <decodeEoB3+0x54>)
 8002e8a:	f7fe f981 	bl	8001190 <datasizestrMK6N>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4619      	mov	r1, r3
 8002e92:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <decodeEoB3+0x58>)
 8002e94:	f019 fa06 	bl	801c2a4 <iprintf>
//	  return d;
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20001fe8 	.word	0x20001fe8
 8002ea4:	0801ec68 	.word	0x0801ec68

08002ea8 <txEoBInit1>:
      saveEoBInit1();
      return 1;
    }
    return 0;
}
void txEoBInit1(){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 8002eac:	f7fe f916 	bl	80010dc <dataallclearMK6N>
    setCommandMK6N(eobinit1, sizeof(eobinit1));
 8002eb0:	212a      	movs	r1, #42	; 0x2a
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <txEoBInit1+0x28>)
 8002eb4:	f7fe fb30 	bl	8001518 <setCommandMK6N>
//    printData(data2MK6N, data_lenMK6N);
	HAL_UART_Transmit(&huart3, (uint8_t * )data2MK6N, data_lenMK6N, 500);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <txEoBInit1+0x2c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ec2:	4905      	ldr	r1, [pc, #20]	; (8002ed8 <txEoBInit1+0x30>)
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <txEoBInit1+0x34>)
 8002ec6:	f011 fa69 	bl	801439c <HAL_UART_Transmit>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000001c 	.word	0x2000001c
 8002ed4:	20002968 	.word	0x20002968
 8002ed8:	20002644 	.word	0x20002644
 8002edc:	20002770 	.word	0x20002770

08002ee0 <rxEoBInit1>:
void rxEoBInit1(char* datain, int len){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	memcpy(dataMK6N,datain,len);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <rxEoBInit1+0x48>)
 8002ef2:	f018 fcad 	bl	801b850 <memcpy>
	data_lenMK6N=0;
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <rxEoBInit1+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
	data_lenMK6N=datasize(dataMK6N);
 8002efc:	480a      	ldr	r0, [pc, #40]	; (8002f28 <rxEoBInit1+0x48>)
 8002efe:	f003 f867 	bl	8005fd0 <datasize>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <rxEoBInit1+0x4c>)
 8002f06:	6013      	str	r3, [r2, #0]
//	printf("datasize: %d 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X\r\n",data_lenMK6N,dataMK6N[3],dataMK6N[7],dataMK6N[11],dataMK6N[15],dataMK6N[19],dataMK6N[23],dataMK6N[27],dataMK6N[31]);
    if(getRawDataMK6N(6)){
 8002f08:	2006      	movs	r0, #6
 8002f0a:	f7fe fa8b 	bl	8001424 <getRawDataMK6N>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <rxEoBInit1+0x3e>
      eoblen=9;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <rxEoBInit1+0x50>)
 8002f16:	2209      	movs	r2, #9
 8002f18:	601a      	str	r2, [r3, #0]
//      printData(dataMK6N,data_lenMK6N);
      saveEoBInit1();
 8002f1a:	f000 f80b 	bl	8002f34 <saveEoBInit1>
    }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200039c0 	.word	0x200039c0
 8002f2c:	20002968 	.word	0x20002968
 8002f30:	20002640 	.word	0x20002640

08002f34 <saveEoBInit1>:
      return 1;
    }
    return 0;
}

void saveEoBInit1(){
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
	for(int i=0;i<9;i++){
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	e014      	b.n	8002f6a <saveEoBInit1+0x36>
	    regeobinit1[i]=dataMK6N[i*4+3];
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	3303      	adds	r3, #3
 8002f46:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <saveEoBInit1+0x48>)
 8002f48:	5cd1      	ldrb	r1, [r2, r3]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <saveEoBInit1+0x4c>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	460a      	mov	r2, r1
 8002f52:	701a      	strb	r2, [r3, #0]
	    printf("0x%X ",regeobinit1[i]);
 8002f54:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <saveEoBInit1+0x4c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4809      	ldr	r0, [pc, #36]	; (8002f84 <saveEoBInit1+0x50>)
 8002f60:	f019 f9a0 	bl	801c2a4 <iprintf>
	for(int i=0;i<9;i++){
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3301      	adds	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	dde7      	ble.n	8002f40 <saveEoBInit1+0xc>
//	    temp=i*4+3;
	  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200039c0 	.word	0x200039c0
 8002f80:	20002f90 	.word	0x20002f90
 8002f84:	0801ea74 	.word	0x0801ea74

08002f88 <decodeEoB>:

bool decodeEoB(){
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
//  printData(data, data_lenMK6N);
	int maxloop=8;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	603b      	str	r3, [r7, #0]
	data_lenMK6N = 0;
 8002f92:	4ba1      	ldr	r3, [pc, #644]	; (8003218 <decodeEoB+0x290>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
	datastrclearMK6N();
 8002f98:	f7fe f8de 	bl	8001158 <datastrclearMK6N>

	strcpy(datastrMK6N,"{\"mid\":");
 8002f9c:	4a9f      	ldr	r2, [pc, #636]	; (800321c <decodeEoB+0x294>)
 8002f9e:	4ba0      	ldr	r3, [pc, #640]	; (8003220 <decodeEoB+0x298>)
 8002fa0:	cb03      	ldmia	r3!, {r0, r1}
 8002fa2:	6010      	str	r0, [r2, #0]
 8002fa4:	6051      	str	r1, [r2, #4]
	strcat(datastrMK6N, meterSNMK6N);
 8002fa6:	499f      	ldr	r1, [pc, #636]	; (8003224 <decodeEoB+0x29c>)
 8002fa8:	489c      	ldr	r0, [pc, #624]	; (800321c <decodeEoB+0x294>)
 8002faa:	f019 fa39 	bl	801c420 <strcat>
	strcat(datastrMK6N, ",\"pid\":\"EoBMK6N\",");
 8002fae:	489b      	ldr	r0, [pc, #620]	; (800321c <decodeEoB+0x294>)
 8002fb0:	f7fd f918 	bl	80001e4 <strlen>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b98      	ldr	r3, [pc, #608]	; (800321c <decodeEoB+0x294>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a9a      	ldr	r2, [pc, #616]	; (8003228 <decodeEoB+0x2a0>)
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc4:	6028      	str	r0, [r5, #0]
 8002fc6:	6069      	str	r1, [r5, #4]
 8002fc8:	60aa      	str	r2, [r5, #8]
 8002fca:	60eb      	str	r3, [r5, #12]
 8002fcc:	8823      	ldrh	r3, [r4, #0]
 8002fce:	822b      	strh	r3, [r5, #16]
//	SerialMonprintlnMK6N(datastrMK6N);
//  data_lenMK6N = setdatastr(",\"pid\":\"EOBMK6N\",\"readdate\":",data_lenMK6N);
//  datastr+=String(time2TimestampNowMK6N(second(),minute(),hour(),day(),month(),year()));
//  datastr+=",";
  for(int i=0;i<maxloop;i++){
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	e115      	b.n	8003202 <decodeEoB+0x27a>
//	  printf("%d\r\n",i);
  	strcat(datastrMK6N, checkregEoBRate1(regeobinit1[i]));
 8002fd6:	4a95      	ldr	r2, [pc, #596]	; (800322c <decodeEoB+0x2a4>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fc40 	bl	8002864 <checkregEoBRate1>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	488c      	ldr	r0, [pc, #560]	; (800321c <decodeEoB+0x294>)
 8002fea:	f019 fa19 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 8002fee:	488b      	ldr	r0, [pc, #556]	; (800321c <decodeEoB+0x294>)
 8002ff0:	f7fd f8f8 	bl	80001e4 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b88      	ldr	r3, [pc, #544]	; (800321c <decodeEoB+0x294>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	498c      	ldr	r1, [pc, #560]	; (8003230 <decodeEoB+0x2a8>)
 8002ffe:	461a      	mov	r2, r3
 8003000:	460b      	mov	r3, r1
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003006:	f7fe f8db 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob0MK6N[i]);
 800300a:	4a8a      	ldr	r2, [pc, #552]	; (8003234 <decodeEoB+0x2ac>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	4988      	ldr	r1, [pc, #544]	; (8003238 <decodeEoB+0x2b0>)
 8003018:	4888      	ldr	r0, [pc, #544]	; (800323c <decodeEoB+0x2b4>)
 800301a:	f019 f9e1 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800301e:	4987      	ldr	r1, [pc, #540]	; (800323c <decodeEoB+0x2b4>)
 8003020:	487e      	ldr	r0, [pc, #504]	; (800321c <decodeEoB+0x294>)
 8003022:	f019 f9fd 	bl	801c420 <strcat>
  	strcat(datastrMK6N, checkregEoBRate2(regeobinit1[i]));
 8003026:	4a81      	ldr	r2, [pc, #516]	; (800322c <decodeEoB+0x2a4>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc80 	bl	8002934 <checkregEoBRate2>
 8003034:	4603      	mov	r3, r0
 8003036:	4619      	mov	r1, r3
 8003038:	4878      	ldr	r0, [pc, #480]	; (800321c <decodeEoB+0x294>)
 800303a:	f019 f9f1 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 800303e:	4877      	ldr	r0, [pc, #476]	; (800321c <decodeEoB+0x294>)
 8003040:	f7fd f8d0 	bl	80001e4 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b74      	ldr	r3, [pc, #464]	; (800321c <decodeEoB+0x294>)
 800304a:	4413      	add	r3, r2
 800304c:	4978      	ldr	r1, [pc, #480]	; (8003230 <decodeEoB+0x2a8>)
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003056:	f7fe f8b3 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob1MK6N[i]);
 800305a:	4a79      	ldr	r2, [pc, #484]	; (8003240 <decodeEoB+0x2b8>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	4974      	ldr	r1, [pc, #464]	; (8003238 <decodeEoB+0x2b0>)
 8003068:	4874      	ldr	r0, [pc, #464]	; (800323c <decodeEoB+0x2b4>)
 800306a:	f019 f9b9 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800306e:	4973      	ldr	r1, [pc, #460]	; (800323c <decodeEoB+0x2b4>)
 8003070:	486a      	ldr	r0, [pc, #424]	; (800321c <decodeEoB+0x294>)
 8003072:	f019 f9d5 	bl	801c420 <strcat>
  	strcat(datastrMK6N, checkregEoBRate3(regeobinit1[i]));
 8003076:	4a6d      	ldr	r2, [pc, #436]	; (800322c <decodeEoB+0x2a4>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fcc0 	bl	8002a04 <checkregEoBRate3>
 8003084:	4603      	mov	r3, r0
 8003086:	4619      	mov	r1, r3
 8003088:	4864      	ldr	r0, [pc, #400]	; (800321c <decodeEoB+0x294>)
 800308a:	f019 f9c9 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 800308e:	4863      	ldr	r0, [pc, #396]	; (800321c <decodeEoB+0x294>)
 8003090:	f7fd f8a8 	bl	80001e4 <strlen>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b60      	ldr	r3, [pc, #384]	; (800321c <decodeEoB+0x294>)
 800309a:	4413      	add	r3, r2
 800309c:	4964      	ldr	r1, [pc, #400]	; (8003230 <decodeEoB+0x2a8>)
 800309e:	461a      	mov	r2, r3
 80030a0:	460b      	mov	r3, r1
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 80030a6:	f7fe f88b 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob2MK6N[i]);
 80030aa:	4a66      	ldr	r2, [pc, #408]	; (8003244 <decodeEoB+0x2bc>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	4960      	ldr	r1, [pc, #384]	; (8003238 <decodeEoB+0x2b0>)
 80030b8:	4860      	ldr	r0, [pc, #384]	; (800323c <decodeEoB+0x2b4>)
 80030ba:	f019 f991 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 80030be:	495f      	ldr	r1, [pc, #380]	; (800323c <decodeEoB+0x2b4>)
 80030c0:	4856      	ldr	r0, [pc, #344]	; (800321c <decodeEoB+0x294>)
 80030c2:	f019 f9ad 	bl	801c420 <strcat>
  	strcat(datastrMK6N, checkregEoBRate4(regeobinit1[i]));
 80030c6:	4a59      	ldr	r2, [pc, #356]	; (800322c <decodeEoB+0x2a4>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fd00 	bl	8002ad4 <checkregEoBRate4>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4619      	mov	r1, r3
 80030d8:	4850      	ldr	r0, [pc, #320]	; (800321c <decodeEoB+0x294>)
 80030da:	f019 f9a1 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 80030de:	484f      	ldr	r0, [pc, #316]	; (800321c <decodeEoB+0x294>)
 80030e0:	f7fd f880 	bl	80001e4 <strlen>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b4c      	ldr	r3, [pc, #304]	; (800321c <decodeEoB+0x294>)
 80030ea:	4413      	add	r3, r2
 80030ec:	4950      	ldr	r1, [pc, #320]	; (8003230 <decodeEoB+0x2a8>)
 80030ee:	461a      	mov	r2, r3
 80030f0:	460b      	mov	r3, r1
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 80030f6:	f7fe f863 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob3MK6N[i]);
 80030fa:	4a53      	ldr	r2, [pc, #332]	; (8003248 <decodeEoB+0x2c0>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	494c      	ldr	r1, [pc, #304]	; (8003238 <decodeEoB+0x2b0>)
 8003108:	484c      	ldr	r0, [pc, #304]	; (800323c <decodeEoB+0x2b4>)
 800310a:	f019 f969 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800310e:	494b      	ldr	r1, [pc, #300]	; (800323c <decodeEoB+0x2b4>)
 8003110:	4842      	ldr	r0, [pc, #264]	; (800321c <decodeEoB+0x294>)
 8003112:	f019 f985 	bl	801c420 <strcat>
  	strcat(datastrMK6N, checkregEoBRate5(regeobinit1[i]));
 8003116:	4a45      	ldr	r2, [pc, #276]	; (800322c <decodeEoB+0x2a4>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fd40 	bl	8002ba4 <checkregEoBRate5>
 8003124:	4603      	mov	r3, r0
 8003126:	4619      	mov	r1, r3
 8003128:	483c      	ldr	r0, [pc, #240]	; (800321c <decodeEoB+0x294>)
 800312a:	f019 f979 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 800312e:	483b      	ldr	r0, [pc, #236]	; (800321c <decodeEoB+0x294>)
 8003130:	f7fd f858 	bl	80001e4 <strlen>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b38      	ldr	r3, [pc, #224]	; (800321c <decodeEoB+0x294>)
 800313a:	4413      	add	r3, r2
 800313c:	493c      	ldr	r1, [pc, #240]	; (8003230 <decodeEoB+0x2a8>)
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003146:	f7fe f83b 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f,",eob4MK6N[i]);
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <decodeEoB+0x2c4>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	4938      	ldr	r1, [pc, #224]	; (8003238 <decodeEoB+0x2b0>)
 8003158:	4838      	ldr	r0, [pc, #224]	; (800323c <decodeEoB+0x2b4>)
 800315a:	f019 f941 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 800315e:	4937      	ldr	r1, [pc, #220]	; (800323c <decodeEoB+0x2b4>)
 8003160:	482e      	ldr	r0, [pc, #184]	; (800321c <decodeEoB+0x294>)
 8003162:	f019 f95d 	bl	801c420 <strcat>
  	strcat(datastrMK6N, checkregEoBRate9(regeobinit1[i]));
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <decodeEoB+0x2a4>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fb10 	bl	8002794 <checkregEoBRate9>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	4828      	ldr	r0, [pc, #160]	; (800321c <decodeEoB+0x294>)
 800317a:	f019 f951 	bl	801c420 <strcat>
  	strcat(datastrMK6N, ":");
 800317e:	4827      	ldr	r0, [pc, #156]	; (800321c <decodeEoB+0x294>)
 8003180:	f7fd f830 	bl	80001e4 <strlen>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <decodeEoB+0x294>)
 800318a:	4413      	add	r3, r2
 800318c:	4928      	ldr	r1, [pc, #160]	; (8003230 <decodeEoB+0x2a8>)
 800318e:	461a      	mov	r2, r3
 8003190:	460b      	mov	r3, r1
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	8013      	strh	r3, [r2, #0]
  	data2clearMK6N();
 8003196:	f7fe f813 	bl	80011c0 <data2clearMK6N>
  	sprintf(data2MK6N,"%.5f",eob9MK6N[i]);
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <decodeEoB+0x2c8>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	492b      	ldr	r1, [pc, #172]	; (8003254 <decodeEoB+0x2cc>)
 80031a8:	4824      	ldr	r0, [pc, #144]	; (800323c <decodeEoB+0x2b4>)
 80031aa:	f019 f919 	bl	801c3e0 <siprintf>
  	strcat(datastrMK6N, data2MK6N);
 80031ae:	4923      	ldr	r1, [pc, #140]	; (800323c <decodeEoB+0x2b4>)
 80031b0:	481a      	ldr	r0, [pc, #104]	; (800321c <decodeEoB+0x294>)
 80031b2:	f019 f935 	bl	801c420 <strcat>
    if(i<maxloop-1){
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	da0c      	bge.n	80031da <decodeEoB+0x252>
      	strcat(datastrMK6N,",");
 80031c0:	4816      	ldr	r0, [pc, #88]	; (800321c <decodeEoB+0x294>)
 80031c2:	f7fd f80f 	bl	80001e4 <strlen>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <decodeEoB+0x294>)
 80031cc:	4413      	add	r3, r2
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <decodeEoB+0x2d0>)
 80031d0:	461a      	mov	r2, r3
 80031d2:	460b      	mov	r3, r1
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	8013      	strh	r3, [r2, #0]
 80031d8:	e010      	b.n	80031fc <decodeEoB+0x274>
    }
    else if(i==maxloop-1){
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d10b      	bne.n	80031fc <decodeEoB+0x274>
      	strcat(datastrMK6N,"}");
 80031e4:	480d      	ldr	r0, [pc, #52]	; (800321c <decodeEoB+0x294>)
 80031e6:	f7fc fffd 	bl	80001e4 <strlen>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <decodeEoB+0x294>)
 80031f0:	4413      	add	r3, r2
 80031f2:	491a      	ldr	r1, [pc, #104]	; (800325c <decodeEoB+0x2d4>)
 80031f4:	461a      	mov	r2, r3
 80031f6:	460b      	mov	r3, r1
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	8013      	strh	r3, [r2, #0]
  for(int i=0;i<maxloop;i++){
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	f6ff aee5 	blt.w	8002fd6 <decodeEoB+0x4e>
    }
  }
//    SerialMonprintlnMK6N(datastrMK6N);
    return true;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	20002968 	.word	0x20002968
 800321c:	20001fe8 	.word	0x20001fe8
 8003220:	0801e9f4 	.word	0x0801e9f4
 8003224:	200003a0 	.word	0x200003a0
 8003228:	0801ec70 	.word	0x0801ec70
 800322c:	20002f90 	.word	0x20002f90
 8003230:	0801ea14 	.word	0x0801ea14
 8003234:	20003e48 	.word	0x20003e48
 8003238:	0801ea18 	.word	0x0801ea18
 800323c:	20002644 	.word	0x20002644
 8003240:	20003548 	.word	0x20003548
 8003244:	200026a8 	.word	0x200026a8
 8003248:	200035c0 	.word	0x200035c0
 800324c:	20003618 	.word	0x20003618
 8003250:	20003968 	.word	0x20003968
 8003254:	0801ec84 	.word	0x0801ec84
 8003258:	0801ec8c 	.word	0x0801ec8c
 800325c:	0801ec90 	.word	0x0801ec90

08003260 <datasizestrMK10E>:

void saveEoBDataMK10E();
void saveSNMK10E();

int datasizestrMK10E(char buf[])
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 800326c:	e002      	b.n	8003274 <datasizestrMK10E+0x14>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f6      	bne.n	800326e <datasizestrMK10E+0xe>
	return i+1;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <SerialMonprintlnMK10E>:

void SerialMonprintlnMK10E(char * ptr){
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	466b      	mov	r3, sp
 800329a:	461d      	mov	r5, r3
	uint32_t len=strlen(ptr);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fc ffa1 	bl	80001e4 <strlen>
 80032a2:	6178      	str	r0, [r7, #20]
	uint8_t ptr1[len+2];
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	1c9c      	adds	r4, r3, #2
 80032a8:	4623      	mov	r3, r4
 80032aa:	3b01      	subs	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	00cb      	lsls	r3, r1, #3
 80032be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032c2:	00c2      	lsls	r2, r0, #3
 80032c4:	4620      	mov	r0, r4
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032d8:	00c2      	lsls	r2, r0, #3
 80032da:	1de3      	adds	r3, r4, #7
 80032dc:	08db      	lsrs	r3, r3, #3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	ebad 0d03 	sub.w	sp, sp, r3
 80032e4:	466b      	mov	r3, sp
 80032e6:	3300      	adds	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
	memcpy(ptr1, (uint8_t *)ptr, len);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f018 faad 	bl	801b850 <memcpy>
	ptr1[len]= 0x0D;
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4413      	add	r3, r2
 80032fc:	220d      	movs	r2, #13
 80032fe:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	210a      	movs	r1, #10
 8003308:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, ptr1, len+2, 3000);
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	b29b      	uxth	r3, r3
 8003310:	3302      	adds	r3, #2
 8003312:	b29a      	uxth	r2, r3
 8003314:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <SerialMonprintlnMK10E+0x98>)
 800331a:	f011 f83f 	bl	801439c <HAL_UART_Transmit>
 800331e:	46ad      	mov	sp, r5
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	20002fe0 	.word	0x20002fe0

0800332c <dataallclearMK10E>:
	while(*buf++ != '\0') i++;
	return i;
}

void dataallclearMK10E(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e007      	b.n	8003348 <dataallclearMK10E+0x1c>
	{
		dataMK10E[i] = '\0';
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <dataallclearMK10E+0x74>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3301      	adds	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f240 424b 	movw	r2, #1099	; 0x44b
 800334e:	4293      	cmp	r3, r2
 8003350:	ddf2      	ble.n	8003338 <dataallclearMK10E+0xc>
	}
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	e007      	b.n	8003368 <dataallclearMK10E+0x3c>
	{
		data2MK10E[i] = '\0';
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <dataallclearMK10E+0x78>)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f240 424b 	movw	r2, #1099	; 0x44b
 800336e:	4293      	cmp	r3, r2
 8003370:	ddf2      	ble.n	8003358 <dataallclearMK10E+0x2c>
	}
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	e007      	b.n	8003388 <dataallclearMK10E+0x5c>
	{
		datastrMK10E[i] = '\0';
 8003378:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <dataallclearMK10E+0x7c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3301      	adds	r3, #1
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f240 424b 	movw	r2, #1099	; 0x44b
 800338e:	4293      	cmp	r3, r2
 8003390:	ddf2      	ble.n	8003378 <dataallclearMK10E+0x4c>
	}
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	200030fc 	.word	0x200030fc
 80033a4:	20003060 	.word	0x20003060
 80033a8:	20002974 	.word	0x20002974

080033ac <data2clearMK10E>:
		dataMK10E[i] = '\0';
	}
}

void data2clearMK10E(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
	for (int i=0; i < 20; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	e007      	b.n	80033c8 <data2clearMK10E+0x1c>
	{
		data2MK10E[i] = '\0';
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <data2clearMK10E+0x30>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 20; i++)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3301      	adds	r3, #1
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b13      	cmp	r3, #19
 80033cc:	ddf4      	ble.n	80033b8 <data2clearMK10E+0xc>
	}
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20003060 	.word	0x20003060

080033e0 <datastrclearMK10E>:

void datastrclearMK10E(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
	for (int i=0; i < BUFFSIZEMK10E; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	e007      	b.n	80033fc <datastrclearMK10E+0x1c>
	{
		datastrMK10E[i] = '\0';
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <datastrclearMK10E+0x34>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < BUFFSIZEMK10E; i++)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3301      	adds	r3, #1
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f240 424b 	movw	r2, #1099	; 0x44b
 8003402:	4293      	cmp	r3, r2
 8003404:	ddf2      	ble.n	80033ec <datastrclearMK10E+0xc>
	}
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	20002974 	.word	0x20002974

08003418 <setPaddingMK10ELP>:
    idx++;
  }
  data_lenMK10E = idx;
}

void setPaddingMK10ELP(){
 8003418:	b4b0      	push	{r4, r5, r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	466b      	mov	r3, sp
 8003420:	461d      	mov	r5, r3
  unsigned int lentemp=data_lenMK10E, idx=0;
 8003422:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <setPaddingMK10ELP+0x190>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  uint8_t datatemp[data_lenMK10E];
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <setPaddingMK10ELP+0x190>)
 800342e:	681c      	ldr	r4, [r3, #0]
 8003430:	1e63      	subs	r3, r4, #1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	4623      	mov	r3, r4
 8003436:	4618      	mov	r0, r3
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	00cb      	lsls	r3, r1, #3
 8003446:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800344a:	00c2      	lsls	r2, r0, #3
 800344c:	4623      	mov	r3, r4
 800344e:	4618      	mov	r0, r3
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	00cb      	lsls	r3, r1, #3
 800345e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003462:	00c2      	lsls	r2, r0, #3
 8003464:	4623      	mov	r3, r4
 8003466:	3307      	adds	r3, #7
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	ebad 0d03 	sub.w	sp, sp, r3
 8003470:	466b      	mov	r3, sp
 8003472:	3300      	adds	r3, #0
 8003474:	603b      	str	r3, [r7, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e00b      	b.n	8003494 <setPaddingMK10ELP+0x7c>
    datatemp[i]=data2MK10E[i];
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <setPaddingMK10ELP+0x194>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	7819      	ldrb	r1, [r3, #0]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	460a      	mov	r2, r1
 800348c:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3301      	adds	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <setPaddingMK10ELP+0x190>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4293      	cmp	r3, r2
 800349e:	d3ed      	bcc.n	800347c <setPaddingMK10ELP+0x64>
  }
  for(unsigned int i=0;i<lentemp;i++){
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e073      	b.n	800358e <setPaddingMK10ELP+0x176>
    if(i==0){
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <setPaddingMK10ELP+0xa0>
      data2MK10E[idx]=0x02;
 80034ac:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <setPaddingMK10ELP+0x194>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e064      	b.n	8003582 <setPaddingMK10ELP+0x16a>
    }
    else if(i==lentemp-1){
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d105      	bne.n	80034ce <setPaddingMK10ELP+0xb6>
      data2MK10E[idx]=0x03;
 80034c2:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <setPaddingMK10ELP+0x194>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	2203      	movs	r2, #3
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e059      	b.n	8003582 <setPaddingMK10ELP+0x16a>
    }
    else if((datatemp[i]==0x13 && (i<lentemp-1 && i>0)) || datatemp[i]==0x02 || datatemp[i]==0x10 || datatemp[i]==0x11){
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b13      	cmp	r3, #19
 80034d8:	d107      	bne.n	80034ea <setPaddingMK10ELP+0xd2>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d202      	bcs.n	80034ea <setPaddingMK10ELP+0xd2>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d111      	bne.n	800350e <setPaddingMK10ELP+0xf6>
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d00b      	beq.n	800350e <setPaddingMK10ELP+0xf6>
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4413      	add	r3, r2
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d005      	beq.n	800350e <setPaddingMK10ELP+0xf6>
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b11      	cmp	r3, #17
 800350c:	d112      	bne.n	8003534 <setPaddingMK10ELP+0x11c>
      data2MK10E[idx++]=0x10;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	60fa      	str	r2, [r7, #12]
 8003514:	4a25      	ldr	r2, [pc, #148]	; (80035ac <setPaddingMK10ELP+0x194>)
 8003516:	2110      	movs	r1, #16
 8003518:	54d1      	strb	r1, [r2, r3]
      data2MK10E[idx]=datatemp[i]|0x40;
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003526:	b2d9      	uxtb	r1, r3
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <setPaddingMK10ELP+0x194>)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	460a      	mov	r2, r1
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e026      	b.n	8003582 <setPaddingMK10ELP+0x16a>
    }
    else if(i<lentemp-1 && datatemp[i]==0x03){
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3b01      	subs	r3, #1
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d218      	bcs.n	8003570 <setPaddingMK10ELP+0x158>
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d112      	bne.n	8003570 <setPaddingMK10ELP+0x158>
      data2MK10E[idx++]=0x10;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <setPaddingMK10ELP+0x194>)
 8003552:	2110      	movs	r1, #16
 8003554:	54d1      	strb	r1, [r2, r3]
      data2MK10E[idx]=datatemp[i]|0x40;
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003562:	b2d9      	uxtb	r1, r3
 8003564:	4a11      	ldr	r2, [pc, #68]	; (80035ac <setPaddingMK10ELP+0x194>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	460a      	mov	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e008      	b.n	8003582 <setPaddingMK10ELP+0x16a>
    }
    else    data2MK10E[idx]=datatemp[i];
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4413      	add	r3, r2
 8003576:	7819      	ldrb	r1, [r3, #0]
 8003578:	4a0c      	ldr	r2, [pc, #48]	; (80035ac <setPaddingMK10ELP+0x194>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	460a      	mov	r2, r1
 8003580:	701a      	strb	r2, [r3, #0]
    idx++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<lentemp;i++){
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3301      	adds	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d387      	bcc.n	80034a6 <setPaddingMK10ELP+0x8e>
  }
  data_lenMK10E = idx;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a03      	ldr	r2, [pc, #12]	; (80035a8 <setPaddingMK10ELP+0x190>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	46ad      	mov	sp, r5
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bcb0      	pop	{r4, r5, r7}
 80035a6:	4770      	bx	lr
 80035a8:	20002970 	.word	0x20002970
 80035ac:	20003060 	.word	0x20003060

080035b0 <setCommandLPMK10E>:
   dataMK10E[sizearr]  = (uint8_t)valuecrc;
   data_lenMK10E = sizearr+3;
   setPaddingMK10E();
}

void setCommandLPMK10E(char array[], unsigned int sizearr){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  for(int i=0;i<sizearr;i++){
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	e00b      	b.n	80035d8 <setCommandLPMK10E+0x28>
    data2MK10E[i]=array[i];
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	7819      	ldrb	r1, [r3, #0]
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <setCommandLPMK10E+0x9c>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	460a      	mov	r2, r1
 80035d0:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<sizearr;i++){
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3301      	adds	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d8ef      	bhi.n	80035c0 <setCommandLPMK10E+0x10>
  }
  data_lenMK10E = sizearr;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <setCommandLPMK10E+0xa0>)
 80035e4:	6013      	str	r3, [r2, #0]
  clearCrc();
 80035e6:	f7fd fc8b 	bl	8000f00 <clearCrc>
   valuecrc = XModemCrc(array,0,sizearr);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	2100      	movs	r1, #0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fd50 	bl	8001098 <XModemCrc>
 80035f8:	4603      	mov	r3, r0
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <setCommandLPMK10E+0xa4>)
 80035fe:	801a      	strh	r2, [r3, #0]
   data2MK10E[sizearr+2]=0x03;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3302      	adds	r3, #2
 8003604:	4a11      	ldr	r2, [pc, #68]	; (800364c <setCommandLPMK10E+0x9c>)
 8003606:	2103      	movs	r1, #3
 8003608:	54d1      	strb	r1, [r2, r3]
   data2MK10E[sizearr+1]= (uint8_t) valuecrc;
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <setCommandLPMK10E+0xa4>)
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b2d1      	uxtb	r1, r2
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <setCommandLPMK10E+0x9c>)
 8003616:	54d1      	strb	r1, [r2, r3]
   valuecrc  = valuecrc >> 8;
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <setCommandLPMK10E+0xa4>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <setCommandLPMK10E+0xa4>)
 8003622:	801a      	strh	r2, [r3, #0]
   data2MK10E[sizearr]  = (uint8_t)valuecrc;
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <setCommandLPMK10E+0xa4>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b2d9      	uxtb	r1, r3
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <setCommandLPMK10E+0x9c>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4413      	add	r3, r2
 8003630:	460a      	mov	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]
   data_lenMK10E = sizearr+3;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	3303      	adds	r3, #3
 8003638:	461a      	mov	r2, r3
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <setCommandLPMK10E+0xa0>)
 800363c:	601a      	str	r2, [r3, #0]
   setPaddingMK10ELP();
 800363e:	f7ff feeb 	bl	8003418 <setPaddingMK10ELP>
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20003060 	.word	0x20003060
 8003650:	20002970 	.word	0x20002970
 8003654:	200028b6 	.word	0x200028b6

08003658 <removePaddingMK10E>:

void removePaddingMK10E(){
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
  unsigned int lentemp=data_lenMK10E;
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <removePaddingMK10E+0x90>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	e02e      	b.n	80036c8 <removePaddingMK10E+0x70>
    if(dataMK10E[i]==0x10){
 800366a:	4a20      	ldr	r2, [pc, #128]	; (80036ec <removePaddingMK10E+0x94>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b10      	cmp	r3, #16
 8003674:	d125      	bne.n	80036c2 <removePaddingMK10E+0x6a>
    	dataMK10E[i]=dataMK10E[i+1]^0x40;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <removePaddingMK10E+0x94>)
 800367c:	5cd3      	ldrb	r3, [r2, r3]
 800367e:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003682:	b2d9      	uxtb	r1, r3
 8003684:	4a19      	ldr	r2, [pc, #100]	; (80036ec <removePaddingMK10E+0x94>)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	460a      	mov	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK10E-1;j++){
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3301      	adds	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e00b      	b.n	80036ae <removePaddingMK10E+0x56>
    	  dataMK10E[j]=dataMK10E[j+1];
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3301      	adds	r3, #1
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <removePaddingMK10E+0x94>)
 800369c:	5cd1      	ldrb	r1, [r2, r3]
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <removePaddingMK10E+0x94>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4413      	add	r3, r2
 80036a4:	460a      	mov	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int j=i+1;j<data_lenMK10E-1;j++){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <removePaddingMK10E+0x90>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	461a      	mov	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d3ec      	bcc.n	8003696 <removePaddingMK10E+0x3e>
      }
      lentemp--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <removePaddingMK10E+0x90>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d3ca      	bcc.n	800366a <removePaddingMK10E+0x12>
    }
  }
  data_lenMK10E = lentemp;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <removePaddingMK10E+0x90>)
 80036d8:	6013      	str	r3, [r2, #0]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20002970 	.word	0x20002970
 80036ec:	200030fc 	.word	0x200030fc

080036f0 <removeheadcrctailMK10E>:


void removeheadcrctailMK10E(int sizeheadcmd){
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  // remove CRC and Tail
  dataMK10E[data_lenMK10E-1]=0;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <removeheadcrctailMK10E+0x88>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <removeheadcrctailMK10E+0x8c>)
 8003700:	2100      	movs	r1, #0
 8003702:	54d1      	strb	r1, [r2, r3]
  dataMK10E[data_lenMK10E-2]=0;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <removeheadcrctailMK10E+0x88>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3b02      	subs	r3, #2
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <removeheadcrctailMK10E+0x8c>)
 800370c:	2100      	movs	r1, #0
 800370e:	54d1      	strb	r1, [r2, r3]
  dataMK10E[data_lenMK10E-3]=0;
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <removeheadcrctailMK10E+0x88>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b03      	subs	r3, #3
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <removeheadcrctailMK10E+0x8c>)
 8003718:	2100      	movs	r1, #0
 800371a:	54d1      	strb	r1, [r2, r3]
  data_lenMK10E=data_lenMK10E-3;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <removeheadcrctailMK10E+0x88>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b03      	subs	r3, #3
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <removeheadcrctailMK10E+0x88>)
 8003724:	6013      	str	r3, [r2, #0]
  //remove head
  for(unsigned int i=0;i<data_lenMK10E;i++){
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e013      	b.n	8003754 <removeheadcrctailMK10E+0x64>
    if(i+sizeheadcmd<=BUFFSIZEMK10E){
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	f240 424c 	movw	r2, #1100	; 0x44c
 8003736:	4293      	cmp	r3, r2
 8003738:	d809      	bhi.n	800374e <removeheadcrctailMK10E+0x5e>
      dataMK10E[i]=dataMK10E[i+sizeheadcmd];
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	4a0e      	ldr	r2, [pc, #56]	; (800377c <removeheadcrctailMK10E+0x8c>)
 8003742:	5cd1      	ldrb	r1, [r2, r3]
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <removeheadcrctailMK10E+0x8c>)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	460a      	mov	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
  for(unsigned int i=0;i<data_lenMK10E;i++){
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3301      	adds	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <removeheadcrctailMK10E+0x88>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4293      	cmp	r3, r2
 800375e:	d3e5      	bcc.n	800372c <removeheadcrctailMK10E+0x3c>
    }
  }
  // update data_lenMK10E
  data_lenMK10E=data_lenMK10E-sizeheadcmd;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <removeheadcrctailMK10E+0x88>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <removeheadcrctailMK10E+0x88>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20002970 	.word	0x20002970
 800377c:	200030fc 	.word	0x200030fc

08003780 <getRawDataMK10E>:
      return true;
    }
    else return false;
}

bool getRawDataMK10E(int headcmd){
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
    clearCrc();
 8003788:	f7fd fbba 	bl	8000f00 <clearCrc>
    data_lenMK10E = datasize(dataMK10E);
 800378c:	4807      	ldr	r0, [pc, #28]	; (80037ac <getRawDataMK10E+0x2c>)
 800378e:	f002 fc1f 	bl	8005fd0 <datasize>
 8003792:	4603      	mov	r3, r0
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <getRawDataMK10E+0x30>)
 8003796:	6013      	str	r3, [r2, #0]
    removePaddingMK10E();
 8003798:	f7ff ff5e 	bl	8003658 <removePaddingMK10E>
//    valuecrc = XModemCrc(dataMK10E,0,data_lenMK10E-3);
//    if(checkcrcMK10E()){
//      SerialMonprintln("RemoveHeadCRCTail");
//      printData(dataMK10E,data_lenMK10E);
      removeheadcrctailMK10E(headcmd);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ffa7 	bl	80036f0 <removeheadcrctailMK10E>
      return true;
 80037a2:	2301      	movs	r3, #1
//    }
    return true;
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	200030fc 	.word	0x200030fc
 80037b0:	20002970 	.word	0x20002970

080037b4 <saveSNMK10E>:

void saveSNMK10E(){
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
  if(data_lenMK10E>11) removeheadcrctailMK10E(5);
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <saveSNMK10E+0x48>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b0b      	cmp	r3, #11
 80037c0:	dd02      	ble.n	80037c8 <saveSNMK10E+0x14>
 80037c2:	2005      	movs	r0, #5
 80037c4:	f7ff ff94 	bl	80036f0 <removeheadcrctailMK10E>
  for(int i=0;i<data_lenMK10E;i++){
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e00b      	b.n	80037e6 <saveSNMK10E+0x32>
    meterSNMK10E[i] = dataMK10E[i];
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <saveSNMK10E+0x4c>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	7819      	ldrb	r1, [r3, #0]
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <saveSNMK10E+0x50>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<data_lenMK10E;i++){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <saveSNMK10E+0x48>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	dbee      	blt.n	80037ce <saveSNMK10E+0x1a>
  }
//  printf("SN: %s\r\n",meterSNMK10E);
//  HAL_Delay(100);
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20002970 	.word	0x20002970
 8003800:	200030fc 	.word	0x200030fc
 8003804:	200000b0 	.word	0x200000b0

08003808 <txSNMK10E_rtos>:
//    	SerialMonprintln((char *)dataMK10E);
    }
    return meterSNMK10E;
}

void txSNMK10E_rtos(){
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 800380c:	f7ff fd8e 	bl	800332c <dataallclearMK10E>
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )meterreq, sizeof(meterreq), 100);
 8003810:	2364      	movs	r3, #100	; 0x64
 8003812:	2208      	movs	r2, #8
 8003814:	4904      	ldr	r1, [pc, #16]	; (8003828 <txSNMK10E_rtos+0x20>)
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <txSNMK10E_rtos+0x24>)
 8003818:	f010 fdc0 	bl	801439c <HAL_UART_Transmit>
	osDelay(2000);
 800381c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003820:	f015 f9aa 	bl	8018b78 <osDelay>
}
 8003824:	bf00      	nop
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000014 	.word	0x20000014
 800382c:	20002770 	.word	0x20002770

08003830 <rxSNMK10E_rtos>:

const char* rxSNMK10E_rtos(unsigned char buf[],int len){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
	dataallclearMK10E();
 800383a:	f7ff fd77 	bl	800332c <dataallclearMK10E>
	memcpy(dataMK10E,buf,len);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	480d      	ldr	r0, [pc, #52]	; (800387c <rxSNMK10E_rtos+0x4c>)
 8003846:	f018 f803 	bl	801b850 <memcpy>
  data_lenMK10E=0;
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <rxSNMK10E_rtos+0x50>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
  data_lenMK10E=datasize(dataMK10E);
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <rxSNMK10E_rtos+0x4c>)
 8003852:	f002 fbbd 	bl	8005fd0 <datasize>
 8003856:	4603      	mov	r3, r0
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <rxSNMK10E_rtos+0x50>)
 800385a:	6013      	str	r3, [r2, #0]
    if(data_lenMK10E>4){
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <rxSNMK10E_rtos+0x50>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b04      	cmp	r3, #4
 8003862:	dd06      	ble.n	8003872 <rxSNMK10E_rtos+0x42>
    	SerialMtrFlag=true;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <rxSNMK10E_rtos+0x54>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
    	saveSNMK10E();
 800386a:	f7ff ffa3 	bl	80037b4 <saveSNMK10E>
        return meterSNMK10E;
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <rxSNMK10E_rtos+0x58>)
 8003870:	e000      	b.n	8003874 <rxSNMK10E_rtos+0x44>
//    	printf("0x%X 0x%X 0x%X 0x%X 0x%X ",dataMK10E[0],dataMK10E[1],dataMK10E[2],dataMK10E[3],dataMK10E[4]);
//    	printf("0x%X 0x%X 0x%X 0x%X 0x%X \r\n",dataMK10E[5],dataMK10E[6],dataMK10E[7],dataMK10E[8],dataMK10E[9]);
//    	SerialMonprintln((char *)dataMK10E);
    }
    return meterSNMK10E;
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <rxSNMK10E_rtos+0x58>)
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200030fc 	.word	0x200030fc
 8003880:	20002970 	.word	0x20002970
 8003884:	2000039e 	.word	0x2000039e
 8003888:	200000b0 	.word	0x200000b0

0800388c <formatInstantMK10E>:
    }
    return timestamp_now;
}
// ---------- Decoding and Formating Functions

const char * formatInstantMK10E(uint8_t reg){
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  switch(reg){
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b19      	cmp	r3, #25
 800389a:	d85f      	bhi.n	800395c <formatInstantMK10E+0xd0>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <formatInstantMK10E+0x18>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	08003911 	.word	0x08003911
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003919 	.word	0x08003919
 80038b4:	0800391d 	.word	0x0800391d
 80038b8:	08003921 	.word	0x08003921
 80038bc:	08003925 	.word	0x08003925
 80038c0:	08003929 	.word	0x08003929
 80038c4:	0800392d 	.word	0x0800392d
 80038c8:	0800395d 	.word	0x0800395d
 80038cc:	0800395d 	.word	0x0800395d
 80038d0:	0800395d 	.word	0x0800395d
 80038d4:	0800395d 	.word	0x0800395d
 80038d8:	0800395d 	.word	0x0800395d
 80038dc:	0800395d 	.word	0x0800395d
 80038e0:	08003931 	.word	0x08003931
 80038e4:	08003935 	.word	0x08003935
 80038e8:	08003939 	.word	0x08003939
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	08003941 	.word	0x08003941
 80038f4:	08003945 	.word	0x08003945
 80038f8:	08003949 	.word	0x08003949
 80038fc:	0800394d 	.word	0x0800394d
 8003900:	08003951 	.word	0x08003951
 8003904:	08003955 	.word	0x08003955
 8003908:	08003959 	.word	0x08003959
    case 0:
            return "\"3P59\""; // volt A
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <formatInstantMK10E+0xe0>)
 800390e:	e026      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 1:
    		return  "\"3P60\""; // volt B
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <formatInstantMK10E+0xe4>)
 8003912:	e024      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 2:
    		return "\"3P61\""; // volt C
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <formatInstantMK10E+0xe8>)
 8003916:	e022      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 3:
    		return "\"3P09\""; // current A
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <formatInstantMK10E+0xec>)
 800391a:	e020      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 4:
    		return "\"3P10\""; // current B
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <formatInstantMK10E+0xf0>)
 800391e:	e01e      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 5:
    		return "\"3P11\""; // current C
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <formatInstantMK10E+0xf4>)
 8003922:	e01c      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 6:
    		return "\"3P62\""; // phase angle A
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <formatInstantMK10E+0xf8>)
 8003926:	e01a      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 7:
			return "\"3P63\""; // phase angle B
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <formatInstantMK10E+0xfc>)
 800392a:	e018      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 8:
			return "\"3P64\""; // phase angle C
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <formatInstantMK10E+0x100>)
 800392e:	e016      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 15:
			return "\"3P01\""; // phase A Watts
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <formatInstantMK10E+0x104>)
 8003932:	e014      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 16:
			return "\"3P02\""; // Phase B Watts
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <formatInstantMK10E+0x108>)
 8003936:	e012      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 17:
            return "\"3P03\""; // phase C Watts
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <formatInstantMK10E+0x10c>)
 800393a:	e010      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 18:
            return "\"3P43\""; // phase A Vars
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <formatInstantMK10E+0x110>)
 800393e:	e00e      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 19:
            return "\"3P44\""; // phase B Vars
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <formatInstantMK10E+0x114>)
 8003942:	e00c      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 20:
            return "\"3P45\""; // phase C Vars
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <formatInstantMK10E+0x118>)
 8003946:	e00a      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 21:
            return "\"3P05\""; // phase A VA
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <formatInstantMK10E+0x11c>)
 800394a:	e008      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 22:
            return "\"3P06\""; // phase B VA
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <formatInstantMK10E+0x120>)
 800394e:	e006      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 23:
            return "\"3P07\""; // phase C VA
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <formatInstantMK10E+0x124>)
 8003952:	e004      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 24:
            return "\"3P13\""; // Freq
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <formatInstantMK10E+0x128>)
 8003956:	e002      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    case 25:
            return "PF";
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <formatInstantMK10E+0x12c>)
 800395a:	e000      	b.n	800395e <formatInstantMK10E+0xd2>
            break;
    default:
            return "\"3P13\""; // Freq
 800395c:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <formatInstantMK10E+0x128>)
            break;
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	0801e954 	.word	0x0801e954
 8003970:	0801e95c 	.word	0x0801e95c
 8003974:	0801e964 	.word	0x0801e964
 8003978:	0801e96c 	.word	0x0801e96c
 800397c:	0801e974 	.word	0x0801e974
 8003980:	0801e97c 	.word	0x0801e97c
 8003984:	0801e984 	.word	0x0801e984
 8003988:	0801e98c 	.word	0x0801e98c
 800398c:	0801e994 	.word	0x0801e994
 8003990:	0801e99c 	.word	0x0801e99c
 8003994:	0801e9a4 	.word	0x0801e9a4
 8003998:	0801e9ac 	.word	0x0801e9ac
 800399c:	0801e9b4 	.word	0x0801e9b4
 80039a0:	0801e9bc 	.word	0x0801e9bc
 80039a4:	0801e9c4 	.word	0x0801e9c4
 80039a8:	0801e9cc 	.word	0x0801e9cc
 80039ac:	0801e9d4 	.word	0x0801e9d4
 80039b0:	0801e9dc 	.word	0x0801e9dc
 80039b4:	0801e9e4 	.word	0x0801e9e4
 80039b8:	0801ecc8 	.word	0x0801ecc8

080039bc <formatLPRegMK10E>:
            return "\"3P42\"";
            break;
  }
}

const char * formatLPRegMK10E(int a){
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  switch (a){
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 80039ca:	4293      	cmp	r3, r2
 80039cc:	f000 809f 	beq.w	8003b0e <formatLPRegMK10E+0x152>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f300 809b 	bgt.w	8003b12 <formatLPRegMK10E+0x156>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f243 4227 	movw	r2, #13351	; 0x3427
 80039e2:	4293      	cmp	r3, r2
 80039e4:	dc70      	bgt.n	8003ac8 <formatLPRegMK10E+0x10c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f243 4203 	movw	r2, #13315	; 0x3403
 80039ec:	4293      	cmp	r3, r2
 80039ee:	da17      	bge.n	8003a20 <formatLPRegMK10E+0x64>
 80039f0:	e08f      	b.n	8003b12 <formatLPRegMK10E+0x156>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f5a3 4334 	sub.w	r3, r3, #46080	; 0xb400
 80039f8:	3b80      	subs	r3, #128	; 0x80
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	f200 8089 	bhi.w	8003b12 <formatLPRegMK10E+0x156>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <formatLPRegMK10E+0x4c>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003b03 	.word	0x08003b03
 8003a0c:	08003b07 	.word	0x08003b07
 8003a10:	08003b0b 	.word	0x08003b0b
 8003a14:	08003af7 	.word	0x08003af7
 8003a18:	08003afb 	.word	0x08003afb
 8003a1c:	08003aff 	.word	0x08003aff
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
 8003a26:	3b03      	subs	r3, #3
 8003a28:	2b24      	cmp	r3, #36	; 0x24
 8003a2a:	d872      	bhi.n	8003b12 <formatLPRegMK10E+0x156>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <formatLPRegMK10E+0x78>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003adf 	.word	0x08003adf
 8003a38:	08003b13 	.word	0x08003b13
 8003a3c:	08003b13 	.word	0x08003b13
 8003a40:	08003b13 	.word	0x08003b13
 8003a44:	08003aeb 	.word	0x08003aeb
 8003a48:	08003b13 	.word	0x08003b13
 8003a4c:	08003b13 	.word	0x08003b13
 8003a50:	08003b13 	.word	0x08003b13
 8003a54:	08003b13 	.word	0x08003b13
 8003a58:	08003b13 	.word	0x08003b13
 8003a5c:	08003b13 	.word	0x08003b13
 8003a60:	08003b13 	.word	0x08003b13
 8003a64:	08003b13 	.word	0x08003b13
 8003a68:	08003b13 	.word	0x08003b13
 8003a6c:	08003b13 	.word	0x08003b13
 8003a70:	08003b13 	.word	0x08003b13
 8003a74:	08003ae3 	.word	0x08003ae3
 8003a78:	08003b13 	.word	0x08003b13
 8003a7c:	08003b13 	.word	0x08003b13
 8003a80:	08003b13 	.word	0x08003b13
 8003a84:	08003aef 	.word	0x08003aef
 8003a88:	08003b13 	.word	0x08003b13
 8003a8c:	08003b13 	.word	0x08003b13
 8003a90:	08003b13 	.word	0x08003b13
 8003a94:	08003b13 	.word	0x08003b13
 8003a98:	08003b13 	.word	0x08003b13
 8003a9c:	08003b13 	.word	0x08003b13
 8003aa0:	08003b13 	.word	0x08003b13
 8003aa4:	08003b13 	.word	0x08003b13
 8003aa8:	08003b13 	.word	0x08003b13
 8003aac:	08003b13 	.word	0x08003b13
 8003ab0:	08003b13 	.word	0x08003b13
 8003ab4:	08003ae7 	.word	0x08003ae7
 8003ab8:	08003b13 	.word	0x08003b13
 8003abc:	08003b13 	.word	0x08003b13
 8003ac0:	08003b13 	.word	0x08003b13
 8003ac4:	08003af3 	.word	0x08003af3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f24b 4285 	movw	r2, #46213	; 0xb485
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	dc1f      	bgt.n	8003b12 <formatLPRegMK10E+0x156>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f24b 4280 	movw	r2, #46208	; 0xb480
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	da8a      	bge.n	80039f2 <formatLPRegMK10E+0x36>
 8003adc:	e019      	b.n	8003b12 <formatLPRegMK10E+0x156>
    case 13315:  return "\"3P66\""; // abs total wh
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <formatLPRegMK10E+0x164>)
 8003ae0:	e018      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 13331:  return "\"3P33\""; // total export wh
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <formatLPRegMK10E+0x168>)
 8003ae4:	e016      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 13347:  return "\"3P37\""; // total import wh
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <formatLPRegMK10E+0x16c>)
 8003ae8:	e014      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 13319:  return "\"3P67\""; // abs total varh 0x3407
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <formatLPRegMK10E+0x170>)
 8003aec:	e012      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 13335:  return "\"3P25\""; // total export wh 0x3417
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <formatLPRegMK10E+0x174>)
 8003af0:	e010      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 13351:  return "\"3P29\""; // total import wh 0x3427
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <formatLPRegMK10E+0x178>)
 8003af4:	e00e      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46211:  return "\"3P59\""; // tegangan R
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <formatLPRegMK10E+0x17c>)
 8003af8:	e00c      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46212:  return "\"3P60\""; // tegangan S
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <formatLPRegMK10E+0x180>)
 8003afc:	e00a      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46213:  return "\"3P61\""; // tegangan T
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <formatLPRegMK10E+0x184>)
 8003b00:	e008      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46208:  return "\"3P09\""; // Arus R
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <formatLPRegMK10E+0x188>)
 8003b04:	e006      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46209:  return "\"3P10\""; // Arus S
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <formatLPRegMK10E+0x18c>)
 8003b08:	e004      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46210:  return "\"3P11\""; // Arus T
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <formatLPRegMK10E+0x190>)
 8003b0c:	e002      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    case 46323  :  return "\"3P42\""; // PF
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <formatLPRegMK10E+0x194>)
 8003b10:	e000      	b.n	8003b14 <formatLPRegMK10E+0x158>
                break;
    default   :  return "\"3P42\""; // PF
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <formatLPRegMK10E+0x194>)
                break;
    
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	0801eaa8 	.word	0x0801eaa8
 8003b24:	0801ea88 	.word	0x0801ea88
 8003b28:	0801ea80 	.word	0x0801ea80
 8003b2c:	0801eab0 	.word	0x0801eab0
 8003b30:	0801ea98 	.word	0x0801ea98
 8003b34:	0801ea90 	.word	0x0801ea90
 8003b38:	0801e954 	.word	0x0801e954
 8003b3c:	0801e95c 	.word	0x0801e95c
 8003b40:	0801e964 	.word	0x0801e964
 8003b44:	0801e96c 	.word	0x0801e96c
 8003b48:	0801e974 	.word	0x0801e974
 8003b4c:	0801e97c 	.word	0x0801e97c
 8003b50:	0801e9ec 	.word	0x0801e9ec

08003b54 <decodeEobLpinitMK10E>:
        return "\"3P42\"";
            break;
  }
}

void decodeEobLpinitMK10E(){
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
  int index = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
  if(getRawDataMK10E(4)){
 8003b5e:	2004      	movs	r0, #4
 8003b60:	f7ff fe0e 	bl	8003780 <getRawDataMK10E>
//    SerialMonprintlnMK10E();
  }
  hex2Long(dataMK10E,0);
 8003b64:	2100      	movs	r1, #0
 8003b66:	487b      	ldr	r0, [pc, #492]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003b68:	f002 fb9c 	bl	80062a4 <hex2Long>
  lpfirstentrydate = myFloat.l;
 8003b6c:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a7a      	ldr	r2, [pc, #488]	; (8003d5c <decodeEobLpinitMK10E+0x208>)
 8003b72:	6013      	str	r3, [r2, #0]
  lpfirstentrydate += 820454400L;
 8003b74:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <decodeEobLpinitMK10E+0x208>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b79      	ldr	r3, [pc, #484]	; (8003d60 <decodeEobLpinitMK10E+0x20c>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <decodeEobLpinitMK10E+0x208>)
 8003b7e:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lpfirstentrydate);
  index += 8;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3308      	adds	r3, #8
 8003b84:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4872      	ldr	r0, [pc, #456]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003b8a:	f002 fb8b 	bl	80062a4 <hex2Long>
  lpfirstentry = myFloat.l;
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a74      	ldr	r2, [pc, #464]	; (8003d64 <decodeEobLpinitMK10E+0x210>)
 8003b94:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lpfirstentry);
  index += 8;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	486d      	ldr	r0, [pc, #436]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003ba0:	f002 fb80 	bl	80062a4 <hex2Long>
  lplastentry = myFloat.l;
 8003ba4:	4b6c      	ldr	r3, [pc, #432]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6f      	ldr	r2, [pc, #444]	; (8003d68 <decodeEobLpinitMK10E+0x214>)
 8003baa:	6013      	str	r3, [r2, #0]
//  printf("%ld ",lplastentry);
  index += 8;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	60bb      	str	r3, [r7, #8]
//  hex2Long(dataMK10E,index);
  uint8_t temp = dataMK10E[index+1];
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	71fb      	strb	r3, [r7, #7]
//  printf("\ntemp:%x ",temp);
  temp = temp & 0x3F;
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc2:	71fb      	strb	r3, [r7, #7]
//  printf("%x ",temp);
  jmlchannel = (uint8_t)temp;
 8003bc4:	4a69      	ldr	r2, [pc, #420]	; (8003d6c <decodeEobLpinitMK10E+0x218>)
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	7013      	strb	r3, [r2, #0]
//  printf("jmlch:%d ",jmlchannel);
  temp = dataMK10E[index] << 4;
 8003bca:	4a62      	ldr	r2, [pc, #392]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4413      	add	r3, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	71fb      	strb	r3, [r7, #7]
//  printf("\ntemp:%x ",temp);
  temp = temp >> 2;
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	71fb      	strb	r3, [r7, #7]
//  printf("%x ",temp);
  uint8_t temp1 = dataMK10E[index+1] >> 6;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a5c      	ldr	r2, [pc, #368]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	71bb      	strb	r3, [r7, #6]
//  printf("temp1:%x ",temp1);
  temp = temp | temp1;
 8003be8:	79fa      	ldrb	r2, [r7, #7]
 8003bea:	79bb      	ldrb	r3, [r7, #6]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	71fb      	strb	r3, [r7, #7]
//  SerialMonprintlnMK10E(temp);
  lpintervalMK10E = (uint8_t)temp;
 8003bf0:	4a5f      	ldr	r2, [pc, #380]	; (8003d70 <decodeEobLpinitMK10E+0x21c>)
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	7013      	strb	r3, [r2, #0]
//  printf("%d \n",lpintervalMK10E);
  index += 4;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4855      	ldr	r0, [pc, #340]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c00:	f002 fb50 	bl	80062a4 <hex2Long>
  commonscale[0]=myFloat.f;
 8003c04:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5a      	ldr	r2, [pc, #360]	; (8003d74 <decodeEobLpinitMK10E+0x220>)
 8003c0a:	6013      	str	r3, [r2, #0]
  index += 4;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	484f      	ldr	r0, [pc, #316]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c16:	f002 fb45 	bl	80062a4 <hex2Long>
  commonscale[1]=myFloat.f;
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a55      	ldr	r2, [pc, #340]	; (8003d74 <decodeEobLpinitMK10E+0x220>)
 8003c20:	6053      	str	r3, [r2, #4]
  index += 4;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3304      	adds	r3, #4
 8003c26:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	484a      	ldr	r0, [pc, #296]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c2c:	f002 fb3a 	bl	80062a4 <hex2Long>
  commonscale[2]=myFloat.f;
 8003c30:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a4f      	ldr	r2, [pc, #316]	; (8003d74 <decodeEobLpinitMK10E+0x220>)
 8003c36:	6093      	str	r3, [r2, #8]
  index += 4;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	4844      	ldr	r0, [pc, #272]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c42:	f002 fb2f 	bl	80062a4 <hex2Long>
  commonscale[3]=myFloat.f;
 8003c46:	4b44      	ldr	r3, [pc, #272]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <decodeEobLpinitMK10E+0x220>)
 8003c4c:	60d3      	str	r3, [r2, #12]
  index += 4;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3304      	adds	r3, #4
 8003c52:	60bb      	str	r3, [r7, #8]
  hex2Long(dataMK10E,index);
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	483f      	ldr	r0, [pc, #252]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c58:	f002 fb24 	bl	80062a4 <hex2Long>
  commonscale[4]=myFloat.f;
 8003c5c:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <decodeEobLpinitMK10E+0x204>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a44      	ldr	r2, [pc, #272]	; (8003d74 <decodeEobLpinitMK10E+0x220>)
 8003c62:	6113      	str	r3, [r2, #16]
  for(int i=0;i<5;i++){
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e002      	b.n	8003c70 <decodeEobLpinitMK10E+0x11c>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	ddf9      	ble.n	8003c6a <decodeEobLpinitMK10E+0x116>
//	  printf("%.5f ",commonscale[i]);
  }
//  printf("\r\n");
  index = 118;
 8003c76:	2376      	movs	r3, #118	; 0x76
 8003c78:	60bb      	str	r3, [r7, #8]
  for(int i=0;i<jmlchannel;i++){
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	e02e      	b.n	8003cde <decodeEobLpinitMK10E+0x18a>
    lpreg[i]=dataMK10E[2*i+index];
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	005a      	lsls	r2, r3, #1
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4413      	add	r3, r2
 8003c88:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    lpreg[i]=lpreg[i]<<8;
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpreg[i]=lpreg[i] | dataMK10E[2*i+index+1];
 8003ca8:	4a33      	ldr	r2, [pc, #204]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	0051      	lsls	r1, r2, #1
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	3201      	adds	r2, #1
 8003cba:	4926      	ldr	r1, [pc, #152]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003cbc:	5c8a      	ldrb	r2, [r1, r2]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	492d      	ldr	r1, [pc, #180]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpregm[i]=lpreg[i];
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <decodeEobLpinitMK10E+0x224>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cd0:	492a      	ldr	r1, [pc, #168]	; (8003d7c <decodeEobLpinitMK10E+0x228>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<jmlchannel;i++){
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <decodeEobLpinitMK10E+0x218>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	dbca      	blt.n	8003c80 <decodeEobLpinitMK10E+0x12c>
//    SerialMon.print(" ");
//    SerialMon.print(lpreg[i]);
  }
//  printf("\r\n");
//  SerialMonprintlnMK10E(" ");
  index = 246;
 8003cea:	23f6      	movs	r3, #246	; 0xf6
 8003cec:	60bb      	str	r3, [r7, #8]
  for(int i=0;i<7;i++){
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e026      	b.n	8003d42 <decodeEobLpinitMK10E+0x1ee>
    eobreg[i]=dataMK10E[2*i+index];
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	4619      	mov	r1, r3
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <decodeEobLpinitMK10E+0x22c>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    eobreg[i]=eobreg[i]<<8;
 8003d0a:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <decodeEobLpinitMK10E+0x22c>)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	491a      	ldr	r1, [pc, #104]	; (8003d80 <decodeEobLpinitMK10E+0x22c>)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    eobreg[i]=eobreg[i] | dataMK10E[2*i+index+1];
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <decodeEobLpinitMK10E+0x22c>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	0051      	lsls	r1, r2, #1
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	3201      	adds	r2, #1
 8003d2e:	4909      	ldr	r1, [pc, #36]	; (8003d54 <decodeEobLpinitMK10E+0x200>)
 8003d30:	5c8a      	ldrb	r2, [r1, r2]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	4912      	ldr	r1, [pc, #72]	; (8003d80 <decodeEobLpinitMK10E+0x22c>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0;i<7;i++){
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	ddd5      	ble.n	8003cf4 <decodeEobLpinitMK10E+0x1a0>
//    checkregEoBInit1MK10E(eobreg[i]);
//    SerialMonprint(datastrMK10E);
  }
//  printf("\r\n");
//  SerialMonprintlnMK10E();
  decodelpinitMK10E();
 8003d48:	f000 fc2e 	bl	80045a8 <decodelpinitMK10E>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200030fc 	.word	0x200030fc
 8003d58:	20003f64 	.word	0x20003f64
 8003d5c:	200030ec 	.word	0x200030ec
 8003d60:	30e72400 	.word	0x30e72400
 8003d64:	20002884 	.word	0x20002884
 8003d68:	200025c4 	.word	0x200025c4
 8003d6c:	200027f8 	.word	0x200027f8
 8003d70:	2000296c 	.word	0x2000296c
 8003d74:	20002870 	.word	0x20002870
 8003d78:	20003074 	.word	0x20003074
 8003d7c:	200089bc 	.word	0x200089bc
 8003d80:	200035a0 	.word	0x200035a0

08003d84 <decodeInstantMK10E>:
  	strcat(datastrMK10E, "}");
        int3++;
    SerialMonprintlnMK10E(datastrMK10E);
}

bool decodeInstantMK10E(){
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
	//int index=0;
  myFloat.f = 0;
 8003d8a:	4bab      	ldr	r3, [pc, #684]	; (8004038 <decodeInstantMK10E+0x2b4>)
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
  printf("decode Instant ");
 8003d92:	48aa      	ldr	r0, [pc, #680]	; (800403c <decodeInstantMK10E+0x2b8>)
 8003d94:	f018 fa86 	bl	801c2a4 <iprintf>
  for(int i=0;i<25;i++){    
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e01d      	b.n	8003dda <decodeInstantMK10E+0x56>
	  instantF530[i]=hex2Float(dataMK10E,i*4);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4619      	mov	r1, r3
 8003da4:	48a6      	ldr	r0, [pc, #664]	; (8004040 <decodeInstantMK10E+0x2bc>)
 8003da6:	f002 fa37 	bl	8006218 <hex2Float>
 8003daa:	eef0 7a40 	vmov.f32	s15, s0
 8003dae:	4aa5      	ldr	r2, [pc, #660]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	edc3 7a00 	vstr	s15, [r3]
      printf("%.5f ",instantF530[i]);
 8003dba:	4aa2      	ldr	r2, [pc, #648]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fbcf 	bl	8000568 <__aeabi_f2d>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	489e      	ldr	r0, [pc, #632]	; (8004048 <decodeInstantMK10E+0x2c4>)
 8003dd0:	f018 fa68 	bl	801c2a4 <iprintf>
  for(int i=0;i<25;i++){    
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b18      	cmp	r3, #24
 8003dde:	ddde      	ble.n	8003d9e <decodeInstantMK10E+0x1a>
  }
  printf("%.5f \r\n",instantF530[0]);
 8003de0:	4b98      	ldr	r3, [pc, #608]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc fbbf 	bl	8000568 <__aeabi_f2d>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4897      	ldr	r0, [pc, #604]	; (800404c <decodeInstantMK10E+0x2c8>)
 8003df0:	f018 fa58 	bl	801c2a4 <iprintf>
  HAL_Delay(1000);
 8003df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df8:	f00b f8fc 	bl	800eff4 <HAL_Delay>
  int1=0;
 8003dfc:	4b94      	ldr	r3, [pc, #592]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
  int2=0;
 8003e02:	4b94      	ldr	r3, [pc, #592]	; (8004054 <decodeInstantMK10E+0x2d0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
  int3=0;
 8003e08:	4b93      	ldr	r3, [pc, #588]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
  datastrclearMK10E();
 8003e0e:	f7ff fae7 	bl	80033e0 <datastrclearMK10E>
  strcpy(datastrMK10E,"{\"mid\":");
 8003e12:	4a92      	ldr	r2, [pc, #584]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e14:	4b92      	ldr	r3, [pc, #584]	; (8004060 <decodeInstantMK10E+0x2dc>)
 8003e16:	cb03      	ldmia	r3!, {r0, r1}
 8003e18:	6010      	str	r0, [r2, #0]
 8003e1a:	6051      	str	r1, [r2, #4]
  strcat(datastrMK10E, meterSNMK10E);
 8003e1c:	4991      	ldr	r1, [pc, #580]	; (8004064 <decodeInstantMK10E+0x2e0>)
 8003e1e:	488f      	ldr	r0, [pc, #572]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e20:	f018 fafe 	bl	801c420 <strcat>
  strcat(datastrMK10E, ",\"pid\":\"InstantMK10E\",");
 8003e24:	488d      	ldr	r0, [pc, #564]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e26:	f7fc f9dd 	bl	80001e4 <strlen>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e30:	4413      	add	r3, r2
 8003e32:	4a8d      	ldr	r2, [pc, #564]	; (8004068 <decodeInstantMK10E+0x2e4>)
 8003e34:	461c      	mov	r4, r3
 8003e36:	4615      	mov	r5, r2
 8003e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e3a:	6020      	str	r0, [r4, #0]
 8003e3c:	6061      	str	r1, [r4, #4]
 8003e3e:	60a2      	str	r2, [r4, #8]
 8003e40:	60e3      	str	r3, [r4, #12]
 8003e42:	6828      	ldr	r0, [r5, #0]
 8003e44:	6120      	str	r0, [r4, #16]
 8003e46:	88ab      	ldrh	r3, [r5, #4]
 8003e48:	79aa      	ldrb	r2, [r5, #6]
 8003e4a:	82a3      	strh	r3, [r4, #20]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	75a3      	strb	r3, [r4, #22]
//  strcat(datastrMK10E, ",\"pid\":\"InstantMK10E\",\"readdate\":");
//  data2clearMK10E();
//  sprintf(data2MK10E,"%d,",timestamp_now);
//  strcat(datastrMK10E, data2MK10E);
  for(int i=0; i<9;i++){
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e043      	b.n	8003ede <decodeInstantMK10E+0x15a>
	strcat(datastrMK10E, formatInstantMK10E(i));
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fd16 	bl	800388c <formatInstantMK10E>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4619      	mov	r1, r3
 8003e64:	487d      	ldr	r0, [pc, #500]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e66:	f018 fadb 	bl	801c420 <strcat>
	strcat(datastrMK10E, ":");
 8003e6a:	487c      	ldr	r0, [pc, #496]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e6c:	f7fc f9ba 	bl	80001e4 <strlen>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b79      	ldr	r3, [pc, #484]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003e76:	4413      	add	r3, r2
 8003e78:	497c      	ldr	r1, [pc, #496]	; (800406c <decodeInstantMK10E+0x2e8>)
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	8013      	strh	r3, [r2, #0]
	data2clearMK10E();
 8003e82:	f7ff fa93 	bl	80033ac <data2clearMK10E>
	sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003e86:	4b74      	ldr	r3, [pc, #464]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6e      	ldr	r2, [pc, #440]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb68 	bl	8000568 <__aeabi_f2d>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4974      	ldr	r1, [pc, #464]	; (8004070 <decodeInstantMK10E+0x2ec>)
 8003e9e:	4875      	ldr	r0, [pc, #468]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003ea0:	f018 fa9e 	bl	801c3e0 <siprintf>
//	int2 = bufsizeMK10E(data2MK10E);
	strcat(datastrMK10E, data2MK10E);
 8003ea4:	4973      	ldr	r1, [pc, #460]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003ea6:	486d      	ldr	r0, [pc, #436]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003ea8:	f018 faba 	bl	801c420 <strcat>
	strcat(datastrMK10E, ",");
 8003eac:	486b      	ldr	r0, [pc, #428]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003eae:	f7fc f999 	bl	80001e4 <strlen>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b69      	ldr	r3, [pc, #420]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	496f      	ldr	r1, [pc, #444]	; (8004078 <decodeInstantMK10E+0x2f4>)
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	8013      	strh	r3, [r2, #0]
    int1+=4;
 8003ec4:	4b62      	ldr	r3, [pc, #392]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4a61      	ldr	r2, [pc, #388]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003ecc:	6013      	str	r3, [r2, #0]
    int3++;
 8003ece:	4b62      	ldr	r3, [pc, #392]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a60      	ldr	r2, [pc, #384]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003ed6:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	ddb8      	ble.n	8003e56 <decodeInstantMK10E+0xd2>
  }
  for(int i=0;i<6;i++){
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	e00c      	b.n	8003f04 <decodeInstantMK10E+0x180>
    int1+=4;
 8003eea:	4b59      	ldr	r3, [pc, #356]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003ef2:	6013      	str	r3, [r2, #0]
    int3++;
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	4a57      	ldr	r2, [pc, #348]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003efc:	6013      	str	r3, [r2, #0]
  for(int i=0;i<6;i++){
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3301      	adds	r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	ddef      	ble.n	8003eea <decodeInstantMK10E+0x166>
  }
  int2 = int1;
 8003f0a:	4b51      	ldr	r3, [pc, #324]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a51      	ldr	r2, [pc, #324]	; (8004054 <decodeInstantMK10E+0x2d0>)
 8003f10:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	e044      	b.n	8003fa2 <decodeInstantMK10E+0x21e>
	strcat(datastrMK10E, formatInstantMK10E(int3));
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fcb4 	bl	800388c <formatInstantMK10E>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4619      	mov	r1, r3
 8003f28:	484c      	ldr	r0, [pc, #304]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f2a:	f018 fa79 	bl	801c420 <strcat>
	strcat(datastrMK10E, ":");
 8003f2e:	484b      	ldr	r0, [pc, #300]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f30:	f7fc f958 	bl	80001e4 <strlen>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b48      	ldr	r3, [pc, #288]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f3a:	4413      	add	r3, r2
 8003f3c:	494b      	ldr	r1, [pc, #300]	; (800406c <decodeInstantMK10E+0x2e8>)
 8003f3e:	461a      	mov	r2, r3
 8003f40:	460b      	mov	r3, r1
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	8013      	strh	r3, [r2, #0]
	data2clearMK10E();
 8003f46:	f7ff fa31 	bl	80033ac <data2clearMK10E>
	sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fb06 	bl	8000568 <__aeabi_f2d>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4943      	ldr	r1, [pc, #268]	; (8004070 <decodeInstantMK10E+0x2ec>)
 8003f62:	4844      	ldr	r0, [pc, #272]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003f64:	f018 fa3c 	bl	801c3e0 <siprintf>
//	int2 = bufsizeMK10E(data2);
	strcat(datastrMK10E, data2MK10E);
 8003f68:	4942      	ldr	r1, [pc, #264]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003f6a:	483c      	ldr	r0, [pc, #240]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f6c:	f018 fa58 	bl	801c420 <strcat>
	strcat(datastrMK10E, ",");
 8003f70:	483a      	ldr	r0, [pc, #232]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f72:	f7fc f937 	bl	80001e4 <strlen>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b38      	ldr	r3, [pc, #224]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	493e      	ldr	r1, [pc, #248]	; (8004078 <decodeInstantMK10E+0x2f4>)
 8003f80:	461a      	mov	r2, r3
 8003f82:	460b      	mov	r3, r1
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	8013      	strh	r3, [r2, #0]
    int1+=4;
 8003f88:	4b31      	ldr	r3, [pc, #196]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4a30      	ldr	r2, [pc, #192]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8003f90:	6013      	str	r3, [r2, #0]
    int3++;
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003f9a:	6013      	str	r3, [r2, #0]
  for(int i=0; i<9;i++){
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	ddb7      	ble.n	8003f18 <decodeInstantMK10E+0x194>
  }
  strcat(datastrMK10E, formatInstantMK10E(int3));
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fc6c 	bl	800388c <formatInstantMK10E>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4828      	ldr	r0, [pc, #160]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003fba:	f018 fa31 	bl	801c420 <strcat>
  strcat(datastrMK10E, ":");
 8003fbe:	4827      	ldr	r0, [pc, #156]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003fc0:	f7fc f910 	bl	80001e4 <strlen>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	4927      	ldr	r1, [pc, #156]	; (800406c <decodeInstantMK10E+0x2e8>)
 8003fce:	461a      	mov	r2, r3
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	8013      	strh	r3, [r2, #0]
  data2clearMK10E();
 8003fd6:	f7ff f9e9 	bl	80033ac <data2clearMK10E>
  sprintf(data2MK10E,"%.5f",instantF530[int3]);
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a19      	ldr	r2, [pc, #100]	; (8004044 <decodeInstantMK10E+0x2c0>)
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fabe 	bl	8000568 <__aeabi_f2d>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	491f      	ldr	r1, [pc, #124]	; (8004070 <decodeInstantMK10E+0x2ec>)
 8003ff2:	4820      	ldr	r0, [pc, #128]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003ff4:	f018 f9f4 	bl	801c3e0 <siprintf>
//  int2 = bufsizeMK10E(data2);
  strcat(datastrMK10E, data2MK10E);
 8003ff8:	491e      	ldr	r1, [pc, #120]	; (8004074 <decodeInstantMK10E+0x2f0>)
 8003ffa:	4818      	ldr	r0, [pc, #96]	; (800405c <decodeInstantMK10E+0x2d8>)
 8003ffc:	f018 fa10 	bl	801c420 <strcat>
  strcat(datastrMK10E, "}");
 8004000:	4816      	ldr	r0, [pc, #88]	; (800405c <decodeInstantMK10E+0x2d8>)
 8004002:	f7fc f8ef 	bl	80001e4 <strlen>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <decodeInstantMK10E+0x2d8>)
 800400c:	4413      	add	r3, r2
 800400e:	491b      	ldr	r1, [pc, #108]	; (800407c <decodeInstantMK10E+0x2f8>)
 8004010:	461a      	mov	r2, r3
 8004012:	460b      	mov	r3, r1
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	8013      	strh	r3, [r2, #0]
  int1+=4;
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <decodeInstantMK10E+0x2cc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <decodeInstantMK10E+0x2cc>)
 8004020:	6013      	str	r3, [r2, #0]
  int3++;
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <decodeInstantMK10E+0x2d4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <decodeInstantMK10E+0x2d4>)
 800402a:	6013      	str	r3, [r2, #0]
  return true;
 800402c:	2301      	movs	r3, #1
//  SerialMonprintln(datastrMK10E);
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bdb0      	pop	{r4, r5, r7, pc}
 8004036:	bf00      	nop
 8004038:	20003f64 	.word	0x20003f64
 800403c:	0801ed00 	.word	0x0801ed00
 8004040:	200030fc 	.word	0x200030fc
 8004044:	20003f68 	.word	0x20003f68
 8004048:	0801ed10 	.word	0x0801ed10
 800404c:	0801ed18 	.word	0x0801ed18
 8004050:	20002f8c 	.word	0x20002f8c
 8004054:	200036fc 	.word	0x200036fc
 8004058:	20003f60 	.word	0x20003f60
 800405c:	20002974 	.word	0x20002974
 8004060:	0801e9f4 	.word	0x0801e9f4
 8004064:	200000b0 	.word	0x200000b0
 8004068:	0801ed20 	.word	0x0801ed20
 800406c:	0801ea14 	.word	0x0801ea14
 8004070:	0801ec84 	.word	0x0801ec84
 8004074:	20003060 	.word	0x20003060
 8004078:	0801ec8c 	.word	0x0801ec8c
 800407c:	0801ec90 	.word	0x0801ec90

08004080 <txInstantMK10E>:
	  }
  }
//  return "0";
}

void txInstantMK10E(){
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  dataallclearMK10E();
 8004084:	f7ff f952 	bl	800332c <dataallclearMK10E>
  dataMK10E[0]=0x02;
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <txInstantMK10E+0x44>)
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
  dataMK10E[1]=0x52;
 800408e:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <txInstantMK10E+0x44>)
 8004090:	2252      	movs	r2, #82	; 0x52
 8004092:	705a      	strb	r2, [r3, #1]
  dataMK10E[2]=0xF5;
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <txInstantMK10E+0x44>)
 8004096:	22f5      	movs	r2, #245	; 0xf5
 8004098:	709a      	strb	r2, [r3, #2]
  dataMK10E[3]=0x30;
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <txInstantMK10E+0x44>)
 800409c:	2230      	movs	r2, #48	; 0x30
 800409e:	70da      	strb	r2, [r3, #3]
  dataMK10E[4]=0x07;
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <txInstantMK10E+0x44>)
 80040a2:	2207      	movs	r2, #7
 80040a4:	711a      	strb	r2, [r3, #4]
  dataMK10E[5]=0xA1;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <txInstantMK10E+0x44>)
 80040a8:	22a1      	movs	r2, #161	; 0xa1
 80040aa:	715a      	strb	r2, [r3, #5]
  dataMK10E[6]=0x03;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <txInstantMK10E+0x44>)
 80040ae:	2203      	movs	r2, #3
 80040b0:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SerialMtr, (uint8_t * )dataMK10E, 7, 200);
 80040b2:	23c8      	movs	r3, #200	; 0xc8
 80040b4:	2207      	movs	r2, #7
 80040b6:	4903      	ldr	r1, [pc, #12]	; (80040c4 <txInstantMK10E+0x44>)
 80040b8:	4803      	ldr	r0, [pc, #12]	; (80040c8 <txInstantMK10E+0x48>)
 80040ba:	f010 f96f 	bl	801439c <HAL_UART_Transmit>
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200030fc 	.word	0x200030fc
 80040c8:	20002770 	.word	0x20002770

080040cc <rxInstantMK10E>:

void rxInstantMK10E(char* outstr, unsigned char buf[],int len){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	dataallclearMK10E();
 80040d8:	f7ff f928 	bl	800332c <dataallclearMK10E>
	memcpy(dataMK10E,buf,len);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	461a      	mov	r2, r3
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4818      	ldr	r0, [pc, #96]	; (8004144 <rxInstantMK10E+0x78>)
 80040e4:	f017 fbb4 	bl	801b850 <memcpy>
  data_lenMK10E=0;
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <rxInstantMK10E+0x7c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
  data_lenMK10E=datasize(dataMK10E);
 80040ee:	4815      	ldr	r0, [pc, #84]	; (8004144 <rxInstantMK10E+0x78>)
 80040f0:	f001 ff6e 	bl	8005fd0 <datasize>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <rxInstantMK10E+0x7c>)
 80040f8:	6013      	str	r3, [r2, #0]
  if(data_lenMK10E>5){
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <rxInstantMK10E+0x7c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	dd1c      	ble.n	800413c <rxInstantMK10E+0x70>
	  removeheadcrctailMK10E(4);
 8004102:	2004      	movs	r0, #4
 8004104:	f7ff faf4 	bl	80036f0 <removeheadcrctailMK10E>
	  if(decodeInstantMK10E()){
 8004108:	f7ff fe3c 	bl	8003d84 <decodeInstantMK10E>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d014      	beq.n	800413c <rxInstantMK10E+0x70>
//		  printf("datasizestrMK10E: %d \r\n",datasizestrMK10E(datastrMK10E));
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e00a      	b.n	800412e <rxInstantMK10E+0x62>
			  *outstr++=datastrMK10E[i];
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	60fa      	str	r2, [r7, #12]
 800411e:	490b      	ldr	r1, [pc, #44]	; (800414c <rxInstantMK10E+0x80>)
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	440a      	add	r2, r1
 8004124:	7812      	ldrb	r2, [r2, #0]
 8004126:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	4807      	ldr	r0, [pc, #28]	; (800414c <rxInstantMK10E+0x80>)
 8004130:	f7ff f896 	bl	8003260 <datasizestrMK10E>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4293      	cmp	r3, r2
 800413a:	dbed      	blt.n	8004118 <rxInstantMK10E+0x4c>
		  }
//		  printf(outstr);
	  }
  }
//  return "0";
}
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	200030fc 	.word	0x200030fc
 8004148:	20002970 	.word	0x20002970
 800414c:	20002974 	.word	0x20002974

08004150 <txLPMK10ERec>:
  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
	  *outstr++=datastrMK10E[i];
  }
}

void txLPMK10ERec(int lp_index){
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	dataallclearMK10E();
 8004158:	f7ff f8e8 	bl	800332c <dataallclearMK10E>
	data_lenMK10E = 0;
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <txLPMK10ERec+0x90>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  long lpindex = lp_index;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60fb      	str	r3, [r7, #12]
  lprecord = lpindex;
 8004166:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <txLPMK10ERec+0x94>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6013      	str	r3, [r2, #0]
  data2MK10E[0]=0x02;
 800416c:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <txLPMK10ERec+0x98>)
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]
  data2MK10E[1]=0x46;
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <txLPMK10ERec+0x98>)
 8004174:	2246      	movs	r2, #70	; 0x46
 8004176:	705a      	strb	r2, [r3, #1]
  data2MK10E[2]=0x30;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <txLPMK10ERec+0x98>)
 800417a:	2230      	movs	r2, #48	; 0x30
 800417c:	709a      	strb	r2, [r3, #2]
  data2MK10E[3]=0x00;
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <txLPMK10ERec+0x98>)
 8004180:	2200      	movs	r2, #0
 8004182:	70da      	strb	r2, [r3, #3]
  data2MK10E[4]=lpindex>>24;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	161b      	asrs	r3, r3, #24
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <txLPMK10ERec+0x98>)
 800418c:	711a      	strb	r2, [r3, #4]
  data2MK10E[5]=lpindex>>16;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	141b      	asrs	r3, r3, #16
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <txLPMK10ERec+0x98>)
 8004196:	715a      	strb	r2, [r3, #5]
  data2MK10E[6]=lpindex>>8;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	121b      	asrs	r3, r3, #8
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <txLPMK10ERec+0x98>)
 80041a0:	719a      	strb	r2, [r3, #6]
  data2MK10E[7]=(uint8_t) lpindex;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <txLPMK10ERec+0x98>)
 80041a8:	71da      	strb	r2, [r3, #7]
  data2MK10E[8]=0x00;
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <txLPMK10ERec+0x98>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	721a      	strb	r2, [r3, #8]
  data2MK10E[9]=0x01;
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <txLPMK10ERec+0x98>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	725a      	strb	r2, [r3, #9]
  data_lenMK10E = 10;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <txLPMK10ERec+0x90>)
 80041b8:	220a      	movs	r2, #10
 80041ba:	601a      	str	r2, [r3, #0]
  setCommandLPMK10E(data2MK10E, data_lenMK10E);
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <txLPMK10ERec+0x90>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	4809      	ldr	r0, [pc, #36]	; (80041e8 <txLPMK10ERec+0x98>)
 80041c4:	f7ff f9f4 	bl	80035b0 <setCommandLPMK10E>
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)data2MK10E, data_lenMK10E, 100);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <txLPMK10ERec+0x90>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	2364      	movs	r3, #100	; 0x64
 80041d0:	4905      	ldr	r1, [pc, #20]	; (80041e8 <txLPMK10ERec+0x98>)
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <txLPMK10ERec+0x9c>)
 80041d4:	f010 f8e2 	bl	801439c <HAL_UART_Transmit>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20002970 	.word	0x20002970
 80041e4:	200038d0 	.word	0x200038d0
 80041e8:	20003060 	.word	0x20003060
 80041ec:	20002770 	.word	0x20002770

080041f0 <txLPMK10E>:

void txLPMK10E(int indexmin1){
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	dataallclearMK10E();
 80041f8:	f7ff f898 	bl	800332c <dataallclearMK10E>
	data_lenMK10E = 0;
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <txLPMK10E+0x98>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
  //reading 00000400 lp rate1,2,3,4,5,unified for user0-8
  long lpindex = (long)lplastentry-indexmin1;
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <txLPMK10E+0x9c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	60fb      	str	r3, [r7, #12]
  lprecord = lpindex;
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <txLPMK10E+0xa0>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6013      	str	r3, [r2, #0]
  data2MK10E[0]=0x02;
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <txLPMK10E+0xa4>)
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
  data2MK10E[1]=0x46;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <txLPMK10E+0xa4>)
 800421a:	2246      	movs	r2, #70	; 0x46
 800421c:	705a      	strb	r2, [r3, #1]
  data2MK10E[2]=0x30;
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <txLPMK10E+0xa4>)
 8004220:	2230      	movs	r2, #48	; 0x30
 8004222:	709a      	strb	r2, [r3, #2]
  data2MK10E[3]=0x00;
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <txLPMK10E+0xa4>)
 8004226:	2200      	movs	r2, #0
 8004228:	70da      	strb	r2, [r3, #3]
  data2MK10E[4]=lpindex>>24;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	161b      	asrs	r3, r3, #24
 800422e:	b2da      	uxtb	r2, r3
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <txLPMK10E+0xa4>)
 8004232:	711a      	strb	r2, [r3, #4]
  data2MK10E[5]=lpindex>>16;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	141b      	asrs	r3, r3, #16
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b16      	ldr	r3, [pc, #88]	; (8004294 <txLPMK10E+0xa4>)
 800423c:	715a      	strb	r2, [r3, #5]
  data2MK10E[6]=lpindex>>8;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	121b      	asrs	r3, r3, #8
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <txLPMK10E+0xa4>)
 8004246:	719a      	strb	r2, [r3, #6]
  data2MK10E[7]=(uint8_t) lpindex;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <txLPMK10E+0xa4>)
 800424e:	71da      	strb	r2, [r3, #7]
  data2MK10E[8]=0x00;
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <txLPMK10E+0xa4>)
 8004252:	2200      	movs	r2, #0
 8004254:	721a      	strb	r2, [r3, #8]
  data2MK10E[9]=0x01;
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <txLPMK10E+0xa4>)
 8004258:	2201      	movs	r2, #1
 800425a:	725a      	strb	r2, [r3, #9]
  data_lenMK10E = 10;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <txLPMK10E+0x98>)
 800425e:	220a      	movs	r2, #10
 8004260:	601a      	str	r2, [r3, #0]
  setCommandLPMK10E(data2MK10E, data_lenMK10E);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <txLPMK10E+0x98>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	480a      	ldr	r0, [pc, #40]	; (8004294 <txLPMK10E+0xa4>)
 800426a:	f7ff f9a1 	bl	80035b0 <setCommandLPMK10E>
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)data2MK10E, data_lenMK10E, 100);
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <txLPMK10E+0x98>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	2364      	movs	r3, #100	; 0x64
 8004276:	4907      	ldr	r1, [pc, #28]	; (8004294 <txLPMK10E+0xa4>)
 8004278:	4807      	ldr	r0, [pc, #28]	; (8004298 <txLPMK10E+0xa8>)
 800427a:	f010 f88f 	bl	801439c <HAL_UART_Transmit>
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20002970 	.word	0x20002970
 800428c:	200025c4 	.word	0x200025c4
 8004290:	200038d0 	.word	0x200038d0
 8004294:	20003060 	.word	0x20003060
 8004298:	20002770 	.word	0x20002770

0800429c <rxLPMK10E>:

void rxLPMK10E(char* outstr,char* datain, int len){
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
	memcpy(dataMK10E,datain,len);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4816      	ldr	r0, [pc, #88]	; (8004308 <rxLPMK10E+0x6c>)
 80042b0:	f017 face 	bl	801b850 <memcpy>
  data_lenMK10E = datasize(dataMK10E);
 80042b4:	4814      	ldr	r0, [pc, #80]	; (8004308 <rxLPMK10E+0x6c>)
 80042b6:	f001 fe8b 	bl	8005fd0 <datasize>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a13      	ldr	r2, [pc, #76]	; (800430c <rxLPMK10E+0x70>)
 80042be:	6013      	str	r3, [r2, #0]
  if(getRawDataMK10E(10)){
 80042c0:	200a      	movs	r0, #10
 80042c2:	f7ff fa5d 	bl	8003780 <getRawDataMK10E>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <rxLPMK10E+0x62>
	  decodelpdataMK10E();
 80042cc:	f000 f98e 	bl	80045ec <decodelpdataMK10E>
	  lp2JsonMK10E();
 80042d0:	f000 fa0e 	bl	80046f0 <lp2JsonMK10E>
	  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e00a      	b.n	80042f0 <rxLPMK10E+0x54>
		  *outstr++=datastrMK10E[i];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	60fa      	str	r2, [r7, #12]
 80042e0:	490b      	ldr	r1, [pc, #44]	; (8004310 <rxLPMK10E+0x74>)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	440a      	add	r2, r1
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3301      	adds	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <rxLPMK10E+0x74>)
 80042f2:	f7fe ffb5 	bl	8003260 <datasizestrMK10E>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4293      	cmp	r3, r2
 80042fc:	dbed      	blt.n	80042da <rxLPMK10E+0x3e>
	  }
  }
}
 80042fe:	bf00      	nop
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200030fc 	.word	0x200030fc
 800430c:	20002970 	.word	0x20002970
 8004310:	20002974 	.word	0x20002974

08004314 <decodelpscaleMK10E>:

void decodelpscaleMK10E(int a, uint8_t index){
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  switch (a){
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 8004326:	4293      	cmp	r3, r2
 8004328:	f000 811c 	beq.w	8004564 <decodelpscaleMK10E+0x250>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f24b 42f3 	movw	r2, #46323	; 0xb4f3
 8004332:	4293      	cmp	r3, r2
 8004334:	f300 8124 	bgt.w	8004580 <decodelpscaleMK10E+0x26c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f24b 4285 	movw	r2, #46213	; 0xb485
 800433e:	4293      	cmp	r3, r2
 8004340:	f300 811e 	bgt.w	8004580 <decodelpscaleMK10E+0x26c>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f24b 4280 	movw	r2, #46208	; 0xb480
 800434a:	4293      	cmp	r3, r2
 800434c:	da0a      	bge.n	8004364 <decodelpscaleMK10E+0x50>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f243 4227 	movw	r2, #13351	; 0x3427
 8004354:	4293      	cmp	r3, r2
 8004356:	dc6f      	bgt.n	8004438 <decodelpscaleMK10E+0x124>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f243 4203 	movw	r2, #13315	; 0x3403
 800435e:	4293      	cmp	r3, r2
 8004360:	da16      	bge.n	8004390 <decodelpscaleMK10E+0x7c>
 8004362:	e10d      	b.n	8004580 <decodelpscaleMK10E+0x26c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f5a3 4334 	sub.w	r3, r3, #46080	; 0xb400
 800436a:	3b80      	subs	r3, #128	; 0x80
 800436c:	2b05      	cmp	r3, #5
 800436e:	f200 8107 	bhi.w	8004580 <decodelpscaleMK10E+0x26c>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <decodelpscaleMK10E+0x64>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	08004511 	.word	0x08004511
 800437c:	0800452d 	.word	0x0800452d
 8004380:	08004549 	.word	0x08004549
 8004384:	080044bd 	.word	0x080044bd
 8004388:	080044d9 	.word	0x080044d9
 800438c:	080044f5 	.word	0x080044f5
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f5a3 5350 	sub.w	r3, r3, #13312	; 0x3400
 8004396:	3b03      	subs	r3, #3
 8004398:	2b24      	cmp	r3, #36	; 0x24
 800439a:	f200 80f1 	bhi.w	8004580 <decodelpscaleMK10E+0x26c>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <decodelpscaleMK10E+0x90>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	08004445 	.word	0x08004445
 80043a8:	08004581 	.word	0x08004581
 80043ac:	08004581 	.word	0x08004581
 80043b0:	08004581 	.word	0x08004581
 80043b4:	08004481 	.word	0x08004481
 80043b8:	08004581 	.word	0x08004581
 80043bc:	08004581 	.word	0x08004581
 80043c0:	08004581 	.word	0x08004581
 80043c4:	08004581 	.word	0x08004581
 80043c8:	08004581 	.word	0x08004581
 80043cc:	08004581 	.word	0x08004581
 80043d0:	08004581 	.word	0x08004581
 80043d4:	08004581 	.word	0x08004581
 80043d8:	08004581 	.word	0x08004581
 80043dc:	08004581 	.word	0x08004581
 80043e0:	08004581 	.word	0x08004581
 80043e4:	08004459 	.word	0x08004459
 80043e8:	08004581 	.word	0x08004581
 80043ec:	08004581 	.word	0x08004581
 80043f0:	08004581 	.word	0x08004581
 80043f4:	08004581 	.word	0x08004581
 80043f8:	08004581 	.word	0x08004581
 80043fc:	08004581 	.word	0x08004581
 8004400:	08004581 	.word	0x08004581
 8004404:	08004581 	.word	0x08004581
 8004408:	08004581 	.word	0x08004581
 800440c:	08004581 	.word	0x08004581
 8004410:	08004581 	.word	0x08004581
 8004414:	08004581 	.word	0x08004581
 8004418:	08004581 	.word	0x08004581
 800441c:	08004581 	.word	0x08004581
 8004420:	08004581 	.word	0x08004581
 8004424:	0800446d 	.word	0x0800446d
 8004428:	08004581 	.word	0x08004581
 800442c:	08004581 	.word	0x08004581
 8004430:	08004581 	.word	0x08004581
 8004434:	080044a9 	.word	0x080044a9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f647 521b 	movw	r2, #32027	; 0x7d1b
 800443e:	4293      	cmp	r3, r2
 8004440:	d028      	beq.n	8004494 <decodelpscaleMK10E+0x180>
 8004442:	e09d      	b.n	8004580 <decodelpscaleMK10E+0x26c>
    case 13315:  lpscaleMK10E[index]=1;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	4a55      	ldr	r2, [pc, #340]	; (800459c <decodelpscaleMK10E+0x288>)
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	18d1      	adds	r1, r2, r3
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 8004452:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8004456:	e09d      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 13331:  lpscaleMK10E[index]=1;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	4a50      	ldr	r2, [pc, #320]	; (800459c <decodelpscaleMK10E+0x288>)
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	18d1      	adds	r1, r2, r3
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 8004466:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 800446a:	e093      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 13347:  lpscaleMK10E[index]=1;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	4a4b      	ldr	r2, [pc, #300]	; (800459c <decodelpscaleMK10E+0x288>)
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	18d1      	adds	r1, r2, r3
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 800447a:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 800447e:	e089      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 13319:  lpscaleMK10E[index]=1;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	4a46      	ldr	r2, [pc, #280]	; (800459c <decodelpscaleMK10E+0x288>)
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	18d1      	adds	r1, r2, r3
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 800448e:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8004492:	e07f      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 32027:  lpscaleMK10E[index]=1;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	4a41      	ldr	r2, [pc, #260]	; (800459c <decodelpscaleMK10E+0x288>)
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 80044a2:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 80044a6:	e075      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 13351:  lpscaleMK10E[index]=1;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	4a3c      	ldr	r2, [pc, #240]	; (800459c <decodelpscaleMK10E+0x288>)
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	18d1      	adds	r1, r2, r3
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 80044b6:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 80044ba:	e06b      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46211:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <decodelpscaleMK10E+0x290>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	78fc      	ldrb	r4, [r7, #3]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc f850 	bl	8000568 <__aeabi_f2d>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4833      	ldr	r0, [pc, #204]	; (800459c <decodelpscaleMK10E+0x288>)
 80044ce:	00e1      	lsls	r1, r4, #3
 80044d0:	4401      	add	r1, r0
 80044d2:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 80044d6:	e05d      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46212:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <decodelpscaleMK10E+0x290>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fc      	ldrb	r4, [r7, #3]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc f842 	bl	8000568 <__aeabi_f2d>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	482c      	ldr	r0, [pc, #176]	; (800459c <decodelpscaleMK10E+0x288>)
 80044ea:	00e1      	lsls	r1, r4, #3
 80044ec:	4401      	add	r1, r0
 80044ee:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 80044f2:	e04f      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46213:  lpscaleMK10E[index]=(double)commonscale[VOSCALEIDX];
 80044f4:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <decodelpscaleMK10E+0x290>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	78fc      	ldrb	r4, [r7, #3]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc f834 	bl	8000568 <__aeabi_f2d>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4825      	ldr	r0, [pc, #148]	; (800459c <decodelpscaleMK10E+0x288>)
 8004506:	00e1      	lsls	r1, r4, #3
 8004508:	4401      	add	r1, r0
 800450a:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 800450e:	e041      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46208:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 8004510:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <decodelpscaleMK10E+0x290>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	78fc      	ldrb	r4, [r7, #3]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc f826 	bl	8000568 <__aeabi_f2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	481e      	ldr	r0, [pc, #120]	; (800459c <decodelpscaleMK10E+0x288>)
 8004522:	00e1      	lsls	r1, r4, #3
 8004524:	4401      	add	r1, r0
 8004526:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 800452a:	e033      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46209:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <decodelpscaleMK10E+0x290>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	78fc      	ldrb	r4, [r7, #3]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc f818 	bl	8000568 <__aeabi_f2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4817      	ldr	r0, [pc, #92]	; (800459c <decodelpscaleMK10E+0x288>)
 800453e:	00e1      	lsls	r1, r4, #3
 8004540:	4401      	add	r1, r0
 8004542:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8004546:	e025      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46210:  lpscaleMK10E[index]=(double)commonscale[IISCALEIDX];
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <decodelpscaleMK10E+0x290>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	78fc      	ldrb	r4, [r7, #3]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc f80a 	bl	8000568 <__aeabi_f2d>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4810      	ldr	r0, [pc, #64]	; (800459c <decodelpscaleMK10E+0x288>)
 800455a:	00e1      	lsls	r1, r4, #3
 800455c:	4401      	add	r1, r0
 800455e:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8004562:	e017      	b.n	8004594 <decodelpscaleMK10E+0x280>
    case 46323  :  lpscaleMK10E[index]=(double)commonscale[PFSCALEIDX];
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <decodelpscaleMK10E+0x290>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	78fc      	ldrb	r4, [r7, #3]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fb fffc 	bl	8000568 <__aeabi_f2d>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <decodelpscaleMK10E+0x288>)
 8004576:	00e1      	lsls	r1, r4, #3
 8004578:	4401      	add	r1, r0
 800457a:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 800457e:	e009      	b.n	8004594 <decodelpscaleMK10E+0x280>
    default:  lpscaleMK10E[index]=1;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	4a06      	ldr	r2, [pc, #24]	; (800459c <decodelpscaleMK10E+0x288>)
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	18d1      	adds	r1, r2, r3
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <decodelpscaleMK10E+0x28c>)
 800458e:	e9c1 2300 	strd	r2, r3, [r1]
                break;    
 8004592:	bf00      	nop
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	20002f50 	.word	0x20002f50
 80045a0:	3ff00000 	.word	0x3ff00000
 80045a4:	20002870 	.word	0x20002870

080045a8 <decodelpinitMK10E>:

void decodelpinitMK10E(){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
//	printf("\nDecode LPInit MK10E\n");
  for(int i=0;i<jmlchannel;i++){
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e00c      	b.n	80045ce <decodelpinitMK10E+0x26>
    // scale decode
    decodelpscaleMK10E(lpregm[i],i);
 80045b4:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <decodelpinitMK10E+0x3c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fea6 	bl	8004314 <decodelpscaleMK10E>
  for(int i=0;i<jmlchannel;i++){
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3301      	adds	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <decodelpinitMK10E+0x40>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4293      	cmp	r3, r2
 80045d8:	dbec      	blt.n	80045b4 <decodelpinitMK10E+0xc>
//    SerialMon.print(lpreg[i]);
//    SerialMon.print(" ");
//    SerialMonprintlnMK10E(lpscaleMK10E[i],7);
  }
//  printf("\r\n");
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200089bc 	.word	0x200089bc
 80045e8:	200027f8 	.word	0x200027f8

080045ec <decodelpdataMK10E>:

int decodelpdataMK10E(){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
  double temp;//, temp1;
  //int dataint;
  for(int i=0;i<jmlchannel;i++){
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e05d      	b.n	80046b4 <decodelpdataMK10E+0xc8>
//    decodelpscaleMK10E(lpreg[i],i);
    decodelpscaleMK10E(lpregm[i],i);
 80045f8:	4a34      	ldr	r2, [pc, #208]	; (80046cc <decodelpdataMK10E+0xe0>)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fe84 	bl	8004314 <decodelpscaleMK10E>
    myInt.i = 0;
 800460c:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <decodelpdataMK10E+0xe4>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
    myInt.i = (int)(dataMK10E[i*2+1]);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	3301      	adds	r3, #1
 8004618:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <decodelpdataMK10E+0xe8>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	461a      	mov	r2, r3
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <decodelpdataMK10E+0xe4>)
 8004620:	601a      	str	r2, [r3, #0]
    myInt.i = myInt.i<<8;
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <decodelpdataMK10E+0xe4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <decodelpdataMK10E+0xe4>)
 800462a:	6013      	str	r3, [r2, #0]
    myInt.i = myInt.i | (int)(dataMK10E[i*2]);
 800462c:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <decodelpdataMK10E+0xe4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	0052      	lsls	r2, r2, #1
 8004634:	4927      	ldr	r1, [pc, #156]	; (80046d4 <decodelpdataMK10E+0xe8>)
 8004636:	5c8a      	ldrb	r2, [r1, r2]
 8004638:	4313      	orrs	r3, r2
 800463a:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <decodelpdataMK10E+0xe4>)
 800463c:	6013      	str	r3, [r2, #0]
    lpdataint[i] = myInt.i;
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <decodelpdataMK10E+0xe4>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4925      	ldr	r1, [pc, #148]	; (80046d8 <decodelpdataMK10E+0xec>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdatauint[i] = myInt.ui;
 800464a:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <decodelpdataMK10E+0xe4>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4923      	ldr	r1, [pc, #140]	; (80046dc <decodelpdataMK10E+0xf0>)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    lpdataf[i]=(float) lpdatauint[i];
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <decodelpdataMK10E+0xf0>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <decodelpdataMK10E+0xf4>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	edc3 7a00 	vstr	s15, [r3]
    temp=(double)lpdataf[i];
 8004672:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <decodelpdataMK10E+0xf4>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff73 	bl	8000568 <__aeabi_f2d>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	e9c7 2300 	strd	r2, r3, [r7]
    lpdatad[i]=temp*lpscaleMK10E[i];
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <decodelpdataMK10E+0xf8>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469a:	f7fb ffbd 	bl	8000618 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4811      	ldr	r0, [pc, #68]	; (80046e8 <decodelpdataMK10E+0xfc>)
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	00c9      	lsls	r1, r1, #3
 80046a8:	4401      	add	r1, r0
 80046aa:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i=0;i<jmlchannel;i++){
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <decodelpdataMK10E+0x100>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4293      	cmp	r3, r2
 80046be:	db9b      	blt.n	80045f8 <decodelpdataMK10E+0xc>
//    printf("0x%X %.5f %d %.5f %.5f\r\n",lpreg[i],lpscaleMK10E[i],lpdataint[i],lpdataf[i],lpdatad[i]);
  }
  return 1;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200089bc 	.word	0x200089bc
 80046d0:	200027f4 	.word	0x200027f4
 80046d4:	200030fc 	.word	0x200030fc
 80046d8:	20003e0c 	.word	0x20003e0c
 80046dc:	20003700 	.word	0x20003700
 80046e0:	20002fa4 	.word	0x20002fa4
 80046e4:	20002f50 	.word	0x20002f50
 80046e8:	200025c8 	.word	0x200025c8
 80046ec:	200027f8 	.word	0x200027f8

080046f0 <lp2JsonMK10E>:

void lp2JsonMK10E(){
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
//  printData(dataMK10E, data_lenMK10E);
	datastrclearMK10E();
 80046f6:	f7fe fe73 	bl	80033e0 <datastrclearMK10E>
    strcpy(datastrMK10E,"{\"mid\":");
 80046fa:	4a42      	ldr	r2, [pc, #264]	; (8004804 <lp2JsonMK10E+0x114>)
 80046fc:	4b42      	ldr	r3, [pc, #264]	; (8004808 <lp2JsonMK10E+0x118>)
 80046fe:	cb03      	ldmia	r3!, {r0, r1}
 8004700:	6010      	str	r0, [r2, #0]
 8004702:	6051      	str	r1, [r2, #4]
    strcat(datastrMK10E, meterSNMK10E);
 8004704:	4941      	ldr	r1, [pc, #260]	; (800480c <lp2JsonMK10E+0x11c>)
 8004706:	483f      	ldr	r0, [pc, #252]	; (8004804 <lp2JsonMK10E+0x114>)
 8004708:	f017 fe8a 	bl	801c420 <strcat>
    strcat(datastrMK10E, ",\"pid\":\"LPMK10E\",");
 800470c:	483d      	ldr	r0, [pc, #244]	; (8004804 <lp2JsonMK10E+0x114>)
 800470e:	f7fb fd69 	bl	80001e4 <strlen>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <lp2JsonMK10E+0x114>)
 8004718:	4413      	add	r3, r2
 800471a:	4a3d      	ldr	r2, [pc, #244]	; (8004810 <lp2JsonMK10E+0x120>)
 800471c:	461d      	mov	r5, r3
 800471e:	4614      	mov	r4, r2
 8004720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004722:	6028      	str	r0, [r5, #0]
 8004724:	6069      	str	r1, [r5, #4]
 8004726:	60aa      	str	r2, [r5, #8]
 8004728:	60eb      	str	r3, [r5, #12]
 800472a:	8823      	ldrh	r3, [r4, #0]
 800472c:	822b      	strh	r3, [r5, #16]
//    strcat(datastrMK10E, ",\"pid\":\"LPMK10E\",\"readdate\":");
//      data2clearMK10E();
//      sprintf(data2MK10E,"%d,",timestamp_now);
//      strcat(datastrMK10E, data2MK10E);
      strcat(datastrMK10E, "\"3P65\":");
 800472e:	4835      	ldr	r0, [pc, #212]	; (8004804 <lp2JsonMK10E+0x114>)
 8004730:	f7fb fd58 	bl	80001e4 <strlen>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	4b32      	ldr	r3, [pc, #200]	; (8004804 <lp2JsonMK10E+0x114>)
 800473a:	4413      	add	r3, r2
 800473c:	4935      	ldr	r1, [pc, #212]	; (8004814 <lp2JsonMK10E+0x124>)
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	cb03      	ldmia	r3!, {r0, r1}
 8004744:	6010      	str	r0, [r2, #0]
 8004746:	6051      	str	r1, [r2, #4]
      data2clearMK10E();
 8004748:	f7fe fe30 	bl	80033ac <data2clearMK10E>
	sprintf(data2MK10E,"%ld,",lprecord);
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <lp2JsonMK10E+0x128>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	4932      	ldr	r1, [pc, #200]	; (800481c <lp2JsonMK10E+0x12c>)
 8004754:	4832      	ldr	r0, [pc, #200]	; (8004820 <lp2JsonMK10E+0x130>)
 8004756:	f017 fe43 	bl	801c3e0 <siprintf>
    strcat(datastrMK10E, data2MK10E);
 800475a:	4931      	ldr	r1, [pc, #196]	; (8004820 <lp2JsonMK10E+0x130>)
 800475c:	4829      	ldr	r0, [pc, #164]	; (8004804 <lp2JsonMK10E+0x114>)
 800475e:	f017 fe5f 	bl	801c420 <strcat>
  for(int i=0;i<jmlchannel;i++){
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e041      	b.n	80047ec <lp2JsonMK10E+0xfc>
    if(i<jmlchannel-1){
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <lp2JsonMK10E+0x134>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	da1c      	bge.n	80047ae <lp2JsonMK10E+0xbe>
//      strcat(datastrMK10E, formatLPRegMK10E(lpreg[i]));
      strcat(datastrMK10E, formatLPRegMK10E(lpregm[i]));
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <lp2JsonMK10E+0x138>)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff f91d 	bl	80039bc <formatLPRegMK10E>
 8004782:	4603      	mov	r3, r0
 8004784:	4619      	mov	r1, r3
 8004786:	481f      	ldr	r0, [pc, #124]	; (8004804 <lp2JsonMK10E+0x114>)
 8004788:	f017 fe4a 	bl	801c420 <strcat>
      data2clearMK10E();
 800478c:	f7fe fe0e 	bl	80033ac <data2clearMK10E>
      sprintf(data2MK10E,":%.5f,",lpdatad[i]);
 8004790:	4a26      	ldr	r2, [pc, #152]	; (800482c <lp2JsonMK10E+0x13c>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	4924      	ldr	r1, [pc, #144]	; (8004830 <lp2JsonMK10E+0x140>)
 800479e:	4820      	ldr	r0, [pc, #128]	; (8004820 <lp2JsonMK10E+0x130>)
 80047a0:	f017 fe1e 	bl	801c3e0 <siprintf>
      strcat(datastrMK10E, data2MK10E);
 80047a4:	491e      	ldr	r1, [pc, #120]	; (8004820 <lp2JsonMK10E+0x130>)
 80047a6:	4817      	ldr	r0, [pc, #92]	; (8004804 <lp2JsonMK10E+0x114>)
 80047a8:	f017 fe3a 	bl	801c420 <strcat>
 80047ac:	e01b      	b.n	80047e6 <lp2JsonMK10E+0xf6>
    }
    else {
//        strcat(datastrMK10E, formatLPRegMK10E(lpreg[i]));
        strcat(datastrMK10E, formatLPRegMK10E(lpregm[i]));
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <lp2JsonMK10E+0x138>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f900 	bl	80039bc <formatLPRegMK10E>
 80047bc:	4603      	mov	r3, r0
 80047be:	4619      	mov	r1, r3
 80047c0:	4810      	ldr	r0, [pc, #64]	; (8004804 <lp2JsonMK10E+0x114>)
 80047c2:	f017 fe2d 	bl	801c420 <strcat>
        data2clearMK10E();
 80047c6:	f7fe fdf1 	bl	80033ac <data2clearMK10E>
        sprintf(data2MK10E,":%.5f}",lpdatad[i]);
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <lp2JsonMK10E+0x13c>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	4917      	ldr	r1, [pc, #92]	; (8004834 <lp2JsonMK10E+0x144>)
 80047d8:	4811      	ldr	r0, [pc, #68]	; (8004820 <lp2JsonMK10E+0x130>)
 80047da:	f017 fe01 	bl	801c3e0 <siprintf>
        strcat(datastrMK10E, data2MK10E);
 80047de:	4910      	ldr	r1, [pc, #64]	; (8004820 <lp2JsonMK10E+0x130>)
 80047e0:	4808      	ldr	r0, [pc, #32]	; (8004804 <lp2JsonMK10E+0x114>)
 80047e2:	f017 fe1d 	bl	801c420 <strcat>
  for(int i=0;i<jmlchannel;i++){
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3301      	adds	r3, #1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <lp2JsonMK10E+0x134>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	dbb7      	blt.n	8004768 <lp2JsonMK10E+0x78>
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bdb0      	pop	{r4, r5, r7, pc}
 8004802:	bf00      	nop
 8004804:	20002974 	.word	0x20002974
 8004808:	0801e9f4 	.word	0x0801e9f4
 800480c:	200000b0 	.word	0x200000b0
 8004810:	0801eda0 	.word	0x0801eda0
 8004814:	0801edb4 	.word	0x0801edb4
 8004818:	200038d0 	.word	0x200038d0
 800481c:	0801ea44 	.word	0x0801ea44
 8004820:	20003060 	.word	0x20003060
 8004824:	200027f8 	.word	0x200027f8
 8004828:	200089bc 	.word	0x200089bc
 800482c:	200025c8 	.word	0x200025c8
 8004830:	0801edbc 	.word	0x0801edbc
 8004834:	0801edc4 	.word	0x0801edc4

08004838 <txEobLpInitMK10E>:
//  printData(dataMK10E,data_lenMK10E);
//  HAL_Delay(1000);
  return 0;
}

void txEobLpInitMK10E(){
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 800483c:	f7fe fd76 	bl	800332c <dataallclearMK10E>
	data_lenMK10E = 0;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <txEobLpInitMK10E+0x48>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
	dataMK10E[0]=0x02;
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <txEobLpInitMK10E+0x4c>)
 8004848:	2202      	movs	r2, #2
 800484a:	701a      	strb	r2, [r3, #0]
	dataMK10E[1]=0x52;
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <txEobLpInitMK10E+0x4c>)
 800484e:	2252      	movs	r2, #82	; 0x52
 8004850:	705a      	strb	r2, [r3, #1]
	dataMK10E[2]=0xF5;
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <txEobLpInitMK10E+0x4c>)
 8004854:	22f5      	movs	r2, #245	; 0xf5
 8004856:	709a      	strb	r2, [r3, #2]
	dataMK10E[3]=0x32;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <txEobLpInitMK10E+0x4c>)
 800485a:	2232      	movs	r2, #50	; 0x32
 800485c:	70da      	strb	r2, [r3, #3]
	dataMK10E[4]=0x27;
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <txEobLpInitMK10E+0x4c>)
 8004860:	2227      	movs	r2, #39	; 0x27
 8004862:	711a      	strb	r2, [r3, #4]
	dataMK10E[5]=0xE3;
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <txEobLpInitMK10E+0x4c>)
 8004866:	22e3      	movs	r2, #227	; 0xe3
 8004868:	715a      	strb	r2, [r3, #5]
	dataMK10E[6]=0x03;
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <txEobLpInitMK10E+0x4c>)
 800486c:	2203      	movs	r2, #3
 800486e:	719a      	strb	r2, [r3, #6]
  HAL_UART_Transmit(&SerialMtr, (uint8_t *)dataMK10E, 7, 100);
 8004870:	2364      	movs	r3, #100	; 0x64
 8004872:	2207      	movs	r2, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <txEobLpInitMK10E+0x4c>)
 8004876:	4804      	ldr	r0, [pc, #16]	; (8004888 <txEobLpInitMK10E+0x50>)
 8004878:	f00f fd90 	bl	801439c <HAL_UART_Transmit>
}
 800487c:	bf00      	nop
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20002970 	.word	0x20002970
 8004884:	200030fc 	.word	0x200030fc
 8004888:	20002770 	.word	0x20002770

0800488c <rxEobLpInitMK10E>:

void rxEobLpInitMK10E(char* datain, int len){
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  memcpy(dataMK10E,datain,len);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4807      	ldr	r0, [pc, #28]	; (80048bc <rxEobLpInitMK10E+0x30>)
 800489e:	f016 ffd7 	bl	801b850 <memcpy>
  data_lenMK10E = datasize(dataMK10E);
 80048a2:	4806      	ldr	r0, [pc, #24]	; (80048bc <rxEobLpInitMK10E+0x30>)
 80048a4:	f001 fb94 	bl	8005fd0 <datasize>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4a05      	ldr	r2, [pc, #20]	; (80048c0 <rxEobLpInitMK10E+0x34>)
 80048ac:	6013      	str	r3, [r2, #0]
  decodeEobLpinitMK10E();
 80048ae:	f7ff f951 	bl	8003b54 <decodeEobLpinitMK10E>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200030fc 	.word	0x200030fc
 80048c0:	20002970 	.word	0x20002970

080048c4 <checkregEoBUnifiedMK10E>:
            return 0;
            break;
  }
}

const char *checkregEoBUnifiedMK10E(int reg){
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  switch(reg){
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f646 222b 	movw	r2, #27179	; 0x6a2b
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f300 8100 	bgt.w	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f646 2203 	movw	r2, #27139	; 0x6a03
 80048de:	4293      	cmp	r3, r2
 80048e0:	da2d      	bge.n	800493e <checkregEoBUnifiedMK10E+0x7a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f646 122b 	movw	r2, #26923	; 0x692b
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f300 80f5 	bgt.w	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f646 1203 	movw	r2, #26883	; 0x6903
 80048f4:	4293      	cmp	r3, r2
 80048f6:	da7f      	bge.n	80049f8 <checkregEoBUnifiedMK10E+0x134>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f646 0264 	movw	r2, #26724	; 0x6864
 80048fe:	4293      	cmp	r3, r2
 8004900:	f000 80e6 	beq.w	8004ad0 <checkregEoBUnifiedMK10E+0x20c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f646 0264 	movw	r2, #26724	; 0x6864
 800490a:	4293      	cmp	r3, r2
 800490c:	f300 80e4 	bgt.w	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f646 0227 	movw	r2, #26663	; 0x6827
 8004916:	4293      	cmp	r3, r2
 8004918:	f000 80d0 	beq.w	8004abc <checkregEoBUnifiedMK10E+0x1f8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f646 0227 	movw	r2, #26663	; 0x6827
 8004922:	4293      	cmp	r3, r2
 8004924:	f300 80d8 	bgt.w	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2bff      	cmp	r3, #255	; 0xff
 800492c:	f000 80d2 	beq.w	8004ad4 <checkregEoBUnifiedMK10E+0x210>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f646 0217 	movw	r2, #26647	; 0x6817
 8004936:	4293      	cmp	r3, r2
 8004938:	f000 80be 	beq.w	8004ab8 <checkregEoBUnifiedMK10E+0x1f4>
 800493c:	e0cc      	b.n	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 8004944:	3b03      	subs	r3, #3
 8004946:	2b28      	cmp	r3, #40	; 0x28
 8004948:	f200 80c6 	bhi.w	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <checkregEoBUnifiedMK10E+0x90>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004ac9 	.word	0x08004ac9
 8004958:	08004ad9 	.word	0x08004ad9
 800495c:	08004ad9 	.word	0x08004ad9
 8004960:	08004ad9 	.word	0x08004ad9
 8004964:	08004acd 	.word	0x08004acd
 8004968:	08004ad9 	.word	0x08004ad9
 800496c:	08004ad9 	.word	0x08004ad9
 8004970:	08004ad9 	.word	0x08004ad9
 8004974:	08004ad9 	.word	0x08004ad9
 8004978:	08004ad9 	.word	0x08004ad9
 800497c:	08004ad9 	.word	0x08004ad9
 8004980:	08004ad9 	.word	0x08004ad9
 8004984:	08004ad9 	.word	0x08004ad9
 8004988:	08004ad9 	.word	0x08004ad9
 800498c:	08004ad9 	.word	0x08004ad9
 8004990:	08004ad9 	.word	0x08004ad9
 8004994:	08004ab1 	.word	0x08004ab1
 8004998:	08004ad9 	.word	0x08004ad9
 800499c:	08004ad9 	.word	0x08004ad9
 80049a0:	08004ad9 	.word	0x08004ad9
 80049a4:	08004ab9 	.word	0x08004ab9
 80049a8:	08004ad9 	.word	0x08004ad9
 80049ac:	08004ad9 	.word	0x08004ad9
 80049b0:	08004ad9 	.word	0x08004ad9
 80049b4:	08004ac1 	.word	0x08004ac1
 80049b8:	08004ad9 	.word	0x08004ad9
 80049bc:	08004ad9 	.word	0x08004ad9
 80049c0:	08004ad9 	.word	0x08004ad9
 80049c4:	08004ad9 	.word	0x08004ad9
 80049c8:	08004ad9 	.word	0x08004ad9
 80049cc:	08004ad9 	.word	0x08004ad9
 80049d0:	08004ad9 	.word	0x08004ad9
 80049d4:	08004ab5 	.word	0x08004ab5
 80049d8:	08004ad9 	.word	0x08004ad9
 80049dc:	08004ad9 	.word	0x08004ad9
 80049e0:	08004ad9 	.word	0x08004ad9
 80049e4:	08004abd 	.word	0x08004abd
 80049e8:	08004ad9 	.word	0x08004ad9
 80049ec:	08004ad9 	.word	0x08004ad9
 80049f0:	08004ad9 	.word	0x08004ad9
 80049f4:	08004ac5 	.word	0x08004ac5
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 80049fe:	3b03      	subs	r3, #3
 8004a00:	2b28      	cmp	r3, #40	; 0x28
 8004a02:	d869      	bhi.n	8004ad8 <checkregEoBUnifiedMK10E+0x214>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <checkregEoBUnifiedMK10E+0x148>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004ac9 	.word	0x08004ac9
 8004a10:	08004ad9 	.word	0x08004ad9
 8004a14:	08004ad9 	.word	0x08004ad9
 8004a18:	08004ad9 	.word	0x08004ad9
 8004a1c:	08004ad9 	.word	0x08004ad9
 8004a20:	08004ad9 	.word	0x08004ad9
 8004a24:	08004ad9 	.word	0x08004ad9
 8004a28:	08004ad9 	.word	0x08004ad9
 8004a2c:	08004ad9 	.word	0x08004ad9
 8004a30:	08004ad9 	.word	0x08004ad9
 8004a34:	08004ad9 	.word	0x08004ad9
 8004a38:	08004ad9 	.word	0x08004ad9
 8004a3c:	08004ad9 	.word	0x08004ad9
 8004a40:	08004ad9 	.word	0x08004ad9
 8004a44:	08004ad9 	.word	0x08004ad9
 8004a48:	08004ad9 	.word	0x08004ad9
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004ad9 	.word	0x08004ad9
 8004a54:	08004ad9 	.word	0x08004ad9
 8004a58:	08004ad9 	.word	0x08004ad9
 8004a5c:	08004ab9 	.word	0x08004ab9
 8004a60:	08004ad9 	.word	0x08004ad9
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004ad9 	.word	0x08004ad9
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004ad9 	.word	0x08004ad9
 8004a7c:	08004ad9 	.word	0x08004ad9
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004ad9 	.word	0x08004ad9
 8004a8c:	08004ab5 	.word	0x08004ab5
 8004a90:	08004ad9 	.word	0x08004ad9
 8004a94:	08004ad9 	.word	0x08004ad9
 8004a98:	08004ad9 	.word	0x08004ad9
 8004a9c:	08004abd 	.word	0x08004abd
 8004aa0:	08004ad9 	.word	0x08004ad9
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004ac5 	.word	0x08004ac5
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P70\"";
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <checkregEoBUnifiedMK10E+0x224>)
 8004ab2:	e012      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P76\"";
 8004ab4:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <checkregEoBUnifiedMK10E+0x228>)
 8004ab6:	e010      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P82\"";
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <checkregEoBUnifiedMK10E+0x22c>)
 8004aba:	e00e      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P88\"";
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <checkregEoBUnifiedMK10E+0x230>)
 8004abe:	e00c      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P94\"";
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <checkregEoBUnifiedMK10E+0x234>)
 8004ac2:	e00a      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P0A\"";
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <checkregEoBUnifiedMK10E+0x238>)
 8004ac6:	e008      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P6A\"";
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <checkregEoBUnifiedMK10E+0x23c>)
 8004aca:	e006      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PCA\"";
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <checkregEoBUnifiedMK10E+0x240>)
 8004ace:	e004      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <checkregEoBUnifiedMK10E+0x244>)
 8004ad2:	e002      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <checkregEoBUnifiedMK10E+0x248>)
 8004ad6:	e000      	b.n	8004ada <checkregEoBUnifiedMK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <checkregEoBUnifiedMK10E+0x248>)
            return 0;
            break;
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	0801eac8 	.word	0x0801eac8
 8004aec:	0801eac0 	.word	0x0801eac0
 8004af0:	0801ead8 	.word	0x0801ead8
 8004af4:	0801ead0 	.word	0x0801ead0
 8004af8:	0801eae8 	.word	0x0801eae8
 8004afc:	0801eae0 	.word	0x0801eae0
 8004b00:	0801eaf0 	.word	0x0801eaf0
 8004b04:	0801eaf8 	.word	0x0801eaf8
 8004b08:	0801edfc 	.word	0x0801edfc
 8004b0c:	0801edf4 	.word	0x0801edf4

08004b10 <checkregEoBRate1MK10E>:

const char * checkregEoBRate1MK10E(int reg){
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f300 8100 	bgt.w	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	da2d      	bge.n	8004b8a <checkregEoBRate1MK10E+0x7a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f646 122b 	movw	r2, #26923	; 0x692b
 8004b34:	4293      	cmp	r3, r2
 8004b36:	f300 80f5 	bgt.w	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f646 1203 	movw	r2, #26883	; 0x6903
 8004b40:	4293      	cmp	r3, r2
 8004b42:	da7f      	bge.n	8004c44 <checkregEoBRate1MK10E+0x134>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f646 0264 	movw	r2, #26724	; 0x6864
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f000 80e6 	beq.w	8004d1c <checkregEoBRate1MK10E+0x20c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f646 0264 	movw	r2, #26724	; 0x6864
 8004b56:	4293      	cmp	r3, r2
 8004b58:	f300 80e4 	bgt.w	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f646 0227 	movw	r2, #26663	; 0x6827
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f000 80d0 	beq.w	8004d08 <checkregEoBRate1MK10E+0x1f8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f646 0227 	movw	r2, #26663	; 0x6827
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f300 80d8 	bgt.w	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2bff      	cmp	r3, #255	; 0xff
 8004b78:	f000 80d2 	beq.w	8004d20 <checkregEoBRate1MK10E+0x210>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f646 0217 	movw	r2, #26647	; 0x6817
 8004b82:	4293      	cmp	r3, r2
 8004b84:	f000 80be 	beq.w	8004d04 <checkregEoBRate1MK10E+0x1f4>
 8004b88:	e0cc      	b.n	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 8004b90:	3b03      	subs	r3, #3
 8004b92:	2b28      	cmp	r3, #40	; 0x28
 8004b94:	f200 80c6 	bhi.w	8004d24 <checkregEoBRate1MK10E+0x214>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <checkregEoBRate1MK10E+0x90>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004d15 	.word	0x08004d15
 8004ba4:	08004d25 	.word	0x08004d25
 8004ba8:	08004d25 	.word	0x08004d25
 8004bac:	08004d25 	.word	0x08004d25
 8004bb0:	08004d19 	.word	0x08004d19
 8004bb4:	08004d25 	.word	0x08004d25
 8004bb8:	08004d25 	.word	0x08004d25
 8004bbc:	08004d25 	.word	0x08004d25
 8004bc0:	08004d25 	.word	0x08004d25
 8004bc4:	08004d25 	.word	0x08004d25
 8004bc8:	08004d25 	.word	0x08004d25
 8004bcc:	08004d25 	.word	0x08004d25
 8004bd0:	08004d25 	.word	0x08004d25
 8004bd4:	08004d25 	.word	0x08004d25
 8004bd8:	08004d25 	.word	0x08004d25
 8004bdc:	08004d25 	.word	0x08004d25
 8004be0:	08004cfd 	.word	0x08004cfd
 8004be4:	08004d25 	.word	0x08004d25
 8004be8:	08004d25 	.word	0x08004d25
 8004bec:	08004d25 	.word	0x08004d25
 8004bf0:	08004d05 	.word	0x08004d05
 8004bf4:	08004d25 	.word	0x08004d25
 8004bf8:	08004d25 	.word	0x08004d25
 8004bfc:	08004d25 	.word	0x08004d25
 8004c00:	08004d0d 	.word	0x08004d0d
 8004c04:	08004d25 	.word	0x08004d25
 8004c08:	08004d25 	.word	0x08004d25
 8004c0c:	08004d25 	.word	0x08004d25
 8004c10:	08004d25 	.word	0x08004d25
 8004c14:	08004d25 	.word	0x08004d25
 8004c18:	08004d25 	.word	0x08004d25
 8004c1c:	08004d25 	.word	0x08004d25
 8004c20:	08004d01 	.word	0x08004d01
 8004c24:	08004d25 	.word	0x08004d25
 8004c28:	08004d25 	.word	0x08004d25
 8004c2c:	08004d25 	.word	0x08004d25
 8004c30:	08004d09 	.word	0x08004d09
 8004c34:	08004d25 	.word	0x08004d25
 8004c38:	08004d25 	.word	0x08004d25
 8004c3c:	08004d25 	.word	0x08004d25
 8004c40:	08004d11 	.word	0x08004d11
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 8004c4a:	3b03      	subs	r3, #3
 8004c4c:	2b28      	cmp	r3, #40	; 0x28
 8004c4e:	d869      	bhi.n	8004d24 <checkregEoBRate1MK10E+0x214>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <checkregEoBRate1MK10E+0x148>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d25 	.word	0x08004d25
 8004c60:	08004d25 	.word	0x08004d25
 8004c64:	08004d25 	.word	0x08004d25
 8004c68:	08004d25 	.word	0x08004d25
 8004c6c:	08004d25 	.word	0x08004d25
 8004c70:	08004d25 	.word	0x08004d25
 8004c74:	08004d25 	.word	0x08004d25
 8004c78:	08004d25 	.word	0x08004d25
 8004c7c:	08004d25 	.word	0x08004d25
 8004c80:	08004d25 	.word	0x08004d25
 8004c84:	08004d25 	.word	0x08004d25
 8004c88:	08004d25 	.word	0x08004d25
 8004c8c:	08004d25 	.word	0x08004d25
 8004c90:	08004d25 	.word	0x08004d25
 8004c94:	08004d25 	.word	0x08004d25
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004d25 	.word	0x08004d25
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004d25 	.word	0x08004d25
 8004ca8:	08004d05 	.word	0x08004d05
 8004cac:	08004d25 	.word	0x08004d25
 8004cb0:	08004d25 	.word	0x08004d25
 8004cb4:	08004d25 	.word	0x08004d25
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004d25 	.word	0x08004d25
 8004cc4:	08004d25 	.word	0x08004d25
 8004cc8:	08004d25 	.word	0x08004d25
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004d25 	.word	0x08004d25
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d11 	.word	0x08004d11
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P71\"";
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <checkregEoBRate1MK10E+0x224>)
 8004cfe:	e012      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P77\"";
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <checkregEoBRate1MK10E+0x228>)
 8004d02:	e010      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P83\"";
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <checkregEoBRate1MK10E+0x22c>)
 8004d06:	e00e      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P89\"";
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <checkregEoBRate1MK10E+0x230>)
 8004d0a:	e00c      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P95\"";
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <checkregEoBRate1MK10E+0x234>)
 8004d0e:	e00a      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P1A\"";
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <checkregEoBRate1MK10E+0x238>)
 8004d12:	e008      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P7A\"";
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <checkregEoBRate1MK10E+0x23c>)
 8004d16:	e006      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PDA\"";
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <checkregEoBRate1MK10E+0x240>)
 8004d1a:	e004      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <checkregEoBRate1MK10E+0x244>)
 8004d1e:	e002      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 8004d20:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <checkregEoBRate1MK10E+0x248>)
 8004d22:	e000      	b.n	8004d26 <checkregEoBRate1MK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <checkregEoBRate1MK10E+0x248>)
            return 0;
            break;
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	0801eb10 	.word	0x0801eb10
 8004d38:	0801eb08 	.word	0x0801eb08
 8004d3c:	0801eb20 	.word	0x0801eb20
 8004d40:	0801eb18 	.word	0x0801eb18
 8004d44:	0801eb30 	.word	0x0801eb30
 8004d48:	0801eb28 	.word	0x0801eb28
 8004d4c:	0801eb38 	.word	0x0801eb38
 8004d50:	0801eb40 	.word	0x0801eb40
 8004d54:	0801edfc 	.word	0x0801edfc
 8004d58:	0801edf4 	.word	0x0801edf4

08004d5c <checkregEoBRate2MK10E>:

const char * checkregEoBRate2MK10E(int reg){
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f300 8100 	bgt.w	8004f70 <checkregEoBRate2MK10E+0x214>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004d76:	4293      	cmp	r3, r2
 8004d78:	da2d      	bge.n	8004dd6 <checkregEoBRate2MK10E+0x7a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f646 122b 	movw	r2, #26923	; 0x692b
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f300 80f5 	bgt.w	8004f70 <checkregEoBRate2MK10E+0x214>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f646 1203 	movw	r2, #26883	; 0x6903
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	da7f      	bge.n	8004e90 <checkregEoBRate2MK10E+0x134>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f646 0264 	movw	r2, #26724	; 0x6864
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 80e6 	beq.w	8004f68 <checkregEoBRate2MK10E+0x20c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f646 0264 	movw	r2, #26724	; 0x6864
 8004da2:	4293      	cmp	r3, r2
 8004da4:	f300 80e4 	bgt.w	8004f70 <checkregEoBRate2MK10E+0x214>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f646 0227 	movw	r2, #26663	; 0x6827
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f000 80d0 	beq.w	8004f54 <checkregEoBRate2MK10E+0x1f8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f646 0227 	movw	r2, #26663	; 0x6827
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f300 80d8 	bgt.w	8004f70 <checkregEoBRate2MK10E+0x214>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2bff      	cmp	r3, #255	; 0xff
 8004dc4:	f000 80d2 	beq.w	8004f6c <checkregEoBRate2MK10E+0x210>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f646 0217 	movw	r2, #26647	; 0x6817
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f000 80be 	beq.w	8004f50 <checkregEoBRate2MK10E+0x1f4>
 8004dd4:	e0cc      	b.n	8004f70 <checkregEoBRate2MK10E+0x214>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 8004ddc:	3b03      	subs	r3, #3
 8004dde:	2b28      	cmp	r3, #40	; 0x28
 8004de0:	f200 80c6 	bhi.w	8004f70 <checkregEoBRate2MK10E+0x214>
 8004de4:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <checkregEoBRate2MK10E+0x90>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004f61 	.word	0x08004f61
 8004df0:	08004f71 	.word	0x08004f71
 8004df4:	08004f71 	.word	0x08004f71
 8004df8:	08004f71 	.word	0x08004f71
 8004dfc:	08004f65 	.word	0x08004f65
 8004e00:	08004f71 	.word	0x08004f71
 8004e04:	08004f71 	.word	0x08004f71
 8004e08:	08004f71 	.word	0x08004f71
 8004e0c:	08004f71 	.word	0x08004f71
 8004e10:	08004f71 	.word	0x08004f71
 8004e14:	08004f71 	.word	0x08004f71
 8004e18:	08004f71 	.word	0x08004f71
 8004e1c:	08004f71 	.word	0x08004f71
 8004e20:	08004f71 	.word	0x08004f71
 8004e24:	08004f71 	.word	0x08004f71
 8004e28:	08004f71 	.word	0x08004f71
 8004e2c:	08004f49 	.word	0x08004f49
 8004e30:	08004f71 	.word	0x08004f71
 8004e34:	08004f71 	.word	0x08004f71
 8004e38:	08004f71 	.word	0x08004f71
 8004e3c:	08004f51 	.word	0x08004f51
 8004e40:	08004f71 	.word	0x08004f71
 8004e44:	08004f71 	.word	0x08004f71
 8004e48:	08004f71 	.word	0x08004f71
 8004e4c:	08004f59 	.word	0x08004f59
 8004e50:	08004f71 	.word	0x08004f71
 8004e54:	08004f71 	.word	0x08004f71
 8004e58:	08004f71 	.word	0x08004f71
 8004e5c:	08004f71 	.word	0x08004f71
 8004e60:	08004f71 	.word	0x08004f71
 8004e64:	08004f71 	.word	0x08004f71
 8004e68:	08004f71 	.word	0x08004f71
 8004e6c:	08004f4d 	.word	0x08004f4d
 8004e70:	08004f71 	.word	0x08004f71
 8004e74:	08004f71 	.word	0x08004f71
 8004e78:	08004f71 	.word	0x08004f71
 8004e7c:	08004f55 	.word	0x08004f55
 8004e80:	08004f71 	.word	0x08004f71
 8004e84:	08004f71 	.word	0x08004f71
 8004e88:	08004f71 	.word	0x08004f71
 8004e8c:	08004f5d 	.word	0x08004f5d
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 8004e96:	3b03      	subs	r3, #3
 8004e98:	2b28      	cmp	r3, #40	; 0x28
 8004e9a:	d869      	bhi.n	8004f70 <checkregEoBRate2MK10E+0x214>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <checkregEoBRate2MK10E+0x148>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004f61 	.word	0x08004f61
 8004ea8:	08004f71 	.word	0x08004f71
 8004eac:	08004f71 	.word	0x08004f71
 8004eb0:	08004f71 	.word	0x08004f71
 8004eb4:	08004f71 	.word	0x08004f71
 8004eb8:	08004f71 	.word	0x08004f71
 8004ebc:	08004f71 	.word	0x08004f71
 8004ec0:	08004f71 	.word	0x08004f71
 8004ec4:	08004f71 	.word	0x08004f71
 8004ec8:	08004f71 	.word	0x08004f71
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004f71 	.word	0x08004f71
 8004ed4:	08004f71 	.word	0x08004f71
 8004ed8:	08004f71 	.word	0x08004f71
 8004edc:	08004f71 	.word	0x08004f71
 8004ee0:	08004f71 	.word	0x08004f71
 8004ee4:	08004f49 	.word	0x08004f49
 8004ee8:	08004f71 	.word	0x08004f71
 8004eec:	08004f71 	.word	0x08004f71
 8004ef0:	08004f71 	.word	0x08004f71
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f71 	.word	0x08004f71
 8004efc:	08004f71 	.word	0x08004f71
 8004f00:	08004f71 	.word	0x08004f71
 8004f04:	08004f59 	.word	0x08004f59
 8004f08:	08004f71 	.word	0x08004f71
 8004f0c:	08004f71 	.word	0x08004f71
 8004f10:	08004f71 	.word	0x08004f71
 8004f14:	08004f71 	.word	0x08004f71
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f4d 	.word	0x08004f4d
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f55 	.word	0x08004f55
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f5d 	.word	0x08004f5d
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P72\"";
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <checkregEoBRate2MK10E+0x224>)
 8004f4a:	e012      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P78\"";
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <checkregEoBRate2MK10E+0x228>)
 8004f4e:	e010      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P84\"";
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <checkregEoBRate2MK10E+0x22c>)
 8004f52:	e00e      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P90\"";
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <checkregEoBRate2MK10E+0x230>)
 8004f56:	e00c      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P96\"";
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <checkregEoBRate2MK10E+0x234>)
 8004f5a:	e00a      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P2A\"";
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <checkregEoBRate2MK10E+0x238>)
 8004f5e:	e008      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P8A\"";
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <checkregEoBRate2MK10E+0x23c>)
 8004f62:	e006      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PEA\"";
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <checkregEoBRate2MK10E+0x240>)
 8004f66:	e004      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <checkregEoBRate2MK10E+0x244>)
 8004f6a:	e002      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <checkregEoBRate2MK10E+0x248>)
 8004f6e:	e000      	b.n	8004f72 <checkregEoBRate2MK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <checkregEoBRate2MK10E+0x248>)
            return 0;
            break;
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	0801eb58 	.word	0x0801eb58
 8004f84:	0801eb50 	.word	0x0801eb50
 8004f88:	0801eb68 	.word	0x0801eb68
 8004f8c:	0801eb60 	.word	0x0801eb60
 8004f90:	0801eb78 	.word	0x0801eb78
 8004f94:	0801eb70 	.word	0x0801eb70
 8004f98:	0801eb80 	.word	0x0801eb80
 8004f9c:	0801eb88 	.word	0x0801eb88
 8004fa0:	0801edfc 	.word	0x0801edfc
 8004fa4:	0801edf4 	.word	0x0801edf4

08004fa8 <checkregEoBRate3MK10E>:

const char * checkregEoBRate3MK10E(int reg){
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  switch(reg){
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f300 8100 	bgt.w	80051bc <checkregEoBRate3MK10E+0x214>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f646 2203 	movw	r2, #27139	; 0x6a03
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	da2d      	bge.n	8005022 <checkregEoBRate3MK10E+0x7a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f646 122b 	movw	r2, #26923	; 0x692b
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	f300 80f5 	bgt.w	80051bc <checkregEoBRate3MK10E+0x214>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f646 1203 	movw	r2, #26883	; 0x6903
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	da7f      	bge.n	80050dc <checkregEoBRate3MK10E+0x134>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f646 0264 	movw	r2, #26724	; 0x6864
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	f000 80e6 	beq.w	80051b4 <checkregEoBRate3MK10E+0x20c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f646 0264 	movw	r2, #26724	; 0x6864
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f300 80e4 	bgt.w	80051bc <checkregEoBRate3MK10E+0x214>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f646 0227 	movw	r2, #26663	; 0x6827
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	f000 80d0 	beq.w	80051a0 <checkregEoBRate3MK10E+0x1f8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f646 0227 	movw	r2, #26663	; 0x6827
 8005006:	4293      	cmp	r3, r2
 8005008:	f300 80d8 	bgt.w	80051bc <checkregEoBRate3MK10E+0x214>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2bff      	cmp	r3, #255	; 0xff
 8005010:	f000 80d2 	beq.w	80051b8 <checkregEoBRate3MK10E+0x210>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f646 0217 	movw	r2, #26647	; 0x6817
 800501a:	4293      	cmp	r3, r2
 800501c:	f000 80be 	beq.w	800519c <checkregEoBRate3MK10E+0x1f4>
 8005020:	e0cc      	b.n	80051bc <checkregEoBRate3MK10E+0x214>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 8005028:	3b03      	subs	r3, #3
 800502a:	2b28      	cmp	r3, #40	; 0x28
 800502c:	f200 80c6 	bhi.w	80051bc <checkregEoBRate3MK10E+0x214>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <checkregEoBRate3MK10E+0x90>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	080051ad 	.word	0x080051ad
 800503c:	080051bd 	.word	0x080051bd
 8005040:	080051bd 	.word	0x080051bd
 8005044:	080051bd 	.word	0x080051bd
 8005048:	080051b1 	.word	0x080051b1
 800504c:	080051bd 	.word	0x080051bd
 8005050:	080051bd 	.word	0x080051bd
 8005054:	080051bd 	.word	0x080051bd
 8005058:	080051bd 	.word	0x080051bd
 800505c:	080051bd 	.word	0x080051bd
 8005060:	080051bd 	.word	0x080051bd
 8005064:	080051bd 	.word	0x080051bd
 8005068:	080051bd 	.word	0x080051bd
 800506c:	080051bd 	.word	0x080051bd
 8005070:	080051bd 	.word	0x080051bd
 8005074:	080051bd 	.word	0x080051bd
 8005078:	08005195 	.word	0x08005195
 800507c:	080051bd 	.word	0x080051bd
 8005080:	080051bd 	.word	0x080051bd
 8005084:	080051bd 	.word	0x080051bd
 8005088:	0800519d 	.word	0x0800519d
 800508c:	080051bd 	.word	0x080051bd
 8005090:	080051bd 	.word	0x080051bd
 8005094:	080051bd 	.word	0x080051bd
 8005098:	080051a5 	.word	0x080051a5
 800509c:	080051bd 	.word	0x080051bd
 80050a0:	080051bd 	.word	0x080051bd
 80050a4:	080051bd 	.word	0x080051bd
 80050a8:	080051bd 	.word	0x080051bd
 80050ac:	080051bd 	.word	0x080051bd
 80050b0:	080051bd 	.word	0x080051bd
 80050b4:	080051bd 	.word	0x080051bd
 80050b8:	08005199 	.word	0x08005199
 80050bc:	080051bd 	.word	0x080051bd
 80050c0:	080051bd 	.word	0x080051bd
 80050c4:	080051bd 	.word	0x080051bd
 80050c8:	080051a1 	.word	0x080051a1
 80050cc:	080051bd 	.word	0x080051bd
 80050d0:	080051bd 	.word	0x080051bd
 80050d4:	080051bd 	.word	0x080051bd
 80050d8:	080051a9 	.word	0x080051a9
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 80050e2:	3b03      	subs	r3, #3
 80050e4:	2b28      	cmp	r3, #40	; 0x28
 80050e6:	d869      	bhi.n	80051bc <checkregEoBRate3MK10E+0x214>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <checkregEoBRate3MK10E+0x148>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	080051ad 	.word	0x080051ad
 80050f4:	080051bd 	.word	0x080051bd
 80050f8:	080051bd 	.word	0x080051bd
 80050fc:	080051bd 	.word	0x080051bd
 8005100:	080051bd 	.word	0x080051bd
 8005104:	080051bd 	.word	0x080051bd
 8005108:	080051bd 	.word	0x080051bd
 800510c:	080051bd 	.word	0x080051bd
 8005110:	080051bd 	.word	0x080051bd
 8005114:	080051bd 	.word	0x080051bd
 8005118:	080051bd 	.word	0x080051bd
 800511c:	080051bd 	.word	0x080051bd
 8005120:	080051bd 	.word	0x080051bd
 8005124:	080051bd 	.word	0x080051bd
 8005128:	080051bd 	.word	0x080051bd
 800512c:	080051bd 	.word	0x080051bd
 8005130:	08005195 	.word	0x08005195
 8005134:	080051bd 	.word	0x080051bd
 8005138:	080051bd 	.word	0x080051bd
 800513c:	080051bd 	.word	0x080051bd
 8005140:	0800519d 	.word	0x0800519d
 8005144:	080051bd 	.word	0x080051bd
 8005148:	080051bd 	.word	0x080051bd
 800514c:	080051bd 	.word	0x080051bd
 8005150:	080051a5 	.word	0x080051a5
 8005154:	080051bd 	.word	0x080051bd
 8005158:	080051bd 	.word	0x080051bd
 800515c:	080051bd 	.word	0x080051bd
 8005160:	080051bd 	.word	0x080051bd
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051bd 	.word	0x080051bd
 800516c:	080051bd 	.word	0x080051bd
 8005170:	08005199 	.word	0x08005199
 8005174:	080051bd 	.word	0x080051bd
 8005178:	080051bd 	.word	0x080051bd
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051a1 	.word	0x080051a1
 8005184:	080051bd 	.word	0x080051bd
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080051bd 	.word	0x080051bd
 8005190:	080051a9 	.word	0x080051a9
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P73\"";
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <checkregEoBRate3MK10E+0x224>)
 8005196:	e012      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P79\"";
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <checkregEoBRate3MK10E+0x228>)
 800519a:	e010      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P85\"";
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <checkregEoBRate3MK10E+0x22c>)
 800519e:	e00e      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P91\"";
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <checkregEoBRate3MK10E+0x230>)
 80051a2:	e00c      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P97\"";
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <checkregEoBRate3MK10E+0x234>)
 80051a6:	e00a      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P3A\"";
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <checkregEoBRate3MK10E+0x238>)
 80051aa:	e008      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3P9A\"";
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <checkregEoBRate3MK10E+0x23c>)
 80051ae:	e006      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3PFA\"";
 80051b0:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <checkregEoBRate3MK10E+0x240>)
 80051b2:	e004      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <checkregEoBRate3MK10E+0x244>)
 80051b6:	e002      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <checkregEoBRate3MK10E+0x248>)
 80051ba:	e000      	b.n	80051be <checkregEoBRate3MK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <checkregEoBRate3MK10E+0x248>)
            return 0;
            break;
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0801eba0 	.word	0x0801eba0
 80051d0:	0801eb98 	.word	0x0801eb98
 80051d4:	0801ebb0 	.word	0x0801ebb0
 80051d8:	0801eba8 	.word	0x0801eba8
 80051dc:	0801ebc0 	.word	0x0801ebc0
 80051e0:	0801ebb8 	.word	0x0801ebb8
 80051e4:	0801ebc8 	.word	0x0801ebc8
 80051e8:	0801ebd0 	.word	0x0801ebd0
 80051ec:	0801edfc 	.word	0x0801edfc
 80051f0:	0801edf4 	.word	0x0801edf4

080051f4 <checkregEoBRate4MK10E>:

const char * checkregEoBRate4MK10E(int reg){
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  switch(reg){
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f646 222b 	movw	r2, #27179	; 0x6a2b
 8005202:	4293      	cmp	r3, r2
 8005204:	f300 8100 	bgt.w	8005408 <checkregEoBRate4MK10E+0x214>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f646 2203 	movw	r2, #27139	; 0x6a03
 800520e:	4293      	cmp	r3, r2
 8005210:	da2d      	bge.n	800526e <checkregEoBRate4MK10E+0x7a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f646 122b 	movw	r2, #26923	; 0x692b
 8005218:	4293      	cmp	r3, r2
 800521a:	f300 80f5 	bgt.w	8005408 <checkregEoBRate4MK10E+0x214>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f646 1203 	movw	r2, #26883	; 0x6903
 8005224:	4293      	cmp	r3, r2
 8005226:	da7f      	bge.n	8005328 <checkregEoBRate4MK10E+0x134>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f646 0264 	movw	r2, #26724	; 0x6864
 800522e:	4293      	cmp	r3, r2
 8005230:	f000 80e6 	beq.w	8005400 <checkregEoBRate4MK10E+0x20c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f646 0264 	movw	r2, #26724	; 0x6864
 800523a:	4293      	cmp	r3, r2
 800523c:	f300 80e4 	bgt.w	8005408 <checkregEoBRate4MK10E+0x214>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f646 0227 	movw	r2, #26663	; 0x6827
 8005246:	4293      	cmp	r3, r2
 8005248:	f000 80d0 	beq.w	80053ec <checkregEoBRate4MK10E+0x1f8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f646 0227 	movw	r2, #26663	; 0x6827
 8005252:	4293      	cmp	r3, r2
 8005254:	f300 80d8 	bgt.w	8005408 <checkregEoBRate4MK10E+0x214>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2bff      	cmp	r3, #255	; 0xff
 800525c:	f000 80d2 	beq.w	8005404 <checkregEoBRate4MK10E+0x210>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f646 0217 	movw	r2, #26647	; 0x6817
 8005266:	4293      	cmp	r3, r2
 8005268:	f000 80be 	beq.w	80053e8 <checkregEoBRate4MK10E+0x1f4>
 800526c:	e0cc      	b.n	8005408 <checkregEoBRate4MK10E+0x214>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 8005274:	3b03      	subs	r3, #3
 8005276:	2b28      	cmp	r3, #40	; 0x28
 8005278:	f200 80c6 	bhi.w	8005408 <checkregEoBRate4MK10E+0x214>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <checkregEoBRate4MK10E+0x90>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080053f9 	.word	0x080053f9
 8005288:	08005409 	.word	0x08005409
 800528c:	08005409 	.word	0x08005409
 8005290:	08005409 	.word	0x08005409
 8005294:	080053fd 	.word	0x080053fd
 8005298:	08005409 	.word	0x08005409
 800529c:	08005409 	.word	0x08005409
 80052a0:	08005409 	.word	0x08005409
 80052a4:	08005409 	.word	0x08005409
 80052a8:	08005409 	.word	0x08005409
 80052ac:	08005409 	.word	0x08005409
 80052b0:	08005409 	.word	0x08005409
 80052b4:	08005409 	.word	0x08005409
 80052b8:	08005409 	.word	0x08005409
 80052bc:	08005409 	.word	0x08005409
 80052c0:	08005409 	.word	0x08005409
 80052c4:	080053e1 	.word	0x080053e1
 80052c8:	08005409 	.word	0x08005409
 80052cc:	08005409 	.word	0x08005409
 80052d0:	08005409 	.word	0x08005409
 80052d4:	080053e9 	.word	0x080053e9
 80052d8:	08005409 	.word	0x08005409
 80052dc:	08005409 	.word	0x08005409
 80052e0:	08005409 	.word	0x08005409
 80052e4:	080053f1 	.word	0x080053f1
 80052e8:	08005409 	.word	0x08005409
 80052ec:	08005409 	.word	0x08005409
 80052f0:	08005409 	.word	0x08005409
 80052f4:	08005409 	.word	0x08005409
 80052f8:	08005409 	.word	0x08005409
 80052fc:	08005409 	.word	0x08005409
 8005300:	08005409 	.word	0x08005409
 8005304:	080053e5 	.word	0x080053e5
 8005308:	08005409 	.word	0x08005409
 800530c:	08005409 	.word	0x08005409
 8005310:	08005409 	.word	0x08005409
 8005314:	080053ed 	.word	0x080053ed
 8005318:	08005409 	.word	0x08005409
 800531c:	08005409 	.word	0x08005409
 8005320:	08005409 	.word	0x08005409
 8005324:	080053f5 	.word	0x080053f5
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 800532e:	3b03      	subs	r3, #3
 8005330:	2b28      	cmp	r3, #40	; 0x28
 8005332:	d869      	bhi.n	8005408 <checkregEoBRate4MK10E+0x214>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <checkregEoBRate4MK10E+0x148>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	080053f9 	.word	0x080053f9
 8005340:	08005409 	.word	0x08005409
 8005344:	08005409 	.word	0x08005409
 8005348:	08005409 	.word	0x08005409
 800534c:	08005409 	.word	0x08005409
 8005350:	08005409 	.word	0x08005409
 8005354:	08005409 	.word	0x08005409
 8005358:	08005409 	.word	0x08005409
 800535c:	08005409 	.word	0x08005409
 8005360:	08005409 	.word	0x08005409
 8005364:	08005409 	.word	0x08005409
 8005368:	08005409 	.word	0x08005409
 800536c:	08005409 	.word	0x08005409
 8005370:	08005409 	.word	0x08005409
 8005374:	08005409 	.word	0x08005409
 8005378:	08005409 	.word	0x08005409
 800537c:	080053e1 	.word	0x080053e1
 8005380:	08005409 	.word	0x08005409
 8005384:	08005409 	.word	0x08005409
 8005388:	08005409 	.word	0x08005409
 800538c:	080053e9 	.word	0x080053e9
 8005390:	08005409 	.word	0x08005409
 8005394:	08005409 	.word	0x08005409
 8005398:	08005409 	.word	0x08005409
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	08005409 	.word	0x08005409
 80053a4:	08005409 	.word	0x08005409
 80053a8:	08005409 	.word	0x08005409
 80053ac:	08005409 	.word	0x08005409
 80053b0:	08005409 	.word	0x08005409
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005409 	.word	0x08005409
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	08005409 	.word	0x08005409
 80053c4:	08005409 	.word	0x08005409
 80053c8:	08005409 	.word	0x08005409
 80053cc:	080053ed 	.word	0x080053ed
 80053d0:	08005409 	.word	0x08005409
 80053d4:	08005409 	.word	0x08005409
 80053d8:	08005409 	.word	0x08005409
 80053dc:	080053f5 	.word	0x080053f5
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P74\"";
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <checkregEoBRate4MK10E+0x224>)
 80053e2:	e012      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P80\"";
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <checkregEoBRate4MK10E+0x228>)
 80053e6:	e010      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P86\"";
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <checkregEoBRate4MK10E+0x22c>)
 80053ea:	e00e      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P92\"";
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <checkregEoBRate4MK10E+0x230>)
 80053ee:	e00c      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P98\"";
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <checkregEoBRate4MK10E+0x234>)
 80053f2:	e00a      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P4A\"";
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <checkregEoBRate4MK10E+0x238>)
 80053f6:	e008      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3PAA\"";
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <checkregEoBRate4MK10E+0x23c>)
 80053fa:	e006      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3P0B\"";
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <checkregEoBRate4MK10E+0x240>)
 80053fe:	e004      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <checkregEoBRate4MK10E+0x244>)
 8005402:	e002      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 8005404:	4b0d      	ldr	r3, [pc, #52]	; (800543c <checkregEoBRate4MK10E+0x248>)
 8005406:	e000      	b.n	800540a <checkregEoBRate4MK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <checkregEoBRate4MK10E+0x248>)
            return 0;
            break;
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	0801ebe8 	.word	0x0801ebe8
 800541c:	0801ebe0 	.word	0x0801ebe0
 8005420:	0801ebf8 	.word	0x0801ebf8
 8005424:	0801ebf0 	.word	0x0801ebf0
 8005428:	0801ec08 	.word	0x0801ec08
 800542c:	0801ec00 	.word	0x0801ec00
 8005430:	0801ec10 	.word	0x0801ec10
 8005434:	0801ec18 	.word	0x0801ec18
 8005438:	0801edfc 	.word	0x0801edfc
 800543c:	0801edf4 	.word	0x0801edf4

08005440 <checkregEoBRate5MK10E>:

const char * checkregEoBRate5MK10E(int reg){
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  switch(reg){
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f646 222b 	movw	r2, #27179	; 0x6a2b
 800544e:	4293      	cmp	r3, r2
 8005450:	f300 8100 	bgt.w	8005654 <checkregEoBRate5MK10E+0x214>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f646 2203 	movw	r2, #27139	; 0x6a03
 800545a:	4293      	cmp	r3, r2
 800545c:	da2d      	bge.n	80054ba <checkregEoBRate5MK10E+0x7a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f646 122b 	movw	r2, #26923	; 0x692b
 8005464:	4293      	cmp	r3, r2
 8005466:	f300 80f5 	bgt.w	8005654 <checkregEoBRate5MK10E+0x214>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f646 1203 	movw	r2, #26883	; 0x6903
 8005470:	4293      	cmp	r3, r2
 8005472:	da7f      	bge.n	8005574 <checkregEoBRate5MK10E+0x134>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f646 0264 	movw	r2, #26724	; 0x6864
 800547a:	4293      	cmp	r3, r2
 800547c:	f000 80e6 	beq.w	800564c <checkregEoBRate5MK10E+0x20c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f646 0264 	movw	r2, #26724	; 0x6864
 8005486:	4293      	cmp	r3, r2
 8005488:	f300 80e4 	bgt.w	8005654 <checkregEoBRate5MK10E+0x214>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f646 0227 	movw	r2, #26663	; 0x6827
 8005492:	4293      	cmp	r3, r2
 8005494:	f000 80d0 	beq.w	8005638 <checkregEoBRate5MK10E+0x1f8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f646 0227 	movw	r2, #26663	; 0x6827
 800549e:	4293      	cmp	r3, r2
 80054a0:	f300 80d8 	bgt.w	8005654 <checkregEoBRate5MK10E+0x214>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2bff      	cmp	r3, #255	; 0xff
 80054a8:	f000 80d2 	beq.w	8005650 <checkregEoBRate5MK10E+0x210>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f646 0217 	movw	r2, #26647	; 0x6817
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f000 80be 	beq.w	8005634 <checkregEoBRate5MK10E+0x1f4>
 80054b8:	e0cc      	b.n	8005654 <checkregEoBRate5MK10E+0x214>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f5a3 43d4 	sub.w	r3, r3, #27136	; 0x6a00
 80054c0:	3b03      	subs	r3, #3
 80054c2:	2b28      	cmp	r3, #40	; 0x28
 80054c4:	f200 80c6 	bhi.w	8005654 <checkregEoBRate5MK10E+0x214>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <checkregEoBRate5MK10E+0x90>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005645 	.word	0x08005645
 80054d4:	08005655 	.word	0x08005655
 80054d8:	08005655 	.word	0x08005655
 80054dc:	08005655 	.word	0x08005655
 80054e0:	08005649 	.word	0x08005649
 80054e4:	08005655 	.word	0x08005655
 80054e8:	08005655 	.word	0x08005655
 80054ec:	08005655 	.word	0x08005655
 80054f0:	08005655 	.word	0x08005655
 80054f4:	08005655 	.word	0x08005655
 80054f8:	08005655 	.word	0x08005655
 80054fc:	08005655 	.word	0x08005655
 8005500:	08005655 	.word	0x08005655
 8005504:	08005655 	.word	0x08005655
 8005508:	08005655 	.word	0x08005655
 800550c:	08005655 	.word	0x08005655
 8005510:	0800562d 	.word	0x0800562d
 8005514:	08005655 	.word	0x08005655
 8005518:	08005655 	.word	0x08005655
 800551c:	08005655 	.word	0x08005655
 8005520:	08005635 	.word	0x08005635
 8005524:	08005655 	.word	0x08005655
 8005528:	08005655 	.word	0x08005655
 800552c:	08005655 	.word	0x08005655
 8005530:	0800563d 	.word	0x0800563d
 8005534:	08005655 	.word	0x08005655
 8005538:	08005655 	.word	0x08005655
 800553c:	08005655 	.word	0x08005655
 8005540:	08005655 	.word	0x08005655
 8005544:	08005655 	.word	0x08005655
 8005548:	08005655 	.word	0x08005655
 800554c:	08005655 	.word	0x08005655
 8005550:	08005631 	.word	0x08005631
 8005554:	08005655 	.word	0x08005655
 8005558:	08005655 	.word	0x08005655
 800555c:	08005655 	.word	0x08005655
 8005560:	08005639 	.word	0x08005639
 8005564:	08005655 	.word	0x08005655
 8005568:	08005655 	.word	0x08005655
 800556c:	08005655 	.word	0x08005655
 8005570:	08005641 	.word	0x08005641
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f5a3 43d2 	sub.w	r3, r3, #26880	; 0x6900
 800557a:	3b03      	subs	r3, #3
 800557c:	2b28      	cmp	r3, #40	; 0x28
 800557e:	d869      	bhi.n	8005654 <checkregEoBRate5MK10E+0x214>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <checkregEoBRate5MK10E+0x148>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	08005645 	.word	0x08005645
 800558c:	08005655 	.word	0x08005655
 8005590:	08005655 	.word	0x08005655
 8005594:	08005655 	.word	0x08005655
 8005598:	08005655 	.word	0x08005655
 800559c:	08005655 	.word	0x08005655
 80055a0:	08005655 	.word	0x08005655
 80055a4:	08005655 	.word	0x08005655
 80055a8:	08005655 	.word	0x08005655
 80055ac:	08005655 	.word	0x08005655
 80055b0:	08005655 	.word	0x08005655
 80055b4:	08005655 	.word	0x08005655
 80055b8:	08005655 	.word	0x08005655
 80055bc:	08005655 	.word	0x08005655
 80055c0:	08005655 	.word	0x08005655
 80055c4:	08005655 	.word	0x08005655
 80055c8:	0800562d 	.word	0x0800562d
 80055cc:	08005655 	.word	0x08005655
 80055d0:	08005655 	.word	0x08005655
 80055d4:	08005655 	.word	0x08005655
 80055d8:	08005635 	.word	0x08005635
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005655 	.word	0x08005655
 80055e4:	08005655 	.word	0x08005655
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	08005655 	.word	0x08005655
 80055f0:	08005655 	.word	0x08005655
 80055f4:	08005655 	.word	0x08005655
 80055f8:	08005655 	.word	0x08005655
 80055fc:	08005655 	.word	0x08005655
 8005600:	08005655 	.word	0x08005655
 8005604:	08005655 	.word	0x08005655
 8005608:	08005631 	.word	0x08005631
 800560c:	08005655 	.word	0x08005655
 8005610:	08005655 	.word	0x08005655
 8005614:	08005655 	.word	0x08005655
 8005618:	08005639 	.word	0x08005639
 800561c:	08005655 	.word	0x08005655
 8005620:	08005655 	.word	0x08005655
 8005624:	08005655 	.word	0x08005655
 8005628:	08005641 	.word	0x08005641
    case 26899: // 0x6913 export wh tot
    case 27155: // 0x6A13 export wh tot
            return "\"3P75\"";
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <checkregEoBRate5MK10E+0x224>)
 800562e:	e012      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26915: //0x6923 import wh tot
    case 27171: // 0x6A23 import wh tot
            return "\"3P81\"";
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <checkregEoBRate5MK10E+0x228>)
 8005632:	e010      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26903: // 0x6917 export varh tot
    case 26647: // 0x6817 export varh tot
    case 27159: // 0x6A17 export varh tot
            return "\"3P87\"";
 8005634:	4b0d      	ldr	r3, [pc, #52]	; (800566c <checkregEoBRate5MK10E+0x22c>)
 8005636:	e00e      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26919: //0x6927 import varh tot
    case 26663: // 0x6827 import varh tot
    case 27175: // 0x6A27 import varh tot
            return "\"3P93\"";
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <checkregEoBRate5MK10E+0x230>)
 800563a:	e00c      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26907: // 0x691B export VAh tot
    case 27163: // 0x6A1B export VAh tot
            return "\"3P99\"";
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <checkregEoBRate5MK10E+0x234>)
 800563e:	e00a      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26923: // 0x692B import VAh tot
    case 27179: // 0x6A2B import VAh tot
            return "\"3P5A\"";
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <checkregEoBRate5MK10E+0x238>)
 8005642:	e008      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26883: // 0x6903 abs wh tot
    case 27139: // 0x6A03 abs wh tot
            return "\"3PBA\"";
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <checkregEoBRate5MK10E+0x23c>)
 8005646:	e006      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 27143: // 0x6A07 abs varh tot
            return "\"3P1B\"";
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <checkregEoBRate5MK10E+0x240>)
 800564a:	e004      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 26724: // 0x6864 varh penalty
            return "\"3PAB\"";
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <checkregEoBRate5MK10E+0x244>)
 800564e:	e002      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    case 255:
            return "\"00FF\"";
 8005650:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <checkregEoBRate5MK10E+0x248>)
 8005652:	e000      	b.n	8005656 <checkregEoBRate5MK10E+0x216>

            break;
    default:
            return "\"00FF\"";
 8005654:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <checkregEoBRate5MK10E+0x248>)
            return 0;
            break;
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	0801ec28 	.word	0x0801ec28
 8005668:	0801ee04 	.word	0x0801ee04
 800566c:	0801ec38 	.word	0x0801ec38
 8005670:	0801ec30 	.word	0x0801ec30
 8005674:	0801ec48 	.word	0x0801ec48
 8005678:	0801ec40 	.word	0x0801ec40
 800567c:	0801ec50 	.word	0x0801ec50
 8005680:	0801ec58 	.word	0x0801ec58
 8005684:	0801edfc 	.word	0x0801edfc
 8005688:	0801edf4 	.word	0x0801edf4

0800568c <decodeEoBMK10E>:

void decodeEoBMK10E(){
 800568c:	b5b0      	push	{r4, r5, r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	int1=7;
 8005692:	4bba      	ldr	r3, [pc, #744]	; (800597c <decodeEoBMK10E+0x2f0>)
 8005694:	2207      	movs	r2, #7
 8005696:	601a      	str	r2, [r3, #0]
	datastrclearMK10E();
 8005698:	f7fd fea2 	bl	80033e0 <datastrclearMK10E>
    strcpy(datastrMK10E,"{\"mid\":");
 800569c:	4ab8      	ldr	r2, [pc, #736]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800569e:	4bb9      	ldr	r3, [pc, #740]	; (8005984 <decodeEoBMK10E+0x2f8>)
 80056a0:	cb03      	ldmia	r3!, {r0, r1}
 80056a2:	6010      	str	r0, [r2, #0]
 80056a4:	6051      	str	r1, [r2, #4]
    strcat(datastrMK10E, meterSNMK10E);
 80056a6:	49b8      	ldr	r1, [pc, #736]	; (8005988 <decodeEoBMK10E+0x2fc>)
 80056a8:	48b5      	ldr	r0, [pc, #724]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80056aa:	f016 feb9 	bl	801c420 <strcat>
    strcat(datastrMK10E, ",\"pid\":\"EoBMK10E\",");
 80056ae:	48b4      	ldr	r0, [pc, #720]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80056b0:	f7fa fd98 	bl	80001e4 <strlen>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4bb1      	ldr	r3, [pc, #708]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80056ba:	4413      	add	r3, r2
 80056bc:	4ab3      	ldr	r2, [pc, #716]	; (800598c <decodeEoBMK10E+0x300>)
 80056be:	461d      	mov	r5, r3
 80056c0:	4614      	mov	r4, r2
 80056c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c4:	6028      	str	r0, [r5, #0]
 80056c6:	6069      	str	r1, [r5, #4]
 80056c8:	60aa      	str	r2, [r5, #8]
 80056ca:	60eb      	str	r3, [r5, #12]
 80056cc:	8823      	ldrh	r3, [r4, #0]
 80056ce:	78a2      	ldrb	r2, [r4, #2]
 80056d0:	822b      	strh	r3, [r5, #16]
 80056d2:	4613      	mov	r3, r2
 80056d4:	74ab      	strb	r3, [r5, #18]
//    strcat(datastrMK10E, ",\"pid\":\"EoBMK10E\",\"readdate\":");
//  data2clearMK10E();
//  sprintf(data2MK10E,"%d,",timestamp_now);
//  strcat(datastrMK10E, data2MK10E);
  for(int i=0;i<int1;i++){
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	e2a2      	b.n	8005c22 <decodeEoBMK10E+0x596>
      int3=0;
 80056dc:	4bac      	ldr	r3, [pc, #688]	; (8005990 <decodeEoBMK10E+0x304>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
    if(i==int1-1){
 80056e2:	4ba6      	ldr	r3, [pc, #664]	; (800597c <decodeEoBMK10E+0x2f0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	f040 816a 	bne.w	80059c4 <decodeEoBMK10E+0x338>
    	strcat(datastrMK10E, checkregEoBRate1MK10E(eobreg[int1-1]));
 80056f0:	4ba2      	ldr	r3, [pc, #648]	; (800597c <decodeEoBMK10E+0x2f0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	4aa7      	ldr	r2, [pc, #668]	; (8005994 <decodeEoBMK10E+0x308>)
 80056f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff fa07 	bl	8004b10 <checkregEoBRate1MK10E>
 8005702:	4603      	mov	r3, r0
 8005704:	4619      	mov	r1, r3
 8005706:	489e      	ldr	r0, [pc, #632]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005708:	f016 fe8a 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 800570c:	489c      	ldr	r0, [pc, #624]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800570e:	f7fa fd69 	bl	80001e4 <strlen>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	4b9a      	ldr	r3, [pc, #616]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005718:	4413      	add	r3, r2
 800571a:	499f      	ldr	r1, [pc, #636]	; (8005998 <decodeEoBMK10E+0x30c>)
 800571c:	461a      	mov	r2, r3
 800571e:	460b      	mov	r3, r1
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob0[int1-1]);
 8005724:	4b95      	ldr	r3, [pc, #596]	; (800597c <decodeEoBMK10E+0x2f0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a9c      	ldr	r2, [pc, #624]	; (800599c <decodeEoBMK10E+0x310>)
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	499a      	ldr	r1, [pc, #616]	; (80059a0 <decodeEoBMK10E+0x314>)
 8005736:	489b      	ldr	r0, [pc, #620]	; (80059a4 <decodeEoBMK10E+0x318>)
 8005738:	f016 fe52 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 800573c:	4999      	ldr	r1, [pc, #612]	; (80059a4 <decodeEoBMK10E+0x318>)
 800573e:	4890      	ldr	r0, [pc, #576]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005740:	f016 fe6e 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005744:	488e      	ldr	r0, [pc, #568]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005746:	f7fa fd4d 	bl	80001e4 <strlen>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	4b8c      	ldr	r3, [pc, #560]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005750:	4413      	add	r3, r2
 8005752:	4995      	ldr	r1, [pc, #596]	; (80059a8 <decodeEoBMK10E+0x31c>)
 8005754:	461a      	mov	r2, r3
 8005756:	460b      	mov	r3, r1
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate2MK10E(eobreg[int1-1]));
 800575c:	4b87      	ldr	r3, [pc, #540]	; (800597c <decodeEoBMK10E+0x2f0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	4a8c      	ldr	r2, [pc, #560]	; (8005994 <decodeEoBMK10E+0x308>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff faf7 	bl	8004d5c <checkregEoBRate2MK10E>
 800576e:	4603      	mov	r3, r0
 8005770:	4619      	mov	r1, r3
 8005772:	4883      	ldr	r0, [pc, #524]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005774:	f016 fe54 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005778:	4881      	ldr	r0, [pc, #516]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800577a:	f7fa fd33 	bl	80001e4 <strlen>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	4b7f      	ldr	r3, [pc, #508]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005784:	4413      	add	r3, r2
 8005786:	4984      	ldr	r1, [pc, #528]	; (8005998 <decodeEoBMK10E+0x30c>)
 8005788:	461a      	mov	r2, r3
 800578a:	460b      	mov	r3, r1
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob1[int1-1]);
 8005790:	4b7a      	ldr	r3, [pc, #488]	; (800597c <decodeEoBMK10E+0x2f0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	4a85      	ldr	r2, [pc, #532]	; (80059ac <decodeEoBMK10E+0x320>)
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	497f      	ldr	r1, [pc, #508]	; (80059a0 <decodeEoBMK10E+0x314>)
 80057a2:	4880      	ldr	r0, [pc, #512]	; (80059a4 <decodeEoBMK10E+0x318>)
 80057a4:	f016 fe1c 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80057a8:	497e      	ldr	r1, [pc, #504]	; (80059a4 <decodeEoBMK10E+0x318>)
 80057aa:	4875      	ldr	r0, [pc, #468]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057ac:	f016 fe38 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 80057b0:	4873      	ldr	r0, [pc, #460]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057b2:	f7fa fd17 	bl	80001e4 <strlen>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b71      	ldr	r3, [pc, #452]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057bc:	4413      	add	r3, r2
 80057be:	497a      	ldr	r1, [pc, #488]	; (80059a8 <decodeEoBMK10E+0x31c>)
 80057c0:	461a      	mov	r2, r3
 80057c2:	460b      	mov	r3, r1
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate3MK10E(eobreg[int1-1]));
 80057c8:	4b6c      	ldr	r3, [pc, #432]	; (800597c <decodeEoBMK10E+0x2f0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	4a71      	ldr	r2, [pc, #452]	; (8005994 <decodeEoBMK10E+0x308>)
 80057d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fbe7 	bl	8004fa8 <checkregEoBRate3MK10E>
 80057da:	4603      	mov	r3, r0
 80057dc:	4619      	mov	r1, r3
 80057de:	4868      	ldr	r0, [pc, #416]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057e0:	f016 fe1e 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 80057e4:	4866      	ldr	r0, [pc, #408]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057e6:	f7fa fcfd 	bl	80001e4 <strlen>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b64      	ldr	r3, [pc, #400]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80057f0:	4413      	add	r3, r2
 80057f2:	4969      	ldr	r1, [pc, #420]	; (8005998 <decodeEoBMK10E+0x30c>)
 80057f4:	461a      	mov	r2, r3
 80057f6:	460b      	mov	r3, r1
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob2[int1-1]);
 80057fc:	4b5f      	ldr	r3, [pc, #380]	; (800597c <decodeEoBMK10E+0x2f0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3b01      	subs	r3, #1
 8005802:	4a6b      	ldr	r2, [pc, #428]	; (80059b0 <decodeEoBMK10E+0x324>)
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4413      	add	r3, r2
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	4964      	ldr	r1, [pc, #400]	; (80059a0 <decodeEoBMK10E+0x314>)
 800580e:	4865      	ldr	r0, [pc, #404]	; (80059a4 <decodeEoBMK10E+0x318>)
 8005810:	f016 fde6 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005814:	4963      	ldr	r1, [pc, #396]	; (80059a4 <decodeEoBMK10E+0x318>)
 8005816:	485a      	ldr	r0, [pc, #360]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005818:	f016 fe02 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 800581c:	4858      	ldr	r0, [pc, #352]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800581e:	f7fa fce1 	bl	80001e4 <strlen>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	4b56      	ldr	r3, [pc, #344]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005828:	4413      	add	r3, r2
 800582a:	495f      	ldr	r1, [pc, #380]	; (80059a8 <decodeEoBMK10E+0x31c>)
 800582c:	461a      	mov	r2, r3
 800582e:	460b      	mov	r3, r1
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate4MK10E(eobreg[int1-1]));
 8005834:	4b51      	ldr	r3, [pc, #324]	; (800597c <decodeEoBMK10E+0x2f0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3b01      	subs	r3, #1
 800583a:	4a56      	ldr	r2, [pc, #344]	; (8005994 <decodeEoBMK10E+0x308>)
 800583c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fcd7 	bl	80051f4 <checkregEoBRate4MK10E>
 8005846:	4603      	mov	r3, r0
 8005848:	4619      	mov	r1, r3
 800584a:	484d      	ldr	r0, [pc, #308]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800584c:	f016 fde8 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005850:	484b      	ldr	r0, [pc, #300]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005852:	f7fa fcc7 	bl	80001e4 <strlen>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	4b49      	ldr	r3, [pc, #292]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800585c:	4413      	add	r3, r2
 800585e:	494e      	ldr	r1, [pc, #312]	; (8005998 <decodeEoBMK10E+0x30c>)
 8005860:	461a      	mov	r2, r3
 8005862:	460b      	mov	r3, r1
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob3[int1-1]);
 8005868:	4b44      	ldr	r3, [pc, #272]	; (800597c <decodeEoBMK10E+0x2f0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3b01      	subs	r3, #1
 800586e:	4a51      	ldr	r2, [pc, #324]	; (80059b4 <decodeEoBMK10E+0x328>)
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	4949      	ldr	r1, [pc, #292]	; (80059a0 <decodeEoBMK10E+0x314>)
 800587a:	484a      	ldr	r0, [pc, #296]	; (80059a4 <decodeEoBMK10E+0x318>)
 800587c:	f016 fdb0 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005880:	4948      	ldr	r1, [pc, #288]	; (80059a4 <decodeEoBMK10E+0x318>)
 8005882:	483f      	ldr	r0, [pc, #252]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005884:	f016 fdcc 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005888:	483d      	ldr	r0, [pc, #244]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800588a:	f7fa fcab 	bl	80001e4 <strlen>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005894:	4413      	add	r3, r2
 8005896:	4944      	ldr	r1, [pc, #272]	; (80059a8 <decodeEoBMK10E+0x31c>)
 8005898:	461a      	mov	r2, r3
 800589a:	460b      	mov	r3, r1
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate5MK10E(eobreg[int1-1]));
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <decodeEoBMK10E+0x2f0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <decodeEoBMK10E+0x308>)
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fdc7 	bl	8005440 <checkregEoBRate5MK10E>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4619      	mov	r1, r3
 80058b6:	4832      	ldr	r0, [pc, #200]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80058b8:	f016 fdb2 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 80058bc:	4830      	ldr	r0, [pc, #192]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80058be:	f7fa fc91 	bl	80001e4 <strlen>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80058c8:	4413      	add	r3, r2
 80058ca:	4933      	ldr	r1, [pc, #204]	; (8005998 <decodeEoBMK10E+0x30c>)
 80058cc:	461a      	mov	r2, r3
 80058ce:	460b      	mov	r3, r1
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob4[int1-1]);
 80058d4:	4b29      	ldr	r3, [pc, #164]	; (800597c <decodeEoBMK10E+0x2f0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3b01      	subs	r3, #1
 80058da:	4a37      	ldr	r2, [pc, #220]	; (80059b8 <decodeEoBMK10E+0x32c>)
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	492e      	ldr	r1, [pc, #184]	; (80059a0 <decodeEoBMK10E+0x314>)
 80058e6:	482f      	ldr	r0, [pc, #188]	; (80059a4 <decodeEoBMK10E+0x318>)
 80058e8:	f016 fd7a 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 80058ec:	492d      	ldr	r1, [pc, #180]	; (80059a4 <decodeEoBMK10E+0x318>)
 80058ee:	4824      	ldr	r0, [pc, #144]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80058f0:	f016 fd96 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 80058f4:	4822      	ldr	r0, [pc, #136]	; (8005980 <decodeEoBMK10E+0x2f4>)
 80058f6:	f7fa fc75 	bl	80001e4 <strlen>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	4b20      	ldr	r3, [pc, #128]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005900:	4413      	add	r3, r2
 8005902:	4929      	ldr	r1, [pc, #164]	; (80059a8 <decodeEoBMK10E+0x31c>)
 8005904:	461a      	mov	r2, r3
 8005906:	460b      	mov	r3, r1
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBUnifiedMK10E(eobreg[int1-1]));
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <decodeEoBMK10E+0x2f0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	4a20      	ldr	r2, [pc, #128]	; (8005994 <decodeEoBMK10E+0x308>)
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe ffd3 	bl	80048c4 <checkregEoBUnifiedMK10E>
 800591e:	4603      	mov	r3, r0
 8005920:	4619      	mov	r1, r3
 8005922:	4817      	ldr	r0, [pc, #92]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005924:	f016 fd7c 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005928:	4815      	ldr	r0, [pc, #84]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800592a:	f7fa fc5b 	bl	80001e4 <strlen>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005934:	4413      	add	r3, r2
 8005936:	4918      	ldr	r1, [pc, #96]	; (8005998 <decodeEoBMK10E+0x30c>)
 8005938:	461a      	mov	r2, r3
 800593a:	460b      	mov	r3, r1
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob9[int1-1]);
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <decodeEoBMK10E+0x2f0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <decodeEoBMK10E+0x330>)
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	4913      	ldr	r1, [pc, #76]	; (80059a0 <decodeEoBMK10E+0x314>)
 8005952:	4814      	ldr	r0, [pc, #80]	; (80059a4 <decodeEoBMK10E+0x318>)
 8005954:	f016 fd44 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005958:	4912      	ldr	r1, [pc, #72]	; (80059a4 <decodeEoBMK10E+0x318>)
 800595a:	4809      	ldr	r0, [pc, #36]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800595c:	f016 fd60 	bl	801c420 <strcat>
    	strcat(datastrMK10E, "}");
 8005960:	4807      	ldr	r0, [pc, #28]	; (8005980 <decodeEoBMK10E+0x2f4>)
 8005962:	f7fa fc3f 	bl	80001e4 <strlen>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <decodeEoBMK10E+0x2f4>)
 800596c:	4413      	add	r3, r2
 800596e:	4914      	ldr	r1, [pc, #80]	; (80059c0 <decodeEoBMK10E+0x334>)
 8005970:	461a      	mov	r2, r3
 8005972:	460b      	mov	r3, r1
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	8013      	strh	r3, [r2, #0]
 8005978:	e150      	b.n	8005c1c <decodeEoBMK10E+0x590>
 800597a:	bf00      	nop
 800597c:	20002f8c 	.word	0x20002f8c
 8005980:	20002974 	.word	0x20002974
 8005984:	0801e9f4 	.word	0x0801e9f4
 8005988:	200000b0 	.word	0x200000b0
 800598c:	0801ee0c 	.word	0x0801ee0c
 8005990:	20003f60 	.word	0x20003f60
 8005994:	200035a0 	.word	0x200035a0
 8005998:	0801ea14 	.word	0x0801ea14
 800599c:	20003898 	.word	0x20003898
 80059a0:	0801ec84 	.word	0x0801ec84
 80059a4:	20003060 	.word	0x20003060
 80059a8:	0801ec8c 	.word	0x0801ec8c
 80059ac:	20003688 	.word	0x20003688
 80059b0:	20003f18 	.word	0x20003f18
 80059b4:	200028f8 	.word	0x200028f8
 80059b8:	200036c0 	.word	0x200036c0
 80059bc:	20003ea8 	.word	0x20003ea8
 80059c0:	0801ec90 	.word	0x0801ec90
    }
    else {
    	strcat(datastrMK10E, checkregEoBRate1MK10E(eobreg[i]));
 80059c4:	4a9d      	ldr	r2, [pc, #628]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff f89f 	bl	8004b10 <checkregEoBRate1MK10E>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4619      	mov	r1, r3
 80059d6:	489a      	ldr	r0, [pc, #616]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 80059d8:	f016 fd22 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 80059dc:	4898      	ldr	r0, [pc, #608]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 80059de:	f7fa fc01 	bl	80001e4 <strlen>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b96      	ldr	r3, [pc, #600]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 80059e8:	4413      	add	r3, r2
 80059ea:	4996      	ldr	r1, [pc, #600]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 80059ec:	461a      	mov	r2, r3
 80059ee:	460b      	mov	r3, r1
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob0[i]);
 80059f4:	4a94      	ldr	r2, [pc, #592]	; (8005c48 <decodeEoBMK10E+0x5bc>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	4992      	ldr	r1, [pc, #584]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005a02:	4893      	ldr	r0, [pc, #588]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005a04:	f016 fcec 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005a08:	4991      	ldr	r1, [pc, #580]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005a0a:	488d      	ldr	r0, [pc, #564]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a0c:	f016 fd08 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005a10:	488b      	ldr	r0, [pc, #556]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a12:	f7fa fbe7 	bl	80001e4 <strlen>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b89      	ldr	r3, [pc, #548]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a1c:	4413      	add	r3, r2
 8005a1e:	498d      	ldr	r1, [pc, #564]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005a20:	461a      	mov	r2, r3
 8005a22:	460b      	mov	r3, r1
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate2MK10E(eobreg[i]));
 8005a28:	4a84      	ldr	r2, [pc, #528]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff f993 	bl	8004d5c <checkregEoBRate2MK10E>
 8005a36:	4603      	mov	r3, r0
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4881      	ldr	r0, [pc, #516]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a3c:	f016 fcf0 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005a40:	487f      	ldr	r0, [pc, #508]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a42:	f7fa fbcf 	bl	80001e4 <strlen>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b7d      	ldr	r3, [pc, #500]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	497d      	ldr	r1, [pc, #500]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 8005a50:	461a      	mov	r2, r3
 8005a52:	460b      	mov	r3, r1
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob1[i]);
 8005a58:	4a7f      	ldr	r2, [pc, #508]	; (8005c58 <decodeEoBMK10E+0x5cc>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	4979      	ldr	r1, [pc, #484]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005a66:	487a      	ldr	r0, [pc, #488]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005a68:	f016 fcba 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005a6c:	4978      	ldr	r1, [pc, #480]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005a6e:	4874      	ldr	r0, [pc, #464]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a70:	f016 fcd6 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005a74:	4872      	ldr	r0, [pc, #456]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a76:	f7fa fbb5 	bl	80001e4 <strlen>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4b70      	ldr	r3, [pc, #448]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005a80:	4413      	add	r3, r2
 8005a82:	4974      	ldr	r1, [pc, #464]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005a84:	461a      	mov	r2, r3
 8005a86:	460b      	mov	r3, r1
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate3MK10E(eobreg[i]));
 8005a8c:	4a6b      	ldr	r2, [pc, #428]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fa87 	bl	8004fa8 <checkregEoBRate3MK10E>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4868      	ldr	r0, [pc, #416]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005aa0:	f016 fcbe 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005aa4:	4866      	ldr	r0, [pc, #408]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005aa6:	f7fa fb9d 	bl	80001e4 <strlen>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b64      	ldr	r3, [pc, #400]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4964      	ldr	r1, [pc, #400]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob2[i]);
 8005abc:	4a67      	ldr	r2, [pc, #412]	; (8005c5c <decodeEoBMK10E+0x5d0>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	4960      	ldr	r1, [pc, #384]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005aca:	4861      	ldr	r0, [pc, #388]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005acc:	f016 fc88 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005ad0:	495f      	ldr	r1, [pc, #380]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005ad2:	485b      	ldr	r0, [pc, #364]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005ad4:	f016 fca4 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005ad8:	4859      	ldr	r0, [pc, #356]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005ada:	f7fa fb83 	bl	80001e4 <strlen>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b57      	ldr	r3, [pc, #348]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	495b      	ldr	r1, [pc, #364]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005ae8:	461a      	mov	r2, r3
 8005aea:	460b      	mov	r3, r1
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate4MK10E(eobreg[i]));
 8005af0:	4a52      	ldr	r2, [pc, #328]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fb7b 	bl	80051f4 <checkregEoBRate4MK10E>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4619      	mov	r1, r3
 8005b02:	484f      	ldr	r0, [pc, #316]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b04:	f016 fc8c 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005b08:	484d      	ldr	r0, [pc, #308]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b0a:	f7fa fb6b 	bl	80001e4 <strlen>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b14:	4413      	add	r3, r2
 8005b16:	494b      	ldr	r1, [pc, #300]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 8005b18:	461a      	mov	r2, r3
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob3[i]);
 8005b20:	4a4f      	ldr	r2, [pc, #316]	; (8005c60 <decodeEoBMK10E+0x5d4>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	4947      	ldr	r1, [pc, #284]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005b2e:	4848      	ldr	r0, [pc, #288]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005b30:	f016 fc56 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005b34:	4946      	ldr	r1, [pc, #280]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005b36:	4842      	ldr	r0, [pc, #264]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b38:	f016 fc72 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005b3c:	4840      	ldr	r0, [pc, #256]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b3e:	f7fa fb51 	bl	80001e4 <strlen>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b48:	4413      	add	r3, r2
 8005b4a:	4942      	ldr	r1, [pc, #264]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	460b      	mov	r3, r1
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBRate5MK10E(eobreg[i]));
 8005b54:	4a39      	ldr	r2, [pc, #228]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fc6f 	bl	8005440 <checkregEoBRate5MK10E>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4619      	mov	r1, r3
 8005b66:	4836      	ldr	r0, [pc, #216]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b68:	f016 fc5a 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005b6c:	4834      	ldr	r0, [pc, #208]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b6e:	f7fa fb39 	bl	80001e4 <strlen>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	4932      	ldr	r1, [pc, #200]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	460b      	mov	r3, r1
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob4[i]);
 8005b84:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <decodeEoBMK10E+0x5d8>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	492e      	ldr	r1, [pc, #184]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005b92:	482f      	ldr	r0, [pc, #188]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005b94:	f016 fc24 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005b98:	492d      	ldr	r1, [pc, #180]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005b9a:	4829      	ldr	r0, [pc, #164]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005b9c:	f016 fc40 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005ba0:	4827      	ldr	r0, [pc, #156]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005ba2:	f7fa fb1f 	bl	80001e4 <strlen>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005bac:	4413      	add	r3, r2
 8005bae:	4929      	ldr	r1, [pc, #164]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	8013      	strh	r3, [r2, #0]
    	strcat(datastrMK10E, checkregEoBUnifiedMK10E(eobreg[i]));
 8005bb8:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <decodeEoBMK10E+0x5b0>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fe7f 	bl	80048c4 <checkregEoBUnifiedMK10E>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4619      	mov	r1, r3
 8005bca:	481d      	ldr	r0, [pc, #116]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005bcc:	f016 fc28 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ":");
 8005bd0:	481b      	ldr	r0, [pc, #108]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005bd2:	f7fa fb07 	bl	80001e4 <strlen>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	4919      	ldr	r1, [pc, #100]	; (8005c44 <decodeEoBMK10E+0x5b8>)
 8005be0:	461a      	mov	r2, r3
 8005be2:	460b      	mov	r3, r1
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	8013      	strh	r3, [r2, #0]
    	sprintf(data2MK10E,"%.5f",eob9[i]);
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <decodeEoBMK10E+0x5dc>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	4915      	ldr	r1, [pc, #84]	; (8005c4c <decodeEoBMK10E+0x5c0>)
 8005bf6:	4816      	ldr	r0, [pc, #88]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005bf8:	f016 fbf2 	bl	801c3e0 <siprintf>
    	strcat(datastrMK10E, data2MK10E);
 8005bfc:	4914      	ldr	r1, [pc, #80]	; (8005c50 <decodeEoBMK10E+0x5c4>)
 8005bfe:	4810      	ldr	r0, [pc, #64]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005c00:	f016 fc0e 	bl	801c420 <strcat>
    	strcat(datastrMK10E, ",");
 8005c04:	480e      	ldr	r0, [pc, #56]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005c06:	f7fa faed 	bl	80001e4 <strlen>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005c10:	4413      	add	r3, r2
 8005c12:	4910      	ldr	r1, [pc, #64]	; (8005c54 <decodeEoBMK10E+0x5c8>)
 8005c14:	461a      	mov	r2, r3
 8005c16:	460b      	mov	r3, r1
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	8013      	strh	r3, [r2, #0]
  for(int i=0;i<int1;i++){
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <decodeEoBMK10E+0x5e0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	f6ff ad57 	blt.w	80056dc <decodeEoBMK10E+0x50>
    }
  }
    SerialMonprintlnMK10E(datastrMK10E);
 8005c2e:	4804      	ldr	r0, [pc, #16]	; (8005c40 <decodeEoBMK10E+0x5b4>)
 8005c30:	f7fd fb2e 	bl	8003290 <SerialMonprintlnMK10E>
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c3c:	200035a0 	.word	0x200035a0
 8005c40:	20002974 	.word	0x20002974
 8005c44:	0801ea14 	.word	0x0801ea14
 8005c48:	20003898 	.word	0x20003898
 8005c4c:	0801ec84 	.word	0x0801ec84
 8005c50:	20003060 	.word	0x20003060
 8005c54:	0801ec8c 	.word	0x0801ec8c
 8005c58:	20003688 	.word	0x20003688
 8005c5c:	20003f18 	.word	0x20003f18
 8005c60:	200028f8 	.word	0x200028f8
 8005c64:	200036c0 	.word	0x200036c0
 8005c68:	20003ea8 	.word	0x20003ea8
 8005c6c:	20002f8c 	.word	0x20002f8c

08005c70 <txEoBCurrentMK10E>:
		  }
	  }
//	  return "0";
}

void txEoBCurrentMK10E(){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	dataallclearMK10E();
 8005c74:	f7fd fb5a 	bl	800332c <dataallclearMK10E>
	dataMK10E[0]=0x02;
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	701a      	strb	r2, [r3, #0]
	dataMK10E[1]=0x52;
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c80:	2252      	movs	r2, #82	; 0x52
 8005c82:	705a      	strb	r2, [r3, #1]
	dataMK10E[2]=0xF5;
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c86:	22f5      	movs	r2, #245	; 0xf5
 8005c88:	709a      	strb	r2, [r3, #2]
	dataMK10E[3]=0x40;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c8c:	2240      	movs	r2, #64	; 0x40
 8005c8e:	70da      	strb	r2, [r3, #3]
	dataMK10E[4]=0x79;
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c92:	2279      	movs	r2, #121	; 0x79
 8005c94:	711a      	strb	r2, [r3, #4]
	dataMK10E[5]=0x36;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c98:	2236      	movs	r2, #54	; 0x36
 8005c9a:	715a      	strb	r2, [r3, #5]
	dataMK10E[6]=0x03;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )dataMK10E, 7, 100);
 8005ca2:	2364      	movs	r3, #100	; 0x64
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <txEoBCurrentMK10E+0x44>)
 8005ca8:	4803      	ldr	r0, [pc, #12]	; (8005cb8 <txEoBCurrentMK10E+0x48>)
 8005caa:	f00e fb77 	bl	801439c <HAL_UART_Transmit>
}
 8005cae:	bf00      	nop
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200030fc 	.word	0x200030fc
 8005cb8:	20002770 	.word	0x20002770

08005cbc <rxEoBCurrentMK10E>:

void rxEoBCurrentMK10E(char* outstr,char* datain, int len){
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
	  memcpy(dataMK10E,datain,len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4818      	ldr	r0, [pc, #96]	; (8005d30 <rxEoBCurrentMK10E+0x74>)
 8005cd0:	f015 fdbe 	bl	801b850 <memcpy>
	data_lenMK10E=0;
 8005cd4:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <rxEoBCurrentMK10E+0x78>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
	data_lenMK10E=datasize(dataMK10E);
 8005cda:	4815      	ldr	r0, [pc, #84]	; (8005d30 <rxEoBCurrentMK10E+0x74>)
 8005cdc:	f000 f978 	bl	8005fd0 <datasize>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <rxEoBCurrentMK10E+0x78>)
 8005ce4:	6013      	str	r3, [r2, #0]
	if(data_lenMK10E>5){
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <rxEoBCurrentMK10E+0x78>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	dd1b      	ble.n	8005d26 <rxEoBCurrentMK10E+0x6a>
		getRawDataMK10E(4);
 8005cee:	2004      	movs	r0, #4
 8005cf0:	f7fd fd46 	bl	8003780 <getRawDataMK10E>
		saveEoBDataMK10E();
 8005cf4:	f000 f822 	bl	8005d3c <saveEoBDataMK10E>
		decodeEoBMK10E();
 8005cf8:	f7ff fcc8 	bl	800568c <decodeEoBMK10E>
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e00a      	b.n	8005d18 <rxEoBCurrentMK10E+0x5c>
			  *outstr++=datastrMK10E[i];
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	490b      	ldr	r1, [pc, #44]	; (8005d38 <rxEoBCurrentMK10E+0x7c>)
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<datasizestrMK10E(datastrMK10E);i++){
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	3301      	adds	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	4807      	ldr	r0, [pc, #28]	; (8005d38 <rxEoBCurrentMK10E+0x7c>)
 8005d1a:	f7fd faa1 	bl	8003260 <datasizestrMK10E>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4293      	cmp	r3, r2
 8005d24:	dbed      	blt.n	8005d02 <rxEoBCurrentMK10E+0x46>
		  }
	  }
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200030fc 	.word	0x200030fc
 8005d34:	20002970 	.word	0x20002970
 8005d38:	20002974 	.word	0x20002974

08005d3c <saveEoBDataMK10E>:
	  }
	  return "0";

}

void saveEoBDataMK10E(){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
//  removeheadcrctailMK10E(4);
//  printData(dataMK10E, data_lenMK10E);
  SerialMonprintlnMK10E(" ");
 8005d40:	489c      	ldr	r0, [pc, #624]	; (8005fb4 <saveEoBDataMK10E+0x278>)
 8005d42:	f7fd faa5 	bl	8003290 <SerialMonprintlnMK10E>
  // exp wh
  hex2Float(dataMK10E,0);
 8005d46:	2100      	movs	r1, #0
 8005d48:	489b      	ldr	r0, [pc, #620]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005d4a:	f000 fa65 	bl	8006218 <hex2Float>
  eob9[0]=(double)(myFloat.f);
 8005d4e:	4b9b      	ldr	r3, [pc, #620]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa fc08 	bl	8000568 <__aeabi_f2d>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4998      	ldr	r1, [pc, #608]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005d5e:	e9c1 2300 	strd	r2, r3, [r1]
  hex2Float(dataMK10E,4);
 8005d62:	2104      	movs	r1, #4
 8005d64:	4894      	ldr	r0, [pc, #592]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005d66:	f000 fa57 	bl	8006218 <hex2Float>
  eob0[0]=(double)(myFloat.f);
 8005d6a:	4b94      	ldr	r3, [pc, #592]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fa fbfa 	bl	8000568 <__aeabi_f2d>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4992      	ldr	r1, [pc, #584]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005d7a:	e9c1 2300 	strd	r2, r3, [r1]
  hex2Float(dataMK10E,8);
 8005d7e:	2108      	movs	r1, #8
 8005d80:	488d      	ldr	r0, [pc, #564]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005d82:	f000 fa49 	bl	8006218 <hex2Float>
  eob1[0]=(double)(myFloat.f);
 8005d86:	4b8d      	ldr	r3, [pc, #564]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fbec 	bl	8000568 <__aeabi_f2d>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	498c      	ldr	r1, [pc, #560]	; (8005fc8 <saveEoBDataMK10E+0x28c>)
 8005d96:	e9c1 2300 	strd	r2, r3, [r1]
  hex2Float(dataMK10E,12);
 8005d9a:	210c      	movs	r1, #12
 8005d9c:	4886      	ldr	r0, [pc, #536]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005d9e:	f000 fa3b 	bl	8006218 <hex2Float>
  eob2[0]=(double)(myFloat.f);
 8005da2:	4b86      	ldr	r3, [pc, #536]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fa fbde 	bl	8000568 <__aeabi_f2d>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4986      	ldr	r1, [pc, #536]	; (8005fcc <saveEoBDataMK10E+0x290>)
 8005db2:	e9c1 2300 	strd	r2, r3, [r1]
  // imp wh
  hex2Float(dataMK10E,16);
 8005db6:	2110      	movs	r1, #16
 8005db8:	487f      	ldr	r0, [pc, #508]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005dba:	f000 fa2d 	bl	8006218 <hex2Float>
  eob9[1]=(double)(myFloat.f);
 8005dbe:	4b7f      	ldr	r3, [pc, #508]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fbd0 	bl	8000568 <__aeabi_f2d>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	497c      	ldr	r1, [pc, #496]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005dce:	e9c1 2302 	strd	r2, r3, [r1, #8]
  hex2Float(dataMK10E,20);
 8005dd2:	2114      	movs	r1, #20
 8005dd4:	4878      	ldr	r0, [pc, #480]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005dd6:	f000 fa1f 	bl	8006218 <hex2Float>
  eob0[1]=(double)(myFloat.f);
 8005dda:	4b78      	ldr	r3, [pc, #480]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa fbc2 	bl	8000568 <__aeabi_f2d>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4976      	ldr	r1, [pc, #472]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005dea:	e9c1 2302 	strd	r2, r3, [r1, #8]
  hex2Float(dataMK10E,24);
 8005dee:	2118      	movs	r1, #24
 8005df0:	4871      	ldr	r0, [pc, #452]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005df2:	f000 fa11 	bl	8006218 <hex2Float>
  eob1[1]=(double)(myFloat.f);
 8005df6:	4b71      	ldr	r3, [pc, #452]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fbb4 	bl	8000568 <__aeabi_f2d>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4970      	ldr	r1, [pc, #448]	; (8005fc8 <saveEoBDataMK10E+0x28c>)
 8005e06:	e9c1 2302 	strd	r2, r3, [r1, #8]
  hex2Float(dataMK10E,28);
 8005e0a:	211c      	movs	r1, #28
 8005e0c:	486a      	ldr	r0, [pc, #424]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e0e:	f000 fa03 	bl	8006218 <hex2Float>
  eob2[1]=(double)(myFloat.f);
 8005e12:	4b6a      	ldr	r3, [pc, #424]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa fba6 	bl	8000568 <__aeabi_f2d>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	496a      	ldr	r1, [pc, #424]	; (8005fcc <saveEoBDataMK10E+0x290>)
 8005e22:	e9c1 2302 	strd	r2, r3, [r1, #8]
  // exp varh
  hex2Float(dataMK10E,32);
 8005e26:	2120      	movs	r1, #32
 8005e28:	4863      	ldr	r0, [pc, #396]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e2a:	f000 f9f5 	bl	8006218 <hex2Float>
  eob9[2]=(double)(myFloat.f);
 8005e2e:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa fb98 	bl	8000568 <__aeabi_f2d>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4960      	ldr	r1, [pc, #384]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005e3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  hex2Float(dataMK10E,36);
 8005e42:	2124      	movs	r1, #36	; 0x24
 8005e44:	485c      	ldr	r0, [pc, #368]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e46:	f000 f9e7 	bl	8006218 <hex2Float>
  eob0[2]=(double)(myFloat.f);
 8005e4a:	4b5c      	ldr	r3, [pc, #368]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fb8a 	bl	8000568 <__aeabi_f2d>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	495a      	ldr	r1, [pc, #360]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005e5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  // imp varh
  hex2Float(dataMK10E,40);
 8005e5e:	2128      	movs	r1, #40	; 0x28
 8005e60:	4855      	ldr	r0, [pc, #340]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e62:	f000 f9d9 	bl	8006218 <hex2Float>
  eob9[3]=(double)(myFloat.f);
 8005e66:	4b55      	ldr	r3, [pc, #340]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fa fb7c 	bl	8000568 <__aeabi_f2d>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4952      	ldr	r1, [pc, #328]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005e76:	e9c1 2306 	strd	r2, r3, [r1, #24]
  hex2Float(dataMK10E,44);
 8005e7a:	212c      	movs	r1, #44	; 0x2c
 8005e7c:	484e      	ldr	r0, [pc, #312]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e7e:	f000 f9cb 	bl	8006218 <hex2Float>
  eob0[3]=(double)(myFloat.f);
 8005e82:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa fb6e 	bl	8000568 <__aeabi_f2d>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	494c      	ldr	r1, [pc, #304]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005e92:	e9c1 2306 	strd	r2, r3, [r1, #24]
  // abs wh
  hex2Float(dataMK10E,48);
 8005e96:	2130      	movs	r1, #48	; 0x30
 8005e98:	4847      	ldr	r0, [pc, #284]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005e9a:	f000 f9bd 	bl	8006218 <hex2Float>
  eob9[4]=(double)(myFloat.f);
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fa fb60 	bl	8000568 <__aeabi_f2d>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4944      	ldr	r1, [pc, #272]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005eae:	e9c1 2308 	strd	r2, r3, [r1, #32]
  hex2Float(dataMK10E,52);
 8005eb2:	2134      	movs	r1, #52	; 0x34
 8005eb4:	4840      	ldr	r0, [pc, #256]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005eb6:	f000 f9af 	bl	8006218 <hex2Float>
  eob0[4]=(double)(myFloat.f);
 8005eba:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa fb52 	bl	8000568 <__aeabi_f2d>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	493e      	ldr	r1, [pc, #248]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005eca:	e9c1 2308 	strd	r2, r3, [r1, #32]
  hex2Float(dataMK10E,56);
 8005ece:	2138      	movs	r1, #56	; 0x38
 8005ed0:	4839      	ldr	r0, [pc, #228]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005ed2:	f000 f9a1 	bl	8006218 <hex2Float>
  eob1[4]=(double)(myFloat.f);
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fa fb44 	bl	8000568 <__aeabi_f2d>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4938      	ldr	r1, [pc, #224]	; (8005fc8 <saveEoBDataMK10E+0x28c>)
 8005ee6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  hex2Float(dataMK10E,60);
 8005eea:	213c      	movs	r1, #60	; 0x3c
 8005eec:	4832      	ldr	r0, [pc, #200]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005eee:	f000 f993 	bl	8006218 <hex2Float>
  eob2[4]=(double)(myFloat.f);
 8005ef2:	4b32      	ldr	r3, [pc, #200]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa fb36 	bl	8000568 <__aeabi_f2d>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4932      	ldr	r1, [pc, #200]	; (8005fcc <saveEoBDataMK10E+0x290>)
 8005f02:	e9c1 2308 	strd	r2, r3, [r1, #32]
  // abs varh
  hex2Float(dataMK10E,64);
 8005f06:	2140      	movs	r1, #64	; 0x40
 8005f08:	482b      	ldr	r0, [pc, #172]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f0a:	f000 f985 	bl	8006218 <hex2Float>
  eob9[5]=(double)(myFloat.f);
 8005f0e:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fa fb28 	bl	8000568 <__aeabi_f2d>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4928      	ldr	r1, [pc, #160]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005f1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  hex2Float(dataMK10E,68);
 8005f22:	2144      	movs	r1, #68	; 0x44
 8005f24:	4824      	ldr	r0, [pc, #144]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f26:	f000 f977 	bl	8006218 <hex2Float>
  eob0[5]=(double)(myFloat.f);
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa fb1a 	bl	8000568 <__aeabi_f2d>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4922      	ldr	r1, [pc, #136]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005f3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  hex2Float(dataMK10E,72);
 8005f3e:	2148      	movs	r1, #72	; 0x48
 8005f40:	481d      	ldr	r0, [pc, #116]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f42:	f000 f969 	bl	8006218 <hex2Float>
  eob1[5]=(double)(myFloat.f);
 8005f46:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa fb0c 	bl	8000568 <__aeabi_f2d>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	491c      	ldr	r1, [pc, #112]	; (8005fc8 <saveEoBDataMK10E+0x28c>)
 8005f56:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  hex2Float(dataMK10E,76);
 8005f5a:	214c      	movs	r1, #76	; 0x4c
 8005f5c:	4816      	ldr	r0, [pc, #88]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f5e:	f000 f95b 	bl	8006218 <hex2Float>
  eob2[5]=(double)(myFloat.f);
 8005f62:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa fafe 	bl	8000568 <__aeabi_f2d>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4916      	ldr	r1, [pc, #88]	; (8005fcc <saveEoBDataMK10E+0x290>)
 8005f72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  // varh penalty
  hex2Float(dataMK10E,80);
 8005f76:	2150      	movs	r1, #80	; 0x50
 8005f78:	480f      	ldr	r0, [pc, #60]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f7a:	f000 f94d 	bl	8006218 <hex2Float>
  eob9[6]=(double)(myFloat.f);
 8005f7e:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa faf0 	bl	8000568 <__aeabi_f2d>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	490c      	ldr	r1, [pc, #48]	; (8005fc0 <saveEoBDataMK10E+0x284>)
 8005f8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  hex2Float(dataMK10E,84);
 8005f92:	2154      	movs	r1, #84	; 0x54
 8005f94:	4808      	ldr	r0, [pc, #32]	; (8005fb8 <saveEoBDataMK10E+0x27c>)
 8005f96:	f000 f93f 	bl	8006218 <hex2Float>
  eob0[6]=(double)(myFloat.f);
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <saveEoBDataMK10E+0x280>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fa fae2 	bl	8000568 <__aeabi_f2d>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4906      	ldr	r1, [pc, #24]	; (8005fc4 <saveEoBDataMK10E+0x288>)
 8005faa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
//    Serial.print(" ");
//    Serial.print(eob1[i], 7);
//    Serial.print(" ");
//    Serial.println(eob2[i], 7);
//  }
}
 8005fae:	bf00      	nop
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	0801eebc 	.word	0x0801eebc
 8005fb8:	200030fc 	.word	0x200030fc
 8005fbc:	20003f64 	.word	0x20003f64
 8005fc0:	20003ea8 	.word	0x20003ea8
 8005fc4:	20003898 	.word	0x20003898
 8005fc8:	20003688 	.word	0x20003688
 8005fcc:	20003f18 	.word	0x20003f18

08005fd0 <datasize>:
//// Variable Meter Serial Number
uint8_t meterreq[] = {0x02,0x52,0xF0,0x10,0x42,0xEE,0x45,0x03};
uint8_t meterSN[] = {'0','0','0','0','0','0','0','0','0','0'};

int datasize(unsigned char buf[])
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	int i = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
	while(buf[i] != 0x03) i++;
 8005fdc:	e002      	b.n	8005fe4 <datasize+0x14>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d1f6      	bne.n	8005fde <datasize+0xe>
	return i+1;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <hex2Double>:
		datastr[i] = '\0';
	}
}

// Convert Hex 8 uint8_ts to Double
double hex2Double(uint8_t myhex[], int from){
 8006000:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006004:	b08b      	sub	sp, #44	; 0x2c
 8006006:	af00      	add	r7, sp, #0
 8006008:	6278      	str	r0, [r7, #36]	; 0x24
 800600a:	6239      	str	r1, [r7, #32]
//  double temp;
  ulf.ul = myhex[from];
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	4413      	add	r3, r2
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	497e      	ldr	r1, [pc, #504]	; (8006214 <hex2Double+0x214>)
 800601c:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul<<8;
 8006020:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <hex2Double+0x214>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f04f 0000 	mov.w	r0, #0
 800602a:	f04f 0100 	mov.w	r1, #0
 800602e:	0219      	lsls	r1, r3, #8
 8006030:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006034:	0210      	lsls	r0, r2, #8
 8006036:	4b77      	ldr	r3, [pc, #476]	; (8006214 <hex2Double+0x214>)
 8006038:	e9c3 0100 	strd	r0, r1, [r3]
  ulf.ul = ulf.ul | myhex[from+1];
 800603c:	4b75      	ldr	r3, [pc, #468]	; (8006214 <hex2Double+0x214>)
 800603e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	4413      	add	r3, r2
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	ea40 0402 	orr.w	r4, r0, r2
 8006056:	ea41 0503 	orr.w	r5, r1, r3
 800605a:	4b6e      	ldr	r3, [pc, #440]	; (8006214 <hex2Double+0x214>)
 800605c:	e9c3 4500 	strd	r4, r5, [r3]
  ulf.ul = ulf.ul<<8;
 8006060:	4b6c      	ldr	r3, [pc, #432]	; (8006214 <hex2Double+0x214>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f04f 0000 	mov.w	r0, #0
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	0219      	lsls	r1, r3, #8
 8006070:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006074:	0210      	lsls	r0, r2, #8
 8006076:	4b67      	ldr	r3, [pc, #412]	; (8006214 <hex2Double+0x214>)
 8006078:	e9c3 0100 	strd	r0, r1, [r3]
  ulf.ul = ulf.ul | myhex[from+2];
 800607c:	4b65      	ldr	r3, [pc, #404]	; (8006214 <hex2Double+0x214>)
 800607e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	1c9a      	adds	r2, r3, #2
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	4413      	add	r3, r2
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	ea40 0802 	orr.w	r8, r0, r2
 8006096:	ea41 0903 	orr.w	r9, r1, r3
 800609a:	4b5e      	ldr	r3, [pc, #376]	; (8006214 <hex2Double+0x214>)
 800609c:	e9c3 8900 	strd	r8, r9, [r3]
  ulf.ul = ulf.ul<<8;
 80060a0:	4b5c      	ldr	r3, [pc, #368]	; (8006214 <hex2Double+0x214>)
 80060a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	020b      	lsls	r3, r1, #8
 80060b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060b4:	0202      	lsls	r2, r0, #8
 80060b6:	4957      	ldr	r1, [pc, #348]	; (8006214 <hex2Double+0x214>)
 80060b8:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul | myhex[from+3];
 80060bc:	4b55      	ldr	r3, [pc, #340]	; (8006214 <hex2Double+0x214>)
 80060be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	3303      	adds	r3, #3
 80060c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c8:	4413      	add	r3, r2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	ea40 0402 	orr.w	r4, r0, r2
 80060d6:	61bc      	str	r4, [r7, #24]
 80060d8:	430b      	orrs	r3, r1
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	4b4d      	ldr	r3, [pc, #308]	; (8006214 <hex2Double+0x214>)
 80060de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060e2:	e9c3 1200 	strd	r1, r2, [r3]
  ulf.ul = ulf.ul<<8;
 80060e6:	4b4b      	ldr	r3, [pc, #300]	; (8006214 <hex2Double+0x214>)
 80060e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	020b      	lsls	r3, r1, #8
 80060f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060fa:	0202      	lsls	r2, r0, #8
 80060fc:	4945      	ldr	r1, [pc, #276]	; (8006214 <hex2Double+0x214>)
 80060fe:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul | myhex[from+4];
 8006102:	4b44      	ldr	r3, [pc, #272]	; (8006214 <hex2Double+0x214>)
 8006104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	3304      	adds	r3, #4
 800610c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	ea40 0402 	orr.w	r4, r0, r2
 800611c:	613c      	str	r4, [r7, #16]
 800611e:	430b      	orrs	r3, r1
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	4b3c      	ldr	r3, [pc, #240]	; (8006214 <hex2Double+0x214>)
 8006124:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006128:	e9c3 1200 	strd	r1, r2, [r3]
  ulf.ul = ulf.ul<<8;
 800612c:	4b39      	ldr	r3, [pc, #228]	; (8006214 <hex2Double+0x214>)
 800612e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	020b      	lsls	r3, r1, #8
 800613c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006140:	0202      	lsls	r2, r0, #8
 8006142:	4934      	ldr	r1, [pc, #208]	; (8006214 <hex2Double+0x214>)
 8006144:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul | myhex[from+5];
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <hex2Double+0x214>)
 800614a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	3305      	adds	r3, #5
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea40 0402 	orr.w	r4, r0, r2
 8006162:	60bc      	str	r4, [r7, #8]
 8006164:	430b      	orrs	r3, r1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <hex2Double+0x214>)
 800616a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800616e:	e9c3 1200 	strd	r1, r2, [r3]
  ulf.ul = ulf.ul<<8;
 8006172:	4b28      	ldr	r3, [pc, #160]	; (8006214 <hex2Double+0x214>)
 8006174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	020b      	lsls	r3, r1, #8
 8006182:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006186:	0202      	lsls	r2, r0, #8
 8006188:	4922      	ldr	r1, [pc, #136]	; (8006214 <hex2Double+0x214>)
 800618a:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul | myhex[from+6];
 800618e:	4b21      	ldr	r3, [pc, #132]	; (8006214 <hex2Double+0x214>)
 8006190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	3306      	adds	r3, #6
 8006198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	ea40 0402 	orr.w	r4, r0, r2
 80061a8:	603c      	str	r4, [r7, #0]
 80061aa:	430b      	orrs	r3, r1
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	4b19      	ldr	r3, [pc, #100]	; (8006214 <hex2Double+0x214>)
 80061b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061b4:	e9c3 1200 	strd	r1, r2, [r3]
  ulf.ul = ulf.ul<<8;
 80061b8:	4b16      	ldr	r3, [pc, #88]	; (8006214 <hex2Double+0x214>)
 80061ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	020b      	lsls	r3, r1, #8
 80061c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061cc:	0202      	lsls	r2, r0, #8
 80061ce:	4911      	ldr	r1, [pc, #68]	; (8006214 <hex2Double+0x214>)
 80061d0:	e9c1 2300 	strd	r2, r3, [r1]
  ulf.ul = ulf.ul | myhex[from+7];
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <hex2Double+0x214>)
 80061d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	3307      	adds	r3, #7
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	ea40 0a02 	orr.w	sl, r0, r2
 80061ee:	ea41 0b03 	orr.w	fp, r1, r3
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <hex2Double+0x214>)
 80061f4:	e9c3 ab00 	strd	sl, fp, [r3]
  return ulf.f;
 80061f8:	4b06      	ldr	r3, [pc, #24]	; (8006214 <hex2Double+0x214>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8006202:	eeb0 0a47 	vmov.f32	s0, s14
 8006206:	eef0 0a67 	vmov.f32	s1, s15
 800620a:	372c      	adds	r7, #44	; 0x2c
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006212:	4770      	bx	lr
 8006214:	200038d8 	.word	0x200038d8

08006218 <hex2Float>:

// Convert Hex 4 uint8_ts to Float
float hex2Float(uint8_t myhex[], int from){
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <hex2Float+0x88>)
 800622e:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <hex2Float+0x88>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <hex2Float+0x88>)
 8006238:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 800623a:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <hex2Float+0x88>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	3201      	adds	r2, #1
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	440a      	add	r2, r1
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <hex2Float+0x88>)
 800624c:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 800624e:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <hex2Float+0x88>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <hex2Float+0x88>)
 8006256:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <hex2Float+0x88>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	3202      	adds	r2, #2
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	440a      	add	r2, r1
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	4a0d      	ldr	r2, [pc, #52]	; (80062a0 <hex2Float+0x88>)
 800626a:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <hex2Float+0x88>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <hex2Float+0x88>)
 8006274:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <hex2Float+0x88>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	3203      	adds	r2, #3
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	440a      	add	r2, r1
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	4a06      	ldr	r2, [pc, #24]	; (80062a0 <hex2Float+0x88>)
 8006288:	6013      	str	r3, [r2, #0]
  return myFloat.f;
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <hex2Float+0x88>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	ee07 3a90 	vmov	s15, r3
}
 8006292:	eeb0 0a67 	vmov.f32	s0, s15
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20003f64 	.word	0x20003f64

080062a4 <hex2Long>:

long hex2Long(uint8_t myhex[], int from){
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <hex2Long+0x84>)
 80062ba:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 80062bc:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <hex2Long+0x84>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	4a19      	ldr	r2, [pc, #100]	; (8006328 <hex2Long+0x84>)
 80062c4:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 80062c6:	4b18      	ldr	r3, [pc, #96]	; (8006328 <hex2Long+0x84>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	3201      	adds	r2, #1
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	440a      	add	r2, r1
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	4a14      	ldr	r2, [pc, #80]	; (8006328 <hex2Long+0x84>)
 80062d8:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <hex2Long+0x84>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	4a11      	ldr	r2, [pc, #68]	; (8006328 <hex2Long+0x84>)
 80062e2:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <hex2Long+0x84>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	3202      	adds	r2, #2
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	440a      	add	r2, r1
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <hex2Long+0x84>)
 80062f6:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <hex2Long+0x84>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <hex2Long+0x84>)
 8006300:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 8006302:	4b09      	ldr	r3, [pc, #36]	; (8006328 <hex2Long+0x84>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	3203      	adds	r2, #3
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	440a      	add	r2, r1
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	4313      	orrs	r3, r2
 8006312:	4a05      	ldr	r2, [pc, #20]	; (8006328 <hex2Long+0x84>)
 8006314:	6013      	str	r3, [r2, #0]
  return myFloat.l;
 8006316:	4b04      	ldr	r3, [pc, #16]	; (8006328 <hex2Long+0x84>)
 8006318:	681b      	ldr	r3, [r3, #0]
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20003f64 	.word	0x20003f64

0800632c <hex2ULong>:

unsigned long hex2ULong(uint8_t myhex[], int from){
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
//  double temp;
  myFloat.l = myhex[from];
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <hex2ULong+0x84>)
 8006342:	601a      	str	r2, [r3, #0]
  myFloat.l = myFloat.l<<8;
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <hex2ULong+0x84>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <hex2ULong+0x84>)
 800634c:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+1];
 800634e:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <hex2ULong+0x84>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	3201      	adds	r2, #1
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	440a      	add	r2, r1
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	4313      	orrs	r3, r2
 800635e:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <hex2ULong+0x84>)
 8006360:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <hex2ULong+0x84>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <hex2ULong+0x84>)
 800636a:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+2];
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <hex2ULong+0x84>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	3202      	adds	r2, #2
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	440a      	add	r2, r1
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <hex2ULong+0x84>)
 800637e:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l<<8;
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <hex2ULong+0x84>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	021b      	lsls	r3, r3, #8
 8006386:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <hex2ULong+0x84>)
 8006388:	6013      	str	r3, [r2, #0]
  myFloat.l = myFloat.l | myhex[from+3];
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <hex2ULong+0x84>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	3203      	adds	r2, #3
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	440a      	add	r2, r1
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	4a05      	ldr	r2, [pc, #20]	; (80063b0 <hex2ULong+0x84>)
 800639c:	6013      	str	r3, [r2, #0]
  return myFloat.ul;
 800639e:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <hex2ULong+0x84>)
 80063a0:	681b      	ldr	r3, [r3, #0]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20003f64 	.word	0x20003f64

080063b4 <SerialMonprintln>:
  myInt.i = myInt.i<<8;
  myInt.i = myInt.i | myhex[from];
  return myInt.ui;
}

void SerialMonprintln(char * ptr){
 80063b4:	b5b0      	push	{r4, r5, r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	466b      	mov	r3, sp
 80063be:	461d      	mov	r5, r3
	uint32_t len=strlen(ptr);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7f9 ff0f 	bl	80001e4 <strlen>
 80063c6:	6178      	str	r0, [r7, #20]
	uint8_t ptr1[len+2];
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1c9c      	adds	r4, r3, #2
 80063cc:	4623      	mov	r3, r4
 80063ce:	3b01      	subs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80063e6:	00c2      	lsls	r2, r0, #3
 80063e8:	4620      	mov	r0, r4
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	00cb      	lsls	r3, r1, #3
 80063f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80063fc:	00c2      	lsls	r2, r0, #3
 80063fe:	1de3      	adds	r3, r4, #7
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	ebad 0d03 	sub.w	sp, sp, r3
 8006408:	466b      	mov	r3, sp
 800640a:	3300      	adds	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
	memcpy(ptr1, (uint8_t *)ptr, len);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4618      	mov	r0, r3
 8006416:	f015 fa1b 	bl	801b850 <memcpy>
	ptr1[len]= 0x0D;
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	220d      	movs	r2, #13
 8006422:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3301      	adds	r3, #1
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	210a      	movs	r1, #10
 800642c:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, ptr1, len+2, 3000);
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	b29b      	uxth	r3, r3
 8006434:	3302      	adds	r3, #2
 8006436:	b29a      	uxth	r2, r3
 8006438:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800643c:	4803      	ldr	r0, [pc, #12]	; (800644c <SerialMonprintln+0x98>)
 800643e:	f00d ffad 	bl	801439c <HAL_UART_Transmit>
 8006442:	46ad      	mov	sp, r5
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bdb0      	pop	{r4, r5, r7, pc}
 800644c:	20002fe0 	.word	0x20002fe0

08006450 <loginToMeterRTOS>:
        return 1;
    }
    return 0;
}

void loginToMeterRTOS(){
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&SerialMtr, (uint8_t * )loginreq, sizeof(loginreq), 100);
 8006454:	2364      	movs	r3, #100	; 0x64
 8006456:	2213      	movs	r2, #19
 8006458:	4904      	ldr	r1, [pc, #16]	; (800646c <loginToMeterRTOS+0x1c>)
 800645a:	4805      	ldr	r0, [pc, #20]	; (8006470 <loginToMeterRTOS+0x20>)
 800645c:	f00d ff9e 	bl	801439c <HAL_UART_Transmit>
	osDelay(1000);
 8006460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006464:	f012 fb88 	bl	8018b78 <osDelay>
}
 8006468:	bf00      	nop
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000000 	.word	0x20000000
 8006470:	20002770 	.word	0x20002770

08006474 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8006478:	2200      	movs	r2, #0
 800647a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800647e:	4802      	ldr	r0, [pc, #8]	; (8006488 <SELECT+0x14>)
 8006480:	f00a f9c4 	bl	801080c <HAL_GPIO_WritePin>
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	48000400 	.word	0x48000400

0800648c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8006490:	2201      	movs	r2, #1
 8006492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006496:	4802      	ldr	r0, [pc, #8]	; (80064a0 <DESELECT+0x14>)
 8006498:	f00a f9b8 	bl	801080c <HAL_GPIO_WritePin>
}
 800649c:	bf00      	nop
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	48000400 	.word	0x48000400

080064a4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80064ae:	bf00      	nop
 80064b0:	4808      	ldr	r0, [pc, #32]	; (80064d4 <SPI_TxByte+0x30>)
 80064b2:	f00d fbd1 	bl	8013c58 <HAL_SPI_GetState>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d1f9      	bne.n	80064b0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80064bc:	1df9      	adds	r1, r7, #7
 80064be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064c2:	2201      	movs	r2, #1
 80064c4:	4803      	ldr	r0, [pc, #12]	; (80064d4 <SPI_TxByte+0x30>)
 80064c6:	f00d f84e 	bl	8013566 <HAL_SPI_Transmit>
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20004294 	.word	0x20004294

080064d8 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80064de:	23ff      	movs	r3, #255	; 0xff
 80064e0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80064e6:	bf00      	nop
 80064e8:	4809      	ldr	r0, [pc, #36]	; (8006510 <SPI_RxByte+0x38>)
 80064ea:	f00d fbb5 	bl	8013c58 <HAL_SPI_GetState>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d1f9      	bne.n	80064e8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80064f4:	1dba      	adds	r2, r7, #6
 80064f6:	1df9      	adds	r1, r7, #7
 80064f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2301      	movs	r3, #1
 8006500:	4803      	ldr	r0, [pc, #12]	; (8006510 <SPI_RxByte+0x38>)
 8006502:	f00d f996 	bl	8013832 <HAL_SPI_TransmitReceive>
  
  return data;
 8006506:	79bb      	ldrb	r3, [r7, #6]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20004294 	.word	0x20004294

08006514 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800651c:	f7ff ffdc 	bl	80064d8 <SPI_RxByte>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	701a      	strb	r2, [r3, #0]
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <SD_ReadyWait+0x34>)
 8006538:	2232      	movs	r2, #50	; 0x32
 800653a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800653c:	f7ff ffcc 	bl	80064d8 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8006540:	f7ff ffca 	bl	80064d8 <SPI_RxByte>
 8006544:	4603      	mov	r3, r0
 8006546:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2bff      	cmp	r3, #255	; 0xff
 800654c:	d004      	beq.n	8006558 <SD_ReadyWait+0x28>
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <SD_ReadyWait+0x34>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f3      	bne.n	8006540 <SD_ReadyWait+0x10>
  
  return res;
 8006558:	79fb      	ldrb	r3, [r7, #7]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000b554 	.word	0x2000b554

08006568 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800656e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006572:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8006574:	f7ff ff8a 	bl	800648c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	e005      	b.n	800658a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800657e:	20ff      	movs	r0, #255	; 0xff
 8006580:	f7ff ff90 	bl	80064a4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	3301      	adds	r3, #1
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b09      	cmp	r3, #9
 800658e:	ddf6      	ble.n	800657e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8006590:	f7ff ff70 	bl	8006474 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80065a8:	2395      	movs	r3, #149	; 0x95
 80065aa:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e009      	b.n	80065c6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80065b2:	1d3a      	adds	r2, r7, #4
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff72 	bl	80064a4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	ddf2      	ble.n	80065b2 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80065cc:	e002      	b.n	80065d4 <SD_PowerOn+0x6c>
  {
    Count--;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80065d4:	f7ff ff80 	bl	80064d8 <SPI_RxByte>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d002      	beq.n	80065e4 <SD_PowerOn+0x7c>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f4      	bne.n	80065ce <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80065e4:	f7ff ff52 	bl	800648c <DESELECT>
  SPI_TxByte(0XFF);
 80065e8:	20ff      	movs	r0, #255	; 0xff
 80065ea:	f7ff ff5b 	bl	80064a4 <SPI_TxByte>
  
  PowerFlag = 1;
 80065ee:	4b03      	ldr	r3, [pc, #12]	; (80065fc <SD_PowerOn+0x94>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	200003ab 	.word	0x200003ab

08006600 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <SD_PowerOff+0x14>)
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
}
 800660a:	bf00      	nop
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	200003ab 	.word	0x200003ab

08006618 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <SD_CheckPower+0x14>)
 800661e:	781b      	ldrb	r3, [r3, #0]
}
 8006620:	4618      	mov	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	200003ab 	.word	0x200003ab

08006630 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800663a:	4b17      	ldr	r3, [pc, #92]	; (8006698 <SD_RxDataBlock+0x68>)
 800663c:	220a      	movs	r2, #10
 800663e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8006640:	f7ff ff4a 	bl	80064d8 <SPI_RxByte>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2bff      	cmp	r3, #255	; 0xff
 800664c:	d104      	bne.n	8006658 <SD_RxDataBlock+0x28>
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <SD_RxDataBlock+0x68>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f3      	bne.n	8006640 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2bfe      	cmp	r3, #254	; 0xfe
 800665c:	d001      	beq.n	8006662 <SD_RxDataBlock+0x32>
    return FALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	e016      	b.n	8006690 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff ff53 	bl	8006514 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff ff4d 	bl	8006514 <SPI_RxBytePtr>
  } while(btr -= 2);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3b02      	subs	r3, #2
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1ed      	bne.n	8006662 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8006686:	f7ff ff27 	bl	80064d8 <SPI_RxByte>
  SPI_RxByte();
 800668a:	f7ff ff25 	bl	80064d8 <SPI_RxByte>
  
  return TRUE;
 800668e:	2301      	movs	r3, #1
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	2000b555 	.word	0x2000b555

0800669c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80066ac:	f7ff ff40 	bl	8006530 <SD_ReadyWait>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2bff      	cmp	r3, #255	; 0xff
 80066b4:	d001      	beq.n	80066ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e040      	b.n	800673c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fef1 	bl	80064a4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	2bfd      	cmp	r3, #253	; 0xfd
 80066c6:	d031      	beq.n	800672c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fee5 	bl	80064a4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fede 	bl	80064a4 <SPI_TxByte>
    } while (--wc);
 80066e8:	7bbb      	ldrb	r3, [r7, #14]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	73bb      	strb	r3, [r7, #14]
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1eb      	bne.n	80066cc <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80066f4:	f7ff fef0 	bl	80064d8 <SPI_RxByte>
    SPI_RxByte();
 80066f8:	f7ff feee 	bl	80064d8 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80066fc:	e00b      	b.n	8006716 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80066fe:	f7ff feeb 	bl	80064d8 <SPI_RxByte>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	2b05      	cmp	r3, #5
 800670e:	d006      	beq.n	800671e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8006710:	7b7b      	ldrb	r3, [r7, #13]
 8006712:	3301      	adds	r3, #1
 8006714:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8006716:	7b7b      	ldrb	r3, [r7, #13]
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d9f0      	bls.n	80066fe <SD_TxDataBlock+0x62>
 800671c:	e000      	b.n	8006720 <SD_TxDataBlock+0x84>
        break;
 800671e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8006720:	bf00      	nop
 8006722:	f7ff fed9 	bl	80064d8 <SPI_RxByte>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0fa      	beq.n	8006722 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2b05      	cmp	r3, #5
 8006734:	d101      	bne.n	800673a <SD_TxDataBlock+0x9e>
    return TRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	6039      	str	r1, [r7, #0]
 800674e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8006750:	f7ff feee 	bl	8006530 <SD_ReadyWait>
 8006754:	4603      	mov	r3, r0
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d001      	beq.n	800675e <SD_SendCmd+0x1a>
    return 0xFF;
 800675a:	23ff      	movs	r3, #255	; 0xff
 800675c:	e040      	b.n	80067e0 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fe9f 	bl	80064a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	0e1b      	lsrs	r3, r3, #24
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fe99 	bl	80064a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	b2db      	uxtb	r3, r3
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fe93 	bl	80064a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	b2db      	uxtb	r3, r3
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fe8d 	bl	80064a4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fe88 	bl	80064a4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d101      	bne.n	80067a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800679e:	2395      	movs	r3, #149	; 0x95
 80067a0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b48      	cmp	r3, #72	; 0x48
 80067a6:	d101      	bne.n	80067ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80067a8:	2387      	movs	r3, #135	; 0x87
 80067aa:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fe78 	bl	80064a4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b4c      	cmp	r3, #76	; 0x4c
 80067b8:	d101      	bne.n	80067be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80067ba:	f7ff fe8d 	bl	80064d8 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80067be:	230a      	movs	r3, #10
 80067c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80067c2:	f7ff fe89 	bl	80064d8 <SPI_RxByte>
 80067c6:	4603      	mov	r3, r0
 80067c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80067ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da05      	bge.n	80067de <SD_SendCmd+0x9a>
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	73bb      	strb	r3, [r7, #14]
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f1      	bne.n	80067c2 <SD_SendCmd+0x7e>
  
  return res;
 80067de:	7b7b      	ldrb	r3, [r7, #13]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0d5      	b.n	80069a8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80067fc:	4b6c      	ldr	r3, [pc, #432]	; (80069b0 <SD_disk_initialize+0x1c8>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <SD_disk_initialize+0x2a>
    return Stat;        
 800680a:	4b69      	ldr	r3, [pc, #420]	; (80069b0 <SD_disk_initialize+0x1c8>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e0ca      	b.n	80069a8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8006812:	f7ff fea9 	bl	8006568 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8006816:	f7ff fe2d 	bl	8006474 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800681e:	2100      	movs	r1, #0
 8006820:	2040      	movs	r0, #64	; 0x40
 8006822:	f7ff ff8f 	bl	8006744 <SD_SendCmd>
 8006826:	4603      	mov	r3, r0
 8006828:	2b01      	cmp	r3, #1
 800682a:	f040 80a5 	bne.w	8006978 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800682e:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <SD_disk_initialize+0x1cc>)
 8006830:	2264      	movs	r2, #100	; 0x64
 8006832:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8006834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006838:	2048      	movs	r0, #72	; 0x48
 800683a:	f7ff ff83 	bl	8006744 <SD_SendCmd>
 800683e:	4603      	mov	r3, r0
 8006840:	2b01      	cmp	r3, #1
 8006842:	d158      	bne.n	80068f6 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
 8006848:	e00c      	b.n	8006864 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800684a:	7bfc      	ldrb	r4, [r7, #15]
 800684c:	f7ff fe44 	bl	80064d8 <SPI_RxByte>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	4423      	add	r3, r4
 800685a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	3301      	adds	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d9ef      	bls.n	800684a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800686a:	7abb      	ldrb	r3, [r7, #10]
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 8083 	bne.w	8006978 <SD_disk_initialize+0x190>
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	2baa      	cmp	r3, #170	; 0xaa
 8006876:	d17f      	bne.n	8006978 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8006878:	2100      	movs	r1, #0
 800687a:	2077      	movs	r0, #119	; 0x77
 800687c:	f7ff ff62 	bl	8006744 <SD_SendCmd>
 8006880:	4603      	mov	r3, r0
 8006882:	2b01      	cmp	r3, #1
 8006884:	d807      	bhi.n	8006896 <SD_disk_initialize+0xae>
 8006886:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800688a:	2069      	movs	r0, #105	; 0x69
 800688c:	f7ff ff5a 	bl	8006744 <SD_SendCmd>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8006896:	4b47      	ldr	r3, [pc, #284]	; (80069b4 <SD_disk_initialize+0x1cc>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1eb      	bne.n	8006878 <SD_disk_initialize+0x90>
 80068a0:	e000      	b.n	80068a4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80068a2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80068a4:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <SD_disk_initialize+0x1cc>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d064      	beq.n	8006978 <SD_disk_initialize+0x190>
 80068ae:	2100      	movs	r1, #0
 80068b0:	207a      	movs	r0, #122	; 0x7a
 80068b2:	f7ff ff47 	bl	8006744 <SD_SendCmd>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d15d      	bne.n	8006978 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e00c      	b.n	80068dc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80068c2:	7bfc      	ldrb	r4, [r7, #15]
 80068c4:	f7ff fe08 	bl	80064d8 <SPI_RxByte>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	f107 0310 	add.w	r3, r7, #16
 80068d0:	4423      	add	r3, r4
 80068d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	3301      	adds	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d9ef      	bls.n	80068c2 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80068e2:	7a3b      	ldrb	r3, [r7, #8]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <SD_disk_initialize+0x108>
 80068ec:	2306      	movs	r3, #6
 80068ee:	e000      	b.n	80068f2 <SD_disk_initialize+0x10a>
 80068f0:	2302      	movs	r3, #2
 80068f2:	73bb      	strb	r3, [r7, #14]
 80068f4:	e040      	b.n	8006978 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80068f6:	2100      	movs	r1, #0
 80068f8:	2077      	movs	r0, #119	; 0x77
 80068fa:	f7ff ff23 	bl	8006744 <SD_SendCmd>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b01      	cmp	r3, #1
 8006902:	d808      	bhi.n	8006916 <SD_disk_initialize+0x12e>
 8006904:	2100      	movs	r1, #0
 8006906:	2069      	movs	r0, #105	; 0x69
 8006908:	f7ff ff1c 	bl	8006744 <SD_SendCmd>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d801      	bhi.n	8006916 <SD_disk_initialize+0x12e>
 8006912:	2302      	movs	r3, #2
 8006914:	e000      	b.n	8006918 <SD_disk_initialize+0x130>
 8006916:	2301      	movs	r3, #1
 8006918:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d10e      	bne.n	800693e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8006920:	2100      	movs	r1, #0
 8006922:	2077      	movs	r0, #119	; 0x77
 8006924:	f7ff ff0e 	bl	8006744 <SD_SendCmd>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d80e      	bhi.n	800694c <SD_disk_initialize+0x164>
 800692e:	2100      	movs	r1, #0
 8006930:	2069      	movs	r0, #105	; 0x69
 8006932:	f7ff ff07 	bl	8006744 <SD_SendCmd>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800693c:	e00d      	b.n	800695a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800693e:	2100      	movs	r1, #0
 8006940:	2041      	movs	r0, #65	; 0x41
 8006942:	f7ff feff 	bl	8006744 <SD_SendCmd>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <SD_disk_initialize+0x1cc>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <SD_disk_initialize+0x132>
 8006956:	e000      	b.n	800695a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8006958:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <SD_disk_initialize+0x1cc>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <SD_disk_initialize+0x18c>
 8006964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006968:	2050      	movs	r0, #80	; 0x50
 800696a:	f7ff feeb 	bl	8006744 <SD_SendCmd>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8006978:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <SD_disk_initialize+0x1d0>)
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800697e:	f7ff fd85 	bl	800648c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8006982:	f7ff fda9 	bl	80064d8 <SPI_RxByte>
  
  if (type) 
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <SD_disk_initialize+0x1c8>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <SD_disk_initialize+0x1c8>)
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e001      	b.n	80069a2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800699e:	f7ff fe2f 	bl	8006600 <SD_PowerOff>
  }
  
  return Stat;
 80069a2:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <SD_disk_initialize+0x1c8>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b2db      	uxtb	r3, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	200000ba 	.word	0x200000ba
 80069b4:	2000b555 	.word	0x2000b555
 80069b8:	200003aa 	.word	0x200003aa

080069bc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80069cc:	2301      	movs	r3, #1
 80069ce:	e002      	b.n	80069d6 <SD_disk_status+0x1a>
  
  return Stat;
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <SD_disk_status+0x28>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b2db      	uxtb	r3, r3
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	200000ba 	.word	0x200000ba

080069e8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <SD_disk_read+0x1c>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <SD_disk_read+0x20>
    return RES_PARERR;
 8006a04:	2304      	movs	r3, #4
 8006a06:	e051      	b.n	8006aac <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8006a08:	4b2a      	ldr	r3, [pc, #168]	; (8006ab4 <SD_disk_read+0xcc>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e048      	b.n	8006aac <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8006a1a:	4b27      	ldr	r3, [pc, #156]	; (8006ab8 <SD_disk_read+0xd0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	025b      	lsls	r3, r3, #9
 8006a2a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8006a2c:	f7ff fd22 	bl	8006474 <SELECT>
  
  if (count == 1) 
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d111      	bne.n	8006a5a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	2051      	movs	r0, #81	; 0x51
 8006a3a:	f7ff fe83 	bl	8006744 <SD_SendCmd>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d129      	bne.n	8006a98 <SD_disk_read+0xb0>
 8006a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f7ff fdf1 	bl	8006630 <SD_RxDataBlock>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d021      	beq.n	8006a98 <SD_disk_read+0xb0>
      count = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	e01e      	b.n	8006a98 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	2052      	movs	r0, #82	; 0x52
 8006a5e:	f7ff fe71 	bl	8006744 <SD_SendCmd>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d117      	bne.n	8006a98 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8006a68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f7ff fddf 	bl	8006630 <SD_RxDataBlock>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a7e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ed      	bne.n	8006a68 <SD_disk_read+0x80>
 8006a8c:	e000      	b.n	8006a90 <SD_disk_read+0xa8>
          break;
 8006a8e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8006a90:	2100      	movs	r1, #0
 8006a92:	204c      	movs	r0, #76	; 0x4c
 8006a94:	f7ff fe56 	bl	8006744 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8006a98:	f7ff fcf8 	bl	800648c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8006a9c:	f7ff fd1c 	bl	80064d8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200000ba 	.word	0x200000ba
 8006ab8:	200003aa 	.word	0x200003aa

08006abc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <SD_disk_write+0x1c>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <SD_disk_write+0x20>
    return RES_PARERR;
 8006ad8:	2304      	movs	r3, #4
 8006ada:	e06b      	b.n	8006bb4 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8006adc:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <SD_disk_write+0x100>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <SD_disk_write+0x32>
    return RES_NOTRDY;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e062      	b.n	8006bb4 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8006aee:	4b33      	ldr	r3, [pc, #204]	; (8006bbc <SD_disk_write+0x100>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <SD_disk_write+0x44>
    return RES_WRPRT;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e059      	b.n	8006bb4 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8006b00:	4b2f      	ldr	r3, [pc, #188]	; (8006bc0 <SD_disk_write+0x104>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	025b      	lsls	r3, r3, #9
 8006b10:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8006b12:	f7ff fcaf 	bl	8006474 <SELECT>
  
  if (count == 1) 
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d110      	bne.n	8006b3e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	2058      	movs	r0, #88	; 0x58
 8006b20:	f7ff fe10 	bl	8006744 <SD_SendCmd>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d13a      	bne.n	8006ba0 <SD_disk_write+0xe4>
 8006b2a:	21fe      	movs	r1, #254	; 0xfe
 8006b2c:	68b8      	ldr	r0, [r7, #8]
 8006b2e:	f7ff fdb5 	bl	800669c <SD_TxDataBlock>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d033      	beq.n	8006ba0 <SD_disk_write+0xe4>
      count = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	e030      	b.n	8006ba0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <SD_disk_write+0x104>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2077      	movs	r0, #119	; 0x77
 8006b4e:	f7ff fdf9 	bl	8006744 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	2057      	movs	r0, #87	; 0x57
 8006b56:	f7ff fdf5 	bl	8006744 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	2059      	movs	r0, #89	; 0x59
 8006b5e:	f7ff fdf1 	bl	8006744 <SD_SendCmd>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11b      	bne.n	8006ba0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8006b68:	21fc      	movs	r1, #252	; 0xfc
 8006b6a:	68b8      	ldr	r0, [r7, #8]
 8006b6c:	f7ff fd96 	bl	800669c <SD_TxDataBlock>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b7c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ee      	bne.n	8006b68 <SD_disk_write+0xac>
 8006b8a:	e000      	b.n	8006b8e <SD_disk_write+0xd2>
          break;
 8006b8c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8006b8e:	21fd      	movs	r1, #253	; 0xfd
 8006b90:	2000      	movs	r0, #0
 8006b92:	f7ff fd83 	bl	800669c <SD_TxDataBlock>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <SD_disk_write+0xe4>
      {        
        count = 1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8006ba0:	f7ff fc74 	bl	800648c <DESELECT>
  SPI_RxByte();
 8006ba4:	f7ff fc98 	bl	80064d8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	200000ba 	.word	0x200000ba
 8006bc0:	200003aa 	.word	0x200003aa

08006bc4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b08b      	sub	sp, #44	; 0x2c
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	603a      	str	r2, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8006bde:	2304      	movs	r3, #4
 8006be0:	e11b      	b.n	8006e1a <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8006be8:	79bb      	ldrb	r3, [r7, #6]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d129      	bne.n	8006c42 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d017      	beq.n	8006c26 <SD_disk_ioctl+0x62>
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	dc1f      	bgt.n	8006c3a <SD_disk_ioctl+0x76>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <SD_disk_ioctl+0x40>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d00b      	beq.n	8006c1a <SD_disk_ioctl+0x56>
 8006c02:	e01a      	b.n	8006c3a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8006c04:	f7ff fd08 	bl	8006618 <SD_CheckPower>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8006c0e:	f7ff fcf7 	bl	8006600 <SD_PowerOff>
      res = RES_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006c18:	e0fd      	b.n	8006e16 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8006c1a:	f7ff fca5 	bl	8006568 <SD_PowerOn>
      res = RES_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006c24:	e0f7      	b.n	8006e16 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	1c5c      	adds	r4, r3, #1
 8006c2a:	f7ff fcf5 	bl	8006618 <SD_CheckPower>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006c38:	e0ed      	b.n	8006e16 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c40:	e0e9      	b.n	8006e16 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8006c42:	4b78      	ldr	r3, [pc, #480]	; (8006e24 <SD_disk_ioctl+0x260>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e0e2      	b.n	8006e1a <SD_disk_ioctl+0x256>
    
    SELECT();
 8006c54:	f7ff fc0e 	bl	8006474 <SELECT>
    
    switch (ctrl) 
 8006c58:	79bb      	ldrb	r3, [r7, #6]
 8006c5a:	2b0d      	cmp	r3, #13
 8006c5c:	f200 80cc 	bhi.w	8006df8 <SD_disk_ioctl+0x234>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <SD_disk_ioctl+0xa4>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006d63 	.word	0x08006d63
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006d53 	.word	0x08006d53
 8006c74:	08006df9 	.word	0x08006df9
 8006c78:	08006df9 	.word	0x08006df9
 8006c7c:	08006df9 	.word	0x08006df9
 8006c80:	08006df9 	.word	0x08006df9
 8006c84:	08006df9 	.word	0x08006df9
 8006c88:	08006df9 	.word	0x08006df9
 8006c8c:	08006df9 	.word	0x08006df9
 8006c90:	08006df9 	.word	0x08006df9
 8006c94:	08006d75 	.word	0x08006d75
 8006c98:	08006d99 	.word	0x08006d99
 8006c9c:	08006dbd 	.word	0x08006dbd
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	2049      	movs	r0, #73	; 0x49
 8006ca4:	f7ff fd4e 	bl	8006744 <SD_SendCmd>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 80a8 	bne.w	8006e00 <SD_disk_ioctl+0x23c>
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	2110      	movs	r1, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fcba 	bl	8006630 <SD_RxDataBlock>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 809e 	beq.w	8006e00 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8006cc4:	7b3b      	ldrb	r3, [r7, #12]
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d10e      	bne.n	8006cec <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006cce:	7d7b      	ldrb	r3, [r7, #21]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	7d3b      	ldrb	r3, [r7, #20]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	4413      	add	r3, r2
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3301      	adds	r3, #1
 8006ce0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8006ce2:	8bfb      	ldrh	r3, [r7, #30]
 8006ce4:	029a      	lsls	r2, r3, #10
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e02e      	b.n	8006d4a <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006cec:	7c7b      	ldrb	r3, [r7, #17]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	7dbb      	ldrb	r3, [r7, #22]
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	7d7b      	ldrb	r3, [r7, #21]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 0306 	and.w	r3, r3, #6
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006d14:	7d3b      	ldrb	r3, [r7, #20]
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	7cfb      	ldrb	r3, [r7, #19]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	7cbb      	ldrb	r3, [r7, #18]
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3301      	adds	r3, #1
 8006d3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8006d3c:	8bfa      	ldrh	r2, [r7, #30]
 8006d3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d42:	3b09      	subs	r3, #9
 8006d44:	409a      	lsls	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8006d50:	e056      	b.n	8006e00 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d58:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006d60:	e055      	b.n	8006e0e <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8006d62:	f7ff fbe5 	bl	8006530 <SD_ReadyWait>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2bff      	cmp	r3, #255	; 0xff
 8006d6a:	d14b      	bne.n	8006e04 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006d72:	e047      	b.n	8006e04 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006d74:	2100      	movs	r1, #0
 8006d76:	2049      	movs	r0, #73	; 0x49
 8006d78:	f7ff fce4 	bl	8006744 <SD_SendCmd>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d142      	bne.n	8006e08 <SD_disk_ioctl+0x244>
 8006d82:	2110      	movs	r1, #16
 8006d84:	6a38      	ldr	r0, [r7, #32]
 8006d86:	f7ff fc53 	bl	8006630 <SD_RxDataBlock>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d03b      	beq.n	8006e08 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006d96:	e037      	b.n	8006e08 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8006d98:	2100      	movs	r1, #0
 8006d9a:	204a      	movs	r0, #74	; 0x4a
 8006d9c:	f7ff fcd2 	bl	8006744 <SD_SendCmd>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d132      	bne.n	8006e0c <SD_disk_ioctl+0x248>
 8006da6:	2110      	movs	r1, #16
 8006da8:	6a38      	ldr	r0, [r7, #32]
 8006daa:	f7ff fc41 	bl	8006630 <SD_RxDataBlock>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d02b      	beq.n	8006e0c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006dba:	e027      	b.n	8006e0c <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	207a      	movs	r0, #122	; 0x7a
 8006dc0:	f7ff fcc0 	bl	8006744 <SD_SendCmd>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d116      	bne.n	8006df8 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dd0:	e00b      	b.n	8006dea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8006dd2:	6a3c      	ldr	r4, [r7, #32]
 8006dd4:	1c63      	adds	r3, r4, #1
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	f7ff fb7e 	bl	80064d8 <SPI_RxByte>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8006de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006de4:	3301      	adds	r3, #1
 8006de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d9ef      	bls.n	8006dd2 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dfe:	e006      	b.n	8006e0e <SD_disk_ioctl+0x24a>
      break;
 8006e00:	bf00      	nop
 8006e02:	e004      	b.n	8006e0e <SD_disk_ioctl+0x24a>
      break;
 8006e04:	bf00      	nop
 8006e06:	e002      	b.n	8006e0e <SD_disk_ioctl+0x24a>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e000      	b.n	8006e0e <SD_disk_ioctl+0x24a>
      break;
 8006e0c:	bf00      	nop
    }
    
    DESELECT();
 8006e0e:	f7ff fb3d 	bl	800648c <DESELECT>
    SPI_RxByte();
 8006e12:	f7ff fb61 	bl	80064d8 <SPI_RxByte>
  }
  
  return res;
 8006e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	372c      	adds	r7, #44	; 0x2c
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd90      	pop	{r4, r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200000ba 	.word	0x200000ba

08006e28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4a06      	ldr	r2, [pc, #24]	; (8006e58 <vApplicationGetIdleTaskMemory+0x30>)
 8006e3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	200003ac 	.word	0x200003ac
 8006e58:	20000400 	.word	0x20000400

08006e5c <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	461a      	mov	r2, r3
 8006e68:	460b      	mov	r3, r1
 8006e6a:	72fb      	strb	r3, [r7, #11]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685c      	ldr	r4, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6898      	ldr	r0, [r3, #8]
 8006e78:	893b      	ldrh	r3, [r7, #8]
 8006e7a:	7af9      	ldrb	r1, [r7, #11]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	47a0      	blx	r4
 8006e80:	6178      	str	r0, [r7, #20]
  return ret;
 8006e82:	697b      	ldr	r3, [r7, #20]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd90      	pop	{r4, r7, pc}

08006e8c <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	461a      	mov	r2, r3
 8006e98:	460b      	mov	r3, r1
 8006e9a:	72fb      	strb	r3, [r7, #11]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681c      	ldr	r4, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6898      	ldr	r0, [r3, #8]
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	7af9      	ldrb	r1, [r7, #11]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	47a0      	blx	r4
 8006eb0:	6178      	str	r0, [r7, #20]
  return ret;
 8006eb2:	697b      	ldr	r3, [r7, #20]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd90      	pop	{r4, r7, pc}

08006ebc <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006ee8 <lsm6dsl_from_fs2g_to_mg+0x2c>
 8006ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	3d79db23 	.word	0x3d79db23

08006eec <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006f18 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8006f06:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	428c0000 	.word	0x428c0000

08006f1c <lsm6dsl_from_lsb_to_celsius>:

float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f32:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006f50 <lsm6dsl_from_lsb_to_celsius+0x34>
 8006f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f3a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006f42:	eeb0 0a67 	vmov.f32	s0, s15
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	43800000 	.word	0x43800000

08006f54 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006f60:	f107 0208 	add.w	r2, r7, #8
 8006f64:	2301      	movs	r3, #1
 8006f66:	2110      	movs	r1, #16
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff77 	bl	8006e5c <lsm6dsl_read_reg>
 8006f6e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10f      	bne.n	8006f96 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	7a3b      	ldrb	r3, [r7, #8]
 8006f80:	f362 0383 	bfi	r3, r2, #2, #2
 8006f84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006f86:	f107 0208 	add.w	r2, r7, #8
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	2110      	movs	r1, #16
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ff7c 	bl	8006e8c <lsm6dsl_write_reg>
 8006f94:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006fac:	f107 0208 	add.w	r2, r7, #8
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	2110      	movs	r1, #16
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff51 	bl	8006e5c <lsm6dsl_read_reg>
 8006fba:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	7a3b      	ldrb	r3, [r7, #8]
 8006fcc:	f362 1307 	bfi	r3, r2, #4, #4
 8006fd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006fd2:	f107 0208 	add.w	r2, r7, #8
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	2110      	movs	r1, #16
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ff56 	bl	8006e8c <lsm6dsl_write_reg>
 8006fe0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8006ff8:	f107 0208 	add.w	r2, r7, #8
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	2111      	movs	r1, #17
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff2b 	bl	8006e5c <lsm6dsl_read_reg>
 8007006:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10f      	bne.n	800702e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	b2da      	uxtb	r2, r3
 8007016:	7a3b      	ldrb	r3, [r7, #8]
 8007018:	f362 0343 	bfi	r3, r2, #1, #3
 800701c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800701e:	f107 0208 	add.w	r2, r7, #8
 8007022:	2301      	movs	r3, #1
 8007024:	2111      	movs	r1, #17
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ff30 	bl	8006e8c <lsm6dsl_write_reg>
 800702c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800702e:	68fb      	ldr	r3, [r7, #12]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	2301      	movs	r3, #1
 800704a:	2111      	movs	r1, #17
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff ff05 	bl	8006e5c <lsm6dsl_read_reg>
 8007052:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10f      	bne.n	800707a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	b2da      	uxtb	r2, r3
 8007062:	7a3b      	ldrb	r3, [r7, #8]
 8007064:	f362 1307 	bfi	r3, r2, #4, #4
 8007068:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800706a:	f107 0208 	add.w	r2, r7, #8
 800706e:	2301      	movs	r3, #1
 8007070:	2111      	movs	r1, #17
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff ff0a 	bl	8006e8c <lsm6dsl_write_reg>
 8007078:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800707a:	68fb      	ldr	r3, [r7, #12]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8007090:	f107 0208 	add.w	r2, r7, #8
 8007094:	2301      	movs	r3, #1
 8007096:	2112      	movs	r1, #18
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fedf 	bl	8006e5c <lsm6dsl_read_reg>
 800709e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	7a3b      	ldrb	r3, [r7, #8]
 80070b0:	f362 1386 	bfi	r3, r2, #6, #1
 80070b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80070b6:	f107 0208 	add.w	r2, r7, #8
 80070ba:	2301      	movs	r3, #1
 80070bc:	2112      	movs	r1, #18
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fee4 	bl	8006e8c <lsm6dsl_write_reg>
 80070c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 80070da:	2301      	movs	r3, #1
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	211e      	movs	r1, #30
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff febb 	bl	8006e5c <lsm6dsl_read_reg>
 80070e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80070e8:	68fb      	ldr	r3, [r7, #12]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <lsm6dsl_timestamp_res_set>:
  * @param  val    Change the values of timer_hr in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_timestamp_res_set(stmdev_ctx_t *ctx, lsm6dsl_timer_hr_t val)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 80070fe:	f107 0208 	add.w	r2, r7, #8
 8007102:	2301      	movs	r3, #1
 8007104:	215c      	movs	r1, #92	; 0x5c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fea8 	bl	8006e5c <lsm6dsl_read_reg>
 800710c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10f      	bne.n	8007134 <lsm6dsl_timestamp_res_set+0x42>
    wake_up_dur.timer_hr = (uint8_t) val;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	7a3b      	ldrb	r3, [r7, #8]
 800711e:	f362 1304 	bfi	r3, r2, #4, #1
 8007122:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8007124:	f107 0208 	add.w	r2, r7, #8
 8007128:	2301      	movs	r3, #1
 800712a:	215c      	movs	r1, #92	; 0x5c
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fead 	bl	8006e8c <lsm6dsl_write_reg>
 8007132:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 8007134:	68fb      	ldr	r3, [r7, #12]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <lsm6dsl_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
 8007148:	2302      	movs	r3, #2
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	2120      	movs	r1, #32
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fe84 	bl	8006e5c <lsm6dsl_read_reg>
 8007154:	60f8      	str	r0, [r7, #12]
  return ret;
 8007156:	68fb      	ldr	r3, [r7, #12]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800716a:	2306      	movs	r3, #6
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	2122      	movs	r1, #34	; 0x22
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff fe73 	bl	8006e5c <lsm6dsl_read_reg>
 8007176:	60f8      	str	r0, [r7, #12]
  return ret;
 8007178:	68fb      	ldr	r3, [r7, #12]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800718c:	2306      	movs	r3, #6
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	2128      	movs	r1, #40	; 0x28
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fe62 	bl	8006e5c <lsm6dsl_read_reg>
 8007198:	60f8      	str	r0, [r7, #12]
  return ret;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80071ae:	2301      	movs	r3, #1
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	210f      	movs	r1, #15
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fe51 	bl	8006e5c <lsm6dsl_read_reg>
 80071ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80071bc:	68fb      	ldr	r3, [r7, #12]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	2301      	movs	r3, #1
 80071d8:	2112      	movs	r1, #18
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff fe3e 	bl	8006e5c <lsm6dsl_read_reg>
 80071e0:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10f      	bne.n	8007208 <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	7a3b      	ldrb	r3, [r7, #8]
 80071f2:	f362 0300 	bfi	r3, r2, #0, #1
 80071f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80071f8:	f107 0208 	add.w	r2, r7, #8
 80071fc:	2301      	movs	r3, #1
 80071fe:	2112      	movs	r1, #18
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fe43 	bl	8006e8c <lsm6dsl_write_reg>
 8007206:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800721c:	f107 0208 	add.w	r2, r7, #8
 8007220:	2301      	movs	r3, #1
 8007222:	2112      	movs	r1, #18
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff fe19 	bl	8006e5c <lsm6dsl_read_reg>
 800722a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800722c:	7a3b      	ldrb	r3, [r7, #8]
 800722e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	701a      	strb	r2, [r3, #0]

  return ret;
 800723a:	68fb      	ldr	r3, [r7, #12]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007250:	f107 0208 	add.w	r2, r7, #8
 8007254:	2301      	movs	r3, #1
 8007256:	2110      	movs	r1, #16
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fdff 	bl	8006e5c <lsm6dsl_read_reg>
 800725e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10f      	bne.n	8007286 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	7a3b      	ldrb	r3, [r7, #8]
 8007270:	f362 0300 	bfi	r3, r2, #0, #1
 8007274:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8007276:	f107 0208 	add.w	r2, r7, #8
 800727a:	2301      	movs	r3, #1
 800727c:	2110      	movs	r1, #16
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fe04 	bl	8006e8c <lsm6dsl_write_reg>
 8007284:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800729c:	f107 0208 	add.w	r2, r7, #8
 80072a0:	2301      	movs	r3, #1
 80072a2:	2117      	movs	r1, #23
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fdd9 	bl	8006e5c <lsm6dsl_read_reg>
 80072aa:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d120      	bne.n	80072f4 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	7a3b      	ldrb	r3, [r7, #8]
 80072be:	f362 03c3 	bfi	r3, r2, #3, #1
 80072c2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	7a3b      	ldrb	r3, [r7, #8]
 80072ce:	f362 1346 	bfi	r3, r2, #5, #2
 80072d2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80072d4:	7a3b      	ldrb	r3, [r7, #8]
 80072d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072da:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80072dc:	7a3b      	ldrb	r3, [r7, #8]
 80072de:	f36f 0382 	bfc	r3, #2, #1
 80072e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 80072e4:	f107 0208 	add.w	r2, r7, #8
 80072e8:	2301      	movs	r3, #1
 80072ea:	2117      	movs	r1, #23
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fdcd 	bl	8006e8c <lsm6dsl_write_reg>
 80072f2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800730a:	f107 0208 	add.w	r2, r7, #8
 800730e:	2301      	movs	r3, #1
 8007310:	2116      	movs	r1, #22
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fda2 	bl	8006e5c <lsm6dsl_read_reg>
 8007318:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d157      	bne.n	80073d0 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	091b      	lsrs	r3, r3, #4
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	b2da      	uxtb	r2, r3
 800732a:	7a3b      	ldrb	r3, [r7, #8]
 800732c:	f362 1305 	bfi	r3, r2, #4, #2
 8007330:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	09db      	lsrs	r3, r3, #7
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	7a3b      	ldrb	r3, [r7, #8]
 8007340:	f362 1386 	bfi	r3, r2, #6, #1
 8007344:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 8007346:	f107 0208 	add.w	r2, r7, #8
 800734a:	2301      	movs	r3, #1
 800734c:	2116      	movs	r1, #22
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff fd9c 	bl	8006e8c <lsm6dsl_write_reg>
 8007354:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d139      	bne.n	80073d0 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800735c:	f107 020c 	add.w	r2, r7, #12
 8007360:	2301      	movs	r3, #1
 8007362:	2115      	movs	r1, #21
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fd79 	bl	8006e5c <lsm6dsl_read_reg>
 800736a:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d12e      	bne.n	80073d0 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	b2da      	uxtb	r2, r3
 800737a:	7b3b      	ldrb	r3, [r7, #12]
 800737c:	f362 0301 	bfi	r3, r2, #0, #2
 8007380:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8007382:	f107 020c 	add.w	r2, r7, #12
 8007386:	2301      	movs	r3, #1
 8007388:	2115      	movs	r1, #21
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fd7e 	bl	8006e8c <lsm6dsl_write_reg>
 8007390:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11b      	bne.n	80073d0 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8007398:	f107 0210 	add.w	r2, r7, #16
 800739c:	2301      	movs	r3, #1
 800739e:	2113      	movs	r1, #19
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fd5b 	bl	8006e5c <lsm6dsl_read_reg>
 80073a6:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d110      	bne.n	80073d0 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	08db      	lsrs	r3, r3, #3
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	7c3b      	ldrb	r3, [r7, #16]
 80073ba:	f362 0341 	bfi	r3, r2, #1, #1
 80073be:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80073c0:	f107 0210 	add.w	r2, r7, #16
 80073c4:	2301      	movs	r3, #1
 80073c6:	2113      	movs	r1, #19
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fd5f 	bl	8006e8c <lsm6dsl_write_reg>
 80073ce:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 80073d0:	697b      	ldr	r3, [r7, #20]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b08a      	sub	sp, #40	; 0x28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80073e4:	f107 021c 	add.w	r2, r7, #28
 80073e8:	2301      	movs	r3, #1
 80073ea:	210d      	movs	r1, #13
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fd35 	bl	8006e5c <lsm6dsl_read_reg>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d147      	bne.n	800748a <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80073fa:	783b      	ldrb	r3, [r7, #0]
 80073fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007400:	b2da      	uxtb	r2, r3
 8007402:	7f3b      	ldrb	r3, [r7, #28]
 8007404:	f362 0300 	bfi	r3, r2, #0, #1
 8007408:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800740a:	783b      	ldrb	r3, [r7, #0]
 800740c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007410:	b2da      	uxtb	r2, r3
 8007412:	7f3b      	ldrb	r3, [r7, #28]
 8007414:	f362 0341 	bfi	r3, r2, #1, #1
 8007418:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800741a:	783b      	ldrb	r3, [r7, #0]
 800741c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	7f3b      	ldrb	r3, [r7, #28]
 8007424:	f362 0382 	bfi	r3, r2, #2, #1
 8007428:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800742a:	783b      	ldrb	r3, [r7, #0]
 800742c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007430:	b2da      	uxtb	r2, r3
 8007432:	7f3b      	ldrb	r3, [r7, #28]
 8007434:	f362 03c3 	bfi	r3, r2, #3, #1
 8007438:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800743a:	783b      	ldrb	r3, [r7, #0]
 800743c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7f3b      	ldrb	r3, [r7, #28]
 8007444:	f362 1304 	bfi	r3, r2, #4, #1
 8007448:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800744a:	783b      	ldrb	r3, [r7, #0]
 800744c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007450:	b2da      	uxtb	r2, r3
 8007452:	7f3b      	ldrb	r3, [r7, #28]
 8007454:	f362 1345 	bfi	r3, r2, #5, #1
 8007458:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800745a:	783b      	ldrb	r3, [r7, #0]
 800745c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	7f3b      	ldrb	r3, [r7, #28]
 8007464:	f362 1386 	bfi	r3, r2, #6, #1
 8007468:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800746a:	783b      	ldrb	r3, [r7, #0]
 800746c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007470:	b2da      	uxtb	r2, r3
 8007472:	7f3b      	ldrb	r3, [r7, #28]
 8007474:	f362 13c7 	bfi	r3, r2, #7, #1
 8007478:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800747a:	f107 021c 	add.w	r2, r7, #28
 800747e:	2301      	movs	r3, #1
 8007480:	210d      	movs	r1, #13
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fd02 	bl	8006e8c <lsm6dsl_write_reg>
 8007488:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d107      	bne.n	80074a0 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8007490:	f107 0218 	add.w	r2, r7, #24
 8007494:	2301      	movs	r3, #1
 8007496:	215e      	movs	r1, #94	; 0x5e
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fcdf 	bl	8006e5c <lsm6dsl_read_reg>
 800749e:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d107      	bne.n	80074b6 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 80074a6:	f107 0214 	add.w	r2, r7, #20
 80074aa:	2301      	movs	r3, #1
 80074ac:	215f      	movs	r1, #95	; 0x5f
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fcd4 	bl	8006e5c <lsm6dsl_read_reg>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d147      	bne.n	800754c <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 80074bc:	787b      	ldrb	r3, [r7, #1]
 80074be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	7e3b      	ldrb	r3, [r7, #24]
 80074c6:	f362 0300 	bfi	r3, r2, #0, #1
 80074ca:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 80074cc:	787b      	ldrb	r3, [r7, #1]
 80074ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	7e3b      	ldrb	r3, [r7, #24]
 80074d6:	f362 0341 	bfi	r3, r2, #1, #1
 80074da:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 80074dc:	787b      	ldrb	r3, [r7, #1]
 80074de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	7e3b      	ldrb	r3, [r7, #24]
 80074e6:	f362 0382 	bfi	r3, r2, #2, #1
 80074ea:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 80074ec:	787b      	ldrb	r3, [r7, #1]
 80074ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	7e3b      	ldrb	r3, [r7, #24]
 80074f6:	f362 03c3 	bfi	r3, r2, #3, #1
 80074fa:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 80074fc:	787b      	ldrb	r3, [r7, #1]
 80074fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007502:	b2da      	uxtb	r2, r3
 8007504:	7e3b      	ldrb	r3, [r7, #24]
 8007506:	f362 1304 	bfi	r3, r2, #4, #1
 800750a:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 800750c:	787b      	ldrb	r3, [r7, #1]
 800750e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	7e3b      	ldrb	r3, [r7, #24]
 8007516:	f362 1345 	bfi	r3, r2, #5, #1
 800751a:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 800751c:	787b      	ldrb	r3, [r7, #1]
 800751e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	7e3b      	ldrb	r3, [r7, #24]
 8007526:	f362 1386 	bfi	r3, r2, #6, #1
 800752a:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 800752c:	787b      	ldrb	r3, [r7, #1]
 800752e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	7e3b      	ldrb	r3, [r7, #24]
 8007536:	f362 13c7 	bfi	r3, r2, #7, #1
 800753a:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800753c:	f107 0218 	add.w	r2, r7, #24
 8007540:	2301      	movs	r3, #1
 8007542:	215e      	movs	r1, #94	; 0x5e
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fca1 	bl	8006e8c <lsm6dsl_write_reg>
 800754a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d107      	bne.n	8007562 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8007552:	f107 0210 	add.w	r2, r7, #16
 8007556:	2301      	movs	r3, #1
 8007558:	2113      	movs	r1, #19
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fc7e 	bl	8006e5c <lsm6dsl_read_reg>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10f      	bne.n	8007588 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8007568:	78bb      	ldrb	r3, [r7, #2]
 800756a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	7c3b      	ldrb	r3, [r7, #16]
 8007572:	f362 1304 	bfi	r3, r2, #4, #1
 8007576:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8007578:	f107 0210 	add.w	r2, r7, #16
 800757c:	2301      	movs	r3, #1
 800757e:	2113      	movs	r1, #19
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fc83 	bl	8006e8c <lsm6dsl_write_reg>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d107      	bne.n	800759e <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800758e:	f107 0220 	add.w	r2, r7, #32
 8007592:	2301      	movs	r3, #1
 8007594:	211a      	movs	r1, #26
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fc60 	bl	8006e5c <lsm6dsl_read_reg>
 800759c:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d111      	bne.n	80075c8 <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 80075a4:	78bb      	ldrb	r3, [r7, #2]
 80075a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075b0:	f362 13c7 	bfi	r3, r2, #7, #1
 80075b4:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80075b8:	f107 0220 	add.w	r2, r7, #32
 80075bc:	2301      	movs	r3, #1
 80075be:	211a      	movs	r1, #26
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fc63 	bl	8006e8c <lsm6dsl_write_reg>
 80075c6:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d158      	bne.n	8007680 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80075ce:	f107 020c 	add.w	r2, r7, #12
 80075d2:	2301      	movs	r3, #1
 80075d4:	2158      	movs	r1, #88	; 0x58
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fc40 	bl	8006e5c <lsm6dsl_read_reg>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 80075de:	787b      	ldrb	r3, [r7, #1]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d141      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80075ea:	787b      	ldrb	r3, [r7, #1]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d13b      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 80075f6:	787b      	ldrb	r3, [r7, #1]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d135      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8007602:	787b      	ldrb	r3, [r7, #1]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12f      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800760e:	787b      	ldrb	r3, [r7, #1]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8007616:	2b00      	cmp	r3, #0
 8007618:	d129      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800761a:	787b      	ldrb	r3, [r7, #1]
 800761c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007620:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8007622:	2b00      	cmp	r3, #0
 8007624:	d123      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8007626:	7d3b      	ldrb	r3, [r7, #20]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 800762e:	2b00      	cmp	r3, #0
 8007630:	d11d      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8007632:	7d3b      	ldrb	r3, [r7, #20]
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d117      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800763e:	7d3b      	ldrb	r3, [r7, #20]
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8007646:	2b00      	cmp	r3, #0
 8007648:	d111      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800764a:	7d3b      	ldrb	r3, [r7, #20]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8007656:	7d3b      	ldrb	r3, [r7, #20]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8007662:	7d3b      	ldrb	r3, [r7, #20]
 8007664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007668:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800766e:	7b3b      	ldrb	r3, [r7, #12]
 8007670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007674:	733b      	strb	r3, [r7, #12]
 8007676:	e003      	b.n	8007680 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8007678:	7b3b      	ldrb	r3, [r7, #12]
 800767a:	f36f 13c7 	bfc	r3, #7, #1
 800767e:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8007686:	f107 020c 	add.w	r2, r7, #12
 800768a:	2301      	movs	r3, #1
 800768c:	2158      	movs	r1, #88	; 0x58
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fbfc 	bl	8006e8c <lsm6dsl_write_reg>
 8007694:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007698:	4618      	mov	r0, r3
 800769a:	3728      	adds	r7, #40	; 0x28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <lsm6dsl_all_on_int1_set>:
  * @param  val    Change the values of int2_on_int1 in reg CTRL4_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_all_on_int1_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80076ac:	f107 0208 	add.w	r2, r7, #8
 80076b0:	2301      	movs	r3, #1
 80076b2:	2113      	movs	r1, #19
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff fbd1 	bl	8006e5c <lsm6dsl_read_reg>
 80076ba:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10f      	bne.n	80076e2 <lsm6dsl_all_on_int1_set+0x42>
    ctrl4_c.int2_on_int1 = val;
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	7a3b      	ldrb	r3, [r7, #8]
 80076cc:	f362 1345 	bfi	r3, r2, #5, #1
 80076d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80076d2:	f107 0208 	add.w	r2, r7, #8
 80076d6:	2301      	movs	r3, #1
 80076d8:	2113      	movs	r1, #19
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fbd6 	bl	8006e8c <lsm6dsl_write_reg>
 80076e0:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <lsm6dsl_wkup_dur_set>:
  * @param  val    Change the values of wake_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 80076f8:	f107 0208 	add.w	r2, r7, #8
 80076fc:	2301      	movs	r3, #1
 80076fe:	215c      	movs	r1, #92	; 0x5c
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fbab 	bl	8006e5c <lsm6dsl_read_reg>
 8007706:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10f      	bne.n	800772e <lsm6dsl_wkup_dur_set+0x42>
    wake_up_dur.wake_dur = val;
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	b2da      	uxtb	r2, r3
 8007716:	7a3b      	ldrb	r3, [r7, #8]
 8007718:	f362 1346 	bfi	r3, r2, #5, #2
 800771c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 800771e:	f107 0208 	add.w	r2, r7, #8
 8007722:	2301      	movs	r3, #1
 8007724:	215c      	movs	r1, #92	; 0x5c
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff fbb0 	bl	8006e8c <lsm6dsl_write_reg>
 800772c:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 800772e:	68fb      	ldr	r3, [r7, #12]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <lsm6dsl_act_sleep_dur_set>:
  * @param  val    Change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
 8007744:	f107 0208 	add.w	r2, r7, #8
 8007748:	2301      	movs	r3, #1
 800774a:	215c      	movs	r1, #92	; 0x5c
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fb85 	bl	8006e5c <lsm6dsl_read_reg>
 8007752:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10f      	bne.n	800777a <lsm6dsl_act_sleep_dur_set+0x42>
    wake_up_dur.sleep_dur = val;
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	b2da      	uxtb	r2, r3
 8007762:	7a3b      	ldrb	r3, [r7, #8]
 8007764:	f362 0303 	bfi	r3, r2, #0, #4
 8007768:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 800776a:	f107 0208 	add.w	r2, r7, #8
 800776e:	2301      	movs	r3, #1
 8007770:	215c      	movs	r1, #92	; 0x5c
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fb8a 	bl	8006e8c <lsm6dsl_write_reg>
 8007778:	60f8      	str	r0, [r7, #12]
          (uint8_t*)&wake_up_dur, 1);
  }
  return ret;
 800777a:	68fb      	ldr	r3, [r7, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <lsm6dsl_tap_detection_on_z_set>:
  * @param  ctx    Read / write interface definitions
  * @param  val    Change the values of tap_z_en in reg TAP_CFG
  *
  */
int32_t lsm6dsl_tap_detection_on_z_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	2301      	movs	r3, #1
 8007796:	2158      	movs	r1, #88	; 0x58
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fb5f 	bl	8006e5c <lsm6dsl_read_reg>
 800779e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <lsm6dsl_tap_detection_on_z_set+0x42>
    tap_cfg.tap_z_en = val;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	7a3b      	ldrb	r3, [r7, #8]
 80077b0:	f362 0341 	bfi	r3, r2, #1, #1
 80077b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80077b6:	f107 0208 	add.w	r2, r7, #8
 80077ba:	2301      	movs	r3, #1
 80077bc:	2158      	movs	r1, #88	; 0x58
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fb64 	bl	8006e8c <lsm6dsl_write_reg>
 80077c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <lsm6dsl_tap_detection_on_y_set>:
  * @param  val    Change the values of tap_y_en in reg TAP_CFG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_detection_on_y_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 80077dc:	f107 0208 	add.w	r2, r7, #8
 80077e0:	2301      	movs	r3, #1
 80077e2:	2158      	movs	r1, #88	; 0x58
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fb39 	bl	8006e5c <lsm6dsl_read_reg>
 80077ea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <lsm6dsl_tap_detection_on_y_set+0x42>
    tap_cfg.tap_y_en = val;
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	7a3b      	ldrb	r3, [r7, #8]
 80077fc:	f362 0382 	bfi	r3, r2, #2, #1
 8007800:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	2301      	movs	r3, #1
 8007808:	2158      	movs	r1, #88	; 0x58
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fb3e 	bl	8006e8c <lsm6dsl_write_reg>
 8007810:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <lsm6dsl_tap_detection_on_x_set>:
  * @param  val    Change the values of tap_x_en in reg TAP_CFG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_detection_on_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8007828:	f107 0208 	add.w	r2, r7, #8
 800782c:	2301      	movs	r3, #1
 800782e:	2158      	movs	r1, #88	; 0x58
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fb13 	bl	8006e5c <lsm6dsl_read_reg>
 8007836:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10f      	bne.n	800785e <lsm6dsl_tap_detection_on_x_set+0x42>
    tap_cfg.tap_x_en = val;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7a3b      	ldrb	r3, [r7, #8]
 8007848:	f362 03c3 	bfi	r3, r2, #3, #1
 800784c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	2301      	movs	r3, #1
 8007854:	2158      	movs	r1, #88	; 0x58
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff fb18 	bl	8006e8c <lsm6dsl_write_reg>
 800785c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <lsm6dsl_tap_threshold_x_set>:
  * @param  val    Change the values of tap_ths in reg TAP_THS_6D
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_threshold_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_tap_ths_6d_t tap_ths_6d;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
 8007874:	f107 0208 	add.w	r2, r7, #8
 8007878:	2301      	movs	r3, #1
 800787a:	2159      	movs	r1, #89	; 0x59
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff faed 	bl	8006e5c <lsm6dsl_read_reg>
 8007882:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10f      	bne.n	80078aa <lsm6dsl_tap_threshold_x_set+0x42>
    tap_ths_6d.tap_ths = val;
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	b2da      	uxtb	r2, r3
 8007892:	7a3b      	ldrb	r3, [r7, #8]
 8007894:	f362 0304 	bfi	r3, r2, #0, #5
 8007898:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D,
 800789a:	f107 0208 	add.w	r2, r7, #8
 800789e:	2301      	movs	r3, #1
 80078a0:	2159      	movs	r1, #89	; 0x59
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff faf2 	bl	8006e8c <lsm6dsl_write_reg>
 80078a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&tap_ths_6d, 1);
  }
  return ret;
 80078aa:	68fb      	ldr	r3, [r7, #12]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <lsm6dsl_tap_shock_set>:
  * @param  val    Change the values of shock in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_shock_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 80078c0:	f107 0208 	add.w	r2, r7, #8
 80078c4:	2301      	movs	r3, #1
 80078c6:	215a      	movs	r1, #90	; 0x5a
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fac7 	bl	8006e5c <lsm6dsl_read_reg>
 80078ce:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <lsm6dsl_tap_shock_set+0x42>
    int_dur2.shock = val;
 80078d6:	78fb      	ldrb	r3, [r7, #3]
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	7a3b      	ldrb	r3, [r7, #8]
 80078e0:	f362 0301 	bfi	r3, r2, #0, #2
 80078e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 80078e6:	f107 0208 	add.w	r2, r7, #8
 80078ea:	2301      	movs	r3, #1
 80078ec:	215a      	movs	r1, #90	; 0x5a
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff facc 	bl	8006e8c <lsm6dsl_write_reg>
 80078f4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <lsm6dsl_tap_quiet_set>:
  * @param  val    Change the values of quiet in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_quiet_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 800790c:	f107 0208 	add.w	r2, r7, #8
 8007910:	2301      	movs	r3, #1
 8007912:	215a      	movs	r1, #90	; 0x5a
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff faa1 	bl	8006e5c <lsm6dsl_read_reg>
 800791a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10f      	bne.n	8007942 <lsm6dsl_tap_quiet_set+0x42>
    int_dur2.quiet = val;
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	b2da      	uxtb	r2, r3
 800792a:	7a3b      	ldrb	r3, [r7, #8]
 800792c:	f362 0383 	bfi	r3, r2, #2, #2
 8007930:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	2301      	movs	r3, #1
 8007938:	215a      	movs	r1, #90	; 0x5a
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff faa6 	bl	8006e8c <lsm6dsl_write_reg>
 8007940:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007942:	68fb      	ldr	r3, [r7, #12]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <lsm6dsl_tap_dur_set>:
  * @param  val    Change the values of dur in reg INT_DUR2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int_dur2_t int_dur2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 8007958:	f107 0208 	add.w	r2, r7, #8
 800795c:	2301      	movs	r3, #1
 800795e:	215a      	movs	r1, #90	; 0x5a
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fa7b 	bl	8006e5c <lsm6dsl_read_reg>
 8007966:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <lsm6dsl_tap_dur_set+0x42>
    int_dur2.dur = val;
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	b2da      	uxtb	r2, r3
 8007976:	7a3b      	ldrb	r3, [r7, #8]
 8007978:	f362 1307 	bfi	r3, r2, #4, #4
 800797c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
 800797e:	f107 0208 	add.w	r2, r7, #8
 8007982:	2301      	movs	r3, #1
 8007984:	215a      	movs	r1, #90	; 0x5a
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fa80 	bl	8006e8c <lsm6dsl_write_reg>
 800798c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <lsm6dsl_tap_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tap_mode_set(stmdev_ctx_t *ctx,
                             lsm6dsl_single_double_tap_t val)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
 80079a4:	f107 0208 	add.w	r2, r7, #8
 80079a8:	2301      	movs	r3, #1
 80079aa:	215b      	movs	r1, #91	; 0x5b
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fa55 	bl	8006e5c <lsm6dsl_read_reg>
 80079b2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <lsm6dsl_tap_mode_set+0x42>
    wake_up_ths.single_double_tap = (uint8_t) val;
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	7a3b      	ldrb	r3, [r7, #8]
 80079c4:	f362 13c7 	bfi	r3, r2, #7, #1
 80079c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_THS,
 80079ca:	f107 0208 	add.w	r2, r7, #8
 80079ce:	2301      	movs	r3, #1
 80079d0:	215b      	movs	r1, #91	; 0x5b
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fa5a 	bl	8006e8c <lsm6dsl_write_reg>
 80079d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&wake_up_ths, 1);
  }
  return ret;
 80079da:	68fb      	ldr	r3, [r7, #12]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <lsm6dsl_ff_dur_set>:
  * @param  val    Change the values of ff_dur in reg WAKE_UP_DUR
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_ff_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_wake_up_dur_t wake_up_dur;
  lsm6dsl_free_fall_t free_fall;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 80079f0:	f107 020c 	add.w	r2, r7, #12
 80079f4:	2301      	movs	r3, #1
 80079f6:	215d      	movs	r1, #93	; 0x5d
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fa2f 	bl	8006e5c <lsm6dsl_read_reg>
 80079fe:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d12e      	bne.n	8007a64 <lsm6dsl_ff_dur_set+0x80>
    free_fall.ff_dur = (val & 0x1FU);
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	7b3b      	ldrb	r3, [r7, #12]
 8007a10:	f362 03c7 	bfi	r3, r2, #3, #5
 8007a14:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 8007a16:	f107 020c 	add.w	r2, r7, #12
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	215d      	movs	r1, #93	; 0x5d
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fa34 	bl	8006e8c <lsm6dsl_write_reg>
 8007a24:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d11b      	bne.n	8007a64 <lsm6dsl_ff_dur_set+0x80>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8007a2c:	f107 0210 	add.w	r2, r7, #16
 8007a30:	2301      	movs	r3, #1
 8007a32:	215c      	movs	r1, #92	; 0x5c
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fa11 	bl	8006e5c <lsm6dsl_read_reg>
 8007a3a:	6178      	str	r0, [r7, #20]
                             (uint8_t*)&wake_up_dur, 1);
      if(ret == 0){
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d110      	bne.n	8007a64 <lsm6dsl_ff_dur_set+0x80>
        wake_up_dur.ff_dur = (val & 0x20U) >> 5;
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	7c3b      	ldrb	r3, [r7, #16]
 8007a4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007a52:	743b      	strb	r3, [r7, #16]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
 8007a54:	f107 0210 	add.w	r2, r7, #16
 8007a58:	2301      	movs	r3, #1
 8007a5a:	215c      	movs	r1, #92	; 0x5c
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff fa15 	bl	8006e8c <lsm6dsl_write_reg>
 8007a62:	6178      	str	r0, [r7, #20]
                                (uint8_t*)&wake_up_dur, 1);
      }
    }
  }
  return ret;
 8007a64:	697b      	ldr	r3, [r7, #20]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <lsm6dsl_ff_threshold_set>:
  * @param  val    Change the values of ff_ths in reg FREE_FALL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_ff_threshold_set(stmdev_ctx_t *ctx, lsm6dsl_ff_ths_t val)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_free_fall_t free_fall;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	2301      	movs	r3, #1
 8007a80:	215d      	movs	r1, #93	; 0x5d
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff f9ea 	bl	8006e5c <lsm6dsl_read_reg>
 8007a88:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10f      	bne.n	8007ab0 <lsm6dsl_ff_threshold_set+0x42>
    free_fall.ff_ths = (uint8_t) val;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	7a3b      	ldrb	r3, [r7, #8]
 8007a9a:	f362 0302 	bfi	r3, r2, #0, #3
 8007a9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
 8007aa0:	f107 0208 	add.w	r2, r7, #8
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	215d      	movs	r1, #93	; 0x5d
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff f9ef 	bl	8006e8c <lsm6dsl_write_reg>
 8007aae:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <lsm6dsl_motion_sens_set>:
  * @param  val    Change the values of sign_motion_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_motion_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007ac6:	f107 0208 	add.w	r2, r7, #8
 8007aca:	2301      	movs	r3, #1
 8007acc:	2119      	movs	r1, #25
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff f9c4 	bl	8006e5c <lsm6dsl_read_reg>
 8007ad4:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d11a      	bne.n	8007b12 <lsm6dsl_motion_sens_set+0x58>
    ctrl10_c.sign_motion_en = val;
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	7a3b      	ldrb	r3, [r7, #8]
 8007ae6:	f362 0300 	bfi	r3, r2, #0, #1
 8007aea:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <lsm6dsl_motion_sens_set+0x58>
      ctrl10_c.func_en = val;
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	7a3b      	ldrb	r3, [r7, #8]
 8007afc:	f362 0382 	bfi	r3, r2, #2, #1
 8007b00:	723b      	strb	r3, [r7, #8]
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007b02:	f107 0208 	add.w	r2, r7, #8
 8007b06:	2301      	movs	r3, #1
 8007b08:	2119      	movs	r1, #25
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff f9be 	bl	8006e8c <lsm6dsl_write_reg>
 8007b10:	60f8      	str	r0, [r7, #12]
    }
  }
  return ret;
 8007b12:	68fb      	ldr	r3, [r7, #12]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <lsm6dsl_tilt_sens_set>:
  * @param  val    Change the values of tilt_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_tilt_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007b28:	f107 0208 	add.w	r2, r7, #8
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	2119      	movs	r1, #25
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff f993 	bl	8006e5c <lsm6dsl_read_reg>
 8007b36:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d11a      	bne.n	8007b74 <lsm6dsl_tilt_sens_set+0x58>
    ctrl10_c.tilt_en = val;
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	7a3b      	ldrb	r3, [r7, #8]
 8007b48:	f362 03c3 	bfi	r3, r2, #3, #1
 8007b4c:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <lsm6dsl_tilt_sens_set+0x48>
      ctrl10_c.func_en = val;
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	7a3b      	ldrb	r3, [r7, #8]
 8007b5e:	f362 0382 	bfi	r3, r2, #2, #1
 8007b62:	723b      	strb	r3, [r7, #8]
    }
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007b64:	f107 0208 	add.w	r2, r7, #8
 8007b68:	2301      	movs	r3, #1
 8007b6a:	2119      	movs	r1, #25
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff f98d 	bl	8006e8c <lsm6dsl_write_reg>
 8007b72:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007b74:	68fb      	ldr	r3, [r7, #12]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <lsm6dsl_wrist_tilt_sens_set>:
  * @param  val    Change the values of tilt_en in reg CTRL10_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_wrist_tilt_sens_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl10_c_t ctrl10_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007b8a:	f107 0208 	add.w	r2, r7, #8
 8007b8e:	2301      	movs	r3, #1
 8007b90:	2119      	movs	r1, #25
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff f962 	bl	8006e5c <lsm6dsl_read_reg>
 8007b98:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d11a      	bne.n	8007bd6 <lsm6dsl_wrist_tilt_sens_set+0x58>
    ctrl10_c.wrist_tilt_en = val;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	7a3b      	ldrb	r3, [r7, #8]
 8007baa:	f362 13c7 	bfi	r3, r2, #7, #1
 8007bae:	723b      	strb	r3, [r7, #8]
    if (val != 0x00U) {
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <lsm6dsl_wrist_tilt_sens_set+0x48>
      ctrl10_c.func_en = val;
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	7a3b      	ldrb	r3, [r7, #8]
 8007bc0:	f362 0382 	bfi	r3, r2, #2, #1
 8007bc4:	723b      	strb	r3, [r7, #8]
    }
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
 8007bc6:	f107 0208 	add.w	r2, r7, #8
 8007bca:	2301      	movs	r3, #1
 8007bcc:	2119      	movs	r1, #25
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff f95c 	bl	8006e8c <lsm6dsl_write_reg>
 8007bd4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <set_rtc_time>:
    Error_Handler();
  }
}
*/

void set_rtc_time(char *data){
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]

  uint8_t year, month, date;
  uint8_t hour, minute, second;

  RTC_TimeTypeDef sTime = {0};
 8007be8:	f107 0310 	add.w	r3, r7, #16
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
  printf("%s\n", data);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f014 fbd7 	bl	801c3b0 <puts>

  char *token = strtok(data, "0");
 8007c02:	495f      	ldr	r1, [pc, #380]	; (8007d80 <set_rtc_time+0x1a0>)
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f014 fc39 	bl	801c47c <strtok>
 8007c0a:	62b8      	str	r0, [r7, #40]	; 0x28
  token = strtok(NULL, "/");
 8007c0c:	495d      	ldr	r1, [pc, #372]	; (8007d84 <set_rtc_time+0x1a4>)
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f014 fc34 	bl	801c47c <strtok>
 8007c14:	62b8      	str	r0, [r7, #40]	; 0x28
  year = atoi(token);
 8007c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c18:	f013 fde0 	bl	801b7dc <atoi>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  printf( " %d\n", year );
 8007c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c26:	4619      	mov	r1, r3
 8007c28:	4857      	ldr	r0, [pc, #348]	; (8007d88 <set_rtc_time+0x1a8>)
 8007c2a:	f014 fb3b 	bl	801c2a4 <iprintf>
  token = strtok(NULL, "/");
 8007c2e:	4955      	ldr	r1, [pc, #340]	; (8007d84 <set_rtc_time+0x1a4>)
 8007c30:	2000      	movs	r0, #0
 8007c32:	f014 fc23 	bl	801c47c <strtok>
 8007c36:	62b8      	str	r0, [r7, #40]	; 0x28
  month = atoi(token);
 8007c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c3a:	f013 fdcf 	bl	801b7dc <atoi>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  printf( " %d\n", month );
 8007c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c48:	4619      	mov	r1, r3
 8007c4a:	484f      	ldr	r0, [pc, #316]	; (8007d88 <set_rtc_time+0x1a8>)
 8007c4c:	f014 fb2a 	bl	801c2a4 <iprintf>
  token = strtok(NULL, ",");
 8007c50:	494e      	ldr	r1, [pc, #312]	; (8007d8c <set_rtc_time+0x1ac>)
 8007c52:	2000      	movs	r0, #0
 8007c54:	f014 fc12 	bl	801c47c <strtok>
 8007c58:	62b8      	str	r0, [r7, #40]	; 0x28
  date = atoi(token);
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5c:	f013 fdbe 	bl	801b7dc <atoi>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  printf( " %d\n", date );
 8007c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4846      	ldr	r0, [pc, #280]	; (8007d88 <set_rtc_time+0x1a8>)
 8007c6e:	f014 fb19 	bl	801c2a4 <iprintf>
  token = strtok(NULL, ":");
 8007c72:	4947      	ldr	r1, [pc, #284]	; (8007d90 <set_rtc_time+0x1b0>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f014 fc01 	bl	801c47c <strtok>
 8007c7a:	62b8      	str	r0, [r7, #40]	; 0x28
//  hour = atoi(token)+7;
  hour = atoi(token)+7;
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7e:	f013 fdad 	bl	801b7dc <atoi>
 8007c82:	4603      	mov	r3, r0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	3307      	adds	r3, #7
 8007c88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  printf( " %d\n", hour );
 8007c8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c90:	4619      	mov	r1, r3
 8007c92:	483d      	ldr	r0, [pc, #244]	; (8007d88 <set_rtc_time+0x1a8>)
 8007c94:	f014 fb06 	bl	801c2a4 <iprintf>
  token = strtok(NULL, ":");
 8007c98:	493d      	ldr	r1, [pc, #244]	; (8007d90 <set_rtc_time+0x1b0>)
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f014 fbee 	bl	801c47c <strtok>
 8007ca0:	62b8      	str	r0, [r7, #40]	; 0x28
  minute = atoi(token);
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca4:	f013 fd9a 	bl	801b7dc <atoi>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  printf( " %d\n", minute );
 8007cae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4834      	ldr	r0, [pc, #208]	; (8007d88 <set_rtc_time+0x1a8>)
 8007cb6:	f014 faf5 	bl	801c2a4 <iprintf>
  token = strtok(NULL, "\"");
 8007cba:	4936      	ldr	r1, [pc, #216]	; (8007d94 <set_rtc_time+0x1b4>)
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f014 fbdd 	bl	801c47c <strtok>
 8007cc2:	62b8      	str	r0, [r7, #40]	; 0x28
  second = atoi(token)+3;
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc6:	f013 fd89 	bl	801b7dc <atoi>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	3303      	adds	r3, #3
 8007cd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  printf( " %d\n", second );
 8007cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007cd8:	4619      	mov	r1, r3
 8007cda:	482b      	ldr	r0, [pc, #172]	; (8007d88 <set_rtc_time+0x1a8>)
 8007cdc:	f014 fae2 	bl	801c2a4 <iprintf>

  if(hour > 23){
 8007ce0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ce4:	2b17      	cmp	r3, #23
 8007ce6:	d909      	bls.n	8007cfc <set_rtc_time+0x11c>
	  hour = hour - 24;
 8007ce8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cec:	3b18      	subs	r3, #24
 8007cee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  date++;
 8007cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  sTime.Hours = hour;
 8007cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d00:	743b      	strb	r3, [r7, #16]
  printf( " %d\n", sTime.Hours );
 8007d02:	7c3b      	ldrb	r3, [r7, #16]
 8007d04:	4619      	mov	r1, r3
 8007d06:	4820      	ldr	r0, [pc, #128]	; (8007d88 <set_rtc_time+0x1a8>)
 8007d08:	f014 facc 	bl	801c2a4 <iprintf>
  sTime.Minutes = minute;
 8007d0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007d10:	747b      	strb	r3, [r7, #17]
  printf( " %d\n", sTime.Minutes );
 8007d12:	7c7b      	ldrb	r3, [r7, #17]
 8007d14:	4619      	mov	r1, r3
 8007d16:	481c      	ldr	r0, [pc, #112]	; (8007d88 <set_rtc_time+0x1a8>)
 8007d18:	f014 fac4 	bl	801c2a4 <iprintf>
  sTime.Seconds = second;
 8007d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d20:	74bb      	strb	r3, [r7, #18]
  printf( " %d\n", sTime.Seconds );
 8007d22:	7cbb      	ldrb	r3, [r7, #18]
 8007d24:	4619      	mov	r1, r3
 8007d26:	4818      	ldr	r0, [pc, #96]	; (8007d88 <set_rtc_time+0x1a8>)
 8007d28:	f014 fabc 	bl	801c2a4 <iprintf>
//  sTime.Hours = 0x19U;
//  sTime.Minutes = 0x30U;
//  sTime.Seconds = 0x00U;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	61fb      	str	r3, [r7, #28]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007d30:	2300      	movs	r3, #0
 8007d32:	623b      	str	r3, [r7, #32]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007d34:	f107 0310 	add.w	r3, r7, #16
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4816      	ldr	r0, [pc, #88]	; (8007d98 <set_rtc_time+0x1b8>)
 8007d3e:	f00b f8d0 	bl	8012ee2 <HAL_RTC_SetTime>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <set_rtc_time+0x16c>
  {
    Error_Handler();
 8007d48:	f006 fd79 	bl	800e83e <Error_Handler>
  }
//  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
  sDate.Month = month;
 8007d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d50:	737b      	strb	r3, [r7, #13]
  sDate.Date = date;
 8007d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d56:	73bb      	strb	r3, [r7, #14]
  sDate.Year = year;
 8007d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	2200      	movs	r2, #0
 8007d64:	4619      	mov	r1, r3
 8007d66:	480c      	ldr	r0, [pc, #48]	; (8007d98 <set_rtc_time+0x1b8>)
 8007d68:	f00b f9b4 	bl	80130d4 <HAL_RTC_SetDate>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <set_rtc_time+0x196>
  {
    Error_Handler();
 8007d72:	f006 fd64 	bl	800e83e <Error_Handler>
  }
}
 8007d76:	bf00      	nop
 8007d78:	3730      	adds	r7, #48	; 0x30
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	0801ef2c 	.word	0x0801ef2c
 8007d84:	0801ef30 	.word	0x0801ef30
 8007d88:	0801ef34 	.word	0x0801ef34
 8007d8c:	0801ef3c 	.word	0x0801ef3c
 8007d90:	0801ef40 	.word	0x0801ef40
 8007d94:	0801ef44 	.word	0x0801ef44
 8007d98:	2000818c 	.word	0x2000818c

08007d9c <set_rtc_time_cclk>:

void set_rtc_time_cclk(char *data){
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08c      	sub	sp, #48	; 0x30
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

  uint8_t year, month, date;
  uint8_t hour, minute, second;

  RTC_TimeTypeDef sTime = {0};
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
  printf("%s\n", data);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f014 faf9 	bl	801c3b0 <puts>

  char *token = strtok(data, "\"");
 8007dbe:	4961      	ldr	r1, [pc, #388]	; (8007f44 <set_rtc_time_cclk+0x1a8>)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f014 fb5b 	bl	801c47c <strtok>
 8007dc6:	62b8      	str	r0, [r7, #40]	; 0x28
  token = strtok(NULL, "/");
 8007dc8:	495f      	ldr	r1, [pc, #380]	; (8007f48 <set_rtc_time_cclk+0x1ac>)
 8007dca:	2000      	movs	r0, #0
 8007dcc:	f014 fb56 	bl	801c47c <strtok>
 8007dd0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (atoi(token) != 0) {
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd4:	f013 fd02 	bl	801b7dc <atoi>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80ae 	beq.w	8007f3c <set_rtc_time_cclk+0x1a0>
	  year = atoi(token);
 8007de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de2:	f013 fcfb 	bl	801b7dc <atoi>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  printf( " %d\n", year );
 8007dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df0:	4619      	mov	r1, r3
 8007df2:	4856      	ldr	r0, [pc, #344]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007df4:	f014 fa56 	bl	801c2a4 <iprintf>
	  token = strtok(NULL, "/");
 8007df8:	4953      	ldr	r1, [pc, #332]	; (8007f48 <set_rtc_time_cclk+0x1ac>)
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	f014 fb3e 	bl	801c47c <strtok>
 8007e00:	62b8      	str	r0, [r7, #40]	; 0x28
	  month = atoi(token);
 8007e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e04:	f013 fcea 	bl	801b7dc <atoi>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  printf( " %d\n", month );
 8007e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e12:	4619      	mov	r1, r3
 8007e14:	484d      	ldr	r0, [pc, #308]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007e16:	f014 fa45 	bl	801c2a4 <iprintf>
	  token = strtok(NULL, ",");
 8007e1a:	494d      	ldr	r1, [pc, #308]	; (8007f50 <set_rtc_time_cclk+0x1b4>)
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	f014 fb2d 	bl	801c47c <strtok>
 8007e22:	62b8      	str	r0, [r7, #40]	; 0x28
	  date = atoi(token);
 8007e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e26:	f013 fcd9 	bl	801b7dc <atoi>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  printf( " %d\n", date );
 8007e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e34:	4619      	mov	r1, r3
 8007e36:	4845      	ldr	r0, [pc, #276]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007e38:	f014 fa34 	bl	801c2a4 <iprintf>
	  token = strtok(NULL, ":");
 8007e3c:	4945      	ldr	r1, [pc, #276]	; (8007f54 <set_rtc_time_cclk+0x1b8>)
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f014 fb1c 	bl	801c47c <strtok>
 8007e44:	62b8      	str	r0, [r7, #40]	; 0x28
	  hour = atoi(token);
 8007e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e48:	f013 fcc8 	bl	801b7dc <atoi>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  printf( " %d\n", hour );
 8007e52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e56:	4619      	mov	r1, r3
 8007e58:	483c      	ldr	r0, [pc, #240]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007e5a:	f014 fa23 	bl	801c2a4 <iprintf>
	  token = strtok(NULL, ":");
 8007e5e:	493d      	ldr	r1, [pc, #244]	; (8007f54 <set_rtc_time_cclk+0x1b8>)
 8007e60:	2000      	movs	r0, #0
 8007e62:	f014 fb0b 	bl	801c47c <strtok>
 8007e66:	62b8      	str	r0, [r7, #40]	; 0x28
	  minute = atoi(token);
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f013 fcb7 	bl	801b7dc <atoi>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  printf( " %d\n", minute );
 8007e74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4834      	ldr	r0, [pc, #208]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007e7c:	f014 fa12 	bl	801c2a4 <iprintf>
	  token = strtok(NULL, "\"");
 8007e80:	4930      	ldr	r1, [pc, #192]	; (8007f44 <set_rtc_time_cclk+0x1a8>)
 8007e82:	2000      	movs	r0, #0
 8007e84:	f014 fafa 	bl	801c47c <strtok>
 8007e88:	62b8      	str	r0, [r7, #40]	; 0x28
	  second = atoi(token)+3;
 8007e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8c:	f013 fca6 	bl	801b7dc <atoi>
 8007e90:	4603      	mov	r3, r0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	3303      	adds	r3, #3
 8007e96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  printf( " %d\n", second );
 8007e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	482a      	ldr	r0, [pc, #168]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007ea2:	f014 f9ff 	bl	801c2a4 <iprintf>

	  if(hour > 23){
 8007ea6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eaa:	2b17      	cmp	r3, #23
 8007eac:	d909      	bls.n	8007ec2 <set_rtc_time_cclk+0x126>
		  hour = hour - 24;
 8007eae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007eb2:	3b18      	subs	r3, #24
 8007eb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		  date++;
 8007eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }

	  sTime.Hours = hour;
 8007ec2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ec6:	743b      	strb	r3, [r7, #16]
	  printf( " %d\n", sTime.Hours );
 8007ec8:	7c3b      	ldrb	r3, [r7, #16]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	481f      	ldr	r0, [pc, #124]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007ece:	f014 f9e9 	bl	801c2a4 <iprintf>
	  sTime.Minutes = minute;
 8007ed2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007ed6:	747b      	strb	r3, [r7, #17]
	  printf( " %d\n", sTime.Minutes );
 8007ed8:	7c7b      	ldrb	r3, [r7, #17]
 8007eda:	4619      	mov	r1, r3
 8007edc:	481b      	ldr	r0, [pc, #108]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007ede:	f014 f9e1 	bl	801c2a4 <iprintf>
	  sTime.Seconds = second;
 8007ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ee6:	74bb      	strb	r3, [r7, #18]
	  printf( " %d\n", sTime.Seconds );
 8007ee8:	7cbb      	ldrb	r3, [r7, #18]
 8007eea:	4619      	mov	r1, r3
 8007eec:	4817      	ldr	r0, [pc, #92]	; (8007f4c <set_rtc_time_cclk+0x1b0>)
 8007eee:	f014 f9d9 	bl	801c2a4 <iprintf>
	//  sTime.Hours = 0x19U;
	//  sTime.Minutes = 0x30U;
	//  sTime.Seconds = 0x00U;
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61fb      	str	r3, [r7, #28]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	623b      	str	r3, [r7, #32]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007efa:	f107 0310 	add.w	r3, r7, #16
 8007efe:	2200      	movs	r2, #0
 8007f00:	4619      	mov	r1, r3
 8007f02:	4815      	ldr	r0, [pc, #84]	; (8007f58 <set_rtc_time_cclk+0x1bc>)
 8007f04:	f00a ffed 	bl	8012ee2 <HAL_RTC_SetTime>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <set_rtc_time_cclk+0x176>
	  {
		Error_Handler();
 8007f0e:	f006 fc96 	bl	800e83e <Error_Handler>
	  }
	//  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
	  sDate.Month = month;
 8007f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f16:	737b      	strb	r3, [r7, #13]
	  sDate.Date = date;
 8007f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f1c:	73bb      	strb	r3, [r7, #14]
	  sDate.Year = year;
 8007f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f22:	73fb      	strb	r3, [r7, #15]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	480a      	ldr	r0, [pc, #40]	; (8007f58 <set_rtc_time_cclk+0x1bc>)
 8007f2e:	f00b f8d1 	bl	80130d4 <HAL_RTC_SetDate>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <set_rtc_time_cclk+0x1a0>
	  {
		Error_Handler();
 8007f38:	f006 fc81 	bl	800e83e <Error_Handler>
	  }
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3730      	adds	r7, #48	; 0x30
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	0801ef44 	.word	0x0801ef44
 8007f48:	0801ef30 	.word	0x0801ef30
 8007f4c:	0801ef34 	.word	0x0801ef34
 8007f50:	0801ef3c 	.word	0x0801ef3c
 8007f54:	0801ef40 	.word	0x0801ef40
 8007f58:	2000818c 	.word	0x2000818c

08007f5c <buffclearSIM>:
	while(buf[i] != '\0') i++;
	return i;
}

void buffclearSIM(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
	for (int i=0; i < 1024; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	e007      	b.n	8007f78 <buffclearSIM+0x1c>
	{
		datarxSIM[i] = '\0';
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <buffclearSIM+0x34>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1024; i++)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3301      	adds	r3, #1
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7e:	dbf3      	blt.n	8007f68 <buffclearSIM+0xc>
	}
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	2000b004 	.word	0x2000b004

08007f94 <SerialMonprintlnSIM>:

void SerialMonprintlnSIM(char ptr[], uint32_t len, uint32_t timeout){
 8007f94:	b5b0      	push	{r4, r5, r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	466b      	mov	r3, sp
 8007fa2:	461d      	mov	r5, r3
	uint8_t ptr1[len+2];
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	1c9c      	adds	r4, r3, #2
 8007fa8:	4623      	mov	r3, r4
 8007faa:	3b01      	subs	r3, #1
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f04f 0100 	mov.w	r1, #0
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	00cb      	lsls	r3, r1, #3
 8007fbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007fc2:	00c2      	lsls	r2, r0, #3
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f04f 0100 	mov.w	r1, #0
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007fd8:	00c2      	lsls	r2, r0, #3
 8007fda:	1de3      	adds	r3, r4, #7
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8007fe4:	466b      	mov	r3, sp
 8007fe6:	3300      	adds	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
	memcpy(ptr1, (uint8_t *) ptr, len);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	68f9      	ldr	r1, [r7, #12]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f013 fc2d 	bl	801b850 <memcpy>
	ptr1[len]= 0x0D;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	220d      	movs	r2, #13
 8007ffe:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= 0x0A;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	3301      	adds	r3, #1
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	210a      	movs	r1, #10
 8008008:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&SerialMon, (uint8_t *) ptr1, len+2, timeout);
 800800a:	6939      	ldr	r1, [r7, #16]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	b29b      	uxth	r3, r3
 8008010:	3302      	adds	r3, #2
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4804      	ldr	r0, [pc, #16]	; (8008028 <SerialMonprintlnSIM+0x94>)
 8008018:	f00c f9c0 	bl	801439c <HAL_UART_Transmit>
 800801c:	46ad      	mov	sp, r5
}
 800801e:	bf00      	nop
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bdb0      	pop	{r4, r5, r7, pc}
 8008026:	bf00      	nop
 8008028:	20002fe0 	.word	0x20002fe0

0800802c <SerialATprintln>:

void SerialATprintln(char ptr[], uint32_t len, uint32_t timeout){
 800802c:	b5b0      	push	{r4, r5, r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	466b      	mov	r3, sp
 800803a:	461d      	mov	r5, r3
	uint8_t ptr1[len+2];
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	1c9c      	adds	r4, r3, #2
 8008040:	4623      	mov	r3, r4
 8008042:	3b01      	subs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	4620      	mov	r0, r4
 8008048:	f04f 0100 	mov.w	r1, #0
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	00cb      	lsls	r3, r1, #3
 8008056:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800805a:	00c2      	lsls	r2, r0, #3
 800805c:	4620      	mov	r0, r4
 800805e:	f04f 0100 	mov.w	r1, #0
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008070:	00c2      	lsls	r2, r0, #3
 8008072:	1de3      	adds	r3, r4, #7
 8008074:	08db      	lsrs	r3, r3, #3
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	ebad 0d03 	sub.w	sp, sp, r3
 800807c:	466b      	mov	r3, sp
 800807e:	3300      	adds	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
	memcpy(ptr1, ptr, len);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	4618      	mov	r0, r3
 800808a:	f013 fbe1 	bl	801b850 <memcpy>
	ptr1[len]= '\r';
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4413      	add	r3, r2
 8008094:	220d      	movs	r2, #13
 8008096:	701a      	strb	r2, [r3, #0]
	ptr1[len+1]= '\n';
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	3301      	adds	r3, #1
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	210a      	movs	r1, #10
 80080a0:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t *) ptr1, len+2, timeout);
 80080a2:	6939      	ldr	r1, [r7, #16]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3302      	adds	r3, #2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4804      	ldr	r0, [pc, #16]	; (80080c0 <SerialATprintln+0x94>)
 80080b0:	f00c f974 	bl	801439c <HAL_UART_Transmit>
 80080b4:	46ad      	mov	sp, r5
}
 80080b6:	bf00      	nop
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bdb0      	pop	{r4, r5, r7, pc}
 80080be:	bf00      	nop
 80080c0:	200038e4 	.word	0x200038e4

080080c4 <setup_modem_1st>:
  SerialATprintln("AT+CGATT=1",10,0xff);
  SerialATreadString(datarxSIM,BUFFSIZESIM,1000);
  SerialMonprintlnSIM(datarxSIM,100,1000);
}

void setup_modem_1st(){
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
//  enable_modem();
	 buffclearSIM();
 80080ca:	f7ff ff47 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT",2,0xff);
 80080ce:	22ff      	movs	r2, #255	; 0xff
 80080d0:	2102      	movs	r1, #2
 80080d2:	4850      	ldr	r0, [pc, #320]	; (8008214 <setup_modem_1st+0x150>)
 80080d4:	f7ff ffaa 	bl	800802c <SerialATprintln>
  osDelay(500);
 80080d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080dc:	f010 fd4c 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CSQ",6,0xff);
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	2106      	movs	r1, #6
 80080e4:	484c      	ldr	r0, [pc, #304]	; (8008218 <setup_modem_1st+0x154>)
 80080e6:	f7ff ffa1 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80080ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080ee:	f010 fd43 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 80080f2:	22ff      	movs	r2, #255	; 0xff
 80080f4:	210b      	movs	r1, #11
 80080f6:	4849      	ldr	r0, [pc, #292]	; (800821c <setup_modem_1st+0x158>)
 80080f8:	f7ff ff98 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80080fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008100:	f010 fd3a 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0",44,0xff);
 8008104:	22ff      	movs	r2, #255	; 0xff
 8008106:	212c      	movs	r1, #44	; 0x2c
 8008108:	4845      	ldr	r0, [pc, #276]	; (8008220 <setup_modem_1st+0x15c>)
 800810a:	f7ff ff8f 	bl	800802c <SerialATprintln>
//  osSignalWait( BIT_1 | BIT_2, 100);
//  osSignalSet( sendDataToServeHandle, BIT_1);
  osDelay(1000);
 800810e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008112:	f010 fd31 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 8008116:	22ff      	movs	r2, #255	; 0xff
 8008118:	210b      	movs	r1, #11
 800811a:	4840      	ldr	r0, [pc, #256]	; (800821c <setup_modem_1st+0x158>)
 800811c:	f7ff ff86 	bl	800802c <SerialATprintln>
  osDelay(1000);
 8008120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008124:	f010 fd28 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CREG=1",9,0xff);
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	2109      	movs	r1, #9
 800812c:	483d      	ldr	r0, [pc, #244]	; (8008224 <setup_modem_1st+0x160>)
 800812e:	f7ff ff7d 	bl	800802c <SerialATprintln>
  osDelay(1000);
 8008132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008136:	f010 fd1f 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGREG=1",10,0xff);
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	210a      	movs	r1, #10
 800813e:	483a      	ldr	r0, [pc, #232]	; (8008228 <setup_modem_1st+0x164>)
 8008140:	f7ff ff74 	bl	800802c <SerialATprintln>
  osDelay(1000);
 8008144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008148:	f010 fd16 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGATT?",9,0xff);
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	2109      	movs	r1, #9
 8008150:	4836      	ldr	r0, [pc, #216]	; (800822c <setup_modem_1st+0x168>)
 8008152:	f7ff ff6b 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008156:	463b      	mov	r3, r7
 8008158:	2264      	movs	r2, #100	; 0x64
 800815a:	2106      	movs	r1, #6
 800815c:	4618      	mov	r0, r3
 800815e:	f010 fd5f 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008162:	4b33      	ldr	r3, [pc, #204]	; (8008230 <setup_modem_1st+0x16c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2102      	movs	r1, #2
 8008168:	4618      	mov	r0, r3
 800816a:	f010 fd19 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 800816e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008172:	f010 fd01 	bl	8018b78 <osDelay>
  SerialATprintln("AT+CGATT=1",10,0xff);
 8008176:	22ff      	movs	r2, #255	; 0xff
 8008178:	210a      	movs	r1, #10
 800817a:	482e      	ldr	r0, [pc, #184]	; (8008234 <setup_modem_1st+0x170>)
 800817c:	f7ff ff56 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008180:	463b      	mov	r3, r7
 8008182:	2264      	movs	r2, #100	; 0x64
 8008184:	2106      	movs	r1, #6
 8008186:	4618      	mov	r0, r3
 8008188:	f010 fd4a 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <setup_modem_1st+0x16c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2102      	movs	r1, #2
 8008192:	4618      	mov	r0, r3
 8008194:	f010 fd04 	bl	8018ba0 <osSignalSet>
  osDelay(2000);
 8008198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800819c:	f010 fcec 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CNMP?", 8, 0xff);
 80081a0:	22ff      	movs	r2, #255	; 0xff
 80081a2:	2108      	movs	r1, #8
 80081a4:	4824      	ldr	r0, [pc, #144]	; (8008238 <setup_modem_1st+0x174>)
 80081a6:	f7ff ff41 	bl	800802c <SerialATprintln>
  	osDelay(2000);
 80081aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80081ae:	f010 fce3 	bl	8018b78 <osDelay>

    SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	210c      	movs	r1, #12
 80081b6:	4821      	ldr	r0, [pc, #132]	; (800823c <setup_modem_1st+0x178>)
 80081b8:	f7ff ff38 	bl	800802c <SerialATprintln>
    osDelay(2000);
 80081bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80081c0:	f010 fcda 	bl	8018b78 <osDelay>

	SerialATprintln("AT+CNACT?", 9, 0xff);
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	2109      	movs	r1, #9
 80081c8:	481d      	ldr	r0, [pc, #116]	; (8008240 <setup_modem_1st+0x17c>)
 80081ca:	f7ff ff2f 	bl	800802c <SerialATprintln>
	osDelay(500);
 80081ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081d2:	f010 fcd1 	bl	8018b78 <osDelay>

     SerialATprintln("AT+CNTPCID=0", 12, 0xff);
 80081d6:	22ff      	movs	r2, #255	; 0xff
 80081d8:	210c      	movs	r1, #12
 80081da:	481a      	ldr	r0, [pc, #104]	; (8008244 <setup_modem_1st+0x180>)
 80081dc:	f7ff ff26 	bl	800802c <SerialATprintln>
     osDelay(1000);
 80081e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081e4:	f010 fcc8 	bl	8018b78 <osDelay>

//  SerialATprintln("AT+CNTP=\"id.pool.ntp.org\",7,0,2", 29, 0xff);
//  SerialATprintln("AT+CNTP=\"173.249.41.186\",7,0,2", 30, 0xff);
//  SerialATprintln("AT+CNTP=\"ntppool.org\",28,1,2", 28, 0xff);
     SerialATprintln("AT+CNTP=\"173.249.41.186\",28,0,2", 35, 0xff);
 80081e8:	22ff      	movs	r2, #255	; 0xff
 80081ea:	2123      	movs	r1, #35	; 0x23
 80081ec:	4816      	ldr	r0, [pc, #88]	; (8008248 <setup_modem_1st+0x184>)
 80081ee:	f7ff ff1d 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80081f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081f6:	f010 fcbf 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CNTP", 7, 0xff);
 80081fa:	22ff      	movs	r2, #255	; 0xff
 80081fc:	2107      	movs	r1, #7
 80081fe:	4813      	ldr	r0, [pc, #76]	; (800824c <setup_modem_1st+0x188>)
 8008200:	f7ff ff14 	bl	800802c <SerialATprintln>
  osDelay(3000);
 8008204:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008208:	f010 fcb6 	bl	8018b78 <osDelay>
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	0801f160 	.word	0x0801f160
 8008218:	0801f188 	.word	0x0801f188
 800821c:	0801efc8 	.word	0x0801efc8
 8008220:	0801f190 	.word	0x0801f190
 8008224:	0801f164 	.word	0x0801f164
 8008228:	0801f170 	.word	0x0801f170
 800822c:	0801ef48 	.word	0x0801ef48
 8008230:	20008184 	.word	0x20008184
 8008234:	0801f17c 	.word	0x0801f17c
 8008238:	0801f1c0 	.word	0x0801f1c0
 800823c:	0801efd4 	.word	0x0801efd4
 8008240:	0801efe4 	.word	0x0801efe4
 8008244:	0801f1cc 	.word	0x0801f1cc
 8008248:	0801f1dc 	.word	0x0801f1dc
 800824c:	0801f1fc 	.word	0x0801f1fc

08008250 <set_cntp>:

void set_cntp(){
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
	    SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 8008256:	22ff      	movs	r2, #255	; 0xff
 8008258:	210c      	movs	r1, #12
 800825a:	481d      	ldr	r0, [pc, #116]	; (80082d0 <set_cntp+0x80>)
 800825c:	f7ff fee6 	bl	800802c <SerialATprintln>
	    osDelay(500);
 8008260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008264:	f010 fc88 	bl	8018b78 <osDelay>

		SerialATprintln("AT+CNACT?", 9, 0xff);
 8008268:	22ff      	movs	r2, #255	; 0xff
 800826a:	2109      	movs	r1, #9
 800826c:	4819      	ldr	r0, [pc, #100]	; (80082d4 <set_cntp+0x84>)
 800826e:	f7ff fedd 	bl	800802c <SerialATprintln>
		osSignalWait( BIT_1 | BIT_2, 100);
 8008272:	463b      	mov	r3, r7
 8008274:	2264      	movs	r2, #100	; 0x64
 8008276:	2106      	movs	r1, #6
 8008278:	4618      	mov	r0, r3
 800827a:	f010 fcd1 	bl	8018c20 <osSignalWait>
		osSignalSet( sendDataToServeHandle, BIT_1);
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <set_cntp+0x88>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2102      	movs	r1, #2
 8008284:	4618      	mov	r0, r3
 8008286:	f010 fc8b 	bl	8018ba0 <osSignalSet>
		osDelay(500);
 800828a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800828e:	f010 fc73 	bl	8018b78 <osDelay>

	     SerialATprintln("AT+CNTPCID=0", 12, 0xff);
 8008292:	22ff      	movs	r2, #255	; 0xff
 8008294:	210c      	movs	r1, #12
 8008296:	4811      	ldr	r0, [pc, #68]	; (80082dc <set_cntp+0x8c>)
 8008298:	f7ff fec8 	bl	800802c <SerialATprintln>
	     osDelay(500);
 800829c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082a0:	f010 fc6a 	bl	8018b78 <osDelay>

//	  SerialATprintln("AT+CNTP=\"id.pool.ntp.org\",7,0,2", 29, 0xff);
//	  SerialATprintln("AT+CNTP=\"173.249.41.186\",7,0,2", 30, 0xff);
	//  SerialATprintln("AT+CNTP=\"ntppool.org\",28,1,2", 28, 0xff);
	     SerialATprintln("AT+CNTP=\"173.249.41.186\",28,0,2", 35, 0xff);
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	2123      	movs	r1, #35	; 0x23
 80082a8:	480d      	ldr	r0, [pc, #52]	; (80082e0 <set_cntp+0x90>)
 80082aa:	f7ff febf 	bl	800802c <SerialATprintln>
	     	  osDelay(1000);
 80082ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082b2:	f010 fc61 	bl	8018b78 <osDelay>

	  SerialATprintln("AT+CNTP", 7, 0xff);
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	2107      	movs	r1, #7
 80082ba:	480a      	ldr	r0, [pc, #40]	; (80082e4 <set_cntp+0x94>)
 80082bc:	f7ff feb6 	bl	800802c <SerialATprintln>
	  osDelay(3000);
 80082c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082c4:	f010 fc58 	bl	8018b78 <osDelay>

}
 80082c8:	bf00      	nop
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	0801efd4 	.word	0x0801efd4
 80082d4:	0801efe4 	.word	0x0801efe4
 80082d8:	20008184 	.word	0x20008184
 80082dc:	0801f1cc 	.word	0x0801f1cc
 80082e0:	0801f1dc 	.word	0x0801f1dc
 80082e4:	0801f1fc 	.word	0x0801f1fc

080082e8 <setup_RTC_periode>:
void setup_RTC_periode() {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
	SerialATprintln("AT+CCLK?", 8, 0xff);
 80082ec:	22ff      	movs	r2, #255	; 0xff
 80082ee:	2108      	movs	r1, #8
 80082f0:	4804      	ldr	r0, [pc, #16]	; (8008304 <setup_RTC_periode+0x1c>)
 80082f2:	f7ff fe9b 	bl	800802c <SerialATprintln>
	osDelay(3000);
 80082f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80082fa:	f010 fc3d 	bl	8018b78 <osDelay>
}
 80082fe:	bf00      	nop
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	0801f204 	.word	0x0801f204

08008308 <setup_modem>:
void setup_modem(){
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
//  enable_modem();
//  SerialATreadString(datarxSIM,BUFFSIZESIM,5000);
//  SerialMonprintlnSIM(" ",1,1000);

	buffclearSIM();
 800830e:	f7ff fe25 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT",2,0xff);
 8008312:	22ff      	movs	r2, #255	; 0xff
 8008314:	2102      	movs	r1, #2
 8008316:	483a      	ldr	r0, [pc, #232]	; (8008400 <setup_modem+0xf8>)
 8008318:	f7ff fe88 	bl	800802c <SerialATprintln>
  osDelay(500);
 800831c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008320:	f010 fc2a 	bl	8018b78 <osDelay>
//  SerialATreadString(datarxSIM,BUFFSIZESIM,2000);
//  SerialMonprintlnSIM(datarxSIM,buffsizeSIM(datarxSIM),500);
//  osDelay(500);
  buffclearSIM();
 8008324:	f7ff fe1a 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CSQ",6,0xff);
 8008328:	22ff      	movs	r2, #255	; 0xff
 800832a:	2106      	movs	r1, #6
 800832c:	4835      	ldr	r0, [pc, #212]	; (8008404 <setup_modem+0xfc>)
 800832e:	f7ff fe7d 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008332:	463b      	mov	r3, r7
 8008334:	2264      	movs	r2, #100	; 0x64
 8008336:	2106      	movs	r1, #6
 8008338:	4618      	mov	r0, r3
 800833a:	f010 fc71 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800833e:	4b32      	ldr	r3, [pc, #200]	; (8008408 <setup_modem+0x100>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2102      	movs	r1, #2
 8008344:	4618      	mov	r0, r3
 8008346:	f010 fc2b 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 800834a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800834e:	f010 fc13 	bl	8018b78 <osDelay>

	buffclearSIM();
 8008352:	f7ff fe03 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0,0",44,0xff);
 8008356:	22ff      	movs	r2, #255	; 0xff
 8008358:	212c      	movs	r1, #44	; 0x2c
 800835a:	482c      	ldr	r0, [pc, #176]	; (800840c <setup_modem+0x104>)
 800835c:	f7ff fe66 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008360:	463b      	mov	r3, r7
 8008362:	2264      	movs	r2, #100	; 0x64
 8008364:	2106      	movs	r1, #6
 8008366:	4618      	mov	r0, r3
 8008368:	f010 fc5a 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800836c:	4b26      	ldr	r3, [pc, #152]	; (8008408 <setup_modem+0x100>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2102      	movs	r1, #2
 8008372:	4618      	mov	r0, r3
 8008374:	f010 fc14 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800837c:	f010 fbfc 	bl	8018b78 <osDelay>

	buffclearSIM();
 8008380:	f7ff fdec 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGDCONT?",11,0xff);
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	210b      	movs	r1, #11
 8008388:	4821      	ldr	r0, [pc, #132]	; (8008410 <setup_modem+0x108>)
 800838a:	f7ff fe4f 	bl	800802c <SerialATprintln>
  osDelay(2000);
 800838e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008392:	f010 fbf1 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGATT=1",10,0xff);
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	210a      	movs	r1, #10
 800839a:	481e      	ldr	r0, [pc, #120]	; (8008414 <setup_modem+0x10c>)
 800839c:	f7ff fe46 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80083a0:	463b      	mov	r3, r7
 80083a2:	2264      	movs	r2, #100	; 0x64
 80083a4:	2106      	movs	r1, #6
 80083a6:	4618      	mov	r0, r3
 80083a8:	f010 fc3a 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80083ac:	4b16      	ldr	r3, [pc, #88]	; (8008408 <setup_modem+0x100>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2102      	movs	r1, #2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f010 fbf4 	bl	8018ba0 <osSignalSet>
  osDelay(2000);
 80083b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80083bc:	f010 fbdc 	bl	8018b78 <osDelay>

  SerialATprintln("AT+SHCONF=\"URL\",\"http://dev-tayra.digitalisasi-project.com\"",59,0xff);
 80083c0:	22ff      	movs	r2, #255	; 0xff
 80083c2:	213b      	movs	r1, #59	; 0x3b
 80083c4:	4814      	ldr	r0, [pc, #80]	; (8008418 <setup_modem+0x110>)
 80083c6:	f7ff fe31 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80083ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083ce:	f010 fbd3 	bl	8018b78 <osDelay>

  SerialATprintln("AT+SHCONF=\"BODYLEN\",1100",24,0xff);
 80083d2:	22ff      	movs	r2, #255	; 0xff
 80083d4:	2118      	movs	r1, #24
 80083d6:	4811      	ldr	r0, [pc, #68]	; (800841c <setup_modem+0x114>)
 80083d8:	f7ff fe28 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80083dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083e0:	f010 fbca 	bl	8018b78 <osDelay>

  SerialATprintln("AT+SHCONF=\"HEADERLEN\",350",25,0xff);
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	2119      	movs	r1, #25
 80083e8:	480d      	ldr	r0, [pc, #52]	; (8008420 <setup_modem+0x118>)
 80083ea:	f7ff fe1f 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80083ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083f2:	f010 fbc1 	bl	8018b78 <osDelay>
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	0801f160 	.word	0x0801f160
 8008404:	0801f188 	.word	0x0801f188
 8008408:	20008184 	.word	0x20008184
 800840c:	0801ef98 	.word	0x0801ef98
 8008410:	0801efc8 	.word	0x0801efc8
 8008414:	0801f17c 	.word	0x0801f17c
 8008418:	0801f210 	.word	0x0801f210
 800841c:	0801ef60 	.word	0x0801ef60
 8008420:	0801ef7c 	.word	0x0801ef7c

08008424 <sendToServer>:

void sendToServer(char * datastr, int leng){
 8008424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008426:	b08d      	sub	sp, #52	; 0x34
 8008428:	af00      	add	r7, sp, #0
 800842a:	6178      	str	r0, [r7, #20]
 800842c:	6139      	str	r1, [r7, #16]
 800842e:	466b      	mov	r3, sp
 8008430:	461e      	mov	r6, r3

//	buffclearSIM();
	SerialMonprintlnSIM("Send To Server", 14, 500);
 8008432:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008436:	210e      	movs	r1, #14
 8008438:	48bf      	ldr	r0, [pc, #764]	; (8008738 <sendToServer+0x314>)
 800843a:	f7ff fdab 	bl	8007f94 <SerialMonprintlnSIM>
  SerialATprintln("AT+CGDCONT?",11,700);
 800843e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008442:	210b      	movs	r1, #11
 8008444:	48bd      	ldr	r0, [pc, #756]	; (800873c <sendToServer+0x318>)
 8008446:	f7ff fdf1 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800844a:	463b      	mov	r3, r7
 800844c:	2264      	movs	r2, #100	; 0x64
 800844e:	2106      	movs	r1, #6
 8008450:	4618      	mov	r0, r3
 8008452:	f010 fbe5 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008456:	4bba      	ldr	r3, [pc, #744]	; (8008740 <sendToServer+0x31c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2102      	movs	r1, #2
 800845c:	4618      	mov	r0, r3
 800845e:	f010 fb9f 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008466:	f010 fb87 	bl	8018b78 <osDelay>

	buffclearSIM();
 800846a:	f7ff fd77 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0,0",44,1000);
 800846e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008472:	212c      	movs	r1, #44	; 0x2c
 8008474:	48b3      	ldr	r0, [pc, #716]	; (8008744 <sendToServer+0x320>)
 8008476:	f7ff fdd9 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800847a:	463b      	mov	r3, r7
 800847c:	2264      	movs	r2, #100	; 0x64
 800847e:	2106      	movs	r1, #6
 8008480:	4618      	mov	r0, r3
 8008482:	f010 fbcd 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008486:	4bae      	ldr	r3, [pc, #696]	; (8008740 <sendToServer+0x31c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f010 fb87 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008496:	f010 fb6f 	bl	8018b78 <osDelay>
//
  SerialATprintln("AT+CNACT=0,1",12,1000);
 800849a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800849e:	210c      	movs	r1, #12
 80084a0:	48a9      	ldr	r0, [pc, #676]	; (8008748 <sendToServer+0x324>)
 80084a2:	f7ff fdc3 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80084a6:	463b      	mov	r3, r7
 80084a8:	2264      	movs	r2, #100	; 0x64
 80084aa:	2106      	movs	r1, #6
 80084ac:	4618      	mov	r0, r3
 80084ae:	f010 fbb7 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80084b2:	4ba3      	ldr	r3, [pc, #652]	; (8008740 <sendToServer+0x31c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2102      	movs	r1, #2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f010 fb71 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80084be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084c2:	f010 fb59 	bl	8018b78 <osDelay>

//	buffclearSIM();
  SerialATprintln("AT+CNACT?",9,700);
 80084c6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80084ca:	2109      	movs	r1, #9
 80084cc:	489f      	ldr	r0, [pc, #636]	; (800874c <sendToServer+0x328>)
 80084ce:	f7ff fdad 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80084d2:	463b      	mov	r3, r7
 80084d4:	2264      	movs	r2, #100	; 0x64
 80084d6:	2106      	movs	r1, #6
 80084d8:	4618      	mov	r0, r3
 80084da:	f010 fba1 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80084de:	4b98      	ldr	r3, [pc, #608]	; (8008740 <sendToServer+0x31c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2102      	movs	r1, #2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f010 fb5b 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80084ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084ee:	f010 fb43 	bl	8018b78 <osDelay>

//	buffclearSIM();
  SerialATprintln("AT+SHCONN",9,700);
 80084f2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80084f6:	2109      	movs	r1, #9
 80084f8:	4895      	ldr	r0, [pc, #596]	; (8008750 <sendToServer+0x32c>)
 80084fa:	f7ff fd97 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80084fe:	463b      	mov	r3, r7
 8008500:	2264      	movs	r2, #100	; 0x64
 8008502:	2106      	movs	r1, #6
 8008504:	4618      	mov	r0, r3
 8008506:	f010 fb8b 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800850a:	4b8d      	ldr	r3, [pc, #564]	; (8008740 <sendToServer+0x31c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2102      	movs	r1, #2
 8008510:	4618      	mov	r0, r3
 8008512:	f010 fb45 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800851a:	f010 fb2d 	bl	8018b78 <osDelay>

//	buffclearSIM();
  SerialATprintln(ATSHSTATE,sizeof(ATSHSTATE),1000);
 800851e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008522:	210c      	movs	r1, #12
 8008524:	488b      	ldr	r0, [pc, #556]	; (8008754 <sendToServer+0x330>)
 8008526:	f7ff fd81 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800852a:	463b      	mov	r3, r7
 800852c:	2264      	movs	r2, #100	; 0x64
 800852e:	2106      	movs	r1, #6
 8008530:	4618      	mov	r0, r3
 8008532:	f010 fb75 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008536:	4b82      	ldr	r3, [pc, #520]	; (8008740 <sendToServer+0x31c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2102      	movs	r1, #2
 800853c:	4618      	mov	r0, r3
 800853e:	f010 fb2f 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008546:	f010 fb17 	bl	8018b78 <osDelay>

//	buffclearSIM();
  SerialATprintln(ATSHAHEAD2,sizeof(ATSHAHEAD2),1000);
 800854a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800854e:	2125      	movs	r1, #37	; 0x25
 8008550:	4881      	ldr	r0, [pc, #516]	; (8008758 <sendToServer+0x334>)
 8008552:	f7ff fd6b 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008556:	463b      	mov	r3, r7
 8008558:	2264      	movs	r2, #100	; 0x64
 800855a:	2106      	movs	r1, #6
 800855c:	4618      	mov	r0, r3
 800855e:	f010 fb5f 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008562:	4b77      	ldr	r3, [pc, #476]	; (8008740 <sendToServer+0x31c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f010 fb19 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 800856e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008572:	f010 fb01 	bl	8018b78 <osDelay>

	buffclearSIM();
 8008576:	f7ff fcf1 	bl	8007f5c <buffclearSIM>
    SerialATprintln(ATSHAHEAD3,sizeof(ATSHAHEAD3),1000);
 800857a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800857e:	213e      	movs	r1, #62	; 0x3e
 8008580:	4876      	ldr	r0, [pc, #472]	; (800875c <sendToServer+0x338>)
 8008582:	f7ff fd53 	bl	800802c <SerialATprintln>
    osSignalWait( BIT_1 | BIT_2, 100);
 8008586:	463b      	mov	r3, r7
 8008588:	2264      	movs	r2, #100	; 0x64
 800858a:	2106      	movs	r1, #6
 800858c:	4618      	mov	r0, r3
 800858e:	f010 fb47 	bl	8018c20 <osSignalWait>
    osSignalSet( sendDataToServeHandle, BIT_1);
 8008592:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <sendToServer+0x31c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2102      	movs	r1, #2
 8008598:	4618      	mov	r0, r3
 800859a:	f010 fb01 	bl	8018ba0 <osSignalSet>
    osDelay(1000);
 800859e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085a2:	f010 fae9 	bl	8018b78 <osDelay>

  int sizedatastr;
  if(leng>10 && leng<100)sizedatastr=2;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b0a      	cmp	r3, #10
 80085aa:	dd05      	ble.n	80085b8 <sendToServer+0x194>
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b63      	cmp	r3, #99	; 0x63
 80085b0:	dc02      	bgt.n	80085b8 <sendToServer+0x194>
 80085b2:	2302      	movs	r3, #2
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b6:	e00b      	b.n	80085d0 <sendToServer+0x1ac>
  else if(leng>100 && leng<1000)sizedatastr=3;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2b64      	cmp	r3, #100	; 0x64
 80085bc:	dd06      	ble.n	80085cc <sendToServer+0x1a8>
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085c4:	da02      	bge.n	80085cc <sendToServer+0x1a8>
 80085c6:	2303      	movs	r3, #3
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ca:	e001      	b.n	80085d0 <sendToServer+0x1ac>
  else sizedatastr=1;
 80085cc:	2301      	movs	r3, #1
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  char ATSHBOD1[sizeof(ATSHBOD)+sizedatastr+7];
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	f103 0411 	add.w	r4, r3, #17
 80085d6:	4623      	mov	r3, r4
 80085d8:	3b01      	subs	r3, #1
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
 80085dc:	4620      	mov	r0, r4
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	00cb      	lsls	r3, r1, #3
 80085ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80085f0:	00c2      	lsls	r2, r0, #3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	00cb      	lsls	r3, r1, #3
 8008602:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008606:	00c2      	lsls	r2, r0, #3
 8008608:	1de3      	adds	r3, r4, #7
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	ebad 0d03 	sub.w	sp, sp, r3
 8008612:	466b      	mov	r3, sp
 8008614:	3300      	adds	r3, #0
 8008616:	627b      	str	r3, [r7, #36]	; 0x24
  char lengthdatastr[sizedatastr];
 8008618:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800861a:	1e6b      	subs	r3, r5, #1
 800861c:	623b      	str	r3, [r7, #32]
 800861e:	462b      	mov	r3, r5
 8008620:	4618      	mov	r0, r3
 8008622:	f04f 0100 	mov.w	r1, #0
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	00cb      	lsls	r3, r1, #3
 8008630:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008634:	00c2      	lsls	r2, r0, #3
 8008636:	462b      	mov	r3, r5
 8008638:	4618      	mov	r0, r3
 800863a:	f04f 0100 	mov.w	r1, #0
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	00cb      	lsls	r3, r1, #3
 8008648:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800864c:	00c2      	lsls	r2, r0, #3
 800864e:	462b      	mov	r3, r5
 8008650:	3307      	adds	r3, #7
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	ebad 0d03 	sub.w	sp, sp, r3
 800865a:	466b      	mov	r3, sp
 800865c:	3300      	adds	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]
  strcat(ATSHBOD1,ATSHBOD);
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	493f      	ldr	r1, [pc, #252]	; (8008760 <sendToServer+0x33c>)
 8008664:	4618      	mov	r0, r3
 8008666:	f013 fedb 	bl	801c420 <strcat>
  sprintf(lengthdatastr,"%d",leng);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	493d      	ldr	r1, [pc, #244]	; (8008764 <sendToServer+0x340>)
 8008670:	4618      	mov	r0, r3
 8008672:	f013 feb5 	bl	801c3e0 <siprintf>
  strcat(ATSHBOD1,lengthdatastr);
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f013 fecf 	bl	801c420 <strcat>
  strcat(ATSHBOD1,",10000");
 8008682:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8008684:	4628      	mov	r0, r5
 8008686:	f7f7 fdad 	bl	80001e4 <strlen>
 800868a:	4603      	mov	r3, r0
 800868c:	442b      	add	r3, r5
 800868e:	4a36      	ldr	r2, [pc, #216]	; (8008768 <sendToServer+0x344>)
 8008690:	6810      	ldr	r0, [r2, #0]
 8008692:	6018      	str	r0, [r3, #0]
 8008694:	8891      	ldrh	r1, [r2, #4]
 8008696:	7992      	ldrb	r2, [r2, #6]
 8008698:	8099      	strh	r1, [r3, #4]
 800869a:	719a      	strb	r2, [r3, #6]
//  SerialMonprintlnSIM(ATSHBOD1,sizeof(ATSHBOD1),1000);

  buffclearSIM();
 800869c:	f7ff fc5e 	bl	8007f5c <buffclearSIM>
  SerialATprintln(ATSHBOD1,sizeof(ATSHBOD1),1000);
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086a6:	4621      	mov	r1, r4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fcbf 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80086ae:	463b      	mov	r3, r7
 80086b0:	2264      	movs	r2, #100	; 0x64
 80086b2:	2106      	movs	r1, #6
 80086b4:	4618      	mov	r0, r3
 80086b6:	f010 fab3 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80086ba:	4b21      	ldr	r3, [pc, #132]	; (8008740 <sendToServer+0x31c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f010 fa6d 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80086c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086ca:	f010 fa55 	bl	8018b78 <osDelay>

// Send DataSTR
  buffclearSIM();
 80086ce:	f7ff fc45 	bl	8007f5c <buffclearSIM>
  SerialATprintln(datastr,leng,1000);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086d8:	4619      	mov	r1, r3
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f7ff fca6 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80086e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086e4:	f010 fa48 	bl	8018b78 <osDelay>

    buffclearSIM();
 80086e8:	f7ff fc38 	bl	8007f5c <buffclearSIM>
  SerialATprintln(ATSHREQ,sizeof(ATSHREQ),800);
 80086ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80086f0:	2146      	movs	r1, #70	; 0x46
 80086f2:	481e      	ldr	r0, [pc, #120]	; (800876c <sendToServer+0x348>)
 80086f4:	f7ff fc9a 	bl	800802c <SerialATprintln>

  osDelay(8000);
 80086f8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80086fc:	f010 fa3c 	bl	8018b78 <osDelay>
	buffclearSIM();
 8008700:	f7ff fc2c 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+SHDISC",9,0xff);
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	2109      	movs	r1, #9
 8008708:	4819      	ldr	r0, [pc, #100]	; (8008770 <sendToServer+0x34c>)
 800870a:	f7ff fc8f 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800870e:	463b      	mov	r3, r7
 8008710:	2264      	movs	r2, #100	; 0x64
 8008712:	2106      	movs	r1, #6
 8008714:	4618      	mov	r0, r3
 8008716:	f010 fa83 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <sendToServer+0x31c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2102      	movs	r1, #2
 8008720:	4618      	mov	r0, r3
 8008722:	f010 fa3d 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800872a:	f010 fa25 	bl	8018b78 <osDelay>
 800872e:	46b5      	mov	sp, r6
}
 8008730:	bf00      	nop
 8008732:	3734      	adds	r7, #52	; 0x34
 8008734:	46bd      	mov	sp, r7
 8008736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008738:	0801f24c 	.word	0x0801f24c
 800873c:	0801efc8 	.word	0x0801efc8
 8008740:	20008184 	.word	0x20008184
 8008744:	0801ef98 	.word	0x0801ef98
 8008748:	0801efd4 	.word	0x0801efd4
 800874c:	0801efe4 	.word	0x0801efe4
 8008750:	0801eff0 	.word	0x0801eff0
 8008754:	200000bc 	.word	0x200000bc
 8008758:	200000c8 	.word	0x200000c8
 800875c:	200000f0 	.word	0x200000f0
 8008760:	20000178 	.word	0x20000178
 8008764:	0801f25c 	.word	0x0801f25c
 8008768:	0801f260 	.word	0x0801f260
 800876c:	20000130 	.word	0x20000130
 8008770:	0801f0d0 	.word	0x0801f0d0

08008774 <mqtt_demo>:
  osDelay(1000);
}

// Subscribe to MQTT Topic
void mqtt_demo(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0

  SerialATprintln("AT+CGNAPN",9,0xff);
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	2109      	movs	r1, #9
 800877e:	48a4      	ldr	r0, [pc, #656]	; (8008a10 <mqtt_demo+0x29c>)
 8008780:	f7ff fc54 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008784:	463b      	mov	r3, r7
 8008786:	2264      	movs	r2, #100	; 0x64
 8008788:	2106      	movs	r1, #6
 800878a:	4618      	mov	r0, r3
 800878c:	f010 fa48 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008790:	4ba0      	ldr	r3, [pc, #640]	; (8008a14 <mqtt_demo+0x2a0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2102      	movs	r1, #2
 8008796:	4618      	mov	r0, r3
 8008798:	f010 fa02 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 800879c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087a0:	f010 f9ea 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGDCONT?",11,0xff);
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	210b      	movs	r1, #11
 80087a8:	489b      	ldr	r0, [pc, #620]	; (8008a18 <mqtt_demo+0x2a4>)
 80087aa:	f7ff fc3f 	bl	800802c <SerialATprintln>
  osDelay(1000);
 80087ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087b2:	f010 f9e1 	bl	8018b78 <osDelay>

  buffclearSIM();
 80087b6:	f7ff fbd1 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0",44,0xff);
 80087ba:	22ff      	movs	r2, #255	; 0xff
 80087bc:	212c      	movs	r1, #44	; 0x2c
 80087be:	4897      	ldr	r0, [pc, #604]	; (8008a1c <mqtt_demo+0x2a8>)
 80087c0:	f7ff fc34 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80087c4:	463b      	mov	r3, r7
 80087c6:	2264      	movs	r2, #100	; 0x64
 80087c8:	2106      	movs	r1, #6
 80087ca:	4618      	mov	r0, r3
 80087cc:	f010 fa28 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80087d0:	4b90      	ldr	r3, [pc, #576]	; (8008a14 <mqtt_demo+0x2a0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2102      	movs	r1, #2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f010 f9e2 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80087dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087e0:	f010 f9ca 	bl	8018b78 <osDelay>

  buffclearSIM();
 80087e4:	f7ff fbba 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGDCONT?",11,0xff);;
 80087e8:	22ff      	movs	r2, #255	; 0xff
 80087ea:	210b      	movs	r1, #11
 80087ec:	488a      	ldr	r0, [pc, #552]	; (8008a18 <mqtt_demo+0x2a4>)
 80087ee:	f7ff fc1d 	bl	800802c <SerialATprintln>

  buffclearSIM();
 80087f2:	f7ff fbb3 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CREG=1",9,0xff);
 80087f6:	22ff      	movs	r2, #255	; 0xff
 80087f8:	2109      	movs	r1, #9
 80087fa:	4889      	ldr	r0, [pc, #548]	; (8008a20 <mqtt_demo+0x2ac>)
 80087fc:	f7ff fc16 	bl	800802c <SerialATprintln>
  osDelay(1000);
 8008800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008804:	f010 f9b8 	bl	8018b78 <osDelay>

  buffclearSIM();
 8008808:	f7ff fba8 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CGREG=1",10,0xff);
 800880c:	22ff      	movs	r2, #255	; 0xff
 800880e:	210a      	movs	r1, #10
 8008810:	4884      	ldr	r0, [pc, #528]	; (8008a24 <mqtt_demo+0x2b0>)
 8008812:	f7ff fc0b 	bl	800802c <SerialATprintln>
  osDelay(1000);
 8008816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800881a:	f010 f9ad 	bl	8018b78 <osDelay>

  SerialATprintln("AT+CGATT?",9,0xff);
 800881e:	22ff      	movs	r2, #255	; 0xff
 8008820:	2109      	movs	r1, #9
 8008822:	4881      	ldr	r0, [pc, #516]	; (8008a28 <mqtt_demo+0x2b4>)
 8008824:	f7ff fc02 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008828:	463b      	mov	r3, r7
 800882a:	2264      	movs	r2, #100	; 0x64
 800882c:	2106      	movs	r1, #6
 800882e:	4618      	mov	r0, r3
 8008830:	f010 f9f6 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008834:	4b77      	ldr	r3, [pc, #476]	; (8008a14 <mqtt_demo+0x2a0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2102      	movs	r1, #2
 800883a:	4618      	mov	r0, r3
 800883c:	f010 f9b0 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008844:	f010 f998 	bl	8018b78 <osDelay>

  buffclearSIM();
 8008848:	f7ff fb88 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 800884c:	22ff      	movs	r2, #255	; 0xff
 800884e:	210c      	movs	r1, #12
 8008850:	4876      	ldr	r0, [pc, #472]	; (8008a2c <mqtt_demo+0x2b8>)
 8008852:	f7ff fbeb 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008856:	463b      	mov	r3, r7
 8008858:	2264      	movs	r2, #100	; 0x64
 800885a:	2106      	movs	r1, #6
 800885c:	4618      	mov	r0, r3
 800885e:	f010 f9df 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008862:	4b6c      	ldr	r3, [pc, #432]	; (8008a14 <mqtt_demo+0x2a0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2102      	movs	r1, #2
 8008868:	4618      	mov	r0, r3
 800886a:	f010 f999 	bl	8018ba0 <osSignalSet>
  osDelay(500);
 800886e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008872:	f010 f981 	bl	8018b78 <osDelay>

  buffclearSIM();
 8008876:	f7ff fb71 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+CNACT?",9,0xff);
 800887a:	22ff      	movs	r2, #255	; 0xff
 800887c:	2109      	movs	r1, #9
 800887e:	486c      	ldr	r0, [pc, #432]	; (8008a30 <mqtt_demo+0x2bc>)
 8008880:	f7ff fbd4 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008884:	463b      	mov	r3, r7
 8008886:	2264      	movs	r2, #100	; 0x64
 8008888:	2106      	movs	r1, #6
 800888a:	4618      	mov	r0, r3
 800888c:	f010 f9c8 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008890:	4b60      	ldr	r3, [pc, #384]	; (8008a14 <mqtt_demo+0x2a0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f010 f982 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 800889c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088a0:	f010 f96a 	bl	8018b78 <osDelay>

  buffclearSIM();
 80088a4:	f7ff fb5a 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+SMDISC",11,0xff);
 80088a8:	22ff      	movs	r2, #255	; 0xff
 80088aa:	210b      	movs	r1, #11
 80088ac:	4861      	ldr	r0, [pc, #388]	; (8008a34 <mqtt_demo+0x2c0>)
 80088ae:	f7ff fbbd 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80088b2:	463b      	mov	r3, r7
 80088b4:	2264      	movs	r2, #100	; 0x64
 80088b6:	2106      	movs	r1, #6
 80088b8:	4618      	mov	r0, r3
 80088ba:	f010 f9b1 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <mqtt_demo+0x2a0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2102      	movs	r1, #2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f010 f96b 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80088ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088ce:	f010 f953 	bl	8018b78 <osDelay>

  buffclearSIM();
 80088d2:	f7ff fb43 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+SMSTATE?",11,0xff);
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	210b      	movs	r1, #11
 80088da:	4857      	ldr	r0, [pc, #348]	; (8008a38 <mqtt_demo+0x2c4>)
 80088dc:	f7ff fba6 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80088e0:	463b      	mov	r3, r7
 80088e2:	2264      	movs	r2, #100	; 0x64
 80088e4:	2106      	movs	r1, #6
 80088e6:	4618      	mov	r0, r3
 80088e8:	f010 f99a 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80088ec:	4b49      	ldr	r3, [pc, #292]	; (8008a14 <mqtt_demo+0x2a0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f010 f954 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80088f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088fc:	f010 f93c 	bl	8018b78 <osDelay>

//  SerialATprintln("AT+SMCONF=\"URL\",\"broker.mqttdashboard.com\",1883",47,0xff);
  SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 8008900:	22ff      	movs	r2, #255	; 0xff
 8008902:	2126      	movs	r1, #38	; 0x26
 8008904:	484d      	ldr	r0, [pc, #308]	; (8008a3c <mqtt_demo+0x2c8>)
 8008906:	f7ff fb91 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800890a:	463b      	mov	r3, r7
 800890c:	2264      	movs	r2, #100	; 0x64
 800890e:	2106      	movs	r1, #6
 8008910:	4618      	mov	r0, r3
 8008912:	f010 f985 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008916:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <mqtt_demo+0x2a0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2102      	movs	r1, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f010 f93f 	bl	8018ba0 <osSignalSet>
  osDelay(500);
 8008922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008926:	f010 f927 	bl	8018b78 <osDelay>

  SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 800892a:	22ff      	movs	r2, #255	; 0xff
 800892c:	2117      	movs	r1, #23
 800892e:	4844      	ldr	r0, [pc, #272]	; (8008a40 <mqtt_demo+0x2cc>)
 8008930:	f7ff fb7c 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 8008934:	463b      	mov	r3, r7
 8008936:	2264      	movs	r2, #100	; 0x64
 8008938:	2106      	movs	r1, #6
 800893a:	4618      	mov	r0, r3
 800893c:	f010 f970 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008940:	4b34      	ldr	r3, [pc, #208]	; (8008a14 <mqtt_demo+0x2a0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2102      	movs	r1, #2
 8008946:	4618      	mov	r0, r3
 8008948:	f010 f92a 	bl	8018ba0 <osSignalSet>
  osDelay(500);
 800894c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008950:	f010 f912 	bl	8018b78 <osDelay>

  SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 8008954:	22ff      	movs	r2, #255	; 0xff
 8008956:	2115      	movs	r1, #21
 8008958:	483a      	ldr	r0, [pc, #232]	; (8008a44 <mqtt_demo+0x2d0>)
 800895a:	f7ff fb67 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800895e:	463b      	mov	r3, r7
 8008960:	2264      	movs	r2, #100	; 0x64
 8008962:	2106      	movs	r1, #6
 8008964:	4618      	mov	r0, r3
 8008966:	f010 f95b 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 800896a:	4b2a      	ldr	r3, [pc, #168]	; (8008a14 <mqtt_demo+0x2a0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2102      	movs	r1, #2
 8008970:	4618      	mov	r0, r3
 8008972:	f010 f915 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 8008976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800897a:	f010 f8fd 	bl	8018b78 <osDelay>
//  SerialATprintln("AT+SMCONF=\"CLIENTID\",\"clientId-RjE651foVf\"",42,0xff);
//  osSignalWait( BIT_1 | BIT_2, 100);
//  osSignalSet( sendDataToServeHandle, BIT_1);
//  osDelay(2000);

  buffclearSIM();
 800897e:	f7ff faed 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+SMCONN",9,0xff);
 8008982:	22ff      	movs	r2, #255	; 0xff
 8008984:	2109      	movs	r1, #9
 8008986:	4830      	ldr	r0, [pc, #192]	; (8008a48 <mqtt_demo+0x2d4>)
 8008988:	f7ff fb50 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 800898c:	463b      	mov	r3, r7
 800898e:	2264      	movs	r2, #100	; 0x64
 8008990:	2106      	movs	r1, #6
 8008992:	4618      	mov	r0, r3
 8008994:	f010 f944 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <mqtt_demo+0x2a0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2102      	movs	r1, #2
 800899e:	4618      	mov	r0, r3
 80089a0:	f010 f8fe 	bl	8018ba0 <osSignalSet>
  osDelay(10000);
 80089a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a8:	f010 f8e6 	bl	8018b78 <osDelay>

  buffclearSIM();
 80089ac:	f7ff fad6 	bl	8007f5c <buffclearSIM>
  SerialATprintln("AT+SMSTATE?",11,0xff);
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	210b      	movs	r1, #11
 80089b4:	4820      	ldr	r0, [pc, #128]	; (8008a38 <mqtt_demo+0x2c4>)
 80089b6:	f7ff fb39 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80089ba:	463b      	mov	r3, r7
 80089bc:	2264      	movs	r2, #100	; 0x64
 80089be:	2106      	movs	r1, #6
 80089c0:	4618      	mov	r0, r3
 80089c2:	f010 f92d 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <mqtt_demo+0x2a0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2102      	movs	r1, #2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f010 f8e7 	bl	8018ba0 <osSignalSet>
  osDelay(1000);
 80089d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089d6:	f010 f8cf 	bl	8018b78 <osDelay>

  buffclearSIM();
 80089da:	f7ff fabf 	bl	8007f5c <buffclearSIM>
//  SerialATprintln("AT+SMSUB=\"testtopic/Flooerp\",1", 30, 0xff);
//  SerialATprintln("AT+SMSUB=\"tayra/message\",1", 26, 0xff); //tayra/message
//  SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
  SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 80089de:	22ff      	movs	r2, #255	; 0xff
 80089e0:	2119      	movs	r1, #25
 80089e2:	481a      	ldr	r0, [pc, #104]	; (8008a4c <mqtt_demo+0x2d8>)
 80089e4:	f7ff fb22 	bl	800802c <SerialATprintln>
  osSignalWait( BIT_1 | BIT_2, 100);
 80089e8:	463b      	mov	r3, r7
 80089ea:	2264      	movs	r2, #100	; 0x64
 80089ec:	2106      	movs	r1, #6
 80089ee:	4618      	mov	r0, r3
 80089f0:	f010 f916 	bl	8018c20 <osSignalWait>
  osSignalSet( sendDataToServeHandle, BIT_1);
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <mqtt_demo+0x2a0>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2102      	movs	r1, #2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f010 f8d0 	bl	8018ba0 <osSignalSet>
  osDelay(3000);
 8008a00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008a04:	f010 f8b8 	bl	8018b78 <osDelay>
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	0801f2f0 	.word	0x0801f2f0
 8008a14:	20008184 	.word	0x20008184
 8008a18:	0801efc8 	.word	0x0801efc8
 8008a1c:	0801f190 	.word	0x0801f190
 8008a20:	0801f164 	.word	0x0801f164
 8008a24:	0801f170 	.word	0x0801f170
 8008a28:	0801ef48 	.word	0x0801ef48
 8008a2c:	0801efd4 	.word	0x0801efd4
 8008a30:	0801efe4 	.word	0x0801efe4
 8008a34:	0801f298 	.word	0x0801f298
 8008a38:	0801f2fc 	.word	0x0801f2fc
 8008a3c:	0801f2a4 	.word	0x0801f2a4
 8008a40:	0801f2cc 	.word	0x0801f2cc
 8008a44:	0801f308 	.word	0x0801f308
 8008a48:	0801f2e4 	.word	0x0801f2e4
 8008a4c:	0801f320 	.word	0x0801f320

08008a50 <_write>:
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
//  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}
int _write(int file, char *ptr, int len){
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 0xFFFF);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	4804      	ldr	r0, [pc, #16]	; (8008a78 <_write+0x28>)
 8008a68:	f00b fc98 	bl	801439c <HAL_UART_Transmit>
  return len;
 8008a6c:	687b      	ldr	r3, [r7, #4]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20002fe0 	.word	0x20002fe0

08008a7c <runGyro>:
	enable_modem();
	if(onlineMode)  setup_modem();
}

void runGyro()
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  osSignalSet( readGyroHandle, BIT_1 | BIT_2);
 8008a80:	4b03      	ldr	r3, [pc, #12]	; (8008a90 <runGyro+0x14>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2106      	movs	r1, #6
 8008a86:	4618      	mov	r0, r3
 8008a88:	f010 f88a 	bl	8018ba0 <osSignalSet>
}
 8008a8c:	bf00      	nop
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20009124 	.word	0x20009124

08008a94 <datauart3size>:

int datauart3size(char buf[])
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
	while(buf[i] != 0x03) i++;
 8008aa0:	e002      	b.n	8008aa8 <datauart3size+0x14>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d1f6      	bne.n	8008aa2 <datauart3size+0xe>
	return i+1;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <bufsizechararray>:
	while(*buf++ != '\0') i++;
	return i;
}

int bufsizechararray(char buf[])
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	int i = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]
	while(buf[i] != '\0') i++;
 8008ad0:	e002      	b.n	8008ad8 <bufsizechararray+0x14>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1f6      	bne.n	8008ad2 <bufsizechararray+0xe>
	return i+1;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <bufclear>:

void bufclear(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
	for (int i=0; i < 1024; i++)
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	e00c      	b.n	8008b1a <bufclear+0x26>
	{
		buffer[i] = '\0';
 8008b00:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <bufclear+0x3c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	701a      	strb	r2, [r3, #0]
		mydata[i] = '\0';
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <bufclear+0x40>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4413      	add	r3, r2
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
	for (int i=0; i < 1024; i++)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3301      	adds	r3, #1
 8008b18:	607b      	str	r3, [r7, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b20:	dbee      	blt.n	8008b00 <bufclear+0xc>
	}
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	20007244 	.word	0x20007244
 8008b34:	200046c8 	.word	0x200046c8

08008b38 <charToInt>:

int charToInt(char c){
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]

return c - '0';
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	3b30      	subs	r3, #48	; 0x30
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
	...

08008b54 <tx_com>:

static void tx_com( uint8_t *tx_buffer, uint16_t len )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit( &huart1, tx_buffer, len, 1000 );
 8008b60:	887a      	ldrh	r2, [r7, #2]
 8008b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4803      	ldr	r0, [pc, #12]	; (8008b78 <tx_com+0x24>)
 8008b6a:	f00b fc17 	bl	801439c <HAL_UART_Transmit>
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20002fe0 	.word	0x20002fe0

08008b7c <platform_write>:

static int32_t platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
                              uint16_t len)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	461a      	mov	r2, r3
 8008b88:	460b      	mov	r3, r1
 8008b8a:	72fb      	strb	r3, [r7, #11]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg,
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	893b      	ldrh	r3, [r7, #8]
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	21d7      	movs	r1, #215	; 0xd7
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f008 f8e4 	bl	8010d74 <HAL_I2C_Mem_Write>
					  I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <platform_read>:

static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
                             uint16_t len)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af04      	add	r7, sp, #16
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	72fb      	strb	r3, [r7, #11]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg,
 8008bca:	7afb      	ldrb	r3, [r7, #11]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	893b      	ldrh	r3, [r7, #8]
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2301      	movs	r3, #1
 8008bde:	21d7      	movs	r1, #215	; 0xd7
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f008 f9db 	bl	8010f9c <HAL_I2C_Mem_Read>
				   I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
  return 0;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <sendMQTTMAIN>:

void sendMQTTMAIN(){
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b08f      	sub	sp, #60	; 0x3c
 8008bf4:	af00      	add	r7, sp, #0
	uart2done = false;
 8008bf6:	4ba5      	ldr	r3, [pc, #660]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
	sprintf(uart2_at,"AT+CPSI?");
 8008bfc:	49a4      	ldr	r1, [pc, #656]	; (8008e90 <sendMQTTMAIN+0x2a0>)
 8008bfe:	48a5      	ldr	r0, [pc, #660]	; (8008e94 <sendMQTTMAIN+0x2a4>)
 8008c00:	f013 fbee 	bl	801c3e0 <siprintf>
	printf(uart2_at);
 8008c04:	48a3      	ldr	r0, [pc, #652]	; (8008e94 <sendMQTTMAIN+0x2a4>)
 8008c06:	f013 fb4d 	bl	801c2a4 <iprintf>
	SerialATprintln("AT+CPSI?", 8, 0xff);
 8008c0a:	22ff      	movs	r2, #255	; 0xff
 8008c0c:	2108      	movs	r1, #8
 8008c0e:	48a0      	ldr	r0, [pc, #640]	; (8008e90 <sendMQTTMAIN+0x2a0>)
 8008c10:	f7ff fa0c 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8008c14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c18:	f00f ffae 	bl	8018b78 <osDelay>
	for(int y=0;y<30;y++){
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	e009      	b.n	8008c36 <sendMQTTMAIN+0x46>
				osDelay(200);
 8008c22:	20c8      	movs	r0, #200	; 0xc8
 8008c24:	f00f ffa8 	bl	8018b78 <osDelay>
				if(uart2done)break;
 8008c28:	4b98      	ldr	r3, [pc, #608]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <sendMQTTMAIN+0x4e>
	for(int y=0;y<30;y++){
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	3301      	adds	r3, #1
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	2b1d      	cmp	r3, #29
 8008c3a:	ddf2      	ble.n	8008c22 <sendMQTTMAIN+0x32>
 8008c3c:	e000      	b.n	8008c40 <sendMQTTMAIN+0x50>
				if(uart2done)break;
 8008c3e:	bf00      	nop
			}
	int cmpint=strcmp(networkstr," GSM");
 8008c40:	4b95      	ldr	r3, [pc, #596]	; (8008e98 <sendMQTTMAIN+0x2a8>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4995      	ldr	r1, [pc, #596]	; (8008e9c <sendMQTTMAIN+0x2ac>)
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f7 fac2 	bl	80001d0 <strcmp>
 8008c4c:	6078      	str	r0, [r7, #4]
	if(cmpint != 0){
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d028      	beq.n	8008ca6 <sendMQTTMAIN+0xb6>
		if(signal<-115){
 8008c54:	4b92      	ldr	r3, [pc, #584]	; (8008ea0 <sendMQTTMAIN+0x2b0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f113 0f73 	cmn.w	r3, #115	; 0x73
 8008c5c:	da5c      	bge.n	8008d18 <sendMQTTMAIN+0x128>
				SerialATprintln("AT+CNMP=13", 10, 0xff);
 8008c5e:	22ff      	movs	r2, #255	; 0xff
 8008c60:	210a      	movs	r1, #10
 8008c62:	4890      	ldr	r0, [pc, #576]	; (8008ea4 <sendMQTTMAIN+0x2b4>)
 8008c64:	f7ff f9e2 	bl	800802c <SerialATprintln>
				osDelay(2000);
 8008c68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c6c:	f00f ff84 	bl	8018b78 <osDelay>
				reset_mqtt();
 8008c70:	f001 f808 	bl	8009c84 <reset_mqtt>
				SerialATprintln("AT+SMCONN",9,0xff);
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	2109      	movs	r1, #9
 8008c78:	488b      	ldr	r0, [pc, #556]	; (8008ea8 <sendMQTTMAIN+0x2b8>)
 8008c7a:	f7ff f9d7 	bl	800802c <SerialATprintln>
				uart2done = false;
 8008c7e:	4b83      	ldr	r3, [pc, #524]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
				for(int y=0;y<30;y++){
 8008c84:	2300      	movs	r3, #0
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
 8008c88:	e009      	b.n	8008c9e <sendMQTTMAIN+0xae>
					osDelay(200);
 8008c8a:	20c8      	movs	r0, #200	; 0xc8
 8008c8c:	f00f ff74 	bl	8018b78 <osDelay>
					if(uart2done)break;
 8008c90:	4b7e      	ldr	r3, [pc, #504]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d13c      	bne.n	8008d12 <sendMQTTMAIN+0x122>
				for(int y=0;y<30;y++){
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	2b1d      	cmp	r3, #29
 8008ca2:	ddf2      	ble.n	8008c8a <sendMQTTMAIN+0x9a>
 8008ca4:	e038      	b.n	8008d18 <sendMQTTMAIN+0x128>
				}
			}
	}
	else {
		if(signal<=-100){
 8008ca6:	4b7e      	ldr	r3, [pc, #504]	; (8008ea0 <sendMQTTMAIN+0x2b0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008cae:	da33      	bge.n	8008d18 <sendMQTTMAIN+0x128>
			for(int z=0;z<3;z++){
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb4:	e029      	b.n	8008d0a <sendMQTTMAIN+0x11a>
				printf("modem reboot\n");
 8008cb6:	487d      	ldr	r0, [pc, #500]	; (8008eac <sendMQTTMAIN+0x2bc>)
 8008cb8:	f013 fb7a 	bl	801c3b0 <puts>
				modem_reset_rtos();
 8008cbc:	f001 f8a4 	bl	8009e08 <modem_reset_rtos>
				reset_mqtt();
 8008cc0:	f000 ffe0 	bl	8009c84 <reset_mqtt>
				SerialATprintln("AT+CPSI?", 8, 0xff);
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	2108      	movs	r1, #8
 8008cc8:	4871      	ldr	r0, [pc, #452]	; (8008e90 <sendMQTTMAIN+0x2a0>)
 8008cca:	f7ff f9af 	bl	800802c <SerialATprintln>
				osDelay(2000);
 8008cce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008cd2:	f00f ff51 	bl	8018b78 <osDelay>
				for(int y=0;y<30;y++){
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cda:	e009      	b.n	8008cf0 <sendMQTTMAIN+0x100>
					osDelay(200);
 8008cdc:	20c8      	movs	r0, #200	; 0xc8
 8008cde:	f00f ff4b 	bl	8018b78 <osDelay>
					if(uart2done)break;
 8008ce2:	4b6a      	ldr	r3, [pc, #424]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <sendMQTTMAIN+0x108>
				for(int y=0;y<30;y++){
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	3301      	adds	r3, #1
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	2b1d      	cmp	r3, #29
 8008cf4:	ddf2      	ble.n	8008cdc <sendMQTTMAIN+0xec>
 8008cf6:	e000      	b.n	8008cfa <sendMQTTMAIN+0x10a>
					if(uart2done)break;
 8008cf8:	bf00      	nop
				}
				if(signal > -100) break;
 8008cfa:	4b69      	ldr	r3, [pc, #420]	; (8008ea0 <sendMQTTMAIN+0x2b0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8008d02:	da08      	bge.n	8008d16 <sendMQTTMAIN+0x126>
			for(int z=0;z<3;z++){
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	3301      	adds	r3, #1
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	ddd2      	ble.n	8008cb6 <sendMQTTMAIN+0xc6>
 8008d10:	e002      	b.n	8008d18 <sendMQTTMAIN+0x128>
					if(uart2done)break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <sendMQTTMAIN+0x128>
				if(signal > -100) break;
 8008d16:	bf00      	nop
			}

		}
	}
	SerialATprintln("AT+CNMP?", 8, 0xff);
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	2108      	movs	r1, #8
 8008d1c:	4864      	ldr	r0, [pc, #400]	; (8008eb0 <sendMQTTMAIN+0x2c0>)
 8008d1e:	f7ff f985 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8008d22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d26:	f00f ff27 	bl	8018b78 <osDelay>
	memset(ATSMPUB,0,48);
 8008d2a:	4b62      	ldr	r3, [pc, #392]	; (8008eb4 <sendMQTTMAIN+0x2c4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2230      	movs	r2, #48	; 0x30
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f012 fd9a 	bl	801b86c <memset>
	memset(smstatestr,0,11);
 8008d38:	4b5f      	ldr	r3, [pc, #380]	; (8008eb8 <sendMQTTMAIN+0x2c8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	220b      	movs	r2, #11
 8008d3e:	2100      	movs	r1, #0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f012 fd93 	bl	801b86c <memset>
	len_mydata = bufsizechararray(mydata);
 8008d46:	485d      	ldr	r0, [pc, #372]	; (8008ebc <sendMQTTMAIN+0x2cc>)
 8008d48:	f7ff febc 	bl	8008ac4 <bufsizechararray>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	4a5c      	ldr	r2, [pc, #368]	; (8008ec0 <sendMQTTMAIN+0x2d0>)
 8008d50:	6013      	str	r3, [r2, #0]
//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
	for(int z=0;z<3;z++){
 8008d52:	2300      	movs	r3, #0
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
 8008d56:	e061      	b.n	8008e1c <sendMQTTMAIN+0x22c>
		uart2done = false;
 8008d58:	4b4c      	ldr	r3, [pc, #304]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 8008d5e:	4b59      	ldr	r3, [pc, #356]	; (8008ec4 <sendMQTTMAIN+0x2d4>)
 8008d60:	681c      	ldr	r4, [r3, #0]
 8008d62:	4b58      	ldr	r3, [pc, #352]	; (8008ec4 <sendMQTTMAIN+0x2d4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f7 fa3c 	bl	80001e4 <strlen>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	23ff      	movs	r3, #255	; 0xff
 8008d72:	4621      	mov	r1, r4
 8008d74:	4854      	ldr	r0, [pc, #336]	; (8008ec8 <sendMQTTMAIN+0x2d8>)
 8008d76:	f00b fb11 	bl	801439c <HAL_UART_Transmit>
		for(int y=0;y<30;y++){
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	623b      	str	r3, [r7, #32]
 8008d7e:	e009      	b.n	8008d94 <sendMQTTMAIN+0x1a4>
				osDelay(200);
 8008d80:	20c8      	movs	r0, #200	; 0xc8
 8008d82:	f00f fef9 	bl	8018b78 <osDelay>
				if(uart2done)break;
 8008d86:	4b41      	ldr	r3, [pc, #260]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <sendMQTTMAIN+0x1ac>
		for(int y=0;y<30;y++){
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	3301      	adds	r3, #1
 8008d92:	623b      	str	r3, [r7, #32]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	2b1d      	cmp	r3, #29
 8008d98:	ddf2      	ble.n	8008d80 <sendMQTTMAIN+0x190>
 8008d9a:	e000      	b.n	8008d9e <sendMQTTMAIN+0x1ae>
				if(uart2done)break;
 8008d9c:	bf00      	nop
			}
		temp_data =strstr((char *)buffer2,"+SMSTATE:");
 8008d9e:	494b      	ldr	r1, [pc, #300]	; (8008ecc <sendMQTTMAIN+0x2dc>)
 8008da0:	484b      	ldr	r0, [pc, #300]	; (8008ed0 <sendMQTTMAIN+0x2e0>)
 8008da2:	f013 fb54 	bl	801c44e <strstr>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4a4a      	ldr	r2, [pc, #296]	; (8008ed4 <sendMQTTMAIN+0x2e4>)
 8008daa:	6013      	str	r3, [r2, #0]
		memcpy(smstatestr,temp_data,11);
 8008dac:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <sendMQTTMAIN+0x2c8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a48      	ldr	r2, [pc, #288]	; (8008ed4 <sendMQTTMAIN+0x2e4>)
 8008db2:	6811      	ldr	r1, [r2, #0]
 8008db4:	220b      	movs	r2, #11
 8008db6:	4618      	mov	r0, r3
 8008db8:	f012 fd4a 	bl	801b850 <memcpy>
		smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 8008dbc:	4b3e      	ldr	r3, [pc, #248]	; (8008eb8 <sendMQTTMAIN+0x2c8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4945      	ldr	r1, [pc, #276]	; (8008ed8 <sendMQTTMAIN+0x2e8>)
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f7 fa04 	bl	80001d0 <strcmp>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	4b43      	ldr	r3, [pc, #268]	; (8008edc <sendMQTTMAIN+0x2ec>)
 8008dce:	701a      	strb	r2, [r3, #0]
		uart2done = false;
 8008dd0:	4b2e      	ldr	r3, [pc, #184]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	701a      	strb	r2, [r3, #0]
		if(smstateint!=0) break;
 8008dd6:	4b41      	ldr	r3, [pc, #260]	; (8008edc <sendMQTTMAIN+0x2ec>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d122      	bne.n	8008e24 <sendMQTTMAIN+0x234>
		reset_mqtt();
 8008dde:	f000 ff51 	bl	8009c84 <reset_mqtt>
		SerialATprintln("AT+SMCONN",9,0xff);
 8008de2:	22ff      	movs	r2, #255	; 0xff
 8008de4:	2109      	movs	r1, #9
 8008de6:	4830      	ldr	r0, [pc, #192]	; (8008ea8 <sendMQTTMAIN+0x2b8>)
 8008de8:	f7ff f920 	bl	800802c <SerialATprintln>
		uart2done = false;
 8008dec:	4b27      	ldr	r3, [pc, #156]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
		for(int y=0;y<30;y++){
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	e009      	b.n	8008e0c <sendMQTTMAIN+0x21c>
			osDelay(200);
 8008df8:	20c8      	movs	r0, #200	; 0xc8
 8008dfa:	f00f febd 	bl	8018b78 <osDelay>
			if(uart2done)break;
 8008dfe:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <sendMQTTMAIN+0x224>
		for(int y=0;y<30;y++){
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	2b1d      	cmp	r3, #29
 8008e10:	ddf2      	ble.n	8008df8 <sendMQTTMAIN+0x208>
 8008e12:	e000      	b.n	8008e16 <sendMQTTMAIN+0x226>
			if(uart2done)break;
 8008e14:	bf00      	nop
	for(int z=0;z<3;z++){
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	3301      	adds	r3, #1
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	dd9a      	ble.n	8008d58 <sendMQTTMAIN+0x168>
 8008e22:	e000      	b.n	8008e26 <sendMQTTMAIN+0x236>
		if(smstateint!=0) break;
 8008e24:	bf00      	nop
		}
	}
	uart2done = false;
 8008e26:	4b19      	ldr	r3, [pc, #100]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+SMCONN",9,0xff);
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	2109      	movs	r1, #9
 8008e30:	481d      	ldr	r0, [pc, #116]	; (8008ea8 <sendMQTTMAIN+0x2b8>)
 8008e32:	f7ff f8fb 	bl	800802c <SerialATprintln>
	for(int i=0;i<20;i++){
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	e009      	b.n	8008e50 <sendMQTTMAIN+0x260>
		osDelay(200);
 8008e3c:	20c8      	movs	r0, #200	; 0xc8
 8008e3e:	f00f fe9b 	bl	8018b78 <osDelay>
		if(uart2done)break;
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <sendMQTTMAIN+0x268>
	for(int i=0;i<20;i++){
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	61bb      	str	r3, [r7, #24]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	2b13      	cmp	r3, #19
 8008e54:	ddf2      	ble.n	8008e3c <sendMQTTMAIN+0x24c>
 8008e56:	e000      	b.n	8008e5a <sendMQTTMAIN+0x26a>
		if(uart2done)break;
 8008e58:	bf00      	nop
	}
	uart2done = false;
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
//		SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 8008e60:	22ff      	movs	r2, #255	; 0xff
 8008e62:	2119      	movs	r1, #25
 8008e64:	481e      	ldr	r0, [pc, #120]	; (8008ee0 <sendMQTTMAIN+0x2f0>)
 8008e66:	f7ff f8e1 	bl	800802c <SerialATprintln>
		for(int i=0;i<25;i++){
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e009      	b.n	8008e84 <sendMQTTMAIN+0x294>
			osDelay(200);
 8008e70:	20c8      	movs	r0, #200	; 0xc8
 8008e72:	f00f fe81 	bl	8018b78 <osDelay>
			if(uart2done)break;
 8008e76:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <sendMQTTMAIN+0x29c>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d132      	bne.n	8008ee4 <sendMQTTMAIN+0x2f4>
		for(int i=0;i<25;i++){
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	3301      	adds	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b18      	cmp	r3, #24
 8008e88:	ddf2      	ble.n	8008e70 <sendMQTTMAIN+0x280>
 8008e8a:	e02c      	b.n	8008ee6 <sendMQTTMAIN+0x2f6>
 8008e8c:	20003fe4 	.word	0x20003fe4
 8008e90:	0801f358 	.word	0x0801f358
 8008e94:	20003fd0 	.word	0x20003fd0
 8008e98:	20005314 	.word	0x20005314
 8008e9c:	0801f364 	.word	0x0801f364
 8008ea0:	0801e8cd 	.word	0x0801e8cd
 8008ea4:	0801f36c 	.word	0x0801f36c
 8008ea8:	0801f2e4 	.word	0x0801f2e4
 8008eac:	0801f378 	.word	0x0801f378
 8008eb0:	0801f1c0 	.word	0x0801f1c0
 8008eb4:	20004308 	.word	0x20004308
 8008eb8:	2000affc 	.word	0x2000affc
 8008ebc:	200046c8 	.word	0x200046c8
 8008ec0:	20009120 	.word	0x20009120
 8008ec4:	20000184 	.word	0x20000184
 8008ec8:	200038e4 	.word	0x200038e4
 8008ecc:	0801f388 	.word	0x0801f388
 8008ed0:	20006d80 	.word	0x20006d80
 8008ed4:	200045f4 	.word	0x200045f4
 8008ed8:	0801f394 	.word	0x0801f394
 8008edc:	2000430c 	.word	0x2000430c
 8008ee0:	0801f3a0 	.word	0x0801f3a0
			if(uart2done)break;
 8008ee4:	bf00      	nop
		}
	uart2done = false;
 8008ee6:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
	sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 8008eec:	4b3f      	ldr	r3, [pc, #252]	; (8008fec <sendMQTTMAIN+0x3fc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a3f      	ldr	r2, [pc, #252]	; (8008ff0 <sendMQTTMAIN+0x400>)
 8008ef2:	6812      	ldr	r2, [r2, #0]
 8008ef4:	493f      	ldr	r1, [pc, #252]	; (8008ff4 <sendMQTTMAIN+0x404>)
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f013 fa72 	bl	801c3e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 8008efc:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <sendMQTTMAIN+0x3fc>)
 8008efe:	681c      	ldr	r4, [r3, #0]
 8008f00:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <sendMQTTMAIN+0x3fc>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7f7 f96d 	bl	80001e4 <strlen>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	23ff      	movs	r3, #255	; 0xff
 8008f10:	4621      	mov	r1, r4
 8008f12:	4839      	ldr	r0, [pc, #228]	; (8008ff8 <sendMQTTMAIN+0x408>)
 8008f14:	f00b fa42 	bl	801439c <HAL_UART_Transmit>
	for(int y=0;y<20;y++){
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	e009      	b.n	8008f32 <sendMQTTMAIN+0x342>
		osDelay(200);
 8008f1e:	20c8      	movs	r0, #200	; 0xc8
 8008f20:	f00f fe2a 	bl	8018b78 <osDelay>
		if(uart2done)break;
 8008f24:	4b30      	ldr	r3, [pc, #192]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <sendMQTTMAIN+0x34a>
	for(int y=0;y<20;y++){
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b13      	cmp	r3, #19
 8008f36:	ddf2      	ble.n	8008f1e <sendMQTTMAIN+0x32e>
 8008f38:	e000      	b.n	8008f3c <sendMQTTMAIN+0x34c>
		if(uart2done)break;
 8008f3a:	bf00      	nop
	}
	uart2done = false;
 8008f3c:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
		printf("mydata: %s\r\n",mydata);
 8008f42:	492e      	ldr	r1, [pc, #184]	; (8008ffc <sendMQTTMAIN+0x40c>)
 8008f44:	482e      	ldr	r0, [pc, #184]	; (8009000 <sendMQTTMAIN+0x410>)
 8008f46:	f013 f9ad 	bl	801c2a4 <iprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 8008f4a:	4b29      	ldr	r3, [pc, #164]	; (8008ff0 <sendMQTTMAIN+0x400>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008f54:	4929      	ldr	r1, [pc, #164]	; (8008ffc <sendMQTTMAIN+0x40c>)
 8008f56:	4828      	ldr	r0, [pc, #160]	; (8008ff8 <sendMQTTMAIN+0x408>)
 8008f58:	f00b fa20 	bl	801439c <HAL_UART_Transmit>
		for(int y=0;y<20;y++){
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	e009      	b.n	8008f76 <sendMQTTMAIN+0x386>
			osDelay(200);
 8008f62:	20c8      	movs	r0, #200	; 0xc8
 8008f64:	f00f fe08 	bl	8018b78 <osDelay>
			if(uart2done)break;
 8008f68:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <sendMQTTMAIN+0x38e>
		for(int y=0;y<20;y++){
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b13      	cmp	r3, #19
 8008f7a:	ddf2      	ble.n	8008f62 <sendMQTTMAIN+0x372>
 8008f7c:	e000      	b.n	8008f80 <sendMQTTMAIN+0x390>
			if(uart2done)break;
 8008f7e:	bf00      	nop
		}
	uart2done = false;
 8008f80:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
//		SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
		SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 8008f86:	22ff      	movs	r2, #255	; 0xff
 8008f88:	2119      	movs	r1, #25
 8008f8a:	481e      	ldr	r0, [pc, #120]	; (8009004 <sendMQTTMAIN+0x414>)
 8008f8c:	f7ff f84e 	bl	800802c <SerialATprintln>
		for(int i=0;i<20;i++){
 8008f90:	2300      	movs	r3, #0
 8008f92:	60bb      	str	r3, [r7, #8]
 8008f94:	e009      	b.n	8008faa <sendMQTTMAIN+0x3ba>
			osDelay(200);
 8008f96:	20c8      	movs	r0, #200	; 0xc8
 8008f98:	f00f fdee 	bl	8018b78 <osDelay>
			if(uart2done)break;
 8008f9c:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <sendMQTTMAIN+0x3c2>
		for(int i=0;i<20;i++){
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b13      	cmp	r3, #19
 8008fae:	ddf2      	ble.n	8008f96 <sendMQTTMAIN+0x3a6>
 8008fb0:	e000      	b.n	8008fb4 <sendMQTTMAIN+0x3c4>
			if(uart2done)break;
 8008fb2:	bf00      	nop
		}
	// change cnmp to 2 (nbiot)
		uart2done = false;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <sendMQTTMAIN+0x3f8>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
		SerialATprintln("AT+CNMP=2", 9, 0xff);
 8008fba:	22ff      	movs	r2, #255	; 0xff
 8008fbc:	2109      	movs	r1, #9
 8008fbe:	4812      	ldr	r0, [pc, #72]	; (8009008 <sendMQTTMAIN+0x418>)
 8008fc0:	f7ff f834 	bl	800802c <SerialATprintln>
		osDelay(2000);
 8008fc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008fc8:	f00f fdd6 	bl	8018b78 <osDelay>
		SerialATprintln("AT+CNMP?", 8, 0xff);
 8008fcc:	22ff      	movs	r2, #255	; 0xff
 8008fce:	2108      	movs	r1, #8
 8008fd0:	480e      	ldr	r0, [pc, #56]	; (800900c <sendMQTTMAIN+0x41c>)
 8008fd2:	f7ff f82b 	bl	800802c <SerialATprintln>
		osDelay(2000);
 8008fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008fda:	f00f fdcd 	bl	8018b78 <osDelay>
}
 8008fde:	bf00      	nop
 8008fe0:	373c      	adds	r7, #60	; 0x3c
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20003fe4 	.word	0x20003fe4
 8008fec:	20004308 	.word	0x20004308
 8008ff0:	20009120 	.word	0x20009120
 8008ff4:	0801f3bc 	.word	0x0801f3bc
 8008ff8:	200038e4 	.word	0x200038e4
 8008ffc:	200046c8 	.word	0x200046c8
 8009000:	0801f3e0 	.word	0x0801f3e0
 8009004:	0801f320 	.word	0x0801f320
 8009008:	0801f3f0 	.word	0x0801f3f0
 800900c:	0801f1c0 	.word	0x0801f1c0

08009010 <sendMQTTpwr>:

void sendMQTTpwr(){
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b08f      	sub	sp, #60	; 0x3c
 8009014:	af00      	add	r7, sp, #0
	bufclear();
 8009016:	f7ff fd6d 	bl	8008af4 <bufclear>
//	temp_data=malloc(200);
//	temp_data2=malloc(50);
	memset((char *)mydata,0,1100);
 800901a:	f240 424c 	movw	r2, #1100	; 0x44c
 800901e:	2100      	movs	r1, #0
 8009020:	48a6      	ldr	r0, [pc, #664]	; (80092bc <sendMQTTpwr+0x2ac>)
 8009022:	f012 fc23 	bl	801b86c <memset>
	uart2done = false;
 8009026:	4ba6      	ldr	r3, [pc, #664]	; (80092c0 <sendMQTTpwr+0x2b0>)
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
		sprintf(uart2_at,"AT+CPSI?");
 800902c:	49a5      	ldr	r1, [pc, #660]	; (80092c4 <sendMQTTpwr+0x2b4>)
 800902e:	48a6      	ldr	r0, [pc, #664]	; (80092c8 <sendMQTTpwr+0x2b8>)
 8009030:	f013 f9d6 	bl	801c3e0 <siprintf>
		printf(uart2_at);
 8009034:	48a4      	ldr	r0, [pc, #656]	; (80092c8 <sendMQTTpwr+0x2b8>)
 8009036:	f013 f935 	bl	801c2a4 <iprintf>
		SerialATprintln("AT+CPSI?", 8, 0xff);
 800903a:	22ff      	movs	r2, #255	; 0xff
 800903c:	2108      	movs	r1, #8
 800903e:	48a1      	ldr	r0, [pc, #644]	; (80092c4 <sendMQTTpwr+0x2b4>)
 8009040:	f7fe fff4 	bl	800802c <SerialATprintln>
		osDelay(4000);
 8009044:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8009048:	f00f fd96 	bl	8018b78 <osDelay>
		for(int y=0;y<40;y++){
 800904c:	2300      	movs	r3, #0
 800904e:	637b      	str	r3, [r7, #52]	; 0x34
 8009050:	e009      	b.n	8009066 <sendMQTTpwr+0x56>
					osDelay(200);
 8009052:	20c8      	movs	r0, #200	; 0xc8
 8009054:	f00f fd90 	bl	8018b78 <osDelay>
					if(uart2done)break;
 8009058:	4b99      	ldr	r3, [pc, #612]	; (80092c0 <sendMQTTpwr+0x2b0>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <sendMQTTpwr+0x5e>
		for(int y=0;y<40;y++){
 8009060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009062:	3301      	adds	r3, #1
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
 8009066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009068:	2b27      	cmp	r3, #39	; 0x27
 800906a:	ddf2      	ble.n	8009052 <sendMQTTpwr+0x42>
 800906c:	e000      	b.n	8009070 <sendMQTTpwr+0x60>
					if(uart2done)break;
 800906e:	bf00      	nop
				}
		int cmpint=strcmp(networkstr," GSM");
 8009070:	4b96      	ldr	r3, [pc, #600]	; (80092cc <sendMQTTpwr+0x2bc>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4996      	ldr	r1, [pc, #600]	; (80092d0 <sendMQTTpwr+0x2c0>)
 8009076:	4618      	mov	r0, r3
 8009078:	f7f7 f8aa 	bl	80001d0 <strcmp>
 800907c:	6038      	str	r0, [r7, #0]
			if(cmpint != 0){
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d028      	beq.n	80090d6 <sendMQTTpwr+0xc6>
				if(signal<-115){
 8009084:	4b93      	ldr	r3, [pc, #588]	; (80092d4 <sendMQTTpwr+0x2c4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f113 0f73 	cmn.w	r3, #115	; 0x73
 800908c:	da5c      	bge.n	8009148 <sendMQTTpwr+0x138>
						SerialATprintln("AT+CNMP=13", 10, 0xff);
 800908e:	22ff      	movs	r2, #255	; 0xff
 8009090:	210a      	movs	r1, #10
 8009092:	4891      	ldr	r0, [pc, #580]	; (80092d8 <sendMQTTpwr+0x2c8>)
 8009094:	f7fe ffca 	bl	800802c <SerialATprintln>
						osDelay(2000);
 8009098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800909c:	f00f fd6c 	bl	8018b78 <osDelay>
						reset_mqtt();
 80090a0:	f000 fdf0 	bl	8009c84 <reset_mqtt>
						SerialATprintln("AT+SMCONN",9,0xff);
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	2109      	movs	r1, #9
 80090a8:	488c      	ldr	r0, [pc, #560]	; (80092dc <sendMQTTpwr+0x2cc>)
 80090aa:	f7fe ffbf 	bl	800802c <SerialATprintln>
						uart2done = false;
 80090ae:	4b84      	ldr	r3, [pc, #528]	; (80092c0 <sendMQTTpwr+0x2b0>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
						for(int y=0;y<30;y++){
 80090b4:	2300      	movs	r3, #0
 80090b6:	633b      	str	r3, [r7, #48]	; 0x30
 80090b8:	e009      	b.n	80090ce <sendMQTTpwr+0xbe>
							osDelay(200);
 80090ba:	20c8      	movs	r0, #200	; 0xc8
 80090bc:	f00f fd5c 	bl	8018b78 <osDelay>
							if(uart2done)break;
 80090c0:	4b7f      	ldr	r3, [pc, #508]	; (80092c0 <sendMQTTpwr+0x2b0>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d13c      	bne.n	8009142 <sendMQTTpwr+0x132>
						for(int y=0;y<30;y++){
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	3301      	adds	r3, #1
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	2b1d      	cmp	r3, #29
 80090d2:	ddf2      	ble.n	80090ba <sendMQTTpwr+0xaa>
 80090d4:	e038      	b.n	8009148 <sendMQTTpwr+0x138>
						}
					}
			}
			else {
				if(signal<=-100){
 80090d6:	4b7f      	ldr	r3, [pc, #508]	; (80092d4 <sendMQTTpwr+0x2c4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80090de:	da33      	bge.n	8009148 <sendMQTTpwr+0x138>
					for(int z=0;z<3;z++){
 80090e0:	2300      	movs	r3, #0
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e4:	e029      	b.n	800913a <sendMQTTpwr+0x12a>
						printf("modem reboot\n");
 80090e6:	487e      	ldr	r0, [pc, #504]	; (80092e0 <sendMQTTpwr+0x2d0>)
 80090e8:	f013 f962 	bl	801c3b0 <puts>
						modem_reset_rtos();
 80090ec:	f000 fe8c 	bl	8009e08 <modem_reset_rtos>
						reset_mqtt();
 80090f0:	f000 fdc8 	bl	8009c84 <reset_mqtt>
						SerialATprintln("AT+CPSI?", 8, 0xff);
 80090f4:	22ff      	movs	r2, #255	; 0xff
 80090f6:	2108      	movs	r1, #8
 80090f8:	4872      	ldr	r0, [pc, #456]	; (80092c4 <sendMQTTpwr+0x2b4>)
 80090fa:	f7fe ff97 	bl	800802c <SerialATprintln>
						osDelay(2000);
 80090fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009102:	f00f fd39 	bl	8018b78 <osDelay>
						for(int y=0;y<30;y++){
 8009106:	2300      	movs	r3, #0
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
 800910a:	e009      	b.n	8009120 <sendMQTTpwr+0x110>
							osDelay(200);
 800910c:	20c8      	movs	r0, #200	; 0xc8
 800910e:	f00f fd33 	bl	8018b78 <osDelay>
							if(uart2done)break;
 8009112:	4b6b      	ldr	r3, [pc, #428]	; (80092c0 <sendMQTTpwr+0x2b0>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <sendMQTTpwr+0x118>
						for(int y=0;y<30;y++){
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	3301      	adds	r3, #1
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	2b1d      	cmp	r3, #29
 8009124:	ddf2      	ble.n	800910c <sendMQTTpwr+0xfc>
 8009126:	e000      	b.n	800912a <sendMQTTpwr+0x11a>
							if(uart2done)break;
 8009128:	bf00      	nop
						}
						if(signal > -100) break;
 800912a:	4b6a      	ldr	r3, [pc, #424]	; (80092d4 <sendMQTTpwr+0x2c4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8009132:	da08      	bge.n	8009146 <sendMQTTpwr+0x136>
					for(int z=0;z<3;z++){
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	3301      	adds	r3, #1
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2b02      	cmp	r3, #2
 800913e:	ddd2      	ble.n	80090e6 <sendMQTTpwr+0xd6>
 8009140:	e002      	b.n	8009148 <sendMQTTpwr+0x138>
							if(uart2done)break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <sendMQTTpwr+0x138>
						if(signal > -100) break;
 8009146:	bf00      	nop
					}

				}
			}
		SerialATprintln("AT+CNMP?", 8, 0xff);
 8009148:	22ff      	movs	r2, #255	; 0xff
 800914a:	2108      	movs	r1, #8
 800914c:	4865      	ldr	r0, [pc, #404]	; (80092e4 <sendMQTTpwr+0x2d4>)
 800914e:	f7fe ff6d 	bl	800802c <SerialATprintln>
		osDelay(2000);
 8009152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009156:	f00f fd0f 	bl	8018b78 <osDelay>
	memset((char *)mydata,0,1100);
 800915a:	f240 424c 	movw	r2, #1100	; 0x44c
 800915e:	2100      	movs	r1, #0
 8009160:	4856      	ldr	r0, [pc, #344]	; (80092bc <sendMQTTpwr+0x2ac>)
 8009162:	f012 fb83 	bl	801b86c <memset>
	cmpint = strcmp(snMeter, "00000000");
 8009166:	4b60      	ldr	r3, [pc, #384]	; (80092e8 <sendMQTTpwr+0x2d8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4960      	ldr	r1, [pc, #384]	; (80092ec <sendMQTTpwr+0x2dc>)
 800916c:	4618      	mov	r0, r3
 800916e:	f7f7 f82f 	bl	80001d0 <strcmp>
 8009172:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <sendMQTTpwr+0x16e>
 800917a:	f002 fdbd 	bl	800bcf8 <read_sn_edmi>
	if(typemeter==6) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\"",snMeter);
 800917e:	4b5c      	ldr	r3, [pc, #368]	; (80092f0 <sendMQTTpwr+0x2e0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b06      	cmp	r3, #6
 8009184:	d108      	bne.n	8009198 <sendMQTTpwr+0x188>
 8009186:	4b5b      	ldr	r3, [pc, #364]	; (80092f4 <sendMQTTpwr+0x2e4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a57      	ldr	r2, [pc, #348]	; (80092e8 <sendMQTTpwr+0x2d8>)
 800918c:	6812      	ldr	r2, [r2, #0]
 800918e:	495a      	ldr	r1, [pc, #360]	; (80092f8 <sendMQTTpwr+0x2e8>)
 8009190:	4618      	mov	r0, r3
 8009192:	f013 f925 	bl	801c3e0 <siprintf>
 8009196:	e007      	b.n	80091a8 <sendMQTTpwr+0x198>
	else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\"",snMeter);
 8009198:	4b56      	ldr	r3, [pc, #344]	; (80092f4 <sendMQTTpwr+0x2e4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a52      	ldr	r2, [pc, #328]	; (80092e8 <sendMQTTpwr+0x2d8>)
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	4956      	ldr	r1, [pc, #344]	; (80092fc <sendMQTTpwr+0x2ec>)
 80091a2:	4618      	mov	r0, r3
 80091a4:	f013 f91c 	bl	801c3e0 <siprintf>
	sprintf(temp_data2,",\"net\":\"");
 80091a8:	4b55      	ldr	r3, [pc, #340]	; (8009300 <sendMQTTpwr+0x2f0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4955      	ldr	r1, [pc, #340]	; (8009304 <sendMQTTpwr+0x2f4>)
 80091ae:	4618      	mov	r0, r3
 80091b0:	f013 f916 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 80091b4:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <sendMQTTpwr+0x2e4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a51      	ldr	r2, [pc, #324]	; (8009300 <sendMQTTpwr+0x2f0>)
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f013 f92e 	bl	801c420 <strcat>
	strcat(temp_data, networkstr);
 80091c4:	4b4b      	ldr	r3, [pc, #300]	; (80092f4 <sendMQTTpwr+0x2e4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a40      	ldr	r2, [pc, #256]	; (80092cc <sendMQTTpwr+0x2bc>)
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f013 f926 	bl	801c420 <strcat>
	strcat(temp_data, "\"");
 80091d4:	4b47      	ldr	r3, [pc, #284]	; (80092f4 <sendMQTTpwr+0x2e4>)
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	4620      	mov	r0, r4
 80091da:	f7f7 f803 	bl	80001e4 <strlen>
 80091de:	4603      	mov	r3, r0
 80091e0:	4423      	add	r3, r4
 80091e2:	4949      	ldr	r1, [pc, #292]	; (8009308 <sendMQTTpwr+0x2f8>)
 80091e4:	461a      	mov	r2, r3
 80091e6:	460b      	mov	r3, r1
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	8013      	strh	r3, [r2, #0]
	sprintf(temp_data2,",\"sig\":\"%d\"",signal);
 80091ec:	4b44      	ldr	r3, [pc, #272]	; (8009300 <sendMQTTpwr+0x2f0>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a38      	ldr	r2, [pc, #224]	; (80092d4 <sendMQTTpwr+0x2c4>)
 80091f2:	6812      	ldr	r2, [r2, #0]
 80091f4:	4945      	ldr	r1, [pc, #276]	; (800930c <sendMQTTpwr+0x2fc>)
 80091f6:	4618      	mov	r0, r3
 80091f8:	f013 f8f2 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 80091fc:	4b3d      	ldr	r3, [pc, #244]	; (80092f4 <sendMQTTpwr+0x2e4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a3f      	ldr	r2, [pc, #252]	; (8009300 <sendMQTTpwr+0x2f0>)
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f013 f90a 	bl	801c420 <strcat>
	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800920c:	4b3c      	ldr	r3, [pc, #240]	; (8009300 <sendMQTTpwr+0x2f0>)
 800920e:	681c      	ldr	r4, [r3, #0]
 8009210:	4b3f      	ldr	r3, [pc, #252]	; (8009310 <sendMQTTpwr+0x300>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f7f7 f9a7 	bl	8000568 <__aeabi_f2d>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	493d      	ldr	r1, [pc, #244]	; (8009314 <sendMQTTpwr+0x304>)
 8009220:	4620      	mov	r0, r4
 8009222:	f013 f8dd 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 8009226:	4b33      	ldr	r3, [pc, #204]	; (80092f4 <sendMQTTpwr+0x2e4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a35      	ldr	r2, [pc, #212]	; (8009300 <sendMQTTpwr+0x2f0>)
 800922c:	6812      	ldr	r2, [r2, #0]
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f013 f8f5 	bl	801c420 <strcat>
	sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 8009236:	4b32      	ldr	r3, [pc, #200]	; (8009300 <sendMQTTpwr+0x2f0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a37      	ldr	r2, [pc, #220]	; (8009318 <sendMQTTpwr+0x308>)
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	4937      	ldr	r1, [pc, #220]	; (800931c <sendMQTTpwr+0x30c>)
 8009240:	4618      	mov	r0, r3
 8009242:	f013 f8cd 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 8009246:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <sendMQTTpwr+0x2e4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a2d      	ldr	r2, [pc, #180]	; (8009300 <sendMQTTpwr+0x2f0>)
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f013 f8e5 	bl	801c420 <strcat>
	strcpy(mydata,temp_data);
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <sendMQTTpwr+0x2e4>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4619      	mov	r1, r3
 800925c:	4817      	ldr	r0, [pc, #92]	; (80092bc <sendMQTTpwr+0x2ac>)
 800925e:	f013 f8ee 	bl	801c43e <strcpy>
	uart2done = false;
 8009262:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <sendMQTTpwr+0x2b0>)
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
	memset(ATSMPUB,0,48);
 8009268:	4b2d      	ldr	r3, [pc, #180]	; (8009320 <sendMQTTpwr+0x310>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2230      	movs	r2, #48	; 0x30
 800926e:	2100      	movs	r1, #0
 8009270:	4618      	mov	r0, r3
 8009272:	f012 fafb 	bl	801b86c <memset>
	memset(smstatestr,0,11);
 8009276:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <sendMQTTpwr+0x314>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	220b      	movs	r2, #11
 800927c:	2100      	movs	r1, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f012 faf4 	bl	801b86c <memset>
	len_mydata = bufsizechararray(mydata);
 8009284:	480d      	ldr	r0, [pc, #52]	; (80092bc <sendMQTTpwr+0x2ac>)
 8009286:	f7ff fc1d 	bl	8008ac4 <bufsizechararray>
 800928a:	4603      	mov	r3, r0
 800928c:	4a26      	ldr	r2, [pc, #152]	; (8009328 <sendMQTTpwr+0x318>)
 800928e:	6013      	str	r3, [r2, #0]
//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
	for(int i=0;i<10;i++){
 8009290:	2300      	movs	r3, #0
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
 8009294:	e009      	b.n	80092aa <sendMQTTpwr+0x29a>
			osDelay(200);
 8009296:	20c8      	movs	r0, #200	; 0xc8
 8009298:	f00f fc6e 	bl	8018b78 <osDelay>
			if(uart2done)break;
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <sendMQTTpwr+0x2b0>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <sendMQTTpwr+0x2a2>
	for(int i=0;i<10;i++){
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	3301      	adds	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	ddf2      	ble.n	8009296 <sendMQTTpwr+0x286>
 80092b0:	e000      	b.n	80092b4 <sendMQTTpwr+0x2a4>
			if(uart2done)break;
 80092b2:	bf00      	nop
		}
	for(int z=0;z<3;z++){
 80092b4:	2300      	movs	r3, #0
 80092b6:	623b      	str	r3, [r7, #32]
 80092b8:	e09a      	b.n	80093f0 <sendMQTTpwr+0x3e0>
 80092ba:	bf00      	nop
 80092bc:	200046c8 	.word	0x200046c8
 80092c0:	20003fe4 	.word	0x20003fe4
 80092c4:	0801f358 	.word	0x0801f358
 80092c8:	20003fd0 	.word	0x20003fd0
 80092cc:	20005314 	.word	0x20005314
 80092d0:	0801f364 	.word	0x0801f364
 80092d4:	0801e8cd 	.word	0x0801e8cd
 80092d8:	0801f36c 	.word	0x0801f36c
 80092dc:	0801f2e4 	.word	0x0801f2e4
 80092e0:	0801f378 	.word	0x0801f378
 80092e4:	0801f1c0 	.word	0x0801f1c0
 80092e8:	20000188 	.word	0x20000188
 80092ec:	0801f3fc 	.word	0x0801f3fc
 80092f0:	2000b508 	.word	0x2000b508
 80092f4:	200045f4 	.word	0x200045f4
 80092f8:	0801f408 	.word	0x0801f408
 80092fc:	0801f430 	.word	0x0801f430
 8009300:	200089fc 	.word	0x200089fc
 8009304:	0801f458 	.word	0x0801f458
 8009308:	0801ef44 	.word	0x0801ef44
 800930c:	0801f464 	.word	0x0801f464
 8009310:	20005770 	.word	0x20005770
 8009314:	0801f470 	.word	0x0801f470
 8009318:	2000b50c 	.word	0x2000b50c
 800931c:	0801f480 	.word	0x0801f480
 8009320:	20004308 	.word	0x20004308
 8009324:	2000affc 	.word	0x2000affc
 8009328:	20009120 	.word	0x20009120
			uart2done = false;
 800932c:	4b8d      	ldr	r3, [pc, #564]	; (8009564 <sendMQTTpwr+0x554>)
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 8009332:	4b8d      	ldr	r3, [pc, #564]	; (8009568 <sendMQTTpwr+0x558>)
 8009334:	681c      	ldr	r4, [r3, #0]
 8009336:	4b8c      	ldr	r3, [pc, #560]	; (8009568 <sendMQTTpwr+0x558>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f7f6 ff52 	bl	80001e4 <strlen>
 8009340:	4603      	mov	r3, r0
 8009342:	b29a      	uxth	r2, r3
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	4621      	mov	r1, r4
 8009348:	4888      	ldr	r0, [pc, #544]	; (800956c <sendMQTTpwr+0x55c>)
 800934a:	f00b f827 	bl	801439c <HAL_UART_Transmit>
			for(int y=0;y<30;y++){
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e009      	b.n	8009368 <sendMQTTpwr+0x358>
					osDelay(200);
 8009354:	20c8      	movs	r0, #200	; 0xc8
 8009356:	f00f fc0f 	bl	8018b78 <osDelay>
					if(uart2done)break;
 800935a:	4b82      	ldr	r3, [pc, #520]	; (8009564 <sendMQTTpwr+0x554>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <sendMQTTpwr+0x360>
			for(int y=0;y<30;y++){
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	2b1d      	cmp	r3, #29
 800936c:	ddf2      	ble.n	8009354 <sendMQTTpwr+0x344>
 800936e:	e000      	b.n	8009372 <sendMQTTpwr+0x362>
					if(uart2done)break;
 8009370:	bf00      	nop
				}
			temp_data =strstr((char *)buffer2,"+SMSTATE:");
 8009372:	497f      	ldr	r1, [pc, #508]	; (8009570 <sendMQTTpwr+0x560>)
 8009374:	487f      	ldr	r0, [pc, #508]	; (8009574 <sendMQTTpwr+0x564>)
 8009376:	f013 f86a 	bl	801c44e <strstr>
 800937a:	4603      	mov	r3, r0
 800937c:	4a7e      	ldr	r2, [pc, #504]	; (8009578 <sendMQTTpwr+0x568>)
 800937e:	6013      	str	r3, [r2, #0]
			memcpy(smstatestr,temp_data,11);
 8009380:	4b7e      	ldr	r3, [pc, #504]	; (800957c <sendMQTTpwr+0x56c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a7c      	ldr	r2, [pc, #496]	; (8009578 <sendMQTTpwr+0x568>)
 8009386:	6811      	ldr	r1, [r2, #0]
 8009388:	220b      	movs	r2, #11
 800938a:	4618      	mov	r0, r3
 800938c:	f012 fa60 	bl	801b850 <memcpy>
			smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 8009390:	4b7a      	ldr	r3, [pc, #488]	; (800957c <sendMQTTpwr+0x56c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	497a      	ldr	r1, [pc, #488]	; (8009580 <sendMQTTpwr+0x570>)
 8009396:	4618      	mov	r0, r3
 8009398:	f7f6 ff1a 	bl	80001d0 <strcmp>
 800939c:	4603      	mov	r3, r0
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	4b78      	ldr	r3, [pc, #480]	; (8009584 <sendMQTTpwr+0x574>)
 80093a2:	701a      	strb	r2, [r3, #0]
			uart2done = false;
 80093a4:	4b6f      	ldr	r3, [pc, #444]	; (8009564 <sendMQTTpwr+0x554>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
			if(smstateint!=0) break;
 80093aa:	4b76      	ldr	r3, [pc, #472]	; (8009584 <sendMQTTpwr+0x574>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d122      	bne.n	80093f8 <sendMQTTpwr+0x3e8>
			reset_mqtt();
 80093b2:	f000 fc67 	bl	8009c84 <reset_mqtt>
			SerialATprintln("AT+SMCONN",9,0xff);
 80093b6:	22ff      	movs	r2, #255	; 0xff
 80093b8:	2109      	movs	r1, #9
 80093ba:	4873      	ldr	r0, [pc, #460]	; (8009588 <sendMQTTpwr+0x578>)
 80093bc:	f7fe fe36 	bl	800802c <SerialATprintln>
			uart2done = false;
 80093c0:	4b68      	ldr	r3, [pc, #416]	; (8009564 <sendMQTTpwr+0x554>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
			for(int y=0;y<30;y++){
 80093c6:	2300      	movs	r3, #0
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	e009      	b.n	80093e0 <sendMQTTpwr+0x3d0>
				osDelay(200);
 80093cc:	20c8      	movs	r0, #200	; 0xc8
 80093ce:	f00f fbd3 	bl	8018b78 <osDelay>
				if(uart2done)break;
 80093d2:	4b64      	ldr	r3, [pc, #400]	; (8009564 <sendMQTTpwr+0x554>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <sendMQTTpwr+0x3d8>
			for(int y=0;y<30;y++){
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	3301      	adds	r3, #1
 80093de:	61bb      	str	r3, [r7, #24]
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b1d      	cmp	r3, #29
 80093e4:	ddf2      	ble.n	80093cc <sendMQTTpwr+0x3bc>
 80093e6:	e000      	b.n	80093ea <sendMQTTpwr+0x3da>
				if(uart2done)break;
 80093e8:	bf00      	nop
	for(int z=0;z<3;z++){
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	3301      	adds	r3, #1
 80093ee:	623b      	str	r3, [r7, #32]
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	dd9a      	ble.n	800932c <sendMQTTpwr+0x31c>
 80093f6:	e000      	b.n	80093fa <sendMQTTpwr+0x3ea>
			if(smstateint!=0) break;
 80093f8:	bf00      	nop
			}
		}
		uart2done = false;
 80093fa:	4b5a      	ldr	r3, [pc, #360]	; (8009564 <sendMQTTpwr+0x554>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	701a      	strb	r2, [r3, #0]
		SerialATprintln("AT+SMCONN",9,0xff);
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	2109      	movs	r1, #9
 8009404:	4860      	ldr	r0, [pc, #384]	; (8009588 <sendMQTTpwr+0x578>)
 8009406:	f7fe fe11 	bl	800802c <SerialATprintln>
		for(int i=0;i<20;i++){
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
 800940e:	e009      	b.n	8009424 <sendMQTTpwr+0x414>
			osDelay(200);
 8009410:	20c8      	movs	r0, #200	; 0xc8
 8009412:	f00f fbb1 	bl	8018b78 <osDelay>
			if(uart2done)break;
 8009416:	4b53      	ldr	r3, [pc, #332]	; (8009564 <sendMQTTpwr+0x554>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <sendMQTTpwr+0x41c>
		for(int i=0;i<20;i++){
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	3301      	adds	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b13      	cmp	r3, #19
 8009428:	ddf2      	ble.n	8009410 <sendMQTTpwr+0x400>
 800942a:	e000      	b.n	800942e <sendMQTTpwr+0x41e>
			if(uart2done)break;
 800942c:	bf00      	nop
		}
//	uint8_t test = strcmp(smstatestr,"+SMSTATE: 1");
	uart2done = false;
 800942e:	4b4d      	ldr	r3, [pc, #308]	; (8009564 <sendMQTTpwr+0x554>)
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
//	SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 8009434:	22ff      	movs	r2, #255	; 0xff
 8009436:	2119      	movs	r1, #25
 8009438:	4854      	ldr	r0, [pc, #336]	; (800958c <sendMQTTpwr+0x57c>)
 800943a:	f7fe fdf7 	bl	800802c <SerialATprintln>
	for(int i=0;i<25;i++){
 800943e:	2300      	movs	r3, #0
 8009440:	613b      	str	r3, [r7, #16]
 8009442:	e009      	b.n	8009458 <sendMQTTpwr+0x448>
		osDelay(200);
 8009444:	20c8      	movs	r0, #200	; 0xc8
 8009446:	f00f fb97 	bl	8018b78 <osDelay>
		if(uart2done)break;
 800944a:	4b46      	ldr	r3, [pc, #280]	; (8009564 <sendMQTTpwr+0x554>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <sendMQTTpwr+0x450>
	for(int i=0;i<25;i++){
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	3301      	adds	r3, #1
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	2b18      	cmp	r3, #24
 800945c:	ddf2      	ble.n	8009444 <sendMQTTpwr+0x434>
 800945e:	e000      	b.n	8009462 <sendMQTTpwr+0x452>
		if(uart2done)break;
 8009460:	bf00      	nop
	}
	uart2done = false;
 8009462:	4b40      	ldr	r3, [pc, #256]	; (8009564 <sendMQTTpwr+0x554>)
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]
	sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 8009468:	4b49      	ldr	r3, [pc, #292]	; (8009590 <sendMQTTpwr+0x580>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a49      	ldr	r2, [pc, #292]	; (8009594 <sendMQTTpwr+0x584>)
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	4949      	ldr	r1, [pc, #292]	; (8009598 <sendMQTTpwr+0x588>)
 8009472:	4618      	mov	r0, r3
 8009474:	f012 ffb4 	bl	801c3e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 8009478:	4b45      	ldr	r3, [pc, #276]	; (8009590 <sendMQTTpwr+0x580>)
 800947a:	681c      	ldr	r4, [r3, #0]
 800947c:	4b44      	ldr	r3, [pc, #272]	; (8009590 <sendMQTTpwr+0x580>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4618      	mov	r0, r3
 8009482:	f7f6 feaf 	bl	80001e4 <strlen>
 8009486:	4603      	mov	r3, r0
 8009488:	b29a      	uxth	r2, r3
 800948a:	23ff      	movs	r3, #255	; 0xff
 800948c:	4621      	mov	r1, r4
 800948e:	4837      	ldr	r0, [pc, #220]	; (800956c <sendMQTTpwr+0x55c>)
 8009490:	f00a ff84 	bl	801439c <HAL_UART_Transmit>
	for(int y=0;y<20;y++){
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e009      	b.n	80094ae <sendMQTTpwr+0x49e>
		osDelay(200);
 800949a:	20c8      	movs	r0, #200	; 0xc8
 800949c:	f00f fb6c 	bl	8018b78 <osDelay>
		if(uart2done)break;
 80094a0:	4b30      	ldr	r3, [pc, #192]	; (8009564 <sendMQTTpwr+0x554>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <sendMQTTpwr+0x4a6>
	for(int y=0;y<20;y++){
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b13      	cmp	r3, #19
 80094b2:	ddf2      	ble.n	800949a <sendMQTTpwr+0x48a>
 80094b4:	e000      	b.n	80094b8 <sendMQTTpwr+0x4a8>
		if(uart2done)break;
 80094b6:	bf00      	nop
	}
	uart2done = false;
 80094b8:	4b2a      	ldr	r3, [pc, #168]	; (8009564 <sendMQTTpwr+0x554>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	701a      	strb	r2, [r3, #0]
		printf("mydata: %s\r\n",mydata);
 80094be:	4937      	ldr	r1, [pc, #220]	; (800959c <sendMQTTpwr+0x58c>)
 80094c0:	4837      	ldr	r0, [pc, #220]	; (80095a0 <sendMQTTpwr+0x590>)
 80094c2:	f012 feef 	bl	801c2a4 <iprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 80094c6:	4b33      	ldr	r3, [pc, #204]	; (8009594 <sendMQTTpwr+0x584>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80094d0:	4932      	ldr	r1, [pc, #200]	; (800959c <sendMQTTpwr+0x58c>)
 80094d2:	4826      	ldr	r0, [pc, #152]	; (800956c <sendMQTTpwr+0x55c>)
 80094d4:	f00a ff62 	bl	801439c <HAL_UART_Transmit>
		for(int y=0;y<20;y++){
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	e009      	b.n	80094f2 <sendMQTTpwr+0x4e2>
			osDelay(200);
 80094de:	20c8      	movs	r0, #200	; 0xc8
 80094e0:	f00f fb4a 	bl	8018b78 <osDelay>
			if(uart2done)break;
 80094e4:	4b1f      	ldr	r3, [pc, #124]	; (8009564 <sendMQTTpwr+0x554>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d106      	bne.n	80094fa <sendMQTTpwr+0x4ea>
		for(int y=0;y<20;y++){
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b13      	cmp	r3, #19
 80094f6:	ddf2      	ble.n	80094de <sendMQTTpwr+0x4ce>
 80094f8:	e000      	b.n	80094fc <sendMQTTpwr+0x4ec>
			if(uart2done)break;
 80094fa:	bf00      	nop
		}
	uart2done = false;
 80094fc:	4b19      	ldr	r3, [pc, #100]	; (8009564 <sendMQTTpwr+0x554>)
 80094fe:	2200      	movs	r2, #0
 8009500:	701a      	strb	r2, [r3, #0]
//	SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
	SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 8009502:	22ff      	movs	r2, #255	; 0xff
 8009504:	2119      	movs	r1, #25
 8009506:	4827      	ldr	r0, [pc, #156]	; (80095a4 <sendMQTTpwr+0x594>)
 8009508:	f7fe fd90 	bl	800802c <SerialATprintln>
	for(int i=0;i<20;i++){
 800950c:	2300      	movs	r3, #0
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	e009      	b.n	8009526 <sendMQTTpwr+0x516>
		osDelay(200);
 8009512:	20c8      	movs	r0, #200	; 0xc8
 8009514:	f00f fb30 	bl	8018b78 <osDelay>
		if(uart2done)break;
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <sendMQTTpwr+0x554>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d106      	bne.n	800952e <sendMQTTpwr+0x51e>
	for(int i=0;i<20;i++){
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3301      	adds	r3, #1
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b13      	cmp	r3, #19
 800952a:	ddf2      	ble.n	8009512 <sendMQTTpwr+0x502>
 800952c:	e000      	b.n	8009530 <sendMQTTpwr+0x520>
		if(uart2done)break;
 800952e:	bf00      	nop
	}
	// change cnmp to 2 (nbiot)
	uart2done = false;
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <sendMQTTpwr+0x554>)
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+CNMP=2", 9, 0xff);
 8009536:	22ff      	movs	r2, #255	; 0xff
 8009538:	2109      	movs	r1, #9
 800953a:	481b      	ldr	r0, [pc, #108]	; (80095a8 <sendMQTTpwr+0x598>)
 800953c:	f7fe fd76 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009540:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009544:	f00f fb18 	bl	8018b78 <osDelay>
	SerialATprintln("AT+CNMP?", 8, 0xff);
 8009548:	22ff      	movs	r2, #255	; 0xff
 800954a:	2108      	movs	r1, #8
 800954c:	4817      	ldr	r0, [pc, #92]	; (80095ac <sendMQTTpwr+0x59c>)
 800954e:	f7fe fd6d 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009552:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009556:	f00f fb0f 	bl	8018b78 <osDelay>
//	osDelay(2000);
}
 800955a:	bf00      	nop
 800955c:	373c      	adds	r7, #60	; 0x3c
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}
 8009562:	bf00      	nop
 8009564:	20003fe4 	.word	0x20003fe4
 8009568:	20000184 	.word	0x20000184
 800956c:	200038e4 	.word	0x200038e4
 8009570:	0801f388 	.word	0x0801f388
 8009574:	20006d80 	.word	0x20006d80
 8009578:	200045f4 	.word	0x200045f4
 800957c:	2000affc 	.word	0x2000affc
 8009580:	0801f394 	.word	0x0801f394
 8009584:	2000430c 	.word	0x2000430c
 8009588:	0801f2e4 	.word	0x0801f2e4
 800958c:	0801f3a0 	.word	0x0801f3a0
 8009590:	20004308 	.word	0x20004308
 8009594:	20009120 	.word	0x20009120
 8009598:	0801f3bc 	.word	0x0801f3bc
 800959c:	200046c8 	.word	0x200046c8
 80095a0:	0801f3e0 	.word	0x0801f3e0
 80095a4:	0801f320 	.word	0x0801f320
 80095a8:	0801f3f0 	.word	0x0801f3f0
 80095ac:	0801f1c0 	.word	0x0801f1c0

080095b0 <sendSimple>:

void sendSimple(){
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b08f      	sub	sp, #60	; 0x3c
 80095b4:	af00      	add	r7, sp, #0
	uart2done = false;
 80095b6:	4b6c      	ldr	r3, [pc, #432]	; (8009768 <sendSimple+0x1b8>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
		sprintf(uart2_at,"AT+CPSI?");
 80095bc:	496b      	ldr	r1, [pc, #428]	; (800976c <sendSimple+0x1bc>)
 80095be:	486c      	ldr	r0, [pc, #432]	; (8009770 <sendSimple+0x1c0>)
 80095c0:	f012 ff0e 	bl	801c3e0 <siprintf>
		printf(uart2_at);
 80095c4:	486a      	ldr	r0, [pc, #424]	; (8009770 <sendSimple+0x1c0>)
 80095c6:	f012 fe6d 	bl	801c2a4 <iprintf>
		SerialATprintln("AT+CPSI?", 8, 0xff);
 80095ca:	22ff      	movs	r2, #255	; 0xff
 80095cc:	2108      	movs	r1, #8
 80095ce:	4867      	ldr	r0, [pc, #412]	; (800976c <sendSimple+0x1bc>)
 80095d0:	f7fe fd2c 	bl	800802c <SerialATprintln>
		osDelay(4000);
 80095d4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80095d8:	f00f face 	bl	8018b78 <osDelay>
		for(int y=0;y<40;y++){
 80095dc:	2300      	movs	r3, #0
 80095de:	637b      	str	r3, [r7, #52]	; 0x34
 80095e0:	e009      	b.n	80095f6 <sendSimple+0x46>
					osDelay(200);
 80095e2:	20c8      	movs	r0, #200	; 0xc8
 80095e4:	f00f fac8 	bl	8018b78 <osDelay>
					if(uart2done)break;
 80095e8:	4b5f      	ldr	r3, [pc, #380]	; (8009768 <sendSimple+0x1b8>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <sendSimple+0x4e>
		for(int y=0;y<40;y++){
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f2:	3301      	adds	r3, #1
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	2b27      	cmp	r3, #39	; 0x27
 80095fa:	ddf2      	ble.n	80095e2 <sendSimple+0x32>
 80095fc:	e000      	b.n	8009600 <sendSimple+0x50>
					if(uart2done)break;
 80095fe:	bf00      	nop
				}
		int cmpint=strcmp(networkstr," GSM");
 8009600:	4b5c      	ldr	r3, [pc, #368]	; (8009774 <sendSimple+0x1c4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	495c      	ldr	r1, [pc, #368]	; (8009778 <sendSimple+0x1c8>)
 8009606:	4618      	mov	r0, r3
 8009608:	f7f6 fde2 	bl	80001d0 <strcmp>
 800960c:	6078      	str	r0, [r7, #4]
					if(cmpint != 0){
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d028      	beq.n	8009666 <sendSimple+0xb6>
						if(signal<-115){
 8009614:	4b59      	ldr	r3, [pc, #356]	; (800977c <sendSimple+0x1cc>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f113 0f73 	cmn.w	r3, #115	; 0x73
 800961c:	da5c      	bge.n	80096d8 <sendSimple+0x128>
								SerialATprintln("AT+CNMP=13", 10, 0xff);
 800961e:	22ff      	movs	r2, #255	; 0xff
 8009620:	210a      	movs	r1, #10
 8009622:	4857      	ldr	r0, [pc, #348]	; (8009780 <sendSimple+0x1d0>)
 8009624:	f7fe fd02 	bl	800802c <SerialATprintln>
								osDelay(2000);
 8009628:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800962c:	f00f faa4 	bl	8018b78 <osDelay>
								reset_mqtt();
 8009630:	f000 fb28 	bl	8009c84 <reset_mqtt>
								SerialATprintln("AT+SMCONN",9,0xff);
 8009634:	22ff      	movs	r2, #255	; 0xff
 8009636:	2109      	movs	r1, #9
 8009638:	4852      	ldr	r0, [pc, #328]	; (8009784 <sendSimple+0x1d4>)
 800963a:	f7fe fcf7 	bl	800802c <SerialATprintln>
								uart2done = false;
 800963e:	4b4a      	ldr	r3, [pc, #296]	; (8009768 <sendSimple+0x1b8>)
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
								for(int y=0;y<30;y++){
 8009644:	2300      	movs	r3, #0
 8009646:	633b      	str	r3, [r7, #48]	; 0x30
 8009648:	e009      	b.n	800965e <sendSimple+0xae>
									osDelay(200);
 800964a:	20c8      	movs	r0, #200	; 0xc8
 800964c:	f00f fa94 	bl	8018b78 <osDelay>
									if(uart2done)break;
 8009650:	4b45      	ldr	r3, [pc, #276]	; (8009768 <sendSimple+0x1b8>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d13c      	bne.n	80096d2 <sendSimple+0x122>
								for(int y=0;y<30;y++){
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	3301      	adds	r3, #1
 800965c:	633b      	str	r3, [r7, #48]	; 0x30
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	2b1d      	cmp	r3, #29
 8009662:	ddf2      	ble.n	800964a <sendSimple+0x9a>
 8009664:	e038      	b.n	80096d8 <sendSimple+0x128>
								}
							}
					}
					else {
						if(signal<=-100){
 8009666:	4b45      	ldr	r3, [pc, #276]	; (800977c <sendSimple+0x1cc>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800966e:	da33      	bge.n	80096d8 <sendSimple+0x128>
							for(int z=0;z<3;z++){
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009674:	e029      	b.n	80096ca <sendSimple+0x11a>
								printf("modem reboot\n");
 8009676:	4844      	ldr	r0, [pc, #272]	; (8009788 <sendSimple+0x1d8>)
 8009678:	f012 fe9a 	bl	801c3b0 <puts>
								modem_reset_rtos();
 800967c:	f000 fbc4 	bl	8009e08 <modem_reset_rtos>
								reset_mqtt();
 8009680:	f000 fb00 	bl	8009c84 <reset_mqtt>
								SerialATprintln("AT+CPSI?", 8, 0xff);
 8009684:	22ff      	movs	r2, #255	; 0xff
 8009686:	2108      	movs	r1, #8
 8009688:	4838      	ldr	r0, [pc, #224]	; (800976c <sendSimple+0x1bc>)
 800968a:	f7fe fccf 	bl	800802c <SerialATprintln>
								osDelay(2000);
 800968e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009692:	f00f fa71 	bl	8018b78 <osDelay>
								for(int y=0;y<30;y++){
 8009696:	2300      	movs	r3, #0
 8009698:	62bb      	str	r3, [r7, #40]	; 0x28
 800969a:	e009      	b.n	80096b0 <sendSimple+0x100>
									osDelay(200);
 800969c:	20c8      	movs	r0, #200	; 0xc8
 800969e:	f00f fa6b 	bl	8018b78 <osDelay>
									if(uart2done)break;
 80096a2:	4b31      	ldr	r3, [pc, #196]	; (8009768 <sendSimple+0x1b8>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <sendSimple+0x108>
								for(int y=0;y<30;y++){
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	3301      	adds	r3, #1
 80096ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	2b1d      	cmp	r3, #29
 80096b4:	ddf2      	ble.n	800969c <sendSimple+0xec>
 80096b6:	e000      	b.n	80096ba <sendSimple+0x10a>
									if(uart2done)break;
 80096b8:	bf00      	nop
								}
								if(signal > -100) break;
 80096ba:	4b30      	ldr	r3, [pc, #192]	; (800977c <sendSimple+0x1cc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80096c2:	da08      	bge.n	80096d6 <sendSimple+0x126>
							for(int z=0;z<3;z++){
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	3301      	adds	r3, #1
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	ddd2      	ble.n	8009676 <sendSimple+0xc6>
 80096d0:	e002      	b.n	80096d8 <sendSimple+0x128>
									if(uart2done)break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <sendSimple+0x128>
								if(signal > -100) break;
 80096d6:	bf00      	nop
							}

						}
					}
	SerialATprintln("AT+CNMP?", 8, 0xff);
 80096d8:	22ff      	movs	r2, #255	; 0xff
 80096da:	2108      	movs	r1, #8
 80096dc:	482b      	ldr	r0, [pc, #172]	; (800978c <sendSimple+0x1dc>)
 80096de:	f7fe fca5 	bl	800802c <SerialATprintln>
	osDelay(2000);
 80096e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80096e6:	f00f fa47 	bl	8018b78 <osDelay>
	uart2done = false;
 80096ea:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <sendSimple+0x1b8>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
	bufclear();
 80096f0:	f7ff fa00 	bl	8008af4 <bufclear>
//	temp_data=malloc(200);
//	temp_data2=malloc(50);
	memset((char *)mydata,0,1100);
 80096f4:	f240 424c 	movw	r2, #1100	; 0x44c
 80096f8:	2100      	movs	r1, #0
 80096fa:	4825      	ldr	r0, [pc, #148]	; (8009790 <sendSimple+0x1e0>)
 80096fc:	f012 f8b6 	bl	801b86c <memset>
	cmpint = strcmp(snMeter, "00000000");
 8009700:	4b24      	ldr	r3, [pc, #144]	; (8009794 <sendSimple+0x1e4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4924      	ldr	r1, [pc, #144]	; (8009798 <sendSimple+0x1e8>)
 8009706:	4618      	mov	r0, r3
 8009708:	f7f6 fd62 	bl	80001d0 <strcmp>
 800970c:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <sendSimple+0x168>
 8009714:	f002 faf0 	bl	800bcf8 <read_sn_edmi>
	if(typemeter==6) {
 8009718:	4b20      	ldr	r3, [pc, #128]	; (800979c <sendSimple+0x1ec>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b06      	cmp	r3, #6
 800971e:	d115      	bne.n	800974c <sendSimple+0x19c>
		if(uart3disc) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK6N\",\"mtrcon\":\"disconnect\"",snMeter);
 8009720:	4b1f      	ldr	r3, [pc, #124]	; (80097a0 <sendSimple+0x1f0>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d008      	beq.n	800973a <sendSimple+0x18a>
 8009728:	4b1e      	ldr	r3, [pc, #120]	; (80097a4 <sendSimple+0x1f4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a19      	ldr	r2, [pc, #100]	; (8009794 <sendSimple+0x1e4>)
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	491d      	ldr	r1, [pc, #116]	; (80097a8 <sendSimple+0x1f8>)
 8009732:	4618      	mov	r0, r3
 8009734:	f012 fe54 	bl	801c3e0 <siprintf>
 8009738:	e044      	b.n	80097c4 <sendSimple+0x214>
		else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK6N\",\"mtrcon\":\"connect\"",snMeter);
 800973a:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <sendSimple+0x1f4>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a15      	ldr	r2, [pc, #84]	; (8009794 <sendSimple+0x1e4>)
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	491a      	ldr	r1, [pc, #104]	; (80097ac <sendSimple+0x1fc>)
 8009744:	4618      	mov	r0, r3
 8009746:	f012 fe4b 	bl	801c3e0 <siprintf>
 800974a:	e03b      	b.n	80097c4 <sendSimple+0x214>
	}
	else {
		if(uart3disc) sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK10E\",\"mtrcon\":\"disconnect\"",snMeter);
 800974c:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <sendSimple+0x1f0>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d02f      	beq.n	80097b4 <sendSimple+0x204>
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <sendSimple+0x1f4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a0e      	ldr	r2, [pc, #56]	; (8009794 <sendSimple+0x1e4>)
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	4914      	ldr	r1, [pc, #80]	; (80097b0 <sendSimple+0x200>)
 800975e:	4618      	mov	r0, r3
 8009760:	f012 fe3e 	bl	801c3e0 <siprintf>
 8009764:	e02e      	b.n	80097c4 <sendSimple+0x214>
 8009766:	bf00      	nop
 8009768:	20003fe4 	.word	0x20003fe4
 800976c:	0801f358 	.word	0x0801f358
 8009770:	20003fd0 	.word	0x20003fd0
 8009774:	20005314 	.word	0x20005314
 8009778:	0801f364 	.word	0x0801f364
 800977c:	0801e8cd 	.word	0x0801e8cd
 8009780:	0801f36c 	.word	0x0801f36c
 8009784:	0801f2e4 	.word	0x0801f2e4
 8009788:	0801f378 	.word	0x0801f378
 800978c:	0801f1c0 	.word	0x0801f1c0
 8009790:	200046c8 	.word	0x200046c8
 8009794:	20000188 	.word	0x20000188
 8009798:	0801f3fc 	.word	0x0801f3fc
 800979c:	2000b508 	.word	0x2000b508
 80097a0:	2000430d 	.word	0x2000430d
 80097a4:	200045f4 	.word	0x200045f4
 80097a8:	0801f490 	.word	0x0801f490
 80097ac:	0801f4d0 	.word	0x0801f4d0
 80097b0:	0801f50c 	.word	0x0801f50c
		else sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Heartbeat\",\"mtr\":\"MK10E\",\"mtrcon\":\"connect\"",snMeter);
 80097b4:	4ba0      	ldr	r3, [pc, #640]	; (8009a38 <sendSimple+0x488>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4aa0      	ldr	r2, [pc, #640]	; (8009a3c <sendSimple+0x48c>)
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	49a0      	ldr	r1, [pc, #640]	; (8009a40 <sendSimple+0x490>)
 80097be:	4618      	mov	r0, r3
 80097c0:	f012 fe0e 	bl	801c3e0 <siprintf>
	}
	sprintf(temp_data2,",\"net\":\"");
 80097c4:	4b9f      	ldr	r3, [pc, #636]	; (8009a44 <sendSimple+0x494>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	499f      	ldr	r1, [pc, #636]	; (8009a48 <sendSimple+0x498>)
 80097ca:	4618      	mov	r0, r3
 80097cc:	f012 fe08 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 80097d0:	4b99      	ldr	r3, [pc, #612]	; (8009a38 <sendSimple+0x488>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a9b      	ldr	r2, [pc, #620]	; (8009a44 <sendSimple+0x494>)
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f012 fe20 	bl	801c420 <strcat>
	strcat(temp_data, networkstr);
 80097e0:	4b95      	ldr	r3, [pc, #596]	; (8009a38 <sendSimple+0x488>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a99      	ldr	r2, [pc, #612]	; (8009a4c <sendSimple+0x49c>)
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f012 fe18 	bl	801c420 <strcat>
	strcat(temp_data, "\"");
 80097f0:	4b91      	ldr	r3, [pc, #580]	; (8009a38 <sendSimple+0x488>)
 80097f2:	681c      	ldr	r4, [r3, #0]
 80097f4:	4620      	mov	r0, r4
 80097f6:	f7f6 fcf5 	bl	80001e4 <strlen>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4423      	add	r3, r4
 80097fe:	4994      	ldr	r1, [pc, #592]	; (8009a50 <sendSimple+0x4a0>)
 8009800:	461a      	mov	r2, r3
 8009802:	460b      	mov	r3, r1
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	8013      	strh	r3, [r2, #0]
	sprintf(temp_data2,",\"sig\":\"%d\"",signal);
 8009808:	4b8e      	ldr	r3, [pc, #568]	; (8009a44 <sendSimple+0x494>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a91      	ldr	r2, [pc, #580]	; (8009a54 <sendSimple+0x4a4>)
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	4991      	ldr	r1, [pc, #580]	; (8009a58 <sendSimple+0x4a8>)
 8009812:	4618      	mov	r0, r3
 8009814:	f012 fde4 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 8009818:	4b87      	ldr	r3, [pc, #540]	; (8009a38 <sendSimple+0x488>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a89      	ldr	r2, [pc, #548]	; (8009a44 <sendSimple+0x494>)
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f012 fdfc 	bl	801c420 <strcat>
  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 8009828:	4b86      	ldr	r3, [pc, #536]	; (8009a44 <sendSimple+0x494>)
 800982a:	681c      	ldr	r4, [r3, #0]
 800982c:	4b8b      	ldr	r3, [pc, #556]	; (8009a5c <sendSimple+0x4ac>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f7f6 fe99 	bl	8000568 <__aeabi_f2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4989      	ldr	r1, [pc, #548]	; (8009a60 <sendSimple+0x4b0>)
 800983c:	4620      	mov	r0, r4
 800983e:	f012 fdcf 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 8009842:	4b7d      	ldr	r3, [pc, #500]	; (8009a38 <sendSimple+0x488>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a7f      	ldr	r2, [pc, #508]	; (8009a44 <sendSimple+0x494>)
 8009848:	6812      	ldr	r2, [r2, #0]
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f012 fde7 	bl	801c420 <strcat>
	sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 8009852:	4b7c      	ldr	r3, [pc, #496]	; (8009a44 <sendSimple+0x494>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a83      	ldr	r2, [pc, #524]	; (8009a64 <sendSimple+0x4b4>)
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	4983      	ldr	r1, [pc, #524]	; (8009a68 <sendSimple+0x4b8>)
 800985c:	4618      	mov	r0, r3
 800985e:	f012 fdbf 	bl	801c3e0 <siprintf>
	strcat(temp_data, temp_data2);
 8009862:	4b75      	ldr	r3, [pc, #468]	; (8009a38 <sendSimple+0x488>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a77      	ldr	r2, [pc, #476]	; (8009a44 <sendSimple+0x494>)
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f012 fdd7 	bl	801c420 <strcat>
	strcpy(mydata,temp_data);
 8009872:	4b71      	ldr	r3, [pc, #452]	; (8009a38 <sendSimple+0x488>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4619      	mov	r1, r3
 8009878:	487c      	ldr	r0, [pc, #496]	; (8009a6c <sendSimple+0x4bc>)
 800987a:	f012 fde0 	bl	801c43e <strcpy>
	printf("mydata: %s\r\n",mydata);
 800987e:	497b      	ldr	r1, [pc, #492]	; (8009a6c <sendSimple+0x4bc>)
 8009880:	487b      	ldr	r0, [pc, #492]	; (8009a70 <sendSimple+0x4c0>)
 8009882:	f012 fd0f 	bl	801c2a4 <iprintf>
//	  strcat(buffer, snMeter);
//	  strcat(buffer, ",\"pid\":\"Heartbeat\"}");
//	  printf(buffer);
//  	if(onlineMode) sendToServer((char*)mydata,bufsizechararray(mydata));
	csqint = 0;
 8009886:	4b7b      	ldr	r3, [pc, #492]	; (8009a74 <sendSimple+0x4c4>)
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
			cgattint = 1;
 800988c:	4b7a      	ldr	r3, [pc, #488]	; (8009a78 <sendSimple+0x4c8>)
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
//			cgattint = check_cgatt_rtos();
			SerialATprintln("AT+CPSI?", 8, 0xff);
 8009892:	22ff      	movs	r2, #255	; 0xff
 8009894:	2108      	movs	r1, #8
 8009896:	4879      	ldr	r0, [pc, #484]	; (8009a7c <sendSimple+0x4cc>)
 8009898:	f7fe fbc8 	bl	800802c <SerialATprintln>
			osDelay(2000);
 800989c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80098a0:	f00f f96a 	bl	8018b78 <osDelay>

			uart2done=false;
 80098a4:	4b76      	ldr	r3, [pc, #472]	; (8009a80 <sendSimple+0x4d0>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
			memset((char *)buffer2,0,sizeof(buffer2));
 80098aa:	f240 424c 	movw	r2, #1100	; 0x44c
 80098ae:	2100      	movs	r1, #0
 80098b0:	4874      	ldr	r0, [pc, #464]	; (8009a84 <sendSimple+0x4d4>)
 80098b2:	f011 ffdb 	bl	801b86c <memset>
			memset((char *)csq,0,sizeof(csq));
 80098b6:	2214      	movs	r2, #20
 80098b8:	2100      	movs	r1, #0
 80098ba:	4873      	ldr	r0, [pc, #460]	; (8009a88 <sendSimple+0x4d8>)
 80098bc:	f011 ffd6 	bl	801b86c <memset>
			char *strcsq = malloc(sizeof(csq));
 80098c0:	2014      	movs	r0, #20
 80098c2:	f011 ffbd 	bl	801b840 <malloc>
 80098c6:	4603      	mov	r3, r0
 80098c8:	603b      	str	r3, [r7, #0]


			SerialATprintln("AT+CSQ",6,0xff);
 80098ca:	22ff      	movs	r2, #255	; 0xff
 80098cc:	2106      	movs	r1, #6
 80098ce:	486f      	ldr	r0, [pc, #444]	; (8009a8c <sendSimple+0x4dc>)
 80098d0:	f7fe fbac 	bl	800802c <SerialATprintln>
			osDelay(100);
 80098d4:	2064      	movs	r0, #100	; 0x64
 80098d6:	f00f f94f 	bl	8018b78 <osDelay>
			for(int y=0;y<20;y++){
 80098da:	2300      	movs	r3, #0
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
 80098de:	e009      	b.n	80098f4 <sendSimple+0x344>
				osDelay(200);
 80098e0:	20c8      	movs	r0, #200	; 0xc8
 80098e2:	f00f f949 	bl	8018b78 <osDelay>
				if(uart2done)break;
 80098e6:	4b66      	ldr	r3, [pc, #408]	; (8009a80 <sendSimple+0x4d0>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <sendSimple+0x34c>
			for(int y=0;y<20;y++){
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	3301      	adds	r3, #1
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2b13      	cmp	r3, #19
 80098f8:	ddf2      	ble.n	80098e0 <sendSimple+0x330>
 80098fa:	e000      	b.n	80098fe <sendSimple+0x34e>
				if(uart2done)break;
 80098fc:	bf00      	nop
			}
			strcsq = strstr((char *)buffer2,"+CSQ:");
 80098fe:	4964      	ldr	r1, [pc, #400]	; (8009a90 <sendSimple+0x4e0>)
 8009900:	4860      	ldr	r0, [pc, #384]	; (8009a84 <sendSimple+0x4d4>)
 8009902:	f012 fda4 	bl	801c44e <strstr>
 8009906:	6038      	str	r0, [r7, #0]
			strcpy((char *)csq,strcsq);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	485f      	ldr	r0, [pc, #380]	; (8009a88 <sendSimple+0x4d8>)
 800990c:	f012 fd97 	bl	801c43e <strcpy>
			for(int x=0;x<20;x++){
 8009910:	2300      	movs	r3, #0
 8009912:	623b      	str	r3, [r7, #32]
 8009914:	e01b      	b.n	800994e <sendSimple+0x39e>
				if(csq[x]=='\r' || csq[x]=='\n') csq[x]='\0';
 8009916:	4a5c      	ldr	r2, [pc, #368]	; (8009a88 <sendSimple+0x4d8>)
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	4413      	add	r3, r2
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b0d      	cmp	r3, #13
 8009920:	d005      	beq.n	800992e <sendSimple+0x37e>
 8009922:	4a59      	ldr	r2, [pc, #356]	; (8009a88 <sendSimple+0x4d8>)
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	4413      	add	r3, r2
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b0a      	cmp	r3, #10
 800992c:	d104      	bne.n	8009938 <sendSimple+0x388>
 800992e:	4a56      	ldr	r2, [pc, #344]	; (8009a88 <sendSimple+0x4d8>)
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	4413      	add	r3, r2
 8009934:	2200      	movs	r2, #0
 8009936:	701a      	strb	r2, [r3, #0]
				if(x>10) csq[x]='\0';
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2b0a      	cmp	r3, #10
 800993c:	dd04      	ble.n	8009948 <sendSimple+0x398>
 800993e:	4a52      	ldr	r2, [pc, #328]	; (8009a88 <sendSimple+0x4d8>)
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	4413      	add	r3, r2
 8009944:	2200      	movs	r2, #0
 8009946:	701a      	strb	r2, [r3, #0]
			for(int x=0;x<20;x++){
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	3301      	adds	r3, #1
 800994c:	623b      	str	r3, [r7, #32]
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2b13      	cmp	r3, #19
 8009952:	dde0      	ble.n	8009916 <sendSimple+0x366>
			}
			memset((char *)strcsq,0,sizeof(csq));
 8009954:	2214      	movs	r2, #20
 8009956:	2100      	movs	r1, #0
 8009958:	6838      	ldr	r0, [r7, #0]
 800995a:	f011 ff87 	bl	801b86c <memset>
			strcsq = strstr((char *)csq,"+CSQ: 99,99");
 800995e:	494d      	ldr	r1, [pc, #308]	; (8009a94 <sendSimple+0x4e4>)
 8009960:	4849      	ldr	r0, [pc, #292]	; (8009a88 <sendSimple+0x4d8>)
 8009962:	f012 fd74 	bl	801c44e <strstr>
 8009966:	6038      	str	r0, [r7, #0]
			csqint = strcmp(strcsq,"+CSQ: 99,99");
 8009968:	494a      	ldr	r1, [pc, #296]	; (8009a94 <sendSimple+0x4e4>)
 800996a:	6838      	ldr	r0, [r7, #0]
 800996c:	f7f6 fc30 	bl	80001d0 <strcmp>
 8009970:	4603      	mov	r3, r0
 8009972:	b2da      	uxtb	r2, r3
 8009974:	4b3f      	ldr	r3, [pc, #252]	; (8009a74 <sendSimple+0x4c4>)
 8009976:	701a      	strb	r2, [r3, #0]
			if(csqint!=0) csqint = 1;
 8009978:	4b3e      	ldr	r3, [pc, #248]	; (8009a74 <sendSimple+0x4c4>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <sendSimple+0x3d6>
 8009980:	4b3c      	ldr	r3, [pc, #240]	; (8009a74 <sendSimple+0x4c4>)
 8009982:	2201      	movs	r2, #1
 8009984:	701a      	strb	r2, [r3, #0]
			if(csqint || cgattint) {
 8009986:	4b3b      	ldr	r3, [pc, #236]	; (8009a74 <sendSimple+0x4c4>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <sendSimple+0x3e6>
 800998e:	4b3a      	ldr	r3, [pc, #232]	; (8009a78 <sendSimple+0x4c8>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <sendSimple+0x3ee>
	//			printf("online True\r\n");
				onlineMode = true;
 8009996:	4b40      	ldr	r3, [pc, #256]	; (8009a98 <sendSimple+0x4e8>)
 8009998:	2201      	movs	r2, #1
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	e007      	b.n	80099ae <sendSimple+0x3fe>
			}
			else {
				onlineMode = false;
 800999e:	4b3e      	ldr	r3, [pc, #248]	; (8009a98 <sendSimple+0x4e8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
				net_err_cnt++;
 80099a4:	4b3d      	ldr	r3, [pc, #244]	; (8009a9c <sendSimple+0x4ec>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3301      	adds	r3, #1
 80099aa:	4a3c      	ldr	r2, [pc, #240]	; (8009a9c <sendSimple+0x4ec>)
 80099ac:	6013      	str	r3, [r2, #0]
			}
	if(usemqtt){
 80099ae:	4b3c      	ldr	r3, [pc, #240]	; (8009aa0 <sendSimple+0x4f0>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 8142 	beq.w	8009c3c <sendSimple+0x68c>
		len_mydata=bufsizechararray(mydata);
 80099b8:	482c      	ldr	r0, [pc, #176]	; (8009a6c <sendSimple+0x4bc>)
 80099ba:	f7ff f883 	bl	8008ac4 <bufsizechararray>
 80099be:	4603      	mov	r3, r0
 80099c0:	4a38      	ldr	r2, [pc, #224]	; (8009aa4 <sendSimple+0x4f4>)
 80099c2:	6013      	str	r3, [r2, #0]
		memset(ATSMPUB,0,48);
 80099c4:	4b38      	ldr	r3, [pc, #224]	; (8009aa8 <sendSimple+0x4f8>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2230      	movs	r2, #48	; 0x30
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f011 ff4d 	bl	801b86c <memset>
			memset(smstatestr,0,11);
 80099d2:	4b36      	ldr	r3, [pc, #216]	; (8009aac <sendSimple+0x4fc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	220b      	movs	r2, #11
 80099d8:	2100      	movs	r1, #0
 80099da:	4618      	mov	r0, r3
 80099dc:	f011 ff46 	bl	801b86c <memset>
			len_mydata = bufsizechararray(mydata);
 80099e0:	4822      	ldr	r0, [pc, #136]	; (8009a6c <sendSimple+0x4bc>)
 80099e2:	f7ff f86f 	bl	8008ac4 <bufsizechararray>
 80099e6:	4603      	mov	r3, r0
 80099e8:	4a2e      	ldr	r2, [pc, #184]	; (8009aa4 <sendSimple+0x4f4>)
 80099ea:	6013      	str	r3, [r2, #0]
		//	HAL_UART_Transmit(&huart2,"AT+SMSTATE?\r\n",13,0xff);
			for(int z=0;z<3;z++){
 80099ec:	2300      	movs	r3, #0
 80099ee:	61fb      	str	r3, [r7, #28]
 80099f0:	e0a2      	b.n	8009b38 <sendSimple+0x588>
				uart2done = false;
 80099f2:	4b23      	ldr	r3, [pc, #140]	; (8009a80 <sendSimple+0x4d0>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 80099f8:	4b2d      	ldr	r3, [pc, #180]	; (8009ab0 <sendSimple+0x500>)
 80099fa:	681c      	ldr	r4, [r3, #0]
 80099fc:	4b2c      	ldr	r3, [pc, #176]	; (8009ab0 <sendSimple+0x500>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7f6 fbef 	bl	80001e4 <strlen>
 8009a06:	4603      	mov	r3, r0
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	23ff      	movs	r3, #255	; 0xff
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4829      	ldr	r0, [pc, #164]	; (8009ab4 <sendSimple+0x504>)
 8009a10:	f00a fcc4 	bl	801439c <HAL_UART_Transmit>
				for(int y=0;y<30;y++){
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	e009      	b.n	8009a2e <sendSimple+0x47e>
						osDelay(200);
 8009a1a:	20c8      	movs	r0, #200	; 0xc8
 8009a1c:	f00f f8ac 	bl	8018b78 <osDelay>
						if(uart2done)break;
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <sendSimple+0x4d0>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d147      	bne.n	8009ab8 <sendSimple+0x508>
				for(int y=0;y<30;y++){
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b1d      	cmp	r3, #29
 8009a32:	ddf2      	ble.n	8009a1a <sendSimple+0x46a>
 8009a34:	e041      	b.n	8009aba <sendSimple+0x50a>
 8009a36:	bf00      	nop
 8009a38:	200045f4 	.word	0x200045f4
 8009a3c:	20000188 	.word	0x20000188
 8009a40:	0801f54c 	.word	0x0801f54c
 8009a44:	200089fc 	.word	0x200089fc
 8009a48:	0801f458 	.word	0x0801f458
 8009a4c:	20005314 	.word	0x20005314
 8009a50:	0801ef44 	.word	0x0801ef44
 8009a54:	0801e8cd 	.word	0x0801e8cd
 8009a58:	0801f464 	.word	0x0801f464
 8009a5c:	20005770 	.word	0x20005770
 8009a60:	0801f470 	.word	0x0801f470
 8009a64:	2000b50c 	.word	0x2000b50c
 8009a68:	0801f480 	.word	0x0801f480
 8009a6c:	200046c8 	.word	0x200046c8
 8009a70:	0801f3e0 	.word	0x0801f3e0
 8009a74:	20008a00 	.word	0x20008a00
 8009a78:	200045f0 	.word	0x200045f0
 8009a7c:	0801f358 	.word	0x0801f358
 8009a80:	20003fe4 	.word	0x20003fe4
 8009a84:	20006d80 	.word	0x20006d80
 8009a88:	20009058 	.word	0x20009058
 8009a8c:	0801f188 	.word	0x0801f188
 8009a90:	0801f58c 	.word	0x0801f58c
 8009a94:	0801f594 	.word	0x0801f594
 8009a98:	20000013 	.word	0x20000013
 8009a9c:	20002758 	.word	0x20002758
 8009aa0:	20004285 	.word	0x20004285
 8009aa4:	20009120 	.word	0x20009120
 8009aa8:	20004308 	.word	0x20004308
 8009aac:	2000affc 	.word	0x2000affc
 8009ab0:	20000184 	.word	0x20000184
 8009ab4:	200038e4 	.word	0x200038e4
						if(uart2done)break;
 8009ab8:	bf00      	nop
					}
				temp_data =strstr((char *)buffer2,"+SMSTATE:");
 8009aba:	4962      	ldr	r1, [pc, #392]	; (8009c44 <sendSimple+0x694>)
 8009abc:	4862      	ldr	r0, [pc, #392]	; (8009c48 <sendSimple+0x698>)
 8009abe:	f012 fcc6 	bl	801c44e <strstr>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4a61      	ldr	r2, [pc, #388]	; (8009c4c <sendSimple+0x69c>)
 8009ac6:	6013      	str	r3, [r2, #0]
				memcpy(smstatestr,temp_data,11);
 8009ac8:	4b61      	ldr	r3, [pc, #388]	; (8009c50 <sendSimple+0x6a0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a5f      	ldr	r2, [pc, #380]	; (8009c4c <sendSimple+0x69c>)
 8009ace:	6811      	ldr	r1, [r2, #0]
 8009ad0:	220b      	movs	r2, #11
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f011 febc 	bl	801b850 <memcpy>
				smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 8009ad8:	4b5d      	ldr	r3, [pc, #372]	; (8009c50 <sendSimple+0x6a0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	495d      	ldr	r1, [pc, #372]	; (8009c54 <sendSimple+0x6a4>)
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f6 fb76 	bl	80001d0 <strcmp>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	4b5b      	ldr	r3, [pc, #364]	; (8009c58 <sendSimple+0x6a8>)
 8009aea:	701a      	strb	r2, [r3, #0]
				uart2done = false;
 8009aec:	4b5b      	ldr	r3, [pc, #364]	; (8009c5c <sendSimple+0x6ac>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
				if(smstateint!=0) break;
 8009af2:	4b59      	ldr	r3, [pc, #356]	; (8009c58 <sendSimple+0x6a8>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d123      	bne.n	8009b42 <sendSimple+0x592>
				reset_mqtt();
 8009afa:	f000 f8c3 	bl	8009c84 <reset_mqtt>
				SerialATprintln("AT+SMCONN",9,0xff);
 8009afe:	22ff      	movs	r2, #255	; 0xff
 8009b00:	2109      	movs	r1, #9
 8009b02:	4857      	ldr	r0, [pc, #348]	; (8009c60 <sendSimple+0x6b0>)
 8009b04:	f7fe fa92 	bl	800802c <SerialATprintln>
				uart2done = false;
 8009b08:	4b54      	ldr	r3, [pc, #336]	; (8009c5c <sendSimple+0x6ac>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	701a      	strb	r2, [r3, #0]
				for(int y=0;y<30;y++){
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e009      	b.n	8009b28 <sendSimple+0x578>
					osDelay(200);
 8009b14:	20c8      	movs	r0, #200	; 0xc8
 8009b16:	f00f f82f 	bl	8018b78 <osDelay>
					if(uart2done)break;
 8009b1a:	4b50      	ldr	r3, [pc, #320]	; (8009c5c <sendSimple+0x6ac>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d106      	bne.n	8009b30 <sendSimple+0x580>
				for(int y=0;y<30;y++){
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	3301      	adds	r3, #1
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2b1d      	cmp	r3, #29
 8009b2c:	ddf2      	ble.n	8009b14 <sendSimple+0x564>
 8009b2e:	e000      	b.n	8009b32 <sendSimple+0x582>
					if(uart2done)break;
 8009b30:	bf00      	nop
			for(int z=0;z<3;z++){
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3301      	adds	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	f77f af59 	ble.w	80099f2 <sendSimple+0x442>
 8009b40:	e000      	b.n	8009b44 <sendSimple+0x594>
				if(smstateint!=0) break;
 8009b42:	bf00      	nop
				}
			}
			uart2done = false;
 8009b44:	4b45      	ldr	r3, [pc, #276]	; (8009c5c <sendSimple+0x6ac>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
			SerialATprintln("AT+SMCONN",9,0xff);
 8009b4a:	22ff      	movs	r2, #255	; 0xff
 8009b4c:	2109      	movs	r1, #9
 8009b4e:	4844      	ldr	r0, [pc, #272]	; (8009c60 <sendSimple+0x6b0>)
 8009b50:	f7fe fa6c 	bl	800802c <SerialATprintln>
			for(int i=0;i<20;i++){
 8009b54:	2300      	movs	r3, #0
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	e009      	b.n	8009b6e <sendSimple+0x5be>
				osDelay(200);
 8009b5a:	20c8      	movs	r0, #200	; 0xc8
 8009b5c:	f00f f80c 	bl	8018b78 <osDelay>
				if(uart2done)break;
 8009b60:	4b3e      	ldr	r3, [pc, #248]	; (8009c5c <sendSimple+0x6ac>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <sendSimple+0x5c6>
			for(int i=0;i<20;i++){
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b13      	cmp	r3, #19
 8009b72:	ddf2      	ble.n	8009b5a <sendSimple+0x5aa>
 8009b74:	e000      	b.n	8009b78 <sendSimple+0x5c8>
				if(uart2done)break;
 8009b76:	bf00      	nop
			}
			uart2done = false;
 8009b78:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <sendSimple+0x6ac>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
			sprintf(ATSMPUB,"AT+SMPUB=\"tayra/incoming\",%d,1,1\r\n",len_mydata);
 8009b7e:	4b39      	ldr	r3, [pc, #228]	; (8009c64 <sendSimple+0x6b4>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a39      	ldr	r2, [pc, #228]	; (8009c68 <sendSimple+0x6b8>)
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	4939      	ldr	r1, [pc, #228]	; (8009c6c <sendSimple+0x6bc>)
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f012 fc29 	bl	801c3e0 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *) ATSMPUB,strlen(ATSMPUB),0xff);
 8009b8e:	4b35      	ldr	r3, [pc, #212]	; (8009c64 <sendSimple+0x6b4>)
 8009b90:	681c      	ldr	r4, [r3, #0]
 8009b92:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <sendSimple+0x6b4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7f6 fb24 	bl	80001e4 <strlen>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	23ff      	movs	r3, #255	; 0xff
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4832      	ldr	r0, [pc, #200]	; (8009c70 <sendSimple+0x6c0>)
 8009ba6:	f00a fbf9 	bl	801439c <HAL_UART_Transmit>
			for(int y=0;y<20;y++){
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	e009      	b.n	8009bc4 <sendSimple+0x614>
				osDelay(200);
 8009bb0:	20c8      	movs	r0, #200	; 0xc8
 8009bb2:	f00e ffe1 	bl	8018b78 <osDelay>
				if(uart2done)break;
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <sendSimple+0x6ac>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <sendSimple+0x61c>
			for(int y=0;y<20;y++){
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b13      	cmp	r3, #19
 8009bc8:	ddf2      	ble.n	8009bb0 <sendSimple+0x600>
 8009bca:	e000      	b.n	8009bce <sendSimple+0x61e>
				if(uart2done)break;
 8009bcc:	bf00      	nop
			}
			uart2done = false;
 8009bce:	4b23      	ldr	r3, [pc, #140]	; (8009c5c <sendSimple+0x6ac>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
			printf("mydata: %s\r\n",mydata);
 8009bd4:	4927      	ldr	r1, [pc, #156]	; (8009c74 <sendSimple+0x6c4>)
 8009bd6:	4828      	ldr	r0, [pc, #160]	; (8009c78 <sendSimple+0x6c8>)
 8009bd8:	f012 fb64 	bl	801c2a4 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)mydata, len_mydata,0x3ff);
 8009bdc:	4b22      	ldr	r3, [pc, #136]	; (8009c68 <sendSimple+0x6b8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009be6:	4923      	ldr	r1, [pc, #140]	; (8009c74 <sendSimple+0x6c4>)
 8009be8:	4821      	ldr	r0, [pc, #132]	; (8009c70 <sendSimple+0x6c0>)
 8009bea:	f00a fbd7 	bl	801439c <HAL_UART_Transmit>
			for(int y=0;y<20;y++){
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	e009      	b.n	8009c08 <sendSimple+0x658>
				osDelay(200);
 8009bf4:	20c8      	movs	r0, #200	; 0xc8
 8009bf6:	f00e ffbf 	bl	8018b78 <osDelay>
				if(uart2done)break;
 8009bfa:	4b18      	ldr	r3, [pc, #96]	; (8009c5c <sendSimple+0x6ac>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <sendSimple+0x660>
			for(int y=0;y<20;y++){
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60bb      	str	r3, [r7, #8]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b13      	cmp	r3, #19
 8009c0c:	ddf2      	ble.n	8009bf4 <sendSimple+0x644>
 8009c0e:	e000      	b.n	8009c12 <sendSimple+0x662>
				if(uart2done)break;
 8009c10:	bf00      	nop
			}
			// change cnmp to 2 (nbiot)
				uart2done = false;
 8009c12:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <sendSimple+0x6ac>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	701a      	strb	r2, [r3, #0]
				SerialATprintln("AT+CNMP=2", 9, 0xff);
 8009c18:	22ff      	movs	r2, #255	; 0xff
 8009c1a:	2109      	movs	r1, #9
 8009c1c:	4817      	ldr	r0, [pc, #92]	; (8009c7c <sendSimple+0x6cc>)
 8009c1e:	f7fe fa05 	bl	800802c <SerialATprintln>
				osDelay(2000);
 8009c22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c26:	f00e ffa7 	bl	8018b78 <osDelay>
				SerialATprintln("AT+CNMP?", 8, 0xff);
 8009c2a:	22ff      	movs	r2, #255	; 0xff
 8009c2c:	2108      	movs	r1, #8
 8009c2e:	4814      	ldr	r0, [pc, #80]	; (8009c80 <sendSimple+0x6d0>)
 8009c30:	f7fe f9fc 	bl	800802c <SerialATprintln>
				osDelay(2000);
 8009c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c38:	f00e ff9e 	bl	8018b78 <osDelay>

//		sendMQTTMAIN();
//				osDelay(2000);
	}

}
 8009c3c:	bf00      	nop
 8009c3e:	373c      	adds	r7, #60	; 0x3c
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}
 8009c44:	0801f388 	.word	0x0801f388
 8009c48:	20006d80 	.word	0x20006d80
 8009c4c:	200045f4 	.word	0x200045f4
 8009c50:	2000affc 	.word	0x2000affc
 8009c54:	0801f394 	.word	0x0801f394
 8009c58:	2000430c 	.word	0x2000430c
 8009c5c:	20003fe4 	.word	0x20003fe4
 8009c60:	0801f2e4 	.word	0x0801f2e4
 8009c64:	20004308 	.word	0x20004308
 8009c68:	20009120 	.word	0x20009120
 8009c6c:	0801f3bc 	.word	0x0801f3bc
 8009c70:	200038e4 	.word	0x200038e4
 8009c74:	200046c8 	.word	0x200046c8
 8009c78:	0801f3e0 	.word	0x0801f3e0
 8009c7c:	0801f3f0 	.word	0x0801f3f0
 8009c80:	0801f1c0 	.word	0x0801f1c0

08009c84 <reset_mqtt>:

void reset_mqtt(){
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
	SerialATprintln("AT+CPSI?", 8, 0xff);
 8009c8a:	22ff      	movs	r2, #255	; 0xff
 8009c8c:	2108      	movs	r1, #8
 8009c8e:	4837      	ldr	r0, [pc, #220]	; (8009d6c <reset_mqtt+0xe8>)
 8009c90:	f7fe f9cc 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009c94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c98:	f00e ff6e 	bl	8018b78 <osDelay>

	SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\",\"0.0.0.0\",0,0,0", 44, 0xff);
 8009c9c:	22ff      	movs	r2, #255	; 0xff
 8009c9e:	212c      	movs	r1, #44	; 0x2c
 8009ca0:	4833      	ldr	r0, [pc, #204]	; (8009d70 <reset_mqtt+0xec>)
 8009ca2:	f7fe f9c3 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009ca6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009caa:	f00e ff65 	bl	8018b78 <osDelay>

	SerialATprintln("AT+CGDCONT?", 11, 0xff);
 8009cae:	22ff      	movs	r2, #255	; 0xff
 8009cb0:	210b      	movs	r1, #11
 8009cb2:	4830      	ldr	r0, [pc, #192]	; (8009d74 <reset_mqtt+0xf0>)
 8009cb4:	f7fe f9ba 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cbc:	f00e ff5c 	bl	8018b78 <osDelay>

	SerialATprintln("AT+CNACT=0,1", 12, 0xff);
 8009cc0:	22ff      	movs	r2, #255	; 0xff
 8009cc2:	210c      	movs	r1, #12
 8009cc4:	482c      	ldr	r0, [pc, #176]	; (8009d78 <reset_mqtt+0xf4>)
 8009cc6:	f7fe f9b1 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cce:	f00e ff53 	bl	8018b78 <osDelay>

	SerialATprintln("AT+CNACT?", 9, 0xff);
 8009cd2:	22ff      	movs	r2, #255	; 0xff
 8009cd4:	2109      	movs	r1, #9
 8009cd6:	4829      	ldr	r0, [pc, #164]	; (8009d7c <reset_mqtt+0xf8>)
 8009cd8:	f7fe f9a8 	bl	800802c <SerialATprintln>
	osDelay(2000);
 8009cdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ce0:	f00e ff4a 	bl	8018b78 <osDelay>

	SerialATprintln("AT+SMDISC",9,700);
 8009ce4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009ce8:	2109      	movs	r1, #9
 8009cea:	4825      	ldr	r0, [pc, #148]	; (8009d80 <reset_mqtt+0xfc>)
 8009cec:	f7fe f99e 	bl	800802c <SerialATprintln>
	  osDelay(1000);
 8009cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cf4:	f00e ff40 	bl	8018b78 <osDelay>

//	  SerialATprintln("AT+SMCONF=\"URL\",broker.mqttdashboard.com,1883",45,0xff);
	  SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 8009cf8:	22ff      	movs	r2, #255	; 0xff
 8009cfa:	2126      	movs	r1, #38	; 0x26
 8009cfc:	4821      	ldr	r0, [pc, #132]	; (8009d84 <reset_mqtt+0x100>)
 8009cfe:	f7fe f995 	bl	800802c <SerialATprintln>
	  osDelay(1000);
 8009d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d06:	f00e ff37 	bl	8018b78 <osDelay>

	  SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 8009d0a:	22ff      	movs	r2, #255	; 0xff
 8009d0c:	2117      	movs	r1, #23
 8009d0e:	481e      	ldr	r0, [pc, #120]	; (8009d88 <reset_mqtt+0x104>)
 8009d10:	f7fe f98c 	bl	800802c <SerialATprintln>
	  osDelay(1000);
 8009d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d18:	f00e ff2e 	bl	8018b78 <osDelay>

	  SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 8009d1c:	22ff      	movs	r2, #255	; 0xff
 8009d1e:	2115      	movs	r1, #21
 8009d20:	481a      	ldr	r0, [pc, #104]	; (8009d8c <reset_mqtt+0x108>)
 8009d22:	f7fe f983 	bl	800802c <SerialATprintln>
	  osDelay(1000);
 8009d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d2a:	f00e ff25 	bl	8018b78 <osDelay>

	  uart2done=false;
 8009d2e:	4b18      	ldr	r3, [pc, #96]	; (8009d90 <reset_mqtt+0x10c>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
	  SerialATprintln("AT+SMCONN",9,0xff);
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	2109      	movs	r1, #9
 8009d38:	4816      	ldr	r0, [pc, #88]	; (8009d94 <reset_mqtt+0x110>)
 8009d3a:	f7fe f977 	bl	800802c <SerialATprintln>
	  		for(int y=0;y<20;y++){
 8009d3e:	2300      	movs	r3, #0
 8009d40:	607b      	str	r3, [r7, #4]
 8009d42:	e009      	b.n	8009d58 <reset_mqtt+0xd4>
	  				osDelay(200);
 8009d44:	20c8      	movs	r0, #200	; 0xc8
 8009d46:	f00e ff17 	bl	8018b78 <osDelay>
	  				if(uart2done)break;
 8009d4a:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <reset_mqtt+0x10c>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <reset_mqtt+0xdc>
	  		for(int y=0;y<20;y++){
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3301      	adds	r3, #1
 8009d56:	607b      	str	r3, [r7, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b13      	cmp	r3, #19
 8009d5c:	ddf2      	ble.n	8009d44 <reset_mqtt+0xc0>
	  			}
}
 8009d5e:	e000      	b.n	8009d62 <reset_mqtt+0xde>
	  				if(uart2done)break;
 8009d60:	bf00      	nop
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	0801f358 	.word	0x0801f358
 8009d70:	0801f190 	.word	0x0801f190
 8009d74:	0801efc8 	.word	0x0801efc8
 8009d78:	0801efd4 	.word	0x0801efd4
 8009d7c:	0801efe4 	.word	0x0801efe4
 8009d80:	0801f298 	.word	0x0801f298
 8009d84:	0801f2a4 	.word	0x0801f2a4
 8009d88:	0801f2cc 	.word	0x0801f2cc
 8009d8c:	0801f308 	.word	0x0801f308
 8009d90:	20003fe4 	.word	0x20003fe4
 8009d94:	0801f2e4 	.word	0x0801f2e4

08009d98 <NB_rst1_rtos>:
  HAL_Delay(1000);
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
}

void NB_rst1_rtos(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  // pull pwrkey low around 1 second then pull high (prevent automatically on / off)
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2102      	movs	r1, #2
 8009da0:	4809      	ldr	r0, [pc, #36]	; (8009dc8 <NB_rst1_rtos+0x30>)
 8009da2:	f006 fd33 	bl	801080c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_SET);
 8009da6:	2201      	movs	r2, #1
 8009da8:	2102      	movs	r1, #2
 8009daa:	4807      	ldr	r0, [pc, #28]	; (8009dc8 <NB_rst1_rtos+0x30>)
 8009dac:	f006 fd2e 	bl	801080c <HAL_GPIO_WritePin>
  osDelay(1000);
 8009db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009db4:	f00e fee0 	bl	8018b78 <osDelay>
  HAL_GPIO_WritePin(RSTNB_GPIO_Port, RSTNB_Pin, GPIO_PIN_RESET);
 8009db8:	2200      	movs	r2, #0
 8009dba:	2102      	movs	r1, #2
 8009dbc:	4802      	ldr	r0, [pc, #8]	; (8009dc8 <NB_rst1_rtos+0x30>)
 8009dbe:	f006 fd25 	bl	801080c <HAL_GPIO_WritePin>
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	48000400 	.word	0x48000400

08009dcc <NB_rst>:

void NB_rst(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  // pull pwrkey low around 1 second then pull high (prevent automatically on / off)
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	480b      	ldr	r0, [pc, #44]	; (8009e04 <NB_rst+0x38>)
 8009dd6:	f006 fd19 	bl	801080c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2101      	movs	r1, #1
 8009dde:	4809      	ldr	r0, [pc, #36]	; (8009e04 <NB_rst+0x38>)
 8009de0:	f006 fd14 	bl	801080c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8009de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009de8:	f005 f904 	bl	800eff4 <HAL_Delay>
  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_RESET);
 8009dec:	2200      	movs	r2, #0
 8009dee:	2101      	movs	r1, #1
 8009df0:	4804      	ldr	r0, [pc, #16]	; (8009e04 <NB_rst+0x38>)
 8009df2:	f006 fd0b 	bl	801080c <HAL_GPIO_WritePin>
  HAL_Delay(2*1000);
 8009df6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009dfa:	f005 f8fb 	bl	800eff4 <HAL_Delay>
}
 8009dfe:	bf00      	nop
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	48000400 	.word	0x48000400

08009e08 <modem_reset_rtos>:
//	}
	printf("%s\r\n",respond);
}

void modem_reset_rtos()
{
 8009e08:	b5b0      	push	{r4, r5, r7, lr}
 8009e0a:	b0aa      	sub	sp, #168	; 0xa8
 8009e0c:	af00      	add	r7, sp, #0
	printf("\r\nModem Reboot\r\n");
 8009e0e:	4883      	ldr	r0, [pc, #524]	; (800a01c <modem_reset_rtos+0x214>)
 8009e10:	f012 face 	bl	801c3b0 <puts>

	SerialATprintln("AT+CREBOOT", 10, 0xff);
 8009e14:	22ff      	movs	r2, #255	; 0xff
 8009e16:	210a      	movs	r1, #10
 8009e18:	4881      	ldr	r0, [pc, #516]	; (800a020 <modem_reset_rtos+0x218>)
 8009e1a:	f7fe f907 	bl	800802c <SerialATprintln>
	osDelay(4000);
 8009e1e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8009e22:	f00e fea9 	bl	8018b78 <osDelay>
	for(int y=0;y<40;y++){
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e2c:	e00b      	b.n	8009e46 <modem_reset_rtos+0x3e>
		osDelay(200);
 8009e2e:	20c8      	movs	r0, #200	; 0xc8
 8009e30:	f00e fea2 	bl	8018b78 <osDelay>
		if(uart2done)break;
 8009e34:	4b7b      	ldr	r3, [pc, #492]	; (800a024 <modem_reset_rtos+0x21c>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <modem_reset_rtos+0x48>
	for(int y=0;y<40;y++){
 8009e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e40:	3301      	adds	r3, #1
 8009e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e4a:	2b27      	cmp	r3, #39	; 0x27
 8009e4c:	ddef      	ble.n	8009e2e <modem_reset_rtos+0x26>
 8009e4e:	e000      	b.n	8009e52 <modem_reset_rtos+0x4a>
		if(uart2done)break;
 8009e50:	bf00      	nop
	}

	printf("\r\nNBIOT Setup\r\n");
 8009e52:	4875      	ldr	r0, [pc, #468]	; (800a028 <modem_reset_rtos+0x220>)
 8009e54:	f012 faac 	bl	801c3b0 <puts>

	char at[]="AT\r\n";
 8009e58:	4a74      	ldr	r2, [pc, #464]	; (800a02c <modem_reset_rtos+0x224>)
 8009e5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e62:	6018      	str	r0, [r3, #0]
 8009e64:	3304      	adds	r3, #4
 8009e66:	7019      	strb	r1, [r3, #0]
	SerialATprintln(at,2,0xff);
 8009e68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009e6c:	22ff      	movs	r2, #255	; 0xff
 8009e6e:	2102      	movs	r1, #2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe f8db 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e7a:	f00e fe7d 	bl	8018b78 <osDelay>

	char cpin[]="AT+CPIN?";
 8009e7e:	4a6c      	ldr	r2, [pc, #432]	; (800a030 <modem_reset_rtos+0x228>)
 8009e80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e86:	c303      	stmia	r3!, {r0, r1}
 8009e88:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cpin,8,0xff);
 8009e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009e8e:	22ff      	movs	r2, #255	; 0xff
 8009e90:	2108      	movs	r1, #8
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe f8ca 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e9c:	f00e fe6c 	bl	8018b78 <osDelay>

	char csq[]="AT+CSQ";
 8009ea0:	4a64      	ldr	r2, [pc, #400]	; (800a034 <modem_reset_rtos+0x22c>)
 8009ea2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009eaa:	6018      	str	r0, [r3, #0]
 8009eac:	3304      	adds	r3, #4
 8009eae:	8019      	strh	r1, [r3, #0]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	0c0a      	lsrs	r2, r1, #16
 8009eb4:	701a      	strb	r2, [r3, #0]
	SerialATprintln(csq,6,0xff);
 8009eb6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009eba:	22ff      	movs	r2, #255	; 0xff
 8009ebc:	2106      	movs	r1, #6
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe f8b4 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ec8:	f00e fe56 	bl	8018b78 <osDelay>

	char creg[]="AT+CREG=1";
 8009ecc:	4a5a      	ldr	r2, [pc, #360]	; (800a038 <modem_reset_rtos+0x230>)
 8009ece:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ed4:	c303      	stmia	r3!, {r0, r1}
 8009ed6:	801a      	strh	r2, [r3, #0]
	SerialATprintln(creg,9,0xff);
 8009ed8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009edc:	22ff      	movs	r2, #255	; 0xff
 8009ede:	2109      	movs	r1, #9
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe f8a3 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009eea:	f00e fe45 	bl	8018b78 <osDelay>

	char cgreg[]="AT+CGREG=1";
 8009eee:	4a53      	ldr	r2, [pc, #332]	; (800a03c <modem_reset_rtos+0x234>)
 8009ef0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009ef4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ef6:	c303      	stmia	r3!, {r0, r1}
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	3302      	adds	r3, #2
 8009efc:	0c12      	lsrs	r2, r2, #16
 8009efe:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cgreg,10,0xff);
 8009f00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009f04:	22ff      	movs	r2, #255	; 0xff
 8009f06:	210a      	movs	r1, #10
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe f88f 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f12:	f00e fe31 	bl	8018b78 <osDelay>

	char cgatt1[]="AT+CGATT=1";
 8009f16:	4a4a      	ldr	r2, [pc, #296]	; (800a040 <modem_reset_rtos+0x238>)
 8009f18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f1e:	c303      	stmia	r3!, {r0, r1}
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	3302      	adds	r3, #2
 8009f24:	0c12      	lsrs	r2, r2, #16
 8009f26:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cgatt1,9,0xff);
 8009f28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	2109      	movs	r1, #9
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe f87b 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f3a:	f00e fe1d 	bl	8018b78 <osDelay>

	char cgatt[]="AT+CGATT?";
 8009f3e:	4a41      	ldr	r2, [pc, #260]	; (800a044 <modem_reset_rtos+0x23c>)
 8009f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f46:	c303      	stmia	r3!, {r0, r1}
 8009f48:	801a      	strh	r2, [r3, #0]
	SerialATprintln(cgatt,9,0xff);
 8009f4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f4e:	22ff      	movs	r2, #255	; 0xff
 8009f50:	2109      	movs	r1, #9
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe f86a 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009f58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f5c:	f00e fe0c 	bl	8018b78 <osDelay>

	char cops[]="AT+COPS?";
 8009f60:	4a39      	ldr	r2, [pc, #228]	; (800a048 <modem_reset_rtos+0x240>)
 8009f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009f66:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f68:	c303      	stmia	r3!, {r0, r1}
 8009f6a:	701a      	strb	r2, [r3, #0]
	SerialATprintln(cops,8,0xff);
 8009f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009f70:	22ff      	movs	r2, #255	; 0xff
 8009f72:	2108      	movs	r1, #8
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe f859 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f7e:	f00e fdfb 	bl	8018b78 <osDelay>

	char cgnapn[]="AT+CGNAPN";
 8009f82:	4a32      	ldr	r2, [pc, #200]	; (800a04c <modem_reset_rtos+0x244>)
 8009f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f8a:	c303      	stmia	r3!, {r0, r1}
 8009f8c:	801a      	strh	r2, [r3, #0]
	SerialATprintln(cgnapn,9,0xff);
 8009f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f92:	22ff      	movs	r2, #255	; 0xff
 8009f94:	2109      	movs	r1, #9
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe f848 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fa0:	f00e fdea 	bl	8018b78 <osDelay>

//	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"internet\"\r\n";
	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"nb1internet\"";
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <modem_reset_rtos+0x248>)
 8009fa6:	f107 0420 	add.w	r4, r7, #32
 8009faa:	461d      	mov	r5, r3
 8009fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SerialATprintln(cgdcont,31,0xff);
 8009fb8:	f107 0320 	add.w	r3, r7, #32
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	211f      	movs	r1, #31
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe f833 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fca:	f00e fdd5 	bl	8018b78 <osDelay>

	char cgdcont1[]="AT+CGDCONT?";
 8009fce:	4a21      	ldr	r2, [pc, #132]	; (800a054 <modem_reset_rtos+0x24c>)
 8009fd0:	f107 0314 	add.w	r3, r7, #20
 8009fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SerialATprintln(cgdcont1,11,0xff);
 8009fda:	f107 0314 	add.w	r3, r7, #20
 8009fde:	22ff      	movs	r2, #255	; 0xff
 8009fe0:	210b      	movs	r1, #11
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe f822 	bl	800802c <SerialATprintln>
	osDelay(1000);
 8009fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fec:	f00e fdc4 	bl	8018b78 <osDelay>

	char cnact1[]="AT+CNACT=0,1";
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <modem_reset_rtos+0x250>)
 8009ff2:	1d3c      	adds	r4, r7, #4
 8009ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8009ff8:	7023      	strb	r3, [r4, #0]
	SerialATprintln(cnact1,12,0xff);
 8009ffa:	1d3b      	adds	r3, r7, #4
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	210c      	movs	r1, #12
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe f813 	bl	800802c <SerialATprintln>
	osDelay(1000);
 800a006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a00a:	f00e fdb5 	bl	8018b78 <osDelay>

	printf("NBIOT done\r\n");
 800a00e:	4813      	ldr	r0, [pc, #76]	; (800a05c <modem_reset_rtos+0x254>)
 800a010:	f012 f9ce 	bl	801c3b0 <puts>
}
 800a014:	bf00      	nop
 800a016:	37a8      	adds	r7, #168	; 0xa8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bdb0      	pop	{r4, r5, r7, pc}
 800a01c:	0801f5a8 	.word	0x0801f5a8
 800a020:	0801f5b8 	.word	0x0801f5b8
 800a024:	20003fe4 	.word	0x20003fe4
 800a028:	0801f5c4 	.word	0x0801f5c4
 800a02c:	0801f5e0 	.word	0x0801f5e0
 800a030:	0801f5e8 	.word	0x0801f5e8
 800a034:	0801f188 	.word	0x0801f188
 800a038:	0801f164 	.word	0x0801f164
 800a03c:	0801f170 	.word	0x0801f170
 800a040:	0801f17c 	.word	0x0801f17c
 800a044:	0801ef48 	.word	0x0801ef48
 800a048:	0801f5f4 	.word	0x0801f5f4
 800a04c:	0801f2f0 	.word	0x0801f2f0
 800a050:	0801f600 	.word	0x0801f600
 800a054:	0801efc8 	.word	0x0801efc8
 800a058:	0801efd4 	.word	0x0801efd4
 800a05c:	0801f5d4 	.word	0x0801f5d4

0800a060 <NBIOT_setup_IT>:
	
	printf("NBIOT done\r\n");
}

void NBIOT_setup_IT(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
	printf("\r\nNBIOT setup\r\n");
 800a066:	4840      	ldr	r0, [pc, #256]	; (800a168 <NBIOT_setup_IT+0x108>)
 800a068:	f012 f9a2 	bl	801c3b0 <puts>

	SerialATprintln("AT",2,0xff);
 800a06c:	22ff      	movs	r2, #255	; 0xff
 800a06e:	2102      	movs	r1, #2
 800a070:	483e      	ldr	r0, [pc, #248]	; (800a16c <NBIOT_setup_IT+0x10c>)
 800a072:	f7fd ffdb 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a07a:	f004 ffbb 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CPIN",7,0xff);
 800a07e:	22ff      	movs	r2, #255	; 0xff
 800a080:	2107      	movs	r1, #7
 800a082:	483b      	ldr	r0, [pc, #236]	; (800a170 <NBIOT_setup_IT+0x110>)
 800a084:	f7fd ffd2 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a08c:	f004 ffb2 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CSQ",6,0xff);
 800a090:	22ff      	movs	r2, #255	; 0xff
 800a092:	2106      	movs	r1, #6
 800a094:	4837      	ldr	r0, [pc, #220]	; (800a174 <NBIOT_setup_IT+0x114>)
 800a096:	f7fd ffc9 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a09a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a09e:	f004 ffa9 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CREG=1",9,0xff);
 800a0a2:	22ff      	movs	r2, #255	; 0xff
 800a0a4:	2109      	movs	r1, #9
 800a0a6:	4834      	ldr	r0, [pc, #208]	; (800a178 <NBIOT_setup_IT+0x118>)
 800a0a8:	f7fd ffc0 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a0ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0b0:	f004 ffa0 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CGREG=1",10,0xff);
 800a0b4:	22ff      	movs	r2, #255	; 0xff
 800a0b6:	210a      	movs	r1, #10
 800a0b8:	4830      	ldr	r0, [pc, #192]	; (800a17c <NBIOT_setup_IT+0x11c>)
 800a0ba:	f7fd ffb7 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a0be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0c2:	f004 ff97 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CGATT=1",10,0xff);
 800a0c6:	22ff      	movs	r2, #255	; 0xff
 800a0c8:	210a      	movs	r1, #10
 800a0ca:	482d      	ldr	r0, [pc, #180]	; (800a180 <NBIOT_setup_IT+0x120>)
 800a0cc:	f7fd ffae 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a0d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0d4:	f004 ff8e 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CGATT?",9,0xff);
 800a0d8:	22ff      	movs	r2, #255	; 0xff
 800a0da:	2109      	movs	r1, #9
 800a0dc:	4829      	ldr	r0, [pc, #164]	; (800a184 <NBIOT_setup_IT+0x124>)
 800a0de:	f7fd ffa5 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a0e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0e6:	f004 ff85 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+COPS?",8,0xff);
 800a0ea:	22ff      	movs	r2, #255	; 0xff
 800a0ec:	2108      	movs	r1, #8
 800a0ee:	4826      	ldr	r0, [pc, #152]	; (800a188 <NBIOT_setup_IT+0x128>)
 800a0f0:	f7fd ff9c 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a0f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0f8:	f004 ff7c 	bl	800eff4 <HAL_Delay>

	char cgnapn[]="AT+CGNAPN\r\n";
 800a0fc:	4a23      	ldr	r2, [pc, #140]	; (800a18c <NBIOT_setup_IT+0x12c>)
 800a0fe:	f107 030c 	add.w	r3, r7, #12
 800a102:	ca07      	ldmia	r2, {r0, r1, r2}
 800a104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char cgnapn_cmp[] = "+CGNAPN:";
 800a108:	4a21      	ldr	r2, [pc, #132]	; (800a190 <NBIOT_setup_IT+0x130>)
 800a10a:	463b      	mov	r3, r7
 800a10c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a10e:	c303      	stmia	r3!, {r0, r1}
 800a110:	701a      	strb	r2, [r3, #0]
	SerialATprintln("AT+CGNAPN",9,0xff);
 800a112:	22ff      	movs	r2, #255	; 0xff
 800a114:	2109      	movs	r1, #9
 800a116:	481f      	ldr	r0, [pc, #124]	; (800a194 <NBIOT_setup_IT+0x134>)
 800a118:	f7fd ff88 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a11c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a120:	f004 ff68 	bl	800eff4 <HAL_Delay>

//	char cgdcont[]="AT+CGDCONT=1,\"IP\",\"internet\"\r\n";
	SerialATprintln("AT+CGDCONT=1,\"IP\",\"nb1internet\"",31,0xff);
 800a124:	22ff      	movs	r2, #255	; 0xff
 800a126:	211f      	movs	r1, #31
 800a128:	481b      	ldr	r0, [pc, #108]	; (800a198 <NBIOT_setup_IT+0x138>)
 800a12a:	f7fd ff7f 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a12e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a132:	f004 ff5f 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CGDCONT?",11,0xff);
 800a136:	22ff      	movs	r2, #255	; 0xff
 800a138:	210b      	movs	r1, #11
 800a13a:	4818      	ldr	r0, [pc, #96]	; (800a19c <NBIOT_setup_IT+0x13c>)
 800a13c:	f7fd ff76 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a144:	f004 ff56 	bl	800eff4 <HAL_Delay>

	SerialATprintln("AT+CGNACT=0,1",13,0xff);
 800a148:	22ff      	movs	r2, #255	; 0xff
 800a14a:	210d      	movs	r1, #13
 800a14c:	4814      	ldr	r0, [pc, #80]	; (800a1a0 <NBIOT_setup_IT+0x140>)
 800a14e:	f7fd ff6d 	bl	800802c <SerialATprintln>
	HAL_Delay(500);
 800a152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a156:	f004 ff4d 	bl	800eff4 <HAL_Delay>

	printf("NBIOT done\r\n");
 800a15a:	4812      	ldr	r0, [pc, #72]	; (800a1a4 <NBIOT_setup_IT+0x144>)
 800a15c:	f012 f928 	bl	801c3b0 <puts>
}
 800a160:	bf00      	nop
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	0801f620 	.word	0x0801f620
 800a16c:	0801f160 	.word	0x0801f160
 800a170:	0801f734 	.word	0x0801f734
 800a174:	0801f188 	.word	0x0801f188
 800a178:	0801f164 	.word	0x0801f164
 800a17c:	0801f170 	.word	0x0801f170
 800a180:	0801f17c 	.word	0x0801f17c
 800a184:	0801ef48 	.word	0x0801ef48
 800a188:	0801f5f4 	.word	0x0801f5f4
 800a18c:	0801f6c0 	.word	0x0801f6c0
 800a190:	0801f6cc 	.word	0x0801f6cc
 800a194:	0801f2f0 	.word	0x0801f2f0
 800a198:	0801f600 	.word	0x0801f600
 800a19c:	0801efc8 	.word	0x0801efc8
 800a1a0:	0801f73c 	.word	0x0801f73c
 800a1a4:	0801f5d4 	.word	0x0801f5d4

0800a1a8 <MQTT_setup>:

void MQTT_setup(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
	usemqtt=true;
 800a1ac:	4b27      	ldr	r3, [pc, #156]	; (800a24c <MQTT_setup+0xa4>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	701a      	strb	r2, [r3, #0]
	printf("\r\nMQTT setup\r\n");
 800a1b2:	4827      	ldr	r0, [pc, #156]	; (800a250 <MQTT_setup+0xa8>)
 800a1b4:	f012 f8fc 	bl	801c3b0 <puts>
	HAL_Delay(1000);
 800a1b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1bc:	f004 ff1a 	bl	800eff4 <HAL_Delay>
	
	SerialATprintln("AT+SMDISC",9,0xff);
 800a1c0:	22ff      	movs	r2, #255	; 0xff
 800a1c2:	2109      	movs	r1, #9
 800a1c4:	4823      	ldr	r0, [pc, #140]	; (800a254 <MQTT_setup+0xac>)
 800a1c6:	f7fd ff31 	bl	800802c <SerialATprintln>
	HAL_Delay(1000);
 800a1ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1ce:	f004 ff11 	bl	800eff4 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 800a1d2:	4921      	ldr	r1, [pc, #132]	; (800a258 <MQTT_setup+0xb0>)
 800a1d4:	4821      	ldr	r0, [pc, #132]	; (800a25c <MQTT_setup+0xb4>)
 800a1d6:	f012 f865 	bl	801c2a4 <iprintf>
	
//	char smconf_url[]="AT+SMCONF=\"URL\",broker.mqttdashboard.com,1883\r\n";
//	char smconf_url[]="AT+SMCONF=\"URL\",broker.hivemq.com,1883\r\n";
//	char smconf_url_cmp[] = "OK";
//	ATCOMMAND(smconf_url,smconf_url_cmp);
	SerialATprintln("AT+SMCONF=\"URL\",broker.hivemq.com,1883",38,0xff);
 800a1da:	22ff      	movs	r2, #255	; 0xff
 800a1dc:	2126      	movs	r1, #38	; 0x26
 800a1de:	4820      	ldr	r0, [pc, #128]	; (800a260 <MQTT_setup+0xb8>)
 800a1e0:	f7fd ff24 	bl	800802c <SerialATprintln>
	HAL_Delay(1000);
 800a1e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1e8:	f004 ff04 	bl	800eff4 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 800a1ec:	491a      	ldr	r1, [pc, #104]	; (800a258 <MQTT_setup+0xb0>)
 800a1ee:	481b      	ldr	r0, [pc, #108]	; (800a25c <MQTT_setup+0xb4>)
 800a1f0:	f012 f858 	bl	801c2a4 <iprintf>

	SerialATprintln("AT+SMCONF=\"KEEPTIME\",60",23,0xff);
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	2117      	movs	r1, #23
 800a1f8:	481a      	ldr	r0, [pc, #104]	; (800a264 <MQTT_setup+0xbc>)
 800a1fa:	f7fd ff17 	bl	800802c <SerialATprintln>
	HAL_Delay(1000);
 800a1fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a202:	f004 fef7 	bl	800eff4 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 800a206:	4914      	ldr	r1, [pc, #80]	; (800a258 <MQTT_setup+0xb0>)
 800a208:	4814      	ldr	r0, [pc, #80]	; (800a25c <MQTT_setup+0xb4>)
 800a20a:	f012 f84b 	bl	801c2a4 <iprintf>
	
	SerialATprintln("AT+SMCONF=\"CLEANSS\",1",21,0xff);
 800a20e:	22ff      	movs	r2, #255	; 0xff
 800a210:	2115      	movs	r1, #21
 800a212:	4815      	ldr	r0, [pc, #84]	; (800a268 <MQTT_setup+0xc0>)
 800a214:	f7fd ff0a 	bl	800802c <SerialATprintln>
	HAL_Delay(1000);
 800a218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a21c:	f004 feea 	bl	800eff4 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 800a220:	490d      	ldr	r1, [pc, #52]	; (800a258 <MQTT_setup+0xb0>)
 800a222:	480e      	ldr	r0, [pc, #56]	; (800a25c <MQTT_setup+0xb4>)
 800a224:	f012 f83e 	bl	801c2a4 <iprintf>

	SerialATprintln("AT+SMCONN",9,0xff);
 800a228:	22ff      	movs	r2, #255	; 0xff
 800a22a:	2109      	movs	r1, #9
 800a22c:	480f      	ldr	r0, [pc, #60]	; (800a26c <MQTT_setup+0xc4>)
 800a22e:	f7fd fefd 	bl	800802c <SerialATprintln>
	HAL_Delay(1000);
 800a232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a236:	f004 fedd 	bl	800eff4 <HAL_Delay>
	printf("%s\r\n",uart2_temp);
 800a23a:	4907      	ldr	r1, [pc, #28]	; (800a258 <MQTT_setup+0xb0>)
 800a23c:	4807      	ldr	r0, [pc, #28]	; (800a25c <MQTT_setup+0xb4>)
 800a23e:	f012 f831 	bl	801c2a4 <iprintf>

	printf("MQTT done\r\n");
 800a242:	480b      	ldr	r0, [pc, #44]	; (800a270 <MQTT_setup+0xc8>)
 800a244:	f012 f8b4 	bl	801c3b0 <puts>
}
 800a248:	bf00      	nop
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20004285 	.word	0x20004285
 800a250:	0801f74c 	.word	0x0801f74c
 800a254:	0801f298 	.word	0x0801f298
 800a258:	20006470 	.word	0x20006470
 800a25c:	0801f5a0 	.word	0x0801f5a0
 800a260:	0801f2a4 	.word	0x0801f2a4
 800a264:	0801f2cc 	.word	0x0801f2cc
 800a268:	0801f308 	.word	0x0801f308
 800a26c:	0801f2e4 	.word	0x0801f2e4
 800a270:	0801f75c 	.word	0x0801f75c

0800a274 <LSM6DSL_readRegister>:

void LSM6DSL_readRegister(uint16_t* output, uint8_t i2cReg)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af02      	add	r7, sp, #8
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
	uint8_t tbuf[1];
	uint8_t rbuf[2];
	uint16_t out;
	
	tbuf[0] = i2cReg;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1,0X6B<<1,tbuf,1,10);
 800a284:	f107 020c 	add.w	r2, r7, #12
 800a288:	230a      	movs	r3, #10
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2301      	movs	r3, #1
 800a28e:	21d6      	movs	r1, #214	; 0xd6
 800a290:	480d      	ldr	r0, [pc, #52]	; (800a2c8 <LSM6DSL_readRegister+0x54>)
 800a292:	f006 fb85 	bl	80109a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,0X6B<<1,rbuf,2,10);
 800a296:	f107 0208 	add.w	r2, r7, #8
 800a29a:	230a      	movs	r3, #10
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	2302      	movs	r3, #2
 800a2a0:	21d6      	movs	r1, #214	; 0xd6
 800a2a2:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <LSM6DSL_readRegister+0x54>)
 800a2a4:	f006 fc70 	bl	8010b88 <HAL_I2C_Master_Receive>
	out = ((uint16_t)(rbuf[1] << 8)|(uint16_t)rbuf[0]);
 800a2a8:	7a7b      	ldrb	r3, [r7, #9]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	7a3b      	ldrb	r3, [r7, #8]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	81fb      	strh	r3, [r7, #14]

	*output = out;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	89fa      	ldrh	r2, [r7, #14]
 800a2bc:	801a      	strh	r2, [r3, #0]
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20004550 	.word	0x20004550

0800a2cc <LSM6DSL_setup>:

void LSM6DSL_setup(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
	dev_ctx.write_reg = platform_write;
 800a2d2:	4b75      	ldr	r3, [pc, #468]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a2d4:	4a75      	ldr	r2, [pc, #468]	; (800a4ac <LSM6DSL_setup+0x1e0>)
 800a2d6:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 800a2d8:	4b73      	ldr	r3, [pc, #460]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a2da:	4a75      	ldr	r2, [pc, #468]	; (800a4b0 <LSM6DSL_setup+0x1e4>)
 800a2dc:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 800a2de:	4b72      	ldr	r3, [pc, #456]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a2e0:	4a74      	ldr	r2, [pc, #464]	; (800a4b4 <LSM6DSL_setup+0x1e8>)
 800a2e2:	609a      	str	r2, [r3, #8]

	whoamI = 0;
 800a2e4:	4b74      	ldr	r3, [pc, #464]	; (800a4b8 <LSM6DSL_setup+0x1ec>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&dev_ctx, &whoamI);\
 800a2ea:	4973      	ldr	r1, [pc, #460]	; (800a4b8 <LSM6DSL_setup+0x1ec>)
 800a2ec:	486e      	ldr	r0, [pc, #440]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a2ee:	f7fc ff59 	bl	80071a4 <lsm6dsl_device_id_get>
	if ( whoamI != LSM6DSL_ID )
 800a2f2:	4b71      	ldr	r3, [pc, #452]	; (800a4b8 <LSM6DSL_setup+0x1ec>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b6a      	cmp	r3, #106	; 0x6a
 800a2f8:	d018      	beq.n	800a32c <LSM6DSL_setup+0x60>
	{
		while(whoamI != LSM6DSL_ID)
 800a2fa:	e013      	b.n	800a324 <LSM6DSL_setup+0x58>
		{
			sprintf((char*)tx_buffer, "Sensor not found\n");
 800a2fc:	496f      	ldr	r1, [pc, #444]	; (800a4bc <LSM6DSL_setup+0x1f0>)
 800a2fe:	4870      	ldr	r0, [pc, #448]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a300:	f012 f86e 	bl	801c3e0 <siprintf>
			tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800a304:	486e      	ldr	r0, [pc, #440]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a306:	f7f5 ff6d 	bl	80001e4 <strlen>
 800a30a:	4603      	mov	r3, r0
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	4619      	mov	r1, r3
 800a310:	486b      	ldr	r0, [pc, #428]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a312:	f7fe fc1f 	bl	8008b54 <tx_com>
			lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 800a316:	4968      	ldr	r1, [pc, #416]	; (800a4b8 <LSM6DSL_setup+0x1ec>)
 800a318:	4863      	ldr	r0, [pc, #396]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a31a:	f7fc ff43 	bl	80071a4 <lsm6dsl_device_id_get>
			osDelay(20);
 800a31e:	2014      	movs	r0, #20
 800a320:	f00e fc2a 	bl	8018b78 <osDelay>
		while(whoamI != LSM6DSL_ID)
 800a324:	4b64      	ldr	r3, [pc, #400]	; (800a4b8 <LSM6DSL_setup+0x1ec>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b6a      	cmp	r3, #106	; 0x6a
 800a32a:	d1e7      	bne.n	800a2fc <LSM6DSL_setup+0x30>
		}
	}
	sprintf((char*)tx_buffer, "Sensor found\n");
 800a32c:	4965      	ldr	r1, [pc, #404]	; (800a4c4 <LSM6DSL_setup+0x1f8>)
 800a32e:	4864      	ldr	r0, [pc, #400]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a330:	f012 f856 	bl	801c3e0 <siprintf>
	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800a334:	4862      	ldr	r0, [pc, #392]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a336:	f7f5 ff55 	bl	80001e4 <strlen>
 800a33a:	4603      	mov	r3, r0
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	485f      	ldr	r0, [pc, #380]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a342:	f7fe fc07 	bl	8008b54 <tx_com>

	lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800a346:	2101      	movs	r1, #1
 800a348:	4857      	ldr	r0, [pc, #348]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a34a:	f7fc ff3c 	bl	80071c6 <lsm6dsl_reset_set>
	do {
		lsm6dsl_reset_get(&dev_ctx, &rst);
 800a34e:	495e      	ldr	r1, [pc, #376]	; (800a4c8 <LSM6DSL_setup+0x1fc>)
 800a350:	4855      	ldr	r0, [pc, #340]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a352:	f7fc ff5e 	bl	8007212 <lsm6dsl_reset_get>
	} while (rst);
 800a356:	4b5c      	ldr	r3, [pc, #368]	; (800a4c8 <LSM6DSL_setup+0x1fc>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f7      	bne.n	800a34e <LSM6DSL_setup+0x82>

	lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800a35e:	2101      	movs	r1, #1
 800a360:	4851      	ldr	r0, [pc, #324]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a362:	f7fc fe8f 	bl	8007084 <lsm6dsl_block_data_update_set>

	lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_416Hz);
 800a366:	2106      	movs	r1, #6
 800a368:	484f      	ldr	r0, [pc, #316]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a36a:	f7fc fe19 	bl	8006fa0 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_416Hz);
 800a36e:	2106      	movs	r1, #6
 800a370:	484d      	ldr	r0, [pc, #308]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a372:	f7fc fe61 	bl	8007038 <lsm6dsl_gy_data_rate_set>

	lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_2g);
 800a376:	2100      	movs	r1, #0
 800a378:	484b      	ldr	r0, [pc, #300]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a37a:	f7fc fdeb 	bl	8006f54 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_2000dps);
 800a37e:	2106      	movs	r1, #6
 800a380:	4849      	ldr	r0, [pc, #292]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a382:	f7fc fe33 	bl	8006fec <lsm6dsl_gy_full_scale_set>

	lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 800a386:	2101      	movs	r1, #1
 800a388:	4847      	ldr	r0, [pc, #284]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a38a:	f7fc ff5b 	bl	8007244 <lsm6dsl_xl_filter_analog_set>

	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 800a38e:	2111      	movs	r1, #17
 800a390:	4845      	ldr	r0, [pc, #276]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a392:	f7fc ff7d 	bl	8007290 <lsm6dsl_xl_lp2_bandwidth_set>

	lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 800a396:	21a8      	movs	r1, #168	; 0xa8
 800a398:	4843      	ldr	r0, [pc, #268]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a39a:	f7fc ffb0 	bl	80072fe <lsm6dsl_gy_band_pass_set>

	lsm6dsl_wrist_tilt_sens_set(&dev_ctx, PROPERTY_ENABLE);
 800a39e:	2101      	movs	r1, #1
 800a3a0:	4841      	ldr	r0, [pc, #260]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3a2:	f7fd fbec 	bl	8007b7e <lsm6dsl_wrist_tilt_sens_set>
	lsm6dsl_tilt_sens_set(&dev_ctx, PROPERTY_ENABLE);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	483f      	ldr	r0, [pc, #252]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3aa:	f7fd fbb7 	bl	8007b1c <lsm6dsl_tilt_sens_set>
	lsm6dsl_motion_sens_set(&dev_ctx, PROPERTY_ENABLE);
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	483d      	ldr	r0, [pc, #244]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3b2:	f7fd fb82 	bl	8007aba <lsm6dsl_motion_sens_set>
	lsm6dsl_all_on_int1_set(&dev_ctx, PROPERTY_ENABLE);
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	483b      	ldr	r0, [pc, #236]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3ba:	f7fd f971 	bl	80076a0 <lsm6dsl_all_on_int1_set>
	lsm6dsl_tap_detection_on_x_set(&dev_ctx, PROPERTY_ENABLE);
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4839      	ldr	r0, [pc, #228]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3c2:	f7fd fa2b 	bl	800781c <lsm6dsl_tap_detection_on_x_set>
	lsm6dsl_tap_detection_on_y_set(&dev_ctx, PROPERTY_ENABLE);
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4837      	ldr	r0, [pc, #220]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3ca:	f7fd fa01 	bl	80077d0 <lsm6dsl_tap_detection_on_y_set>
	lsm6dsl_tap_detection_on_z_set(&dev_ctx, PROPERTY_ENABLE);
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4835      	ldr	r0, [pc, #212]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3d2:	f7fd f9d7 	bl	8007784 <lsm6dsl_tap_detection_on_z_set>
	lsm6dsl_tap_threshold_x_set(&dev_ctx, 0x08);
 800a3d6:	2108      	movs	r1, #8
 800a3d8:	4833      	ldr	r0, [pc, #204]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3da:	f7fd fa45 	bl	8007868 <lsm6dsl_tap_threshold_x_set>
	lsm6dsl_tap_shock_set(&dev_ctx, 0x03);
 800a3de:	2103      	movs	r1, #3
 800a3e0:	4831      	ldr	r0, [pc, #196]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3e2:	f7fd fa67 	bl	80078b4 <lsm6dsl_tap_shock_set>
	lsm6dsl_tap_quiet_set(&dev_ctx, 0x03);
 800a3e6:	2103      	movs	r1, #3
 800a3e8:	482f      	ldr	r0, [pc, #188]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3ea:	f7fd fa89 	bl	8007900 <lsm6dsl_tap_quiet_set>
	lsm6dsl_tap_dur_set(&dev_ctx, 0x08);
 800a3ee:	2108      	movs	r1, #8
 800a3f0:	482d      	ldr	r0, [pc, #180]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3f2:	f7fd faab 	bl	800794c <lsm6dsl_tap_dur_set>
	lsm6dsl_tap_mode_set(&dev_ctx, LSM6DSL_BOTH_SINGLE_DOUBLE);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	482b      	ldr	r0, [pc, #172]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a3fa:	f7fd facd 	bl	8007998 <lsm6dsl_tap_mode_set>
	lsm6dsl_ff_dur_set(&dev_ctx, 0x06);
 800a3fe:	2106      	movs	r1, #6
 800a400:	4829      	ldr	r0, [pc, #164]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a402:	f7fd faef 	bl	80079e4 <lsm6dsl_ff_dur_set>
	lsm6dsl_wkup_dur_set(&dev_ctx, 0x00);
 800a406:	2100      	movs	r1, #0
 800a408:	4827      	ldr	r0, [pc, #156]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a40a:	f7fd f96f 	bl	80076ec <lsm6dsl_wkup_dur_set>
	lsm6dsl_timestamp_res_set(&dev_ctx, LSM6DSL_LSB_6ms4);
 800a40e:	2100      	movs	r1, #0
 800a410:	4825      	ldr	r0, [pc, #148]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a412:	f7fc fe6e 	bl	80070f2 <lsm6dsl_timestamp_res_set>
	lsm6dsl_act_sleep_dur_set(&dev_ctx, 0x00);
 800a416:	2100      	movs	r1, #0
 800a418:	4823      	ldr	r0, [pc, #140]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a41a:	f7fd f98d 	bl	8007738 <lsm6dsl_act_sleep_dur_set>
	lsm6dsl_ff_threshold_set(&dev_ctx, LSM6DSL_FF_TSH_312mg);
 800a41e:	2103      	movs	r1, #3
 800a420:	4821      	ldr	r0, [pc, #132]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a422:	f7fd fb24 	bl	8007a6e <lsm6dsl_ff_threshold_set>

	lsm6dsl_int1_route_t prop;
	prop.int1_boot = PROPERTY_DISABLE;
 800a426:	793b      	ldrb	r3, [r7, #4]
 800a428:	f36f 0382 	bfc	r3, #2, #1
 800a42c:	713b      	strb	r3, [r7, #4]
	prop.int1_fth = PROPERTY_DISABLE;
 800a42e:	793b      	ldrb	r3, [r7, #4]
 800a430:	f36f 03c3 	bfc	r3, #3, #1
 800a434:	713b      	strb	r3, [r7, #4]
	prop.int1_full_flag = PROPERTY_DISABLE;
 800a436:	793b      	ldrb	r3, [r7, #4]
 800a438:	f36f 1345 	bfc	r3, #5, #1
 800a43c:	713b      	strb	r3, [r7, #4]
	prop.int1_timer = PROPERTY_DISABLE;
 800a43e:	797b      	ldrb	r3, [r7, #5]
 800a440:	f36f 0300 	bfc	r3, #0, #1
 800a444:	717b      	strb	r3, [r7, #5]
	prop.int1_ff = PROPERTY_ENABLE;
 800a446:	797b      	ldrb	r3, [r7, #5]
 800a448:	f043 0310 	orr.w	r3, r3, #16
 800a44c:	717b      	strb	r3, [r7, #5]
	prop.int1_double_tap = PROPERTY_ENABLE;
 800a44e:	797b      	ldrb	r3, [r7, #5]
 800a450:	f043 0308 	orr.w	r3, r3, #8
 800a454:	717b      	strb	r3, [r7, #5]
	prop.int1_sign_mot = PROPERTY_ENABLE;
 800a456:	793b      	ldrb	r3, [r7, #4]
 800a458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45c:	713b      	strb	r3, [r7, #4]
	prop.int1_step_detector = PROPERTY_ENABLE;
 800a45e:	793b      	ldrb	r3, [r7, #4]
 800a460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a464:	713b      	strb	r3, [r7, #4]
	prop.int1_tilt = PROPERTY_ENABLE;
 800a466:	797b      	ldrb	r3, [r7, #5]
 800a468:	f043 0302 	orr.w	r3, r3, #2
 800a46c:	717b      	strb	r3, [r7, #5]
	prop.int1_wu = PROPERTY_DISABLE;
 800a46e:	797b      	ldrb	r3, [r7, #5]
 800a470:	f36f 1345 	bfc	r3, #5, #1
 800a474:	717b      	strb	r3, [r7, #5]
	prop.int1_6d = PROPERTY_DISABLE;
 800a476:	797b      	ldrb	r3, [r7, #5]
 800a478:	f36f 0382 	bfc	r3, #2, #1
 800a47c:	717b      	strb	r3, [r7, #5]

	lsm6dsl_pin_int1_route_set(&dev_ctx, prop);
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	4809      	ldr	r0, [pc, #36]	; (800a4a8 <LSM6DSL_setup+0x1dc>)
 800a482:	f7fc ffaa 	bl	80073da <lsm6dsl_pin_int1_route_set>

	sprintf((char*)tx_buffer, "Sensor configured\n");
 800a486:	4911      	ldr	r1, [pc, #68]	; (800a4cc <LSM6DSL_setup+0x200>)
 800a488:	480d      	ldr	r0, [pc, #52]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a48a:	f011 ffa9 	bl	801c3e0 <siprintf>
	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800a48e:	480c      	ldr	r0, [pc, #48]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a490:	f7f5 fea8 	bl	80001e4 <strlen>
 800a494:	4603      	mov	r3, r0
 800a496:	b29b      	uxth	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	4809      	ldr	r0, [pc, #36]	; (800a4c0 <LSM6DSL_setup+0x1f4>)
 800a49c:	f7fe fb5a 	bl	8008b54 <tx_com>
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200042fc 	.word	0x200042fc
 800a4ac:	08008b7d 	.word	0x08008b7d
 800a4b0:	08008bb7 	.word	0x08008bb7
 800a4b4:	20004550 	.word	0x20004550
 800a4b8:	20000634 	.word	0x20000634
 800a4bc:	0801f768 	.word	0x0801f768
 800a4c0:	200068bc 	.word	0x200068bc
 800a4c4:	0801f77c 	.word	0x0801f77c
 800a4c8:	20000635 	.word	0x20000635
 800a4cc:	0801f78c 	.word	0x0801f78c

0800a4d0 <read_instant_mk6n>:
		  		  f_close(&fil);
		  	  }
	  }
}

void read_instant_mk6n(){
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
	dataallclearMK6N();
 800a4d6:	f7f6 fe01 	bl	80010dc <dataallclearMK6N>
	loginToMeterRTOS();
 800a4da:	f7fb ffb9 	bl	8006450 <loginToMeterRTOS>
	int cmpint = strcmp(snMeter, "00000000");
 800a4de:	4b8e      	ldr	r3, [pc, #568]	; (800a718 <read_instant_mk6n+0x248>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	498e      	ldr	r1, [pc, #568]	; (800a71c <read_instant_mk6n+0x24c>)
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7f5 fe73 	bl	80001d0 <strcmp>
 800a4ea:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <read_instant_mk6n+0x26>
 800a4f2:	f001 fc01 	bl	800bcf8 <read_sn_edmi>
	SerialMonprintln("Read Instant MK6N");
 800a4f6:	488a      	ldr	r0, [pc, #552]	; (800a720 <read_instant_mk6n+0x250>)
 800a4f8:	f7fb ff5c 	bl	80063b4 <SerialMonprintln>
	dataallclearMK6N();
 800a4fc:	f7f6 fdee 	bl	80010dc <dataallclearMK6N>
	uart2done=false;
 800a500:	4b88      	ldr	r3, [pc, #544]	; (800a724 <read_instant_mk6n+0x254>)
 800a502:	2200      	movs	r2, #0
 800a504:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800a506:	4b88      	ldr	r3, [pc, #544]	; (800a728 <read_instant_mk6n+0x258>)
 800a508:	2201      	movs	r2, #1
 800a50a:	701a      	strb	r2, [r3, #0]
	uart3done=false;
 800a50c:	4b87      	ldr	r3, [pc, #540]	; (800a72c <read_instant_mk6n+0x25c>)
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
	memset(mydata,0,1100);
 800a512:	f240 424c 	movw	r2, #1100	; 0x44c
 800a516:	2100      	movs	r1, #0
 800a518:	4885      	ldr	r0, [pc, #532]	; (800a730 <read_instant_mk6n+0x260>)
 800a51a:	f011 f9a7 	bl	801b86c <memset>
	memset(uart3_temp,0,1100);
 800a51e:	f240 424c 	movw	r2, #1100	; 0x44c
 800a522:	2100      	movs	r1, #0
 800a524:	4883      	ldr	r0, [pc, #524]	; (800a734 <read_instant_mk6n+0x264>)
 800a526:	f011 f9a1 	bl	801b86c <memset>
	memset(buffer3,0,1100);
 800a52a:	f240 424c 	movw	r2, #1100	; 0x44c
 800a52e:	2100      	movs	r1, #0
 800a530:	4881      	ldr	r0, [pc, #516]	; (800a738 <read_instant_mk6n+0x268>)
 800a532:	f011 f99b 	bl	801b86c <memset>
	for(int x=0;x<3;x++){
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e094      	b.n	800a666 <read_instant_mk6n+0x196>
		txInstantMK6N(x);
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7f7 f83b 	bl	80015b8 <txInstantMK6N>
		for(int y=0;y<20;y++){
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]
 800a546:	e00d      	b.n	800a564 <read_instant_mk6n+0x94>
			osDelay(200);
 800a548:	20c8      	movs	r0, #200	; 0xc8
 800a54a:	f00e fb15 	bl	8018b78 <osDelay>
			if(uart3done){
 800a54e:	4b77      	ldr	r3, [pc, #476]	; (800a72c <read_instant_mk6n+0x25c>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <read_instant_mk6n+0x8e>
				uart3disc = false;
 800a556:	4b74      	ldr	r3, [pc, #464]	; (800a728 <read_instant_mk6n+0x258>)
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
				break;
 800a55c:	e005      	b.n	800a56a <read_instant_mk6n+0x9a>
		for(int y=0;y<20;y++){
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3301      	adds	r3, #1
 800a562:	60bb      	str	r3, [r7, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b13      	cmp	r3, #19
 800a568:	ddee      	ble.n	800a548 <read_instant_mk6n+0x78>
			}
		}
		memset(mydata,0,1100);
 800a56a:	f240 424c 	movw	r2, #1100	; 0x44c
 800a56e:	2100      	movs	r1, #0
 800a570:	486f      	ldr	r0, [pc, #444]	; (800a730 <read_instant_mk6n+0x260>)
 800a572:	f011 f97b 	bl	801b86c <memset>
		if (!uart3disc) parsingDataRawInstantMK6N(buffer3,datauart3size(buffer3),x);
 800a576:	4b6c      	ldr	r3, [pc, #432]	; (800a728 <read_instant_mk6n+0x258>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f083 0301 	eor.w	r3, r3, #1
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <read_instant_mk6n+0xc8>
 800a584:	486c      	ldr	r0, [pc, #432]	; (800a738 <read_instant_mk6n+0x268>)
 800a586:	f7fe fa85 	bl	8008a94 <datauart3size>
 800a58a:	4603      	mov	r3, r0
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4619      	mov	r1, r3
 800a590:	4869      	ldr	r0, [pc, #420]	; (800a738 <read_instant_mk6n+0x268>)
 800a592:	f7f7 f869 	bl	8001668 <parsingDataRawInstantMK6N>
 800a596:	e05d      	b.n	800a654 <read_instant_mk6n+0x184>
		  else {
				memset((char *)mydata,0,1100);
 800a598:	f240 424c 	movw	r2, #1100	; 0x44c
 800a59c:	2100      	movs	r1, #0
 800a59e:	4864      	ldr	r0, [pc, #400]	; (800a730 <read_instant_mk6n+0x260>)
 800a5a0:	f011 f964 	bl	801b86c <memset>
				sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a5a4:	4b65      	ldr	r3, [pc, #404]	; (800a73c <read_instant_mk6n+0x26c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a5b      	ldr	r2, [pc, #364]	; (800a718 <read_instant_mk6n+0x248>)
 800a5aa:	6812      	ldr	r2, [r2, #0]
 800a5ac:	4964      	ldr	r1, [pc, #400]	; (800a740 <read_instant_mk6n+0x270>)
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f011 ff16 	bl	801c3e0 <siprintf>
				strcat(temp_data, (char*)csq);
 800a5b4:	4b61      	ldr	r3, [pc, #388]	; (800a73c <read_instant_mk6n+0x26c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4962      	ldr	r1, [pc, #392]	; (800a744 <read_instant_mk6n+0x274>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f011 ff30 	bl	801c420 <strcat>
				strcat(temp_data,"\"");
 800a5c0:	4b5e      	ldr	r3, [pc, #376]	; (800a73c <read_instant_mk6n+0x26c>)
 800a5c2:	681c      	ldr	r4, [r3, #0]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7f5 fe0d 	bl	80001e4 <strlen>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4423      	add	r3, r4
 800a5ce:	495e      	ldr	r1, [pc, #376]	; (800a748 <read_instant_mk6n+0x278>)
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	8013      	strh	r3, [r2, #0]
			  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a5d8:	4b5c      	ldr	r3, [pc, #368]	; (800a74c <read_instant_mk6n+0x27c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	495c      	ldr	r1, [pc, #368]	; (800a750 <read_instant_mk6n+0x280>)
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f011 fefe 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800a5e4:	4b55      	ldr	r3, [pc, #340]	; (800a73c <read_instant_mk6n+0x26c>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a58      	ldr	r2, [pc, #352]	; (800a74c <read_instant_mk6n+0x27c>)
 800a5ea:	6812      	ldr	r2, [r2, #0]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f011 ff16 	bl	801c420 <strcat>
			  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a5f4:	4b55      	ldr	r3, [pc, #340]	; (800a74c <read_instant_mk6n+0x27c>)
 800a5f6:	681c      	ldr	r4, [r3, #0]
 800a5f8:	4b56      	ldr	r3, [pc, #344]	; (800a754 <read_instant_mk6n+0x284>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f5 ffb3 	bl	8000568 <__aeabi_f2d>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4954      	ldr	r1, [pc, #336]	; (800a758 <read_instant_mk6n+0x288>)
 800a608:	4620      	mov	r0, r4
 800a60a:	f011 fee9 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800a60e:	4b4b      	ldr	r3, [pc, #300]	; (800a73c <read_instant_mk6n+0x26c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a4e      	ldr	r2, [pc, #312]	; (800a74c <read_instant_mk6n+0x27c>)
 800a614:	6812      	ldr	r2, [r2, #0]
 800a616:	4611      	mov	r1, r2
 800a618:	4618      	mov	r0, r3
 800a61a:	f011 ff01 	bl	801c420 <strcat>
				sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a61e:	4b4b      	ldr	r3, [pc, #300]	; (800a74c <read_instant_mk6n+0x27c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a4e      	ldr	r2, [pc, #312]	; (800a75c <read_instant_mk6n+0x28c>)
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	494e      	ldr	r1, [pc, #312]	; (800a760 <read_instant_mk6n+0x290>)
 800a628:	4618      	mov	r0, r3
 800a62a:	f011 fed9 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800a62e:	4b43      	ldr	r3, [pc, #268]	; (800a73c <read_instant_mk6n+0x26c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a46      	ldr	r2, [pc, #280]	; (800a74c <read_instant_mk6n+0x27c>)
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f011 fef1 	bl	801c420 <strcat>
				strcpy(mydata,temp_data);
 800a63e:	4b3f      	ldr	r3, [pc, #252]	; (800a73c <read_instant_mk6n+0x26c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4619      	mov	r1, r3
 800a644:	483a      	ldr	r0, [pc, #232]	; (800a730 <read_instant_mk6n+0x260>)
 800a646:	f011 fefa 	bl	801c43e <strcpy>
				cnt_instant++;
 800a64a:	4b46      	ldr	r3, [pc, #280]	; (800a764 <read_instant_mk6n+0x294>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3301      	adds	r3, #1
 800a650:	4a44      	ldr	r2, [pc, #272]	; (800a764 <read_instant_mk6n+0x294>)
 800a652:	6013      	str	r3, [r2, #0]
			}
		memset(buffer3,0,1000);
 800a654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a658:	2100      	movs	r1, #0
 800a65a:	4837      	ldr	r0, [pc, #220]	; (800a738 <read_instant_mk6n+0x268>)
 800a65c:	f011 f906 	bl	801b86c <memset>
	for(int x=0;x<3;x++){
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3301      	adds	r3, #1
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	f77f af67 	ble.w	800a53c <read_instant_mk6n+0x6c>
	}
	decodeJsonInstantMK6N(mydata);
 800a66e:	4830      	ldr	r0, [pc, #192]	; (800a730 <read_instant_mk6n+0x260>)
 800a670:	f7f7 f854 	bl	800171c <decodeJsonInstantMK6N>
	printf(mydata);
 800a674:	482e      	ldr	r0, [pc, #184]	; (800a730 <read_instant_mk6n+0x260>)
 800a676:	f011 fe15 	bl	801c2a4 <iprintf>
	csqint = 1;
 800a67a:	4b3b      	ldr	r3, [pc, #236]	; (800a768 <read_instant_mk6n+0x298>)
 800a67c:	2201      	movs	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800a680:	4b3a      	ldr	r3, [pc, #232]	; (800a76c <read_instant_mk6n+0x29c>)
 800a682:	2201      	movs	r2, #1
 800a684:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800a686:	4b38      	ldr	r3, [pc, #224]	; (800a768 <read_instant_mk6n+0x298>)
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d103      	bne.n	800a696 <read_instant_mk6n+0x1c6>
 800a68e:	4b37      	ldr	r3, [pc, #220]	; (800a76c <read_instant_mk6n+0x29c>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <read_instant_mk6n+0x1ce>
//		printf("online True\r\n");
		onlineMode = true;
 800a696:	4b36      	ldr	r3, [pc, #216]	; (800a770 <read_instant_mk6n+0x2a0>)
 800a698:	2201      	movs	r2, #1
 800a69a:	701a      	strb	r2, [r3, #0]
 800a69c:	e007      	b.n	800a6ae <read_instant_mk6n+0x1de>
	}
	else {
		onlineMode = false;
 800a69e:	4b34      	ldr	r3, [pc, #208]	; (800a770 <read_instant_mk6n+0x2a0>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800a6a4:	4b33      	ldr	r3, [pc, #204]	; (800a774 <read_instant_mk6n+0x2a4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	4a32      	ldr	r2, [pc, #200]	; (800a774 <read_instant_mk6n+0x2a4>)
 800a6ac:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800a6ae:	4b30      	ldr	r3, [pc, #192]	; (800a770 <read_instant_mk6n+0x2a0>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d019      	beq.n	800a6ea <read_instant_mk6n+0x21a>
		if(usemqtt){
 800a6b6:	4b30      	ldr	r3, [pc, #192]	; (800a778 <read_instant_mk6n+0x2a8>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <read_instant_mk6n+0x208>
			len_mydata=bufsizechararray(mydata);
 800a6be:	481c      	ldr	r0, [pc, #112]	; (800a730 <read_instant_mk6n+0x260>)
 800a6c0:	f7fe fa00 	bl	8008ac4 <bufsizechararray>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4a2d      	ldr	r2, [pc, #180]	; (800a77c <read_instant_mk6n+0x2ac>)
 800a6c8:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800a6ca:	f7fe fa91 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800a6ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6d2:	f00e fa51 	bl	8018b78 <osDelay>
			net_err_cnt=0;
			osDelay(5000);
			setup_modem();
		}
	}
}
 800a6d6:	e01a      	b.n	800a70e <read_instant_mk6n+0x23e>
		else sendToServer(mydata,bufsizechararray(mydata));
 800a6d8:	4815      	ldr	r0, [pc, #84]	; (800a730 <read_instant_mk6n+0x260>)
 800a6da:	f7fe f9f3 	bl	8008ac4 <bufsizechararray>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4813      	ldr	r0, [pc, #76]	; (800a730 <read_instant_mk6n+0x260>)
 800a6e4:	f7fd fe9e 	bl	8008424 <sendToServer>
}
 800a6e8:	e011      	b.n	800a70e <read_instant_mk6n+0x23e>
		if(net_err_cnt >= 3) {
 800a6ea:	4b22      	ldr	r3, [pc, #136]	; (800a774 <read_instant_mk6n+0x2a4>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	dd0d      	ble.n	800a70e <read_instant_mk6n+0x23e>
			printf("Restart Modem \r\n");
 800a6f2:	4823      	ldr	r0, [pc, #140]	; (800a780 <read_instant_mk6n+0x2b0>)
 800a6f4:	f011 fe5c 	bl	801c3b0 <puts>
			NB_rst1_rtos();
 800a6f8:	f7ff fb4e 	bl	8009d98 <NB_rst1_rtos>
			net_err_cnt=0;
 800a6fc:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <read_instant_mk6n+0x2a4>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 800a702:	f241 3088 	movw	r0, #5000	; 0x1388
 800a706:	f00e fa37 	bl	8018b78 <osDelay>
			setup_modem();
 800a70a:	f7fd fdfd 	bl	8008308 <setup_modem>
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	bd90      	pop	{r4, r7, pc}
 800a716:	bf00      	nop
 800a718:	20000188 	.word	0x20000188
 800a71c:	0801f3fc 	.word	0x0801f3fc
 800a720:	0801f840 	.word	0x0801f840
 800a724:	20003fe4 	.word	0x20003fe4
 800a728:	2000430d 	.word	0x2000430d
 800a72c:	200042f8 	.word	0x200042f8
 800a730:	200046c8 	.word	0x200046c8
 800a734:	20005324 	.word	0x20005324
 800a738:	200095dc 	.word	0x200095dc
 800a73c:	200045f4 	.word	0x200045f4
 800a740:	0801f854 	.word	0x0801f854
 800a744:	20009058 	.word	0x20009058
 800a748:	0801ef44 	.word	0x0801ef44
 800a74c:	200089fc 	.word	0x200089fc
 800a750:	0801f884 	.word	0x0801f884
 800a754:	20005770 	.word	0x20005770
 800a758:	0801f470 	.word	0x0801f470
 800a75c:	2000b50c 	.word	0x2000b50c
 800a760:	0801f480 	.word	0x0801f480
 800a764:	20000638 	.word	0x20000638
 800a768:	20008a00 	.word	0x20008a00
 800a76c:	200045f0 	.word	0x200045f0
 800a770:	20000013 	.word	0x20000013
 800a774:	20002758 	.word	0x20002758
 800a778:	20004285 	.word	0x20004285
 800a77c:	20009120 	.word	0x20009120
 800a780:	0801f89c 	.word	0x0801f89c

0800a784 <read_eob_mk6n>:

void read_eob_mk6n(){
 800a784:	b590      	push	{r4, r7, lr}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 800a78a:	f7fb fe61 	bl	8006450 <loginToMeterRTOS>
	dataallclearMK6N();
 800a78e:	f7f6 fca5 	bl	80010dc <dataallclearMK6N>
	memset(mydata,0,1100);
 800a792:	f240 424c 	movw	r2, #1100	; 0x44c
 800a796:	2100      	movs	r1, #0
 800a798:	486f      	ldr	r0, [pc, #444]	; (800a958 <read_eob_mk6n+0x1d4>)
 800a79a:	f011 f867 	bl	801b86c <memset>
	osDelay(1000);
 800a79e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7a2:	f00e f9e9 	bl	8018b78 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800a7a6:	4b6d      	ldr	r3, [pc, #436]	; (800a95c <read_eob_mk6n+0x1d8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	496d      	ldr	r1, [pc, #436]	; (800a960 <read_eob_mk6n+0x1dc>)
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7f5 fd0f 	bl	80001d0 <strcmp>
 800a7b2:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <read_eob_mk6n+0x3a>
 800a7ba:	f001 fa9d 	bl	800bcf8 <read_sn_edmi>
	SerialMonprintln("Read EoB init MK6N");
 800a7be:	4869      	ldr	r0, [pc, #420]	; (800a964 <read_eob_mk6n+0x1e0>)
 800a7c0:	f7fb fdf8 	bl	80063b4 <SerialMonprintln>
	uart3disc = true;
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	701a      	strb	r2, [r3, #0]
	uart3done=false;
 800a7ca:	4b68      	ldr	r3, [pc, #416]	; (800a96c <read_eob_mk6n+0x1e8>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	701a      	strb	r2, [r3, #0]
	txEoBInit1();
 800a7d0:	f7f8 fb6a 	bl	8002ea8 <txEoBInit1>
	for(int y=0;y<20;y++){
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	e00d      	b.n	800a7f6 <read_eob_mk6n+0x72>
		osDelay(200);
 800a7da:	20c8      	movs	r0, #200	; 0xc8
 800a7dc:	f00e f9cc 	bl	8018b78 <osDelay>
		if(uart3done){
 800a7e0:	4b62      	ldr	r3, [pc, #392]	; (800a96c <read_eob_mk6n+0x1e8>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <read_eob_mk6n+0x6c>
			uart3disc = false;
 800a7e8:	4b5f      	ldr	r3, [pc, #380]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
			break;
 800a7ee:	e005      	b.n	800a7fc <read_eob_mk6n+0x78>
	for(int y=0;y<20;y++){
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b13      	cmp	r3, #19
 800a7fa:	ddee      	ble.n	800a7da <read_eob_mk6n+0x56>
		}
	}
	if (!uart3disc) rxEoBInit1(buffer3,datauart3size(buffer3));
 800a7fc:	4b5a      	ldr	r3, [pc, #360]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f083 0301 	eor.w	r3, r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <read_eob_mk6n+0x98>
 800a80a:	4859      	ldr	r0, [pc, #356]	; (800a970 <read_eob_mk6n+0x1ec>)
 800a80c:	f7fe f942 	bl	8008a94 <datauart3size>
 800a810:	4603      	mov	r3, r0
 800a812:	4619      	mov	r1, r3
 800a814:	4856      	ldr	r0, [pc, #344]	; (800a970 <read_eob_mk6n+0x1ec>)
 800a816:	f7f8 fb63 	bl	8002ee0 <rxEoBInit1>
 800a81a:	e05d      	b.n	800a8d8 <read_eob_mk6n+0x154>
	  else {
			memset((char *)mydata,0,1100);
 800a81c:	f240 424c 	movw	r2, #1100	; 0x44c
 800a820:	2100      	movs	r1, #0
 800a822:	484d      	ldr	r0, [pc, #308]	; (800a958 <read_eob_mk6n+0x1d4>)
 800a824:	f011 f822 	bl	801b86c <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a828:	4b52      	ldr	r3, [pc, #328]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a4b      	ldr	r2, [pc, #300]	; (800a95c <read_eob_mk6n+0x1d8>)
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	4951      	ldr	r1, [pc, #324]	; (800a978 <read_eob_mk6n+0x1f4>)
 800a832:	4618      	mov	r0, r3
 800a834:	f011 fdd4 	bl	801c3e0 <siprintf>
			strcat(temp_data, (char*)csq);
 800a838:	4b4e      	ldr	r3, [pc, #312]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	494f      	ldr	r1, [pc, #316]	; (800a97c <read_eob_mk6n+0x1f8>)
 800a83e:	4618      	mov	r0, r3
 800a840:	f011 fdee 	bl	801c420 <strcat>
			strcat(temp_data,"\"");
 800a844:	4b4b      	ldr	r3, [pc, #300]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a846:	681c      	ldr	r4, [r3, #0]
 800a848:	4620      	mov	r0, r4
 800a84a:	f7f5 fccb 	bl	80001e4 <strlen>
 800a84e:	4603      	mov	r3, r0
 800a850:	4423      	add	r3, r4
 800a852:	494b      	ldr	r1, [pc, #300]	; (800a980 <read_eob_mk6n+0x1fc>)
 800a854:	461a      	mov	r2, r3
 800a856:	460b      	mov	r3, r1
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a85c:	4b49      	ldr	r3, [pc, #292]	; (800a984 <read_eob_mk6n+0x200>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4949      	ldr	r1, [pc, #292]	; (800a988 <read_eob_mk6n+0x204>)
 800a862:	4618      	mov	r0, r3
 800a864:	f011 fdbc 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800a868:	4b42      	ldr	r3, [pc, #264]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a45      	ldr	r2, [pc, #276]	; (800a984 <read_eob_mk6n+0x200>)
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f011 fdd4 	bl	801c420 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800a878:	4b42      	ldr	r3, [pc, #264]	; (800a984 <read_eob_mk6n+0x200>)
 800a87a:	681c      	ldr	r4, [r3, #0]
 800a87c:	4b43      	ldr	r3, [pc, #268]	; (800a98c <read_eob_mk6n+0x208>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4618      	mov	r0, r3
 800a882:	f7f5 fe71 	bl	8000568 <__aeabi_f2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4941      	ldr	r1, [pc, #260]	; (800a990 <read_eob_mk6n+0x20c>)
 800a88c:	4620      	mov	r0, r4
 800a88e:	f011 fda7 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a3b      	ldr	r2, [pc, #236]	; (800a984 <read_eob_mk6n+0x200>)
 800a898:	6812      	ldr	r2, [r2, #0]
 800a89a:	4611      	mov	r1, r2
 800a89c:	4618      	mov	r0, r3
 800a89e:	f011 fdbf 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800a8a2:	4b38      	ldr	r3, [pc, #224]	; (800a984 <read_eob_mk6n+0x200>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a3b      	ldr	r2, [pc, #236]	; (800a994 <read_eob_mk6n+0x210>)
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	493b      	ldr	r1, [pc, #236]	; (800a998 <read_eob_mk6n+0x214>)
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f011 fd97 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800a8b2:	4b30      	ldr	r3, [pc, #192]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a33      	ldr	r2, [pc, #204]	; (800a984 <read_eob_mk6n+0x200>)
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f011 fdaf 	bl	801c420 <strcat>
			strcpy(mydata,temp_data);
 800a8c2:	4b2c      	ldr	r3, [pc, #176]	; (800a974 <read_eob_mk6n+0x1f0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4823      	ldr	r0, [pc, #140]	; (800a958 <read_eob_mk6n+0x1d4>)
 800a8ca:	f011 fdb8 	bl	801c43e <strcpy>
			cnt_eob++;
 800a8ce:	4b33      	ldr	r3, [pc, #204]	; (800a99c <read_eob_mk6n+0x218>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	4a31      	ldr	r2, [pc, #196]	; (800a99c <read_eob_mk6n+0x218>)
 800a8d6:	6013      	str	r3, [r2, #0]
		}
	memset(buffer3,0,1000);
 800a8d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4824      	ldr	r0, [pc, #144]	; (800a970 <read_eob_mk6n+0x1ec>)
 800a8e0:	f010 ffc4 	bl	801b86c <memset>
//	HAL_Delay(1000);
	SerialMonprintln("Read EoB MK6N");
 800a8e4:	482e      	ldr	r0, [pc, #184]	; (800a9a0 <read_eob_mk6n+0x21c>)
 800a8e6:	f7fb fd65 	bl	80063b4 <SerialMonprintln>
	memset(mydata,0,1100);
 800a8ea:	f240 424c 	movw	r2, #1100	; 0x44c
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	4819      	ldr	r0, [pc, #100]	; (800a958 <read_eob_mk6n+0x1d4>)
 800a8f2:	f010 ffbb 	bl	801b86c <memset>
	for(int i=0;i<9;i++){
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]
 800a8fa:	e0ba      	b.n	800aa72 <read_eob_mk6n+0x2ee>
		uart3disc = true;
 800a8fc:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a8fe:	2201      	movs	r2, #1
 800a900:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800a902:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <read_eob_mk6n+0x1e8>)
 800a904:	2200      	movs	r2, #0
 800a906:	701a      	strb	r2, [r3, #0]
		readEoB2(i);
 800a908:	68b8      	ldr	r0, [r7, #8]
 800a90a:	f7f8 f9b3 	bl	8002c74 <readEoB2>
		for(int y=0;y<20;y++){
 800a90e:	2300      	movs	r3, #0
 800a910:	607b      	str	r3, [r7, #4]
 800a912:	e00d      	b.n	800a930 <read_eob_mk6n+0x1ac>
			osDelay(200);
 800a914:	20c8      	movs	r0, #200	; 0xc8
 800a916:	f00e f92f 	bl	8018b78 <osDelay>
			if(uart3done){
 800a91a:	4b14      	ldr	r3, [pc, #80]	; (800a96c <read_eob_mk6n+0x1e8>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <read_eob_mk6n+0x1a6>
				uart3disc = false;
 800a922:	4b11      	ldr	r3, [pc, #68]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a924:	2200      	movs	r2, #0
 800a926:	701a      	strb	r2, [r3, #0]
				break;
 800a928:	e005      	b.n	800a936 <read_eob_mk6n+0x1b2>
		for(int y=0;y<20;y++){
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3301      	adds	r3, #1
 800a92e:	607b      	str	r3, [r7, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b13      	cmp	r3, #19
 800a934:	ddee      	ble.n	800a914 <read_eob_mk6n+0x190>
			}
		}
		if (!uart3disc) readEoB3(buffer3,datauart3size(buffer3),i);
 800a936:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <read_eob_mk6n+0x1e4>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	f083 0301 	eor.w	r3, r3, #1
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02f      	beq.n	800a9a4 <read_eob_mk6n+0x220>
 800a944:	480a      	ldr	r0, [pc, #40]	; (800a970 <read_eob_mk6n+0x1ec>)
 800a946:	f7fe f8a5 	bl	8008a94 <datauart3size>
 800a94a:	4603      	mov	r3, r0
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	4619      	mov	r1, r3
 800a950:	4807      	ldr	r0, [pc, #28]	; (800a970 <read_eob_mk6n+0x1ec>)
 800a952:	f7f8 f9ef 	bl	8002d34 <readEoB3>
 800a956:	e083      	b.n	800aa60 <read_eob_mk6n+0x2dc>
 800a958:	200046c8 	.word	0x200046c8
 800a95c:	20000188 	.word	0x20000188
 800a960:	0801f3fc 	.word	0x0801f3fc
 800a964:	0801f8ac 	.word	0x0801f8ac
 800a968:	2000430d 	.word	0x2000430d
 800a96c:	200042f8 	.word	0x200042f8
 800a970:	200095dc 	.word	0x200095dc
 800a974:	200045f4 	.word	0x200045f4
 800a978:	0801f854 	.word	0x0801f854
 800a97c:	20009058 	.word	0x20009058
 800a980:	0801ef44 	.word	0x0801ef44
 800a984:	200089fc 	.word	0x200089fc
 800a988:	0801f884 	.word	0x0801f884
 800a98c:	20005770 	.word	0x20005770
 800a990:	0801f470 	.word	0x0801f470
 800a994:	2000b50c 	.word	0x2000b50c
 800a998:	0801f480 	.word	0x0801f480
 800a99c:	2000063c 	.word	0x2000063c
 800a9a0:	0801f8c0 	.word	0x0801f8c0
		  else {
				memset((char *)mydata,0,1100);
 800a9a4:	f240 424c 	movw	r2, #1100	; 0x44c
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4861      	ldr	r0, [pc, #388]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800a9ac:	f010 ff5e 	bl	801b86c <memset>
				sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800a9b0:	4b60      	ldr	r3, [pc, #384]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a60      	ldr	r2, [pc, #384]	; (800ab38 <read_eob_mk6n+0x3b4>)
 800a9b6:	6812      	ldr	r2, [r2, #0]
 800a9b8:	4960      	ldr	r1, [pc, #384]	; (800ab3c <read_eob_mk6n+0x3b8>)
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f011 fd10 	bl	801c3e0 <siprintf>
				strcat(temp_data, (char*)csq);
 800a9c0:	4b5c      	ldr	r3, [pc, #368]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	495e      	ldr	r1, [pc, #376]	; (800ab40 <read_eob_mk6n+0x3bc>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f011 fd2a 	bl	801c420 <strcat>
				strcat(temp_data,"\"");
 800a9cc:	4b59      	ldr	r3, [pc, #356]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800a9ce:	681c      	ldr	r4, [r3, #0]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f7f5 fc07 	bl	80001e4 <strlen>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4423      	add	r3, r4
 800a9da:	495a      	ldr	r1, [pc, #360]	; (800ab44 <read_eob_mk6n+0x3c0>)
 800a9dc:	461a      	mov	r2, r3
 800a9de:	460b      	mov	r3, r1
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	8013      	strh	r3, [r2, #0]
			  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800a9e4:	4b58      	ldr	r3, [pc, #352]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4958      	ldr	r1, [pc, #352]	; (800ab4c <read_eob_mk6n+0x3c8>)
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f011 fcf8 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800a9f0:	4b50      	ldr	r3, [pc, #320]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a54      	ldr	r2, [pc, #336]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f011 fd10 	bl	801c420 <strcat>
			  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800aa00:	4b51      	ldr	r3, [pc, #324]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800aa02:	681c      	ldr	r4, [r3, #0]
 800aa04:	4b52      	ldr	r3, [pc, #328]	; (800ab50 <read_eob_mk6n+0x3cc>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f5 fdad 	bl	8000568 <__aeabi_f2d>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4950      	ldr	r1, [pc, #320]	; (800ab54 <read_eob_mk6n+0x3d0>)
 800aa14:	4620      	mov	r0, r4
 800aa16:	f011 fce3 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800aa1a:	4b46      	ldr	r3, [pc, #280]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a4a      	ldr	r2, [pc, #296]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f011 fcfb 	bl	801c420 <strcat>
				sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800aa2a:	4b47      	ldr	r3, [pc, #284]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a4a      	ldr	r2, [pc, #296]	; (800ab58 <read_eob_mk6n+0x3d4>)
 800aa30:	7812      	ldrb	r2, [r2, #0]
 800aa32:	494a      	ldr	r1, [pc, #296]	; (800ab5c <read_eob_mk6n+0x3d8>)
 800aa34:	4618      	mov	r0, r3
 800aa36:	f011 fcd3 	bl	801c3e0 <siprintf>
				strcat(temp_data, temp_data2);
 800aa3a:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a42      	ldr	r2, [pc, #264]	; (800ab48 <read_eob_mk6n+0x3c4>)
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f011 fceb 	bl	801c420 <strcat>
				strcpy(mydata,temp_data);
 800aa4a:	4b3a      	ldr	r3, [pc, #232]	; (800ab34 <read_eob_mk6n+0x3b0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4837      	ldr	r0, [pc, #220]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aa52:	f011 fcf4 	bl	801c43e <strcpy>
				cnt_eob++;
 800aa56:	4b42      	ldr	r3, [pc, #264]	; (800ab60 <read_eob_mk6n+0x3dc>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	4a40      	ldr	r2, [pc, #256]	; (800ab60 <read_eob_mk6n+0x3dc>)
 800aa5e:	6013      	str	r3, [r2, #0]
			}
		memset(buffer3,0,1000);
 800aa60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa64:	2100      	movs	r1, #0
 800aa66:	483f      	ldr	r0, [pc, #252]	; (800ab64 <read_eob_mk6n+0x3e0>)
 800aa68:	f010 ff00 	bl	801b86c <memset>
	for(int i=0;i<9;i++){
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60bb      	str	r3, [r7, #8]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	f77f af41 	ble.w	800a8fc <read_eob_mk6n+0x178>
	}
	if(!uart3disc) decodeEoB3(mydata);
 800aa7a:	4b3b      	ldr	r3, [pc, #236]	; (800ab68 <read_eob_mk6n+0x3e4>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	f083 0301 	eor.w	r3, r3, #1
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <read_eob_mk6n+0x30a>
 800aa88:	4829      	ldr	r0, [pc, #164]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aa8a:	f7f8 f9df 	bl	8002e4c <decodeEoB3>

	printf(mydata);
 800aa8e:	4828      	ldr	r0, [pc, #160]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aa90:	f011 fc08 	bl	801c2a4 <iprintf>
	csqint = 1;
 800aa94:	4b35      	ldr	r3, [pc, #212]	; (800ab6c <read_eob_mk6n+0x3e8>)
 800aa96:	2201      	movs	r2, #1
 800aa98:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800aa9a:	4b35      	ldr	r3, [pc, #212]	; (800ab70 <read_eob_mk6n+0x3ec>)
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800aaa0:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <read_eob_mk6n+0x3e8>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <read_eob_mk6n+0x32c>
 800aaa8:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <read_eob_mk6n+0x3ec>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <read_eob_mk6n+0x334>
//		printf("online True\r\n");
		onlineMode = true;
 800aab0:	4b30      	ldr	r3, [pc, #192]	; (800ab74 <read_eob_mk6n+0x3f0>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	701a      	strb	r2, [r3, #0]
 800aab6:	e007      	b.n	800aac8 <read_eob_mk6n+0x344>
	}
	else {
		onlineMode = false;
 800aab8:	4b2e      	ldr	r3, [pc, #184]	; (800ab74 <read_eob_mk6n+0x3f0>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800aabe:	4b2e      	ldr	r3, [pc, #184]	; (800ab78 <read_eob_mk6n+0x3f4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	4a2c      	ldr	r2, [pc, #176]	; (800ab78 <read_eob_mk6n+0x3f4>)
 800aac6:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800aac8:	4b2a      	ldr	r3, [pc, #168]	; (800ab74 <read_eob_mk6n+0x3f0>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d019      	beq.n	800ab04 <read_eob_mk6n+0x380>
		if(usemqtt){
 800aad0:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <read_eob_mk6n+0x3f8>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00c      	beq.n	800aaf2 <read_eob_mk6n+0x36e>
			len_mydata=bufsizechararray(mydata);
 800aad8:	4815      	ldr	r0, [pc, #84]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aada:	f7fd fff3 	bl	8008ac4 <bufsizechararray>
 800aade:	4603      	mov	r3, r0
 800aae0:	4a27      	ldr	r2, [pc, #156]	; (800ab80 <read_eob_mk6n+0x3fc>)
 800aae2:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800aae4:	f7fe f884 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800aae8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aaec:	f00e f844 	bl	8018b78 <osDelay>
			net_err_cnt=0;
			osDelay(5000);
			setup_modem();
		}
	}
}
 800aaf0:	e01a      	b.n	800ab28 <read_eob_mk6n+0x3a4>
		else sendToServer(mydata,bufsizechararray(mydata));
 800aaf2:	480f      	ldr	r0, [pc, #60]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aaf4:	f7fd ffe6 	bl	8008ac4 <bufsizechararray>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	4619      	mov	r1, r3
 800aafc:	480c      	ldr	r0, [pc, #48]	; (800ab30 <read_eob_mk6n+0x3ac>)
 800aafe:	f7fd fc91 	bl	8008424 <sendToServer>
}
 800ab02:	e011      	b.n	800ab28 <read_eob_mk6n+0x3a4>
		if(net_err_cnt >= 3) {
 800ab04:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <read_eob_mk6n+0x3f4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	dd0d      	ble.n	800ab28 <read_eob_mk6n+0x3a4>
			printf("Restart Modem \r\n");
 800ab0c:	481d      	ldr	r0, [pc, #116]	; (800ab84 <read_eob_mk6n+0x400>)
 800ab0e:	f011 fc4f 	bl	801c3b0 <puts>
			NB_rst1_rtos();
 800ab12:	f7ff f941 	bl	8009d98 <NB_rst1_rtos>
			net_err_cnt=0;
 800ab16:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <read_eob_mk6n+0x3f4>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 800ab1c:	f241 3088 	movw	r0, #5000	; 0x1388
 800ab20:	f00e f82a 	bl	8018b78 <osDelay>
			setup_modem();
 800ab24:	f7fd fbf0 	bl	8008308 <setup_modem>
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd90      	pop	{r4, r7, pc}
 800ab30:	200046c8 	.word	0x200046c8
 800ab34:	200045f4 	.word	0x200045f4
 800ab38:	20000188 	.word	0x20000188
 800ab3c:	0801f854 	.word	0x0801f854
 800ab40:	20009058 	.word	0x20009058
 800ab44:	0801ef44 	.word	0x0801ef44
 800ab48:	200089fc 	.word	0x200089fc
 800ab4c:	0801f884 	.word	0x0801f884
 800ab50:	20005770 	.word	0x20005770
 800ab54:	0801f470 	.word	0x0801f470
 800ab58:	2000b50c 	.word	0x2000b50c
 800ab5c:	0801f480 	.word	0x0801f480
 800ab60:	2000063c 	.word	0x2000063c
 800ab64:	200095dc 	.word	0x200095dc
 800ab68:	2000430d 	.word	0x2000430d
 800ab6c:	20008a00 	.word	0x20008a00
 800ab70:	200045f0 	.word	0x200045f0
 800ab74:	20000013 	.word	0x20000013
 800ab78:	20002758 	.word	0x20002758
 800ab7c:	20004285 	.word	0x20004285
 800ab80:	20009120 	.word	0x20009120
 800ab84:	0801f89c 	.word	0x0801f89c

0800ab88 <read_lp_mk6n>:

void read_lp_mk6n(){
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
	  dataallclearMK6N();
 800ab8e:	f7f6 faa5 	bl	80010dc <dataallclearMK6N>
	  loginToMeterRTOS();
 800ab92:	f7fb fc5d 	bl	8006450 <loginToMeterRTOS>
	  dataallclearMK6N();
 800ab96:	f7f6 faa1 	bl	80010dc <dataallclearMK6N>
	  osDelay(1000);
 800ab9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab9e:	f00d ffeb 	bl	8018b78 <osDelay>
	  int cmpint = strcmp(snMeter, "00000000");
 800aba2:	4bab      	ldr	r3, [pc, #684]	; (800ae50 <read_lp_mk6n+0x2c8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	49ab      	ldr	r1, [pc, #684]	; (800ae54 <read_lp_mk6n+0x2cc>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f5 fb11 	bl	80001d0 <strcmp>
 800abae:	6038      	str	r0, [r7, #0]
	  if(cmpint == 0) read_sn_edmi();
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <read_lp_mk6n+0x32>
 800abb6:	f001 f89f 	bl	800bcf8 <read_sn_edmi>
	  SerialMonprintln("Read LP MK6N");
 800abba:	48a7      	ldr	r0, [pc, #668]	; (800ae58 <read_lp_mk6n+0x2d0>)
 800abbc:	f7fb fbfa 	bl	80063b4 <SerialMonprintln>
	  memset(mydata,0,1100);
 800abc0:	f240 424c 	movw	r2, #1100	; 0x44c
 800abc4:	2100      	movs	r1, #0
 800abc6:	48a5      	ldr	r0, [pc, #660]	; (800ae5c <read_lp_mk6n+0x2d4>)
 800abc8:	f010 fe50 	bl	801b86c <memset>
	  uart3disc = true;
 800abcc:	4ba4      	ldr	r3, [pc, #656]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800abce:	2201      	movs	r2, #1
 800abd0:	701a      	strb	r2, [r3, #0]
	  uart3done=false;
 800abd2:	4ba4      	ldr	r3, [pc, #656]	; (800ae64 <read_lp_mk6n+0x2dc>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	701a      	strb	r2, [r3, #0]
	  txlpInit1MK6N();
 800abd8:	f7f7 fba4 	bl	8002324 <txlpInit1MK6N>
	  for(int y=0;y<20;y++){
 800abdc:	2300      	movs	r3, #0
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	e00d      	b.n	800abfe <read_lp_mk6n+0x76>
			osDelay(200);
 800abe2:	20c8      	movs	r0, #200	; 0xc8
 800abe4:	f00d ffc8 	bl	8018b78 <osDelay>
			if(uart3done){
 800abe8:	4b9e      	ldr	r3, [pc, #632]	; (800ae64 <read_lp_mk6n+0x2dc>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <read_lp_mk6n+0x70>
				uart3disc = false;
 800abf0:	4b9b      	ldr	r3, [pc, #620]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	701a      	strb	r2, [r3, #0]
				break;
 800abf6:	e005      	b.n	800ac04 <read_lp_mk6n+0x7c>
	  for(int y=0;y<20;y++){
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	3301      	adds	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b13      	cmp	r3, #19
 800ac02:	ddee      	ble.n	800abe2 <read_lp_mk6n+0x5a>
			}
	  }
	  if(!uart3disc){
 800ac04:	4b96      	ldr	r3, [pc, #600]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f083 0301 	eor.w	r3, r3, #1
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d008      	beq.n	800ac24 <read_lp_mk6n+0x9c>
		  rxlpInit1MK6N(buffer3,datauart3size(buffer3));
 800ac12:	4895      	ldr	r0, [pc, #596]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ac14:	f7fd ff3e 	bl	8008a94 <datauart3size>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4892      	ldr	r0, [pc, #584]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ac1e:	f7f7 fbc9 	bl	80023b4 <rxlpInit1MK6N>
 800ac22:	e05d      	b.n	800ace0 <read_lp_mk6n+0x158>
	  }
	  else {
			memset((char *)mydata,0,1100);
 800ac24:	f240 424c 	movw	r2, #1100	; 0x44c
 800ac28:	2100      	movs	r1, #0
 800ac2a:	488c      	ldr	r0, [pc, #560]	; (800ae5c <read_lp_mk6n+0x2d4>)
 800ac2c:	f010 fe1e 	bl	801b86c <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800ac30:	4b8e      	ldr	r3, [pc, #568]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a86      	ldr	r2, [pc, #536]	; (800ae50 <read_lp_mk6n+0x2c8>)
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	498d      	ldr	r1, [pc, #564]	; (800ae70 <read_lp_mk6n+0x2e8>)
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f011 fbd0 	bl	801c3e0 <siprintf>
			strcat(temp_data, (char*)csq);
 800ac40:	4b8a      	ldr	r3, [pc, #552]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	498b      	ldr	r1, [pc, #556]	; (800ae74 <read_lp_mk6n+0x2ec>)
 800ac46:	4618      	mov	r0, r3
 800ac48:	f011 fbea 	bl	801c420 <strcat>
			strcat(temp_data,"\"");
 800ac4c:	4b87      	ldr	r3, [pc, #540]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ac4e:	681c      	ldr	r4, [r3, #0]
 800ac50:	4620      	mov	r0, r4
 800ac52:	f7f5 fac7 	bl	80001e4 <strlen>
 800ac56:	4603      	mov	r3, r0
 800ac58:	4423      	add	r3, r4
 800ac5a:	4987      	ldr	r1, [pc, #540]	; (800ae78 <read_lp_mk6n+0x2f0>)
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	460b      	mov	r3, r1
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800ac64:	4b85      	ldr	r3, [pc, #532]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4985      	ldr	r1, [pc, #532]	; (800ae80 <read_lp_mk6n+0x2f8>)
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f011 fbb8 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800ac70:	4b7e      	ldr	r3, [pc, #504]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a81      	ldr	r2, [pc, #516]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800ac76:	6812      	ldr	r2, [r2, #0]
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f011 fbd0 	bl	801c420 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800ac80:	4b7e      	ldr	r3, [pc, #504]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800ac82:	681c      	ldr	r4, [r3, #0]
 800ac84:	4b7f      	ldr	r3, [pc, #508]	; (800ae84 <read_lp_mk6n+0x2fc>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7f5 fc6d 	bl	8000568 <__aeabi_f2d>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	497d      	ldr	r1, [pc, #500]	; (800ae88 <read_lp_mk6n+0x300>)
 800ac94:	4620      	mov	r0, r4
 800ac96:	f011 fba3 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800ac9a:	4b74      	ldr	r3, [pc, #464]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a77      	ldr	r2, [pc, #476]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800aca0:	6812      	ldr	r2, [r2, #0]
 800aca2:	4611      	mov	r1, r2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f011 fbbb 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800acaa:	4b74      	ldr	r3, [pc, #464]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a77      	ldr	r2, [pc, #476]	; (800ae8c <read_lp_mk6n+0x304>)
 800acb0:	7812      	ldrb	r2, [r2, #0]
 800acb2:	4977      	ldr	r1, [pc, #476]	; (800ae90 <read_lp_mk6n+0x308>)
 800acb4:	4618      	mov	r0, r3
 800acb6:	f011 fb93 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800acba:	4b6c      	ldr	r3, [pc, #432]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a6f      	ldr	r2, [pc, #444]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f011 fbab 	bl	801c420 <strcat>
			strcpy(mydata,temp_data);
 800acca:	4b68      	ldr	r3, [pc, #416]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4619      	mov	r1, r3
 800acd0:	4862      	ldr	r0, [pc, #392]	; (800ae5c <read_lp_mk6n+0x2d4>)
 800acd2:	f011 fbb4 	bl	801c43e <strcpy>
			cnt_lp++;
 800acd6:	4b6f      	ldr	r3, [pc, #444]	; (800ae94 <read_lp_mk6n+0x30c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	4a6d      	ldr	r2, [pc, #436]	; (800ae94 <read_lp_mk6n+0x30c>)
 800acde:	6013      	str	r3, [r2, #0]
		}

		memset(buffer3,0,1100);
 800ace0:	f240 424c 	movw	r2, #1100	; 0x44c
 800ace4:	2100      	movs	r1, #0
 800ace6:	4860      	ldr	r0, [pc, #384]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ace8:	f010 fdc0 	bl	801b86c <memset>
		uart3disc = true;
 800acec:	4b5c      	ldr	r3, [pc, #368]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800acf2:	4b5c      	ldr	r3, [pc, #368]	; (800ae64 <read_lp_mk6n+0x2dc>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]
	  txlpMK6NInit2();
 800acf8:	f7f7 fc02 	bl	8002500 <txlpMK6NInit2>
	  for(int y=0;y<20;y++){
 800acfc:	2300      	movs	r3, #0
 800acfe:	613b      	str	r3, [r7, #16]
 800ad00:	e00d      	b.n	800ad1e <read_lp_mk6n+0x196>
		osDelay(200);
 800ad02:	20c8      	movs	r0, #200	; 0xc8
 800ad04:	f00d ff38 	bl	8018b78 <osDelay>
		if(uart3done){
 800ad08:	4b56      	ldr	r3, [pc, #344]	; (800ae64 <read_lp_mk6n+0x2dc>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <read_lp_mk6n+0x190>
			uart3disc = false;
 800ad10:	4b53      	ldr	r3, [pc, #332]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
			break;
 800ad16:	e005      	b.n	800ad24 <read_lp_mk6n+0x19c>
	  for(int y=0;y<20;y++){
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	613b      	str	r3, [r7, #16]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	2b13      	cmp	r3, #19
 800ad22:	ddee      	ble.n	800ad02 <read_lp_mk6n+0x17a>
		}
	  }
	  if(!uart3disc){
 800ad24:	4b4e      	ldr	r3, [pc, #312]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f083 0301 	eor.w	r3, r3, #1
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d014      	beq.n	800ad5c <read_lp_mk6n+0x1d4>
		  rxlpMK6NInit2(buffer3,datauart3size(buffer3));
 800ad32:	484d      	ldr	r0, [pc, #308]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ad34:	f7fd feae 	bl	8008a94 <datauart3size>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	484a      	ldr	r0, [pc, #296]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ad3e:	f7f7 fc47 	bl	80025d0 <rxlpMK6NInit2>
		  memset(buffer3,0,1100);
 800ad42:	f240 424c 	movw	r2, #1100	; 0x44c
 800ad46:	2100      	movs	r1, #0
 800ad48:	4847      	ldr	r0, [pc, #284]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ad4a:	f010 fd8f 	bl	801b86c <memset>
		  jmlChMK6N = getJumlahChannelMK6N();
 800ad4e:	f7f7 fc77 	bl	8002640 <getJumlahChannelMK6N>
 800ad52:	4603      	mov	r3, r0
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	4b50      	ldr	r3, [pc, #320]	; (800ae98 <read_lp_mk6n+0x310>)
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e05d      	b.n	800ae18 <read_lp_mk6n+0x290>
	  }
	  else {
			memset((char *)mydata,0,1100);
 800ad5c:	f240 424c 	movw	r2, #1100	; 0x44c
 800ad60:	2100      	movs	r1, #0
 800ad62:	483e      	ldr	r0, [pc, #248]	; (800ae5c <read_lp_mk6n+0x2d4>)
 800ad64:	f010 fd82 	bl	801b86c <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800ad68:	4b40      	ldr	r3, [pc, #256]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a38      	ldr	r2, [pc, #224]	; (800ae50 <read_lp_mk6n+0x2c8>)
 800ad6e:	6812      	ldr	r2, [r2, #0]
 800ad70:	493f      	ldr	r1, [pc, #252]	; (800ae70 <read_lp_mk6n+0x2e8>)
 800ad72:	4618      	mov	r0, r3
 800ad74:	f011 fb34 	bl	801c3e0 <siprintf>
			strcat(temp_data, (char*)csq);
 800ad78:	4b3c      	ldr	r3, [pc, #240]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	493d      	ldr	r1, [pc, #244]	; (800ae74 <read_lp_mk6n+0x2ec>)
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f011 fb4e 	bl	801c420 <strcat>
			strcat(temp_data,"\"");
 800ad84:	4b39      	ldr	r3, [pc, #228]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ad86:	681c      	ldr	r4, [r3, #0]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7f5 fa2b 	bl	80001e4 <strlen>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	4423      	add	r3, r4
 800ad92:	4939      	ldr	r1, [pc, #228]	; (800ae78 <read_lp_mk6n+0x2f0>)
 800ad94:	461a      	mov	r2, r3
 800ad96:	460b      	mov	r3, r1
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800ad9c:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4937      	ldr	r1, [pc, #220]	; (800ae80 <read_lp_mk6n+0x2f8>)
 800ada2:	4618      	mov	r0, r3
 800ada4:	f011 fb1c 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800ada8:	4b30      	ldr	r3, [pc, #192]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a33      	ldr	r2, [pc, #204]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f011 fb34 	bl	801c420 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800adb8:	4b30      	ldr	r3, [pc, #192]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800adba:	681c      	ldr	r4, [r3, #0]
 800adbc:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <read_lp_mk6n+0x2fc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f5 fbd1 	bl	8000568 <__aeabi_f2d>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	492f      	ldr	r1, [pc, #188]	; (800ae88 <read_lp_mk6n+0x300>)
 800adcc:	4620      	mov	r0, r4
 800adce:	f011 fb07 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800add2:	4b26      	ldr	r3, [pc, #152]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a29      	ldr	r2, [pc, #164]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800add8:	6812      	ldr	r2, [r2, #0]
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f011 fb1f 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800ade2:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a29      	ldr	r2, [pc, #164]	; (800ae8c <read_lp_mk6n+0x304>)
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	4929      	ldr	r1, [pc, #164]	; (800ae90 <read_lp_mk6n+0x308>)
 800adec:	4618      	mov	r0, r3
 800adee:	f011 faf7 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800adf2:	4b1e      	ldr	r3, [pc, #120]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a21      	ldr	r2, [pc, #132]	; (800ae7c <read_lp_mk6n+0x2f4>)
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f011 fb0f 	bl	801c420 <strcat>
			strcpy(mydata,temp_data);
 800ae02:	4b1a      	ldr	r3, [pc, #104]	; (800ae6c <read_lp_mk6n+0x2e4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4619      	mov	r1, r3
 800ae08:	4814      	ldr	r0, [pc, #80]	; (800ae5c <read_lp_mk6n+0x2d4>)
 800ae0a:	f011 fb18 	bl	801c43e <strcpy>
			cnt_lp++;
 800ae0e:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <read_lp_mk6n+0x30c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	4a1f      	ldr	r2, [pc, #124]	; (800ae94 <read_lp_mk6n+0x30c>)
 800ae16:	6013      	str	r3, [r2, #0]
		}
	  memset(buffer3,0,1100);
 800ae18:	f240 424c 	movw	r2, #1100	; 0x44c
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4812      	ldr	r0, [pc, #72]	; (800ae68 <read_lp_mk6n+0x2e0>)
 800ae20:	f010 fd24 	bl	801b86c <memset>
	  jmlChMK6N = getJumlahChannelMK6N();
 800ae24:	f7f7 fc0c 	bl	8002640 <getJumlahChannelMK6N>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	4b1a      	ldr	r3, [pc, #104]	; (800ae98 <read_lp_mk6n+0x310>)
 800ae2e:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(500);
//	  readlpMK6NInit2a();
	  for(int i=0;i<jmlChMK6N;i++){
 800ae30:	2300      	movs	r3, #0
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e0bb      	b.n	800afae <read_lp_mk6n+0x426>
			uart3disc = true;
 800ae36:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <read_lp_mk6n+0x2d8>)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	701a      	strb	r2, [r3, #0]
			uart3done=false;
 800ae3c:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <read_lp_mk6n+0x2dc>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
		txlpMK6NInit2a(i);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7f7 fc08 	bl	8002658 <txlpMK6NInit2a>
		for(int y=0;y<20;y++){
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60bb      	str	r3, [r7, #8]
 800ae4c:	e034      	b.n	800aeb8 <read_lp_mk6n+0x330>
 800ae4e:	bf00      	nop
 800ae50:	20000188 	.word	0x20000188
 800ae54:	0801f3fc 	.word	0x0801f3fc
 800ae58:	0801f8d0 	.word	0x0801f8d0
 800ae5c:	200046c8 	.word	0x200046c8
 800ae60:	2000430d 	.word	0x2000430d
 800ae64:	200042f8 	.word	0x200042f8
 800ae68:	200095dc 	.word	0x200095dc
 800ae6c:	200045f4 	.word	0x200045f4
 800ae70:	0801f854 	.word	0x0801f854
 800ae74:	20009058 	.word	0x20009058
 800ae78:	0801ef44 	.word	0x0801ef44
 800ae7c:	200089fc 	.word	0x200089fc
 800ae80:	0801f884 	.word	0x0801f884
 800ae84:	20005770 	.word	0x20005770
 800ae88:	0801f470 	.word	0x0801f470
 800ae8c:	2000b50c 	.word	0x2000b50c
 800ae90:	0801f480 	.word	0x0801f480
 800ae94:	20000640 	.word	0x20000640
 800ae98:	200045f1 	.word	0x200045f1
			osDelay(200);
 800ae9c:	20c8      	movs	r0, #200	; 0xc8
 800ae9e:	f00d fe6b 	bl	8018b78 <osDelay>
			if(uart3done){
 800aea2:	4ba9      	ldr	r3, [pc, #676]	; (800b148 <read_lp_mk6n+0x5c0>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <read_lp_mk6n+0x32a>
				uart3disc = false;
 800aeaa:	4ba8      	ldr	r3, [pc, #672]	; (800b14c <read_lp_mk6n+0x5c4>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	701a      	strb	r2, [r3, #0]
				break;
 800aeb0:	e005      	b.n	800aebe <read_lp_mk6n+0x336>
		for(int y=0;y<20;y++){
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60bb      	str	r3, [r7, #8]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b13      	cmp	r3, #19
 800aebc:	ddee      	ble.n	800ae9c <read_lp_mk6n+0x314>
			}
		}
		if(!uart3disc){
 800aebe:	4ba3      	ldr	r3, [pc, #652]	; (800b14c <read_lp_mk6n+0x5c4>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f083 0301 	eor.w	r3, r3, #1
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d009      	beq.n	800aee0 <read_lp_mk6n+0x358>
		rxlpMK6NInit2a(buffer3,datauart3size(buffer3),i);
 800aecc:	48a0      	ldr	r0, [pc, #640]	; (800b150 <read_lp_mk6n+0x5c8>)
 800aece:	f7fd fde1 	bl	8008a94 <datauart3size>
 800aed2:	4603      	mov	r3, r0
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4619      	mov	r1, r3
 800aed8:	489d      	ldr	r0, [pc, #628]	; (800b150 <read_lp_mk6n+0x5c8>)
 800aeda:	f7f7 fc1f 	bl	800271c <rxlpMK6NInit2a>
 800aede:	e05d      	b.n	800af9c <read_lp_mk6n+0x414>
		}
		else {
			memset((char *)mydata,0,1100);
 800aee0:	f240 424c 	movw	r2, #1100	; 0x44c
 800aee4:	2100      	movs	r1, #0
 800aee6:	489b      	ldr	r0, [pc, #620]	; (800b154 <read_lp_mk6n+0x5cc>)
 800aee8:	f010 fcc0 	bl	801b86c <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800aeec:	4b9a      	ldr	r3, [pc, #616]	; (800b158 <read_lp_mk6n+0x5d0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a9a      	ldr	r2, [pc, #616]	; (800b15c <read_lp_mk6n+0x5d4>)
 800aef2:	6812      	ldr	r2, [r2, #0]
 800aef4:	499a      	ldr	r1, [pc, #616]	; (800b160 <read_lp_mk6n+0x5d8>)
 800aef6:	4618      	mov	r0, r3
 800aef8:	f011 fa72 	bl	801c3e0 <siprintf>
			strcat(temp_data, (char*)csq);
 800aefc:	4b96      	ldr	r3, [pc, #600]	; (800b158 <read_lp_mk6n+0x5d0>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4998      	ldr	r1, [pc, #608]	; (800b164 <read_lp_mk6n+0x5dc>)
 800af02:	4618      	mov	r0, r3
 800af04:	f011 fa8c 	bl	801c420 <strcat>
			strcat(temp_data,"\"");
 800af08:	4b93      	ldr	r3, [pc, #588]	; (800b158 <read_lp_mk6n+0x5d0>)
 800af0a:	681c      	ldr	r4, [r3, #0]
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7f5 f969 	bl	80001e4 <strlen>
 800af12:	4603      	mov	r3, r0
 800af14:	4423      	add	r3, r4
 800af16:	4994      	ldr	r1, [pc, #592]	; (800b168 <read_lp_mk6n+0x5e0>)
 800af18:	461a      	mov	r2, r3
 800af1a:	460b      	mov	r3, r1
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	8013      	strh	r3, [r2, #0]
		  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800af20:	4b92      	ldr	r3, [pc, #584]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4992      	ldr	r1, [pc, #584]	; (800b170 <read_lp_mk6n+0x5e8>)
 800af26:	4618      	mov	r0, r3
 800af28:	f011 fa5a 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800af2c:	4b8a      	ldr	r3, [pc, #552]	; (800b158 <read_lp_mk6n+0x5d0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a8e      	ldr	r2, [pc, #568]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af32:	6812      	ldr	r2, [r2, #0]
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f011 fa72 	bl	801c420 <strcat>
		  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800af3c:	4b8b      	ldr	r3, [pc, #556]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	4b8c      	ldr	r3, [pc, #560]	; (800b174 <read_lp_mk6n+0x5ec>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4618      	mov	r0, r3
 800af46:	f7f5 fb0f 	bl	8000568 <__aeabi_f2d>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	498a      	ldr	r1, [pc, #552]	; (800b178 <read_lp_mk6n+0x5f0>)
 800af50:	4620      	mov	r0, r4
 800af52:	f011 fa45 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800af56:	4b80      	ldr	r3, [pc, #512]	; (800b158 <read_lp_mk6n+0x5d0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a84      	ldr	r2, [pc, #528]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af5c:	6812      	ldr	r2, [r2, #0]
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	f011 fa5d 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800af66:	4b81      	ldr	r3, [pc, #516]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a84      	ldr	r2, [pc, #528]	; (800b17c <read_lp_mk6n+0x5f4>)
 800af6c:	7812      	ldrb	r2, [r2, #0]
 800af6e:	4984      	ldr	r1, [pc, #528]	; (800b180 <read_lp_mk6n+0x5f8>)
 800af70:	4618      	mov	r0, r3
 800af72:	f011 fa35 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800af76:	4b78      	ldr	r3, [pc, #480]	; (800b158 <read_lp_mk6n+0x5d0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a7c      	ldr	r2, [pc, #496]	; (800b16c <read_lp_mk6n+0x5e4>)
 800af7c:	6812      	ldr	r2, [r2, #0]
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f011 fa4d 	bl	801c420 <strcat>
			strcpy(mydata,temp_data);
 800af86:	4b74      	ldr	r3, [pc, #464]	; (800b158 <read_lp_mk6n+0x5d0>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	4871      	ldr	r0, [pc, #452]	; (800b154 <read_lp_mk6n+0x5cc>)
 800af8e:	f011 fa56 	bl	801c43e <strcpy>
			cnt_lp++;
 800af92:	4b7c      	ldr	r3, [pc, #496]	; (800b184 <read_lp_mk6n+0x5fc>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3301      	adds	r3, #1
 800af98:	4a7a      	ldr	r2, [pc, #488]	; (800b184 <read_lp_mk6n+0x5fc>)
 800af9a:	6013      	str	r3, [r2, #0]
		}
		memset(buffer3,0,1100);
 800af9c:	f240 424c 	movw	r2, #1100	; 0x44c
 800afa0:	2100      	movs	r1, #0
 800afa2:	486b      	ldr	r0, [pc, #428]	; (800b150 <read_lp_mk6n+0x5c8>)
 800afa4:	f010 fc62 	bl	801b86c <memset>
	  for(int i=0;i<jmlChMK6N;i++){
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3301      	adds	r3, #1
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	4b76      	ldr	r3, [pc, #472]	; (800b188 <read_lp_mk6n+0x600>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	f6ff af3d 	blt.w	800ae36 <read_lp_mk6n+0x2ae>
	  }
	  //	  HAL_Delay(500);
		memset(buffer3,0,1100);
 800afbc:	f240 424c 	movw	r2, #1100	; 0x44c
 800afc0:	2100      	movs	r1, #0
 800afc2:	4863      	ldr	r0, [pc, #396]	; (800b150 <read_lp_mk6n+0x5c8>)
 800afc4:	f010 fc52 	bl	801b86c <memset>
		uart3disc = true;
 800afc8:	4b60      	ldr	r3, [pc, #384]	; (800b14c <read_lp_mk6n+0x5c4>)
 800afca:	2201      	movs	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
		uart3done=false;
 800afce:	4b5e      	ldr	r3, [pc, #376]	; (800b148 <read_lp_mk6n+0x5c0>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	701a      	strb	r2, [r3, #0]
		if(lp_rec !=0){
 800afd4:	4b6d      	ldr	r3, [pc, #436]	; (800b18c <read_lp_mk6n+0x604>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d008      	beq.n	800afee <read_lp_mk6n+0x466>
			txlpMK6NRec(lp_rec);
 800afdc:	4b6b      	ldr	r3, [pc, #428]	; (800b18c <read_lp_mk6n+0x604>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7f6 ffe9 	bl	8001fb8 <txlpMK6NRec>
			lp_rec = 0;
 800afe6:	4b69      	ldr	r3, [pc, #420]	; (800b18c <read_lp_mk6n+0x604>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	e005      	b.n	800affa <read_lp_mk6n+0x472>
		}
		else 	txlpMK6N(1+cnt_lp);
 800afee:	4b65      	ldr	r3, [pc, #404]	; (800b184 <read_lp_mk6n+0x5fc>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f7 f845 	bl	8002084 <txlpMK6N>
//	  txlpMK6N(1);
		for(int y=0;y<20;y++){
 800affa:	2300      	movs	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	e00d      	b.n	800b01c <read_lp_mk6n+0x494>
			osDelay(200);
 800b000:	20c8      	movs	r0, #200	; 0xc8
 800b002:	f00d fdb9 	bl	8018b78 <osDelay>
			if(uart3done){
 800b006:	4b50      	ldr	r3, [pc, #320]	; (800b148 <read_lp_mk6n+0x5c0>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <read_lp_mk6n+0x48e>
				uart3disc = false;
 800b00e:	4b4f      	ldr	r3, [pc, #316]	; (800b14c <read_lp_mk6n+0x5c4>)
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
				break;
 800b014:	e005      	b.n	800b022 <read_lp_mk6n+0x49a>
		for(int y=0;y<20;y++){
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3301      	adds	r3, #1
 800b01a:	607b      	str	r3, [r7, #4]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b13      	cmp	r3, #19
 800b020:	ddee      	ble.n	800b000 <read_lp_mk6n+0x478>
			}
		}
		memset(mydata,0,1100);
 800b022:	f240 424c 	movw	r2, #1100	; 0x44c
 800b026:	2100      	movs	r1, #0
 800b028:	484a      	ldr	r0, [pc, #296]	; (800b154 <read_lp_mk6n+0x5cc>)
 800b02a:	f010 fc1f 	bl	801b86c <memset>
		if(!uart3disc){
 800b02e:	4b47      	ldr	r3, [pc, #284]	; (800b14c <read_lp_mk6n+0x5c4>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	f083 0301 	eor.w	r3, r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d012      	beq.n	800b062 <read_lp_mk6n+0x4da>
	  rxlpMK6N(mydata,buffer3,datauart3size(buffer3));
 800b03c:	4844      	ldr	r0, [pc, #272]	; (800b150 <read_lp_mk6n+0x5c8>)
 800b03e:	f7fd fd29 	bl	8008a94 <datauart3size>
 800b042:	4603      	mov	r3, r0
 800b044:	461a      	mov	r2, r3
 800b046:	4942      	ldr	r1, [pc, #264]	; (800b150 <read_lp_mk6n+0x5c8>)
 800b048:	4842      	ldr	r0, [pc, #264]	; (800b154 <read_lp_mk6n+0x5cc>)
 800b04a:	f7f7 f885 	bl	8002158 <rxlpMK6N>
	  if(cnt_lp>0)cnt_lp--;
 800b04e:	4b4d      	ldr	r3, [pc, #308]	; (800b184 <read_lp_mk6n+0x5fc>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	dd63      	ble.n	800b11e <read_lp_mk6n+0x596>
 800b056:	4b4b      	ldr	r3, [pc, #300]	; (800b184 <read_lp_mk6n+0x5fc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a49      	ldr	r2, [pc, #292]	; (800b184 <read_lp_mk6n+0x5fc>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	e05d      	b.n	800b11e <read_lp_mk6n+0x596>
		}
		else {
			memset((char *)mydata,0,1100);
 800b062:	f240 424c 	movw	r2, #1100	; 0x44c
 800b066:	2100      	movs	r1, #0
 800b068:	483a      	ldr	r0, [pc, #232]	; (800b154 <read_lp_mk6n+0x5cc>)
 800b06a:	f010 fbff 	bl	801b86c <memset>
			sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK6N\",\"csq\":\"",snMeter);
 800b06e:	4b3a      	ldr	r3, [pc, #232]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a3a      	ldr	r2, [pc, #232]	; (800b15c <read_lp_mk6n+0x5d4>)
 800b074:	6812      	ldr	r2, [r2, #0]
 800b076:	493a      	ldr	r1, [pc, #232]	; (800b160 <read_lp_mk6n+0x5d8>)
 800b078:	4618      	mov	r0, r3
 800b07a:	f011 f9b1 	bl	801c3e0 <siprintf>
			strcat(temp_data, (char*)csq);
 800b07e:	4b36      	ldr	r3, [pc, #216]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4938      	ldr	r1, [pc, #224]	; (800b164 <read_lp_mk6n+0x5dc>)
 800b084:	4618      	mov	r0, r3
 800b086:	f011 f9cb 	bl	801c420 <strcat>
			strcat(temp_data,"\"");
 800b08a:	4b33      	ldr	r3, [pc, #204]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b08c:	681c      	ldr	r4, [r3, #0]
 800b08e:	4620      	mov	r0, r4
 800b090:	f7f5 f8a8 	bl	80001e4 <strlen>
 800b094:	4603      	mov	r3, r0
 800b096:	4423      	add	r3, r4
 800b098:	4933      	ldr	r1, [pc, #204]	; (800b168 <read_lp_mk6n+0x5e0>)
 800b09a:	461a      	mov	r2, r3
 800b09c:	460b      	mov	r3, r1
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	8013      	strh	r3, [r2, #0]
			sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b0a2:	4b32      	ldr	r3, [pc, #200]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4932      	ldr	r1, [pc, #200]	; (800b170 <read_lp_mk6n+0x5e8>)
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f011 f999 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800b0ae:	4b2a      	ldr	r3, [pc, #168]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a2e      	ldr	r2, [pc, #184]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0b4:	6812      	ldr	r2, [r2, #0]
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f011 f9b1 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b0be:	4b2b      	ldr	r3, [pc, #172]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0c0:	681c      	ldr	r4, [r3, #0]
 800b0c2:	4b2c      	ldr	r3, [pc, #176]	; (800b174 <read_lp_mk6n+0x5ec>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7f5 fa4e 	bl	8000568 <__aeabi_f2d>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4929      	ldr	r1, [pc, #164]	; (800b178 <read_lp_mk6n+0x5f0>)
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f011 f984 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800b0d8:	4b1f      	ldr	r3, [pc, #124]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a23      	ldr	r2, [pc, #140]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0de:	6812      	ldr	r2, [r2, #0]
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f011 f99c 	bl	801c420 <strcat>
			sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b0e8:	4b20      	ldr	r3, [pc, #128]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a23      	ldr	r2, [pc, #140]	; (800b17c <read_lp_mk6n+0x5f4>)
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	4923      	ldr	r1, [pc, #140]	; (800b180 <read_lp_mk6n+0x5f8>)
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f011 f974 	bl	801c3e0 <siprintf>
			strcat(temp_data, temp_data2);
 800b0f8:	4b17      	ldr	r3, [pc, #92]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a1b      	ldr	r2, [pc, #108]	; (800b16c <read_lp_mk6n+0x5e4>)
 800b0fe:	6812      	ldr	r2, [r2, #0]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f011 f98c 	bl	801c420 <strcat>
			strcpy(mydata,temp_data);
 800b108:	4b13      	ldr	r3, [pc, #76]	; (800b158 <read_lp_mk6n+0x5d0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4619      	mov	r1, r3
 800b10e:	4811      	ldr	r0, [pc, #68]	; (800b154 <read_lp_mk6n+0x5cc>)
 800b110:	f011 f995 	bl	801c43e <strcpy>
			cnt_lp++;
 800b114:	4b1b      	ldr	r3, [pc, #108]	; (800b184 <read_lp_mk6n+0x5fc>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3301      	adds	r3, #1
 800b11a:	4a1a      	ldr	r2, [pc, #104]	; (800b184 <read_lp_mk6n+0x5fc>)
 800b11c:	6013      	str	r3, [r2, #0]
		}

	  printf(mydata);
 800b11e:	480d      	ldr	r0, [pc, #52]	; (800b154 <read_lp_mk6n+0x5cc>)
 800b120:	f011 f8c0 	bl	801c2a4 <iprintf>
	  csqint = 1;
 800b124:	4b1a      	ldr	r3, [pc, #104]	; (800b190 <read_lp_mk6n+0x608>)
 800b126:	2201      	movs	r2, #1
 800b128:	701a      	strb	r2, [r3, #0]
	  cgattint = 1;
 800b12a:	4b1a      	ldr	r3, [pc, #104]	; (800b194 <read_lp_mk6n+0x60c>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	701a      	strb	r2, [r3, #0]
	  if(csqint || cgattint) {
 800b130:	4b17      	ldr	r3, [pc, #92]	; (800b190 <read_lp_mk6n+0x608>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d103      	bne.n	800b140 <read_lp_mk6n+0x5b8>
 800b138:	4b16      	ldr	r3, [pc, #88]	; (800b194 <read_lp_mk6n+0x60c>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02d      	beq.n	800b19c <read_lp_mk6n+0x614>
//			printf("online True\r\n");
		onlineMode = true;
 800b140:	4b15      	ldr	r3, [pc, #84]	; (800b198 <read_lp_mk6n+0x610>)
 800b142:	2201      	movs	r2, #1
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e031      	b.n	800b1ac <read_lp_mk6n+0x624>
 800b148:	200042f8 	.word	0x200042f8
 800b14c:	2000430d 	.word	0x2000430d
 800b150:	200095dc 	.word	0x200095dc
 800b154:	200046c8 	.word	0x200046c8
 800b158:	200045f4 	.word	0x200045f4
 800b15c:	20000188 	.word	0x20000188
 800b160:	0801f854 	.word	0x0801f854
 800b164:	20009058 	.word	0x20009058
 800b168:	0801ef44 	.word	0x0801ef44
 800b16c:	200089fc 	.word	0x200089fc
 800b170:	0801f884 	.word	0x0801f884
 800b174:	20005770 	.word	0x20005770
 800b178:	0801f470 	.word	0x0801f470
 800b17c:	2000b50c 	.word	0x2000b50c
 800b180:	0801f480 	.word	0x0801f480
 800b184:	20000640 	.word	0x20000640
 800b188:	200045f1 	.word	0x200045f1
 800b18c:	20000644 	.word	0x20000644
 800b190:	20008a00 	.word	0x20008a00
 800b194:	200045f0 	.word	0x200045f0
 800b198:	20000013 	.word	0x20000013
	  }
	  else {
		onlineMode = false;
 800b19c:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <read_lp_mk6n+0x68c>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800b1a2:	4b1d      	ldr	r3, [pc, #116]	; (800b218 <read_lp_mk6n+0x690>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	4a1b      	ldr	r2, [pc, #108]	; (800b218 <read_lp_mk6n+0x690>)
 800b1aa:	6013      	str	r3, [r2, #0]
	  }
	  if(onlineMode) {
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <read_lp_mk6n+0x68c>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d019      	beq.n	800b1e8 <read_lp_mk6n+0x660>
		if(usemqtt){
 800b1b4:	4b19      	ldr	r3, [pc, #100]	; (800b21c <read_lp_mk6n+0x694>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00c      	beq.n	800b1d6 <read_lp_mk6n+0x64e>
			len_mydata=bufsizechararray(mydata);
 800b1bc:	4818      	ldr	r0, [pc, #96]	; (800b220 <read_lp_mk6n+0x698>)
 800b1be:	f7fd fc81 	bl	8008ac4 <bufsizechararray>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4a17      	ldr	r2, [pc, #92]	; (800b224 <read_lp_mk6n+0x69c>)
 800b1c6:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800b1c8:	f7fd fd12 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800b1cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1d0:	f00d fcd2 	bl	8018b78 <osDelay>
				net_err_cnt=0;
				osDelay(5000);
				setup_modem();
			}
		}
}
 800b1d4:	e01a      	b.n	800b20c <read_lp_mk6n+0x684>
			else sendToServer(mydata,bufsizechararray(mydata));
 800b1d6:	4812      	ldr	r0, [pc, #72]	; (800b220 <read_lp_mk6n+0x698>)
 800b1d8:	f7fd fc74 	bl	8008ac4 <bufsizechararray>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4619      	mov	r1, r3
 800b1e0:	480f      	ldr	r0, [pc, #60]	; (800b220 <read_lp_mk6n+0x698>)
 800b1e2:	f7fd f91f 	bl	8008424 <sendToServer>
}
 800b1e6:	e011      	b.n	800b20c <read_lp_mk6n+0x684>
			if(net_err_cnt >= 3) {
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <read_lp_mk6n+0x690>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	dd0d      	ble.n	800b20c <read_lp_mk6n+0x684>
				printf("Restart Modem \r\n");
 800b1f0:	480d      	ldr	r0, [pc, #52]	; (800b228 <read_lp_mk6n+0x6a0>)
 800b1f2:	f011 f8dd 	bl	801c3b0 <puts>
				NB_rst1_rtos();
 800b1f6:	f7fe fdcf 	bl	8009d98 <NB_rst1_rtos>
				net_err_cnt=0;
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <read_lp_mk6n+0x690>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	601a      	str	r2, [r3, #0]
				osDelay(5000);
 800b200:	f241 3088 	movw	r0, #5000	; 0x1388
 800b204:	f00d fcb8 	bl	8018b78 <osDelay>
				setup_modem();
 800b208:	f7fd f87e 	bl	8008308 <setup_modem>
}
 800b20c:	bf00      	nop
 800b20e:	371c      	adds	r7, #28
 800b210:	46bd      	mov	sp, r7
 800b212:	bd90      	pop	{r4, r7, pc}
 800b214:	20000013 	.word	0x20000013
 800b218:	20002758 	.word	0x20002758
 800b21c:	20004285 	.word	0x20004285
 800b220:	200046c8 	.word	0x200046c8
 800b224:	20009120 	.word	0x20009120
 800b228:	0801f89c 	.word	0x0801f89c

0800b22c <read_instant_mk10e>:

void read_instant_mk10e(){
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
	memset((char *)mydata,0,1100);
 800b232:	f240 424c 	movw	r2, #1100	; 0x44c
 800b236:	2100      	movs	r1, #0
 800b238:	4883      	ldr	r0, [pc, #524]	; (800b448 <read_instant_mk10e+0x21c>)
 800b23a:	f010 fb17 	bl	801b86c <memset>
	loginToMeterRTOS();
 800b23e:	f7fb f907 	bl	8006450 <loginToMeterRTOS>
	osDelay(1000);
 800b242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b246:	f00d fc97 	bl	8018b78 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800b24a:	4b80      	ldr	r3, [pc, #512]	; (800b44c <read_instant_mk10e+0x220>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4980      	ldr	r1, [pc, #512]	; (800b450 <read_instant_mk10e+0x224>)
 800b250:	4618      	mov	r0, r3
 800b252:	f7f4 ffbd 	bl	80001d0 <strcmp>
 800b256:	6038      	str	r0, [r7, #0]
	if(cmpint == 0) read_sn_edmi();
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <read_instant_mk10e+0x36>
 800b25e:	f000 fd4b 	bl	800bcf8 <read_sn_edmi>
	uart3done = false;
 800b262:	4b7c      	ldr	r3, [pc, #496]	; (800b454 <read_instant_mk10e+0x228>)
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
	SerialMonprintln("Read Instant MK10E");
 800b268:	487b      	ldr	r0, [pc, #492]	; (800b458 <read_instant_mk10e+0x22c>)
 800b26a:	f7fb f8a3 	bl	80063b4 <SerialMonprintln>
	uart2done=false;
 800b26e:	4b7b      	ldr	r3, [pc, #492]	; (800b45c <read_instant_mk10e+0x230>)
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800b274:	f240 424c 	movw	r2, #1100	; 0x44c
 800b278:	2100      	movs	r1, #0
 800b27a:	4879      	ldr	r0, [pc, #484]	; (800b460 <read_instant_mk10e+0x234>)
 800b27c:	f010 faf6 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800b280:	f240 424c 	movw	r2, #1100	; 0x44c
 800b284:	2100      	movs	r1, #0
 800b286:	4877      	ldr	r0, [pc, #476]	; (800b464 <read_instant_mk10e+0x238>)
 800b288:	f010 faf0 	bl	801b86c <memset>
	uart3disc = true;
 800b28c:	4b76      	ldr	r3, [pc, #472]	; (800b468 <read_instant_mk10e+0x23c>)
 800b28e:	2201      	movs	r2, #1
 800b290:	701a      	strb	r2, [r3, #0]
	txInstantMK10E();
 800b292:	f7f8 fef5 	bl	8004080 <txInstantMK10E>
	for(int y=0;y<20;y++){
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	e00d      	b.n	800b2b8 <read_instant_mk10e+0x8c>
		osDelay(200);
 800b29c:	20c8      	movs	r0, #200	; 0xc8
 800b29e:	f00d fc6b 	bl	8018b78 <osDelay>
		if(uart3done){
 800b2a2:	4b6c      	ldr	r3, [pc, #432]	; (800b454 <read_instant_mk10e+0x228>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <read_instant_mk10e+0x86>
			uart3disc = false;
 800b2aa:	4b6f      	ldr	r3, [pc, #444]	; (800b468 <read_instant_mk10e+0x23c>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
			break;
 800b2b0:	e005      	b.n	800b2be <read_instant_mk10e+0x92>
	for(int y=0;y<20;y++){
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	607b      	str	r3, [r7, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b13      	cmp	r3, #19
 800b2bc:	ddee      	ble.n	800b29c <read_instant_mk10e+0x70>
		}
	}
	memset(mydata,0,1100);
 800b2be:	f240 424c 	movw	r2, #1100	; 0x44c
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	4860      	ldr	r0, [pc, #384]	; (800b448 <read_instant_mk10e+0x21c>)
 800b2c6:	f010 fad1 	bl	801b86c <memset>
	if(!uart3disc){
 800b2ca:	4b67      	ldr	r3, [pc, #412]	; (800b468 <read_instant_mk10e+0x23c>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	f083 0301 	eor.w	r3, r3, #1
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00f      	beq.n	800b2f8 <read_instant_mk10e+0xcc>
		rxInstantMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800b2d8:	4862      	ldr	r0, [pc, #392]	; (800b464 <read_instant_mk10e+0x238>)
 800b2da:	f7fd fbdb 	bl	8008a94 <datauart3size>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4960      	ldr	r1, [pc, #384]	; (800b464 <read_instant_mk10e+0x238>)
 800b2e4:	4858      	ldr	r0, [pc, #352]	; (800b448 <read_instant_mk10e+0x21c>)
 800b2e6:	f7f8 fef1 	bl	80040cc <rxInstantMK10E>
		memset((char *)buffer3,0,1100);
 800b2ea:	f240 424c 	movw	r2, #1100	; 0x44c
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	485c      	ldr	r0, [pc, #368]	; (800b464 <read_instant_mk10e+0x238>)
 800b2f2:	f010 fabb 	bl	801b86c <memset>
 800b2f6:	e058      	b.n	800b3aa <read_instant_mk10e+0x17e>
	//	printf(mydata);
	}
	else {
		memset((char *)mydata,0,1100);
 800b2f8:	f240 424c 	movw	r2, #1100	; 0x44c
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	4852      	ldr	r0, [pc, #328]	; (800b448 <read_instant_mk10e+0x21c>)
 800b300:	f010 fab4 	bl	801b86c <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b304:	4b59      	ldr	r3, [pc, #356]	; (800b46c <read_instant_mk10e+0x240>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a50      	ldr	r2, [pc, #320]	; (800b44c <read_instant_mk10e+0x220>)
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	4958      	ldr	r1, [pc, #352]	; (800b470 <read_instant_mk10e+0x244>)
 800b30e:	4618      	mov	r0, r3
 800b310:	f011 f866 	bl	801c3e0 <siprintf>
		strcat(temp_data, (char*)csq);
 800b314:	4b55      	ldr	r3, [pc, #340]	; (800b46c <read_instant_mk10e+0x240>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4956      	ldr	r1, [pc, #344]	; (800b474 <read_instant_mk10e+0x248>)
 800b31a:	4618      	mov	r0, r3
 800b31c:	f011 f880 	bl	801c420 <strcat>
		strcat(temp_data,"\"");
 800b320:	4b52      	ldr	r3, [pc, #328]	; (800b46c <read_instant_mk10e+0x240>)
 800b322:	681c      	ldr	r4, [r3, #0]
 800b324:	4620      	mov	r0, r4
 800b326:	f7f4 ff5d 	bl	80001e4 <strlen>
 800b32a:	4603      	mov	r3, r0
 800b32c:	4423      	add	r3, r4
 800b32e:	4952      	ldr	r1, [pc, #328]	; (800b478 <read_instant_mk10e+0x24c>)
 800b330:	461a      	mov	r2, r3
 800b332:	460b      	mov	r3, r1
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b338:	4b50      	ldr	r3, [pc, #320]	; (800b47c <read_instant_mk10e+0x250>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4950      	ldr	r1, [pc, #320]	; (800b480 <read_instant_mk10e+0x254>)
 800b33e:	4618      	mov	r0, r3
 800b340:	f011 f84e 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b344:	4b49      	ldr	r3, [pc, #292]	; (800b46c <read_instant_mk10e+0x240>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a4c      	ldr	r2, [pc, #304]	; (800b47c <read_instant_mk10e+0x250>)
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	4611      	mov	r1, r2
 800b34e:	4618      	mov	r0, r3
 800b350:	f011 f866 	bl	801c420 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b354:	4b49      	ldr	r3, [pc, #292]	; (800b47c <read_instant_mk10e+0x250>)
 800b356:	681c      	ldr	r4, [r3, #0]
 800b358:	4b4a      	ldr	r3, [pc, #296]	; (800b484 <read_instant_mk10e+0x258>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7f5 f903 	bl	8000568 <__aeabi_f2d>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4948      	ldr	r1, [pc, #288]	; (800b488 <read_instant_mk10e+0x25c>)
 800b368:	4620      	mov	r0, r4
 800b36a:	f011 f839 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b36e:	4b3f      	ldr	r3, [pc, #252]	; (800b46c <read_instant_mk10e+0x240>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a42      	ldr	r2, [pc, #264]	; (800b47c <read_instant_mk10e+0x250>)
 800b374:	6812      	ldr	r2, [r2, #0]
 800b376:	4611      	mov	r1, r2
 800b378:	4618      	mov	r0, r3
 800b37a:	f011 f851 	bl	801c420 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b37e:	4b3f      	ldr	r3, [pc, #252]	; (800b47c <read_instant_mk10e+0x250>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a42      	ldr	r2, [pc, #264]	; (800b48c <read_instant_mk10e+0x260>)
 800b384:	7812      	ldrb	r2, [r2, #0]
 800b386:	4942      	ldr	r1, [pc, #264]	; (800b490 <read_instant_mk10e+0x264>)
 800b388:	4618      	mov	r0, r3
 800b38a:	f011 f829 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b38e:	4b37      	ldr	r3, [pc, #220]	; (800b46c <read_instant_mk10e+0x240>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a3a      	ldr	r2, [pc, #232]	; (800b47c <read_instant_mk10e+0x250>)
 800b394:	6812      	ldr	r2, [r2, #0]
 800b396:	4611      	mov	r1, r2
 800b398:	4618      	mov	r0, r3
 800b39a:	f011 f841 	bl	801c420 <strcat>
		strcpy(mydata,temp_data);
 800b39e:	4b33      	ldr	r3, [pc, #204]	; (800b46c <read_instant_mk10e+0x240>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4828      	ldr	r0, [pc, #160]	; (800b448 <read_instant_mk10e+0x21c>)
 800b3a6:	f011 f84a 	bl	801c43e <strcpy>
	}
	csqint = 1;
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	; (800b494 <read_instant_mk10e+0x268>)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800b3b0:	4b39      	ldr	r3, [pc, #228]	; (800b498 <read_instant_mk10e+0x26c>)
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800b3b6:	4b37      	ldr	r3, [pc, #220]	; (800b494 <read_instant_mk10e+0x268>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d103      	bne.n	800b3c6 <read_instant_mk10e+0x19a>
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <read_instant_mk10e+0x26c>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <read_instant_mk10e+0x1a2>
//		printf("online True\r\n");
		onlineMode = true;
 800b3c6:	4b35      	ldr	r3, [pc, #212]	; (800b49c <read_instant_mk10e+0x270>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	701a      	strb	r2, [r3, #0]
 800b3cc:	e007      	b.n	800b3de <read_instant_mk10e+0x1b2>
	}
	else {
		onlineMode = false;
 800b3ce:	4b33      	ldr	r3, [pc, #204]	; (800b49c <read_instant_mk10e+0x270>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800b3d4:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <read_instant_mk10e+0x274>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a31      	ldr	r2, [pc, #196]	; (800b4a0 <read_instant_mk10e+0x274>)
 800b3dc:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800b3de:	4b2f      	ldr	r3, [pc, #188]	; (800b49c <read_instant_mk10e+0x270>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d019      	beq.n	800b41a <read_instant_mk10e+0x1ee>
//		usemqtt = true;
		if(usemqtt){
 800b3e6:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <read_instant_mk10e+0x278>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00c      	beq.n	800b408 <read_instant_mk10e+0x1dc>
			len_mydata=bufsizechararray(mydata);
 800b3ee:	4816      	ldr	r0, [pc, #88]	; (800b448 <read_instant_mk10e+0x21c>)
 800b3f0:	f7fd fb68 	bl	8008ac4 <bufsizechararray>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	4a2c      	ldr	r2, [pc, #176]	; (800b4a8 <read_instant_mk10e+0x27c>)
 800b3f8:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800b3fa:	f7fd fbf9 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800b3fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b402:	f00d fbb9 	bl	8018b78 <osDelay>
			osDelay(5000);
			setup_modem();
		}
	}

}
 800b406:	e01a      	b.n	800b43e <read_instant_mk10e+0x212>
		else sendToServer(mydata,bufsizechararray(mydata));
 800b408:	480f      	ldr	r0, [pc, #60]	; (800b448 <read_instant_mk10e+0x21c>)
 800b40a:	f7fd fb5b 	bl	8008ac4 <bufsizechararray>
 800b40e:	4603      	mov	r3, r0
 800b410:	4619      	mov	r1, r3
 800b412:	480d      	ldr	r0, [pc, #52]	; (800b448 <read_instant_mk10e+0x21c>)
 800b414:	f7fd f806 	bl	8008424 <sendToServer>
}
 800b418:	e011      	b.n	800b43e <read_instant_mk10e+0x212>
		if(net_err_cnt >= 3) {
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <read_instant_mk10e+0x274>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	dd0d      	ble.n	800b43e <read_instant_mk10e+0x212>
			printf("Restart Modem \r\n");
 800b422:	4822      	ldr	r0, [pc, #136]	; (800b4ac <read_instant_mk10e+0x280>)
 800b424:	f010 ffc4 	bl	801c3b0 <puts>
			NB_rst1_rtos();
 800b428:	f7fe fcb6 	bl	8009d98 <NB_rst1_rtos>
			net_err_cnt=0;
 800b42c:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <read_instant_mk10e+0x274>)
 800b42e:	2200      	movs	r2, #0
 800b430:	601a      	str	r2, [r3, #0]
			osDelay(5000);
 800b432:	f241 3088 	movw	r0, #5000	; 0x1388
 800b436:	f00d fb9f 	bl	8018b78 <osDelay>
			setup_modem();
 800b43a:	f7fc ff65 	bl	8008308 <setup_modem>
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bd90      	pop	{r4, r7, pc}
 800b446:	bf00      	nop
 800b448:	200046c8 	.word	0x200046c8
 800b44c:	20000188 	.word	0x20000188
 800b450:	0801f3fc 	.word	0x0801f3fc
 800b454:	200042f8 	.word	0x200042f8
 800b458:	0801f8e0 	.word	0x0801f8e0
 800b45c:	20003fe4 	.word	0x20003fe4
 800b460:	20005324 	.word	0x20005324
 800b464:	200095dc 	.word	0x200095dc
 800b468:	2000430d 	.word	0x2000430d
 800b46c:	200045f4 	.word	0x200045f4
 800b470:	0801f8f4 	.word	0x0801f8f4
 800b474:	20009058 	.word	0x20009058
 800b478:	0801ef44 	.word	0x0801ef44
 800b47c:	200089fc 	.word	0x200089fc
 800b480:	0801f884 	.word	0x0801f884
 800b484:	20005770 	.word	0x20005770
 800b488:	0801f470 	.word	0x0801f470
 800b48c:	2000b50c 	.word	0x2000b50c
 800b490:	0801f480 	.word	0x0801f480
 800b494:	20008a00 	.word	0x20008a00
 800b498:	200045f0 	.word	0x200045f0
 800b49c:	20000013 	.word	0x20000013
 800b4a0:	20002758 	.word	0x20002758
 800b4a4:	20004285 	.word	0x20004285
 800b4a8:	20009120 	.word	0x20009120
 800b4ac:	0801f89c 	.word	0x0801f89c

0800b4b0 <read_eob_mk10e>:

void read_eob_mk10e(){
 800b4b0:	b590      	push	{r4, r7, lr}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 800b4b6:	f7fa ffcb 	bl	8006450 <loginToMeterRTOS>
	osDelay(1000);
 800b4ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b4be:	f00d fb5b 	bl	8018b78 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800b4c2:	4b7f      	ldr	r3, [pc, #508]	; (800b6c0 <read_eob_mk10e+0x210>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	497f      	ldr	r1, [pc, #508]	; (800b6c4 <read_eob_mk10e+0x214>)
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f4 fe81 	bl	80001d0 <strcmp>
 800b4ce:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <read_eob_mk10e+0x2a>
 800b4d6:	f000 fc0f 	bl	800bcf8 <read_sn_edmi>
	SerialMonprintln("Read EoB Init LP MK10E");
 800b4da:	487b      	ldr	r0, [pc, #492]	; (800b6c8 <read_eob_mk10e+0x218>)
 800b4dc:	f7fa ff6a 	bl	80063b4 <SerialMonprintln>
	uart2done=false;
 800b4e0:	4b7a      	ldr	r3, [pc, #488]	; (800b6cc <read_eob_mk10e+0x21c>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
	memset((char *)mydata,0,1100);
 800b4e6:	f240 424c 	movw	r2, #1100	; 0x44c
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4878      	ldr	r0, [pc, #480]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b4ee:	f010 f9bd 	bl	801b86c <memset>
	memset((char *)uart3_temp,0,1100);
 800b4f2:	f240 424c 	movw	r2, #1100	; 0x44c
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4876      	ldr	r0, [pc, #472]	; (800b6d4 <read_eob_mk10e+0x224>)
 800b4fa:	f010 f9b7 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800b4fe:	f240 424c 	movw	r2, #1100	; 0x44c
 800b502:	2100      	movs	r1, #0
 800b504:	4874      	ldr	r0, [pc, #464]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b506:	f010 f9b1 	bl	801b86c <memset>
	uart3done = false;
 800b50a:	4b74      	ldr	r3, [pc, #464]	; (800b6dc <read_eob_mk10e+0x22c>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800b510:	4b73      	ldr	r3, [pc, #460]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b512:	2201      	movs	r2, #1
 800b514:	701a      	strb	r2, [r3, #0]
	txEobLpInitMK10E();
 800b516:	f7f9 f98f 	bl	8004838 <txEobLpInitMK10E>
	for(int y=0;y<20;y++){
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e00d      	b.n	800b53c <read_eob_mk10e+0x8c>
		osDelay(200);
 800b520:	20c8      	movs	r0, #200	; 0xc8
 800b522:	f00d fb29 	bl	8018b78 <osDelay>
		if(uart3done){
 800b526:	4b6d      	ldr	r3, [pc, #436]	; (800b6dc <read_eob_mk10e+0x22c>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <read_eob_mk10e+0x86>
			uart3disc = false;
 800b52e:	4b6c      	ldr	r3, [pc, #432]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]
			break;
 800b534:	e005      	b.n	800b542 <read_eob_mk10e+0x92>
	for(int y=0;y<20;y++){
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b13      	cmp	r3, #19
 800b540:	ddee      	ble.n	800b520 <read_eob_mk10e+0x70>
		}
	}
	if(!uart3disc){
 800b542:	4b67      	ldr	r3, [pc, #412]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	f083 0301 	eor.w	r3, r3, #1
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00e      	beq.n	800b56e <read_eob_mk10e+0xbe>
	rxEobLpInitMK10E((char *)buffer3,datauart3size(buffer3));
 800b550:	4861      	ldr	r0, [pc, #388]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b552:	f7fd fa9f 	bl	8008a94 <datauart3size>
 800b556:	4603      	mov	r3, r0
 800b558:	4619      	mov	r1, r3
 800b55a:	485f      	ldr	r0, [pc, #380]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b55c:	f7f9 f996 	bl	800488c <rxEobLpInitMK10E>
	memset((char *)buffer3,0,1100);
 800b560:	f240 424c 	movw	r2, #1100	; 0x44c
 800b564:	2100      	movs	r1, #0
 800b566:	485c      	ldr	r0, [pc, #368]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b568:	f010 f980 	bl	801b86c <memset>
 800b56c:	e058      	b.n	800b620 <read_eob_mk10e+0x170>
	}
	else {
		memset((char *)mydata,0,1100);
 800b56e:	f240 424c 	movw	r2, #1100	; 0x44c
 800b572:	2100      	movs	r1, #0
 800b574:	4856      	ldr	r0, [pc, #344]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b576:	f010 f979 	bl	801b86c <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b57a:	4b5a      	ldr	r3, [pc, #360]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a50      	ldr	r2, [pc, #320]	; (800b6c0 <read_eob_mk10e+0x210>)
 800b580:	6812      	ldr	r2, [r2, #0]
 800b582:	4959      	ldr	r1, [pc, #356]	; (800b6e8 <read_eob_mk10e+0x238>)
 800b584:	4618      	mov	r0, r3
 800b586:	f010 ff2b 	bl	801c3e0 <siprintf>
		strcat(temp_data, (char*)csq);
 800b58a:	4b56      	ldr	r3, [pc, #344]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4957      	ldr	r1, [pc, #348]	; (800b6ec <read_eob_mk10e+0x23c>)
 800b590:	4618      	mov	r0, r3
 800b592:	f010 ff45 	bl	801c420 <strcat>
		strcat(temp_data,"\"");
 800b596:	4b53      	ldr	r3, [pc, #332]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b598:	681c      	ldr	r4, [r3, #0]
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7f4 fe22 	bl	80001e4 <strlen>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	4423      	add	r3, r4
 800b5a4:	4952      	ldr	r1, [pc, #328]	; (800b6f0 <read_eob_mk10e+0x240>)
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b5ae:	4b51      	ldr	r3, [pc, #324]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4951      	ldr	r1, [pc, #324]	; (800b6f8 <read_eob_mk10e+0x248>)
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f010 ff13 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b5ba:	4b4a      	ldr	r3, [pc, #296]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a4d      	ldr	r2, [pc, #308]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f010 ff2b 	bl	801c420 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b5ca:	4b4a      	ldr	r3, [pc, #296]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b5cc:	681c      	ldr	r4, [r3, #0]
 800b5ce:	4b4b      	ldr	r3, [pc, #300]	; (800b6fc <read_eob_mk10e+0x24c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7f4 ffc8 	bl	8000568 <__aeabi_f2d>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4948      	ldr	r1, [pc, #288]	; (800b700 <read_eob_mk10e+0x250>)
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f010 fefe 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b5e4:	4b3f      	ldr	r3, [pc, #252]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a42      	ldr	r2, [pc, #264]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b5ea:	6812      	ldr	r2, [r2, #0]
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f010 ff16 	bl	801c420 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b5f4:	4b3f      	ldr	r3, [pc, #252]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a42      	ldr	r2, [pc, #264]	; (800b704 <read_eob_mk10e+0x254>)
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	4942      	ldr	r1, [pc, #264]	; (800b708 <read_eob_mk10e+0x258>)
 800b5fe:	4618      	mov	r0, r3
 800b600:	f010 feee 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b604:	4b37      	ldr	r3, [pc, #220]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a3a      	ldr	r2, [pc, #232]	; (800b6f4 <read_eob_mk10e+0x244>)
 800b60a:	6812      	ldr	r2, [r2, #0]
 800b60c:	4611      	mov	r1, r2
 800b60e:	4618      	mov	r0, r3
 800b610:	f010 ff06 	bl	801c420 <strcat>
		strcpy(mydata,temp_data);
 800b614:	4b33      	ldr	r3, [pc, #204]	; (800b6e4 <read_eob_mk10e+0x234>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4619      	mov	r1, r3
 800b61a:	482d      	ldr	r0, [pc, #180]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b61c:	f010 ff0f 	bl	801c43e <strcpy>
	}

	loginToMeterRTOS();
 800b620:	f7fa ff16 	bl	8006450 <loginToMeterRTOS>
	SerialMonprintln("Read EoB MK10E");
 800b624:	4839      	ldr	r0, [pc, #228]	; (800b70c <read_eob_mk10e+0x25c>)
 800b626:	f7fa fec5 	bl	80063b4 <SerialMonprintln>
	memset((char *)uart3_temp,0,1100);
 800b62a:	f240 424c 	movw	r2, #1100	; 0x44c
 800b62e:	2100      	movs	r1, #0
 800b630:	4828      	ldr	r0, [pc, #160]	; (800b6d4 <read_eob_mk10e+0x224>)
 800b632:	f010 f91b 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800b636:	f240 424c 	movw	r2, #1100	; 0x44c
 800b63a:	2100      	movs	r1, #0
 800b63c:	4826      	ldr	r0, [pc, #152]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b63e:	f010 f915 	bl	801b86c <memset>
	memset(mydata,0,1100);
 800b642:	f240 424c 	movw	r2, #1100	; 0x44c
 800b646:	2100      	movs	r1, #0
 800b648:	4821      	ldr	r0, [pc, #132]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b64a:	f010 f90f 	bl	801b86c <memset>
	uart3done = false;
 800b64e:	4b23      	ldr	r3, [pc, #140]	; (800b6dc <read_eob_mk10e+0x22c>)
 800b650:	2200      	movs	r2, #0
 800b652:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800b654:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b656:	2201      	movs	r2, #1
 800b658:	701a      	strb	r2, [r3, #0]
	txEoBCurrentMK10E();
 800b65a:	f7fa fb09 	bl	8005c70 <txEoBCurrentMK10E>
	for(int y=0;y<20;y++){
 800b65e:	2300      	movs	r3, #0
 800b660:	60bb      	str	r3, [r7, #8]
 800b662:	e00d      	b.n	800b680 <read_eob_mk10e+0x1d0>
		osDelay(200);
 800b664:	20c8      	movs	r0, #200	; 0xc8
 800b666:	f00d fa87 	bl	8018b78 <osDelay>
		if(uart3done){
 800b66a:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <read_eob_mk10e+0x22c>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <read_eob_mk10e+0x1ca>
			uart3disc = false;
 800b672:	4b1b      	ldr	r3, [pc, #108]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
			break;
 800b678:	e005      	b.n	800b686 <read_eob_mk10e+0x1d6>
	for(int y=0;y<20;y++){
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	3301      	adds	r3, #1
 800b67e:	60bb      	str	r3, [r7, #8]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b13      	cmp	r3, #19
 800b684:	ddee      	ble.n	800b664 <read_eob_mk10e+0x1b4>
		}
	}
	memset(mydata,0,1100);
 800b686:	f240 424c 	movw	r2, #1100	; 0x44c
 800b68a:	2100      	movs	r1, #0
 800b68c:	4810      	ldr	r0, [pc, #64]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b68e:	f010 f8ed 	bl	801b86c <memset>
	if(!uart3disc){
 800b692:	4b13      	ldr	r3, [pc, #76]	; (800b6e0 <read_eob_mk10e+0x230>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	f083 0301 	eor.w	r3, r3, #1
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d037      	beq.n	800b710 <read_eob_mk10e+0x260>
	rxEoBCurrentMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800b6a0:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b6a2:	f7fd f9f7 	bl	8008a94 <datauart3size>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	490b      	ldr	r1, [pc, #44]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b6ac:	4808      	ldr	r0, [pc, #32]	; (800b6d0 <read_eob_mk10e+0x220>)
 800b6ae:	f7fa fb05 	bl	8005cbc <rxEoBCurrentMK10E>
	memset((char *)buffer3,0,1100);
 800b6b2:	f240 424c 	movw	r2, #1100	; 0x44c
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4807      	ldr	r0, [pc, #28]	; (800b6d8 <read_eob_mk10e+0x228>)
 800b6ba:	f010 f8d7 	bl	801b86c <memset>
 800b6be:	e080      	b.n	800b7c2 <read_eob_mk10e+0x312>
 800b6c0:	20000188 	.word	0x20000188
 800b6c4:	0801f3fc 	.word	0x0801f3fc
 800b6c8:	0801f924 	.word	0x0801f924
 800b6cc:	20003fe4 	.word	0x20003fe4
 800b6d0:	200046c8 	.word	0x200046c8
 800b6d4:	20005324 	.word	0x20005324
 800b6d8:	200095dc 	.word	0x200095dc
 800b6dc:	200042f8 	.word	0x200042f8
 800b6e0:	2000430d 	.word	0x2000430d
 800b6e4:	200045f4 	.word	0x200045f4
 800b6e8:	0801f8f4 	.word	0x0801f8f4
 800b6ec:	20009058 	.word	0x20009058
 800b6f0:	0801ef44 	.word	0x0801ef44
 800b6f4:	200089fc 	.word	0x200089fc
 800b6f8:	0801f884 	.word	0x0801f884
 800b6fc:	20005770 	.word	0x20005770
 800b700:	0801f470 	.word	0x0801f470
 800b704:	2000b50c 	.word	0x2000b50c
 800b708:	0801f480 	.word	0x0801f480
 800b70c:	0801f93c 	.word	0x0801f93c
	}
	else {
		memset((char *)mydata,0,1100);
 800b710:	f240 424c 	movw	r2, #1100	; 0x44c
 800b714:	2100      	movs	r1, #0
 800b716:	4852      	ldr	r0, [pc, #328]	; (800b860 <read_eob_mk10e+0x3b0>)
 800b718:	f010 f8a8 	bl	801b86c <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b71c:	4b51      	ldr	r3, [pc, #324]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a51      	ldr	r2, [pc, #324]	; (800b868 <read_eob_mk10e+0x3b8>)
 800b722:	6812      	ldr	r2, [r2, #0]
 800b724:	4951      	ldr	r1, [pc, #324]	; (800b86c <read_eob_mk10e+0x3bc>)
 800b726:	4618      	mov	r0, r3
 800b728:	f010 fe5a 	bl	801c3e0 <siprintf>
		strcat(temp_data, (char*)csq);
 800b72c:	4b4d      	ldr	r3, [pc, #308]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	494f      	ldr	r1, [pc, #316]	; (800b870 <read_eob_mk10e+0x3c0>)
 800b732:	4618      	mov	r0, r3
 800b734:	f010 fe74 	bl	801c420 <strcat>
		strcat(temp_data,"\"");
 800b738:	4b4a      	ldr	r3, [pc, #296]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b73a:	681c      	ldr	r4, [r3, #0]
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7f4 fd51 	bl	80001e4 <strlen>
 800b742:	4603      	mov	r3, r0
 800b744:	4423      	add	r3, r4
 800b746:	494b      	ldr	r1, [pc, #300]	; (800b874 <read_eob_mk10e+0x3c4>)
 800b748:	461a      	mov	r2, r3
 800b74a:	460b      	mov	r3, r1
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b750:	4b49      	ldr	r3, [pc, #292]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4949      	ldr	r1, [pc, #292]	; (800b87c <read_eob_mk10e+0x3cc>)
 800b756:	4618      	mov	r0, r3
 800b758:	f010 fe42 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b75c:	4b41      	ldr	r3, [pc, #260]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a45      	ldr	r2, [pc, #276]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	4611      	mov	r1, r2
 800b766:	4618      	mov	r0, r3
 800b768:	f010 fe5a 	bl	801c420 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b76c:	4b42      	ldr	r3, [pc, #264]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b76e:	681c      	ldr	r4, [r3, #0]
 800b770:	4b43      	ldr	r3, [pc, #268]	; (800b880 <read_eob_mk10e+0x3d0>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4618      	mov	r0, r3
 800b776:	f7f4 fef7 	bl	8000568 <__aeabi_f2d>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4941      	ldr	r1, [pc, #260]	; (800b884 <read_eob_mk10e+0x3d4>)
 800b780:	4620      	mov	r0, r4
 800b782:	f010 fe2d 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b786:	4b37      	ldr	r3, [pc, #220]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a3b      	ldr	r2, [pc, #236]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b78c:	6812      	ldr	r2, [r2, #0]
 800b78e:	4611      	mov	r1, r2
 800b790:	4618      	mov	r0, r3
 800b792:	f010 fe45 	bl	801c420 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b796:	4b38      	ldr	r3, [pc, #224]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a3b      	ldr	r2, [pc, #236]	; (800b888 <read_eob_mk10e+0x3d8>)
 800b79c:	7812      	ldrb	r2, [r2, #0]
 800b79e:	493b      	ldr	r1, [pc, #236]	; (800b88c <read_eob_mk10e+0x3dc>)
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f010 fe1d 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b7a6:	4b2f      	ldr	r3, [pc, #188]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a33      	ldr	r2, [pc, #204]	; (800b878 <read_eob_mk10e+0x3c8>)
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f010 fe35 	bl	801c420 <strcat>
		strcpy(mydata,temp_data);
 800b7b6:	4b2b      	ldr	r3, [pc, #172]	; (800b864 <read_eob_mk10e+0x3b4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4828      	ldr	r0, [pc, #160]	; (800b860 <read_eob_mk10e+0x3b0>)
 800b7be:	f010 fe3e 	bl	801c43e <strcpy>
	}

	csqint = 1;
 800b7c2:	4b33      	ldr	r3, [pc, #204]	; (800b890 <read_eob_mk10e+0x3e0>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800b7c8:	4b32      	ldr	r3, [pc, #200]	; (800b894 <read_eob_mk10e+0x3e4>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
//	cgattint = check_cgatt_rtos();
//	csqint = check_csq_rtos();
	if(csqint || cgattint) {
 800b7ce:	4b30      	ldr	r3, [pc, #192]	; (800b890 <read_eob_mk10e+0x3e0>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d103      	bne.n	800b7de <read_eob_mk10e+0x32e>
 800b7d6:	4b2f      	ldr	r3, [pc, #188]	; (800b894 <read_eob_mk10e+0x3e4>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <read_eob_mk10e+0x336>
//		printf("online True\r\n");
		onlineMode = true;
 800b7de:	4b2e      	ldr	r3, [pc, #184]	; (800b898 <read_eob_mk10e+0x3e8>)
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	701a      	strb	r2, [r3, #0]
 800b7e4:	e007      	b.n	800b7f6 <read_eob_mk10e+0x346>
	}
	else {
		onlineMode = false;
 800b7e6:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <read_eob_mk10e+0x3e8>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	; (800b89c <read_eob_mk10e+0x3ec>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	4a2a      	ldr	r2, [pc, #168]	; (800b89c <read_eob_mk10e+0x3ec>)
 800b7f4:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800b7f6:	4b28      	ldr	r3, [pc, #160]	; (800b898 <read_eob_mk10e+0x3e8>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d019      	beq.n	800b832 <read_eob_mk10e+0x382>
//		sendToServer(mydata,bufsizechararray(mydata));
//		usemqtt = true;
		if(usemqtt){
 800b7fe:	4b28      	ldr	r3, [pc, #160]	; (800b8a0 <read_eob_mk10e+0x3f0>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00c      	beq.n	800b820 <read_eob_mk10e+0x370>
			len_mydata=bufsizechararray(mydata);
 800b806:	4816      	ldr	r0, [pc, #88]	; (800b860 <read_eob_mk10e+0x3b0>)
 800b808:	f7fd f95c 	bl	8008ac4 <bufsizechararray>
 800b80c:	4603      	mov	r3, r0
 800b80e:	4a25      	ldr	r2, [pc, #148]	; (800b8a4 <read_eob_mk10e+0x3f4>)
 800b810:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800b812:	f7fd f9ed 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800b816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b81a:	f00d f9ad 	bl	8018b78 <osDelay>
			net_err_cnt=0;
			osDelay(1000);
			setup_modem();
		}
	}
}
 800b81e:	e01a      	b.n	800b856 <read_eob_mk10e+0x3a6>
		else sendToServer((char *)mydata,bufsizechararray(mydata));
 800b820:	480f      	ldr	r0, [pc, #60]	; (800b860 <read_eob_mk10e+0x3b0>)
 800b822:	f7fd f94f 	bl	8008ac4 <bufsizechararray>
 800b826:	4603      	mov	r3, r0
 800b828:	4619      	mov	r1, r3
 800b82a:	480d      	ldr	r0, [pc, #52]	; (800b860 <read_eob_mk10e+0x3b0>)
 800b82c:	f7fc fdfa 	bl	8008424 <sendToServer>
}
 800b830:	e011      	b.n	800b856 <read_eob_mk10e+0x3a6>
		if(net_err_cnt >= 3) {
 800b832:	4b1a      	ldr	r3, [pc, #104]	; (800b89c <read_eob_mk10e+0x3ec>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b02      	cmp	r3, #2
 800b838:	dd0d      	ble.n	800b856 <read_eob_mk10e+0x3a6>
			printf("Restart Modem \r\n");
 800b83a:	481b      	ldr	r0, [pc, #108]	; (800b8a8 <read_eob_mk10e+0x3f8>)
 800b83c:	f010 fdb8 	bl	801c3b0 <puts>
			NB_rst1_rtos();
 800b840:	f7fe faaa 	bl	8009d98 <NB_rst1_rtos>
			net_err_cnt=0;
 800b844:	4b15      	ldr	r3, [pc, #84]	; (800b89c <read_eob_mk10e+0x3ec>)
 800b846:	2200      	movs	r2, #0
 800b848:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 800b84a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b84e:	f00d f993 	bl	8018b78 <osDelay>
			setup_modem();
 800b852:	f7fc fd59 	bl	8008308 <setup_modem>
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd90      	pop	{r4, r7, pc}
 800b85e:	bf00      	nop
 800b860:	200046c8 	.word	0x200046c8
 800b864:	200045f4 	.word	0x200045f4
 800b868:	20000188 	.word	0x20000188
 800b86c:	0801f8f4 	.word	0x0801f8f4
 800b870:	20009058 	.word	0x20009058
 800b874:	0801ef44 	.word	0x0801ef44
 800b878:	200089fc 	.word	0x200089fc
 800b87c:	0801f884 	.word	0x0801f884
 800b880:	20005770 	.word	0x20005770
 800b884:	0801f470 	.word	0x0801f470
 800b888:	2000b50c 	.word	0x2000b50c
 800b88c:	0801f480 	.word	0x0801f480
 800b890:	20008a00 	.word	0x20008a00
 800b894:	200045f0 	.word	0x200045f0
 800b898:	20000013 	.word	0x20000013
 800b89c:	20002758 	.word	0x20002758
 800b8a0:	20004285 	.word	0x20004285
 800b8a4:	20009120 	.word	0x20009120
 800b8a8:	0801f89c 	.word	0x0801f89c

0800b8ac <read_lp_mk10e>:

void read_lp_mk10e(){
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
	loginToMeterRTOS();
 800b8b2:	f7fa fdcd 	bl	8006450 <loginToMeterRTOS>
	osDelay(1000);
 800b8b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b8ba:	f00d f95d 	bl	8018b78 <osDelay>
	int cmpint = strcmp(snMeter, "00000000");
 800b8be:	4b8e      	ldr	r3, [pc, #568]	; (800baf8 <read_lp_mk10e+0x24c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	498e      	ldr	r1, [pc, #568]	; (800bafc <read_lp_mk10e+0x250>)
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f4 fc83 	bl	80001d0 <strcmp>
 800b8ca:	6078      	str	r0, [r7, #4]
	if(cmpint == 0) read_sn_edmi();
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <read_lp_mk10e+0x2a>
 800b8d2:	f000 fa11 	bl	800bcf8 <read_sn_edmi>
	SerialMonprintln("Read EoB Init LP MK10E");
 800b8d6:	488a      	ldr	r0, [pc, #552]	; (800bb00 <read_lp_mk10e+0x254>)
 800b8d8:	f7fa fd6c 	bl	80063b4 <SerialMonprintln>
	uart2done=false;
 800b8dc:	4b89      	ldr	r3, [pc, #548]	; (800bb04 <read_lp_mk10e+0x258>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]
	memset((char *)mydata,0,1100);
 800b8e2:	f240 424c 	movw	r2, #1100	; 0x44c
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	4887      	ldr	r0, [pc, #540]	; (800bb08 <read_lp_mk10e+0x25c>)
 800b8ea:	f00f ffbf 	bl	801b86c <memset>
	memset((char *)uart3_temp,0,1100);
 800b8ee:	f240 424c 	movw	r2, #1100	; 0x44c
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	4885      	ldr	r0, [pc, #532]	; (800bb0c <read_lp_mk10e+0x260>)
 800b8f6:	f00f ffb9 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800b8fa:	f240 424c 	movw	r2, #1100	; 0x44c
 800b8fe:	2100      	movs	r1, #0
 800b900:	4883      	ldr	r0, [pc, #524]	; (800bb10 <read_lp_mk10e+0x264>)
 800b902:	f00f ffb3 	bl	801b86c <memset>
	uart3done = false;
 800b906:	4b83      	ldr	r3, [pc, #524]	; (800bb14 <read_lp_mk10e+0x268>)
 800b908:	2200      	movs	r2, #0
 800b90a:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800b90c:	4b82      	ldr	r3, [pc, #520]	; (800bb18 <read_lp_mk10e+0x26c>)
 800b90e:	2201      	movs	r2, #1
 800b910:	701a      	strb	r2, [r3, #0]
	txEobLpInitMK10E();
 800b912:	f7f8 ff91 	bl	8004838 <txEobLpInitMK10E>
	for(int y=0;y<20;y++){
 800b916:	2300      	movs	r3, #0
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	e00d      	b.n	800b938 <read_lp_mk10e+0x8c>
		osDelay(200);
 800b91c:	20c8      	movs	r0, #200	; 0xc8
 800b91e:	f00d f92b 	bl	8018b78 <osDelay>
		if(uart3done){
 800b922:	4b7c      	ldr	r3, [pc, #496]	; (800bb14 <read_lp_mk10e+0x268>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <read_lp_mk10e+0x86>
			uart3disc = false;
 800b92a:	4b7b      	ldr	r3, [pc, #492]	; (800bb18 <read_lp_mk10e+0x26c>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
			break;
 800b930:	e005      	b.n	800b93e <read_lp_mk10e+0x92>
	for(int y=0;y<20;y++){
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b13      	cmp	r3, #19
 800b93c:	ddee      	ble.n	800b91c <read_lp_mk10e+0x70>
		}
	}
	if(!uart3disc){
 800b93e:	4b76      	ldr	r3, [pc, #472]	; (800bb18 <read_lp_mk10e+0x26c>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	f083 0301 	eor.w	r3, r3, #1
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00e      	beq.n	800b96a <read_lp_mk10e+0xbe>
	rxEobLpInitMK10E((char *)buffer3,datauart3size(buffer3));
 800b94c:	4870      	ldr	r0, [pc, #448]	; (800bb10 <read_lp_mk10e+0x264>)
 800b94e:	f7fd f8a1 	bl	8008a94 <datauart3size>
 800b952:	4603      	mov	r3, r0
 800b954:	4619      	mov	r1, r3
 800b956:	486e      	ldr	r0, [pc, #440]	; (800bb10 <read_lp_mk10e+0x264>)
 800b958:	f7f8 ff98 	bl	800488c <rxEobLpInitMK10E>
	memset((char *)buffer3,0,1100);
 800b95c:	f240 424c 	movw	r2, #1100	; 0x44c
 800b960:	2100      	movs	r1, #0
 800b962:	486b      	ldr	r0, [pc, #428]	; (800bb10 <read_lp_mk10e+0x264>)
 800b964:	f00f ff82 	bl	801b86c <memset>
 800b968:	e058      	b.n	800ba1c <read_lp_mk10e+0x170>
	}
	else {
		memset((char *)mydata,0,1100);
 800b96a:	f240 424c 	movw	r2, #1100	; 0x44c
 800b96e:	2100      	movs	r1, #0
 800b970:	4865      	ldr	r0, [pc, #404]	; (800bb08 <read_lp_mk10e+0x25c>)
 800b972:	f00f ff7b 	bl	801b86c <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800b976:	4b69      	ldr	r3, [pc, #420]	; (800bb1c <read_lp_mk10e+0x270>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a5f      	ldr	r2, [pc, #380]	; (800baf8 <read_lp_mk10e+0x24c>)
 800b97c:	6812      	ldr	r2, [r2, #0]
 800b97e:	4968      	ldr	r1, [pc, #416]	; (800bb20 <read_lp_mk10e+0x274>)
 800b980:	4618      	mov	r0, r3
 800b982:	f010 fd2d 	bl	801c3e0 <siprintf>
		strcat(temp_data, (char*)csq);
 800b986:	4b65      	ldr	r3, [pc, #404]	; (800bb1c <read_lp_mk10e+0x270>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4966      	ldr	r1, [pc, #408]	; (800bb24 <read_lp_mk10e+0x278>)
 800b98c:	4618      	mov	r0, r3
 800b98e:	f010 fd47 	bl	801c420 <strcat>
		strcat(temp_data,"\"");
 800b992:	4b62      	ldr	r3, [pc, #392]	; (800bb1c <read_lp_mk10e+0x270>)
 800b994:	681c      	ldr	r4, [r3, #0]
 800b996:	4620      	mov	r0, r4
 800b998:	f7f4 fc24 	bl	80001e4 <strlen>
 800b99c:	4603      	mov	r3, r0
 800b99e:	4423      	add	r3, r4
 800b9a0:	4961      	ldr	r1, [pc, #388]	; (800bb28 <read_lp_mk10e+0x27c>)
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800b9aa:	4b60      	ldr	r3, [pc, #384]	; (800bb2c <read_lp_mk10e+0x280>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4960      	ldr	r1, [pc, #384]	; (800bb30 <read_lp_mk10e+0x284>)
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f010 fd15 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b9b6:	4b59      	ldr	r3, [pc, #356]	; (800bb1c <read_lp_mk10e+0x270>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a5c      	ldr	r2, [pc, #368]	; (800bb2c <read_lp_mk10e+0x280>)
 800b9bc:	6812      	ldr	r2, [r2, #0]
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f010 fd2d 	bl	801c420 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800b9c6:	4b59      	ldr	r3, [pc, #356]	; (800bb2c <read_lp_mk10e+0x280>)
 800b9c8:	681c      	ldr	r4, [r3, #0]
 800b9ca:	4b5a      	ldr	r3, [pc, #360]	; (800bb34 <read_lp_mk10e+0x288>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f4 fdca 	bl	8000568 <__aeabi_f2d>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4957      	ldr	r1, [pc, #348]	; (800bb38 <read_lp_mk10e+0x28c>)
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f010 fd00 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800b9e0:	4b4e      	ldr	r3, [pc, #312]	; (800bb1c <read_lp_mk10e+0x270>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a51      	ldr	r2, [pc, #324]	; (800bb2c <read_lp_mk10e+0x280>)
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f010 fd18 	bl	801c420 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800b9f0:	4b4e      	ldr	r3, [pc, #312]	; (800bb2c <read_lp_mk10e+0x280>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a51      	ldr	r2, [pc, #324]	; (800bb3c <read_lp_mk10e+0x290>)
 800b9f6:	7812      	ldrb	r2, [r2, #0]
 800b9f8:	4951      	ldr	r1, [pc, #324]	; (800bb40 <read_lp_mk10e+0x294>)
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f010 fcf0 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800ba00:	4b46      	ldr	r3, [pc, #280]	; (800bb1c <read_lp_mk10e+0x270>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a49      	ldr	r2, [pc, #292]	; (800bb2c <read_lp_mk10e+0x280>)
 800ba06:	6812      	ldr	r2, [r2, #0]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f010 fd08 	bl	801c420 <strcat>
		strcpy(mydata,temp_data);
 800ba10:	4b42      	ldr	r3, [pc, #264]	; (800bb1c <read_lp_mk10e+0x270>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4619      	mov	r1, r3
 800ba16:	483c      	ldr	r0, [pc, #240]	; (800bb08 <read_lp_mk10e+0x25c>)
 800ba18:	f010 fd11 	bl	801c43e <strcpy>
	}

	loginToMeterRTOS();
 800ba1c:	f7fa fd18 	bl	8006450 <loginToMeterRTOS>
	SerialMonprintln("Read LP MK10E");
 800ba20:	4848      	ldr	r0, [pc, #288]	; (800bb44 <read_lp_mk10e+0x298>)
 800ba22:	f7fa fcc7 	bl	80063b4 <SerialMonprintln>
	uart2done=false;
 800ba26:	4b37      	ldr	r3, [pc, #220]	; (800bb04 <read_lp_mk10e+0x258>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800ba2c:	f240 424c 	movw	r2, #1100	; 0x44c
 800ba30:	2100      	movs	r1, #0
 800ba32:	4836      	ldr	r0, [pc, #216]	; (800bb0c <read_lp_mk10e+0x260>)
 800ba34:	f00f ff1a 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800ba38:	f240 424c 	movw	r2, #1100	; 0x44c
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4834      	ldr	r0, [pc, #208]	; (800bb10 <read_lp_mk10e+0x264>)
 800ba40:	f00f ff14 	bl	801b86c <memset>
	memset((char *)mydata,0,1100);
 800ba44:	f240 424c 	movw	r2, #1100	; 0x44c
 800ba48:	2100      	movs	r1, #0
 800ba4a:	482f      	ldr	r0, [pc, #188]	; (800bb08 <read_lp_mk10e+0x25c>)
 800ba4c:	f00f ff0e 	bl	801b86c <memset>
	uart3done = false;
 800ba50:	4b30      	ldr	r3, [pc, #192]	; (800bb14 <read_lp_mk10e+0x268>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
	uart3disc = true;
 800ba56:	4b30      	ldr	r3, [pc, #192]	; (800bb18 <read_lp_mk10e+0x26c>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	701a      	strb	r2, [r3, #0]
	if(lp_rec !=0){
 800ba5c:	4b3a      	ldr	r3, [pc, #232]	; (800bb48 <read_lp_mk10e+0x29c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d008      	beq.n	800ba76 <read_lp_mk10e+0x1ca>
		txLPMK10ERec(lp_rec);
 800ba64:	4b38      	ldr	r3, [pc, #224]	; (800bb48 <read_lp_mk10e+0x29c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f8 fb71 	bl	8004150 <txLPMK10ERec>
		lp_rec = 0;
 800ba6e:	4b36      	ldr	r3, [pc, #216]	; (800bb48 <read_lp_mk10e+0x29c>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	e005      	b.n	800ba82 <read_lp_mk10e+0x1d6>
	}
	else 	txLPMK10E(1+cnt_lp);
 800ba76:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <read_lp_mk10e+0x2a0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f8 fbb7 	bl	80041f0 <txLPMK10E>
	for(int y=0;y<20;y++){
 800ba82:	2300      	movs	r3, #0
 800ba84:	60bb      	str	r3, [r7, #8]
 800ba86:	e00d      	b.n	800baa4 <read_lp_mk10e+0x1f8>
		osDelay(200);
 800ba88:	20c8      	movs	r0, #200	; 0xc8
 800ba8a:	f00d f875 	bl	8018b78 <osDelay>
		if(uart3done){
 800ba8e:	4b21      	ldr	r3, [pc, #132]	; (800bb14 <read_lp_mk10e+0x268>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <read_lp_mk10e+0x1f2>
			uart3disc = false;
 800ba96:	4b20      	ldr	r3, [pc, #128]	; (800bb18 <read_lp_mk10e+0x26c>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
			break;
 800ba9c:	e005      	b.n	800baaa <read_lp_mk10e+0x1fe>
	for(int y=0;y<20;y++){
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	3301      	adds	r3, #1
 800baa2:	60bb      	str	r3, [r7, #8]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b13      	cmp	r3, #19
 800baa8:	ddee      	ble.n	800ba88 <read_lp_mk10e+0x1dc>
		}
	}
	memset(mydata,0,1100);
 800baaa:	f240 424c 	movw	r2, #1100	; 0x44c
 800baae:	2100      	movs	r1, #0
 800bab0:	4815      	ldr	r0, [pc, #84]	; (800bb08 <read_lp_mk10e+0x25c>)
 800bab2:	f00f fedb 	bl	801b86c <memset>
	if(!uart3disc){
 800bab6:	4b18      	ldr	r3, [pc, #96]	; (800bb18 <read_lp_mk10e+0x26c>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f083 0301 	eor.w	r3, r3, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d045      	beq.n	800bb50 <read_lp_mk10e+0x2a4>
	rxLPMK10E((char *)mydata,buffer3,datauart3size(buffer3));
 800bac4:	4812      	ldr	r0, [pc, #72]	; (800bb10 <read_lp_mk10e+0x264>)
 800bac6:	f7fc ffe5 	bl	8008a94 <datauart3size>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	4910      	ldr	r1, [pc, #64]	; (800bb10 <read_lp_mk10e+0x264>)
 800bad0:	480d      	ldr	r0, [pc, #52]	; (800bb08 <read_lp_mk10e+0x25c>)
 800bad2:	f7f8 fbe3 	bl	800429c <rxLPMK10E>
	memset((char *)buffer3,0,1100);
 800bad6:	f240 424c 	movw	r2, #1100	; 0x44c
 800bada:	2100      	movs	r1, #0
 800badc:	480c      	ldr	r0, [pc, #48]	; (800bb10 <read_lp_mk10e+0x264>)
 800bade:	f00f fec5 	bl	801b86c <memset>
	if(cnt_lp>0)cnt_lp--;
 800bae2:	4b1a      	ldr	r3, [pc, #104]	; (800bb4c <read_lp_mk10e+0x2a0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f340 8090 	ble.w	800bc0c <read_lp_mk10e+0x360>
 800baec:	4b17      	ldr	r3, [pc, #92]	; (800bb4c <read_lp_mk10e+0x2a0>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4a16      	ldr	r2, [pc, #88]	; (800bb4c <read_lp_mk10e+0x2a0>)
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	e089      	b.n	800bc0c <read_lp_mk10e+0x360>
 800baf8:	20000188 	.word	0x20000188
 800bafc:	0801f3fc 	.word	0x0801f3fc
 800bb00:	0801f924 	.word	0x0801f924
 800bb04:	20003fe4 	.word	0x20003fe4
 800bb08:	200046c8 	.word	0x200046c8
 800bb0c:	20005324 	.word	0x20005324
 800bb10:	200095dc 	.word	0x200095dc
 800bb14:	200042f8 	.word	0x200042f8
 800bb18:	2000430d 	.word	0x2000430d
 800bb1c:	200045f4 	.word	0x200045f4
 800bb20:	0801f8f4 	.word	0x0801f8f4
 800bb24:	20009058 	.word	0x20009058
 800bb28:	0801ef44 	.word	0x0801ef44
 800bb2c:	200089fc 	.word	0x200089fc
 800bb30:	0801f884 	.word	0x0801f884
 800bb34:	20005770 	.word	0x20005770
 800bb38:	0801f470 	.word	0x0801f470
 800bb3c:	2000b50c 	.word	0x2000b50c
 800bb40:	0801f480 	.word	0x0801f480
 800bb44:	0801f94c 	.word	0x0801f94c
 800bb48:	20000644 	.word	0x20000644
 800bb4c:	20000640 	.word	0x20000640
	}
	else {
		memset((char *)mydata,0,1100);
 800bb50:	f240 424c 	movw	r2, #1100	; 0x44c
 800bb54:	2100      	movs	r1, #0
 800bb56:	4854      	ldr	r0, [pc, #336]	; (800bca8 <read_lp_mk10e+0x3fc>)
 800bb58:	f00f fe88 	bl	801b86c <memset>
		sprintf(temp_data,"{\"mid\":%s,\"pid\":\"Event\",\"mtr\":\"MK10E\",\"csq\":\"",snMeter);
 800bb5c:	4b53      	ldr	r3, [pc, #332]	; (800bcac <read_lp_mk10e+0x400>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a53      	ldr	r2, [pc, #332]	; (800bcb0 <read_lp_mk10e+0x404>)
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	4953      	ldr	r1, [pc, #332]	; (800bcb4 <read_lp_mk10e+0x408>)
 800bb66:	4618      	mov	r0, r3
 800bb68:	f010 fc3a 	bl	801c3e0 <siprintf>
		strcat(temp_data, (char*)csq);
 800bb6c:	4b4f      	ldr	r3, [pc, #316]	; (800bcac <read_lp_mk10e+0x400>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4951      	ldr	r1, [pc, #324]	; (800bcb8 <read_lp_mk10e+0x40c>)
 800bb72:	4618      	mov	r0, r3
 800bb74:	f010 fc54 	bl	801c420 <strcat>
		strcat(temp_data,"\"");
 800bb78:	4b4c      	ldr	r3, [pc, #304]	; (800bcac <read_lp_mk10e+0x400>)
 800bb7a:	681c      	ldr	r4, [r3, #0]
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7f4 fb31 	bl	80001e4 <strlen>
 800bb82:	4603      	mov	r3, r0
 800bb84:	4423      	add	r3, r4
 800bb86:	494d      	ldr	r1, [pc, #308]	; (800bcbc <read_lp_mk10e+0x410>)
 800bb88:	461a      	mov	r2, r3
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	8013      	strh	r3, [r2, #0]
	  	sprintf(temp_data2,",\"mtrcon\":\"disconnect\"");
 800bb90:	4b4b      	ldr	r3, [pc, #300]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	494b      	ldr	r1, [pc, #300]	; (800bcc4 <read_lp_mk10e+0x418>)
 800bb96:	4618      	mov	r0, r3
 800bb98:	f010 fc22 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800bb9c:	4b43      	ldr	r3, [pc, #268]	; (800bcac <read_lp_mk10e+0x400>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a47      	ldr	r2, [pc, #284]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f010 fc3a 	bl	801c420 <strcat>
	  	sprintf(temp_data2,",\"bat\":\"%.2f\"",vbat_percentage);
 800bbac:	4b44      	ldr	r3, [pc, #272]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bbae:	681c      	ldr	r4, [r3, #0]
 800bbb0:	4b45      	ldr	r3, [pc, #276]	; (800bcc8 <read_lp_mk10e+0x41c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f4 fcd7 	bl	8000568 <__aeabi_f2d>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4943      	ldr	r1, [pc, #268]	; (800bccc <read_lp_mk10e+0x420>)
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f010 fc0d 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800bbc6:	4b39      	ldr	r3, [pc, #228]	; (800bcac <read_lp_mk10e+0x400>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a3d      	ldr	r2, [pc, #244]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f010 fc25 	bl	801c420 <strcat>
		sprintf(temp_data2,",\"pwr\":\"%d\"}",pwr_vmon);
 800bbd6:	4b3a      	ldr	r3, [pc, #232]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a3d      	ldr	r2, [pc, #244]	; (800bcd0 <read_lp_mk10e+0x424>)
 800bbdc:	7812      	ldrb	r2, [r2, #0]
 800bbde:	493d      	ldr	r1, [pc, #244]	; (800bcd4 <read_lp_mk10e+0x428>)
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f010 fbfd 	bl	801c3e0 <siprintf>
		strcat(temp_data, temp_data2);
 800bbe6:	4b31      	ldr	r3, [pc, #196]	; (800bcac <read_lp_mk10e+0x400>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a35      	ldr	r2, [pc, #212]	; (800bcc0 <read_lp_mk10e+0x414>)
 800bbec:	6812      	ldr	r2, [r2, #0]
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f010 fc15 	bl	801c420 <strcat>
		strcpy(mydata,temp_data);
 800bbf6:	4b2d      	ldr	r3, [pc, #180]	; (800bcac <read_lp_mk10e+0x400>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	482a      	ldr	r0, [pc, #168]	; (800bca8 <read_lp_mk10e+0x3fc>)
 800bbfe:	f010 fc1e 	bl	801c43e <strcpy>
		cnt_lp++;
 800bc02:	4b35      	ldr	r3, [pc, #212]	; (800bcd8 <read_lp_mk10e+0x42c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	4a33      	ldr	r2, [pc, #204]	; (800bcd8 <read_lp_mk10e+0x42c>)
 800bc0a:	6013      	str	r3, [r2, #0]
	}
	csqint = 1;
 800bc0c:	4b33      	ldr	r3, [pc, #204]	; (800bcdc <read_lp_mk10e+0x430>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	701a      	strb	r2, [r3, #0]
	cgattint = 1;
 800bc12:	4b33      	ldr	r3, [pc, #204]	; (800bce0 <read_lp_mk10e+0x434>)
 800bc14:	2201      	movs	r2, #1
 800bc16:	701a      	strb	r2, [r3, #0]
	if(csqint || cgattint) {
 800bc18:	4b30      	ldr	r3, [pc, #192]	; (800bcdc <read_lp_mk10e+0x430>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d103      	bne.n	800bc28 <read_lp_mk10e+0x37c>
 800bc20:	4b2f      	ldr	r3, [pc, #188]	; (800bce0 <read_lp_mk10e+0x434>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <read_lp_mk10e+0x384>
		onlineMode = true;
 800bc28:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <read_lp_mk10e+0x438>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	701a      	strb	r2, [r3, #0]
 800bc2e:	e007      	b.n	800bc40 <read_lp_mk10e+0x394>
	}
	else {
		onlineMode = false;
 800bc30:	4b2c      	ldr	r3, [pc, #176]	; (800bce4 <read_lp_mk10e+0x438>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]
		net_err_cnt++;
 800bc36:	4b2c      	ldr	r3, [pc, #176]	; (800bce8 <read_lp_mk10e+0x43c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	4a2a      	ldr	r2, [pc, #168]	; (800bce8 <read_lp_mk10e+0x43c>)
 800bc3e:	6013      	str	r3, [r2, #0]
	}
	if(onlineMode) {
 800bc40:	4b28      	ldr	r3, [pc, #160]	; (800bce4 <read_lp_mk10e+0x438>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d019      	beq.n	800bc7c <read_lp_mk10e+0x3d0>
		if(usemqtt){
 800bc48:	4b28      	ldr	r3, [pc, #160]	; (800bcec <read_lp_mk10e+0x440>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00c      	beq.n	800bc6a <read_lp_mk10e+0x3be>
			len_mydata=bufsizechararray(mydata);
 800bc50:	4815      	ldr	r0, [pc, #84]	; (800bca8 <read_lp_mk10e+0x3fc>)
 800bc52:	f7fc ff37 	bl	8008ac4 <bufsizechararray>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4a25      	ldr	r2, [pc, #148]	; (800bcf0 <read_lp_mk10e+0x444>)
 800bc5a:	6013      	str	r3, [r2, #0]
			sendMQTTMAIN();
 800bc5c:	f7fc ffc8 	bl	8008bf0 <sendMQTTMAIN>
			osDelay(2000);
 800bc60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc64:	f00c ff88 	bl	8018b78 <osDelay>
			net_err_cnt=0;
			osDelay(1000);
			setup_modem();
		}
	}
}
 800bc68:	e01a      	b.n	800bca0 <read_lp_mk10e+0x3f4>
		else sendToServer(mydata,bufsizechararray(mydata));
 800bc6a:	480f      	ldr	r0, [pc, #60]	; (800bca8 <read_lp_mk10e+0x3fc>)
 800bc6c:	f7fc ff2a 	bl	8008ac4 <bufsizechararray>
 800bc70:	4603      	mov	r3, r0
 800bc72:	4619      	mov	r1, r3
 800bc74:	480c      	ldr	r0, [pc, #48]	; (800bca8 <read_lp_mk10e+0x3fc>)
 800bc76:	f7fc fbd5 	bl	8008424 <sendToServer>
}
 800bc7a:	e011      	b.n	800bca0 <read_lp_mk10e+0x3f4>
		if(net_err_cnt >= 3) {
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <read_lp_mk10e+0x43c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	dd0d      	ble.n	800bca0 <read_lp_mk10e+0x3f4>
			printf("Restart Modem \r\n");
 800bc84:	481b      	ldr	r0, [pc, #108]	; (800bcf4 <read_lp_mk10e+0x448>)
 800bc86:	f010 fb93 	bl	801c3b0 <puts>
			NB_rst1_rtos();
 800bc8a:	f7fe f885 	bl	8009d98 <NB_rst1_rtos>
			net_err_cnt=0;
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <read_lp_mk10e+0x43c>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 800bc94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc98:	f00c ff6e 	bl	8018b78 <osDelay>
			setup_modem();
 800bc9c:	f7fc fb34 	bl	8008308 <setup_modem>
}
 800bca0:	bf00      	nop
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd90      	pop	{r4, r7, pc}
 800bca8:	200046c8 	.word	0x200046c8
 800bcac:	200045f4 	.word	0x200045f4
 800bcb0:	20000188 	.word	0x20000188
 800bcb4:	0801f8f4 	.word	0x0801f8f4
 800bcb8:	20009058 	.word	0x20009058
 800bcbc:	0801ef44 	.word	0x0801ef44
 800bcc0:	200089fc 	.word	0x200089fc
 800bcc4:	0801f884 	.word	0x0801f884
 800bcc8:	20005770 	.word	0x20005770
 800bccc:	0801f470 	.word	0x0801f470
 800bcd0:	2000b50c 	.word	0x2000b50c
 800bcd4:	0801f480 	.word	0x0801f480
 800bcd8:	20000640 	.word	0x20000640
 800bcdc:	20008a00 	.word	0x20008a00
 800bce0:	200045f0 	.word	0x200045f0
 800bce4:	20000013 	.word	0x20000013
 800bce8:	20002758 	.word	0x20002758
 800bcec:	20004285 	.word	0x20004285
 800bcf0:	20009120 	.word	0x20009120
 800bcf4:	0801f89c 	.word	0x0801f89c

0800bcf8 <read_sn_edmi>:

void read_sn_edmi(){
 800bcf8:	b590      	push	{r4, r7, lr}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
	memset((char *)mydata,0,1100);
 800bcfe:	f240 424c 	movw	r2, #1100	; 0x44c
 800bd02:	2100      	movs	r1, #0
 800bd04:	4830      	ldr	r0, [pc, #192]	; (800bdc8 <read_sn_edmi+0xd0>)
 800bd06:	f00f fdb1 	bl	801b86c <memset>
	loginToMeterRTOS();
 800bd0a:	f7fa fba1 	bl	8006450 <loginToMeterRTOS>
	uart3done = false;
 800bd0e:	4b2f      	ldr	r3, [pc, #188]	; (800bdcc <read_sn_edmi+0xd4>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
	uart2done=false;
 800bd14:	4b2e      	ldr	r3, [pc, #184]	; (800bdd0 <read_sn_edmi+0xd8>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]
	memset((char *)uart3_temp,0,1100);
 800bd1a:	f240 424c 	movw	r2, #1100	; 0x44c
 800bd1e:	2100      	movs	r1, #0
 800bd20:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <read_sn_edmi+0xdc>)
 800bd22:	f00f fda3 	bl	801b86c <memset>
	memset((char *)buffer3,0,1100);
 800bd26:	f240 424c 	movw	r2, #1100	; 0x44c
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	482a      	ldr	r0, [pc, #168]	; (800bdd8 <read_sn_edmi+0xe0>)
 800bd2e:	f00f fd9d 	bl	801b86c <memset>
	uart3disc = true;
 800bd32:	4b2a      	ldr	r3, [pc, #168]	; (800bddc <read_sn_edmi+0xe4>)
 800bd34:	2201      	movs	r2, #1
 800bd36:	701a      	strb	r2, [r3, #0]
	txSNMK10E_rtos();
 800bd38:	f7f7 fd66 	bl	8003808 <txSNMK10E_rtos>
	for(int y=0;y<20;y++){
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	607b      	str	r3, [r7, #4]
 800bd40:	e00d      	b.n	800bd5e <read_sn_edmi+0x66>
		osDelay(200);
 800bd42:	20c8      	movs	r0, #200	; 0xc8
 800bd44:	f00c ff18 	bl	8018b78 <osDelay>
		if(uart3done){
 800bd48:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <read_sn_edmi+0xd4>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <read_sn_edmi+0x60>
			uart3disc = false;
 800bd50:	4b22      	ldr	r3, [pc, #136]	; (800bddc <read_sn_edmi+0xe4>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
			break;
 800bd56:	e005      	b.n	800bd64 <read_sn_edmi+0x6c>
	for(int y=0;y<20;y++){
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b13      	cmp	r3, #19
 800bd62:	ddee      	ble.n	800bd42 <read_sn_edmi+0x4a>
		}
	}
	if(!uart3disc){
 800bd64:	4b1d      	ldr	r3, [pc, #116]	; (800bddc <read_sn_edmi+0xe4>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f083 0301 	eor.w	r3, r3, #1
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d022      	beq.n	800bdb8 <read_sn_edmi+0xc0>
	snMeter = rxSNMK10E_rtos(buffer3,datauart3size(buffer3));
 800bd72:	4819      	ldr	r0, [pc, #100]	; (800bdd8 <read_sn_edmi+0xe0>)
 800bd74:	f7fc fe8e 	bl	8008a94 <datauart3size>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4816      	ldr	r0, [pc, #88]	; (800bdd8 <read_sn_edmi+0xe0>)
 800bd7e:	f7f7 fd57 	bl	8003830 <rxSNMK10E_rtos>
 800bd82:	4603      	mov	r3, r0
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b16      	ldr	r3, [pc, #88]	; (800bde0 <read_sn_edmi+0xe8>)
 800bd88:	601a      	str	r2, [r3, #0]
	if(typemeter == 6) setSNMK6N(snMeter,strlen(snMeter));
 800bd8a:	4b16      	ldr	r3, [pc, #88]	; (800bde4 <read_sn_edmi+0xec>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b06      	cmp	r3, #6
 800bd90:	d10b      	bne.n	800bdaa <read_sn_edmi+0xb2>
 800bd92:	4b13      	ldr	r3, [pc, #76]	; (800bde0 <read_sn_edmi+0xe8>)
 800bd94:	681c      	ldr	r4, [r3, #0]
 800bd96:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <read_sn_edmi+0xe8>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f4 fa22 	bl	80001e4 <strlen>
 800bda0:	4603      	mov	r3, r0
 800bda2:	4619      	mov	r1, r3
 800bda4:	4620      	mov	r0, r4
 800bda6:	f7f5 fb9f 	bl	80014e8 <setSNMK6N>
	memset((char *)buffer3,0,1100);
 800bdaa:	f240 424c 	movw	r2, #1100	; 0x44c
 800bdae:	2100      	movs	r1, #0
 800bdb0:	4809      	ldr	r0, [pc, #36]	; (800bdd8 <read_sn_edmi+0xe0>)
 800bdb2:	f00f fd5b 	bl	801b86c <memset>
	}
	else {
		snMeter = "00000000";
	}
}
 800bdb6:	e002      	b.n	800bdbe <read_sn_edmi+0xc6>
		snMeter = "00000000";
 800bdb8:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <read_sn_edmi+0xe8>)
 800bdba:	4a0b      	ldr	r2, [pc, #44]	; (800bde8 <read_sn_edmi+0xf0>)
 800bdbc:	601a      	str	r2, [r3, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd90      	pop	{r4, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200046c8 	.word	0x200046c8
 800bdcc:	200042f8 	.word	0x200042f8
 800bdd0:	20003fe4 	.word	0x20003fe4
 800bdd4:	20005324 	.word	0x20005324
 800bdd8:	200095dc 	.word	0x200095dc
 800bddc:	2000430d 	.word	0x2000430d
 800bde0:	20000188 	.word	0x20000188
 800bde4:	2000b508 	.word	0x2000b508
 800bde8:	0801f3fc 	.word	0x0801f3fc

0800bdec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bdec:	b5b0      	push	{r4, r5, r7, lr}
 800bdee:	b0c2      	sub	sp, #264	; 0x108
 800bdf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	ATSMPUB=malloc(26);
 800bdf2:	201a      	movs	r0, #26
 800bdf4:	f00f fd24 	bl	801b840 <malloc>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	4ba0      	ldr	r3, [pc, #640]	; (800c080 <main+0x294>)
 800bdfe:	601a      	str	r2, [r3, #0]
	smstatestr=malloc(11);
 800be00:	200b      	movs	r0, #11
 800be02:	f00f fd1d 	bl	801b840 <malloc>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	4b9e      	ldr	r3, [pc, #632]	; (800c084 <main+0x298>)
 800be0c:	601a      	str	r2, [r3, #0]
	temp_data=malloc(200);
 800be0e:	20c8      	movs	r0, #200	; 0xc8
 800be10:	f00f fd16 	bl	801b840 <malloc>
 800be14:	4603      	mov	r3, r0
 800be16:	461a      	mov	r2, r3
 800be18:	4b9b      	ldr	r3, [pc, #620]	; (800c088 <main+0x29c>)
 800be1a:	601a      	str	r2, [r3, #0]
	temp_data2=malloc(50);
 800be1c:	2032      	movs	r0, #50	; 0x32
 800be1e:	f00f fd0f 	bl	801b840 <malloc>
 800be22:	4603      	mov	r3, r0
 800be24:	461a      	mov	r2, r3
 800be26:	4b99      	ldr	r3, [pc, #612]	; (800c08c <main+0x2a0>)
 800be28:	601a      	str	r2, [r3, #0]
	networkstr=malloc(20);
 800be2a:	2014      	movs	r0, #20
 800be2c:	f00f fd08 	bl	801b840 <malloc>
 800be30:	4603      	mov	r3, r0
 800be32:	461a      	mov	r2, r3
 800be34:	4b96      	ldr	r3, [pc, #600]	; (800c090 <main+0x2a4>)
 800be36:	601a      	str	r2, [r3, #0]
	uart2busy = false;
 800be38:	4b96      	ldr	r3, [pc, #600]	; (800c094 <main+0x2a8>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
	eob_date = 1;
 800be3e:	4b96      	ldr	r3, [pc, #600]	; (800c098 <main+0x2ac>)
 800be40:	2201      	movs	r2, #1
 800be42:	701a      	strb	r2, [r3, #0]
	eob_hour = 10;
 800be44:	4b95      	ldr	r3, [pc, #596]	; (800c09c <main+0x2b0>)
 800be46:	220a      	movs	r2, #10
 800be48:	701a      	strb	r2, [r3, #0]
	eob_minute = 0;
 800be4a:	4b95      	ldr	r3, [pc, #596]	; (800c0a0 <main+0x2b4>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
	instant_hour = 19;
 800be50:	4b94      	ldr	r3, [pc, #592]	; (800c0a4 <main+0x2b8>)
 800be52:	2213      	movs	r2, #19
 800be54:	701a      	strb	r2, [r3, #0]
	instant_minute = 0;
 800be56:	4b94      	ldr	r3, [pc, #592]	; (800c0a8 <main+0x2bc>)
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800be5c:	f003 f893 	bl	800ef86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800be60:	f000 fb5e 	bl	800c520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800be64:	f000 fdd4 	bl	800ca10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800be68:	f000 fd42 	bl	800c8f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800be6c:	f000 fd70 	bl	800c950 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800be70:	f000 fc5e 	bl	800c730 <MX_I2C1_Init>
  MX_SPI2_Init();
 800be74:	f000 fcfe 	bl	800c874 <MX_SPI2_Init>
  MX_FATFS_Init();
 800be78:	f009 faa8 	bl	80153cc <MX_FATFS_Init>
  MX_RTC_Init();
 800be7c:	f000 fc98 	bl	800c7b0 <MX_RTC_Init>
  MX_ADC1_Init();
 800be80:	f000 fbf0 	bl	800c664 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800be84:	f000 fd94 	bl	800c9b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(HARD_RST_GPIO_Port, HARD_RST_Pin, GPIO_PIN_SET);
 800be88:	2201      	movs	r2, #1
 800be8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800be92:	f004 fcbb 	bl	801080c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800be96:	2201      	movs	r2, #1
 800be98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bea0:	f004 fcb4 	bl	801080c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800bea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bea8:	f003 f8a4 	bl	800eff4 <HAL_Delay>
  sprintf((char*)tx_buffer, "\nV1.10 31-12-2020\n");
 800beac:	497f      	ldr	r1, [pc, #508]	; (800c0ac <main+0x2c0>)
 800beae:	4880      	ldr	r0, [pc, #512]	; (800c0b0 <main+0x2c4>)
 800beb0:	f010 fa96 	bl	801c3e0 <siprintf>
  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800beb4:	487e      	ldr	r0, [pc, #504]	; (800c0b0 <main+0x2c4>)
 800beb6:	f7f4 f995 	bl	80001e4 <strlen>
 800beba:	4603      	mov	r3, r0
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	4619      	mov	r1, r3
 800bec0:	487b      	ldr	r0, [pc, #492]	; (800c0b0 <main+0x2c4>)
 800bec2:	f7fc fe47 	bl	8008b54 <tx_com>

  onlineMode = false;
 800bec6:	4b7b      	ldr	r3, [pc, #492]	; (800c0b4 <main+0x2c8>)
 800bec8:	2200      	movs	r2, #0
 800beca:	701a      	strb	r2, [r3, #0]
  onlineMode = true;
 800becc:	4b79      	ldr	r3, [pc, #484]	; (800c0b4 <main+0x2c8>)
 800bece:	2201      	movs	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]
  //NBIOT
//  NB_rst1();
  NB_rst();
 800bed2:	f7fd ff7b 	bl	8009dcc <NB_rst>
  HAL_Delay(5000);
 800bed6:	f241 3088 	movw	r0, #5000	; 0x1388
 800beda:	f003 f88b 	bl	800eff4 <HAL_Delay>
//  NBIOT_setup();
//  HAL_Delay(1000);
//  setup_modem_nortos();
  HAL_Delay(1000);
 800bede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bee2:	f003 f887 	bl	800eff4 <HAL_Delay>
  usemqtt=false;
 800bee6:	4b74      	ldr	r3, [pc, #464]	; (800c0b8 <main+0x2cc>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]

    SerialMonprintln("Login To Meter");
 800beec:	4873      	ldr	r0, [pc, #460]	; (800c0bc <main+0x2d0>)
 800beee:	f7fa fa61 	bl	80063b4 <SerialMonprintln>
//    loginToMeter();
//    HAL_Delay(500);
    SerialMonprintln("Read SN Meter");
 800bef2:	4873      	ldr	r0, [pc, #460]	; (800c0c0 <main+0x2d4>)
 800bef4:	f7fa fa5e 	bl	80063b4 <SerialMonprintln>
//    printf("%s\r\n",snMeter);

//  if(onlineMode) setup_modem();
	
  //Main power fail detection
  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800bef8:	2102      	movs	r1, #2
 800befa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800befe:	f004 fc6d 	bl	80107dc <HAL_GPIO_ReadPin>
 800bf02:	4603      	mov	r3, r0
 800bf04:	461a      	mov	r2, r3
 800bf06:	4b6f      	ldr	r3, [pc, #444]	; (800c0c4 <main+0x2d8>)
 800bf08:	701a      	strb	r2, [r3, #0]
  sprintf((char*)tx_buffer, "pwr_vmon: %d\n", pwr_vmon);
 800bf0a:	4b6e      	ldr	r3, [pc, #440]	; (800c0c4 <main+0x2d8>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	496d      	ldr	r1, [pc, #436]	; (800c0c8 <main+0x2dc>)
 800bf12:	4867      	ldr	r0, [pc, #412]	; (800c0b0 <main+0x2c4>)
 800bf14:	f010 fa64 	bl	801c3e0 <siprintf>
  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bf18:	4865      	ldr	r0, [pc, #404]	; (800c0b0 <main+0x2c4>)
 800bf1a:	f7f4 f963 	bl	80001e4 <strlen>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	4619      	mov	r1, r3
 800bf24:	4862      	ldr	r0, [pc, #392]	; (800c0b0 <main+0x2c4>)
 800bf26:	f7fc fe15 	bl	8008b54 <tx_com>
  pwr_state=1;
 800bf2a:	4b68      	ldr	r3, [pc, #416]	; (800c0cc <main+0x2e0>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
//  sprintf((char*)tx_buffer, "pwr_vmon: %d\n", pwr_vmon);
//  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );

  //Mount SD Card
  //SD CARD
  fresult = f_mount(&fs, "/", 1);
 800bf30:	2201      	movs	r2, #1
 800bf32:	4967      	ldr	r1, [pc, #412]	; (800c0d0 <main+0x2e4>)
 800bf34:	4867      	ldr	r0, [pc, #412]	; (800c0d4 <main+0x2e8>)
 800bf36:	f00b fc21 	bl	801777c <f_mount>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	4b66      	ldr	r3, [pc, #408]	; (800c0d8 <main+0x2ec>)
 800bf40:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 800bf42:	4b65      	ldr	r3, [pc, #404]	; (800c0d8 <main+0x2ec>)
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00d      	beq.n	800bf66 <main+0x17a>
  {
	  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800bf4a:	4964      	ldr	r1, [pc, #400]	; (800c0dc <main+0x2f0>)
 800bf4c:	4858      	ldr	r0, [pc, #352]	; (800c0b0 <main+0x2c4>)
 800bf4e:	f010 fa47 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bf52:	4857      	ldr	r0, [pc, #348]	; (800c0b0 <main+0x2c4>)
 800bf54:	f7f4 f946 	bl	80001e4 <strlen>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4854      	ldr	r0, [pc, #336]	; (800c0b0 <main+0x2c4>)
 800bf60:	f7fc fdf8 	bl	8008b54 <tx_com>
 800bf64:	e0fe      	b.n	800c164 <main+0x378>
  }
  else
  {
	  sprintf((char*)tx_buffer, "SD Card Successfully Mounted\n");
 800bf66:	495e      	ldr	r1, [pc, #376]	; (800c0e0 <main+0x2f4>)
 800bf68:	4851      	ldr	r0, [pc, #324]	; (800c0b0 <main+0x2c4>)
 800bf6a:	f010 fa39 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bf6e:	4850      	ldr	r0, [pc, #320]	; (800c0b0 <main+0x2c4>)
 800bf70:	f7f4 f938 	bl	80001e4 <strlen>
 800bf74:	4603      	mov	r3, r0
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4619      	mov	r1, r3
 800bf7a:	484d      	ldr	r0, [pc, #308]	; (800c0b0 <main+0x2c4>)
 800bf7c:	f7fc fdea 	bl	8008b54 <tx_com>
	  fresult = f_open(&fil, "sdfile1.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800bf80:	2233      	movs	r2, #51	; 0x33
 800bf82:	4958      	ldr	r1, [pc, #352]	; (800c0e4 <main+0x2f8>)
 800bf84:	4858      	ldr	r0, [pc, #352]	; (800c0e8 <main+0x2fc>)
 800bf86:	f00b fc5d 	bl	8017844 <f_open>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b52      	ldr	r3, [pc, #328]	; (800c0d8 <main+0x2ec>)
 800bf90:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800bf92:	4b51      	ldr	r3, [pc, #324]	; (800c0d8 <main+0x2ec>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00d      	beq.n	800bfb6 <main+0x1ca>
	  {
		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800bf9a:	4954      	ldr	r1, [pc, #336]	; (800c0ec <main+0x300>)
 800bf9c:	4844      	ldr	r0, [pc, #272]	; (800c0b0 <main+0x2c4>)
 800bf9e:	f010 fa1f 	bl	801c3e0 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bfa2:	4843      	ldr	r0, [pc, #268]	; (800c0b0 <main+0x2c4>)
 800bfa4:	f7f4 f91e 	bl	80001e4 <strlen>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	4619      	mov	r1, r3
 800bfae:	4840      	ldr	r0, [pc, #256]	; (800c0b0 <main+0x2c4>)
 800bfb0:	f7fc fdd0 	bl	8008b54 <tx_com>
 800bfb4:	e00f      	b.n	800bfd6 <main+0x1ea>
	  }
	  else
	  {
		  sprintf((char*)tx_buffer, "File Successfully Opened\n");
 800bfb6:	494e      	ldr	r1, [pc, #312]	; (800c0f0 <main+0x304>)
 800bfb8:	483d      	ldr	r0, [pc, #244]	; (800c0b0 <main+0x2c4>)
 800bfba:	f010 fa11 	bl	801c3e0 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bfbe:	483c      	ldr	r0, [pc, #240]	; (800c0b0 <main+0x2c4>)
 800bfc0:	f7f4 f910 	bl	80001e4 <strlen>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4839      	ldr	r0, [pc, #228]	; (800c0b0 <main+0x2c4>)
 800bfcc:	f7fc fdc2 	bl	8008b54 <tx_com>
		   f_close(&fil);
 800bfd0:	4845      	ldr	r0, [pc, #276]	; (800c0e8 <main+0x2fc>)
 800bfd2:	f00c fa24 	bl	801841e <f_close>
	  }
	  fresult = f_open(&fil, "config.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800bfd6:	2233      	movs	r2, #51	; 0x33
 800bfd8:	4946      	ldr	r1, [pc, #280]	; (800c0f4 <main+0x308>)
 800bfda:	4843      	ldr	r0, [pc, #268]	; (800c0e8 <main+0x2fc>)
 800bfdc:	f00b fc32 	bl	8017844 <f_open>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4b3c      	ldr	r3, [pc, #240]	; (800c0d8 <main+0x2ec>)
 800bfe6:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800bfe8:	4b3b      	ldr	r3, [pc, #236]	; (800c0d8 <main+0x2ec>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <main+0x220>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800bff0:	493e      	ldr	r1, [pc, #248]	; (800c0ec <main+0x300>)
 800bff2:	482f      	ldr	r0, [pc, #188]	; (800c0b0 <main+0x2c4>)
 800bff4:	f010 f9f4 	bl	801c3e0 <siprintf>
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800bff8:	482d      	ldr	r0, [pc, #180]	; (800c0b0 <main+0x2c4>)
 800bffa:	f7f4 f8f3 	bl	80001e4 <strlen>
 800bffe:	4603      	mov	r3, r0
 800c000:	b29b      	uxth	r3, r3
 800c002:	4619      	mov	r1, r3
 800c004:	482a      	ldr	r0, [pc, #168]	; (800c0b0 <main+0x2c4>)
 800c006:	f7fc fda5 	bl	8008b54 <tx_com>
 800c00a:	e01e      	b.n	800c04a <main+0x25e>
	  	  }
	  	  else
	  	  {
	  		  sprintf((char*)tx_buffer, "File Successfully Opened\n");
 800c00c:	4938      	ldr	r1, [pc, #224]	; (800c0f0 <main+0x304>)
 800c00e:	4828      	ldr	r0, [pc, #160]	; (800c0b0 <main+0x2c4>)
 800c010:	f010 f9e6 	bl	801c3e0 <siprintf>
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800c014:	4826      	ldr	r0, [pc, #152]	; (800c0b0 <main+0x2c4>)
 800c016:	f7f4 f8e5 	bl	80001e4 <strlen>
 800c01a:	4603      	mov	r3, r0
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	4619      	mov	r1, r3
 800c020:	4823      	ldr	r0, [pc, #140]	; (800c0b0 <main+0x2c4>)
 800c022:	f7fc fd97 	bl	8008b54 <tx_com>
	  		  f_puts("13\n", &fil);
 800c026:	4930      	ldr	r1, [pc, #192]	; (800c0e8 <main+0x2fc>)
 800c028:	4833      	ldr	r0, [pc, #204]	; (800c0f8 <main+0x30c>)
 800c02a:	f00c fb97 	bl	801875c <f_puts>
			  f_puts("10\n", &fil);
 800c02e:	492e      	ldr	r1, [pc, #184]	; (800c0e8 <main+0x2fc>)
 800c030:	4832      	ldr	r0, [pc, #200]	; (800c0fc <main+0x310>)
 800c032:	f00c fb93 	bl	801875c <f_puts>
			  f_puts("30\n", &fil);
 800c036:	492c      	ldr	r1, [pc, #176]	; (800c0e8 <main+0x2fc>)
 800c038:	4831      	ldr	r0, [pc, #196]	; (800c100 <main+0x314>)
 800c03a:	f00c fb8f 	bl	801875c <f_puts>
			  printf("\nConfig is created and the data is written\r\n");
 800c03e:	4831      	ldr	r0, [pc, #196]	; (800c104 <main+0x318>)
 800c040:	f010 f9b6 	bl	801c3b0 <puts>
	  		  f_close(&fil);
 800c044:	4828      	ldr	r0, [pc, #160]	; (800c0e8 <main+0x2fc>)
 800c046:	f00c f9ea 	bl	801841e <f_close>
	  	  }
	  // Open file to read
	  fresult = f_open(&fil, "configmtr.txt", FA_READ);
 800c04a:	2201      	movs	r2, #1
 800c04c:	492e      	ldr	r1, [pc, #184]	; (800c108 <main+0x31c>)
 800c04e:	4826      	ldr	r0, [pc, #152]	; (800c0e8 <main+0x2fc>)
 800c050:	f00b fbf8 	bl	8017844 <f_open>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	4b1f      	ldr	r3, [pc, #124]	; (800c0d8 <main+0x2ec>)
 800c05a:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK)
 800c05c:	4b1e      	ldr	r3, [pc, #120]	; (800c0d8 <main+0x2ec>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d053      	beq.n	800c10c <main+0x320>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800c064:	4921      	ldr	r1, [pc, #132]	; (800c0ec <main+0x300>)
 800c066:	4812      	ldr	r0, [pc, #72]	; (800c0b0 <main+0x2c4>)
 800c068:	f010 f9ba 	bl	801c3e0 <siprintf>
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800c06c:	4810      	ldr	r0, [pc, #64]	; (800c0b0 <main+0x2c4>)
 800c06e:	f7f4 f8b9 	bl	80001e4 <strlen>
 800c072:	4603      	mov	r3, r0
 800c074:	b29b      	uxth	r3, r3
 800c076:	4619      	mov	r1, r3
 800c078:	480d      	ldr	r0, [pc, #52]	; (800c0b0 <main+0x2c4>)
 800c07a:	f7fc fd6b 	bl	8008b54 <tx_com>
 800c07e:	e071      	b.n	800c164 <main+0x378>
 800c080:	20004308 	.word	0x20004308
 800c084:	2000affc 	.word	0x2000affc
 800c088:	200045f4 	.word	0x200045f4
 800c08c:	200089fc 	.word	0x200089fc
 800c090:	20005314 	.word	0x20005314
 800c094:	2000b000 	.word	0x2000b000
 800c098:	200089f4 	.word	0x200089f4
 800c09c:	200081b7 	.word	0x200081b7
 800c0a0:	20008188 	.word	0x20008188
 800c0a4:	20008180 	.word	0x20008180
 800c0a8:	200081b6 	.word	0x200081b6
 800c0ac:	0801f95c 	.word	0x0801f95c
 800c0b0:	200068bc 	.word	0x200068bc
 800c0b4:	20000013 	.word	0x20000013
 800c0b8:	20004285 	.word	0x20004285
 800c0bc:	0801f970 	.word	0x0801f970
 800c0c0:	0801f980 	.word	0x0801f980
 800c0c4:	2000b50c 	.word	0x2000b50c
 800c0c8:	0801f990 	.word	0x0801f990
 800c0cc:	20007243 	.word	0x20007243
 800c0d0:	0801ef30 	.word	0x0801ef30
 800c0d4:	20004318 	.word	0x20004318
 800c0d8:	20009054 	.word	0x20009054
 800c0dc:	0801f7a0 	.word	0x0801f7a0
 800c0e0:	0801f7bc 	.word	0x0801f7bc
 800c0e4:	0801f9a0 	.word	0x0801f9a0
 800c0e8:	2000a27c 	.word	0x2000a27c
 800c0ec:	0801f7dc 	.word	0x0801f7dc
 800c0f0:	0801f7f4 	.word	0x0801f7f4
 800c0f4:	0801f9ac 	.word	0x0801f9ac
 800c0f8:	0801f9b8 	.word	0x0801f9b8
 800c0fc:	0801f9bc 	.word	0x0801f9bc
 800c100:	0801f9c0 	.word	0x0801f9c0
 800c104:	0801f9c4 	.word	0x0801f9c4
 800c108:	0801f9f0 	.word	0x0801f9f0
	  	  }
	  	  else
	  	  {
	  		  bufclear();
 800c10c:	f7fc fcf2 	bl	8008af4 <bufclear>
	  		  // Read data from file
	  		  f_gets(buffer,sizeof(buffer),&fil);
 800c110:	4a20      	ldr	r2, [pc, #128]	; (800c194 <main+0x3a8>)
 800c112:	f240 414c 	movw	r1, #1100	; 0x44c
 800c116:	4820      	ldr	r0, [pc, #128]	; (800c198 <main+0x3ac>)
 800c118:	f00c fa6c 	bl	80185f4 <f_gets>
	  		  typemeter = 6;
 800c11c:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <main+0x3b0>)
 800c11e:	2206      	movs	r2, #6
 800c120:	601a      	str	r2, [r3, #0]
	  		  printf(buffer);
 800c122:	481d      	ldr	r0, [pc, #116]	; (800c198 <main+0x3ac>)
 800c124:	f010 f8be 	bl	801c2a4 <iprintf>
	  		  typemeter = charToInt(buffer[11]);
 800c128:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <main+0x3ac>)
 800c12a:	7adb      	ldrb	r3, [r3, #11]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fc fd03 	bl	8008b38 <charToInt>
 800c132:	4603      	mov	r3, r0
 800c134:	4a19      	ldr	r2, [pc, #100]	; (800c19c <main+0x3b0>)
 800c136:	6013      	str	r3, [r2, #0]
	  		  if(typemeter!=6){
 800c138:	4b18      	ldr	r3, [pc, #96]	; (800c19c <main+0x3b0>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b06      	cmp	r3, #6
 800c13e:	d006      	beq.n	800c14e <main+0x362>
	  			  if(typemeter==1){
 800c140:	4b16      	ldr	r3, [pc, #88]	; (800c19c <main+0x3b0>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d102      	bne.n	800c14e <main+0x362>
	  				  typemeter=10;
 800c148:	4b14      	ldr	r3, [pc, #80]	; (800c19c <main+0x3b0>)
 800c14a:	220a      	movs	r2, #10
 800c14c:	601a      	str	r2, [r3, #0]
	  			  }
	  		  }
//	  		  typemeter = 6;
	  		  printf("\r\nType Meter : %d\r\n",typemeter);
 800c14e:	4b13      	ldr	r3, [pc, #76]	; (800c19c <main+0x3b0>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4619      	mov	r1, r3
 800c154:	4812      	ldr	r0, [pc, #72]	; (800c1a0 <main+0x3b4>)
 800c156:	f010 f8a5 	bl	801c2a4 <iprintf>
	  		  // Close file
	  		  f_close(&fil);
 800c15a:	480e      	ldr	r0, [pc, #56]	; (800c194 <main+0x3a8>)
 800c15c:	f00c f95f 	bl	801841e <f_close>
	  		  bufclear();
 800c160:	f7fc fcc8 	bl	8008af4 <bufclear>
	  	  }
  }

  //i2cdevice , slave address:0x6B<<1
  if(HAL_I2C_IsDeviceReady(&hi2c1,0x6B<<1,2,10) ==HAL_OK){
 800c164:	230a      	movs	r3, #10
 800c166:	2202      	movs	r2, #2
 800c168:	21d6      	movs	r1, #214	; 0xd6
 800c16a:	480e      	ldr	r0, [pc, #56]	; (800c1a4 <main+0x3b8>)
 800c16c:	f005 f830 	bl	80111d0 <HAL_I2C_IsDeviceReady>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d11c      	bne.n	800c1b0 <main+0x3c4>
	  sprintf((char*)tx_buffer, "LSM6DSL found\n");
 800c176:	490c      	ldr	r1, [pc, #48]	; (800c1a8 <main+0x3bc>)
 800c178:	480c      	ldr	r0, [pc, #48]	; (800c1ac <main+0x3c0>)
 800c17a:	f010 f931 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800c17e:	480b      	ldr	r0, [pc, #44]	; (800c1ac <main+0x3c0>)
 800c180:	f7f4 f830 	bl	80001e4 <strlen>
 800c184:	4603      	mov	r3, r0
 800c186:	b29b      	uxth	r3, r3
 800c188:	4619      	mov	r1, r3
 800c18a:	4808      	ldr	r0, [pc, #32]	; (800c1ac <main+0x3c0>)
 800c18c:	f7fc fce2 	bl	8008b54 <tx_com>
 800c190:	e01b      	b.n	800c1ca <main+0x3de>
 800c192:	bf00      	nop
 800c194:	2000a27c 	.word	0x2000a27c
 800c198:	20007244 	.word	0x20007244
 800c19c:	2000b508 	.word	0x2000b508
 800c1a0:	0801fa00 	.word	0x0801fa00
 800c1a4:	20004550 	.word	0x20004550
 800c1a8:	0801fa14 	.word	0x0801fa14
 800c1ac:	200068bc 	.word	0x200068bc
  }
  else
  {
	  sprintf((char*)tx_buffer, "LSM6DSL not found\n");
 800c1b0:	49b0      	ldr	r1, [pc, #704]	; (800c474 <main+0x688>)
 800c1b2:	48b1      	ldr	r0, [pc, #708]	; (800c478 <main+0x68c>)
 800c1b4:	f010 f914 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800c1b8:	48af      	ldr	r0, [pc, #700]	; (800c478 <main+0x68c>)
 800c1ba:	f7f4 f813 	bl	80001e4 <strlen>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	48ac      	ldr	r0, [pc, #688]	; (800c478 <main+0x68c>)
 800c1c6:	f7fc fcc5 	bl	8008b54 <tx_com>
  }

  bufclear();
 800c1ca:	f7fc fc93 	bl	8008af4 <bufclear>
  HAL_Delay(1000);
 800c1ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c1d2:	f002 ff0f 	bl	800eff4 <HAL_Delay>
	
  //check i2c communication , return:0x6A
  uint16_t output;
  LSM6DSL_readRegister(&output,0x0F);
 800c1d6:	f507 7383 	add.w	r3, r7, #262	; 0x106
 800c1da:	210f      	movs	r1, #15
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe f849 	bl	800a274 <LSM6DSL_readRegister>
  LSM6DSL_setup();
 800c1e2:	f7fe f873 	bl	800a2cc <LSM6DSL_setup>
  printf("read:%X\r\n",(uint8_t)output);
 800c1e6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	48a3      	ldr	r0, [pc, #652]	; (800c47c <main+0x690>)
 800c1f0:	f010 f858 	bl	801c2a4 <iprintf>
	
//
	
  // Check free space
  f_getfree("", &fre_clust, &pfs);
 800c1f4:	4aa2      	ldr	r2, [pc, #648]	; (800c480 <main+0x694>)
 800c1f6:	49a3      	ldr	r1, [pc, #652]	; (800c484 <main+0x698>)
 800c1f8:	48a3      	ldr	r0, [pc, #652]	; (800c488 <main+0x69c>)
 800c1fa:	f00c f93f 	bl	801847c <f_getfree>
  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800c1fe:	4ba0      	ldr	r3, [pc, #640]	; (800c480 <main+0x694>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69db      	ldr	r3, [r3, #28]
 800c204:	3b02      	subs	r3, #2
 800c206:	4a9e      	ldr	r2, [pc, #632]	; (800c480 <main+0x694>)
 800c208:	6812      	ldr	r2, [r2, #0]
 800c20a:	8952      	ldrh	r2, [r2, #10]
 800c20c:	fb02 f303 	mul.w	r3, r2, r3
 800c210:	4618      	mov	r0, r3
 800c212:	f7f4 f987 	bl	8000524 <__aeabi_ui2d>
 800c216:	f04f 0200 	mov.w	r2, #0
 800c21a:	4b9c      	ldr	r3, [pc, #624]	; (800c48c <main+0x6a0>)
 800c21c:	f7f4 f9fc 	bl	8000618 <__aeabi_dmul>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	4610      	mov	r0, r2
 800c226:	4619      	mov	r1, r3
 800c228:	f7f4 fcce 	bl	8000bc8 <__aeabi_d2uiz>
 800c22c:	4603      	mov	r3, r0
 800c22e:	4a98      	ldr	r2, [pc, #608]	; (800c490 <main+0x6a4>)
 800c230:	6013      	str	r3, [r2, #0]
  bufclear();
 800c232:	f7fc fc5f 	bl	8008af4 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800c236:	4b92      	ldr	r3, [pc, #584]	; (800c480 <main+0x694>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	461a      	mov	r2, r3
 800c23e:	4b91      	ldr	r3, [pc, #580]	; (800c484 <main+0x698>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	fb03 f302 	mul.w	r3, r3, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7f4 f96c 	bl	8000524 <__aeabi_ui2d>
 800c24c:	f04f 0200 	mov.w	r2, #0
 800c250:	4b8e      	ldr	r3, [pc, #568]	; (800c48c <main+0x6a0>)
 800c252:	f7f4 f9e1 	bl	8000618 <__aeabi_dmul>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	f7f4 fcb3 	bl	8000bc8 <__aeabi_d2uiz>
 800c262:	4603      	mov	r3, r0
 800c264:	4a8b      	ldr	r2, [pc, #556]	; (800c494 <main+0x6a8>)
 800c266:	6013      	str	r3, [r2, #0]

  // Open file to write/ create a file if it doesn't exist 
  fresult = f_open(&fil, "sdfile1.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800c268:	2233      	movs	r2, #51	; 0x33
 800c26a:	498b      	ldr	r1, [pc, #556]	; (800c498 <main+0x6ac>)
 800c26c:	488b      	ldr	r0, [pc, #556]	; (800c49c <main+0x6b0>)
 800c26e:	f00b fae9 	bl	8017844 <f_open>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	4b8a      	ldr	r3, [pc, #552]	; (800c4a0 <main+0x6b4>)
 800c278:	701a      	strb	r2, [r3, #0]

  // Writing text 
  f_puts("Message: Hello World 123\n", &fil);
 800c27a:	4988      	ldr	r1, [pc, #544]	; (800c49c <main+0x6b0>)
 800c27c:	4889      	ldr	r0, [pc, #548]	; (800c4a4 <main+0x6b8>)
 800c27e:	f00c fa6d 	bl	801875c <f_puts>
  printf("\nFile1 is created and the data is written\r\n");
 800c282:	4889      	ldr	r0, [pc, #548]	; (800c4a8 <main+0x6bc>)
 800c284:	f010 f894 	bl	801c3b0 <puts>

  // Close file 
  fresult = f_close(&fil);
 800c288:	4884      	ldr	r0, [pc, #528]	; (800c49c <main+0x6b0>)
 800c28a:	f00c f8c8 	bl	801841e <f_close>
 800c28e:	4603      	mov	r3, r0
 800c290:	461a      	mov	r2, r3
 800c292:	4b83      	ldr	r3, [pc, #524]	; (800c4a0 <main+0x6b4>)
 800c294:	701a      	strb	r2, [r3, #0]

  // Open file to read
  fresult = f_open(&fil, "sdfile1.txt", FA_READ);
 800c296:	2201      	movs	r2, #1
 800c298:	497f      	ldr	r1, [pc, #508]	; (800c498 <main+0x6ac>)
 800c29a:	4880      	ldr	r0, [pc, #512]	; (800c49c <main+0x6b0>)
 800c29c:	f00b fad2 	bl	8017844 <f_open>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b7e      	ldr	r3, [pc, #504]	; (800c4a0 <main+0x6b4>)
 800c2a6:	701a      	strb	r2, [r3, #0]

  //Read String from the file
  f_gets(buffer,sizeof(buffer),&fil);
 800c2a8:	4a7c      	ldr	r2, [pc, #496]	; (800c49c <main+0x6b0>)
 800c2aa:	f240 414c 	movw	r1, #1100	; 0x44c
 800c2ae:	487f      	ldr	r0, [pc, #508]	; (800c4ac <main+0x6c0>)
 800c2b0:	f00c f9a0 	bl	80185f4 <f_gets>
  printf("\nSD Card read:%s\r\n",buffer);
 800c2b4:	497d      	ldr	r1, [pc, #500]	; (800c4ac <main+0x6c0>)
 800c2b6:	487e      	ldr	r0, [pc, #504]	; (800c4b0 <main+0x6c4>)
 800c2b8:	f00f fff4 	bl	801c2a4 <iprintf>

  //Close file
  f_close(&fil);
 800c2bc:	4877      	ldr	r0, [pc, #476]	; (800c49c <main+0x6b0>)
 800c2be:	f00c f8ae 	bl	801841e <f_close>
  bufclear();
 800c2c2:	f7fc fc17 	bl	8008af4 <bufclear>
  f_mount(0, "", 0);
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	496f      	ldr	r1, [pc, #444]	; (800c488 <main+0x69c>)
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f00b fa56 	bl	801777c <f_mount>
//  HAL_Delay(1000);
//  NBIOT_setup();
//  HAL_Delay(1000);
//  setup_modem_nortos();
//  HAL_Delay(1000);
  usemqtt=true;
 800c2d0:	4b78      	ldr	r3, [pc, #480]	; (800c4b4 <main+0x6c8>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	701a      	strb	r2, [r3, #0]
//  MQTT_setup();
  //enable uart interrupt
  HAL_UART_Receive_IT(&huart1,(uint8_t *)uart1_buf,1);
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4977      	ldr	r1, [pc, #476]	; (800c4b8 <main+0x6cc>)
 800c2da:	4878      	ldr	r0, [pc, #480]	; (800c4bc <main+0x6d0>)
 800c2dc:	f008 f8f2 	bl	80144c4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	4977      	ldr	r1, [pc, #476]	; (800c4c0 <main+0x6d4>)
 800c2e4:	4877      	ldr	r0, [pc, #476]	; (800c4c4 <main+0x6d8>)
 800c2e6:	f008 f8ed 	bl	80144c4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)uart3_buf,1);
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	4976      	ldr	r1, [pc, #472]	; (800c4c8 <main+0x6dc>)
 800c2ee:	4877      	ldr	r0, [pc, #476]	; (800c4cc <main+0x6e0>)
 800c2f0:	f008 f8e8 	bl	80144c4 <HAL_UART_Receive_IT>
  NBIOT_setup_IT();
 800c2f4:	f7fd feb4 	bl	800a060 <NBIOT_setup_IT>
  MQTT_setup();
 800c2f8:	f7fd ff56 	bl	800a1a8 <MQTT_setup>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexStaticDef(myMutex01, &myMutex01ControlBlock);
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c302:	4b73      	ldr	r3, [pc, #460]	; (800c4d0 <main+0x6e4>)
 800c304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800c308:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800c30c:	4618      	mov	r0, r3
 800c30e:	f00c fcd3 	bl	8018cb8 <osMutexCreate>
 800c312:	4603      	mov	r3, r0
 800c314:	4a6f      	ldr	r2, [pc, #444]	; (800c4d4 <main+0x6e8>)
 800c316:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainProgram */
  osThreadStaticDef(mainProgram, main_program, osPriorityNormal, 0, 512, mainProgramBuffer, &mainProgramControlBlock);
 800c318:	4b6f      	ldr	r3, [pc, #444]	; (800c4d8 <main+0x6ec>)
 800c31a:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800c31e:	461d      	mov	r5, r3
 800c320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c324:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainProgramHandle = osThreadCreate(osThread(mainProgram), NULL);
 800c32c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800c330:	2100      	movs	r1, #0
 800c332:	4618      	mov	r0, r3
 800c334:	f00c fbd4 	bl	8018ae0 <osThreadCreate>
 800c338:	4603      	mov	r3, r0
 800c33a:	4a68      	ldr	r2, [pc, #416]	; (800c4dc <main+0x6f0>)
 800c33c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readGyro */
  osThreadStaticDef(readGyro, read_gyro, osPriorityLow, 0, 128, readGyroBuffer, &readGyroControlBlock);
 800c33e:	4b68      	ldr	r3, [pc, #416]	; (800c4e0 <main+0x6f4>)
 800c340:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800c344:	461d      	mov	r5, r3
 800c346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c34a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c34e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGyroHandle = osThreadCreate(osThread(readGyro), NULL);
 800c352:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f00c fbc1 	bl	8018ae0 <osThreadCreate>
 800c35e:	4603      	mov	r3, r0
 800c360:	4a60      	ldr	r2, [pc, #384]	; (800c4e4 <main+0x6f8>)
 800c362:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendDataToServe */
  osThreadStaticDef(sendDataToServe, send_data_to_server, osPriorityNormal, 0, 512, sendDataToServeBuffer, &sendDataToServeControlBlock);
 800c364:	4b60      	ldr	r3, [pc, #384]	; (800c4e8 <main+0x6fc>)
 800c366:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800c36a:	461d      	mov	r5, r3
 800c36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendDataToServeHandle = osThreadCreate(osThread(sendDataToServe), NULL);
 800c378:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c37c:	2100      	movs	r1, #0
 800c37e:	4618      	mov	r0, r3
 800c380:	f00c fbae 	bl	8018ae0 <osThreadCreate>
 800c384:	4603      	mov	r3, r0
 800c386:	4a59      	ldr	r2, [pc, #356]	; (800c4ec <main+0x700>)
 800c388:	6013      	str	r3, [r2, #0]

  /* definition and creation of readEoB */
  osThreadStaticDef(readEoB, read_EoB, osPriorityNormal, 0, 700, readEoBBuffer, &readEoBControlBlock);
 800c38a:	4b59      	ldr	r3, [pc, #356]	; (800c4f0 <main+0x704>)
 800c38c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800c390:	461d      	mov	r5, r3
 800c392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c39a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readEoBHandle = osThreadCreate(osThread(readEoB), NULL);
 800c39e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f00c fb9b 	bl	8018ae0 <osThreadCreate>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4a51      	ldr	r2, [pc, #324]	; (800c4f4 <main+0x708>)
 800c3ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of readLP */
  osThreadStaticDef(readLP, read_LP, osPriorityNormal, 0, 700, readLPBuffer, &readLPControlBlock);
 800c3b0:	4b51      	ldr	r3, [pc, #324]	; (800c4f8 <main+0x70c>)
 800c3b2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c3c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readLPHandle = osThreadCreate(osThread(readLP), NULL);
 800c3c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f00c fb88 	bl	8018ae0 <osThreadCreate>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	4a4a      	ldr	r2, [pc, #296]	; (800c4fc <main+0x710>)
 800c3d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of readInstant */
  osThreadStaticDef(readInstant, read_instant, osPriorityNormal, 0, 700, readInstantBuffer, &readInstantControlBlock);
 800c3d6:	4b4a      	ldr	r3, [pc, #296]	; (800c500 <main+0x714>)
 800c3d8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800c3dc:	461d      	mov	r5, r3
 800c3de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c3e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readInstantHandle = osThreadCreate(osThread(readInstant), NULL);
 800c3ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f00c fb75 	bl	8018ae0 <osThreadCreate>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4a42      	ldr	r2, [pc, #264]	; (800c504 <main+0x718>)
 800c3fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendHardBit */
  osThreadStaticDef(sendHardBit, send_hard_bit, osPriorityNormal, 0, 512, sendHardBitBuffer, &sendHardBitControlBlock);
 800c3fc:	4b42      	ldr	r3, [pc, #264]	; (800c508 <main+0x71c>)
 800c3fe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800c402:	461d      	mov	r5, r3
 800c404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c40c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendHardBitHandle = osThreadCreate(osThread(sendHardBit), NULL);
 800c410:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c414:	2100      	movs	r1, #0
 800c416:	4618      	mov	r0, r3
 800c418:	f00c fb62 	bl	8018ae0 <osThreadCreate>
 800c41c:	4603      	mov	r3, r0
 800c41e:	4a3b      	ldr	r2, [pc, #236]	; (800c50c <main+0x720>)
 800c420:	6013      	str	r3, [r2, #0]

  /* definition and creation of checkVbat */
  osThreadStaticDef(checkVbat, check_vbat, osPriorityNormal, 0, 128, checkVbatBuffer, &checkVbatControlBlock);
 800c422:	4b3b      	ldr	r3, [pc, #236]	; (800c510 <main+0x724>)
 800c424:	f107 041c 	add.w	r4, r7, #28
 800c428:	461d      	mov	r5, r3
 800c42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c42e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkVbatHandle = osThreadCreate(osThread(checkVbat), NULL);
 800c436:	f107 031c 	add.w	r3, r7, #28
 800c43a:	2100      	movs	r1, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f00c fb4f 	bl	8018ae0 <osThreadCreate>
 800c442:	4603      	mov	r3, r0
 800c444:	4a33      	ldr	r2, [pc, #204]	; (800c514 <main+0x728>)
 800c446:	6013      	str	r3, [r2, #0]

  /* definition and creation of checkVMon */
  osThreadStaticDef(checkVMon, check_vmon, osPriorityNormal, 0, 128, checkVMonBuffer, &checkVMonControlBlock);
 800c448:	463b      	mov	r3, r7
 800c44a:	4a33      	ldr	r2, [pc, #204]	; (800c518 <main+0x72c>)
 800c44c:	461c      	mov	r4, r3
 800c44e:	4615      	mov	r5, r2
 800c450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkVMonHandle = osThreadCreate(osThread(checkVMon), NULL);
 800c45c:	463b      	mov	r3, r7
 800c45e:	2100      	movs	r1, #0
 800c460:	4618      	mov	r0, r3
 800c462:	f00c fb3d 	bl	8018ae0 <osThreadCreate>
 800c466:	4603      	mov	r3, r0
 800c468:	4a2c      	ldr	r2, [pc, #176]	; (800c51c <main+0x730>)
 800c46a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800c46c:	f00c fb31 	bl	8018ad2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c470:	e7fe      	b.n	800c470 <main+0x684>
 800c472:	bf00      	nop
 800c474:	0801fa24 	.word	0x0801fa24
 800c478:	200068bc 	.word	0x200068bc
 800c47c:	0801fa38 	.word	0x0801fa38
 800c480:	20009050 	.word	0x20009050
 800c484:	20003fcc 	.word	0x20003fcc
 800c488:	0801fa44 	.word	0x0801fa44
 800c48c:	3fe00000 	.word	0x3fe00000
 800c490:	200090c0 	.word	0x200090c0
 800c494:	20007224 	.word	0x20007224
 800c498:	0801f9a0 	.word	0x0801f9a0
 800c49c:	2000a27c 	.word	0x2000a27c
 800c4a0:	20009054 	.word	0x20009054
 800c4a4:	0801fa48 	.word	0x0801fa48
 800c4a8:	0801fa64 	.word	0x0801fa64
 800c4ac:	20007244 	.word	0x20007244
 800c4b0:	0801fa90 	.word	0x0801fa90
 800c4b4:	20004285 	.word	0x20004285
 800c4b8:	200095d8 	.word	0x200095d8
 800c4bc:	20002fe0 	.word	0x20002fe0
 800c4c0:	20004284 	.word	0x20004284
 800c4c4:	200038e4 	.word	0x200038e4
 800c4c8:	200089f8 	.word	0x200089f8
 800c4cc:	20002770 	.word	0x20002770
 800c4d0:	20003fe8 	.word	0x20003fe8
 800c4d4:	2000afa0 	.word	0x2000afa0
 800c4d8:	0801faa4 	.word	0x0801faa4
 800c4dc:	200081b0 	.word	0x200081b0
 800c4e0:	0801fac0 	.word	0x0801fac0
 800c4e4:	20009124 	.word	0x20009124
 800c4e8:	0801fadc 	.word	0x0801fadc
 800c4ec:	20008184 	.word	0x20008184
 800c4f0:	0801faf8 	.word	0x0801faf8
 800c4f4:	2000af9c 	.word	0x2000af9c
 800c4f8:	0801fb14 	.word	0x0801fb14
 800c4fc:	200046c4 	.word	0x200046c4
 800c500:	0801fb30 	.word	0x0801fb30
 800c504:	2000646c 	.word	0x2000646c
 800c508:	0801fb4c 	.word	0x0801fb4c
 800c50c:	2000b510 	.word	0x2000b510
 800c510:	0801fb68 	.word	0x0801fb68
 800c514:	20005774 	.word	0x20005774
 800c518:	0801fb84 	.word	0x0801fb84
 800c51c:	2000531c 	.word	0x2000531c

0800c520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b0ae      	sub	sp, #184	; 0xb8
 800c524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c526:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c52a:	2244      	movs	r2, #68	; 0x44
 800c52c:	2100      	movs	r1, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f00f f99c 	bl	801b86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c534:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c538:	2200      	movs	r2, #0
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	605a      	str	r2, [r3, #4]
 800c53e:	609a      	str	r2, [r3, #8]
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c544:	1d3b      	adds	r3, r7, #4
 800c546:	225c      	movs	r2, #92	; 0x5c
 800c548:	2100      	movs	r1, #0
 800c54a:	4618      	mov	r0, r3
 800c54c:	f00f f98e 	bl	801b86c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c550:	f005 fa66 	bl	8011a20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800c554:	4b41      	ldr	r3, [pc, #260]	; (800c65c <SystemClock_Config+0x13c>)
 800c556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c55a:	4a40      	ldr	r2, [pc, #256]	; (800c65c <SystemClock_Config+0x13c>)
 800c55c:	f023 0318 	bic.w	r3, r3, #24
 800c560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800c564:	231c      	movs	r3, #28
 800c566:	677b      	str	r3, [r7, #116]	; 0x74
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c568:	2301      	movs	r3, #1
 800c56a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800c572:	2301      	movs	r3, #1
 800c574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800c57e:	2360      	movs	r3, #96	; 0x60
 800c580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c584:	2302      	movs	r3, #2
 800c586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800c58a:	2301      	movs	r3, #1
 800c58c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800c590:	2301      	movs	r3, #1
 800c592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 800c596:	2328      	movs	r3, #40	; 0x28
 800c598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800c59c:	2307      	movs	r3, #7
 800c59e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c5ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f005 faa8 	bl	8011b08 <HAL_RCC_OscConfig>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800c5be:	f002 f93e 	bl	800e83e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c5c2:	230f      	movs	r3, #15
 800c5c4:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800c5d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c5da:	2104      	movs	r1, #4
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f005 feb3 	bl	8012348 <HAL_RCC_ClockConfig>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800c5e8:	f002 f929 	bl	800e83e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800c5ec:	4b1c      	ldr	r3, [pc, #112]	; (800c660 <SystemClock_Config+0x140>)
 800c5ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800c600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c604:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800c606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c60a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800c60c:	2301      	movs	r3, #1
 800c60e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800c610:	2301      	movs	r3, #1
 800c612:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800c614:	2310      	movs	r3, #16
 800c616:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800c618:	2307      	movs	r3, #7
 800c61a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800c61c:	2302      	movs	r3, #2
 800c61e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c620:	2302      	movs	r3, #2
 800c622:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800c624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c628:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c62a:	1d3b      	adds	r3, r7, #4
 800c62c:	4618      	mov	r0, r3
 800c62e:	f006 f8c3 	bl	80127b8 <HAL_RCCEx_PeriphCLKConfig>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800c638:	f002 f901 	bl	800e83e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800c63c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c640:	f005 fa0c 	bl	8011a5c <HAL_PWREx_ControlVoltageScaling>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800c64a:	f002 f8f8 	bl	800e83e <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800c64e:	f006 facb 	bl	8012be8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800c652:	bf00      	nop
 800c654:	37b8      	adds	r7, #184	; 0xb8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	40021000 	.word	0x40021000
 800c660:	00024047 	.word	0x00024047

0800c664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c66a:	463b      	mov	r3, r7
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	605a      	str	r2, [r3, #4]
 800c672:	609a      	str	r2, [r3, #8]
 800c674:	60da      	str	r2, [r3, #12]
 800c676:	611a      	str	r2, [r3, #16]
 800c678:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800c67a:	4b2a      	ldr	r3, [pc, #168]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c67c:	4a2a      	ldr	r2, [pc, #168]	; (800c728 <MX_ADC1_Init+0xc4>)
 800c67e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c680:	4b28      	ldr	r3, [pc, #160]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c682:	2200      	movs	r2, #0
 800c684:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800c686:	4b27      	ldr	r3, [pc, #156]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c688:	2208      	movs	r2, #8
 800c68a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c68c:	4b25      	ldr	r3, [pc, #148]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c68e:	2200      	movs	r2, #0
 800c690:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c692:	4b24      	ldr	r3, [pc, #144]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c694:	2200      	movs	r2, #0
 800c696:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c698:	4b22      	ldr	r3, [pc, #136]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c69a:	2204      	movs	r2, #4
 800c69c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800c69e:	4b21      	ldr	r3, [pc, #132]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800c6a4:	4b1f      	ldr	r3, [pc, #124]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800c6aa:	4b1e      	ldr	r3, [pc, #120]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c6b0:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800c6b8:	4b1a      	ldr	r3, [pc, #104]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c6be:	4b19      	ldr	r3, [pc, #100]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c6c4:	4b17      	ldr	r3, [pc, #92]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c6ca:	4b16      	ldr	r3, [pc, #88]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c6d2:	4b14      	ldr	r3, [pc, #80]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800c6d8:	4b12      	ldr	r3, [pc, #72]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c6e0:	4810      	ldr	r0, [pc, #64]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c6e2:	f002 feb1 	bl	800f448 <HAL_ADC_Init>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800c6ec:	f002 f8a7 	bl	800e83e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800c6f0:	4b0e      	ldr	r3, [pc, #56]	; (800c72c <MX_ADC1_Init+0xc8>)
 800c6f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c6f4:	2306      	movs	r3, #6
 800c6f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800c6f8:	2306      	movs	r3, #6
 800c6fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800c6fc:	237f      	movs	r3, #127	; 0x7f
 800c6fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800c700:	2304      	movs	r3, #4
 800c702:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c708:	463b      	mov	r3, r7
 800c70a:	4619      	mov	r1, r3
 800c70c:	4805      	ldr	r0, [pc, #20]	; (800c724 <MX_ADC1_Init+0xc0>)
 800c70e:	f003 f90d 	bl	800f92c <HAL_ADC_ConfigChannel>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800c718:	f002 f891 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c71c:	bf00      	nop
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20006d1c 	.word	0x20006d1c
 800c728:	50040000 	.word	0x50040000
 800c72c:	14f00020 	.word	0x14f00020

0800c730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c734:	4b1b      	ldr	r3, [pc, #108]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c736:	4a1c      	ldr	r2, [pc, #112]	; (800c7a8 <MX_I2C1_Init+0x78>)
 800c738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800c73a:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c73c:	4a1b      	ldr	r2, [pc, #108]	; (800c7ac <MX_I2C1_Init+0x7c>)
 800c73e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c740:	4b18      	ldr	r3, [pc, #96]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c742:	2200      	movs	r2, #0
 800c744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c746:	4b17      	ldr	r3, [pc, #92]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c748:	2201      	movs	r2, #1
 800c74a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c74c:	4b15      	ldr	r3, [pc, #84]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c74e:	2200      	movs	r2, #0
 800c750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c752:	4b14      	ldr	r3, [pc, #80]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c754:	2200      	movs	r2, #0
 800c756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c758:	4b12      	ldr	r3, [pc, #72]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c75e:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c760:	2200      	movs	r2, #0
 800c762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c764:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c766:	2200      	movs	r2, #0
 800c768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c76a:	480e      	ldr	r0, [pc, #56]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c76c:	f004 f889 	bl	8010882 <HAL_I2C_Init>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c776:	f002 f862 	bl	800e83e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c77a:	2100      	movs	r1, #0
 800c77c:	4809      	ldr	r0, [pc, #36]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c77e:	f005 f8b7 	bl	80118f0 <HAL_I2CEx_ConfigAnalogFilter>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c788:	f002 f859 	bl	800e83e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c78c:	2100      	movs	r1, #0
 800c78e:	4805      	ldr	r0, [pc, #20]	; (800c7a4 <MX_I2C1_Init+0x74>)
 800c790:	f005 f8f9 	bl	8011986 <HAL_I2CEx_ConfigDigitalFilter>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c79a:	f002 f850 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c79e:	bf00      	nop
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20004550 	.word	0x20004550
 800c7a8:	40005400 	.word	0x40005400
 800c7ac:	10909cec 	.word	0x10909cec

0800c7b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c7b6:	1d3b      	adds	r3, r7, #4
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	605a      	str	r2, [r3, #4]
 800c7be:	609a      	str	r2, [r3, #8]
 800c7c0:	60da      	str	r2, [r3, #12]
 800c7c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c7c8:	4b28      	ldr	r3, [pc, #160]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7ca:	4a29      	ldr	r2, [pc, #164]	; (800c870 <MX_RTC_Init+0xc0>)
 800c7cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c7ce:	4b27      	ldr	r3, [pc, #156]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c7d4:	4b25      	ldr	r3, [pc, #148]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7d6:	227f      	movs	r2, #127	; 0x7f
 800c7d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7dc:	22ff      	movs	r2, #255	; 0xff
 800c7de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c7e0:	4b22      	ldr	r3, [pc, #136]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c7e6:	4b21      	ldr	r3, [pc, #132]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c7ec:	4b1f      	ldr	r3, [pc, #124]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c7f2:	4b1e      	ldr	r3, [pc, #120]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c7f8:	481c      	ldr	r0, [pc, #112]	; (800c86c <MX_RTC_Init+0xbc>)
 800c7fa:	f006 faf7 	bl	8012dec <HAL_RTC_Init>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d001      	beq.n	800c808 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800c804:	f002 f81b 	bl	800e83e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 800c808:	2319      	movs	r3, #25
 800c80a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x15;
 800c80c:	2315      	movs	r3, #21
 800c80e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800c810:	2300      	movs	r3, #0
 800c812:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c818:	2300      	movs	r3, #0
 800c81a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c81c:	1d3b      	adds	r3, r7, #4
 800c81e:	2201      	movs	r2, #1
 800c820:	4619      	mov	r1, r3
 800c822:	4812      	ldr	r0, [pc, #72]	; (800c86c <MX_RTC_Init+0xbc>)
 800c824:	f006 fb5d 	bl	8012ee2 <HAL_RTC_SetTime>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800c82e:	f002 f806 	bl	800e83e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800c832:	2305      	movs	r3, #5
 800c834:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 800c836:	2310      	movs	r3, #16
 800c838:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x23;
 800c83a:	2323      	movs	r3, #35	; 0x23
 800c83c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800c83e:	2320      	movs	r3, #32
 800c840:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c842:	463b      	mov	r3, r7
 800c844:	2201      	movs	r2, #1
 800c846:	4619      	mov	r1, r3
 800c848:	4808      	ldr	r0, [pc, #32]	; (800c86c <MX_RTC_Init+0xbc>)
 800c84a:	f006 fc43 	bl	80130d4 <HAL_RTC_SetDate>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800c854:	f001 fff3 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); //backup register
 800c858:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800c85c:	2101      	movs	r1, #1
 800c85e:	4803      	ldr	r0, [pc, #12]	; (800c86c <MX_RTC_Init+0xbc>)
 800c860:	f006 fdde 	bl	8013420 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END RTC_Init 2 */

}
 800c864:	bf00      	nop
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	2000818c 	.word	0x2000818c
 800c870:	40002800 	.word	0x40002800

0800c874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c878:	4b1b      	ldr	r3, [pc, #108]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c87a:	4a1c      	ldr	r2, [pc, #112]	; (800c8ec <MX_SPI2_Init+0x78>)
 800c87c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c87e:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c880:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c884:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c886:	4b18      	ldr	r3, [pc, #96]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c888:	2200      	movs	r2, #0
 800c88a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c88c:	4b16      	ldr	r3, [pc, #88]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c88e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800c892:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c894:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c896:	2200      	movs	r2, #0
 800c898:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c89a:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c8a0:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8aa:	2210      	movs	r2, #16
 800c8ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c8ae:	4b0e      	ldr	r3, [pc, #56]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c8c0:	4b09      	ldr	r3, [pc, #36]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8c2:	2207      	movs	r2, #7
 800c8c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c8c6:	4b08      	ldr	r3, [pc, #32]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c8cc:	4b06      	ldr	r3, [pc, #24]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8ce:	2208      	movs	r2, #8
 800c8d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c8d2:	4805      	ldr	r0, [pc, #20]	; (800c8e8 <MX_SPI2_Init+0x74>)
 800c8d4:	f006 fdbd 	bl	8013452 <HAL_SPI_Init>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c8de:	f001 ffae 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c8e2:	bf00      	nop
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20004294 	.word	0x20004294
 800c8ec:	40003800 	.word	0x40003800

0800c8f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c8f4:	4b14      	ldr	r3, [pc, #80]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c8f6:	4a15      	ldr	r2, [pc, #84]	; (800c94c <MX_USART1_UART_Init+0x5c>)
 800c8f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c8fa:	4b13      	ldr	r3, [pc, #76]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c8fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c902:	4b11      	ldr	r3, [pc, #68]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c904:	2200      	movs	r2, #0
 800c906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c908:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c90e:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c910:	2200      	movs	r2, #0
 800c912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c914:	4b0c      	ldr	r3, [pc, #48]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c916:	220c      	movs	r2, #12
 800c918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c91a:	4b0b      	ldr	r3, [pc, #44]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c920:	4b09      	ldr	r3, [pc, #36]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c922:	2200      	movs	r2, #0
 800c924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c926:	4b08      	ldr	r3, [pc, #32]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c928:	2200      	movs	r2, #0
 800c92a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c92e:	2200      	movs	r2, #0
 800c930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c932:	4805      	ldr	r0, [pc, #20]	; (800c948 <MX_USART1_UART_Init+0x58>)
 800c934:	f007 fce4 	bl	8014300 <HAL_UART_Init>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800c93e:	f001 ff7e 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c942:	bf00      	nop
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20002fe0 	.word	0x20002fe0
 800c94c:	40013800 	.word	0x40013800

0800c950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c954:	4b14      	ldr	r3, [pc, #80]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c956:	4a15      	ldr	r2, [pc, #84]	; (800c9ac <MX_USART2_UART_Init+0x5c>)
 800c958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c95a:	4b13      	ldr	r3, [pc, #76]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c95c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c962:	4b11      	ldr	r3, [pc, #68]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c964:	2200      	movs	r2, #0
 800c966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c968:	4b0f      	ldr	r3, [pc, #60]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c970:	2200      	movs	r2, #0
 800c972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c974:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c976:	220c      	movs	r2, #12
 800c978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c97a:	4b0b      	ldr	r3, [pc, #44]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c980:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c982:	2200      	movs	r2, #0
 800c984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c986:	4b08      	ldr	r3, [pc, #32]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c988:	2200      	movs	r2, #0
 800c98a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c98c:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c98e:	2200      	movs	r2, #0
 800c990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c992:	4805      	ldr	r0, [pc, #20]	; (800c9a8 <MX_USART2_UART_Init+0x58>)
 800c994:	f007 fcb4 	bl	8014300 <HAL_UART_Init>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c99e:	f001 ff4e 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c9a2:	bf00      	nop
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	200038e4 	.word	0x200038e4
 800c9ac:	40004400 	.word	0x40004400

0800c9b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c9b4:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9b6:	4a15      	ldr	r2, [pc, #84]	; (800ca0c <MX_USART3_UART_Init+0x5c>)
 800c9b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800c9ba:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c9c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9d6:	220c      	movs	r2, #12
 800c9d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9da:	4b0b      	ldr	r3, [pc, #44]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9e0:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c9e6:	4b08      	ldr	r3, [pc, #32]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c9ec:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c9f2:	4805      	ldr	r0, [pc, #20]	; (800ca08 <MX_USART3_UART_Init+0x58>)
 800c9f4:	f007 fc84 	bl	8014300 <HAL_UART_Init>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800c9fe:	f001 ff1e 	bl	800e83e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ca02:	bf00      	nop
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20002770 	.word	0x20002770
 800ca0c:	40004800 	.word	0x40004800

0800ca10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca16:	f107 0314 	add.w	r3, r7, #20
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	605a      	str	r2, [r3, #4]
 800ca20:	609a      	str	r2, [r3, #8]
 800ca22:	60da      	str	r2, [r3, #12]
 800ca24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca26:	4b46      	ldr	r3, [pc, #280]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca2a:	4a45      	ldr	r2, [pc, #276]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca2c:	f043 0304 	orr.w	r3, r3, #4
 800ca30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca32:	4b43      	ldr	r3, [pc, #268]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ca3e:	4b40      	ldr	r3, [pc, #256]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca42:	4a3f      	ldr	r2, [pc, #252]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca4a:	4b3d      	ldr	r3, [pc, #244]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca56:	4b3a      	ldr	r3, [pc, #232]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca5a:	4a39      	ldr	r2, [pc, #228]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca5c:	f043 0301 	orr.w	r3, r3, #1
 800ca60:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca62:	4b37      	ldr	r3, [pc, #220]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	60bb      	str	r3, [r7, #8]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca6e:	4b34      	ldr	r3, [pc, #208]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca72:	4a33      	ldr	r2, [pc, #204]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca7a:	4b31      	ldr	r3, [pc, #196]	; (800cb40 <MX_GPIO_Init+0x130>)
 800ca7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	607b      	str	r3, [r7, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|RSTNB_Pin, GPIO_PIN_RESET);
 800ca86:	2200      	movs	r2, #0
 800ca88:	2103      	movs	r1, #3
 800ca8a:	482e      	ldr	r0, [pc, #184]	; (800cb44 <MX_GPIO_Init+0x134>)
 800ca8c:	f003 febe 	bl	801080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800ca90:	2201      	movs	r2, #1
 800ca92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ca96:	482b      	ldr	r0, [pc, #172]	; (800cb44 <MX_GPIO_Init+0x134>)
 800ca98:	f003 feb8 	bl	801080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HARD_RST_GPIO_Port, HARD_RST_Pin, GPIO_PIN_SET);
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800caa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800caa6:	f003 feb1 	bl	801080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800caaa:	2200      	movs	r2, #0
 800caac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cab4:	f003 feaa 	bl	801080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWR_VMON_Pin */
  GPIO_InitStruct.Pin = PWR_VMON_Pin;
 800cab8:	2302      	movs	r3, #2
 800caba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_VMON_GPIO_Port, &GPIO_InitStruct);
 800cac4:	f107 0314 	add.w	r3, r7, #20
 800cac8:	4619      	mov	r1, r3
 800caca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cace:	f003 fd0b 	bl	80104e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN_Pin RSTNB_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|RSTNB_Pin|SPI2_CS_Pin;
 800cad2:	f241 0303 	movw	r3, #4099	; 0x1003
 800cad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cad8:	2301      	movs	r3, #1
 800cada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cadc:	2300      	movs	r3, #0
 800cade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cae0:	2300      	movs	r3, #0
 800cae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cae4:	f107 0314 	add.w	r3, r7, #20
 800cae8:	4619      	mov	r1, r3
 800caea:	4816      	ldr	r0, [pc, #88]	; (800cb44 <MX_GPIO_Init+0x134>)
 800caec:	f003 fcfc 	bl	80104e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HARD_RST_Pin PA15 */
  GPIO_InitStruct.Pin = HARD_RST_Pin|GPIO_PIN_15;
 800caf0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800caf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800caf6:	2301      	movs	r3, #1
 800caf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cafe:	2300      	movs	r3, #0
 800cb00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb02:	f107 0314 	add.w	r3, r7, #20
 800cb06:	4619      	mov	r1, r3
 800cb08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cb0c:	f003 fcec 	bl	80104e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_Pin;
 800cb10:	2320      	movs	r3, #32
 800cb12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <MX_GPIO_Init+0x138>)
 800cb16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_GPIO_Port, &GPIO_InitStruct);
 800cb1c:	f107 0314 	add.w	r3, r7, #20
 800cb20:	4619      	mov	r1, r3
 800cb22:	4808      	ldr	r0, [pc, #32]	; (800cb44 <MX_GPIO_Init+0x134>)
 800cb24:	f003 fce0 	bl	80104e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2105      	movs	r1, #5
 800cb2c:	2017      	movs	r0, #23
 800cb2e:	f003 fc6f 	bl	8010410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800cb32:	2017      	movs	r0, #23
 800cb34:	f003 fc88 	bl	8010448 <HAL_NVIC_EnableIRQ>

}
 800cb38:	bf00      	nop
 800cb3a:	3728      	adds	r7, #40	; 0x28
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	40021000 	.word	0x40021000
 800cb44:	48000400 	.word	0x48000400
 800cb48:	10110000 	.word	0x10110000

0800cb4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb4c:	b5b0      	push	{r4, r5, r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart == &huart1)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a99      	ldr	r2, [pc, #612]	; (800cdbc <HAL_UART_RxCpltCallback+0x270>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d140      	bne.n	800cbde <HAL_UART_RxCpltCallback+0x92>
		{
			uart1_temp[i]=uart1_buf[0]; //store byte in temp buffer
 800cb5c:	4b98      	ldr	r3, [pc, #608]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a98      	ldr	r2, [pc, #608]	; (800cdc4 <HAL_UART_RxCpltCallback+0x278>)
 800cb62:	7811      	ldrb	r1, [r2, #0]
 800cb64:	4a98      	ldr	r2, [pc, #608]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb66:	54d1      	strb	r1, [r2, r3]
			if(uart1_temp[i] == 0x0A){
 800cb68:	4b95      	ldr	r3, [pc, #596]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a96      	ldr	r2, [pc, #600]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb6e:	5cd3      	ldrb	r3, [r2, r3]
 800cb70:	2b0a      	cmp	r3, #10
 800cb72:	d116      	bne.n	800cba2 <HAL_UART_RxCpltCallback+0x56>
				HAL_UART_Transmit(&huart2, (uint8_t *)uart1_temp, strlen(uart1_temp),0xff);
 800cb74:	4894      	ldr	r0, [pc, #592]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb76:	f7f3 fb35 	bl	80001e4 <strlen>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	23ff      	movs	r3, #255	; 0xff
 800cb80:	4991      	ldr	r1, [pc, #580]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb82:	4892      	ldr	r0, [pc, #584]	; (800cdcc <HAL_UART_RxCpltCallback+0x280>)
 800cb84:	f007 fc0a 	bl	801439c <HAL_UART_Transmit>
				memset(uart1_temp,0,strlen(uart1_temp));
 800cb88:	488f      	ldr	r0, [pc, #572]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb8a:	f7f3 fb2b 	bl	80001e4 <strlen>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	461a      	mov	r2, r3
 800cb92:	2100      	movs	r1, #0
 800cb94:	488c      	ldr	r0, [pc, #560]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cb96:	f00e fe69 	bl	801b86c <memset>
				i=0;
 800cb9a:	4b89      	ldr	r3, [pc, #548]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e018      	b.n	800cbd4 <HAL_UART_RxCpltCallback+0x88>
			}
			else if(i>1099){
 800cba2:	4b87      	ldr	r3, [pc, #540]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f240 424b 	movw	r2, #1099	; 0x44b
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	dd0d      	ble.n	800cbca <HAL_UART_RxCpltCallback+0x7e>
				printf("%s\r\n",uart1_temp);
 800cbae:	4986      	ldr	r1, [pc, #536]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cbb0:	4887      	ldr	r0, [pc, #540]	; (800cdd0 <HAL_UART_RxCpltCallback+0x284>)
 800cbb2:	f00f fb77 	bl	801c2a4 <iprintf>
				memset(uart1_temp,0,1100);
 800cbb6:	f240 424c 	movw	r2, #1100	; 0x44c
 800cbba:	2100      	movs	r1, #0
 800cbbc:	4882      	ldr	r0, [pc, #520]	; (800cdc8 <HAL_UART_RxCpltCallback+0x27c>)
 800cbbe:	f00e fe55 	bl	801b86c <memset>
				i=0;
 800cbc2:	4b7f      	ldr	r3, [pc, #508]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	e004      	b.n	800cbd4 <HAL_UART_RxCpltCallback+0x88>
			}
			else
				i++;
 800cbca:	4b7d      	ldr	r3, [pc, #500]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	4a7b      	ldr	r2, [pc, #492]	; (800cdc0 <HAL_UART_RxCpltCallback+0x274>)
 800cbd2:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1,(uint8_t *)uart1_buf,1);
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	497b      	ldr	r1, [pc, #492]	; (800cdc4 <HAL_UART_RxCpltCallback+0x278>)
 800cbd8:	4878      	ldr	r0, [pc, #480]	; (800cdbc <HAL_UART_RxCpltCallback+0x270>)
 800cbda:	f007 fc73 	bl	80144c4 <HAL_UART_Receive_IT>
		}
	if(huart == &huart2)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4a7a      	ldr	r2, [pc, #488]	; (800cdcc <HAL_UART_RxCpltCallback+0x280>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	f040 8374 	bne.w	800d2d0 <HAL_UART_RxCpltCallback+0x784>
		{
			uart2_temp[j]=uart2_buf[0]; //store byte in temp2 buffer
 800cbe8:	4b7a      	ldr	r3, [pc, #488]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a7a      	ldr	r2, [pc, #488]	; (800cdd8 <HAL_UART_RxCpltCallback+0x28c>)
 800cbee:	7811      	ldrb	r1, [r2, #0]
 800cbf0:	4a7a      	ldr	r2, [pc, #488]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cbf2:	54d1      	strb	r1, [r2, r3]
			if(j>6){
 800cbf4:	4b77      	ldr	r3, [pc, #476]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b06      	cmp	r3, #6
 800cbfa:	f340 8322 	ble.w	800d242 <HAL_UART_RxCpltCallback+0x6f6>
//				if(uart2_temp[j-1] == '\r'  && uart2_temp[j] == '\n')
				if(uart2_temp[j] == '\n' && (uart2_temp[j-3] == 'O' && uart2_temp[j-2] == 'K') || (uart2_temp[j-3] == 'O' && uart2_temp[j-2] == 'R'))
 800cbfe:	4b75      	ldr	r3, [pc, #468]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a76      	ldr	r2, [pc, #472]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc04:	5cd3      	ldrb	r3, [r2, r3]
 800cc06:	2b0a      	cmp	r3, #10
 800cc08:	d10d      	bne.n	800cc26 <HAL_UART_RxCpltCallback+0xda>
 800cc0a:	4b72      	ldr	r3, [pc, #456]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3b03      	subs	r3, #3
 800cc10:	4a72      	ldr	r2, [pc, #456]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc12:	5cd3      	ldrb	r3, [r2, r3]
 800cc14:	2b4f      	cmp	r3, #79	; 0x4f
 800cc16:	d106      	bne.n	800cc26 <HAL_UART_RxCpltCallback+0xda>
 800cc18:	4b6e      	ldr	r3, [pc, #440]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3b02      	subs	r3, #2
 800cc1e:	4a6f      	ldr	r2, [pc, #444]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc20:	5cd3      	ldrb	r3, [r2, r3]
 800cc22:	2b4b      	cmp	r3, #75	; 0x4b
 800cc24:	d00f      	beq.n	800cc46 <HAL_UART_RxCpltCallback+0xfa>
 800cc26:	4b6b      	ldr	r3, [pc, #428]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3b03      	subs	r3, #3
 800cc2c:	4a6b      	ldr	r2, [pc, #428]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc2e:	5cd3      	ldrb	r3, [r2, r3]
 800cc30:	2b4f      	cmp	r3, #79	; 0x4f
 800cc32:	f040 80f1 	bne.w	800ce18 <HAL_UART_RxCpltCallback+0x2cc>
 800cc36:	4b67      	ldr	r3, [pc, #412]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3b02      	subs	r3, #2
 800cc3c:	4a67      	ldr	r2, [pc, #412]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc3e:	5cd3      	ldrb	r3, [r2, r3]
 800cc40:	2b52      	cmp	r3, #82	; 0x52
 800cc42:	f040 80e9 	bne.w	800ce18 <HAL_UART_RxCpltCallback+0x2cc>
				{
						HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
 800cc46:	4865      	ldr	r0, [pc, #404]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc48:	f7f3 facc 	bl	80001e4 <strlen>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	23ff      	movs	r3, #255	; 0xff
 800cc52:	4962      	ldr	r1, [pc, #392]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc54:	4859      	ldr	r0, [pc, #356]	; (800cdbc <HAL_UART_RxCpltCallback+0x270>)
 800cc56:	f007 fba1 	bl	801439c <HAL_UART_Transmit>
						printf("\r\n");
 800cc5a:	4861      	ldr	r0, [pc, #388]	; (800cde0 <HAL_UART_RxCpltCallback+0x294>)
 800cc5c:	f00f fba8 	bl	801c3b0 <puts>
						uart2done = true;
 800cc60:	4b60      	ldr	r3, [pc, #384]	; (800cde4 <HAL_UART_RxCpltCallback+0x298>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	701a      	strb	r2, [r3, #0]
						uart2busy = false;
 800cc66:	4b60      	ldr	r3, [pc, #384]	; (800cde8 <HAL_UART_RxCpltCallback+0x29c>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
						int cmpint=strcmp(uart2_at,"AT+CPSI?");
 800cc6c:	495f      	ldr	r1, [pc, #380]	; (800cdec <HAL_UART_RxCpltCallback+0x2a0>)
 800cc6e:	4860      	ldr	r0, [pc, #384]	; (800cdf0 <HAL_UART_RxCpltCallback+0x2a4>)
 800cc70:	f7f3 faae 	bl	80001d0 <strcmp>
 800cc74:	60f8      	str	r0, [r7, #12]
						if(cmpint==0){
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 808b 	bne.w	800cd94 <HAL_UART_RxCpltCallback+0x248>
							uart2_temp[j] = 0;
 800cc7e:	4b55      	ldr	r3, [pc, #340]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a56      	ldr	r2, [pc, #344]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc84:	2100      	movs	r1, #0
 800cc86:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-1] = 0;
 800cc88:	4b52      	ldr	r3, [pc, #328]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	4a53      	ldr	r2, [pc, #332]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc90:	2100      	movs	r1, #0
 800cc92:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-2] = 0;
 800cc94:	4b4f      	ldr	r3, [pc, #316]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3b02      	subs	r3, #2
 800cc9a:	4a50      	ldr	r2, [pc, #320]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-3] = 0;
 800cca0:	4b4c      	ldr	r3, [pc, #304]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3b03      	subs	r3, #3
 800cca6:	4a4d      	ldr	r2, [pc, #308]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cca8:	2100      	movs	r1, #0
 800ccaa:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-4] = 0;
 800ccac:	4b49      	ldr	r3, [pc, #292]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3b04      	subs	r3, #4
 800ccb2:	4a4a      	ldr	r2, [pc, #296]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	54d1      	strb	r1, [r2, r3]
							uart2_temp[j-5] = 0;
 800ccb8:	4b46      	ldr	r3, [pc, #280]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	3b05      	subs	r3, #5
 800ccbe:	4a47      	ldr	r2, [pc, #284]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	54d1      	strb	r1, [r2, r3]
							j=j-5;
 800ccc4:	4b43      	ldr	r3, [pc, #268]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3b05      	subs	r3, #5
 800ccca:	4a42      	ldr	r2, [pc, #264]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cccc:	6013      	str	r3, [r2, #0]
							char *token = strtok(uart2_temp, "?");
 800ccce:	4949      	ldr	r1, [pc, #292]	; (800cdf4 <HAL_UART_RxCpltCallback+0x2a8>)
 800ccd0:	4842      	ldr	r0, [pc, #264]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800ccd2:	f00f fbd3 	bl	801c47c <strtok>
 800ccd6:	6278      	str	r0, [r7, #36]	; 0x24
							token = strtok(NULL, ":");
 800ccd8:	4947      	ldr	r1, [pc, #284]	; (800cdf8 <HAL_UART_RxCpltCallback+0x2ac>)
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f00f fbce 	bl	801c47c <strtok>
 800cce0:	6278      	str	r0, [r7, #36]	; 0x24
							token = strtok(NULL, ",");
 800cce2:	4946      	ldr	r1, [pc, #280]	; (800cdfc <HAL_UART_RxCpltCallback+0x2b0>)
 800cce4:	2000      	movs	r0, #0
 800cce6:	f00f fbc9 	bl	801c47c <strtok>
 800ccea:	6278      	str	r0, [r7, #36]	; 0x24
							strcpy(networkstr,token);
 800ccec:	4b44      	ldr	r3, [pc, #272]	; (800ce00 <HAL_UART_RxCpltCallback+0x2b4>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f00f fba3 	bl	801c43e <strcpy>
							strcpy(temp_data2,token);
 800ccf8:	4b42      	ldr	r3, [pc, #264]	; (800ce04 <HAL_UART_RxCpltCallback+0x2b8>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f00f fb9d 	bl	801c43e <strcpy>
							printf("net: %s\n",networkstr);
 800cd04:	4b3e      	ldr	r3, [pc, #248]	; (800ce00 <HAL_UART_RxCpltCallback+0x2b4>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	483f      	ldr	r0, [pc, #252]	; (800ce08 <HAL_UART_RxCpltCallback+0x2bc>)
 800cd0c:	f00f faca 	bl	801c2a4 <iprintf>

							if(j<82 && j>60){
 800cd10:	4b30      	ldr	r3, [pc, #192]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b51      	cmp	r3, #81	; 0x51
 800cd16:	dc1e      	bgt.n	800cd56 <HAL_UART_RxCpltCallback+0x20a>
 800cd18:	4b2e      	ldr	r3, [pc, #184]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b3c      	cmp	r3, #60	; 0x3c
 800cd1e:	dd1a      	ble.n	800cd56 <HAL_UART_RxCpltCallback+0x20a>
								for(int y=0;y<6;y++){
 800cd20:	2300      	movs	r3, #0
 800cd22:	623b      	str	r3, [r7, #32]
 800cd24:	e007      	b.n	800cd36 <HAL_UART_RxCpltCallback+0x1ea>
									token = strtok(NULL, ",");
 800cd26:	4935      	ldr	r1, [pc, #212]	; (800cdfc <HAL_UART_RxCpltCallback+0x2b0>)
 800cd28:	2000      	movs	r0, #0
 800cd2a:	f00f fba7 	bl	801c47c <strtok>
 800cd2e:	6278      	str	r0, [r7, #36]	; 0x24
								for(int y=0;y<6;y++){
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	3301      	adds	r3, #1
 800cd34:	623b      	str	r3, [r7, #32]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	2b05      	cmp	r3, #5
 800cd3a:	ddf4      	ble.n	800cd26 <HAL_UART_RxCpltCallback+0x1da>
	//								printf(" %s ",token);
								}
								signal = atoi(token);
 800cd3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd3e:	f00e fd4d 	bl	801b7dc <atoi>
 800cd42:	4603      	mov	r3, r0
 800cd44:	4a31      	ldr	r2, [pc, #196]	; (800ce0c <HAL_UART_RxCpltCallback+0x2c0>)
 800cd46:	6013      	str	r3, [r2, #0]
								printf("sig: %d\n",signal);
 800cd48:	4b30      	ldr	r3, [pc, #192]	; (800ce0c <HAL_UART_RxCpltCallback+0x2c0>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4830      	ldr	r0, [pc, #192]	; (800ce10 <HAL_UART_RxCpltCallback+0x2c4>)
 800cd50:	f00f faa8 	bl	801c2a4 <iprintf>
 800cd54:	e019      	b.n	800cd8a <HAL_UART_RxCpltCallback+0x23e>
							}
							else {
								for(int y=0;y<11;y++){
 800cd56:	2300      	movs	r3, #0
 800cd58:	61fb      	str	r3, [r7, #28]
 800cd5a:	e007      	b.n	800cd6c <HAL_UART_RxCpltCallback+0x220>
									token = strtok(NULL, ",");
 800cd5c:	4927      	ldr	r1, [pc, #156]	; (800cdfc <HAL_UART_RxCpltCallback+0x2b0>)
 800cd5e:	2000      	movs	r0, #0
 800cd60:	f00f fb8c 	bl	801c47c <strtok>
 800cd64:	6278      	str	r0, [r7, #36]	; 0x24
								for(int y=0;y<11;y++){
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	61fb      	str	r3, [r7, #28]
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2b0a      	cmp	r3, #10
 800cd70:	ddf4      	ble.n	800cd5c <HAL_UART_RxCpltCallback+0x210>
	//								printf(" %s ",token);
								}
								signal = atoi(token);
 800cd72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd74:	f00e fd32 	bl	801b7dc <atoi>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	4a24      	ldr	r2, [pc, #144]	; (800ce0c <HAL_UART_RxCpltCallback+0x2c0>)
 800cd7c:	6013      	str	r3, [r2, #0]
								printf("sig: %d\n",signal);
 800cd7e:	4b23      	ldr	r3, [pc, #140]	; (800ce0c <HAL_UART_RxCpltCallback+0x2c0>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4619      	mov	r1, r3
 800cd84:	4822      	ldr	r0, [pc, #136]	; (800ce10 <HAL_UART_RxCpltCallback+0x2c4>)
 800cd86:	f00f fa8d 	bl	801c2a4 <iprintf>
							}
							memset(uart2_at,0,20);
 800cd8a:	2214      	movs	r2, #20
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4818      	ldr	r0, [pc, #96]	; (800cdf0 <HAL_UART_RxCpltCallback+0x2a4>)
 800cd90:	f00e fd6c 	bl	801b86c <memset>
						}
						memcpy(buffer2,uart2_temp,strlen(uart2_temp));
 800cd94:	4811      	ldr	r0, [pc, #68]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cd96:	f7f3 fa25 	bl	80001e4 <strlen>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	490f      	ldr	r1, [pc, #60]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cda0:	481c      	ldr	r0, [pc, #112]	; (800ce14 <HAL_UART_RxCpltCallback+0x2c8>)
 800cda2:	f00e fd55 	bl	801b850 <memcpy>
						memset(uart2_temp,0,1100);
 800cda6:	f240 424c 	movw	r2, #1100	; 0x44c
 800cdaa:	2100      	movs	r1, #0
 800cdac:	480b      	ldr	r0, [pc, #44]	; (800cddc <HAL_UART_RxCpltCallback+0x290>)
 800cdae:	f00e fd5d 	bl	801b86c <memset>
						j=0;
 800cdb2:	4b08      	ldr	r3, [pc, #32]	; (800cdd4 <HAL_UART_RxCpltCallback+0x288>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
				{
 800cdb8:	e27f      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
 800cdba:	bf00      	nop
 800cdbc:	20002fe0 	.word	0x20002fe0
 800cdc0:	20007220 	.word	0x20007220
 800cdc4:	200095d8 	.word	0x200095d8
 800cdc8:	20008a04 	.word	0x20008a04
 800cdcc:	200038e4 	.word	0x200038e4
 800cdd0:	0801f5a0 	.word	0x0801f5a0
 800cdd4:	20004288 	.word	0x20004288
 800cdd8:	20004284 	.word	0x20004284
 800cddc:	20006470 	.word	0x20006470
 800cde0:	0801fba0 	.word	0x0801fba0
 800cde4:	20003fe4 	.word	0x20003fe4
 800cde8:	2000b000 	.word	0x2000b000
 800cdec:	0801f358 	.word	0x0801f358
 800cdf0:	20003fd0 	.word	0x20003fd0
 800cdf4:	0801fba4 	.word	0x0801fba4
 800cdf8:	0801ef40 	.word	0x0801ef40
 800cdfc:	0801ef3c 	.word	0x0801ef3c
 800ce00:	20005314 	.word	0x20005314
 800ce04:	200089fc 	.word	0x200089fc
 800ce08:	0801fba8 	.word	0x0801fba8
 800ce0c:	0801e8cd 	.word	0x0801e8cd
 800ce10:	0801fbb4 	.word	0x0801fbb4
 800ce14:	20006d80 	.word	0x20006d80
				}
				else if(uart2_temp[j] == '>')
 800ce18:	4b96      	ldr	r3, [pc, #600]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a96      	ldr	r2, [pc, #600]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce1e:	5cd3      	ldrb	r3, [r2, r3]
 800ce20:	2b3e      	cmp	r3, #62	; 0x3e
 800ce22:	d11d      	bne.n	800ce60 <HAL_UART_RxCpltCallback+0x314>
				{
					HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0x3ff);
 800ce24:	4894      	ldr	r0, [pc, #592]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce26:	f7f3 f9dd 	bl	80001e4 <strlen>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ce32:	4991      	ldr	r1, [pc, #580]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce34:	4891      	ldr	r0, [pc, #580]	; (800d07c <HAL_UART_RxCpltCallback+0x530>)
 800ce36:	f007 fab1 	bl	801439c <HAL_UART_Transmit>
					printf("\r\n");
 800ce3a:	4891      	ldr	r0, [pc, #580]	; (800d080 <HAL_UART_RxCpltCallback+0x534>)
 800ce3c:	f00f fab8 	bl	801c3b0 <puts>
					uart2done = true;
 800ce40:	4b90      	ldr	r3, [pc, #576]	; (800d084 <HAL_UART_RxCpltCallback+0x538>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	701a      	strb	r2, [r3, #0]
					uart2busy = false;
 800ce46:	4b90      	ldr	r3, [pc, #576]	; (800d088 <HAL_UART_RxCpltCallback+0x53c>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
					memset(uart2_temp,0,1100);
 800ce4c:	f240 424c 	movw	r2, #1100	; 0x44c
 800ce50:	2100      	movs	r1, #0
 800ce52:	4889      	ldr	r0, [pc, #548]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce54:	f00e fd0a 	bl	801b86c <memset>
//					memset(mydata,0,1100);
					j=0;
 800ce58:	4b86      	ldr	r3, [pc, #536]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e22c      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
				}
				else if(uart2_temp[j] == '}')
 800ce60:	4b84      	ldr	r3, [pc, #528]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a84      	ldr	r2, [pc, #528]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce66:	5cd3      	ldrb	r3, [r2, r3]
 800ce68:	2b7d      	cmp	r3, #125	; 0x7d
 800ce6a:	f040 812d 	bne.w	800d0c8 <HAL_UART_RxCpltCallback+0x57c>
				{
					printf("%s\r\n",uart2_temp);
 800ce6e:	4982      	ldr	r1, [pc, #520]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce70:	4886      	ldr	r0, [pc, #536]	; (800d08c <HAL_UART_RxCpltCallback+0x540>)
 800ce72:	f00f fa17 	bl	801c2a4 <iprintf>
					if(j>59){
 800ce76:	4b7f      	ldr	r3, [pc, #508]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b3b      	cmp	r3, #59	; 0x3b
 800ce7c:	f340 80ea 	ble.w	800d054 <HAL_UART_RxCpltCallback+0x508>
						if(uart2_temp[j-60] == 'C' && uart2_temp[j-59] == 'o' && uart2_temp[j-58] == 'n' && uart2_temp[j-57] == 'f' && uart2_temp[j-56] == 'i' && uart2_temp[j-55] == 'g')
 800ce80:	4b7c      	ldr	r3, [pc, #496]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	3b3c      	subs	r3, #60	; 0x3c
 800ce86:	4a7c      	ldr	r2, [pc, #496]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce88:	5cd3      	ldrb	r3, [r2, r3]
 800ce8a:	2b43      	cmp	r3, #67	; 0x43
 800ce8c:	f040 80cd 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
 800ce90:	4b78      	ldr	r3, [pc, #480]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3b3b      	subs	r3, #59	; 0x3b
 800ce96:	4a78      	ldr	r2, [pc, #480]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ce98:	5cd3      	ldrb	r3, [r2, r3]
 800ce9a:	2b6f      	cmp	r3, #111	; 0x6f
 800ce9c:	f040 80c5 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
 800cea0:	4b74      	ldr	r3, [pc, #464]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3b3a      	subs	r3, #58	; 0x3a
 800cea6:	4a74      	ldr	r2, [pc, #464]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800cea8:	5cd3      	ldrb	r3, [r2, r3]
 800ceaa:	2b6e      	cmp	r3, #110	; 0x6e
 800ceac:	f040 80bd 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
 800ceb0:	4b70      	ldr	r3, [pc, #448]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	3b39      	subs	r3, #57	; 0x39
 800ceb6:	4a70      	ldr	r2, [pc, #448]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ceb8:	5cd3      	ldrb	r3, [r2, r3]
 800ceba:	2b66      	cmp	r3, #102	; 0x66
 800cebc:	f040 80b5 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
 800cec0:	4b6c      	ldr	r3, [pc, #432]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3b38      	subs	r3, #56	; 0x38
 800cec6:	4a6c      	ldr	r2, [pc, #432]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800cec8:	5cd3      	ldrb	r3, [r2, r3]
 800ceca:	2b69      	cmp	r3, #105	; 0x69
 800cecc:	f040 80ad 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
 800ced0:	4b68      	ldr	r3, [pc, #416]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3b37      	subs	r3, #55	; 0x37
 800ced6:	4a68      	ldr	r2, [pc, #416]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ced8:	5cd3      	ldrb	r3, [r2, r3]
 800ceda:	2b67      	cmp	r3, #103	; 0x67
 800cedc:	f040 80a5 	bne.w	800d02a <HAL_UART_RxCpltCallback+0x4de>
						{
							printf("New Configuration Received\n");
 800cee0:	486b      	ldr	r0, [pc, #428]	; (800d090 <HAL_UART_RxCpltCallback+0x544>)
 800cee2:	f00f fa65 	bl	801c3b0 <puts>
							char *token = strtok(uart2_temp, ":");
 800cee6:	496b      	ldr	r1, [pc, #428]	; (800d094 <HAL_UART_RxCpltCallback+0x548>)
 800cee8:	4863      	ldr	r0, [pc, #396]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800ceea:	f00f fac7 	bl	801c47c <strtok>
 800ceee:	61b8      	str	r0, [r7, #24]
							token = strtok(NULL, "=");
 800cef0:	4969      	ldr	r1, [pc, #420]	; (800d098 <HAL_UART_RxCpltCallback+0x54c>)
 800cef2:	2000      	movs	r0, #0
 800cef4:	f00f fac2 	bl	801c47c <strtok>
 800cef8:	61b8      	str	r0, [r7, #24]
							token = strtok(NULL, ";");
 800cefa:	4968      	ldr	r1, [pc, #416]	; (800d09c <HAL_UART_RxCpltCallback+0x550>)
 800cefc:	2000      	movs	r0, #0
 800cefe:	f00f fabd 	bl	801c47c <strtok>
 800cf02:	61b8      	str	r0, [r7, #24]
							char *snMeterSub = token;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	617b      	str	r3, [r7, #20]
							int strint = strcmp(snMeter,snMeterSub);
 800cf08:	4b65      	ldr	r3, [pc, #404]	; (800d0a0 <HAL_UART_RxCpltCallback+0x554>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6979      	ldr	r1, [r7, #20]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7f3 f95e 	bl	80001d0 <strcmp>
 800cf14:	6138      	str	r0, [r7, #16]
							if(strint == 0){
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f040 809a 	bne.w	800d052 <HAL_UART_RxCpltCallback+0x506>
								token = strtok(NULL, "=");
 800cf1e:	495e      	ldr	r1, [pc, #376]	; (800d098 <HAL_UART_RxCpltCallback+0x54c>)
 800cf20:	2000      	movs	r0, #0
 800cf22:	f00f faab 	bl	801c47c <strtok>
 800cf26:	61b8      	str	r0, [r7, #24]
								token = strtok(NULL, ":");
 800cf28:	495a      	ldr	r1, [pc, #360]	; (800d094 <HAL_UART_RxCpltCallback+0x548>)
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	f00f faa6 	bl	801c47c <strtok>
 800cf30:	61b8      	str	r0, [r7, #24]
								instant_hour = atoi(token);
 800cf32:	69b8      	ldr	r0, [r7, #24]
 800cf34:	f00e fc52 	bl	801b7dc <atoi>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	4b59      	ldr	r3, [pc, #356]	; (800d0a4 <HAL_UART_RxCpltCallback+0x558>)
 800cf3e:	701a      	strb	r2, [r3, #0]
								token = strtok(NULL, ";");
 800cf40:	4956      	ldr	r1, [pc, #344]	; (800d09c <HAL_UART_RxCpltCallback+0x550>)
 800cf42:	2000      	movs	r0, #0
 800cf44:	f00f fa9a 	bl	801c47c <strtok>
 800cf48:	61b8      	str	r0, [r7, #24]
								instant_minute = atoi(token);
 800cf4a:	69b8      	ldr	r0, [r7, #24]
 800cf4c:	f00e fc46 	bl	801b7dc <atoi>
 800cf50:	4603      	mov	r3, r0
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	4b54      	ldr	r3, [pc, #336]	; (800d0a8 <HAL_UART_RxCpltCallback+0x55c>)
 800cf56:	701a      	strb	r2, [r3, #0]
								token = strtok(NULL, "=");
 800cf58:	494f      	ldr	r1, [pc, #316]	; (800d098 <HAL_UART_RxCpltCallback+0x54c>)
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	f00f fa8e 	bl	801c47c <strtok>
 800cf60:	61b8      	str	r0, [r7, #24]
	//							token = strtok(NULL, ":");
	//							lp_hour = atoi(token);
								token = strtok(NULL, ";");
 800cf62:	494e      	ldr	r1, [pc, #312]	; (800d09c <HAL_UART_RxCpltCallback+0x550>)
 800cf64:	2000      	movs	r0, #0
 800cf66:	f00f fa89 	bl	801c47c <strtok>
 800cf6a:	61b8      	str	r0, [r7, #24]
								lp_rec = atol(token);
 800cf6c:	69b8      	ldr	r0, [r7, #24]
 800cf6e:	f00e fc39 	bl	801b7e4 <atol>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4a4d      	ldr	r2, [pc, #308]	; (800d0ac <HAL_UART_RxCpltCallback+0x560>)
 800cf76:	6013      	str	r3, [r2, #0]
								token = strtok(NULL, "=");
 800cf78:	4947      	ldr	r1, [pc, #284]	; (800d098 <HAL_UART_RxCpltCallback+0x54c>)
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	f00f fa7e 	bl	801c47c <strtok>
 800cf80:	61b8      	str	r0, [r7, #24]
							//					printf("%s\n",token);
								token = strtok(NULL, "-");
 800cf82:	494b      	ldr	r1, [pc, #300]	; (800d0b0 <HAL_UART_RxCpltCallback+0x564>)
 800cf84:	2000      	movs	r0, #0
 800cf86:	f00f fa79 	bl	801c47c <strtok>
 800cf8a:	61b8      	str	r0, [r7, #24]
								eob_date = atoi(token);
 800cf8c:	69b8      	ldr	r0, [r7, #24]
 800cf8e:	f00e fc25 	bl	801b7dc <atoi>
 800cf92:	4603      	mov	r3, r0
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	4b47      	ldr	r3, [pc, #284]	; (800d0b4 <HAL_UART_RxCpltCallback+0x568>)
 800cf98:	701a      	strb	r2, [r3, #0]
								if(eob_date!=0){
 800cf9a:	4b46      	ldr	r3, [pc, #280]	; (800d0b4 <HAL_UART_RxCpltCallback+0x568>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d018      	beq.n	800cfd4 <HAL_UART_RxCpltCallback+0x488>
									token = strtok(NULL, ":");
 800cfa2:	493c      	ldr	r1, [pc, #240]	; (800d094 <HAL_UART_RxCpltCallback+0x548>)
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f00f fa69 	bl	801c47c <strtok>
 800cfaa:	61b8      	str	r0, [r7, #24]
									eob_hour = atoi(token);
 800cfac:	69b8      	ldr	r0, [r7, #24]
 800cfae:	f00e fc15 	bl	801b7dc <atoi>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	4b40      	ldr	r3, [pc, #256]	; (800d0b8 <HAL_UART_RxCpltCallback+0x56c>)
 800cfb8:	701a      	strb	r2, [r3, #0]
									token = strtok(NULL, "}");
 800cfba:	4940      	ldr	r1, [pc, #256]	; (800d0bc <HAL_UART_RxCpltCallback+0x570>)
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	f00f fa5d 	bl	801c47c <strtok>
 800cfc2:	61b8      	str	r0, [r7, #24]
									eob_minute = atoi(token);
 800cfc4:	69b8      	ldr	r0, [r7, #24]
 800cfc6:	f00e fc09 	bl	801b7dc <atoi>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	4b3c      	ldr	r3, [pc, #240]	; (800d0c0 <HAL_UART_RxCpltCallback+0x574>)
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e002      	b.n	800cfda <HAL_UART_RxCpltCallback+0x48e>
								}
								else eob_date =0;
 800cfd4:	4b37      	ldr	r3, [pc, #220]	; (800d0b4 <HAL_UART_RxCpltCallback+0x568>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	701a      	strb	r2, [r3, #0]
								printf("%d:%d %d %d-%d:%d\n",instant_hour, instant_minute, lp_rec, eob_date, eob_hour,eob_minute);
 800cfda:	4b32      	ldr	r3, [pc, #200]	; (800d0a4 <HAL_UART_RxCpltCallback+0x558>)
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	461c      	mov	r4, r3
 800cfe0:	4b31      	ldr	r3, [pc, #196]	; (800d0a8 <HAL_UART_RxCpltCallback+0x55c>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	4b31      	ldr	r3, [pc, #196]	; (800d0ac <HAL_UART_RxCpltCallback+0x560>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a32      	ldr	r2, [pc, #200]	; (800d0b4 <HAL_UART_RxCpltCallback+0x568>)
 800cfec:	7812      	ldrb	r2, [r2, #0]
 800cfee:	4611      	mov	r1, r2
 800cff0:	4a31      	ldr	r2, [pc, #196]	; (800d0b8 <HAL_UART_RxCpltCallback+0x56c>)
 800cff2:	7812      	ldrb	r2, [r2, #0]
 800cff4:	4610      	mov	r0, r2
 800cff6:	4a32      	ldr	r2, [pc, #200]	; (800d0c0 <HAL_UART_RxCpltCallback+0x574>)
 800cff8:	7812      	ldrb	r2, [r2, #0]
 800cffa:	9202      	str	r2, [sp, #8]
 800cffc:	9001      	str	r0, [sp, #4]
 800cffe:	9100      	str	r1, [sp, #0]
 800d000:	462a      	mov	r2, r5
 800d002:	4621      	mov	r1, r4
 800d004:	482f      	ldr	r0, [pc, #188]	; (800d0c4 <HAL_UART_RxCpltCallback+0x578>)
 800d006:	f00f f94d 	bl	801c2a4 <iprintf>
								uart2done = true;
 800d00a:	4b1e      	ldr	r3, [pc, #120]	; (800d084 <HAL_UART_RxCpltCallback+0x538>)
 800d00c:	2201      	movs	r2, #1
 800d00e:	701a      	strb	r2, [r3, #0]
								uart2busy = false;
 800d010:	4b1d      	ldr	r3, [pc, #116]	; (800d088 <HAL_UART_RxCpltCallback+0x53c>)
 800d012:	2200      	movs	r2, #0
 800d014:	701a      	strb	r2, [r3, #0]
								memset(uart2_temp,0,1100);
 800d016:	f240 424c 	movw	r2, #1100	; 0x44c
 800d01a:	2100      	movs	r1, #0
 800d01c:	4816      	ldr	r0, [pc, #88]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800d01e:	f00e fc25 	bl	801b86c <memset>
								j=0;
 800d022:	4b14      	ldr	r3, [pc, #80]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
						{
 800d028:	e013      	b.n	800d052 <HAL_UART_RxCpltCallback+0x506>
							}
						}
						else if(j>1099){
 800d02a:	4b12      	ldr	r3, [pc, #72]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f240 424b 	movw	r2, #1099	; 0x44b
 800d032:	4293      	cmp	r3, r2
 800d034:	dd0e      	ble.n	800d054 <HAL_UART_RxCpltCallback+0x508>
							printf("%s\r\n",uart2_temp);
 800d036:	4910      	ldr	r1, [pc, #64]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800d038:	4814      	ldr	r0, [pc, #80]	; (800d08c <HAL_UART_RxCpltCallback+0x540>)
 800d03a:	f00f f933 	bl	801c2a4 <iprintf>
							memset(uart2_temp,0,1100);
 800d03e:	f240 424c 	movw	r2, #1100	; 0x44c
 800d042:	2100      	movs	r1, #0
 800d044:	480c      	ldr	r0, [pc, #48]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800d046:	f00e fc11 	bl	801b86c <memset>
							j=0;
 800d04a:	4b0a      	ldr	r3, [pc, #40]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	e000      	b.n	800d054 <HAL_UART_RxCpltCallback+0x508>
						{
 800d052:	bf00      	nop
						}
//						else {
//							HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
//						}
					}
					uart2done = true;
 800d054:	4b0b      	ldr	r3, [pc, #44]	; (800d084 <HAL_UART_RxCpltCallback+0x538>)
 800d056:	2201      	movs	r2, #1
 800d058:	701a      	strb	r2, [r3, #0]
					uart2busy = false;
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <HAL_UART_RxCpltCallback+0x53c>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	701a      	strb	r2, [r3, #0]
					memset(uart2_temp,0,1100);
 800d060:	f240 424c 	movw	r2, #1100	; 0x44c
 800d064:	2100      	movs	r1, #0
 800d066:	4804      	ldr	r0, [pc, #16]	; (800d078 <HAL_UART_RxCpltCallback+0x52c>)
 800d068:	f00e fc00 	bl	801b86c <memset>
					j=0;
 800d06c:	4b01      	ldr	r3, [pc, #4]	; (800d074 <HAL_UART_RxCpltCallback+0x528>)
 800d06e:	2200      	movs	r2, #0
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	e122      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
 800d074:	20004288 	.word	0x20004288
 800d078:	20006470 	.word	0x20006470
 800d07c:	20002fe0 	.word	0x20002fe0
 800d080:	0801fba0 	.word	0x0801fba0
 800d084:	20003fe4 	.word	0x20003fe4
 800d088:	2000b000 	.word	0x2000b000
 800d08c:	0801f5a0 	.word	0x0801f5a0
 800d090:	0801fbc0 	.word	0x0801fbc0
 800d094:	0801ef40 	.word	0x0801ef40
 800d098:	0801fbdc 	.word	0x0801fbdc
 800d09c:	0801fbe0 	.word	0x0801fbe0
 800d0a0:	20000188 	.word	0x20000188
 800d0a4:	20008180 	.word	0x20008180
 800d0a8:	200081b6 	.word	0x200081b6
 800d0ac:	20000644 	.word	0x20000644
 800d0b0:	0801fbe4 	.word	0x0801fbe4
 800d0b4:	200089f4 	.word	0x200089f4
 800d0b8:	200081b7 	.word	0x200081b7
 800d0bc:	0801fbe8 	.word	0x0801fbe8
 800d0c0:	20008188 	.word	0x20008188
 800d0c4:	0801fbec 	.word	0x0801fbec

				}
				/* Receive Network Time Protocol and Sync RTC Time with NTP */
				else if(j>29){
 800d0c8:	4b99      	ldr	r3, [pc, #612]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b1d      	cmp	r3, #29
 800d0ce:	f340 809e 	ble.w	800d20e <HAL_UART_RxCpltCallback+0x6c2>
					if(uart2_temp[j-29] == 'C' && uart2_temp[j-28] == 'N' && uart2_temp[j-27] == 'T' && uart2_temp[j-26] == 'P' && uart2_temp[j-25] == ':'  && uart2_temp[j-23] == '1')
 800d0d2:	4b97      	ldr	r3, [pc, #604]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3b1d      	subs	r3, #29
 800d0d8:	4a96      	ldr	r2, [pc, #600]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d0da:	5cd3      	ldrb	r3, [r2, r3]
 800d0dc:	2b43      	cmp	r3, #67	; 0x43
 800d0de:	d13d      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
 800d0e0:	4b93      	ldr	r3, [pc, #588]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3b1c      	subs	r3, #28
 800d0e6:	4a93      	ldr	r2, [pc, #588]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d0e8:	5cd3      	ldrb	r3, [r2, r3]
 800d0ea:	2b4e      	cmp	r3, #78	; 0x4e
 800d0ec:	d136      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
 800d0ee:	4b90      	ldr	r3, [pc, #576]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3b1b      	subs	r3, #27
 800d0f4:	4a8f      	ldr	r2, [pc, #572]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d0f6:	5cd3      	ldrb	r3, [r2, r3]
 800d0f8:	2b54      	cmp	r3, #84	; 0x54
 800d0fa:	d12f      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
 800d0fc:	4b8c      	ldr	r3, [pc, #560]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3b1a      	subs	r3, #26
 800d102:	4a8c      	ldr	r2, [pc, #560]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d104:	5cd3      	ldrb	r3, [r2, r3]
 800d106:	2b50      	cmp	r3, #80	; 0x50
 800d108:	d128      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
 800d10a:	4b89      	ldr	r3, [pc, #548]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3b19      	subs	r3, #25
 800d110:	4a88      	ldr	r2, [pc, #544]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d112:	5cd3      	ldrb	r3, [r2, r3]
 800d114:	2b3a      	cmp	r3, #58	; 0x3a
 800d116:	d121      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
 800d118:	4b85      	ldr	r3, [pc, #532]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3b17      	subs	r3, #23
 800d11e:	4a85      	ldr	r2, [pc, #532]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d120:	5cd3      	ldrb	r3, [r2, r3]
 800d122:	2b31      	cmp	r3, #49	; 0x31
 800d124:	d11a      	bne.n	800d15c <HAL_UART_RxCpltCallback+0x610>
						{
						cntpok=2; // cntp berhasil
 800d126:	4b84      	ldr	r3, [pc, #528]	; (800d338 <HAL_UART_RxCpltCallback+0x7ec>)
 800d128:	2202      	movs	r2, #2
 800d12a:	601a      	str	r2, [r3, #0]
							printf("insert rtc date\n");
 800d12c:	4883      	ldr	r0, [pc, #524]	; (800d33c <HAL_UART_RxCpltCallback+0x7f0>)
 800d12e:	f00f f93f 	bl	801c3b0 <puts>
							printf("%s\n", uart2_temp);
 800d132:	4880      	ldr	r0, [pc, #512]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d134:	f00f f93c 	bl	801c3b0 <puts>
							set_rtc_time(uart2_temp);
 800d138:	487e      	ldr	r0, [pc, #504]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d13a:	f7fa fd51 	bl	8007be0 <set_rtc_time>
							uart2done = true;
 800d13e:	4b80      	ldr	r3, [pc, #512]	; (800d340 <HAL_UART_RxCpltCallback+0x7f4>)
 800d140:	2201      	movs	r2, #1
 800d142:	701a      	strb	r2, [r3, #0]
							uart2busy = false;
 800d144:	4b7f      	ldr	r3, [pc, #508]	; (800d344 <HAL_UART_RxCpltCallback+0x7f8>)
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
							memset(uart2_temp,0,1100);
 800d14a:	f240 424c 	movw	r2, #1100	; 0x44c
 800d14e:	2100      	movs	r1, #0
 800d150:	4878      	ldr	r0, [pc, #480]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d152:	f00e fb8b 	bl	801b86c <memset>
							j=0;
 800d156:	4b76      	ldr	r3, [pc, #472]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
						}
					if(uart2_temp[j-28] == 'C' && uart2_temp[j-27] == 'C' && uart2_temp[j-26] == 'L' && uart2_temp[j-25] == 'K' && uart2_temp[j-24] == ':')
 800d15c:	4b74      	ldr	r3, [pc, #464]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	3b1c      	subs	r3, #28
 800d162:	4a74      	ldr	r2, [pc, #464]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d164:	5cd3      	ldrb	r3, [r2, r3]
 800d166:	2b43      	cmp	r3, #67	; 0x43
 800d168:	d137      	bne.n	800d1da <HAL_UART_RxCpltCallback+0x68e>
 800d16a:	4b71      	ldr	r3, [pc, #452]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3b1b      	subs	r3, #27
 800d170:	4a70      	ldr	r2, [pc, #448]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d172:	5cd3      	ldrb	r3, [r2, r3]
 800d174:	2b43      	cmp	r3, #67	; 0x43
 800d176:	d130      	bne.n	800d1da <HAL_UART_RxCpltCallback+0x68e>
 800d178:	4b6d      	ldr	r3, [pc, #436]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	3b1a      	subs	r3, #26
 800d17e:	4a6d      	ldr	r2, [pc, #436]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d180:	5cd3      	ldrb	r3, [r2, r3]
 800d182:	2b4c      	cmp	r3, #76	; 0x4c
 800d184:	d129      	bne.n	800d1da <HAL_UART_RxCpltCallback+0x68e>
 800d186:	4b6a      	ldr	r3, [pc, #424]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	3b19      	subs	r3, #25
 800d18c:	4a69      	ldr	r2, [pc, #420]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d18e:	5cd3      	ldrb	r3, [r2, r3]
 800d190:	2b4b      	cmp	r3, #75	; 0x4b
 800d192:	d122      	bne.n	800d1da <HAL_UART_RxCpltCallback+0x68e>
 800d194:	4b66      	ldr	r3, [pc, #408]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3b18      	subs	r3, #24
 800d19a:	4a66      	ldr	r2, [pc, #408]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d19c:	5cd3      	ldrb	r3, [r2, r3]
 800d19e:	2b3a      	cmp	r3, #58	; 0x3a
 800d1a0:	d11b      	bne.n	800d1da <HAL_UART_RxCpltCallback+0x68e>
						{
							cntpok=2; // cntp berhasil
 800d1a2:	4b65      	ldr	r3, [pc, #404]	; (800d338 <HAL_UART_RxCpltCallback+0x7ec>)
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	601a      	str	r2, [r3, #0]
							printf("insert rtc date CCLK\r\n");
 800d1a8:	4867      	ldr	r0, [pc, #412]	; (800d348 <HAL_UART_RxCpltCallback+0x7fc>)
 800d1aa:	f00f f901 	bl	801c3b0 <puts>
							printf("%s\n", uart2_temp);
 800d1ae:	4861      	ldr	r0, [pc, #388]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d1b0:	f00f f8fe 	bl	801c3b0 <puts>
							set_rtc_time_cclk(uart2_temp);
 800d1b4:	485f      	ldr	r0, [pc, #380]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d1b6:	f7fa fdf1 	bl	8007d9c <set_rtc_time_cclk>
							uart2done = true;
 800d1ba:	4b61      	ldr	r3, [pc, #388]	; (800d340 <HAL_UART_RxCpltCallback+0x7f4>)
 800d1bc:	2201      	movs	r2, #1
 800d1be:	701a      	strb	r2, [r3, #0]
							uart2busy = false;
 800d1c0:	4b60      	ldr	r3, [pc, #384]	; (800d344 <HAL_UART_RxCpltCallback+0x7f8>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	701a      	strb	r2, [r3, #0]
							memset(uart2_temp,0,1100);
 800d1c6:	f240 424c 	movw	r2, #1100	; 0x44c
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	4859      	ldr	r0, [pc, #356]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d1ce:	f00e fb4d 	bl	801b86c <memset>
							j=0;
 800d1d2:	4b57      	ldr	r3, [pc, #348]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	e06f      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
						}
					else if(j>1099){
 800d1da:	4b55      	ldr	r3, [pc, #340]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f240 424b 	movw	r2, #1099	; 0x44b
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	dd0d      	ble.n	800d202 <HAL_UART_RxCpltCallback+0x6b6>
						printf("%s\r\n",uart2_temp);
 800d1e6:	4953      	ldr	r1, [pc, #332]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d1e8:	4858      	ldr	r0, [pc, #352]	; (800d34c <HAL_UART_RxCpltCallback+0x800>)
 800d1ea:	f00f f85b 	bl	801c2a4 <iprintf>
						memset(uart2_temp,0,1100);
 800d1ee:	f240 424c 	movw	r2, #1100	; 0x44c
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	484f      	ldr	r0, [pc, #316]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d1f6:	f00e fb39 	bl	801b86c <memset>
						j=0;
 800d1fa:	4b4d      	ldr	r3, [pc, #308]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	e05b      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
					}
					else
						j++;
 800d202:	4b4b      	ldr	r3, [pc, #300]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3301      	adds	r3, #1
 800d208:	4a49      	ldr	r2, [pc, #292]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e055      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
				}
				else if(j>1099){
 800d20e:	4b48      	ldr	r3, [pc, #288]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f240 424b 	movw	r2, #1099	; 0x44b
 800d216:	4293      	cmp	r3, r2
 800d218:	dd0d      	ble.n	800d236 <HAL_UART_RxCpltCallback+0x6ea>
					printf("%s\r\n",uart2_temp);
 800d21a:	4946      	ldr	r1, [pc, #280]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d21c:	484b      	ldr	r0, [pc, #300]	; (800d34c <HAL_UART_RxCpltCallback+0x800>)
 800d21e:	f00f f841 	bl	801c2a4 <iprintf>
					memset(uart2_temp,0,1100);
 800d222:	f240 424c 	movw	r2, #1100	; 0x44c
 800d226:	2100      	movs	r1, #0
 800d228:	4842      	ldr	r0, [pc, #264]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d22a:	f00e fb1f 	bl	801b86c <memset>
					j=0;
 800d22e:	4b40      	ldr	r3, [pc, #256]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	e041      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
				}
				else
					j++;
 800d236:	4b3e      	ldr	r3, [pc, #248]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3301      	adds	r3, #1
 800d23c:	4a3c      	ldr	r2, [pc, #240]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	e03b      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
//				HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
			}
			else if(uart2_temp[j] == '>')
 800d242:	4b3b      	ldr	r3, [pc, #236]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a3b      	ldr	r2, [pc, #236]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d248:	5cd3      	ldrb	r3, [r2, r3]
 800d24a:	2b3e      	cmp	r3, #62	; 0x3e
 800d24c:	d11c      	bne.n	800d288 <HAL_UART_RxCpltCallback+0x73c>
			{
				HAL_UART_Transmit(&huart1, (uint8_t *)uart2_temp, strlen(uart2_temp),0xff);
 800d24e:	4839      	ldr	r0, [pc, #228]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d250:	f7f2 ffc8 	bl	80001e4 <strlen>
 800d254:	4603      	mov	r3, r0
 800d256:	b29a      	uxth	r2, r3
 800d258:	23ff      	movs	r3, #255	; 0xff
 800d25a:	4936      	ldr	r1, [pc, #216]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d25c:	483c      	ldr	r0, [pc, #240]	; (800d350 <HAL_UART_RxCpltCallback+0x804>)
 800d25e:	f007 f89d 	bl	801439c <HAL_UART_Transmit>
				printf("\r\n");
 800d262:	483c      	ldr	r0, [pc, #240]	; (800d354 <HAL_UART_RxCpltCallback+0x808>)
 800d264:	f00f f8a4 	bl	801c3b0 <puts>
				uart2done = true;
 800d268:	4b35      	ldr	r3, [pc, #212]	; (800d340 <HAL_UART_RxCpltCallback+0x7f4>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	701a      	strb	r2, [r3, #0]
				uart2busy = false;
 800d26e:	4b35      	ldr	r3, [pc, #212]	; (800d344 <HAL_UART_RxCpltCallback+0x7f8>)
 800d270:	2200      	movs	r2, #0
 800d272:	701a      	strb	r2, [r3, #0]
				memset(uart2_temp,0,1100);
 800d274:	f240 424c 	movw	r2, #1100	; 0x44c
 800d278:	2100      	movs	r1, #0
 800d27a:	482e      	ldr	r0, [pc, #184]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d27c:	f00e faf6 	bl	801b86c <memset>
				j=0;
 800d280:	4b2b      	ldr	r3, [pc, #172]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	e018      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
			}
			else if(j>1099){
 800d288:	4b29      	ldr	r3, [pc, #164]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f240 424b 	movw	r2, #1099	; 0x44b
 800d290:	4293      	cmp	r3, r2
 800d292:	dd0d      	ble.n	800d2b0 <HAL_UART_RxCpltCallback+0x764>
				printf("%s\r\n",uart2_temp);
 800d294:	4927      	ldr	r1, [pc, #156]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d296:	482d      	ldr	r0, [pc, #180]	; (800d34c <HAL_UART_RxCpltCallback+0x800>)
 800d298:	f00f f804 	bl	801c2a4 <iprintf>
				memset(uart2_temp,0,1100);
 800d29c:	f240 424c 	movw	r2, #1100	; 0x44c
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	4824      	ldr	r0, [pc, #144]	; (800d334 <HAL_UART_RxCpltCallback+0x7e8>)
 800d2a4:	f00e fae2 	bl	801b86c <memset>
				j=0;
 800d2a8:	4b21      	ldr	r3, [pc, #132]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e004      	b.n	800d2ba <HAL_UART_RxCpltCallback+0x76e>
			}
			else
				j++;
 800d2b0:	4b1f      	ldr	r3, [pc, #124]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a1e      	ldr	r2, [pc, #120]	; (800d330 <HAL_UART_RxCpltCallback+0x7e4>)
 800d2b8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,(uint8_t *)uart2_buf,1);
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	4926      	ldr	r1, [pc, #152]	; (800d358 <HAL_UART_RxCpltCallback+0x80c>)
 800d2be:	4827      	ldr	r0, [pc, #156]	; (800d35c <HAL_UART_RxCpltCallback+0x810>)
 800d2c0:	f007 f900 	bl	80144c4 <HAL_UART_Receive_IT>
			osSignalSet( sendDataToServeHandle, BIT_1 | BIT_2);
 800d2c4:	4b26      	ldr	r3, [pc, #152]	; (800d360 <HAL_UART_RxCpltCallback+0x814>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2106      	movs	r1, #6
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f00b fc68 	bl	8018ba0 <osSignalSet>
		}
	if(huart == &huart3)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a24      	ldr	r2, [pc, #144]	; (800d364 <HAL_UART_RxCpltCallback+0x818>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d17e      	bne.n	800d3d6 <HAL_UART_RxCpltCallback+0x88a>
	{
			uart3_temp[k]=uart3_buf[0]; //store byte in temp buffer
 800d2d8:	4b23      	ldr	r3, [pc, #140]	; (800d368 <HAL_UART_RxCpltCallback+0x81c>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a23      	ldr	r2, [pc, #140]	; (800d36c <HAL_UART_RxCpltCallback+0x820>)
 800d2de:	7811      	ldrb	r1, [r2, #0]
 800d2e0:	4a23      	ldr	r2, [pc, #140]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d2e2:	54d1      	strb	r1, [r2, r3]
			if(uart3_temp[k] == 0x03){
 800d2e4:	4b20      	ldr	r3, [pc, #128]	; (800d368 <HAL_UART_RxCpltCallback+0x81c>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a21      	ldr	r2, [pc, #132]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d2ea:	5cd3      	ldrb	r3, [r2, r3]
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d145      	bne.n	800d37c <HAL_UART_RxCpltCallback+0x830>
//				printf("%d\r\n",datauart3size(uart3_temp));
				memcpy(buffer3, uart3_temp,datauart3size(uart3_temp));
 800d2f0:	481f      	ldr	r0, [pc, #124]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d2f2:	f7fb fbcf 	bl	8008a94 <datauart3size>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	491d      	ldr	r1, [pc, #116]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d2fc:	481d      	ldr	r0, [pc, #116]	; (800d374 <HAL_UART_RxCpltCallback+0x828>)
 800d2fe:	f00e faa7 	bl	801b850 <memcpy>
				HAL_UART_Transmit(&huart1,(uint8_t *)uart3_temp,datauart3size(uart3_temp),0xff);
 800d302:	481b      	ldr	r0, [pc, #108]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d304:	f7fb fbc6 	bl	8008a94 <datauart3size>
 800d308:	4603      	mov	r3, r0
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	23ff      	movs	r3, #255	; 0xff
 800d30e:	4918      	ldr	r1, [pc, #96]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d310:	480f      	ldr	r0, [pc, #60]	; (800d350 <HAL_UART_RxCpltCallback+0x804>)
 800d312:	f007 f843 	bl	801439c <HAL_UART_Transmit>
				memset(uart3_temp,0,1100);
 800d316:	f240 424c 	movw	r2, #1100	; 0x44c
 800d31a:	2100      	movs	r1, #0
 800d31c:	4814      	ldr	r0, [pc, #80]	; (800d370 <HAL_UART_RxCpltCallback+0x824>)
 800d31e:	f00e faa5 	bl	801b86c <memset>
				uart3done = true;
 800d322:	4b15      	ldr	r3, [pc, #84]	; (800d378 <HAL_UART_RxCpltCallback+0x82c>)
 800d324:	2201      	movs	r2, #1
 800d326:	701a      	strb	r2, [r3, #0]
				k=0;
 800d328:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <HAL_UART_RxCpltCallback+0x81c>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e047      	b.n	800d3c0 <HAL_UART_RxCpltCallback+0x874>
 800d330:	20004288 	.word	0x20004288
 800d334:	20006470 	.word	0x20006470
 800d338:	20000600 	.word	0x20000600
 800d33c:	0801fc00 	.word	0x0801fc00
 800d340:	20003fe4 	.word	0x20003fe4
 800d344:	2000b000 	.word	0x2000b000
 800d348:	0801fc10 	.word	0x0801fc10
 800d34c:	0801f5a0 	.word	0x0801f5a0
 800d350:	20002fe0 	.word	0x20002fe0
 800d354:	0801fba0 	.word	0x0801fba0
 800d358:	20004284 	.word	0x20004284
 800d35c:	200038e4 	.word	0x200038e4
 800d360:	20008184 	.word	0x20008184
 800d364:	20002770 	.word	0x20002770
 800d368:	20005318 	.word	0x20005318
 800d36c:	200089f8 	.word	0x200089f8
 800d370:	20005324 	.word	0x20005324
 800d374:	200095dc 	.word	0x200095dc
 800d378:	200042f8 	.word	0x200042f8
			}
			else if(k>1099){
 800d37c:	4b18      	ldr	r3, [pc, #96]	; (800d3e0 <HAL_UART_RxCpltCallback+0x894>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f240 424b 	movw	r2, #1099	; 0x44b
 800d384:	4293      	cmp	r3, r2
 800d386:	dd16      	ble.n	800d3b6 <HAL_UART_RxCpltCallback+0x86a>
				printf("%s\r\n",uart3_temp);
 800d388:	4916      	ldr	r1, [pc, #88]	; (800d3e4 <HAL_UART_RxCpltCallback+0x898>)
 800d38a:	4817      	ldr	r0, [pc, #92]	; (800d3e8 <HAL_UART_RxCpltCallback+0x89c>)
 800d38c:	f00e ff8a 	bl	801c2a4 <iprintf>
				memset(uart3_temp,0,1100);
 800d390:	f240 424c 	movw	r2, #1100	; 0x44c
 800d394:	2100      	movs	r1, #0
 800d396:	4813      	ldr	r0, [pc, #76]	; (800d3e4 <HAL_UART_RxCpltCallback+0x898>)
 800d398:	f00e fa68 	bl	801b86c <memset>
				memset(buffer3,0,1100);
 800d39c:	f240 424c 	movw	r2, #1100	; 0x44c
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4812      	ldr	r0, [pc, #72]	; (800d3ec <HAL_UART_RxCpltCallback+0x8a0>)
 800d3a4:	f00e fa62 	bl	801b86c <memset>
				uart3done = true;
 800d3a8:	4b11      	ldr	r3, [pc, #68]	; (800d3f0 <HAL_UART_RxCpltCallback+0x8a4>)
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	701a      	strb	r2, [r3, #0]
				k=0;
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <HAL_UART_RxCpltCallback+0x894>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e004      	b.n	800d3c0 <HAL_UART_RxCpltCallback+0x874>
			}
			else
				k++;
 800d3b6:	4b0a      	ldr	r3, [pc, #40]	; (800d3e0 <HAL_UART_RxCpltCallback+0x894>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	4a08      	ldr	r2, [pc, #32]	; (800d3e0 <HAL_UART_RxCpltCallback+0x894>)
 800d3be:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart3,(uint8_t *)uart3_buf,1);
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	490c      	ldr	r1, [pc, #48]	; (800d3f4 <HAL_UART_RxCpltCallback+0x8a8>)
 800d3c4:	480c      	ldr	r0, [pc, #48]	; (800d3f8 <HAL_UART_RxCpltCallback+0x8ac>)
 800d3c6:	f007 f87d 	bl	80144c4 <HAL_UART_Receive_IT>
			osSignalSet( readEoBHandle, BIT_1 | BIT_2);
 800d3ca:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <HAL_UART_RxCpltCallback+0x8b0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2106      	movs	r1, #6
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f00b fbe5 	bl	8018ba0 <osSignalSet>
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d3d6:	bf00      	nop
 800d3d8:	3728      	adds	r7, #40	; 0x28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20005318 	.word	0x20005318
 800d3e4:	20005324 	.word	0x20005324
 800d3e8:	0801f5a0 	.word	0x0801f5a0
 800d3ec:	200095dc 	.word	0x200095dc
 800d3f0:	200042f8 	.word	0x200042f8
 800d3f4:	200089f8 	.word	0x200089f8
 800d3f8:	20002770 	.word	0x20002770
 800d3fc:	2000af9c 	.word	0x2000af9c

0800d400 <main_program>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_main_program */
void main_program(void const * argument)
{
 800d400:	b590      	push	{r4, r7, lr}
 800d402:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 800d406:	af02      	add	r7, sp, #8
 800d408:	1d3b      	adds	r3, r7, #4
 800d40a:	6018      	str	r0, [r3, #0]
  FIL fil_t;
  FRESULT fresult_t;
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  /* Infinite loop */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d40c:	f107 031c 	add.w	r3, r7, #28
 800d410:	2200      	movs	r2, #0
 800d412:	4619      	mov	r1, r3
 800d414:	4860      	ldr	r0, [pc, #384]	; (800d598 <main_program+0x198>)
 800d416:	f005 fee4 	bl	80131e2 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	2200      	movs	r2, #0
 800d420:	4619      	mov	r1, r3
 800d422:	485d      	ldr	r0, [pc, #372]	; (800d598 <main_program+0x198>)
 800d424:	f005 fdfa 	bl	801301c <HAL_RTC_GetTime>
  st_hour = gTime.Hours;
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	781a      	ldrb	r2, [r3, #0]
 800d42e:	4b5b      	ldr	r3, [pc, #364]	; (800d59c <main_program+0x19c>)
 800d430:	701a      	strb	r2, [r3, #0]
  st_min = gTime.Minutes;
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	785a      	ldrb	r2, [r3, #1]
 800d438:	4b59      	ldr	r3, [pc, #356]	; (800d5a0 <main_program+0x1a0>)
 800d43a:	701a      	strb	r2, [r3, #0]
  st_sec = gTime.Seconds;
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	789a      	ldrb	r2, [r3, #2]
 800d442:	4b58      	ldr	r3, [pc, #352]	; (800d5a4 <main_program+0x1a4>)
 800d444:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  status = osDelay(SECOND);
 800d446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d44a:	f00b fb95 	bl	8018b78 <osDelay>
 800d44e:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	  if(status == osOK)
 800d452:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800d456:	2b00      	cmp	r3, #0
 800d458:	f040 808c 	bne.w	800d574 <main_program+0x174>
	  {
		  GPIOA->BRR |= 1<<15;
 800d45c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d462:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800d466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d46a:	6293      	str	r3, [r2, #40]	; 0x28
//		  sprintf((char*)tx_buffer, "Main Program\n");
//		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
		  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d46c:	4b4e      	ldr	r3, [pc, #312]	; (800d5a8 <main_program+0x1a8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f04f 31ff 	mov.w	r1, #4294967295
 800d474:	4618      	mov	r0, r3
 800d476:	f00b fc37 	bl	8018ce8 <osMutexWait>
 800d47a:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
		  if(status_mutex == osOK)
 800d47e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800d482:	2b00      	cmp	r3, #0
 800d484:	d176      	bne.n	800d574 <main_program+0x174>
		  {
					  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d486:	f107 031c 	add.w	r3, r7, #28
 800d48a:	2200      	movs	r2, #0
 800d48c:	4619      	mov	r1, r3
 800d48e:	4842      	ldr	r0, [pc, #264]	; (800d598 <main_program+0x198>)
 800d490:	f005 fea7 	bl	80131e2 <HAL_RTC_GetDate>
					  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d494:	f107 0308 	add.w	r3, r7, #8
 800d498:	2200      	movs	r2, #0
 800d49a:	4619      	mov	r1, r3
 800d49c:	483e      	ldr	r0, [pc, #248]	; (800d598 <main_program+0x198>)
 800d49e:	f005 fdbd 	bl	801301c <HAL_RTC_GetTime>
//					  if(gTime.Minutes > st_min + 3) hard_reset_rtos();
					  if(pwr_vmon==1) {
 800d4a2:	4b42      	ldr	r3, [pc, #264]	; (800d5ac <main_program+0x1ac>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d113      	bne.n	800d4d2 <main_program+0xd2>
						  if(pwr_state==0) {
 800d4aa:	4b41      	ldr	r3, [pc, #260]	; (800d5b0 <main_program+0x1b0>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d126      	bne.n	800d500 <main_program+0x100>
						    	if(!uart2busy){
 800d4b2:	4b40      	ldr	r3, [pc, #256]	; (800d5b4 <main_program+0x1b4>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	f083 0301 	eor.w	r3, r3, #1
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d01f      	beq.n	800d500 <main_program+0x100>
						    		uart2busy = true;
 800d4c0:	4b3c      	ldr	r3, [pc, #240]	; (800d5b4 <main_program+0x1b4>)
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	701a      	strb	r2, [r3, #0]
						    		sendMQTTpwr();
 800d4c6:	f7fb fda3 	bl	8009010 <sendMQTTpwr>
									pwr_state=1;
 800d4ca:	4b39      	ldr	r3, [pc, #228]	; (800d5b0 <main_program+0x1b0>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	e016      	b.n	800d500 <main_program+0x100>
						    	}
						  }
					  }
					  else if(pwr_vmon==0) {
 800d4d2:	4b36      	ldr	r3, [pc, #216]	; (800d5ac <main_program+0x1ac>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d112      	bne.n	800d500 <main_program+0x100>
						  if(pwr_state==1) {
 800d4da:	4b35      	ldr	r3, [pc, #212]	; (800d5b0 <main_program+0x1b0>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d10e      	bne.n	800d500 <main_program+0x100>
						    	if(!uart2busy){
 800d4e2:	4b34      	ldr	r3, [pc, #208]	; (800d5b4 <main_program+0x1b4>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f083 0301 	eor.w	r3, r3, #1
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <main_program+0x100>
						    		uart2busy = true;
 800d4f0:	4b30      	ldr	r3, [pc, #192]	; (800d5b4 <main_program+0x1b4>)
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	701a      	strb	r2, [r3, #0]
						    		sendMQTTpwr();
 800d4f6:	f7fb fd8b 	bl	8009010 <sendMQTTpwr>
									pwr_state=0;
 800d4fa:	4b2d      	ldr	r3, [pc, #180]	; (800d5b0 <main_program+0x1b0>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	701a      	strb	r2, [r3, #0]
						    	}
						  }
					  }
					  if (gDate.Date == 32) {
 800d500:	f107 031c 	add.w	r3, r7, #28
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	2b20      	cmp	r3, #32
 800d508:	d105      	bne.n	800d516 <main_program+0x116>
					  	printf("Setup NTP\r\n");
 800d50a:	482b      	ldr	r0, [pc, #172]	; (800d5b8 <main_program+0x1b8>)
 800d50c:	f00e ff50 	bl	801c3b0 <puts>
					  //						  set_cntp();
					  	setup_RTC_periode();
 800d510:	f7fa feea 	bl	80082e8 <setup_RTC_periode>
 800d514:	e029      	b.n	800d56a <main_program+0x16a>
					  } else {
						cekNTP++;
 800d516:	4b29      	ldr	r3, [pc, #164]	; (800d5bc <main_program+0x1bc>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3301      	adds	r3, #1
 800d51c:	4a27      	ldr	r2, [pc, #156]	; (800d5bc <main_program+0x1bc>)
 800d51e:	6013      	str	r3, [r2, #0]
					  	if (cekNTP == 20) {
 800d520:	4b26      	ldr	r3, [pc, #152]	; (800d5bc <main_program+0x1bc>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b14      	cmp	r3, #20
 800d526:	d107      	bne.n	800d538 <main_program+0x138>
					  		printf("Setup RTC Periode\r\n");
 800d528:	4825      	ldr	r0, [pc, #148]	; (800d5c0 <main_program+0x1c0>)
 800d52a:	f00e ff41 	bl	801c3b0 <puts>
					  		setup_RTC_periode();
 800d52e:	f7fa fedb 	bl	80082e8 <setup_RTC_periode>
					  		cekNTP = 0;
 800d532:	4b22      	ldr	r3, [pc, #136]	; (800d5bc <main_program+0x1bc>)
 800d534:	2200      	movs	r2, #0
 800d536:	601a      	str	r2, [r3, #0]
					  	}
					  	printf("Tanggal: %d, %2d:%2d:%2d pwr_vmon: %d\r\n", gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, pwr_vmon);
 800d538:	f107 031c 	add.w	r3, r7, #28
 800d53c:	789b      	ldrb	r3, [r3, #2]
 800d53e:	4619      	mov	r1, r3
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	f107 0308 	add.w	r3, r7, #8
 800d54c:	785b      	ldrb	r3, [r3, #1]
 800d54e:	461c      	mov	r4, r3
 800d550:	f107 0308 	add.w	r3, r7, #8
 800d554:	789b      	ldrb	r3, [r3, #2]
 800d556:	461a      	mov	r2, r3
 800d558:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <main_program+0x1ac>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	9200      	str	r2, [sp, #0]
 800d560:	4623      	mov	r3, r4
 800d562:	4602      	mov	r2, r0
 800d564:	4817      	ldr	r0, [pc, #92]	; (800d5c4 <main_program+0x1c4>)
 800d566:	f00e fe9d 	bl	801c2a4 <iprintf>
					  }//						  sprintf((char*)tx_buffer, "Tanggal: %d, %2d:%2d:%2d pwr_vmon: %d\n", gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, pwr_vmon);
//						  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
			  osMutexRelease(myMutex01Handle);
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <main_program+0x1a8>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4618      	mov	r0, r3
 800d570:	f00b fc08 	bl	8018d84 <osMutexRelease>
		  }
	  }
	  status = osDelay(SECOND);
 800d574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d578:	f00b fafe 	bl	8018b78 <osDelay>
 800d57c:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	  if(status == osOK)
 800d580:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800d584:	2b00      	cmp	r3, #0
 800d586:	f47f af5e 	bne.w	800d446 <main_program+0x46>
	  {
		  GPIOA->BSRR |= 0<<15;
 800d58a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d58e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	6193      	str	r3, [r2, #24]
	  status = osDelay(SECOND);
 800d596:	e756      	b.n	800d446 <main_program+0x46>
 800d598:	2000818c 	.word	0x2000818c
 800d59c:	20004314 	.word	0x20004314
 800d5a0:	200081b4 	.word	0x200081b4
 800d5a4:	2000aff8 	.word	0x2000aff8
 800d5a8:	2000afa0 	.word	0x2000afa0
 800d5ac:	2000b50c 	.word	0x2000b50c
 800d5b0:	20007243 	.word	0x20007243
 800d5b4:	2000b000 	.word	0x2000b000
 800d5b8:	0801fc28 	.word	0x0801fc28
 800d5bc:	20000648 	.word	0x20000648
 800d5c0:	0801fc34 	.word	0x0801fc34
 800d5c4:	0801fc48 	.word	0x0801fc48

0800d5c8 <read_gyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_gyro */
void read_gyro(void const * argument)
{
 800d5c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d5cc:	b08a      	sub	sp, #40	; 0x28
 800d5ce:	af04      	add	r7, sp, #16
 800d5d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_gyro */
  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	event = osSignalWait( BIT_1 | BIT_2, osWaitForever);
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5da:	2106      	movs	r1, #6
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f00b fb1f 	bl	8018c20 <osSignalWait>
	if(event.value.signals == (BIT_1 | BIT_2))
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b06      	cmp	r3, #6
 800d5e6:	f040 80ea 	bne.w	800d7be <read_gyro+0x1f6>
	{
		lsm6dsl_reg_t reg;
		lsm6dsl_status_reg_get(&dev_ctx, &reg.status_reg);
 800d5ea:	f107 0308 	add.w	r3, r7, #8
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4875      	ldr	r0, [pc, #468]	; (800d7c8 <read_gyro+0x200>)
 800d5f2:	f7f9 fd6d 	bl	80070d0 <lsm6dsl_status_reg_get>

		if (reg.status_reg.xlda)
 800d5f6:	7a3b      	ldrb	r3, [r7, #8]
 800d5f8:	f003 0301 	and.w	r3, r3, #1
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d051      	beq.n	800d6a6 <read_gyro+0xde>
		{
		  /* Read magnetic field data */
		  memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 800d602:	2206      	movs	r2, #6
 800d604:	2100      	movs	r1, #0
 800d606:	4871      	ldr	r0, [pc, #452]	; (800d7cc <read_gyro+0x204>)
 800d608:	f00e f930 	bl	801b86c <memset>
		  lsm6dsl_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
 800d60c:	496f      	ldr	r1, [pc, #444]	; (800d7cc <read_gyro+0x204>)
 800d60e:	486e      	ldr	r0, [pc, #440]	; (800d7c8 <read_gyro+0x200>)
 800d610:	f7f9 fdb7 	bl	8007182 <lsm6dsl_acceleration_raw_get>
		  acceleration_mg[0] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[0]);
 800d614:	4b6d      	ldr	r3, [pc, #436]	; (800d7cc <read_gyro+0x204>)
 800d616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f9 fc4e 	bl	8006ebc <lsm6dsl_from_fs2g_to_mg>
 800d620:	eef0 7a40 	vmov.f32	s15, s0
 800d624:	4b6a      	ldr	r3, [pc, #424]	; (800d7d0 <read_gyro+0x208>)
 800d626:	edc3 7a00 	vstr	s15, [r3]
		  acceleration_mg[1] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[1]);
 800d62a:	4b68      	ldr	r3, [pc, #416]	; (800d7cc <read_gyro+0x204>)
 800d62c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d630:	4618      	mov	r0, r3
 800d632:	f7f9 fc43 	bl	8006ebc <lsm6dsl_from_fs2g_to_mg>
 800d636:	eef0 7a40 	vmov.f32	s15, s0
 800d63a:	4b65      	ldr	r3, [pc, #404]	; (800d7d0 <read_gyro+0x208>)
 800d63c:	edc3 7a01 	vstr	s15, [r3, #4]
		  acceleration_mg[2] = lsm6dsl_from_fs2g_to_mg( data_raw_acceleration.i16bit[2]);
 800d640:	4b62      	ldr	r3, [pc, #392]	; (800d7cc <read_gyro+0x204>)
 800d642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d646:	4618      	mov	r0, r3
 800d648:	f7f9 fc38 	bl	8006ebc <lsm6dsl_from_fs2g_to_mg>
 800d64c:	eef0 7a40 	vmov.f32	s15, s0
 800d650:	4b5f      	ldr	r3, [pc, #380]	; (800d7d0 <read_gyro+0x208>)
 800d652:	edc3 7a02 	vstr	s15, [r3, #8]

		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d656:	4b5e      	ldr	r3, [pc, #376]	; (800d7d0 <read_gyro+0x208>)
 800d658:	681b      	ldr	r3, [r3, #0]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7f2 ff84 	bl	8000568 <__aeabi_f2d>
 800d660:	4680      	mov	r8, r0
 800d662:	4689      	mov	r9, r1
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d664:	4b5a      	ldr	r3, [pc, #360]	; (800d7d0 <read_gyro+0x208>)
 800d666:	685b      	ldr	r3, [r3, #4]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d668:	4618      	mov	r0, r3
 800d66a:	f7f2 ff7d 	bl	8000568 <__aeabi_f2d>
 800d66e:	4604      	mov	r4, r0
 800d670:	460d      	mov	r5, r1
				  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800d672:	4b57      	ldr	r3, [pc, #348]	; (800d7d0 <read_gyro+0x208>)
 800d674:	689b      	ldr	r3, [r3, #8]
		  sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d676:	4618      	mov	r0, r3
 800d678:	f7f2 ff76 	bl	8000568 <__aeabi_f2d>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d684:	e9cd 4500 	strd	r4, r5, [sp]
 800d688:	4642      	mov	r2, r8
 800d68a:	464b      	mov	r3, r9
 800d68c:	4951      	ldr	r1, [pc, #324]	; (800d7d4 <read_gyro+0x20c>)
 800d68e:	4852      	ldr	r0, [pc, #328]	; (800d7d8 <read_gyro+0x210>)
 800d690:	f00e fea6 	bl	801c3e0 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d694:	4850      	ldr	r0, [pc, #320]	; (800d7d8 <read_gyro+0x210>)
 800d696:	f7f2 fda5 	bl	80001e4 <strlen>
 800d69a:	4603      	mov	r3, r0
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	4619      	mov	r1, r3
 800d6a0:	484d      	ldr	r0, [pc, #308]	; (800d7d8 <read_gyro+0x210>)
 800d6a2:	f7fb fa57 	bl	8008b54 <tx_com>
		}
		if (reg.status_reg.gda)
 800d6a6:	7a3b      	ldrb	r3, [r7, #8]
 800d6a8:	f003 0302 	and.w	r3, r3, #2
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d051      	beq.n	800d756 <read_gyro+0x18e>
		{
		  /* Read magnetic field data */
		  memset(data_raw_angular_rate.u8bit, 0x00, 3*sizeof(int16_t));
 800d6b2:	2206      	movs	r2, #6
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	4849      	ldr	r0, [pc, #292]	; (800d7dc <read_gyro+0x214>)
 800d6b8:	f00e f8d8 	bl	801b86c <memset>
		  lsm6dsl_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate.u8bit);
 800d6bc:	4947      	ldr	r1, [pc, #284]	; (800d7dc <read_gyro+0x214>)
 800d6be:	4842      	ldr	r0, [pc, #264]	; (800d7c8 <read_gyro+0x200>)
 800d6c0:	f7f9 fd4e 	bl	8007160 <lsm6dsl_angular_rate_raw_get>
		  angular_rate_mdps[0] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[0]);
 800d6c4:	4b45      	ldr	r3, [pc, #276]	; (800d7dc <read_gyro+0x214>)
 800d6c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f9 fc0e 	bl	8006eec <lsm6dsl_from_fs2000dps_to_mdps>
 800d6d0:	eef0 7a40 	vmov.f32	s15, s0
 800d6d4:	4b42      	ldr	r3, [pc, #264]	; (800d7e0 <read_gyro+0x218>)
 800d6d6:	edc3 7a00 	vstr	s15, [r3]
		  angular_rate_mdps[1] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[1]);
 800d6da:	4b40      	ldr	r3, [pc, #256]	; (800d7dc <read_gyro+0x214>)
 800d6dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f9 fc03 	bl	8006eec <lsm6dsl_from_fs2000dps_to_mdps>
 800d6e6:	eef0 7a40 	vmov.f32	s15, s0
 800d6ea:	4b3d      	ldr	r3, [pc, #244]	; (800d7e0 <read_gyro+0x218>)
 800d6ec:	edc3 7a01 	vstr	s15, [r3, #4]
		  angular_rate_mdps[2] = lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate.i16bit[2]);
 800d6f0:	4b3a      	ldr	r3, [pc, #232]	; (800d7dc <read_gyro+0x214>)
 800d6f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7f9 fbf8 	bl	8006eec <lsm6dsl_from_fs2000dps_to_mdps>
 800d6fc:	eef0 7a40 	vmov.f32	s15, s0
 800d700:	4b37      	ldr	r3, [pc, #220]	; (800d7e0 <read_gyro+0x218>)
 800d702:	edc3 7a02 	vstr	s15, [r3, #8]

		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d706:	4b36      	ldr	r3, [pc, #216]	; (800d7e0 <read_gyro+0x218>)
 800d708:	681b      	ldr	r3, [r3, #0]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f2 ff2c 	bl	8000568 <__aeabi_f2d>
 800d710:	4680      	mov	r8, r0
 800d712:	4689      	mov	r9, r1
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d714:	4b32      	ldr	r3, [pc, #200]	; (800d7e0 <read_gyro+0x218>)
 800d716:	685b      	ldr	r3, [r3, #4]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f2 ff25 	bl	8000568 <__aeabi_f2d>
 800d71e:	4604      	mov	r4, r0
 800d720:	460d      	mov	r5, r1
				  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800d722:	4b2f      	ldr	r3, [pc, #188]	; (800d7e0 <read_gyro+0x218>)
 800d724:	689b      	ldr	r3, [r3, #8]
		  sprintf((char*)tx_buffer, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 800d726:	4618      	mov	r0, r3
 800d728:	f7f2 ff1e 	bl	8000568 <__aeabi_f2d>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d734:	e9cd 4500 	strd	r4, r5, [sp]
 800d738:	4642      	mov	r2, r8
 800d73a:	464b      	mov	r3, r9
 800d73c:	4929      	ldr	r1, [pc, #164]	; (800d7e4 <read_gyro+0x21c>)
 800d73e:	4826      	ldr	r0, [pc, #152]	; (800d7d8 <read_gyro+0x210>)
 800d740:	f00e fe4e 	bl	801c3e0 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d744:	4824      	ldr	r0, [pc, #144]	; (800d7d8 <read_gyro+0x210>)
 800d746:	f7f2 fd4d 	bl	80001e4 <strlen>
 800d74a:	4603      	mov	r3, r0
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	4619      	mov	r1, r3
 800d750:	4821      	ldr	r0, [pc, #132]	; (800d7d8 <read_gyro+0x210>)
 800d752:	f7fb f9ff 	bl	8008b54 <tx_com>
		}
		if (reg.status_reg.tda)
 800d756:	7a3b      	ldrb	r3, [r7, #8]
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d027      	beq.n	800d7b2 <read_gyro+0x1ea>
		{
		  /* Read temperature data */
		  memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800d762:	2202      	movs	r2, #2
 800d764:	2100      	movs	r1, #0
 800d766:	4820      	ldr	r0, [pc, #128]	; (800d7e8 <read_gyro+0x220>)
 800d768:	f00e f880 	bl	801b86c <memset>
		  lsm6dsl_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
 800d76c:	491e      	ldr	r1, [pc, #120]	; (800d7e8 <read_gyro+0x220>)
 800d76e:	4816      	ldr	r0, [pc, #88]	; (800d7c8 <read_gyro+0x200>)
 800d770:	f7f9 fce5 	bl	800713e <lsm6dsl_temperature_raw_get>
		  temperature_degC = lsm6dsl_from_lsb_to_celsius( data_raw_temperature.i16bit );
 800d774:	4b1c      	ldr	r3, [pc, #112]	; (800d7e8 <read_gyro+0x220>)
 800d776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7f9 fbce 	bl	8006f1c <lsm6dsl_from_lsb_to_celsius>
 800d780:	eef0 7a40 	vmov.f32	s15, s0
 800d784:	4b19      	ldr	r3, [pc, #100]	; (800d7ec <read_gyro+0x224>)
 800d786:	edc3 7a00 	vstr	s15, [r3]

		  sprintf((char*)tx_buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC );
 800d78a:	4b18      	ldr	r3, [pc, #96]	; (800d7ec <read_gyro+0x224>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7f2 feea 	bl	8000568 <__aeabi_f2d>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	4915      	ldr	r1, [pc, #84]	; (800d7f0 <read_gyro+0x228>)
 800d79a:	480f      	ldr	r0, [pc, #60]	; (800d7d8 <read_gyro+0x210>)
 800d79c:	f00e fe20 	bl	801c3e0 <siprintf>
		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d7a0:	480d      	ldr	r0, [pc, #52]	; (800d7d8 <read_gyro+0x210>)
 800d7a2:	f7f2 fd1f 	bl	80001e4 <strlen>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	480a      	ldr	r0, [pc, #40]	; (800d7d8 <read_gyro+0x210>)
 800d7ae:	f7fb f9d1 	bl	8008b54 <tx_com>
		}
		osSignalSet( readGyroHandle, BIT_1);
 800d7b2:	4b10      	ldr	r3, [pc, #64]	; (800d7f4 <read_gyro+0x22c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f00b f9f1 	bl	8018ba0 <osSignalSet>
	}
	osDelay(10);
 800d7be:	200a      	movs	r0, #10
 800d7c0:	f00b f9da 	bl	8018b78 <osDelay>
	event = osSignalWait( BIT_1 | BIT_2, osWaitForever);
 800d7c4:	e705      	b.n	800d5d2 <read_gyro+0xa>
 800d7c6:	bf00      	nop
 800d7c8:	200042fc 	.word	0x200042fc
 800d7cc:	20000604 	.word	0x20000604
 800d7d0:	20000618 	.word	0x20000618
 800d7d4:	0801fc70 	.word	0x0801fc70
 800d7d8:	200068bc 	.word	0x200068bc
 800d7dc:	2000060c 	.word	0x2000060c
 800d7e0:	20000624 	.word	0x20000624
 800d7e4:	0801fc98 	.word	0x0801fc98
 800d7e8:	20000614 	.word	0x20000614
 800d7ec:	20000630 	.word	0x20000630
 800d7f0:	0801fcc0 	.word	0x0801fcc0
 800d7f4:	20009124 	.word	0x20009124

0800d7f8 <send_data_to_server>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_data_to_server */
void send_data_to_server(void const * argument)
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b097      	sub	sp, #92	; 0x5c
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_data_to_server */
  osStatus status_delay, status_mutex;
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  uint8_t secnow,minnow;
  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d800:	4bb5      	ldr	r3, [pc, #724]	; (800dad8 <send_data_to_server+0x2e0>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f04f 31ff 	mov.w	r1, #4294967295
 800d808:	4618      	mov	r0, r3
 800d80a:	f00b fa6d 	bl	8018ce8 <osMutexWait>
 800d80e:	6338      	str	r0, [r7, #48]	; 0x30
  if(status_mutex == osOK)
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	2b00      	cmp	r3, #0
 800d814:	d144      	bne.n	800d8a0 <send_data_to_server+0xa8>
  {
	  read_sn_edmi();
 800d816:	f7fe fa6f 	bl	800bcf8 <read_sn_edmi>
	  printf("%s\r\n",snMeter);
 800d81a:	4bb0      	ldr	r3, [pc, #704]	; (800dadc <send_data_to_server+0x2e4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	48af      	ldr	r0, [pc, #700]	; (800dae0 <send_data_to_server+0x2e8>)
 800d822:	f00e fd3f 	bl	801c2a4 <iprintf>
	  setup_modem_1st();
 800d826:	f7fa fc4d 	bl	80080c4 <setup_modem_1st>
	  cntpok =1;
 800d82a:	4bae      	ldr	r3, [pc, #696]	; (800dae4 <send_data_to_server+0x2ec>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	601a      	str	r2, [r3, #0]
	  sprintf((char*)tx_buffer, "MQTT Demo\n");
 800d830:	49ad      	ldr	r1, [pc, #692]	; (800dae8 <send_data_to_server+0x2f0>)
 800d832:	48ae      	ldr	r0, [pc, #696]	; (800daec <send_data_to_server+0x2f4>)
 800d834:	f00e fdd4 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d838:	48ac      	ldr	r0, [pc, #688]	; (800daec <send_data_to_server+0x2f4>)
 800d83a:	f7f2 fcd3 	bl	80001e4 <strlen>
 800d83e:	4603      	mov	r3, r0
 800d840:	b29b      	uxth	r3, r3
 800d842:	4619      	mov	r1, r3
 800d844:	48a9      	ldr	r0, [pc, #676]	; (800daec <send_data_to_server+0x2f4>)
 800d846:	f7fb f985 	bl	8008b54 <tx_com>
	  mqtt_demo();
 800d84a:	f7fa ff93 	bl	8008774 <mqtt_demo>
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d84e:	f107 0320 	add.w	r3, r7, #32
 800d852:	2200      	movs	r2, #0
 800d854:	4619      	mov	r1, r3
 800d856:	48a6      	ldr	r0, [pc, #664]	; (800daf0 <send_data_to_server+0x2f8>)
 800d858:	f005 fcc3 	bl	80131e2 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d85c:	f107 030c 	add.w	r3, r7, #12
 800d860:	2200      	movs	r2, #0
 800d862:	4619      	mov	r1, r3
 800d864:	48a2      	ldr	r0, [pc, #648]	; (800daf0 <send_data_to_server+0x2f8>)
 800d866:	f005 fbd9 	bl	801301c <HAL_RTC_GetTime>
	  st_hour = gTime.Hours;
 800d86a:	7b3a      	ldrb	r2, [r7, #12]
 800d86c:	4ba1      	ldr	r3, [pc, #644]	; (800daf4 <send_data_to_server+0x2fc>)
 800d86e:	701a      	strb	r2, [r3, #0]
	  st_min = gTime.Minutes;
 800d870:	7b7a      	ldrb	r2, [r7, #13]
 800d872:	4ba1      	ldr	r3, [pc, #644]	; (800daf8 <send_data_to_server+0x300>)
 800d874:	701a      	strb	r2, [r3, #0]
	  st_sec = gTime.Seconds;
 800d876:	7bba      	ldrb	r2, [r7, #14]
 800d878:	4ba0      	ldr	r3, [pc, #640]	; (800dafc <send_data_to_server+0x304>)
 800d87a:	701a      	strb	r2, [r3, #0]
	  sprintf((char*)tx_buffer, "MQTT Demo Finished\n");
 800d87c:	49a0      	ldr	r1, [pc, #640]	; (800db00 <send_data_to_server+0x308>)
 800d87e:	489b      	ldr	r0, [pc, #620]	; (800daec <send_data_to_server+0x2f4>)
 800d880:	f00e fdae 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800d884:	4899      	ldr	r0, [pc, #612]	; (800daec <send_data_to_server+0x2f4>)
 800d886:	f7f2 fcad 	bl	80001e4 <strlen>
 800d88a:	4603      	mov	r3, r0
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4619      	mov	r1, r3
 800d890:	4896      	ldr	r0, [pc, #600]	; (800daec <send_data_to_server+0x2f4>)
 800d892:	f7fb f95f 	bl	8008b54 <tx_com>
//	  get_config();
	  osMutexRelease(myMutex01Handle);
 800d896:	4b90      	ldr	r3, [pc, #576]	; (800dad8 <send_data_to_server+0x2e0>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f00b fa72 	bl	8018d84 <osMutexRelease>
  for(;;)
  {
//    status_delay = osDelay(52*SECOND);
//    status_delay = osDelay(47*SECOND);
//    status_delay = osDelay(49*SECOND);
	  status_delay = osDelay(SECOND);
 800d8a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d8a4:	f00b f968 	bl	8018b78 <osDelay>
 800d8a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(status_delay == osOK)
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1f7      	bne.n	800d8a0 <send_data_to_server+0xa8>
    {
    	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800d8b0:	f107 0320 	add.w	r3, r7, #32
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	488d      	ldr	r0, [pc, #564]	; (800daf0 <send_data_to_server+0x2f8>)
 800d8ba:	f005 fc92 	bl	80131e2 <HAL_RTC_GetDate>
    	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800d8be:	f107 030c 	add.w	r3, r7, #12
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	488a      	ldr	r0, [pc, #552]	; (800daf0 <send_data_to_server+0x2f8>)
 800d8c8:	f005 fba8 	bl	801301c <HAL_RTC_GetTime>
    	secnow = gTime.Seconds;
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
 800d8ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	minnow = gTime.Minutes;
 800d8d2:	7b7b      	ldrb	r3, [r7, #13]
 800d8d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    	status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800d8d8:	4b7f      	ldr	r3, [pc, #508]	; (800dad8 <send_data_to_server+0x2e0>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f04f 31ff 	mov.w	r1, #4294967295
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f00b fa01 	bl	8018ce8 <osMutexWait>
 800d8e6:	6338      	str	r0, [r7, #48]	; 0x30
//    	status_mutex = osMutexWait(myMutex01Handle, 500);
    	if(status_mutex == osOK)
 800d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1d8      	bne.n	800d8a0 <send_data_to_server+0xa8>
    	{
//    		if(!uart2busy){
    	    	if((minnow == 2 || minnow == 7 || minnow == 12 || minnow == 17 || minnow == 22 || minnow == 27 || minnow == 32 || minnow == 37 || minnow == 42 || minnow == 47 || minnow == 52 || minnow == 57 ) && secnow == 0){
 800d8ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d02b      	beq.n	800d94e <send_data_to_server+0x156>
 800d8f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d8fa:	2b07      	cmp	r3, #7
 800d8fc:	d027      	beq.n	800d94e <send_data_to_server+0x156>
 800d8fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d902:	2b0c      	cmp	r3, #12
 800d904:	d023      	beq.n	800d94e <send_data_to_server+0x156>
 800d906:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d90a:	2b11      	cmp	r3, #17
 800d90c:	d01f      	beq.n	800d94e <send_data_to_server+0x156>
 800d90e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d912:	2b16      	cmp	r3, #22
 800d914:	d01b      	beq.n	800d94e <send_data_to_server+0x156>
 800d916:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d91a:	2b1b      	cmp	r3, #27
 800d91c:	d017      	beq.n	800d94e <send_data_to_server+0x156>
 800d91e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d922:	2b20      	cmp	r3, #32
 800d924:	d013      	beq.n	800d94e <send_data_to_server+0x156>
 800d926:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d92a:	2b25      	cmp	r3, #37	; 0x25
 800d92c:	d00f      	beq.n	800d94e <send_data_to_server+0x156>
 800d92e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d932:	2b2a      	cmp	r3, #42	; 0x2a
 800d934:	d00b      	beq.n	800d94e <send_data_to_server+0x156>
 800d936:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d93a:	2b2f      	cmp	r3, #47	; 0x2f
 800d93c:	d007      	beq.n	800d94e <send_data_to_server+0x156>
 800d93e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d942:	2b34      	cmp	r3, #52	; 0x34
 800d944:	d003      	beq.n	800d94e <send_data_to_server+0x156>
 800d946:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d94a:	2b39      	cmp	r3, #57	; 0x39
 800d94c:	d109      	bne.n	800d962 <send_data_to_server+0x16a>
 800d94e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d952:	2b00      	cmp	r3, #0
 800d954:	d105      	bne.n	800d962 <send_data_to_server+0x16a>
        			uart2busy = true;
 800d956:	4b6b      	ldr	r3, [pc, #428]	; (800db04 <send_data_to_server+0x30c>)
 800d958:	2201      	movs	r2, #1
 800d95a:	701a      	strb	r2, [r3, #0]
    				sendSimple();
 800d95c:	f7fb fe28 	bl	80095b0 <sendSimple>
 800d960:	e19a      	b.n	800dc98 <send_data_to_server+0x4a0>
    	    	}
    	    	else if(cntpok == 0 || cntpok == 1) {
 800d962:	4b60      	ldr	r3, [pc, #384]	; (800dae4 <send_data_to_server+0x2ec>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <send_data_to_server+0x17a>
 800d96a:	4b5e      	ldr	r3, [pc, #376]	; (800dae4 <send_data_to_server+0x2ec>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d10c      	bne.n	800d98c <send_data_to_server+0x194>
        			uart2busy = true;
 800d972:	4b64      	ldr	r3, [pc, #400]	; (800db04 <send_data_to_server+0x30c>)
 800d974:	2201      	movs	r2, #1
 800d976:	701a      	strb	r2, [r3, #0]
        			cntpok =1;
 800d978:	4b5a      	ldr	r3, [pc, #360]	; (800dae4 <send_data_to_server+0x2ec>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
        			set_cntp();
 800d97e:	f7fa fc67 	bl	8008250 <set_cntp>
        			osDelay(7000);
 800d982:	f641 3058 	movw	r0, #7000	; 0x1b58
 800d986:	f00b f8f7 	bl	8018b78 <osDelay>
 800d98a:	e185      	b.n	800dc98 <send_data_to_server+0x4a0>
    	    	}
				else if(secnow == 0){
 800d98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d990:	2b00      	cmp	r3, #0
 800d992:	f040 8181 	bne.w	800dc98 <send_data_to_server+0x4a0>
					if(minnow == 3 || minnow == 33)cntpok=0;
 800d996:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d003      	beq.n	800d9a6 <send_data_to_server+0x1ae>
 800d99e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800d9a2:	2b21      	cmp	r3, #33	; 0x21
 800d9a4:	d102      	bne.n	800d9ac <send_data_to_server+0x1b4>
 800d9a6:	4b4f      	ldr	r3, [pc, #316]	; (800dae4 <send_data_to_server+0x2ec>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	601a      	str	r2, [r3, #0]
//					SerialATprintln("AT+CNMP=2", 10, 0xff);
//					osDelay(1000);
					uart2done = false;
 800d9ac:	4b56      	ldr	r3, [pc, #344]	; (800db08 <send_data_to_server+0x310>)
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	701a      	strb	r2, [r3, #0]
						sprintf(uart2_at,"AT+CPSI?");
 800d9b2:	4956      	ldr	r1, [pc, #344]	; (800db0c <send_data_to_server+0x314>)
 800d9b4:	4856      	ldr	r0, [pc, #344]	; (800db10 <send_data_to_server+0x318>)
 800d9b6:	f00e fd13 	bl	801c3e0 <siprintf>
						printf(uart2_at);
 800d9ba:	4855      	ldr	r0, [pc, #340]	; (800db10 <send_data_to_server+0x318>)
 800d9bc:	f00e fc72 	bl	801c2a4 <iprintf>
						SerialATprintln("AT+CPSI?", 8, 0xff);
 800d9c0:	22ff      	movs	r2, #255	; 0xff
 800d9c2:	2108      	movs	r1, #8
 800d9c4:	4851      	ldr	r0, [pc, #324]	; (800db0c <send_data_to_server+0x314>)
 800d9c6:	f7fa fb31 	bl	800802c <SerialATprintln>
//						osDelay(1000);
						for(int y=0;y<30;y++){
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ce:	e009      	b.n	800d9e4 <send_data_to_server+0x1ec>
									osDelay(200);
 800d9d0:	20c8      	movs	r0, #200	; 0xc8
 800d9d2:	f00b f8d1 	bl	8018b78 <osDelay>
									if(uart2done)break;
 800d9d6:	4b4c      	ldr	r3, [pc, #304]	; (800db08 <send_data_to_server+0x310>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <send_data_to_server+0x1f4>
						for(int y=0;y<30;y++){
 800d9de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9e6:	2b1d      	cmp	r3, #29
 800d9e8:	ddf2      	ble.n	800d9d0 <send_data_to_server+0x1d8>
 800d9ea:	e000      	b.n	800d9ee <send_data_to_server+0x1f6>
									if(uart2done)break;
 800d9ec:	bf00      	nop
								}
						int cmpint=strcmp(networkstr," GSM");
 800d9ee:	4b49      	ldr	r3, [pc, #292]	; (800db14 <send_data_to_server+0x31c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4949      	ldr	r1, [pc, #292]	; (800db18 <send_data_to_server+0x320>)
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f2 fbeb 	bl	80001d0 <strcmp>
 800d9fa:	6278      	str	r0, [r7, #36]	; 0x24
						if(cmpint != 0){ // cek network LTE NBIOT
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d028      	beq.n	800da54 <send_data_to_server+0x25c>
							if(signal<-115){ // cek sinyal Minimum LTE
 800da02:	4b46      	ldr	r3, [pc, #280]	; (800db1c <send_data_to_server+0x324>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f113 0f73 	cmn.w	r3, #115	; 0x73
 800da0a:	da58      	bge.n	800dabe <send_data_to_server+0x2c6>
									SerialATprintln("AT+CNMP=13", 10, 0xff);
 800da0c:	22ff      	movs	r2, #255	; 0xff
 800da0e:	210a      	movs	r1, #10
 800da10:	4843      	ldr	r0, [pc, #268]	; (800db20 <send_data_to_server+0x328>)
 800da12:	f7fa fb0b 	bl	800802c <SerialATprintln>
									osDelay(2000);
 800da16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800da1a:	f00b f8ad 	bl	8018b78 <osDelay>
									reset_mqtt();
 800da1e:	f7fc f931 	bl	8009c84 <reset_mqtt>
									SerialATprintln("AT+SMCONN",9,0xff);
 800da22:	22ff      	movs	r2, #255	; 0xff
 800da24:	2109      	movs	r1, #9
 800da26:	483f      	ldr	r0, [pc, #252]	; (800db24 <send_data_to_server+0x32c>)
 800da28:	f7fa fb00 	bl	800802c <SerialATprintln>
									uart2done = false;
 800da2c:	4b36      	ldr	r3, [pc, #216]	; (800db08 <send_data_to_server+0x310>)
 800da2e:	2200      	movs	r2, #0
 800da30:	701a      	strb	r2, [r3, #0]
									for(int y=0;y<30;y++){
 800da32:	2300      	movs	r3, #0
 800da34:	653b      	str	r3, [r7, #80]	; 0x50
 800da36:	e009      	b.n	800da4c <send_data_to_server+0x254>
										osDelay(200);
 800da38:	20c8      	movs	r0, #200	; 0xc8
 800da3a:	f00b f89d 	bl	8018b78 <osDelay>
										if(uart2done)break;
 800da3e:	4b32      	ldr	r3, [pc, #200]	; (800db08 <send_data_to_server+0x310>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d138      	bne.n	800dab8 <send_data_to_server+0x2c0>
									for(int y=0;y<30;y++){
 800da46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da48:	3301      	adds	r3, #1
 800da4a:	653b      	str	r3, [r7, #80]	; 0x50
 800da4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4e:	2b1d      	cmp	r3, #29
 800da50:	ddf2      	ble.n	800da38 <send_data_to_server+0x240>
 800da52:	e034      	b.n	800dabe <send_data_to_server+0x2c6>
									}
								}
						}
						else {
							if(signal<=-100){ // cek sinyal minimum GSM
 800da54:	4b31      	ldr	r3, [pc, #196]	; (800db1c <send_data_to_server+0x324>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800da5c:	da2f      	bge.n	800dabe <send_data_to_server+0x2c6>
								for(int z=0;z<3;z++){
 800da5e:	2300      	movs	r3, #0
 800da60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da62:	e025      	b.n	800dab0 <send_data_to_server+0x2b8>
									printf("modem reboot\n");
 800da64:	4830      	ldr	r0, [pc, #192]	; (800db28 <send_data_to_server+0x330>)
 800da66:	f00e fca3 	bl	801c3b0 <puts>
									modem_reset_rtos();
 800da6a:	f7fc f9cd 	bl	8009e08 <modem_reset_rtos>
									reset_mqtt();
 800da6e:	f7fc f909 	bl	8009c84 <reset_mqtt>
									SerialATprintln("AT+CPSI?", 8, 0xff);
 800da72:	22ff      	movs	r2, #255	; 0xff
 800da74:	2108      	movs	r1, #8
 800da76:	4825      	ldr	r0, [pc, #148]	; (800db0c <send_data_to_server+0x314>)
 800da78:	f7fa fad8 	bl	800802c <SerialATprintln>
//									osDelay(2000);
									for(int y=0;y<30;y++){
 800da7c:	2300      	movs	r3, #0
 800da7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800da80:	e009      	b.n	800da96 <send_data_to_server+0x29e>
										osDelay(200);
 800da82:	20c8      	movs	r0, #200	; 0xc8
 800da84:	f00b f878 	bl	8018b78 <osDelay>
										if(uart2done)break;
 800da88:	4b1f      	ldr	r3, [pc, #124]	; (800db08 <send_data_to_server+0x310>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d106      	bne.n	800da9e <send_data_to_server+0x2a6>
									for(int y=0;y<30;y++){
 800da90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da92:	3301      	adds	r3, #1
 800da94:	64bb      	str	r3, [r7, #72]	; 0x48
 800da96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da98:	2b1d      	cmp	r3, #29
 800da9a:	ddf2      	ble.n	800da82 <send_data_to_server+0x28a>
 800da9c:	e000      	b.n	800daa0 <send_data_to_server+0x2a8>
										if(uart2done)break;
 800da9e:	bf00      	nop
									}
									if(signal > -100) break;
 800daa0:	4b1e      	ldr	r3, [pc, #120]	; (800db1c <send_data_to_server+0x324>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800daa8:	da08      	bge.n	800dabc <send_data_to_server+0x2c4>
								for(int z=0;z<3;z++){
 800daaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daac:	3301      	adds	r3, #1
 800daae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	ddd6      	ble.n	800da64 <send_data_to_server+0x26c>
 800dab6:	e002      	b.n	800dabe <send_data_to_server+0x2c6>
										if(uart2done)break;
 800dab8:	bf00      	nop
 800daba:	e000      	b.n	800dabe <send_data_to_server+0x2c6>
									if(signal > -100) break;
 800dabc:	bf00      	nop
								}

							}
						}
					SerialATprintln("AT+CNMP?", 8, 0xff);
 800dabe:	22ff      	movs	r2, #255	; 0xff
 800dac0:	2108      	movs	r1, #8
 800dac2:	481a      	ldr	r0, [pc, #104]	; (800db2c <send_data_to_server+0x334>)
 800dac4:	f7fa fab2 	bl	800802c <SerialATprintln>
					osDelay(1000);
 800dac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dacc:	f00b f854 	bl	8018b78 <osDelay>
					for(int z=0;z<3;z++){
 800dad0:	2300      	movs	r3, #0
 800dad2:	647b      	str	r3, [r7, #68]	; 0x44
 800dad4:	e08e      	b.n	800dbf4 <send_data_to_server+0x3fc>
 800dad6:	bf00      	nop
 800dad8:	2000afa0 	.word	0x2000afa0
 800dadc:	20000188 	.word	0x20000188
 800dae0:	0801f5a0 	.word	0x0801f5a0
 800dae4:	20000600 	.word	0x20000600
 800dae8:	0801fcdc 	.word	0x0801fcdc
 800daec:	200068bc 	.word	0x200068bc
 800daf0:	2000818c 	.word	0x2000818c
 800daf4:	20004314 	.word	0x20004314
 800daf8:	200081b4 	.word	0x200081b4
 800dafc:	2000aff8 	.word	0x2000aff8
 800db00:	0801fce8 	.word	0x0801fce8
 800db04:	2000b000 	.word	0x2000b000
 800db08:	20003fe4 	.word	0x20003fe4
 800db0c:	0801f358 	.word	0x0801f358
 800db10:	20003fd0 	.word	0x20003fd0
 800db14:	20005314 	.word	0x20005314
 800db18:	0801f364 	.word	0x0801f364
 800db1c:	0801e8cd 	.word	0x0801e8cd
 800db20:	0801f36c 	.word	0x0801f36c
 800db24:	0801f2e4 	.word	0x0801f2e4
 800db28:	0801f378 	.word	0x0801f378
 800db2c:	0801f1c0 	.word	0x0801f1c0
						uart2done = false;
 800db30:	4b5c      	ldr	r3, [pc, #368]	; (800dca4 <send_data_to_server+0x4ac>)
 800db32:	2200      	movs	r2, #0
 800db34:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2,(uint8_t *) ATSMSTATE,strlen(ATSMSTATE),0xff);
 800db36:	4b5c      	ldr	r3, [pc, #368]	; (800dca8 <send_data_to_server+0x4b0>)
 800db38:	681c      	ldr	r4, [r3, #0]
 800db3a:	4b5b      	ldr	r3, [pc, #364]	; (800dca8 <send_data_to_server+0x4b0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7f2 fb50 	bl	80001e4 <strlen>
 800db44:	4603      	mov	r3, r0
 800db46:	b29a      	uxth	r2, r3
 800db48:	23ff      	movs	r3, #255	; 0xff
 800db4a:	4621      	mov	r1, r4
 800db4c:	4857      	ldr	r0, [pc, #348]	; (800dcac <send_data_to_server+0x4b4>)
 800db4e:	f006 fc25 	bl	801439c <HAL_UART_Transmit>
						for(int y=0;y<25;y++){
 800db52:	2300      	movs	r3, #0
 800db54:	643b      	str	r3, [r7, #64]	; 0x40
 800db56:	e009      	b.n	800db6c <send_data_to_server+0x374>
									osDelay(200);
 800db58:	20c8      	movs	r0, #200	; 0xc8
 800db5a:	f00b f80d 	bl	8018b78 <osDelay>
									if(uart2done)break;
 800db5e:	4b51      	ldr	r3, [pc, #324]	; (800dca4 <send_data_to_server+0x4ac>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <send_data_to_server+0x37c>
						for(int y=0;y<25;y++){
 800db66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db68:	3301      	adds	r3, #1
 800db6a:	643b      	str	r3, [r7, #64]	; 0x40
 800db6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db6e:	2b18      	cmp	r3, #24
 800db70:	ddf2      	ble.n	800db58 <send_data_to_server+0x360>
 800db72:	e000      	b.n	800db76 <send_data_to_server+0x37e>
									if(uart2done)break;
 800db74:	bf00      	nop
								}
							temp_data =strstr((char *)buffer2,"+SMSTATE:");
 800db76:	494e      	ldr	r1, [pc, #312]	; (800dcb0 <send_data_to_server+0x4b8>)
 800db78:	484e      	ldr	r0, [pc, #312]	; (800dcb4 <send_data_to_server+0x4bc>)
 800db7a:	f00e fc68 	bl	801c44e <strstr>
 800db7e:	4603      	mov	r3, r0
 800db80:	4a4d      	ldr	r2, [pc, #308]	; (800dcb8 <send_data_to_server+0x4c0>)
 800db82:	6013      	str	r3, [r2, #0]
							memcpy(smstatestr,temp_data,11);
 800db84:	4b4d      	ldr	r3, [pc, #308]	; (800dcbc <send_data_to_server+0x4c4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a4b      	ldr	r2, [pc, #300]	; (800dcb8 <send_data_to_server+0x4c0>)
 800db8a:	6811      	ldr	r1, [r2, #0]
 800db8c:	220b      	movs	r2, #11
 800db8e:	4618      	mov	r0, r3
 800db90:	f00d fe5e 	bl	801b850 <memcpy>
							smstateint = strcmp(smstatestr,"+SMSTATE: 0");
 800db94:	4b49      	ldr	r3, [pc, #292]	; (800dcbc <send_data_to_server+0x4c4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4949      	ldr	r1, [pc, #292]	; (800dcc0 <send_data_to_server+0x4c8>)
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7f2 fb18 	bl	80001d0 <strcmp>
 800dba0:	4603      	mov	r3, r0
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	4b47      	ldr	r3, [pc, #284]	; (800dcc4 <send_data_to_server+0x4cc>)
 800dba6:	701a      	strb	r2, [r3, #0]
							uart2done = false;
 800dba8:	4b3e      	ldr	r3, [pc, #248]	; (800dca4 <send_data_to_server+0x4ac>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	701a      	strb	r2, [r3, #0]
							if(smstateint!=0) break;
 800dbae:	4b45      	ldr	r3, [pc, #276]	; (800dcc4 <send_data_to_server+0x4cc>)
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d122      	bne.n	800dbfc <send_data_to_server+0x404>
							reset_mqtt();
 800dbb6:	f7fc f865 	bl	8009c84 <reset_mqtt>
							SerialATprintln("AT+SMCONN",9,0xff);
 800dbba:	22ff      	movs	r2, #255	; 0xff
 800dbbc:	2109      	movs	r1, #9
 800dbbe:	4842      	ldr	r0, [pc, #264]	; (800dcc8 <send_data_to_server+0x4d0>)
 800dbc0:	f7fa fa34 	bl	800802c <SerialATprintln>
							uart2done = false;
 800dbc4:	4b37      	ldr	r3, [pc, #220]	; (800dca4 <send_data_to_server+0x4ac>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	701a      	strb	r2, [r3, #0]
							for(int y=0;y<25;y++){
 800dbca:	2300      	movs	r3, #0
 800dbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbce:	e009      	b.n	800dbe4 <send_data_to_server+0x3ec>
								osDelay(200);
 800dbd0:	20c8      	movs	r0, #200	; 0xc8
 800dbd2:	f00a ffd1 	bl	8018b78 <osDelay>
								if(uart2done)break;
 800dbd6:	4b33      	ldr	r3, [pc, #204]	; (800dca4 <send_data_to_server+0x4ac>)
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <send_data_to_server+0x3f4>
							for(int y=0;y<25;y++){
 800dbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe6:	2b18      	cmp	r3, #24
 800dbe8:	ddf2      	ble.n	800dbd0 <send_data_to_server+0x3d8>
 800dbea:	e000      	b.n	800dbee <send_data_to_server+0x3f6>
								if(uart2done)break;
 800dbec:	bf00      	nop
					for(int z=0;z<3;z++){
 800dbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	647b      	str	r3, [r7, #68]	; 0x44
 800dbf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	dd9a      	ble.n	800db30 <send_data_to_server+0x338>
 800dbfa:	e000      	b.n	800dbfe <send_data_to_server+0x406>
							if(smstateint!=0) break;
 800dbfc:	bf00      	nop
							}
						}
					uart2done = false;
 800dbfe:	4b29      	ldr	r3, [pc, #164]	; (800dca4 <send_data_to_server+0x4ac>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
//							SerialATprintln("AT+SMUNSUB=\"tayra/incoming\"", 27, 0xff); //tayra/message
					SerialATprintln("AT+SMUNSUB=\"tayra/config\"", 25, 0xff); //tayra/message
 800dc04:	22ff      	movs	r2, #255	; 0xff
 800dc06:	2119      	movs	r1, #25
 800dc08:	4830      	ldr	r0, [pc, #192]	; (800dccc <send_data_to_server+0x4d4>)
 800dc0a:	f7fa fa0f 	bl	800802c <SerialATprintln>
							for(int i=0;i<25;i++){
 800dc0e:	2300      	movs	r3, #0
 800dc10:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc12:	e009      	b.n	800dc28 <send_data_to_server+0x430>
								osDelay(200);
 800dc14:	20c8      	movs	r0, #200	; 0xc8
 800dc16:	f00a ffaf 	bl	8018b78 <osDelay>
								if(uart2done)break;
 800dc1a:	4b22      	ldr	r3, [pc, #136]	; (800dca4 <send_data_to_server+0x4ac>)
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <send_data_to_server+0x438>
							for(int i=0;i<25;i++){
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	3301      	adds	r3, #1
 800dc26:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2a:	2b18      	cmp	r3, #24
 800dc2c:	ddf2      	ble.n	800dc14 <send_data_to_server+0x41c>
 800dc2e:	e000      	b.n	800dc32 <send_data_to_server+0x43a>
								if(uart2done)break;
 800dc30:	bf00      	nop
							}
					osDelay(3000);
 800dc32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800dc36:	f00a ff9f 	bl	8018b78 <osDelay>
					uart2done = false;
 800dc3a:	4b1a      	ldr	r3, [pc, #104]	; (800dca4 <send_data_to_server+0x4ac>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
//						SerialATprintln("AT+SMSUB=\"tayra/incoming\",1", 27, 0xff); //tayra/message
					SerialATprintln("AT+SMSUB=\"tayra/config\",1", 25, 0xff); //tayra/message
 800dc40:	22ff      	movs	r2, #255	; 0xff
 800dc42:	2119      	movs	r1, #25
 800dc44:	4822      	ldr	r0, [pc, #136]	; (800dcd0 <send_data_to_server+0x4d8>)
 800dc46:	f7fa f9f1 	bl	800802c <SerialATprintln>
						for(int i=0;i<25;i++){
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc4e:	e009      	b.n	800dc64 <send_data_to_server+0x46c>
							osDelay(200);
 800dc50:	20c8      	movs	r0, #200	; 0xc8
 800dc52:	f00a ff91 	bl	8018b78 <osDelay>
							if(uart2done)break;
 800dc56:	4b13      	ldr	r3, [pc, #76]	; (800dca4 <send_data_to_server+0x4ac>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <send_data_to_server+0x474>
						for(int i=0;i<25;i++){
 800dc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc60:	3301      	adds	r3, #1
 800dc62:	637b      	str	r3, [r7, #52]	; 0x34
 800dc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc66:	2b18      	cmp	r3, #24
 800dc68:	ddf2      	ble.n	800dc50 <send_data_to_server+0x458>
 800dc6a:	e000      	b.n	800dc6e <send_data_to_server+0x476>
							if(uart2done)break;
 800dc6c:	bf00      	nop
						}
					uart2done = false;
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <send_data_to_server+0x4ac>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	701a      	strb	r2, [r3, #0]
					SerialATprintln("AT+CNMP=2", 9, 0xff); // set CNMP automatic
 800dc74:	22ff      	movs	r2, #255	; 0xff
 800dc76:	2109      	movs	r1, #9
 800dc78:	4816      	ldr	r0, [pc, #88]	; (800dcd4 <send_data_to_server+0x4dc>)
 800dc7a:	f7fa f9d7 	bl	800802c <SerialATprintln>
					osDelay(1000);
 800dc7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc82:	f00a ff79 	bl	8018b78 <osDelay>
					SerialATprintln("AT+CNMP?", 8, 0xff);
 800dc86:	22ff      	movs	r2, #255	; 0xff
 800dc88:	2108      	movs	r1, #8
 800dc8a:	4813      	ldr	r0, [pc, #76]	; (800dcd8 <send_data_to_server+0x4e0>)
 800dc8c:	f7fa f9ce 	bl	800802c <SerialATprintln>
					osDelay(1000);
 800dc90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc94:	f00a ff70 	bl	8018b78 <osDelay>
				}
//    		}
//    		uart2busy = false;
			osMutexRelease(myMutex01Handle);
 800dc98:	4b10      	ldr	r3, [pc, #64]	; (800dcdc <send_data_to_server+0x4e4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f00b f871 	bl	8018d84 <osMutexRelease>
	  status_delay = osDelay(SECOND);
 800dca2:	e5fd      	b.n	800d8a0 <send_data_to_server+0xa8>
 800dca4:	20003fe4 	.word	0x20003fe4
 800dca8:	20000184 	.word	0x20000184
 800dcac:	200038e4 	.word	0x200038e4
 800dcb0:	0801f388 	.word	0x0801f388
 800dcb4:	20006d80 	.word	0x20006d80
 800dcb8:	200045f4 	.word	0x200045f4
 800dcbc:	2000affc 	.word	0x2000affc
 800dcc0:	0801f394 	.word	0x0801f394
 800dcc4:	2000430c 	.word	0x2000430c
 800dcc8:	0801f2e4 	.word	0x0801f2e4
 800dccc:	0801f3a0 	.word	0x0801f3a0
 800dcd0:	0801f320 	.word	0x0801f320
 800dcd4:	0801f3f0 	.word	0x0801f3f0
 800dcd8:	0801f1c0 	.word	0x0801f1c0
 800dcdc:	2000afa0 	.word	0x2000afa0

0800dce0 <read_EoB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_EoB */
void read_EoB(void const * argument)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800dce6:	af02      	add	r7, sp, #8
 800dce8:	f107 0314 	add.w	r3, r7, #20
 800dcec:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
//	  status_delay = osDelay(30*SECOND);
//	  if(status_delay == osOK){
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800dcee:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4879      	ldr	r0, [pc, #484]	; (800dedc <read_EoB+0x1fc>)
 800dcf8:	f005 fa73 	bl	80131e2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800dcfc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800dd00:	2200      	movs	r2, #0
 800dd02:	4619      	mov	r1, r3
 800dd04:	4875      	ldr	r0, [pc, #468]	; (800dedc <read_EoB+0x1fc>)
 800dd06:	f005 f989 	bl	801301c <HAL_RTC_GetTime>
//		  if(gTime.Seconds != secmin1) printf(" EoB ");

//		  printf("Tanggal: %d-%d-%d, %2d:%2d:%2d \n", gDate.Date, gDate.Month, gDate.Year, gTime.Hours, gTime.Minutes, gTime.Seconds);

//			  if(gDate.Date == 1 && gTime.Hours == 10 && gTime.Minutes == 0 && gTime.Seconds == 0 && gTime.SubSeconds == 0)
			  if((gDate.Date == eob_date || gDate.Date == 1) && (gTime.Hours == eob_hour || gTime.Hours == 10) && (gTime.Minutes == eob_minute || gTime.Minutes == 0) && gTime.Seconds == 15)
 800dd0a:	f897 2496 	ldrb.w	r2, [r7, #1174]	; 0x496
 800dd0e:	4b74      	ldr	r3, [pc, #464]	; (800dee0 <read_EoB+0x200>)
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d004      	beq.n	800dd20 <read_EoB+0x40>
 800dd16:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	f040 80d8 	bne.w	800ded0 <read_EoB+0x1f0>
 800dd20:	f897 2480 	ldrb.w	r2, [r7, #1152]	; 0x480
 800dd24:	4b6f      	ldr	r3, [pc, #444]	; (800dee4 <read_EoB+0x204>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d004      	beq.n	800dd36 <read_EoB+0x56>
 800dd2c:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800dd30:	2b0a      	cmp	r3, #10
 800dd32:	f040 80cd 	bne.w	800ded0 <read_EoB+0x1f0>
 800dd36:	f897 2481 	ldrb.w	r2, [r7, #1153]	; 0x481
 800dd3a:	4b6b      	ldr	r3, [pc, #428]	; (800dee8 <read_EoB+0x208>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d004      	beq.n	800dd4c <read_EoB+0x6c>
 800dd42:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f040 80c2 	bne.w	800ded0 <read_EoB+0x1f0>
 800dd4c:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800dd50:	2b0f      	cmp	r3, #15
 800dd52:	f040 80bd 	bne.w	800ded0 <read_EoB+0x1f0>
			  {
				  printf("In: if gTime.Minutes == %d eob\n",eob_minute);
 800dd56:	4b64      	ldr	r3, [pc, #400]	; (800dee8 <read_EoB+0x208>)
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4863      	ldr	r0, [pc, #396]	; (800deec <read_EoB+0x20c>)
 800dd5e:	f00e faa1 	bl	801c2a4 <iprintf>
				  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800dd62:	4b63      	ldr	r3, [pc, #396]	; (800def0 <read_EoB+0x210>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f04f 31ff 	mov.w	r1, #4294967295
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f00a ffbc 	bl	8018ce8 <osMutexWait>
 800dd70:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
//				  printf("In: if gTime.Minutes == 10 \n");
				  if(status_mutex == osOK)
 800dd74:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f040 80a9 	bne.w	800ded0 <read_EoB+0x1f0>
				  {
					  if(pwr_vmon==1){
 800dd7e:	4b5d      	ldr	r3, [pc, #372]	; (800def4 <read_EoB+0x214>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	f040 808f 	bne.w	800dea6 <read_EoB+0x1c6>
				    	if(!uart2busy){
 800dd88:	4b5b      	ldr	r3, [pc, #364]	; (800def8 <read_EoB+0x218>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f083 0301 	eor.w	r3, r3, #1
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00b      	beq.n	800ddae <read_EoB+0xce>
				    		uart2busy = true;
 800dd96:	4b58      	ldr	r3, [pc, #352]	; (800def8 <read_EoB+0x218>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	701a      	strb	r2, [r3, #0]
				    		//				  	  if(!usemqtt)  setup_modem();
				    		if(typemeter==10) read_eob_mk10e();
 800dd9c:	4b57      	ldr	r3, [pc, #348]	; (800defc <read_EoB+0x21c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b0a      	cmp	r3, #10
 800dda2:	d102      	bne.n	800ddaa <read_EoB+0xca>
 800dda4:	f7fd fb84 	bl	800b4b0 <read_eob_mk10e>
 800dda8:	e001      	b.n	800ddae <read_EoB+0xce>
				    		else read_eob_mk6n();
 800ddaa:	f7fc fceb 	bl	800a784 <read_eob_mk6n>
				    	}
				  	  fresult_t = f_mount(&fs_t, "/", 1);
 800ddae:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	4952      	ldr	r1, [pc, #328]	; (800df00 <read_EoB+0x220>)
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f009 fce0 	bl	801777c <f_mount>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  	  if(fresult_t != FR_OK)
 800ddc2:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00d      	beq.n	800dde6 <read_EoB+0x106>
				  	  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800ddca:	494e      	ldr	r1, [pc, #312]	; (800df04 <read_EoB+0x224>)
 800ddcc:	484e      	ldr	r0, [pc, #312]	; (800df08 <read_EoB+0x228>)
 800ddce:	f00e fb07 	bl	801c3e0 <siprintf>
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800ddd2:	484d      	ldr	r0, [pc, #308]	; (800df08 <read_EoB+0x228>)
 800ddd4:	f7f2 fa06 	bl	80001e4 <strlen>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4619      	mov	r1, r3
 800ddde:	484a      	ldr	r0, [pc, #296]	; (800df08 <read_EoB+0x228>)
 800dde0:	f7fa feb8 	bl	8008b54 <tx_com>
 800dde4:	e05f      	b.n	800dea6 <read_EoB+0x1c6>
				  	  }
				  	  else {
				  		  if(!onlineMode){
 800dde6:	4b49      	ldr	r3, [pc, #292]	; (800df0c <read_EoB+0x22c>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f083 0301 	eor.w	r3, r3, #1
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d053      	beq.n	800de9c <read_EoB+0x1bc>
							  if(typemeter == 6) sprintf(buffer, "eobmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800ddf4:	4b41      	ldr	r3, [pc, #260]	; (800defc <read_EoB+0x21c>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b06      	cmp	r3, #6
 800ddfa:	d10e      	bne.n	800de1a <read_EoB+0x13a>
 800ddfc:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800de00:	461a      	mov	r2, r3
 800de02:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800de06:	4619      	mov	r1, r3
 800de08:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	460b      	mov	r3, r1
 800de10:	493f      	ldr	r1, [pc, #252]	; (800df10 <read_EoB+0x230>)
 800de12:	4840      	ldr	r0, [pc, #256]	; (800df14 <read_EoB+0x234>)
 800de14:	f00e fae4 	bl	801c3e0 <siprintf>
 800de18:	e00d      	b.n	800de36 <read_EoB+0x156>
							  else sprintf(buffer, "eobmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800de1a:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800de1e:	461a      	mov	r2, r3
 800de20:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800de24:	4619      	mov	r1, r3
 800de26:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	460b      	mov	r3, r1
 800de2e:	493a      	ldr	r1, [pc, #232]	; (800df18 <read_EoB+0x238>)
 800de30:	4838      	ldr	r0, [pc, #224]	; (800df14 <read_EoB+0x234>)
 800de32:	f00e fad5 	bl	801c3e0 <siprintf>
							    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800de36:	f107 0318 	add.w	r3, r7, #24
 800de3a:	2233      	movs	r2, #51	; 0x33
 800de3c:	4935      	ldr	r1, [pc, #212]	; (800df14 <read_EoB+0x234>)
 800de3e:	4618      	mov	r0, r3
 800de40:	f009 fd00 	bl	8017844 <f_open>
 800de44:	4603      	mov	r3, r0
 800de46:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
							    if(fresult_t != FR_OK)
 800de4a:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00c      	beq.n	800de6c <read_EoB+0x18c>
							    {
							    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800de52:	4932      	ldr	r1, [pc, #200]	; (800df1c <read_EoB+0x23c>)
 800de54:	482c      	ldr	r0, [pc, #176]	; (800df08 <read_EoB+0x228>)
 800de56:	f00e fac3 	bl	801c3e0 <siprintf>
							    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800de5a:	482b      	ldr	r0, [pc, #172]	; (800df08 <read_EoB+0x228>)
 800de5c:	f7f2 f9c2 	bl	80001e4 <strlen>
 800de60:	4603      	mov	r3, r0
 800de62:	b29b      	uxth	r3, r3
 800de64:	4619      	mov	r1, r3
 800de66:	4828      	ldr	r0, [pc, #160]	; (800df08 <read_EoB+0x228>)
 800de68:	f7fa fe74 	bl	8008b54 <tx_com>
							    }
							  // Write some text
							fresult = f_puts(mydata, &fil_t);
 800de6c:	f107 0318 	add.w	r3, r7, #24
 800de70:	4619      	mov	r1, r3
 800de72:	482b      	ldr	r0, [pc, #172]	; (800df20 <read_EoB+0x240>)
 800de74:	f00a fc72 	bl	801875c <f_puts>
 800de78:	4603      	mov	r3, r0
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	4b29      	ldr	r3, [pc, #164]	; (800df24 <read_EoB+0x244>)
 800de7e:	701a      	strb	r2, [r3, #0]
							  // Close file
							printf(buffer);
 800de80:	4824      	ldr	r0, [pc, #144]	; (800df14 <read_EoB+0x234>)
 800de82:	f00e fa0f 	bl	801c2a4 <iprintf>
							printf(" created and data written\r\n");
 800de86:	4828      	ldr	r0, [pc, #160]	; (800df28 <read_EoB+0x248>)
 800de88:	f00e fa92 	bl	801c3b0 <puts>
							f_close(&fil_t);
 800de8c:	f107 0318 	add.w	r3, r7, #24
 800de90:	4618      	mov	r0, r3
 800de92:	f00a fac4 	bl	801841e <f_close>
							onlineMode = true;
 800de96:	4b1d      	ldr	r3, [pc, #116]	; (800df0c <read_EoB+0x22c>)
 800de98:	2201      	movs	r2, #1
 800de9a:	701a      	strb	r2, [r3, #0]
				  		  }
					f_mount(0, "", 0);
 800de9c:	2200      	movs	r2, #0
 800de9e:	4923      	ldr	r1, [pc, #140]	; (800df2c <read_EoB+0x24c>)
 800dea0:	2000      	movs	r0, #0
 800dea2:	f009 fc6b 	bl	801777c <f_mount>
				  }
				}
//			  f_mount(0, "", 0);
//				uart2busy = false;
			  osMutexRelease(myMutex01Handle);
 800dea6:	4b12      	ldr	r3, [pc, #72]	; (800def0 <read_EoB+0x210>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f00a ff6a 	bl	8018d84 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800deb0:	463b      	mov	r3, r7
 800deb2:	2264      	movs	r2, #100	; 0x64
 800deb4:	2106      	movs	r1, #6
 800deb6:	4618      	mov	r0, r3
 800deb8:	f00a feb2 	bl	8018c20 <osSignalWait>
				osSignalSet( readEoBHandle, BIT_1);
 800debc:	4b1c      	ldr	r3, [pc, #112]	; (800df30 <read_EoB+0x250>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2102      	movs	r1, #2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f00a fe6c 	bl	8018ba0 <osSignalSet>
				osDelay(900);
 800dec8:	f44f 7061 	mov.w	r0, #900	; 0x384
 800decc:	f00a fe54 	bl	8018b78 <osDelay>
		  }
	  }
			  secmin1 = gTime.Seconds;
 800ded0:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800ded4:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800ded8:	e709      	b.n	800dcee <read_EoB+0xe>
 800deda:	bf00      	nop
 800dedc:	2000818c 	.word	0x2000818c
 800dee0:	200089f4 	.word	0x200089f4
 800dee4:	200081b7 	.word	0x200081b7
 800dee8:	20008188 	.word	0x20008188
 800deec:	0801fcfc 	.word	0x0801fcfc
 800def0:	2000afa0 	.word	0x2000afa0
 800def4:	2000b50c 	.word	0x2000b50c
 800def8:	2000b000 	.word	0x2000b000
 800defc:	2000b508 	.word	0x2000b508
 800df00:	0801ef30 	.word	0x0801ef30
 800df04:	0801f7a0 	.word	0x0801f7a0
 800df08:	200068bc 	.word	0x200068bc
 800df0c:	20000013 	.word	0x20000013
 800df10:	0801fd1c 	.word	0x0801fd1c
 800df14:	20007244 	.word	0x20007244
 800df18:	0801fd34 	.word	0x0801fd34
 800df1c:	0801f7dc 	.word	0x0801f7dc
 800df20:	200046c8 	.word	0x200046c8
 800df24:	20009054 	.word	0x20009054
 800df28:	0801fd4c 	.word	0x0801fd4c
 800df2c:	0801fa44 	.word	0x0801fa44
 800df30:	2000af9c 	.word	0x2000af9c

0800df34 <read_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_LP */
void read_LP(void const * argument)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800df3a:	af02      	add	r7, sp, #8
 800df3c:	f107 0314 	add.w	r3, r7, #20
 800df40:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
//	  status_delay = osDelay(MINUTE);
//	  if(status_delay == osOK){
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800df42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df46:	2200      	movs	r2, #0
 800df48:	4619      	mov	r1, r3
 800df4a:	48b0      	ldr	r0, [pc, #704]	; (800e20c <read_LP+0x2d8>)
 800df4c:	f005 f949 	bl	80131e2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800df50:	f107 0318 	add.w	r3, r7, #24
 800df54:	2200      	movs	r2, #0
 800df56:	4619      	mov	r1, r3
 800df58:	48ac      	ldr	r0, [pc, #688]	; (800e20c <read_LP+0x2d8>)
 800df5a:	f005 f85f 	bl	801301c <HAL_RTC_GetTime>
//		  if(gTime.Seconds != secmin1) printf(" LP ");
			  if(lp_rec!=0 || ((gTime.Minutes == 0 || gTime.Minutes == 15 || gTime.Minutes == 30 || gTime.Minutes == 45) && gTime.Seconds == 5))
 800df5e:	4bac      	ldr	r3, [pc, #688]	; (800e210 <read_LP+0x2dc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d11a      	bne.n	800df9c <read_LP+0x68>
 800df66:	f107 0318 	add.w	r3, r7, #24
 800df6a:	785b      	ldrb	r3, [r3, #1]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00f      	beq.n	800df90 <read_LP+0x5c>
 800df70:	f107 0318 	add.w	r3, r7, #24
 800df74:	785b      	ldrb	r3, [r3, #1]
 800df76:	2b0f      	cmp	r3, #15
 800df78:	d00a      	beq.n	800df90 <read_LP+0x5c>
 800df7a:	f107 0318 	add.w	r3, r7, #24
 800df7e:	785b      	ldrb	r3, [r3, #1]
 800df80:	2b1e      	cmp	r3, #30
 800df82:	d005      	beq.n	800df90 <read_LP+0x5c>
 800df84:	f107 0318 	add.w	r3, r7, #24
 800df88:	785b      	ldrb	r3, [r3, #1]
 800df8a:	2b2d      	cmp	r3, #45	; 0x2d
 800df8c:	f040 80cd 	bne.w	800e12a <read_LP+0x1f6>
 800df90:	f107 0318 	add.w	r3, r7, #24
 800df94:	789b      	ldrb	r3, [r3, #2]
 800df96:	2b05      	cmp	r3, #5
 800df98:	f040 80c7 	bne.w	800e12a <read_LP+0x1f6>
//			if(lp_rec!=0 || ((gTime.Minutes == 0 || gTime.Minutes == 5 || gTime.Minutes == 10 || gTime.Minutes == 15 || gTime.Minutes == 20 | gTime.Minutes == 25 || gTime.Minutes == 30 || gTime.Minutes == 35 || gTime.Minutes == 40 || gTime.Minutes == 45 || gTime.Minutes == 50 || gTime.Minutes == 55 ) && gTime.Seconds == 10))
			  {
			  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800df9c:	4b9d      	ldr	r3, [pc, #628]	; (800e214 <read_LP+0x2e0>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f00a fe9f 	bl	8018ce8 <osMutexWait>
 800dfaa:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
			  printf("In: if gTime.Minutes == 00/15/30/45 LP \n");
 800dfae:	489a      	ldr	r0, [pc, #616]	; (800e218 <read_LP+0x2e4>)
 800dfb0:	f00e f9fe 	bl	801c3b0 <puts>
			  if(status_mutex == osOK)
 800dfb4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f040 81b1 	bne.w	800e320 <read_LP+0x3ec>
			  {
				  if(pwr_vmon==1){
 800dfbe:	4b97      	ldr	r3, [pc, #604]	; (800e21c <read_LP+0x2e8>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	f040 8096 	bne.w	800e0f4 <read_LP+0x1c0>
					  if(!uart2busy){
 800dfc8:	4b95      	ldr	r3, [pc, #596]	; (800e220 <read_LP+0x2ec>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f083 0301 	eor.w	r3, r3, #1
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00b      	beq.n	800dfee <read_LP+0xba>
						  uart2busy = true;
 800dfd6:	4b92      	ldr	r3, [pc, #584]	; (800e220 <read_LP+0x2ec>)
 800dfd8:	2201      	movs	r2, #1
 800dfda:	701a      	strb	r2, [r3, #0]
						  //			  	  if(!usemqtt)  setup_modem();
						  //			  	  setup_modem();
						  //				  read_lp_mk6n();
						  if(typemeter==10) read_lp_mk10e();
 800dfdc:	4b91      	ldr	r3, [pc, #580]	; (800e224 <read_LP+0x2f0>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b0a      	cmp	r3, #10
 800dfe2:	d102      	bne.n	800dfea <read_LP+0xb6>
 800dfe4:	f7fd fc62 	bl	800b8ac <read_lp_mk10e>
 800dfe8:	e001      	b.n	800dfee <read_LP+0xba>
						  else read_lp_mk6n();
 800dfea:	f7fc fdcd 	bl	800ab88 <read_lp_mk6n>
					  }
				  // Open file to write/create if not exist
				  fresult_t = f_mount(&fs_t, "/", 1);
 800dfee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800dff2:	2201      	movs	r2, #1
 800dff4:	498c      	ldr	r1, [pc, #560]	; (800e228 <read_LP+0x2f4>)
 800dff6:	4618      	mov	r0, r3
 800dff8:	f009 fbc0 	bl	801777c <f_mount>
 800dffc:	4603      	mov	r3, r0
 800dffe:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  if(fresult_t != FR_OK)
 800e002:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00d      	beq.n	800e026 <read_LP+0xf2>
				  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800e00a:	4988      	ldr	r1, [pc, #544]	; (800e22c <read_LP+0x2f8>)
 800e00c:	4888      	ldr	r0, [pc, #544]	; (800e230 <read_LP+0x2fc>)
 800e00e:	f00e f9e7 	bl	801c3e0 <siprintf>
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e012:	4887      	ldr	r0, [pc, #540]	; (800e230 <read_LP+0x2fc>)
 800e014:	f7f2 f8e6 	bl	80001e4 <strlen>
 800e018:	4603      	mov	r3, r0
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4619      	mov	r1, r3
 800e01e:	4884      	ldr	r0, [pc, #528]	; (800e230 <read_LP+0x2fc>)
 800e020:	f7fa fd98 	bl	8008b54 <tx_com>
 800e024:	e06b      	b.n	800e0fe <read_LP+0x1ca>
				  }
				  else {
					  if(!onlineMode){
 800e026:	4b83      	ldr	r3, [pc, #524]	; (800e234 <read_LP+0x300>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	f083 0301 	eor.w	r3, r3, #1
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	d059      	beq.n	800e0e8 <read_LP+0x1b4>
						  if(typemeter==6) sprintf(buffer, "lpmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e034:	4b7b      	ldr	r3, [pc, #492]	; (800e224 <read_LP+0x2f0>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b06      	cmp	r3, #6
 800e03a:	d111      	bne.n	800e060 <read_LP+0x12c>
 800e03c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e040:	789b      	ldrb	r3, [r3, #2]
 800e042:	461a      	mov	r2, r3
 800e044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e048:	785b      	ldrb	r3, [r3, #1]
 800e04a:	4619      	mov	r1, r3
 800e04c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e050:	78db      	ldrb	r3, [r3, #3]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	460b      	mov	r3, r1
 800e056:	4978      	ldr	r1, [pc, #480]	; (800e238 <read_LP+0x304>)
 800e058:	4878      	ldr	r0, [pc, #480]	; (800e23c <read_LP+0x308>)
 800e05a:	f00e f9c1 	bl	801c3e0 <siprintf>
 800e05e:	e010      	b.n	800e082 <read_LP+0x14e>
						  else sprintf(buffer, "lpmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e064:	789b      	ldrb	r3, [r3, #2]
 800e066:	461a      	mov	r2, r3
 800e068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e06c:	785b      	ldrb	r3, [r3, #1]
 800e06e:	4619      	mov	r1, r3
 800e070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e074:	78db      	ldrb	r3, [r3, #3]
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	460b      	mov	r3, r1
 800e07a:	4971      	ldr	r1, [pc, #452]	; (800e240 <read_LP+0x30c>)
 800e07c:	486f      	ldr	r0, [pc, #444]	; (800e23c <read_LP+0x308>)
 800e07e:	f00e f9af 	bl	801c3e0 <siprintf>
						    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800e082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e086:	2233      	movs	r2, #51	; 0x33
 800e088:	496c      	ldr	r1, [pc, #432]	; (800e23c <read_LP+0x308>)
 800e08a:	4618      	mov	r0, r3
 800e08c:	f009 fbda 	bl	8017844 <f_open>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
						    if(fresult_t != FR_OK)
 800e096:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00c      	beq.n	800e0b8 <read_LP+0x184>
						    {
						    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800e09e:	4969      	ldr	r1, [pc, #420]	; (800e244 <read_LP+0x310>)
 800e0a0:	4863      	ldr	r0, [pc, #396]	; (800e230 <read_LP+0x2fc>)
 800e0a2:	f00e f99d 	bl	801c3e0 <siprintf>
						    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e0a6:	4862      	ldr	r0, [pc, #392]	; (800e230 <read_LP+0x2fc>)
 800e0a8:	f7f2 f89c 	bl	80001e4 <strlen>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	485f      	ldr	r0, [pc, #380]	; (800e230 <read_LP+0x2fc>)
 800e0b4:	f7fa fd4e 	bl	8008b54 <tx_com>
						    }
						  // Write some text
						fresult = f_puts(mydata, &fil_t);
 800e0b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4862      	ldr	r0, [pc, #392]	; (800e248 <read_LP+0x314>)
 800e0c0:	f00a fb4c 	bl	801875c <f_puts>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	4b60      	ldr	r3, [pc, #384]	; (800e24c <read_LP+0x318>)
 800e0ca:	701a      	strb	r2, [r3, #0]
						  // Close file
						printf(buffer);
 800e0cc:	485b      	ldr	r0, [pc, #364]	; (800e23c <read_LP+0x308>)
 800e0ce:	f00e f8e9 	bl	801c2a4 <iprintf>
						printf(" created and data written\r\n");
 800e0d2:	485f      	ldr	r0, [pc, #380]	; (800e250 <read_LP+0x31c>)
 800e0d4:	f00e f96c 	bl	801c3b0 <puts>
						f_close(&fil_t);
 800e0d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f00a f99e 	bl	801841e <f_close>
						onlineMode = true;
 800e0e2:	4b54      	ldr	r3, [pc, #336]	; (800e234 <read_LP+0x300>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	701a      	strb	r2, [r3, #0]
					  }
					f_mount(0, "", 0);
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	495a      	ldr	r1, [pc, #360]	; (800e254 <read_LP+0x320>)
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	f009 fb45 	bl	801777c <f_mount>
 800e0f2:	e004      	b.n	800e0fe <read_LP+0x1ca>
				  }
				  }
				  else cnt_lp++;
 800e0f4:	4b58      	ldr	r3, [pc, #352]	; (800e258 <read_LP+0x324>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	4a57      	ldr	r2, [pc, #348]	; (800e258 <read_LP+0x324>)
 800e0fc:	6013      	str	r3, [r2, #0]
				  osMutexRelease(myMutex01Handle);
 800e0fe:	4b45      	ldr	r3, [pc, #276]	; (800e214 <read_LP+0x2e0>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	f00a fe3e 	bl	8018d84 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800e108:	463b      	mov	r3, r7
 800e10a:	2264      	movs	r2, #100	; 0x64
 800e10c:	2106      	movs	r1, #6
 800e10e:	4618      	mov	r0, r3
 800e110:	f00a fd86 	bl	8018c20 <osSignalWait>
				osSignalSet( readLPHandle, BIT_1);
 800e114:	4b51      	ldr	r3, [pc, #324]	; (800e25c <read_LP+0x328>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2102      	movs	r1, #2
 800e11a:	4618      	mov	r0, r3
 800e11c:	f00a fd40 	bl	8018ba0 <osSignalSet>
				osDelay(900);
 800e120:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e124:	f00a fd28 	bl	8018b78 <osDelay>
			  if(status_mutex == osOK)
 800e128:	e0fa      	b.n	800e320 <read_LP+0x3ec>
			  }
//				osDelay(MINUTES);
		  }
			  else if(cnt_lp>0){
 800e12a:	4b4b      	ldr	r3, [pc, #300]	; (800e258 <read_LP+0x324>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f340 80f6 	ble.w	800e320 <read_LP+0x3ec>
				  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800e134:	4b37      	ldr	r3, [pc, #220]	; (800e214 <read_LP+0x2e0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f04f 31ff 	mov.w	r1, #4294967295
 800e13c:	4618      	mov	r0, r3
 800e13e:	f00a fdd3 	bl	8018ce8 <osMutexWait>
 800e142:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
				  printf("In: LP resend %d\n",cnt_lp);
 800e146:	4b44      	ldr	r3, [pc, #272]	; (800e258 <read_LP+0x324>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4619      	mov	r1, r3
 800e14c:	4844      	ldr	r0, [pc, #272]	; (800e260 <read_LP+0x32c>)
 800e14e:	f00e f8a9 	bl	801c2a4 <iprintf>
				  if(status_mutex == osOK)
 800e152:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800e156:	2b00      	cmp	r3, #0
 800e158:	f040 80e2 	bne.w	800e320 <read_LP+0x3ec>
				  {
					  if(pwr_vmon==1){
 800e15c:	4b2f      	ldr	r3, [pc, #188]	; (800e21c <read_LP+0x2e8>)
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	2b01      	cmp	r3, #1
 800e162:	f040 80c8 	bne.w	800e2f6 <read_LP+0x3c2>
						  cnt_lp--;
 800e166:	4b3c      	ldr	r3, [pc, #240]	; (800e258 <read_LP+0x324>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	4a3a      	ldr	r2, [pc, #232]	; (800e258 <read_LP+0x324>)
 800e16e:	6013      	str	r3, [r2, #0]
						  if(!uart2busy){
 800e170:	4b2b      	ldr	r3, [pc, #172]	; (800e220 <read_LP+0x2ec>)
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f083 0301 	eor.w	r3, r3, #1
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00b      	beq.n	800e196 <read_LP+0x262>
							  uart2busy = true;
 800e17e:	4b28      	ldr	r3, [pc, #160]	; (800e220 <read_LP+0x2ec>)
 800e180:	2201      	movs	r2, #1
 800e182:	701a      	strb	r2, [r3, #0]
							  //			  	  if(!usemqtt)  setup_modem();
							  //			  	  setup_modem();
							  //				  read_lp_mk6n();
							  if(typemeter==10) read_lp_mk10e();
 800e184:	4b27      	ldr	r3, [pc, #156]	; (800e224 <read_LP+0x2f0>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b0a      	cmp	r3, #10
 800e18a:	d102      	bne.n	800e192 <read_LP+0x25e>
 800e18c:	f7fd fb8e 	bl	800b8ac <read_lp_mk10e>
 800e190:	e001      	b.n	800e196 <read_LP+0x262>
							  else read_lp_mk6n();
 800e192:	f7fc fcf9 	bl	800ab88 <read_lp_mk6n>
						  }
					  // Open file to write/create if not exist
					  fresult_t = f_mount(&fs_t, "/", 1);
 800e196:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800e19a:	2201      	movs	r2, #1
 800e19c:	4922      	ldr	r1, [pc, #136]	; (800e228 <read_LP+0x2f4>)
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f009 faec 	bl	801777c <f_mount>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
					  if(fresult_t != FR_OK)
 800e1aa:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00d      	beq.n	800e1ce <read_LP+0x29a>
					  {
						  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800e1b2:	491e      	ldr	r1, [pc, #120]	; (800e22c <read_LP+0x2f8>)
 800e1b4:	481e      	ldr	r0, [pc, #120]	; (800e230 <read_LP+0x2fc>)
 800e1b6:	f00e f913 	bl	801c3e0 <siprintf>
						  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e1ba:	481d      	ldr	r0, [pc, #116]	; (800e230 <read_LP+0x2fc>)
 800e1bc:	f7f2 f812 	bl	80001e4 <strlen>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	481a      	ldr	r0, [pc, #104]	; (800e230 <read_LP+0x2fc>)
 800e1c8:	f7fa fcc4 	bl	8008b54 <tx_com>
 800e1cc:	e093      	b.n	800e2f6 <read_LP+0x3c2>
					  }
					  else {
						  if(!onlineMode){
 800e1ce:	4b19      	ldr	r3, [pc, #100]	; (800e234 <read_LP+0x300>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	f083 0301 	eor.w	r3, r3, #1
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f000 8087 	beq.w	800e2ec <read_LP+0x3b8>
							  if(typemeter == 6) sprintf(buffer, "lpmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e1de:	4b11      	ldr	r3, [pc, #68]	; (800e224 <read_LP+0x2f0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b06      	cmp	r3, #6
 800e1e4:	d13e      	bne.n	800e264 <read_LP+0x330>
 800e1e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1ea:	789b      	ldrb	r3, [r3, #2]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1f2:	785b      	ldrb	r3, [r3, #1]
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1fa:	78db      	ldrb	r3, [r3, #3]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	460b      	mov	r3, r1
 800e200:	490d      	ldr	r1, [pc, #52]	; (800e238 <read_LP+0x304>)
 800e202:	480e      	ldr	r0, [pc, #56]	; (800e23c <read_LP+0x308>)
 800e204:	f00e f8ec 	bl	801c3e0 <siprintf>
 800e208:	e03d      	b.n	800e286 <read_LP+0x352>
 800e20a:	bf00      	nop
 800e20c:	2000818c 	.word	0x2000818c
 800e210:	20000644 	.word	0x20000644
 800e214:	2000afa0 	.word	0x2000afa0
 800e218:	0801fd68 	.word	0x0801fd68
 800e21c:	2000b50c 	.word	0x2000b50c
 800e220:	2000b000 	.word	0x2000b000
 800e224:	2000b508 	.word	0x2000b508
 800e228:	0801ef30 	.word	0x0801ef30
 800e22c:	0801f7a0 	.word	0x0801f7a0
 800e230:	200068bc 	.word	0x200068bc
 800e234:	20000013 	.word	0x20000013
 800e238:	0801fd90 	.word	0x0801fd90
 800e23c:	20007244 	.word	0x20007244
 800e240:	0801fda4 	.word	0x0801fda4
 800e244:	0801f7dc 	.word	0x0801f7dc
 800e248:	200046c8 	.word	0x200046c8
 800e24c:	20009054 	.word	0x20009054
 800e250:	0801fd4c 	.word	0x0801fd4c
 800e254:	0801fa44 	.word	0x0801fa44
 800e258:	20000640 	.word	0x20000640
 800e25c:	200046c4 	.word	0x200046c4
 800e260:	0801fdbc 	.word	0x0801fdbc
							  else sprintf(buffer, "lpmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e268:	789b      	ldrb	r3, [r3, #2]
 800e26a:	461a      	mov	r2, r3
 800e26c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e270:	785b      	ldrb	r3, [r3, #1]
 800e272:	4619      	mov	r1, r3
 800e274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e278:	78db      	ldrb	r3, [r3, #3]
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	460b      	mov	r3, r1
 800e27e:	492b      	ldr	r1, [pc, #172]	; (800e32c <read_LP+0x3f8>)
 800e280:	482b      	ldr	r0, [pc, #172]	; (800e330 <read_LP+0x3fc>)
 800e282:	f00e f8ad 	bl	801c3e0 <siprintf>
							    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800e286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e28a:	2233      	movs	r2, #51	; 0x33
 800e28c:	4928      	ldr	r1, [pc, #160]	; (800e330 <read_LP+0x3fc>)
 800e28e:	4618      	mov	r0, r3
 800e290:	f009 fad8 	bl	8017844 <f_open>
 800e294:	4603      	mov	r3, r0
 800e296:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
							    if(fresult_t != FR_OK)
 800e29a:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00c      	beq.n	800e2bc <read_LP+0x388>
							    {
							    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800e2a2:	4924      	ldr	r1, [pc, #144]	; (800e334 <read_LP+0x400>)
 800e2a4:	4824      	ldr	r0, [pc, #144]	; (800e338 <read_LP+0x404>)
 800e2a6:	f00e f89b 	bl	801c3e0 <siprintf>
							    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e2aa:	4823      	ldr	r0, [pc, #140]	; (800e338 <read_LP+0x404>)
 800e2ac:	f7f1 ff9a 	bl	80001e4 <strlen>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4820      	ldr	r0, [pc, #128]	; (800e338 <read_LP+0x404>)
 800e2b8:	f7fa fc4c 	bl	8008b54 <tx_com>
							    }
							  // Write some text
							fresult = f_puts(mydata, &fil_t);
 800e2bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	481e      	ldr	r0, [pc, #120]	; (800e33c <read_LP+0x408>)
 800e2c4:	f00a fa4a 	bl	801875c <f_puts>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	4b1c      	ldr	r3, [pc, #112]	; (800e340 <read_LP+0x40c>)
 800e2ce:	701a      	strb	r2, [r3, #0]
							  // Close file
							printf(buffer);
 800e2d0:	4817      	ldr	r0, [pc, #92]	; (800e330 <read_LP+0x3fc>)
 800e2d2:	f00d ffe7 	bl	801c2a4 <iprintf>
							printf(" created and data written\r\n");
 800e2d6:	481b      	ldr	r0, [pc, #108]	; (800e344 <read_LP+0x410>)
 800e2d8:	f00e f86a 	bl	801c3b0 <puts>
							f_close(&fil_t);
 800e2dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f00a f89c 	bl	801841e <f_close>
							onlineMode = true;
 800e2e6:	4b18      	ldr	r3, [pc, #96]	; (800e348 <read_LP+0x414>)
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	701a      	strb	r2, [r3, #0]
						  }
						f_mount(0, "", 0);
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4917      	ldr	r1, [pc, #92]	; (800e34c <read_LP+0x418>)
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	f009 fa43 	bl	801777c <f_mount>
					  }
					  }
					  osMutexRelease(myMutex01Handle);
 800e2f6:	4b16      	ldr	r3, [pc, #88]	; (800e350 <read_LP+0x41c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f00a fd42 	bl	8018d84 <osMutexRelease>
					osSignalWait( BIT_1 | BIT_2, 100);
 800e300:	463b      	mov	r3, r7
 800e302:	2264      	movs	r2, #100	; 0x64
 800e304:	2106      	movs	r1, #6
 800e306:	4618      	mov	r0, r3
 800e308:	f00a fc8a 	bl	8018c20 <osSignalWait>
					osSignalSet( readLPHandle, BIT_1);
 800e30c:	4b11      	ldr	r3, [pc, #68]	; (800e354 <read_LP+0x420>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2102      	movs	r1, #2
 800e312:	4618      	mov	r0, r3
 800e314:	f00a fc44 	bl	8018ba0 <osSignalSet>
					osDelay(900);
 800e318:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e31c:	f00a fc2c 	bl	8018b78 <osDelay>
				  }
			  }
			  secmin1 = gTime.Seconds;
 800e320:	f107 0318 	add.w	r3, r7, #24
 800e324:	789b      	ldrb	r3, [r3, #2]
 800e326:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800e32a:	e60a      	b.n	800df42 <read_LP+0xe>
 800e32c:	0801fda4 	.word	0x0801fda4
 800e330:	20007244 	.word	0x20007244
 800e334:	0801f7dc 	.word	0x0801f7dc
 800e338:	200068bc 	.word	0x200068bc
 800e33c:	200046c8 	.word	0x200046c8
 800e340:	20009054 	.word	0x20009054
 800e344:	0801fd4c 	.word	0x0801fd4c
 800e348:	20000013 	.word	0x20000013
 800e34c:	0801fa44 	.word	0x0801fa44
 800e350:	2000afa0 	.word	0x2000afa0
 800e354:	200046c4 	.word	0x200046c4

0800e358 <read_instant>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_instant */
void read_instant(void const * argument)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 800e35e:	af02      	add	r7, sp, #8
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	6018      	str	r0, [r3, #0]
  for(;;)
  {
//	  status_delay = osDelay(SECOND);
//	  if(status_delay == osOK)
//	  {
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800e366:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800e36a:	2200      	movs	r2, #0
 800e36c:	4619      	mov	r1, r3
 800e36e:	487a      	ldr	r0, [pc, #488]	; (800e558 <read_instant+0x200>)
 800e370:	f004 ff37 	bl	80131e2 <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800e374:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800e378:	2200      	movs	r2, #0
 800e37a:	4619      	mov	r1, r3
 800e37c:	4876      	ldr	r0, [pc, #472]	; (800e558 <read_instant+0x200>)
 800e37e:	f004 fe4d 	bl	801301c <HAL_RTC_GetTime>
	//	  if((gTime.Hours == 1 || gTime.Hours == 13) && gTime.Minutes == 0 && gTime.Seconds == 0)
//		  if(gTime.Seconds > secmin1) printf(" Instant ");
		  if((gTime.Hours == instant_hour || gTime.Hours == 7 || gTime.Hours == 19) && (gTime.Minutes == 0 || gTime.Minutes == instant_minute ) && gTime.Seconds == 10)
 800e382:	f897 2480 	ldrb.w	r2, [r7, #1152]	; 0x480
 800e386:	4b75      	ldr	r3, [pc, #468]	; (800e55c <read_instant+0x204>)
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d008      	beq.n	800e3a0 <read_instant+0x48>
 800e38e:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800e392:	2b07      	cmp	r3, #7
 800e394:	d004      	beq.n	800e3a0 <read_instant+0x48>
 800e396:	f897 3480 	ldrb.w	r3, [r7, #1152]	; 0x480
 800e39a:	2b13      	cmp	r3, #19
 800e39c:	f040 80d6 	bne.w	800e54c <read_instant+0x1f4>
 800e3a0:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d006      	beq.n	800e3b6 <read_instant+0x5e>
 800e3a8:	f897 2481 	ldrb.w	r2, [r7, #1153]	; 0x481
 800e3ac:	4b6c      	ldr	r3, [pc, #432]	; (800e560 <read_instant+0x208>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	f040 80cb 	bne.w	800e54c <read_instant+0x1f4>
 800e3b6:	f897 3482 	ldrb.w	r3, [r7, #1154]	; 0x482
 800e3ba:	2b0a      	cmp	r3, #10
 800e3bc:	f040 80c6 	bne.w	800e54c <read_instant+0x1f4>
		  {
			  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800e3c0:	4b68      	ldr	r3, [pc, #416]	; (800e564 <read_instant+0x20c>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f00a fc8d 	bl	8018ce8 <osMutexWait>
 800e3ce:	f8c7 049c 	str.w	r0, [r7, #1180]	; 0x49c
			  printf("In: if gTime.Minutes == 16 Instant\n");
 800e3d2:	4865      	ldr	r0, [pc, #404]	; (800e568 <read_instant+0x210>)
 800e3d4:	f00d ffec 	bl	801c3b0 <puts>
			  if(status_mutex == osOK)
 800e3d8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f040 80b5 	bne.w	800e54c <read_instant+0x1f4>
			  {
				  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800e3e2:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	485b      	ldr	r0, [pc, #364]	; (800e558 <read_instant+0x200>)
 800e3ec:	f004 fef9 	bl	80131e2 <HAL_RTC_GetDate>
				  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN); //current time
 800e3f0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	4857      	ldr	r0, [pc, #348]	; (800e558 <read_instant+0x200>)
 800e3fa:	f004 fe0f 	bl	801301c <HAL_RTC_GetTime>
//				  printf("InsDate: %d-%d-%d, %2d:%2d:%2d \n", gDate.Date, gDate.Month, gDate.Year, gTime.Hours, gTime.Minutes, gTime.Seconds);
				  fresult_t = f_mount(&fs_t, "/", 1);
 800e3fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800e402:	2201      	movs	r2, #1
 800e404:	4959      	ldr	r1, [pc, #356]	; (800e56c <read_instant+0x214>)
 800e406:	4618      	mov	r0, r3
 800e408:	f009 f9b8 	bl	801777c <f_mount>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
				  if(fresult_t != FR_OK)
 800e412:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00c      	beq.n	800e434 <read_instant+0xdc>
				  {
					  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800e41a:	4955      	ldr	r1, [pc, #340]	; (800e570 <read_instant+0x218>)
 800e41c:	4855      	ldr	r0, [pc, #340]	; (800e574 <read_instant+0x21c>)
 800e41e:	f00d ffdf 	bl	801c3e0 <siprintf>
					  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e422:	4854      	ldr	r0, [pc, #336]	; (800e574 <read_instant+0x21c>)
 800e424:	f7f1 fede 	bl	80001e4 <strlen>
 800e428:	4603      	mov	r3, r0
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	4619      	mov	r1, r3
 800e42e:	4851      	ldr	r0, [pc, #324]	; (800e574 <read_instant+0x21c>)
 800e430:	f7fa fb90 	bl	8008b54 <tx_com>
				  }
				  if(pwr_vmon==1){
 800e434:	4b50      	ldr	r3, [pc, #320]	; (800e578 <read_instant+0x220>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d16d      	bne.n	800e518 <read_instant+0x1c0>
				    	if(!uart2busy){
 800e43c:	4b4f      	ldr	r3, [pc, #316]	; (800e57c <read_instant+0x224>)
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f083 0301 	eor.w	r3, r3, #1
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00b      	beq.n	800e462 <read_instant+0x10a>
				    		uart2busy = true;
 800e44a:	4b4c      	ldr	r3, [pc, #304]	; (800e57c <read_instant+0x224>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	701a      	strb	r2, [r3, #0]
					  //			  	  if(!usemqtt)  setup_modem();
					  //			  	  setup_modem();
					  //				  read_instant_mk6n();
				    		if(typemeter==10) read_instant_mk10e();
 800e450:	4b4b      	ldr	r3, [pc, #300]	; (800e580 <read_instant+0x228>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b0a      	cmp	r3, #10
 800e456:	d102      	bne.n	800e45e <read_instant+0x106>
 800e458:	f7fc fee8 	bl	800b22c <read_instant_mk10e>
 800e45c:	e001      	b.n	800e462 <read_instant+0x10a>
				    		else read_instant_mk6n();
 800e45e:	f7fc f837 	bl	800a4d0 <read_instant_mk6n>
				    	}
//				  timestamp_now = 12345678;
//				  timestamp_now = 12345678;
				  if(!onlineMode){
 800e462:	4b48      	ldr	r3, [pc, #288]	; (800e584 <read_instant+0x22c>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	f083 0301 	eor.w	r3, r3, #1
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d053      	beq.n	800e518 <read_instant+0x1c0>
					  if(typemeter == 6) sprintf(buffer, "instantmk6n_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e470:	4b43      	ldr	r3, [pc, #268]	; (800e580 <read_instant+0x228>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b06      	cmp	r3, #6
 800e476:	d10e      	bne.n	800e496 <read_instant+0x13e>
 800e478:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800e47c:	461a      	mov	r2, r3
 800e47e:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800e482:	4619      	mov	r1, r3
 800e484:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	460b      	mov	r3, r1
 800e48c:	493e      	ldr	r1, [pc, #248]	; (800e588 <read_instant+0x230>)
 800e48e:	483f      	ldr	r0, [pc, #252]	; (800e58c <read_instant+0x234>)
 800e490:	f00d ffa6 	bl	801c3e0 <siprintf>
 800e494:	e00d      	b.n	800e4b2 <read_instant+0x15a>
					  else sprintf(buffer, "instantmk10e_%d-%d-%d.txt", gDate.Date, gDate.Month, gDate.Year);
 800e496:	f897 3496 	ldrb.w	r3, [r7, #1174]	; 0x496
 800e49a:	461a      	mov	r2, r3
 800e49c:	f897 3495 	ldrb.w	r3, [r7, #1173]	; 0x495
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	4939      	ldr	r1, [pc, #228]	; (800e590 <read_instant+0x238>)
 800e4ac:	4837      	ldr	r0, [pc, #220]	; (800e58c <read_instant+0x234>)
 800e4ae:	f00d ff97 	bl	801c3e0 <siprintf>
					    fresult_t = f_open(&fil_t, buffer, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800e4b2:	f107 0318 	add.w	r3, r7, #24
 800e4b6:	2233      	movs	r2, #51	; 0x33
 800e4b8:	4934      	ldr	r1, [pc, #208]	; (800e58c <read_instant+0x234>)
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f009 f9c2 	bl	8017844 <f_open>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
					    if(fresult_t != FR_OK)
 800e4c6:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00c      	beq.n	800e4e8 <read_instant+0x190>
					    {
					    	sprintf((char*)tx_buffer, "Failed to Open File\n");
 800e4ce:	4931      	ldr	r1, [pc, #196]	; (800e594 <read_instant+0x23c>)
 800e4d0:	4828      	ldr	r0, [pc, #160]	; (800e574 <read_instant+0x21c>)
 800e4d2:	f00d ff85 	bl	801c3e0 <siprintf>
					    	tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e4d6:	4827      	ldr	r0, [pc, #156]	; (800e574 <read_instant+0x21c>)
 800e4d8:	f7f1 fe84 	bl	80001e4 <strlen>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4824      	ldr	r0, [pc, #144]	; (800e574 <read_instant+0x21c>)
 800e4e4:	f7fa fb36 	bl	8008b54 <tx_com>
					    }
					  // Write some text
					fresult = f_puts(mydata, &fil_t);
 800e4e8:	f107 0318 	add.w	r3, r7, #24
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	482a      	ldr	r0, [pc, #168]	; (800e598 <read_instant+0x240>)
 800e4f0:	f00a f934 	bl	801875c <f_puts>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	4b28      	ldr	r3, [pc, #160]	; (800e59c <read_instant+0x244>)
 800e4fa:	701a      	strb	r2, [r3, #0]
					  // Close file
					printf(buffer);
 800e4fc:	4823      	ldr	r0, [pc, #140]	; (800e58c <read_instant+0x234>)
 800e4fe:	f00d fed1 	bl	801c2a4 <iprintf>
					printf(" created and data written\r\n");
 800e502:	4827      	ldr	r0, [pc, #156]	; (800e5a0 <read_instant+0x248>)
 800e504:	f00d ff54 	bl	801c3b0 <puts>
					f_close(&fil_t);
 800e508:	f107 0318 	add.w	r3, r7, #24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f009 ff86 	bl	801841e <f_close>
					onlineMode = true;
 800e512:	4b1c      	ldr	r3, [pc, #112]	; (800e584 <read_instant+0x22c>)
 800e514:	2201      	movs	r2, #1
 800e516:	701a      	strb	r2, [r3, #0]
				}
				  }
				f_mount(0, "", 0);
 800e518:	2200      	movs	r2, #0
 800e51a:	4922      	ldr	r1, [pc, #136]	; (800e5a4 <read_instant+0x24c>)
 800e51c:	2000      	movs	r0, #0
 800e51e:	f009 f92d 	bl	801777c <f_mount>
//				uart2busy = false;
				osMutexRelease(myMutex01Handle);
 800e522:	4b10      	ldr	r3, [pc, #64]	; (800e564 <read_instant+0x20c>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4618      	mov	r0, r3
 800e528:	f00a fc2c 	bl	8018d84 <osMutexRelease>
				osSignalWait( BIT_1 | BIT_2, 100);
 800e52c:	463b      	mov	r3, r7
 800e52e:	2264      	movs	r2, #100	; 0x64
 800e530:	2106      	movs	r1, #6
 800e532:	4618      	mov	r0, r3
 800e534:	f00a fb74 	bl	8018c20 <osSignalWait>
				osSignalSet( readInstantHandle, BIT_1);
 800e538:	4b1b      	ldr	r3, [pc, #108]	; (800e5a8 <read_instant+0x250>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2102      	movs	r1, #2
 800e53e:	4618      	mov	r0, r3
 800e540:	f00a fb2e 	bl	8018ba0 <osSignalSet>
				osDelay(900);
 800e544:	f44f 7061 	mov.w	r0, #900	; 0x384
 800e548:	f00a fb16 	bl	8018b78 <osDelay>
			  }
		  }
		  secmin1 = gTime.Seconds;
 800e54c:	f897 2482 	ldrb.w	r2, [r7, #1154]	; 0x482
 800e550:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <read_instant+0x254>)
 800e552:	701a      	strb	r2, [r3, #0]
		  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN); //current date
 800e554:	e707      	b.n	800e366 <read_instant+0xe>
 800e556:	bf00      	nop
 800e558:	2000818c 	.word	0x2000818c
 800e55c:	20008180 	.word	0x20008180
 800e560:	200081b6 	.word	0x200081b6
 800e564:	2000afa0 	.word	0x2000afa0
 800e568:	0801fdd0 	.word	0x0801fdd0
 800e56c:	0801ef30 	.word	0x0801ef30
 800e570:	0801f7a0 	.word	0x0801f7a0
 800e574:	200068bc 	.word	0x200068bc
 800e578:	2000b50c 	.word	0x2000b50c
 800e57c:	2000b000 	.word	0x2000b000
 800e580:	2000b508 	.word	0x2000b508
 800e584:	20000013 	.word	0x20000013
 800e588:	0801fdf4 	.word	0x0801fdf4
 800e58c:	20007244 	.word	0x20007244
 800e590:	0801fe10 	.word	0x0801fe10
 800e594:	0801f7dc 	.word	0x0801f7dc
 800e598:	200046c8 	.word	0x200046c8
 800e59c:	20009054 	.word	0x20009054
 800e5a0:	0801fd4c 	.word	0x0801fd4c
 800e5a4:	0801fa44 	.word	0x0801fa44
 800e5a8:	2000646c 	.word	0x2000646c
 800e5ac:	20006468 	.word	0x20006468

0800e5b0 <send_hard_bit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_hard_bit */
void send_hard_bit(void const * argument)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	1d3b      	adds	r3, r7, #4
 800e5ba:	6018      	str	r0, [r3, #0]
	  RTC_TimeTypeDef gTime;
	  FATFS fs_t;
	  FIL fil_t;
	  FRESULT fresult_t;

	  status_mutex = osMutexWait(myMutex01Handle, osWaitForever);
 800e5bc:	4b45      	ldr	r3, [pc, #276]	; (800e6d4 <send_hard_bit+0x124>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f00a fb8f 	bl	8018ce8 <osMutexWait>
 800e5ca:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
	    if(status_mutex == osOK)
 800e5ce:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d17d      	bne.n	800e6d2 <send_hard_bit+0x122>
	    {
	  	  fresult_t = f_mount(&fs_t, "/", 1);
 800e5d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800e5da:	2201      	movs	r2, #1
 800e5dc:	493e      	ldr	r1, [pc, #248]	; (800e6d8 <send_hard_bit+0x128>)
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f009 f8cc 	bl	801777c <f_mount>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	  	  if(fresult_t != FR_OK)
 800e5ea:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00d      	beq.n	800e60e <send_hard_bit+0x5e>
	  	  {
	  		  sprintf((char*)tx_buffer, "Failed to mount SD Card\n");
 800e5f2:	493a      	ldr	r1, [pc, #232]	; (800e6dc <send_hard_bit+0x12c>)
 800e5f4:	483a      	ldr	r0, [pc, #232]	; (800e6e0 <send_hard_bit+0x130>)
 800e5f6:	f00d fef3 	bl	801c3e0 <siprintf>
	  		  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e5fa:	4839      	ldr	r0, [pc, #228]	; (800e6e0 <send_hard_bit+0x130>)
 800e5fc:	f7f1 fdf2 	bl	80001e4 <strlen>
 800e600:	4603      	mov	r3, r0
 800e602:	b29b      	uxth	r3, r3
 800e604:	4619      	mov	r1, r3
 800e606:	4836      	ldr	r0, [pc, #216]	; (800e6e0 <send_hard_bit+0x130>)
 800e608:	f7fa faa4 	bl	8008b54 <tx_com>
 800e60c:	e05c      	b.n	800e6c8 <send_hard_bit+0x118>
	  	  }
	  	  else
	  	  {
	  		  fresult_t = f_open(&fil_t, "config.txt", FA_READ );
 800e60e:	f107 0308 	add.w	r3, r7, #8
 800e612:	2201      	movs	r2, #1
 800e614:	4933      	ldr	r1, [pc, #204]	; (800e6e4 <send_hard_bit+0x134>)
 800e616:	4618      	mov	r0, r3
 800e618:	f009 f914 	bl	8017844 <f_open>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	  		  if(fresult_t != FR_OK)
 800e622:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00d      	beq.n	800e646 <send_hard_bit+0x96>
	  		  {
	  			  sprintf((char*)tx_buffer, "Failed to Open File\n");
 800e62a:	492f      	ldr	r1, [pc, #188]	; (800e6e8 <send_hard_bit+0x138>)
 800e62c:	482c      	ldr	r0, [pc, #176]	; (800e6e0 <send_hard_bit+0x130>)
 800e62e:	f00d fed7 	bl	801c3e0 <siprintf>
	  			  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e632:	482b      	ldr	r0, [pc, #172]	; (800e6e0 <send_hard_bit+0x130>)
 800e634:	f7f1 fdd6 	bl	80001e4 <strlen>
 800e638:	4603      	mov	r3, r0
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	4619      	mov	r1, r3
 800e63e:	4828      	ldr	r0, [pc, #160]	; (800e6e0 <send_hard_bit+0x130>)
 800e640:	f7fa fa88 	bl	8008b54 <tx_com>
 800e644:	e03b      	b.n	800e6be <send_hard_bit+0x10e>
	  		  }
	  		  else
	  		  {
	  			  sprintf((char*)tx_buffer, "Heart Beat time configured\n");
 800e646:	4929      	ldr	r1, [pc, #164]	; (800e6ec <send_hard_bit+0x13c>)
 800e648:	4825      	ldr	r0, [pc, #148]	; (800e6e0 <send_hard_bit+0x130>)
 800e64a:	f00d fec9 	bl	801c3e0 <siprintf>
	  			  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800e64e:	4824      	ldr	r0, [pc, #144]	; (800e6e0 <send_hard_bit+0x130>)
 800e650:	f7f1 fdc8 	bl	80001e4 <strlen>
 800e654:	4603      	mov	r3, r0
 800e656:	b29b      	uxth	r3, r3
 800e658:	4619      	mov	r1, r3
 800e65a:	4821      	ldr	r0, [pc, #132]	; (800e6e0 <send_hard_bit+0x130>)
 800e65c:	f7fa fa7a 	bl	8008b54 <tx_com>
	  			  f_gets(buffer2, sizeof(buffer2), &fil_t); // Read Time of EoB Config from SD Card
 800e660:	f107 0308 	add.w	r3, r7, #8
 800e664:	461a      	mov	r2, r3
 800e666:	f240 414c 	movw	r1, #1100	; 0x44c
 800e66a:	4821      	ldr	r0, [pc, #132]	; (800e6f0 <send_hard_bit+0x140>)
 800e66c:	f009 ffc2 	bl	80185f4 <f_gets>
	  			  eob_hour = atoi(buffer2);
 800e670:	481f      	ldr	r0, [pc, #124]	; (800e6f0 <send_hard_bit+0x140>)
 800e672:	f00d f8b3 	bl	801b7dc <atoi>
 800e676:	4603      	mov	r3, r0
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <send_hard_bit+0x144>)
 800e67c:	701a      	strb	r2, [r3, #0]
	  			  printf("\nEOB HOUR: %d\r\n", eob_hour);
 800e67e:	4b1d      	ldr	r3, [pc, #116]	; (800e6f4 <send_hard_bit+0x144>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	4619      	mov	r1, r3
 800e684:	481c      	ldr	r0, [pc, #112]	; (800e6f8 <send_hard_bit+0x148>)
 800e686:	f00d fe0d 	bl	801c2a4 <iprintf>
	  			  f_gets(buffer2, sizeof(buffer2), &fil_t);
 800e68a:	f107 0308 	add.w	r3, r7, #8
 800e68e:	461a      	mov	r2, r3
 800e690:	f240 414c 	movw	r1, #1100	; 0x44c
 800e694:	4816      	ldr	r0, [pc, #88]	; (800e6f0 <send_hard_bit+0x140>)
 800e696:	f009 ffad 	bl	80185f4 <f_gets>
	  			  eob_minute = atoi(buffer2);
 800e69a:	4815      	ldr	r0, [pc, #84]	; (800e6f0 <send_hard_bit+0x140>)
 800e69c:	f00d f89e 	bl	801b7dc <atoi>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	4b15      	ldr	r3, [pc, #84]	; (800e6fc <send_hard_bit+0x14c>)
 800e6a6:	701a      	strb	r2, [r3, #0]
	  			  printf("\nEOB MINUTE: %d\r\n", eob_minute);
 800e6a8:	4b14      	ldr	r3, [pc, #80]	; (800e6fc <send_hard_bit+0x14c>)
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4814      	ldr	r0, [pc, #80]	; (800e700 <send_hard_bit+0x150>)
 800e6b0:	f00d fdf8 	bl	801c2a4 <iprintf>
	  			  f_close(&fil_t);
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f009 feb0 	bl	801841e <f_close>
	  		  }
	  		  f_mount(0, "", 0);
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4910      	ldr	r1, [pc, #64]	; (800e704 <send_hard_bit+0x154>)
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f009 f85a 	bl	801777c <f_mount>
	  	  }
	  	osMutexRelease(myMutex01Handle);
 800e6c8:	4b02      	ldr	r3, [pc, #8]	; (800e6d4 <send_hard_bit+0x124>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f00a fb59 	bl	8018d84 <osMutexRelease>
	    }
	  /* Infinite loop */
	  for(;;)
 800e6d2:	e7fe      	b.n	800e6d2 <send_hard_bit+0x122>
 800e6d4:	2000afa0 	.word	0x2000afa0
 800e6d8:	0801ef30 	.word	0x0801ef30
 800e6dc:	0801f7a0 	.word	0x0801f7a0
 800e6e0:	200068bc 	.word	0x200068bc
 800e6e4:	0801f9ac 	.word	0x0801f9ac
 800e6e8:	0801f7dc 	.word	0x0801f7dc
 800e6ec:	0801fe2c 	.word	0x0801fe2c
 800e6f0:	20006d80 	.word	0x20006d80
 800e6f4:	200081b7 	.word	0x200081b7
 800e6f8:	0801fe48 	.word	0x0801fe48
 800e6fc:	20008188 	.word	0x20008188
 800e700:	0801fe58 	.word	0x0801fe58
 800e704:	0801fa44 	.word	0x0801fa44

0800e708 <check_vbat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_check_vbat */
void check_vbat(void const * argument)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b088      	sub	sp, #32
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_vbat */
	uint32_t adc1;
	int cnt=0;
 800e710:	2300      	movs	r3, #0
 800e712:	61fb      	str	r3, [r7, #28]
	float vbat_percen,counter,div;
  /* Infinite loop */

  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800e714:	482e      	ldr	r0, [pc, #184]	; (800e7d0 <check_vbat+0xc8>)
 800e716:	f000 ffdd 	bl	800f6d4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 800e71a:	2164      	movs	r1, #100	; 0x64
 800e71c:	482c      	ldr	r0, [pc, #176]	; (800e7d0 <check_vbat+0xc8>)
 800e71e:	f001 f86f 	bl	800f800 <HAL_ADC_PollForConversion>
	  adc1 = HAL_ADC_GetValue(&hadc1);
 800e722:	482b      	ldr	r0, [pc, #172]	; (800e7d0 <check_vbat+0xc8>)
 800e724:	f001 f8f4 	bl	800f910 <HAL_ADC_GetValue>
 800e728:	6178      	str	r0, [r7, #20]
	  HAL_ADC_Stop(&hadc1);
 800e72a:	4829      	ldr	r0, [pc, #164]	; (800e7d0 <check_vbat+0xc8>)
 800e72c:	f001 f835 	bl	800f79a <HAL_ADC_Stop>
	  counter = (float)(adc1 - 498);
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800e736:	ee07 3a90 	vmov	s15, r3
 800e73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e73e:	edc7 7a04 	vstr	s15, [r7, #16]
	  div = 640 - 498;
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <check_vbat+0xcc>)
 800e744:	60fb      	str	r3, [r7, #12]
	  vbat_percen = counter/div*100;
 800e746:	edd7 6a04 	vldr	s13, [r7, #16]
 800e74a:	ed97 7a03 	vldr	s14, [r7, #12]
 800e74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e752:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e7d8 <check_vbat+0xd0>
 800e756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e75a:	edc7 7a06 	vstr	s15, [r7, #24]
	  vbat_percentage = vbat_percen;
 800e75e:	4a1f      	ldr	r2, [pc, #124]	; (800e7dc <check_vbat+0xd4>)
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	6013      	str	r3, [r2, #0]
//	  if(vbat_percen<0) vbat_percen=0;
	  if(vbat_percen>100 && vbat_percen<200) vbat_percen=100;
 800e764:	edd7 7a06 	vldr	s15, [r7, #24]
 800e768:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e7d8 <check_vbat+0xd0>
 800e76c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e774:	dd0b      	ble.n	800e78e <check_vbat+0x86>
 800e776:	edd7 7a06 	vldr	s15, [r7, #24]
 800e77a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e7e0 <check_vbat+0xd8>
 800e77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e786:	d502      	bpl.n	800e78e <check_vbat+0x86>
 800e788:	4b16      	ldr	r3, [pc, #88]	; (800e7e4 <check_vbat+0xdc>)
 800e78a:	61bb      	str	r3, [r7, #24]
 800e78c:	e00b      	b.n	800e7a6 <check_vbat+0x9e>
	  else if(vbat_percen>=200) vbat_percen=0;
 800e78e:	edd7 7a06 	vldr	s15, [r7, #24]
 800e792:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e7e0 <check_vbat+0xd8>
 800e796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	db02      	blt.n	800e7a6 <check_vbat+0x9e>
 800e7a0:	f04f 0300 	mov.w	r3, #0
 800e7a4:	61bb      	str	r3, [r7, #24]
	  if(cnt>=5) {
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	2b04      	cmp	r3, #4
 800e7aa:	dd09      	ble.n	800e7c0 <check_vbat+0xb8>
		  printf("VBAT Percent: %.2f \r\n",vbat_percen);
 800e7ac:	69b8      	ldr	r0, [r7, #24]
 800e7ae:	f7f1 fedb 	bl	8000568 <__aeabi_f2d>
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	480c      	ldr	r0, [pc, #48]	; (800e7e8 <check_vbat+0xe0>)
 800e7b8:	f00d fd74 	bl	801c2a4 <iprintf>
		  cnt = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	61fb      	str	r3, [r7, #28]
	  }
	  osDelay(1000);
 800e7c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e7c4:	f00a f9d8 	bl	8018b78 <osDelay>
	  cnt++;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	61fb      	str	r3, [r7, #28]
	  HAL_ADC_Start(&hadc1);
 800e7ce:	e7a1      	b.n	800e714 <check_vbat+0xc>
 800e7d0:	20006d1c 	.word	0x20006d1c
 800e7d4:	430e0000 	.word	0x430e0000
 800e7d8:	42c80000 	.word	0x42c80000
 800e7dc:	20005770 	.word	0x20005770
 800e7e0:	43480000 	.word	0x43480000
 800e7e4:	42c80000 	.word	0x42c80000
 800e7e8:	0801fe6c 	.word	0x0801fe6c

0800e7ec <check_vmon>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_check_vmon */
void check_vmon(void const * argument)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_vmon */
//	  osStatus status_mutex;
	uint8_t cnt=0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]
//	osDelay(3000);
  /* Infinite loop */
  for(;;)
  {
	  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e7fe:	f001 ffed 	bl	80107dc <HAL_GPIO_ReadPin>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	4b05      	ldr	r3, [pc, #20]	; (800e81c <check_vmon+0x30>)
 800e808:	701a      	strb	r2, [r3, #0]
//	    		uart2busy = false;
//			osMutexRelease(myMutex01Handle);
//			osSignalWait( BIT_1 | BIT_2, 1000);
//			osSignalSet( checkVMonHandle, BIT_1);
//		}
		osDelay(1000);
 800e80a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e80e:	f00a f9b3 	bl	8018b78 <osDelay>
		cnt++;
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	3301      	adds	r3, #1
 800e816:	73fb      	strb	r3, [r7, #15]
	  pwr_vmon = HAL_GPIO_ReadPin(PWR_VMON_GPIO_Port,PWR_VMON_Pin);
 800e818:	e7ee      	b.n	800e7f8 <check_vmon+0xc>
 800e81a:	bf00      	nop
 800e81c:	2000b50c 	.word	0x2000b50c

0800e820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e830:	d101      	bne.n	800e836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e832:	f000 fbc1 	bl	800efb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e836:	bf00      	nop
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e83e:	b480      	push	{r7}
 800e840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e842:	bf00      	nop
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e852:	4b0f      	ldr	r3, [pc, #60]	; (800e890 <HAL_MspInit+0x44>)
 800e854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e856:	4a0e      	ldr	r2, [pc, #56]	; (800e890 <HAL_MspInit+0x44>)
 800e858:	f043 0301 	orr.w	r3, r3, #1
 800e85c:	6613      	str	r3, [r2, #96]	; 0x60
 800e85e:	4b0c      	ldr	r3, [pc, #48]	; (800e890 <HAL_MspInit+0x44>)
 800e860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	607b      	str	r3, [r7, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e86a:	4b09      	ldr	r3, [pc, #36]	; (800e890 <HAL_MspInit+0x44>)
 800e86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e86e:	4a08      	ldr	r2, [pc, #32]	; (800e890 <HAL_MspInit+0x44>)
 800e870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e874:	6593      	str	r3, [r2, #88]	; 0x58
 800e876:	4b06      	ldr	r3, [pc, #24]	; (800e890 <HAL_MspInit+0x44>)
 800e878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e882:	bf00      	nop
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	40021000 	.word	0x40021000

0800e894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08a      	sub	sp, #40	; 0x28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e89c:	f107 0314 	add.w	r3, r7, #20
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	605a      	str	r2, [r3, #4]
 800e8a6:	609a      	str	r2, [r3, #8]
 800e8a8:	60da      	str	r2, [r3, #12]
 800e8aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a15      	ldr	r2, [pc, #84]	; (800e908 <HAL_ADC_MspInit+0x74>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d124      	bne.n	800e900 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e8b6:	4b15      	ldr	r3, [pc, #84]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8ba:	4a14      	ldr	r2, [pc, #80]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e8c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e8c2:	4b12      	ldr	r3, [pc, #72]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8ca:	613b      	str	r3, [r7, #16]
 800e8cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8ce:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8d2:	4a0e      	ldr	r2, [pc, #56]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8d4:	f043 0301 	orr.w	r3, r3, #1
 800e8d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e8da:	4b0c      	ldr	r3, [pc, #48]	; (800e90c <HAL_ADC_MspInit+0x78>)
 800e8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	60fb      	str	r3, [r7, #12]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = PWR_VBAT_Pin;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWR_VBAT_GPIO_Port, &GPIO_InitStruct);
 800e8f2:	f107 0314 	add.w	r3, r7, #20
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e8fc:	f001 fdf4 	bl	80104e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e900:	bf00      	nop
 800e902:	3728      	adds	r7, #40	; 0x28
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	50040000 	.word	0x50040000
 800e90c:	40021000 	.word	0x40021000

0800e910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e918:	f107 0314 	add.w	r3, r7, #20
 800e91c:	2200      	movs	r2, #0
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	605a      	str	r2, [r3, #4]
 800e922:	609a      	str	r2, [r3, #8]
 800e924:	60da      	str	r2, [r3, #12]
 800e926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a17      	ldr	r2, [pc, #92]	; (800e98c <HAL_I2C_MspInit+0x7c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d128      	bne.n	800e984 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e932:	4b17      	ldr	r3, [pc, #92]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e936:	4a16      	ldr	r2, [pc, #88]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e938:	f043 0302 	orr.w	r3, r3, #2
 800e93c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e93e:	4b14      	ldr	r3, [pc, #80]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e942:	f003 0302 	and.w	r3, r3, #2
 800e946:	613b      	str	r3, [r7, #16]
 800e948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e94a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e94e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e950:	2312      	movs	r3, #18
 800e952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e954:	2301      	movs	r3, #1
 800e956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e958:	2303      	movs	r3, #3
 800e95a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e95c:	2304      	movs	r3, #4
 800e95e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e960:	f107 0314 	add.w	r3, r7, #20
 800e964:	4619      	mov	r1, r3
 800e966:	480b      	ldr	r0, [pc, #44]	; (800e994 <HAL_I2C_MspInit+0x84>)
 800e968:	f001 fdbe 	bl	80104e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e96c:	4b08      	ldr	r3, [pc, #32]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e970:	4a07      	ldr	r2, [pc, #28]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e976:	6593      	str	r3, [r2, #88]	; 0x58
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <HAL_I2C_MspInit+0x80>)
 800e97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e97c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e980:	60fb      	str	r3, [r7, #12]
 800e982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e984:	bf00      	nop
 800e986:	3728      	adds	r7, #40	; 0x28
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	40005400 	.word	0x40005400
 800e990:	40021000 	.word	0x40021000
 800e994:	48000400 	.word	0x48000400

0800e998 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a08      	ldr	r2, [pc, #32]	; (800e9c8 <HAL_RTC_MspInit+0x30>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d107      	bne.n	800e9ba <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e9aa:	4b08      	ldr	r3, [pc, #32]	; (800e9cc <HAL_RTC_MspInit+0x34>)
 800e9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9b0:	4a06      	ldr	r2, [pc, #24]	; (800e9cc <HAL_RTC_MspInit+0x34>)
 800e9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e9ba:	bf00      	nop
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	40002800 	.word	0x40002800
 800e9cc:	40021000 	.word	0x40021000

0800e9d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	; 0x28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9d8:	f107 0314 	add.w	r3, r7, #20
 800e9dc:	2200      	movs	r2, #0
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	605a      	str	r2, [r3, #4]
 800e9e2:	609a      	str	r2, [r3, #8]
 800e9e4:	60da      	str	r2, [r3, #12]
 800e9e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a17      	ldr	r2, [pc, #92]	; (800ea4c <HAL_SPI_MspInit+0x7c>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d128      	bne.n	800ea44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e9f2:	4b17      	ldr	r3, [pc, #92]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800e9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f6:	4a16      	ldr	r2, [pc, #88]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800e9f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e9fc:	6593      	str	r3, [r2, #88]	; 0x58
 800e9fe:	4b14      	ldr	r3, [pc, #80]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800ea00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea06:	613b      	str	r3, [r7, #16]
 800ea08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea0a:	4b11      	ldr	r3, [pc, #68]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800ea0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea0e:	4a10      	ldr	r2, [pc, #64]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800ea10:	f043 0302 	orr.w	r3, r3, #2
 800ea14:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ea16:	4b0e      	ldr	r3, [pc, #56]	; (800ea50 <HAL_SPI_MspInit+0x80>)
 800ea18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea1a:	f003 0302 	and.w	r3, r3, #2
 800ea1e:	60fb      	str	r3, [r7, #12]
 800ea20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800ea22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ea26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea28:	2302      	movs	r3, #2
 800ea2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea30:	2303      	movs	r3, #3
 800ea32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ea34:	2305      	movs	r3, #5
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea38:	f107 0314 	add.w	r3, r7, #20
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4805      	ldr	r0, [pc, #20]	; (800ea54 <HAL_SPI_MspInit+0x84>)
 800ea40:	f001 fd52 	bl	80104e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ea44:	bf00      	nop
 800ea46:	3728      	adds	r7, #40	; 0x28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	40003800 	.word	0x40003800
 800ea50:	40021000 	.word	0x40021000
 800ea54:	48000400 	.word	0x48000400

0800ea58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08e      	sub	sp, #56	; 0x38
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	605a      	str	r2, [r3, #4]
 800ea6a:	609a      	str	r2, [r3, #8]
 800ea6c:	60da      	str	r2, [r3, #12]
 800ea6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a53      	ldr	r2, [pc, #332]	; (800ebc4 <HAL_UART_MspInit+0x16c>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d132      	bne.n	800eae0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ea7a:	4b53      	ldr	r3, [pc, #332]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800ea7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea7e:	4a52      	ldr	r2, [pc, #328]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800ea80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea84:	6613      	str	r3, [r2, #96]	; 0x60
 800ea86:	4b50      	ldr	r3, [pc, #320]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800ea88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea8e:	623b      	str	r3, [r7, #32]
 800ea90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea92:	4b4d      	ldr	r3, [pc, #308]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800ea94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea96:	4a4c      	ldr	r2, [pc, #304]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800ea98:	f043 0301 	orr.w	r3, r3, #1
 800ea9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ea9e:	4b4a      	ldr	r3, [pc, #296]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eaa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaa2:	f003 0301 	and.w	r3, r3, #1
 800eaa6:	61fb      	str	r3, [r7, #28]
 800eaa8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800eaaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800eaae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eab0:	2302      	movs	r3, #2
 800eab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eab4:	2300      	movs	r3, #0
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eab8:	2303      	movs	r3, #3
 800eaba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800eabc:	2307      	movs	r3, #7
 800eabe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eac4:	4619      	mov	r1, r3
 800eac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800eaca:	f001 fd0d 	bl	80104e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800eace:	2200      	movs	r2, #0
 800ead0:	2105      	movs	r1, #5
 800ead2:	2025      	movs	r0, #37	; 0x25
 800ead4:	f001 fc9c 	bl	8010410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ead8:	2025      	movs	r0, #37	; 0x25
 800eada:	f001 fcb5 	bl	8010448 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800eade:	e06c      	b.n	800ebba <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a39      	ldr	r2, [pc, #228]	; (800ebcc <HAL_UART_MspInit+0x174>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d131      	bne.n	800eb4e <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800eaea:	4b37      	ldr	r3, [pc, #220]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaee:	4a36      	ldr	r2, [pc, #216]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eaf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaf4:	6593      	str	r3, [r2, #88]	; 0x58
 800eaf6:	4b34      	ldr	r3, [pc, #208]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eaf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eafe:	61bb      	str	r3, [r7, #24]
 800eb00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb02:	4b31      	ldr	r3, [pc, #196]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb06:	4a30      	ldr	r2, [pc, #192]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb08:	f043 0301 	orr.w	r3, r3, #1
 800eb0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eb0e:	4b2e      	ldr	r3, [pc, #184]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	617b      	str	r3, [r7, #20]
 800eb18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800eb1a:	230c      	movs	r3, #12
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb1e:	2302      	movs	r3, #2
 800eb20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb26:	2303      	movs	r3, #3
 800eb28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800eb2a:	2307      	movs	r3, #7
 800eb2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb32:	4619      	mov	r1, r3
 800eb34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800eb38:	f001 fcd6 	bl	80104e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2105      	movs	r1, #5
 800eb40:	2026      	movs	r0, #38	; 0x26
 800eb42:	f001 fc65 	bl	8010410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800eb46:	2026      	movs	r0, #38	; 0x26
 800eb48:	f001 fc7e 	bl	8010448 <HAL_NVIC_EnableIRQ>
}
 800eb4c:	e035      	b.n	800ebba <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART3)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4a1f      	ldr	r2, [pc, #124]	; (800ebd0 <HAL_UART_MspInit+0x178>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d130      	bne.n	800ebba <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 800eb58:	4b1b      	ldr	r3, [pc, #108]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb5c:	4a1a      	ldr	r2, [pc, #104]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb62:	6593      	str	r3, [r2, #88]	; 0x58
 800eb64:	4b18      	ldr	r3, [pc, #96]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb6c:	613b      	str	r3, [r7, #16]
 800eb6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb70:	4b15      	ldr	r3, [pc, #84]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb74:	4a14      	ldr	r2, [pc, #80]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb76:	f043 0302 	orr.w	r3, r3, #2
 800eb7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eb7c:	4b12      	ldr	r3, [pc, #72]	; (800ebc8 <HAL_UART_MspInit+0x170>)
 800eb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb80:	f003 0302 	and.w	r3, r3, #2
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800eb88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb92:	2300      	movs	r3, #0
 800eb94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb96:	2303      	movs	r3, #3
 800eb98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800eb9a:	2307      	movs	r3, #7
 800eb9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eba2:	4619      	mov	r1, r3
 800eba4:	480b      	ldr	r0, [pc, #44]	; (800ebd4 <HAL_UART_MspInit+0x17c>)
 800eba6:	f001 fc9f 	bl	80104e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800ebaa:	2200      	movs	r2, #0
 800ebac:	2105      	movs	r1, #5
 800ebae:	2027      	movs	r0, #39	; 0x27
 800ebb0:	f001 fc2e 	bl	8010410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ebb4:	2027      	movs	r0, #39	; 0x27
 800ebb6:	f001 fc47 	bl	8010448 <HAL_NVIC_EnableIRQ>
}
 800ebba:	bf00      	nop
 800ebbc:	3738      	adds	r7, #56	; 0x38
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	40013800 	.word	0x40013800
 800ebc8:	40021000 	.word	0x40021000
 800ebcc:	40004400 	.word	0x40004400
 800ebd0:	40004800 	.word	0x40004800
 800ebd4:	48000400 	.word	0x48000400

0800ebd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08c      	sub	sp, #48	; 0x30
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800ebe8:	2200      	movs	r2, #0
 800ebea:	6879      	ldr	r1, [r7, #4]
 800ebec:	201c      	movs	r0, #28
 800ebee:	f001 fc0f 	bl	8010410 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ebf2:	201c      	movs	r0, #28
 800ebf4:	f001 fc28 	bl	8010448 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ebf8:	4b1f      	ldr	r3, [pc, #124]	; (800ec78 <HAL_InitTick+0xa0>)
 800ebfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfc:	4a1e      	ldr	r2, [pc, #120]	; (800ec78 <HAL_InitTick+0xa0>)
 800ebfe:	f043 0301 	orr.w	r3, r3, #1
 800ec02:	6593      	str	r3, [r2, #88]	; 0x58
 800ec04:	4b1c      	ldr	r3, [pc, #112]	; (800ec78 <HAL_InitTick+0xa0>)
 800ec06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
 800ec0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ec10:	f107 0210 	add.w	r2, r7, #16
 800ec14:	f107 0314 	add.w	r3, r7, #20
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f003 fd3a 	bl	8012694 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ec20:	f003 fd0c 	bl	801263c <HAL_RCC_GetPCLK1Freq>
 800ec24:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	4a14      	ldr	r2, [pc, #80]	; (800ec7c <HAL_InitTick+0xa4>)
 800ec2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec2e:	0c9b      	lsrs	r3, r3, #18
 800ec30:	3b01      	subs	r3, #1
 800ec32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ec34:	4b12      	ldr	r3, [pc, #72]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ec3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800ec3c:	4b10      	ldr	r3, [pc, #64]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ec42:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ec44:	4a0e      	ldr	r2, [pc, #56]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ec4a:	4b0d      	ldr	r3, [pc, #52]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec52:	2200      	movs	r2, #0
 800ec54:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ec56:	480a      	ldr	r0, [pc, #40]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec58:	f005 f929 	bl	8013eae <HAL_TIM_Base_Init>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d104      	bne.n	800ec6c <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ec62:	4807      	ldr	r0, [pc, #28]	; (800ec80 <HAL_InitTick+0xa8>)
 800ec64:	f005 f958 	bl	8013f18 <HAL_TIM_Base_Start_IT>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	e000      	b.n	800ec6e <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3730      	adds	r7, #48	; 0x30
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	40021000 	.word	0x40021000
 800ec7c:	431bde83 	.word	0x431bde83
 800ec80:	2000b514 	.word	0x2000b514

0800ec84 <tx_com>:
  if(Timer2 > 0)
    Timer2--;
}

static void tx_com( uint8_t *tx_buffer, uint16_t len )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit( &huart1, tx_buffer, len, 1000 );
 800ec90:	887a      	ldrh	r2, [r7, #2]
 800ec92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	4803      	ldr	r0, [pc, #12]	; (800eca8 <tx_com+0x24>)
 800ec9a:	f005 fb7f 	bl	801439c <HAL_UART_Transmit>
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20002fe0 	.word	0x20002fe0

0800ecac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ecac:	b480      	push	{r7}
 800ecae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ecb0:	bf00      	nop
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ecbe:	e7fe      	b.n	800ecbe <HardFault_Handler+0x4>

0800ecc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ecc4:	e7fe      	b.n	800ecc4 <MemManage_Handler+0x4>

0800ecc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ecca:	e7fe      	b.n	800ecca <BusFault_Handler+0x4>

0800eccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ecd0:	e7fe      	b.n	800ecd0 <UsageFault_Handler+0x4>

0800ecd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ecd6:	bf00      	nop
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(LSM6DSL_INT1_Pin))
 800ece4:	4b0c      	ldr	r3, [pc, #48]	; (800ed18 <EXTI9_5_IRQHandler+0x38>)
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	f003 0320 	and.w	r3, r3, #32
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00e      	beq.n	800ed0e <EXTI9_5_IRQHandler+0x2e>
  {
	  sprintf((char*)tx_buffer, "Interrupted\n");
 800ecf0:	490a      	ldr	r1, [pc, #40]	; (800ed1c <EXTI9_5_IRQHandler+0x3c>)
 800ecf2:	480b      	ldr	r0, [pc, #44]	; (800ed20 <EXTI9_5_IRQHandler+0x40>)
 800ecf4:	f00d fb74 	bl	801c3e0 <siprintf>
	  tx_com( tx_buffer, strlen( (char const*)tx_buffer ) );
 800ecf8:	4809      	ldr	r0, [pc, #36]	; (800ed20 <EXTI9_5_IRQHandler+0x40>)
 800ecfa:	f7f1 fa73 	bl	80001e4 <strlen>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	4619      	mov	r1, r3
 800ed04:	4806      	ldr	r0, [pc, #24]	; (800ed20 <EXTI9_5_IRQHandler+0x40>)
 800ed06:	f7ff ffbd 	bl	800ec84 <tx_com>
//	  osSignalSet( readGyroHandle, BIT_1 | BIT_2);
	  runGyro();
 800ed0a:	f7f9 feb7 	bl	8008a7c <runGyro>
  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800ed0e:	2020      	movs	r0, #32
 800ed10:	f001 fd94 	bl	801083c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ed14:	bf00      	nop
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	40010400 	.word	0x40010400
 800ed1c:	0801fe84 	.word	0x0801fe84
 800ed20:	200068bc 	.word	0x200068bc

0800ed24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ed28:	4802      	ldr	r0, [pc, #8]	; (800ed34 <TIM2_IRQHandler+0x10>)
 800ed2a:	f005 f91f 	bl	8013f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ed2e:	bf00      	nop
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	2000b514 	.word	0x2000b514

0800ed38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ed3c:	4802      	ldr	r0, [pc, #8]	; (800ed48 <USART1_IRQHandler+0x10>)
 800ed3e:	f005 fc63 	bl	8014608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ed42:	bf00      	nop
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20002fe0 	.word	0x20002fe0

0800ed4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ed50:	4802      	ldr	r0, [pc, #8]	; (800ed5c <USART2_IRQHandler+0x10>)
 800ed52:	f005 fc59 	bl	8014608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ed56:	bf00      	nop
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200038e4 	.word	0x200038e4

0800ed60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ed64:	4802      	ldr	r0, [pc, #8]	; (800ed70 <USART3_IRQHandler+0x10>)
 800ed66:	f005 fc4f 	bl	8014608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ed6a:	bf00      	nop
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20002770 	.word	0x20002770

0800ed74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ed74:	b480      	push	{r7}
 800ed76:	af00      	add	r7, sp, #0
	return 1;
 800ed78:	2301      	movs	r3, #1
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <_kill>:

int _kill(int pid, int sig)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ed8e:	f00c fd2d 	bl	801b7ec <__errno>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2216      	movs	r2, #22
 800ed96:	601a      	str	r2, [r3, #0]
	return -1;
 800ed98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <_exit>:

void _exit (int status)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800edac:	f04f 31ff 	mov.w	r1, #4294967295
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff ffe7 	bl	800ed84 <_kill>
	while (1) {}		/* Make sure we hang here */
 800edb6:	e7fe      	b.n	800edb6 <_exit+0x12>

0800edb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]
 800edc8:	e00a      	b.n	800ede0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800edca:	f3af 8000 	nop.w
 800edce:	4601      	mov	r1, r0
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	1c5a      	adds	r2, r3, #1
 800edd4:	60ba      	str	r2, [r7, #8]
 800edd6:	b2ca      	uxtb	r2, r1
 800edd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	3301      	adds	r3, #1
 800edde:	617b      	str	r3, [r7, #20]
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	dbf0      	blt.n	800edca <_read+0x12>
	}

return len;
 800ede8:	687b      	ldr	r3, [r7, #4]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <_close>:
	}
	return len;
}

int _close(int file)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
	return -1;
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee1a:	605a      	str	r2, [r3, #4]
	return 0;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	370c      	adds	r7, #12
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <_isatty>:

int _isatty(int file)
{
 800ee2a:	b480      	push	{r7}
 800ee2c:	b083      	sub	sp, #12
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
	return 1;
 800ee32:	2301      	movs	r3, #1
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
	return 0;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
	...

0800ee5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ee64:	4a14      	ldr	r2, [pc, #80]	; (800eeb8 <_sbrk+0x5c>)
 800ee66:	4b15      	ldr	r3, [pc, #84]	; (800eebc <_sbrk+0x60>)
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ee70:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <_sbrk+0x64>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d102      	bne.n	800ee7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ee78:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <_sbrk+0x64>)
 800ee7a:	4a12      	ldr	r2, [pc, #72]	; (800eec4 <_sbrk+0x68>)
 800ee7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ee7e:	4b10      	ldr	r3, [pc, #64]	; (800eec0 <_sbrk+0x64>)
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4413      	add	r3, r2
 800ee86:	693a      	ldr	r2, [r7, #16]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d207      	bcs.n	800ee9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ee8c:	f00c fcae 	bl	801b7ec <__errno>
 800ee90:	4603      	mov	r3, r0
 800ee92:	220c      	movs	r2, #12
 800ee94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ee96:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9a:	e009      	b.n	800eeb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ee9c:	4b08      	ldr	r3, [pc, #32]	; (800eec0 <_sbrk+0x64>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eea2:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <_sbrk+0x64>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4413      	add	r3, r2
 800eeaa:	4a05      	ldr	r2, [pc, #20]	; (800eec0 <_sbrk+0x64>)
 800eeac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eeae:	68fb      	ldr	r3, [r7, #12]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	20010000 	.word	0x20010000
 800eebc:	00000400 	.word	0x00000400
 800eec0:	2000064c 	.word	0x2000064c
 800eec4:	2000ba20 	.word	0x2000ba20

0800eec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eecc:	4b17      	ldr	r3, [pc, #92]	; (800ef2c <SystemInit+0x64>)
 800eece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eed2:	4a16      	ldr	r2, [pc, #88]	; (800ef2c <SystemInit+0x64>)
 800eed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800eedc:	4b14      	ldr	r3, [pc, #80]	; (800ef30 <SystemInit+0x68>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a13      	ldr	r2, [pc, #76]	; (800ef30 <SystemInit+0x68>)
 800eee2:	f043 0301 	orr.w	r3, r3, #1
 800eee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800eee8:	4b11      	ldr	r3, [pc, #68]	; (800ef30 <SystemInit+0x68>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800eeee:	4b10      	ldr	r3, [pc, #64]	; (800ef30 <SystemInit+0x68>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4a0f      	ldr	r2, [pc, #60]	; (800ef30 <SystemInit+0x68>)
 800eef4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800eef8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800eefc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800eefe:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <SystemInit+0x68>)
 800ef00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ef04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ef06:	4b0a      	ldr	r3, [pc, #40]	; (800ef30 <SystemInit+0x68>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a09      	ldr	r2, [pc, #36]	; (800ef30 <SystemInit+0x68>)
 800ef0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800ef12:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <SystemInit+0x68>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef18:	4b04      	ldr	r3, [pc, #16]	; (800ef2c <SystemInit+0x64>)
 800ef1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef1e:	609a      	str	r2, [r3, #8]
#endif
}
 800ef20:	bf00      	nop
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	e000ed00 	.word	0xe000ed00
 800ef30:	40021000 	.word	0x40021000

0800ef34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ef34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800ef38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800ef3a:	e003      	b.n	800ef44 <LoopCopyDataInit>

0800ef3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ef3c:	4b0c      	ldr	r3, [pc, #48]	; (800ef70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ef3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ef40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ef42:	3104      	adds	r1, #4

0800ef44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ef44:	480b      	ldr	r0, [pc, #44]	; (800ef74 <LoopForever+0xa>)
	ldr	r3, =_edata
 800ef46:	4b0c      	ldr	r3, [pc, #48]	; (800ef78 <LoopForever+0xe>)
	adds	r2, r0, r1
 800ef48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800ef4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800ef4c:	d3f6      	bcc.n	800ef3c <CopyDataInit>
	ldr	r2, =_sbss
 800ef4e:	4a0b      	ldr	r2, [pc, #44]	; (800ef7c <LoopForever+0x12>)
	b	LoopFillZerobss
 800ef50:	e002      	b.n	800ef58 <LoopFillZerobss>

0800ef52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800ef52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800ef54:	f842 3b04 	str.w	r3, [r2], #4

0800ef58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800ef58:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <LoopForever+0x16>)
	cmp	r2, r3
 800ef5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ef5c:	d3f9      	bcc.n	800ef52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ef5e:	f7ff ffb3 	bl	800eec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef62:	f00c fc49 	bl	801b7f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ef66:	f7fc ff41 	bl	800bdec <main>

0800ef6a <LoopForever>:

LoopForever:
    b LoopForever
 800ef6a:	e7fe      	b.n	800ef6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ef6c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800ef70:	080207c0 	.word	0x080207c0
	ldr	r0, =_sdata
 800ef74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ef78:	20000380 	.word	0x20000380
	ldr	r2, =_sbss
 800ef7c:	20000380 	.word	0x20000380
	ldr	r3, = _ebss
 800ef80:	2000ba1c 	.word	0x2000ba1c

0800ef84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ef84:	e7fe      	b.n	800ef84 <ADC1_IRQHandler>

0800ef86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ef90:	2003      	movs	r0, #3
 800ef92:	f001 fa32 	bl	80103fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ef96:	2000      	movs	r0, #0
 800ef98:	f7ff fe1e 	bl	800ebd8 <HAL_InitTick>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	71fb      	strb	r3, [r7, #7]
 800efa6:	e001      	b.n	800efac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800efa8:	f7ff fc50 	bl	800e84c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800efac:	79fb      	ldrb	r3, [r7, #7]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800efb8:	b480      	push	{r7}
 800efba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800efbc:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <HAL_IncTick+0x1c>)
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <HAL_IncTick+0x20>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4413      	add	r3, r2
 800efc6:	4a03      	ldr	r2, [pc, #12]	; (800efd4 <HAL_IncTick+0x1c>)
 800efc8:	6013      	str	r3, [r2, #0]
}
 800efca:	bf00      	nop
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	2000b558 	.word	0x2000b558
 800efd8:	20000194 	.word	0x20000194

0800efdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
  return uwTick;
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <HAL_GetTick+0x14>)
 800efe2:	681b      	ldr	r3, [r3, #0]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	2000b558 	.word	0x2000b558

0800eff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800effc:	f7ff ffee 	bl	800efdc <HAL_GetTick>
 800f000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d004      	beq.n	800f018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800f00e:	4b09      	ldr	r3, [pc, #36]	; (800f034 <HAL_Delay+0x40>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	4413      	add	r3, r2
 800f016:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f018:	bf00      	nop
 800f01a:	f7ff ffdf 	bl	800efdc <HAL_GetTick>
 800f01e:	4602      	mov	r2, r0
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	429a      	cmp	r2, r3
 800f028:	d8f7      	bhi.n	800f01a <HAL_Delay+0x26>
  {
  }
}
 800f02a:	bf00      	nop
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	20000194 	.word	0x20000194

0800f038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	689b      	ldr	r3, [r3, #8]
 800f046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	431a      	orrs	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	609a      	str	r2, [r3, #8]
}
 800f052:	bf00      	nop
 800f054:	370c      	adds	r7, #12
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800f05e:	b480      	push	{r7}
 800f060:	b083      	sub	sp, #12
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
 800f066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	431a      	orrs	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	609a      	str	r2, [r3, #8]
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800f094:	4618      	mov	r0, r3
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800f0a0:	b490      	push	{r4, r7}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3360      	adds	r3, #96	; 0x60
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800f0bc:	6822      	ldr	r2, [r4, #0]
 800f0be:	4b08      	ldr	r3, [pc, #32]	; (800f0e0 <LL_ADC_SetOffset+0x40>)
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800f0c8:	683a      	ldr	r2, [r7, #0]
 800f0ca:	430a      	orrs	r2, r1
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f0d2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800f0d4:	bf00      	nop
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bc90      	pop	{r4, r7}
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	03fff000 	.word	0x03fff000

0800f0e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800f0e4:	b490      	push	{r4, r7}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3360      	adds	r3, #96	; 0x60
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800f102:	4618      	mov	r0, r3
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bc90      	pop	{r4, r7}
 800f10a:	4770      	bx	lr

0800f10c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800f10c:	b490      	push	{r4, r7}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3360      	adds	r3, #96	; 0x60
 800f11c:	461a      	mov	r2, r3
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4313      	orrs	r3, r2
 800f130:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800f132:	bf00      	nop
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bc90      	pop	{r4, r7}
 800f13a:	4770      	bx	lr

0800f13c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800f150:	2301      	movs	r3, #1
 800f152:	e000      	b.n	800f156 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800f162:	b490      	push	{r4, r7}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3330      	adds	r3, #48	; 0x30
 800f172:	461a      	mov	r2, r3
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	0a1b      	lsrs	r3, r3, #8
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	f003 030c 	and.w	r3, r3, #12
 800f17e:	4413      	add	r3, r2
 800f180:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800f182:	6822      	ldr	r2, [r4, #0]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f003 031f 	and.w	r3, r3, #31
 800f18a:	211f      	movs	r1, #31
 800f18c:	fa01 f303 	lsl.w	r3, r1, r3
 800f190:	43db      	mvns	r3, r3
 800f192:	401a      	ands	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	0e9b      	lsrs	r3, r3, #26
 800f198:	f003 011f 	and.w	r1, r3, #31
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	f003 031f 	and.w	r3, r3, #31
 800f1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800f1aa:	bf00      	nop
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bc90      	pop	{r4, r7}
 800f1b2:	4770      	bx	lr

0800f1b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800f1b4:	b490      	push	{r4, r7}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3314      	adds	r3, #20
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	0e5b      	lsrs	r3, r3, #25
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	4413      	add	r3, r2
 800f1d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	0d1b      	lsrs	r3, r3, #20
 800f1da:	f003 031f 	and.w	r3, r3, #31
 800f1de:	2107      	movs	r1, #7
 800f1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f1e4:	43db      	mvns	r3, r3
 800f1e6:	401a      	ands	r2, r3
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	0d1b      	lsrs	r3, r3, #20
 800f1ec:	f003 031f 	and.w	r3, r3, #31
 800f1f0:	6879      	ldr	r1, [r7, #4]
 800f1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800f1fa:	bf00      	nop
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bc90      	pop	{r4, r7}
 800f202:	4770      	bx	lr

0800f204 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f21c:	43db      	mvns	r3, r3
 800f21e:	401a      	ands	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f003 0318 	and.w	r3, r3, #24
 800f226:	4908      	ldr	r1, [pc, #32]	; (800f248 <LL_ADC_SetChannelSingleDiff+0x44>)
 800f228:	40d9      	lsrs	r1, r3
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	400b      	ands	r3, r1
 800f22e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f232:	431a      	orrs	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	0007ffff 	.word	0x0007ffff

0800f24c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800f25c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	6093      	str	r3, [r2, #8]
}
 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f284:	d101      	bne.n	800f28a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800f286:	2301      	movs	r3, #1
 800f288:	e000      	b.n	800f28c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800f2a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f2ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f2d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2d4:	d101      	bne.n	800f2da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e000      	b.n	800f2dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f2fc:	f043 0201 	orr.w	r2, r3, #1
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f324:	f043 0202 	orr.w	r2, r3, #2
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	f003 0301 	and.w	r3, r3, #1
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d101      	bne.n	800f350 <LL_ADC_IsEnabled+0x18>
 800f34c:	2301      	movs	r3, #1
 800f34e:	e000      	b.n	800f352 <LL_ADC_IsEnabled+0x1a>
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	370c      	adds	r7, #12
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800f35e:	b480      	push	{r7}
 800f360:	b083      	sub	sp, #12
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f003 0302 	and.w	r3, r3, #2
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d101      	bne.n	800f376 <LL_ADC_IsDisableOngoing+0x18>
 800f372:	2301      	movs	r3, #1
 800f374:	e000      	b.n	800f378 <LL_ADC_IsDisableOngoing+0x1a>
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f398:	f043 0204 	orr.w	r2, r3, #4
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800f3a0:	bf00      	nop
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f3c0:	f043 0210 	orr.w	r2, r3, #16
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	f003 0304 	and.w	r3, r3, #4
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	d101      	bne.n	800f3ec <LL_ADC_REG_IsConversionOngoing+0x18>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e000      	b.n	800f3ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f40a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f40e:	f043 0220 	orr.w	r2, r3, #32
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800f416:	bf00      	nop
 800f418:	370c      	adds	r7, #12
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800f422:	b480      	push	{r7}
 800f424:	b083      	sub	sp, #12
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	f003 0308 	and.w	r3, r3, #8
 800f432:	2b08      	cmp	r3, #8
 800f434:	d101      	bne.n	800f43a <LL_ADC_INJ_IsConversionOngoing+0x18>
 800f436:	2301      	movs	r3, #1
 800f438:	e000      	b.n	800f43c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b088      	sub	sp, #32
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f450:	2300      	movs	r3, #0
 800f452:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800f454:	2300      	movs	r3, #0
 800f456:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	e12a      	b.n	800f6b8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff fa0f 	bl	800e894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fef1 	bl	800f270 <LL_ADC_IsDeepPowerDownEnabled>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d004      	beq.n	800f49e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fed7 	bl	800f24c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff ff0c 	bl	800f2c0 <LL_ADC_IsInternalRegulatorEnabled>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d113      	bne.n	800f4d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff fef0 	bl	800f298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800f4b8:	4b81      	ldr	r3, [pc, #516]	; (800f6c0 <HAL_ADC_Init+0x278>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	099b      	lsrs	r3, r3, #6
 800f4be:	4a81      	ldr	r2, [pc, #516]	; (800f6c4 <HAL_ADC_Init+0x27c>)
 800f4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c4:	099b      	lsrs	r3, r3, #6
 800f4c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f4c8:	e002      	b.n	800f4d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1f9      	bne.n	800f4ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff fef0 	bl	800f2c0 <LL_ADC_IsInternalRegulatorEnabled>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d10d      	bne.n	800f502 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ea:	f043 0210 	orr.w	r2, r3, #16
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4f6:	f043 0201 	orr.w	r2, r3, #1
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff ff64 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800f50c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f512:	f003 0310 	and.w	r3, r3, #16
 800f516:	2b00      	cmp	r3, #0
 800f518:	f040 80c5 	bne.w	800f6a6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f040 80c1 	bne.w	800f6a6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f52c:	f043 0202 	orr.w	r2, r3, #2
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7ff fefd 	bl	800f338 <LL_ADC_IsEnabled>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10b      	bne.n	800f55c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800f544:	4860      	ldr	r0, [pc, #384]	; (800f6c8 <HAL_ADC_Init+0x280>)
 800f546:	f7ff fef7 	bl	800f338 <LL_ADC_IsEnabled>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d105      	bne.n	800f55c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	4619      	mov	r1, r3
 800f556:	485d      	ldr	r0, [pc, #372]	; (800f6cc <HAL_ADC_Init+0x284>)
 800f558:	f7ff fd6e 	bl	800f038 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	7e5b      	ldrb	r3, [r3, #25]
 800f560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800f56c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800f572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f57a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800f57c:	4313      	orrs	r3, r2
 800f57e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f586:	2b01      	cmp	r3, #1
 800f588:	d106      	bne.n	800f598 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	3b01      	subs	r3, #1
 800f590:	045b      	lsls	r3, r3, #17
 800f592:	69ba      	ldr	r2, [r7, #24]
 800f594:	4313      	orrs	r3, r2
 800f596:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d009      	beq.n	800f5b4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800f5ae:	69ba      	ldr	r2, [r7, #24]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68da      	ldr	r2, [r3, #12]
 800f5ba:	4b45      	ldr	r3, [pc, #276]	; (800f6d0 <HAL_ADC_Init+0x288>)
 800f5bc:	4013      	ands	r3, r2
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	6812      	ldr	r2, [r2, #0]
 800f5c2:	69b9      	ldr	r1, [r7, #24]
 800f5c4:	430b      	orrs	r3, r1
 800f5c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff ff01 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800f5d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff ff22 	bl	800f422 <LL_ADC_INJ_IsConversionOngoing>
 800f5de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d13d      	bne.n	800f662 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d13a      	bne.n	800f662 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f5f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f5f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f608:	f023 0302 	bic.w	r3, r3, #2
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	6812      	ldr	r2, [r2, #0]
 800f610:	69b9      	ldr	r1, [r7, #24]
 800f612:	430b      	orrs	r3, r1
 800f614:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d118      	bne.n	800f652 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f62a:	f023 0304 	bic.w	r3, r3, #4
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f636:	4311      	orrs	r1, r2
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f63c:	4311      	orrs	r1, r2
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f642:	430a      	orrs	r2, r1
 800f644:	431a      	orrs	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f042 0201 	orr.w	r2, r2, #1
 800f64e:	611a      	str	r2, [r3, #16]
 800f650:	e007      	b.n	800f662 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	691a      	ldr	r2, [r3, #16]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f022 0201 	bic.w	r2, r2, #1
 800f660:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d10c      	bne.n	800f684 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f670:	f023 010f 	bic.w	r1, r3, #15
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	69db      	ldr	r3, [r3, #28]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	430a      	orrs	r2, r1
 800f680:	631a      	str	r2, [r3, #48]	; 0x30
 800f682:	e007      	b.n	800f694 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f022 020f 	bic.w	r2, r2, #15
 800f692:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f698:	f023 0303 	bic.w	r3, r3, #3
 800f69c:	f043 0201 	orr.w	r2, r3, #1
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	655a      	str	r2, [r3, #84]	; 0x54
 800f6a4:	e007      	b.n	800f6b6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6aa:	f043 0210 	orr.w	r2, r3, #16
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800f6b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3720      	adds	r7, #32
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	2000018c 	.word	0x2000018c
 800f6c4:	053e2d63 	.word	0x053e2d63
 800f6c8:	50040000 	.word	0x50040000
 800f6cc:	50040300 	.word	0x50040300
 800f6d0:	fff0c007 	.word	0xfff0c007

0800f6d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff fe77 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d14f      	bne.n	800f78c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d101      	bne.n	800f6fa <HAL_ADC_Start+0x26>
 800f6f6:	2302      	movs	r3, #2
 800f6f8:	e04b      	b.n	800f792 <HAL_ADC_Start+0xbe>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fd1a 	bl	801013c <ADC_Enable>
 800f708:	4603      	mov	r3, r0
 800f70a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d137      	bne.n	800f782 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f716:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f71a:	f023 0301 	bic.w	r3, r3, #1
 800f71e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f72a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f732:	d106      	bne.n	800f742 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f738:	f023 0206 	bic.w	r2, r3, #6
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	659a      	str	r2, [r3, #88]	; 0x58
 800f740:	e002      	b.n	800f748 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	221c      	movs	r2, #28
 800f74e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f76a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f76e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7ff fe02 	bl	800f384 <LL_ADC_REG_StartConversion>
 800f780:	e006      	b.n	800f790 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800f78a:	e001      	b.n	800f790 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f78c:	2302      	movs	r3, #2
 800f78e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800f790:	7bfb      	ldrb	r3, [r7, #15]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b084      	sub	sp, #16
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d101      	bne.n	800f7b0 <HAL_ADC_Stop+0x16>
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	e023      	b.n	800f7f8 <HAL_ADC_Stop+0x5e>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800f7b8:	2103      	movs	r1, #3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 fc0a 	bl	800ffd4 <ADC_ConversionStop>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d111      	bne.n	800f7ee <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 fd10 	bl	80101f0 <ADC_Disable>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d109      	bne.n	800f7ee <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f7e2:	f023 0301 	bic.w	r3, r3, #1
 800f7e6:	f043 0201 	orr.w	r2, r3, #1
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	2b08      	cmp	r3, #8
 800f810:	d102      	bne.n	800f818 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800f812:	2308      	movs	r3, #8
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e010      	b.n	800f83a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d007      	beq.n	800f836 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82a:	f043 0220 	orr.w	r2, r3, #32
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	e068      	b.n	800f908 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800f836:	2304      	movs	r3, #4
 800f838:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f83a:	f7ff fbcf 	bl	800efdc <HAL_GetTick>
 800f83e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f840:	e01a      	b.n	800f878 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f848:	d016      	beq.n	800f878 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800f84a:	f7ff fbc7 	bl	800efdc <HAL_GetTick>
 800f84e:	4602      	mov	r2, r0
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d302      	bcc.n	800f860 <HAL_ADC_PollForConversion+0x60>
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10b      	bne.n	800f878 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f864:	f043 0204 	orr.w	r2, r3, #4
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f874:	2303      	movs	r3, #3
 800f876:	e047      	b.n	800f908 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	4013      	ands	r3, r2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0dd      	beq.n	800f842 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff fc50 	bl	800f13c <LL_ADC_REG_IsTriggerSourceSWStart>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d01c      	beq.n	800f8dc <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7e5b      	ldrb	r3, [r3, #25]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d118      	bne.n	800f8dc <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f003 0308 	and.w	r3, r3, #8
 800f8b4:	2b08      	cmp	r3, #8
 800f8b6:	d111      	bne.n	800f8dc <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d105      	bne.n	800f8dc <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8d4:	f043 0201 	orr.w	r2, r3, #1
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2b08      	cmp	r3, #8
 800f8e8:	d104      	bne.n	800f8f4 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2208      	movs	r2, #8
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	e008      	b.n	800f906 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d103      	bne.n	800f906 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	220c      	movs	r2, #12
 800f904:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f91e:	4618      	mov	r0, r3
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
	...

0800f92c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b0a6      	sub	sp, #152	; 0x98
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f936:	2300      	movs	r3, #0
 800f938:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800f93c:	2300      	movs	r3, #0
 800f93e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f946:	2b01      	cmp	r3, #1
 800f948:	d101      	bne.n	800f94e <HAL_ADC_ConfigChannel+0x22>
 800f94a:	2302      	movs	r3, #2
 800f94c:	e338      	b.n	800ffc0 <HAL_ADC_ConfigChannel+0x694>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2201      	movs	r2, #1
 800f952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff fd3a 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	f040 831d 	bne.w	800ffa2 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	2b05      	cmp	r3, #5
 800f96e:	d824      	bhi.n	800f9ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	3b02      	subs	r3, #2
 800f976:	2b03      	cmp	r3, #3
 800f978:	d81b      	bhi.n	800f9b2 <HAL_ADC_ConfigChannel+0x86>
 800f97a:	a201      	add	r2, pc, #4	; (adr r2, 800f980 <HAL_ADC_ConfigChannel+0x54>)
 800f97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f980:	0800f991 	.word	0x0800f991
 800f984:	0800f999 	.word	0x0800f999
 800f988:	0800f9a1 	.word	0x0800f9a1
 800f98c:	0800f9a9 	.word	0x0800f9a9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	220c      	movs	r2, #12
 800f994:	605a      	str	r2, [r3, #4]
 800f996:	e011      	b.n	800f9bc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2212      	movs	r2, #18
 800f99c:	605a      	str	r2, [r3, #4]
 800f99e:	e00d      	b.n	800f9bc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	2218      	movs	r2, #24
 800f9a4:	605a      	str	r2, [r3, #4]
 800f9a6:	e009      	b.n	800f9bc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9ae:	605a      	str	r2, [r3, #4]
 800f9b0:	e004      	b.n	800f9bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2206      	movs	r2, #6
 800f9b6:	605a      	str	r2, [r3, #4]
 800f9b8:	e000      	b.n	800f9bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800f9ba:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6818      	ldr	r0, [r3, #0]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	6859      	ldr	r1, [r3, #4]
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	f7ff fbca 	bl	800f162 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7ff fcfe 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800f9d8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff fd1e 	bl	800f422 <LL_ADC_INJ_IsConversionOngoing>
 800f9e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f9ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f040 8148 	bne.w	800fc84 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f9f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f040 8143 	bne.w	800fc84 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6818      	ldr	r0, [r3, #0]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	6819      	ldr	r1, [r3, #0]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	f7ff fbd2 	bl	800f1b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	695a      	ldr	r2, [r3, #20]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	08db      	lsrs	r3, r3, #3
 800fa1c:	f003 0303 	and.w	r3, r3, #3
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	fa02 f303 	lsl.w	r3, r2, r3
 800fa26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	d00a      	beq.n	800fa48 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	6919      	ldr	r1, [r3, #16]
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa42:	f7ff fb2d 	bl	800f0a0 <LL_ADC_SetOffset>
 800fa46:	e11d      	b.n	800fc84 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff fb48 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10a      	bne.n	800fa74 <HAL_ADC_ConfigChannel+0x148>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2100      	movs	r1, #0
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff fb3d 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	0e9b      	lsrs	r3, r3, #26
 800fa6e:	f003 021f 	and.w	r2, r3, #31
 800fa72:	e012      	b.n	800fa9a <HAL_ADC_ConfigChannel+0x16e>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2100      	movs	r1, #0
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7ff fb32 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fa86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa8a:	fa93 f3a3 	rbit	r3, r3
 800fa8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800fa90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa92:	fab3 f383 	clz	r3, r3
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	461a      	mov	r2, r3
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d105      	bne.n	800fab2 <HAL_ADC_ConfigChannel+0x186>
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	0e9b      	lsrs	r3, r3, #26
 800faac:	f003 031f 	and.w	r3, r3, #31
 800fab0:	e00a      	b.n	800fac8 <HAL_ADC_ConfigChannel+0x19c>
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800faba:	fa93 f3a3 	rbit	r3, r3
 800fabe:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800fac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fac2:	fab3 f383 	clz	r3, r3
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	429a      	cmp	r2, r3
 800faca:	d106      	bne.n	800fada <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2200      	movs	r2, #0
 800fad2:	2100      	movs	r1, #0
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff fb19 	bl	800f10c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2101      	movs	r1, #1
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff faff 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fae6:	4603      	mov	r3, r0
 800fae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10a      	bne.n	800fb06 <HAL_ADC_ConfigChannel+0x1da>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2101      	movs	r1, #1
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff faf4 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fafc:	4603      	mov	r3, r0
 800fafe:	0e9b      	lsrs	r3, r3, #26
 800fb00:	f003 021f 	and.w	r2, r3, #31
 800fb04:	e010      	b.n	800fb28 <HAL_ADC_ConfigChannel+0x1fc>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	2101      	movs	r1, #1
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fae9 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fb12:	4603      	mov	r3, r0
 800fb14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb18:	fa93 f3a3 	rbit	r3, r3
 800fb1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800fb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb20:	fab3 f383 	clz	r3, r3
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	461a      	mov	r2, r3
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d105      	bne.n	800fb40 <HAL_ADC_ConfigChannel+0x214>
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	0e9b      	lsrs	r3, r3, #26
 800fb3a:	f003 031f 	and.w	r3, r3, #31
 800fb3e:	e00a      	b.n	800fb56 <HAL_ADC_ConfigChannel+0x22a>
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb48:	fa93 f3a3 	rbit	r3, r3
 800fb4c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800fb4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb50:	fab3 f383 	clz	r3, r3
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d106      	bne.n	800fb68 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	2101      	movs	r1, #1
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff fad2 	bl	800f10c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2102      	movs	r1, #2
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7ff fab8 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fb74:	4603      	mov	r3, r0
 800fb76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10a      	bne.n	800fb94 <HAL_ADC_ConfigChannel+0x268>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2102      	movs	r1, #2
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff faad 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	0e9b      	lsrs	r3, r3, #26
 800fb8e:	f003 021f 	and.w	r2, r3, #31
 800fb92:	e010      	b.n	800fbb6 <HAL_ADC_ConfigChannel+0x28a>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2102      	movs	r1, #2
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff faa2 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fba0:	4603      	mov	r3, r0
 800fba2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fba6:	fa93 f3a3 	rbit	r3, r3
 800fbaa:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800fbac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbae:	fab3 f383 	clz	r3, r3
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d105      	bne.n	800fbce <HAL_ADC_ConfigChannel+0x2a2>
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	0e9b      	lsrs	r3, r3, #26
 800fbc8:	f003 031f 	and.w	r3, r3, #31
 800fbcc:	e00a      	b.n	800fbe4 <HAL_ADC_ConfigChannel+0x2b8>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbd6:	fa93 f3a3 	rbit	r3, r3
 800fbda:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800fbdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbde:	fab3 f383 	clz	r3, r3
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d106      	bne.n	800fbf6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2200      	movs	r2, #0
 800fbee:	2102      	movs	r1, #2
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fa8b 	bl	800f10c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2103      	movs	r1, #3
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff fa71 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10a      	bne.n	800fc22 <HAL_ADC_ConfigChannel+0x2f6>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2103      	movs	r1, #3
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff fa66 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	0e9b      	lsrs	r3, r3, #26
 800fc1c:	f003 021f 	and.w	r2, r3, #31
 800fc20:	e010      	b.n	800fc44 <HAL_ADC_ConfigChannel+0x318>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2103      	movs	r1, #3
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff fa5b 	bl	800f0e4 <LL_ADC_GetOffsetChannel>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc34:	fa93 f3a3 	rbit	r3, r3
 800fc38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800fc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3c:	fab3 f383 	clz	r3, r3
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	461a      	mov	r2, r3
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d105      	bne.n	800fc5c <HAL_ADC_ConfigChannel+0x330>
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	0e9b      	lsrs	r3, r3, #26
 800fc56:	f003 031f 	and.w	r3, r3, #31
 800fc5a:	e00a      	b.n	800fc72 <HAL_ADC_ConfigChannel+0x346>
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc64:	fa93 f3a3 	rbit	r3, r3
 800fc68:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800fc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6c:	fab3 f383 	clz	r3, r3
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d106      	bne.n	800fc84 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2103      	movs	r1, #3
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff fa44 	bl	800f10c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fb55 	bl	800f338 <LL_ADC_IsEnabled>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f040 810c 	bne.w	800feae <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6818      	ldr	r0, [r3, #0]
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	461a      	mov	r2, r3
 800fca4:	f7ff faae 	bl	800f204 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	4aa8      	ldr	r2, [pc, #672]	; (800ff50 <HAL_ADC_ConfigChannel+0x624>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	f040 80fd 	bne.w	800feae <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d10b      	bne.n	800fcdc <HAL_ADC_ConfigChannel+0x3b0>
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	0e9b      	lsrs	r3, r3, #26
 800fcca:	3301      	adds	r3, #1
 800fccc:	f003 031f 	and.w	r3, r3, #31
 800fcd0:	2b09      	cmp	r3, #9
 800fcd2:	bf94      	ite	ls
 800fcd4:	2301      	movls	r3, #1
 800fcd6:	2300      	movhi	r3, #0
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	e012      	b.n	800fd02 <HAL_ADC_ConfigChannel+0x3d6>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce4:	fa93 f3a3 	rbit	r3, r3
 800fce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800fcea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcec:	fab3 f383 	clz	r3, r3
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	f003 031f 	and.w	r3, r3, #31
 800fcf8:	2b09      	cmp	r3, #9
 800fcfa:	bf94      	ite	ls
 800fcfc:	2301      	movls	r3, #1
 800fcfe:	2300      	movhi	r3, #0
 800fd00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d064      	beq.n	800fdd0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d107      	bne.n	800fd22 <HAL_ADC_ConfigChannel+0x3f6>
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	0e9b      	lsrs	r3, r3, #26
 800fd18:	3301      	adds	r3, #1
 800fd1a:	069b      	lsls	r3, r3, #26
 800fd1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fd20:	e00e      	b.n	800fd40 <HAL_ADC_ConfigChannel+0x414>
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	fa93 f3a3 	rbit	r3, r3
 800fd2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800fd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd32:	fab3 f383 	clz	r3, r3
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	3301      	adds	r3, #1
 800fd3a:	069b      	lsls	r3, r3, #26
 800fd3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d109      	bne.n	800fd60 <HAL_ADC_ConfigChannel+0x434>
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	0e9b      	lsrs	r3, r3, #26
 800fd52:	3301      	adds	r3, #1
 800fd54:	f003 031f 	and.w	r3, r3, #31
 800fd58:	2101      	movs	r1, #1
 800fd5a:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5e:	e010      	b.n	800fd82 <HAL_ADC_ConfigChannel+0x456>
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	fa93 f3a3 	rbit	r3, r3
 800fd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800fd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd70:	fab3 f383 	clz	r3, r3
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	3301      	adds	r3, #1
 800fd78:	f003 031f 	and.w	r3, r3, #31
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd82:	ea42 0103 	orr.w	r1, r2, r3
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10a      	bne.n	800fda8 <HAL_ADC_ConfigChannel+0x47c>
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	0e9b      	lsrs	r3, r3, #26
 800fd98:	3301      	adds	r3, #1
 800fd9a:	f003 021f 	and.w	r2, r3, #31
 800fd9e:	4613      	mov	r3, r2
 800fda0:	005b      	lsls	r3, r3, #1
 800fda2:	4413      	add	r3, r2
 800fda4:	051b      	lsls	r3, r3, #20
 800fda6:	e011      	b.n	800fdcc <HAL_ADC_ConfigChannel+0x4a0>
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	fa93 f3a3 	rbit	r3, r3
 800fdb4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	fab3 f383 	clz	r3, r3
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	f003 021f 	and.w	r2, r3, #31
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	4413      	add	r3, r2
 800fdca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fdcc:	430b      	orrs	r3, r1
 800fdce:	e069      	b.n	800fea4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d107      	bne.n	800fdec <HAL_ADC_ConfigChannel+0x4c0>
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	0e9b      	lsrs	r3, r3, #26
 800fde2:	3301      	adds	r3, #1
 800fde4:	069b      	lsls	r3, r3, #26
 800fde6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fdea:	e00e      	b.n	800fe0a <HAL_ADC_ConfigChannel+0x4de>
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fdf2:	6a3b      	ldr	r3, [r7, #32]
 800fdf4:	fa93 f3a3 	rbit	r3, r3
 800fdf8:	61fb      	str	r3, [r7, #28]
  return result;
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	fab3 f383 	clz	r3, r3
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	3301      	adds	r3, #1
 800fe04:	069b      	lsls	r3, r3, #26
 800fe06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d109      	bne.n	800fe2a <HAL_ADC_ConfigChannel+0x4fe>
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	0e9b      	lsrs	r3, r3, #26
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	f003 031f 	and.w	r3, r3, #31
 800fe22:	2101      	movs	r1, #1
 800fe24:	fa01 f303 	lsl.w	r3, r1, r3
 800fe28:	e010      	b.n	800fe4c <HAL_ADC_ConfigChannel+0x520>
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	fa93 f3a3 	rbit	r3, r3
 800fe36:	617b      	str	r3, [r7, #20]
  return result;
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	fab3 f383 	clz	r3, r3
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	3301      	adds	r3, #1
 800fe42:	f003 031f 	and.w	r3, r3, #31
 800fe46:	2101      	movs	r1, #1
 800fe48:	fa01 f303 	lsl.w	r3, r1, r3
 800fe4c:	ea42 0103 	orr.w	r1, r2, r3
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10d      	bne.n	800fe78 <HAL_ADC_ConfigChannel+0x54c>
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	0e9b      	lsrs	r3, r3, #26
 800fe62:	3301      	adds	r3, #1
 800fe64:	f003 021f 	and.w	r2, r3, #31
 800fe68:	4613      	mov	r3, r2
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	4413      	add	r3, r2
 800fe6e:	3b1e      	subs	r3, #30
 800fe70:	051b      	lsls	r3, r3, #20
 800fe72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fe76:	e014      	b.n	800fea2 <HAL_ADC_ConfigChannel+0x576>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	fa93 f3a3 	rbit	r3, r3
 800fe84:	60fb      	str	r3, [r7, #12]
  return result;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	fab3 f383 	clz	r3, r3
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	3301      	adds	r3, #1
 800fe90:	f003 021f 	and.w	r2, r3, #31
 800fe94:	4613      	mov	r3, r2
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	4413      	add	r3, r2
 800fe9a:	3b1e      	subs	r3, #30
 800fe9c:	051b      	lsls	r3, r3, #20
 800fe9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fea2:	430b      	orrs	r3, r1
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	6892      	ldr	r2, [r2, #8]
 800fea8:	4619      	mov	r1, r3
 800feaa:	f7ff f983 	bl	800f1b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	4b28      	ldr	r3, [pc, #160]	; (800ff54 <HAL_ADC_ConfigChannel+0x628>)
 800feb4:	4013      	ands	r3, r2
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d07c      	beq.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800feba:	4827      	ldr	r0, [pc, #156]	; (800ff58 <HAL_ADC_ConfigChannel+0x62c>)
 800febc:	f7ff f8e2 	bl	800f084 <LL_ADC_GetCommonPathInternalCh>
 800fec0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a24      	ldr	r2, [pc, #144]	; (800ff5c <HAL_ADC_ConfigChannel+0x630>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d126      	bne.n	800ff1c <HAL_ADC_ConfigChannel+0x5f0>
 800fece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d120      	bne.n	800ff1c <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	4a20      	ldr	r2, [pc, #128]	; (800ff60 <HAL_ADC_ConfigChannel+0x634>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d167      	bne.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800feec:	4619      	mov	r1, r3
 800feee:	481a      	ldr	r0, [pc, #104]	; (800ff58 <HAL_ADC_ConfigChannel+0x62c>)
 800fef0:	f7ff f8b5 	bl	800f05e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800fef4:	4b1b      	ldr	r3, [pc, #108]	; (800ff64 <HAL_ADC_ConfigChannel+0x638>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	099b      	lsrs	r3, r3, #6
 800fefa:	4a1b      	ldr	r2, [pc, #108]	; (800ff68 <HAL_ADC_ConfigChannel+0x63c>)
 800fefc:	fba2 2303 	umull	r2, r3, r2, r3
 800ff00:	099a      	lsrs	r2, r3, #6
 800ff02:	4613      	mov	r3, r2
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ff0c:	e002      	b.n	800ff14 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1f9      	bne.n	800ff0e <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ff1a:	e04b      	b.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	4a12      	ldr	r2, [pc, #72]	; (800ff6c <HAL_ADC_ConfigChannel+0x640>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d124      	bne.n	800ff70 <HAL_ADC_ConfigChannel+0x644>
 800ff26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d11e      	bne.n	800ff70 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a0a      	ldr	r2, [pc, #40]	; (800ff60 <HAL_ADC_ConfigChannel+0x634>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d13b      	bne.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ff3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff44:	4619      	mov	r1, r3
 800ff46:	4804      	ldr	r0, [pc, #16]	; (800ff58 <HAL_ADC_ConfigChannel+0x62c>)
 800ff48:	f7ff f889 	bl	800f05e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ff4c:	e032      	b.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
 800ff4e:	bf00      	nop
 800ff50:	407f0000 	.word	0x407f0000
 800ff54:	80080000 	.word	0x80080000
 800ff58:	50040300 	.word	0x50040300
 800ff5c:	c7520000 	.word	0xc7520000
 800ff60:	50040000 	.word	0x50040000
 800ff64:	2000018c 	.word	0x2000018c
 800ff68:	053e2d63 	.word	0x053e2d63
 800ff6c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a14      	ldr	r2, [pc, #80]	; (800ffc8 <HAL_ADC_ConfigChannel+0x69c>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d11c      	bne.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ff7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d116      	bne.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a10      	ldr	r2, [pc, #64]	; (800ffcc <HAL_ADC_ConfigChannel+0x6a0>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d111      	bne.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ff90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ff98:	4619      	mov	r1, r3
 800ff9a:	480d      	ldr	r0, [pc, #52]	; (800ffd0 <HAL_ADC_ConfigChannel+0x6a4>)
 800ff9c:	f7ff f85f 	bl	800f05e <LL_ADC_SetCommonPathInternalCh>
 800ffa0:	e008      	b.n	800ffb4 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffa6:	f043 0220 	orr.w	r2, r3, #32
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ffbc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3798      	adds	r7, #152	; 0x98
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	80000001 	.word	0x80000001
 800ffcc:	50040000 	.word	0x50040000
 800ffd0:	50040300 	.word	0x50040300

0800ffd4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff f9f2 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 800fff0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7ff fa13 	bl	800f422 <LL_ADC_INJ_IsConversionOngoing>
 800fffc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d103      	bne.n	801000c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 8091 	beq.w	801012e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010016:	2b00      	cmp	r3, #0
 8010018:	d02a      	beq.n	8010070 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	7e5b      	ldrb	r3, [r3, #25]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d126      	bne.n	8010070 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	7e1b      	ldrb	r3, [r3, #24]
 8010026:	2b01      	cmp	r3, #1
 8010028:	d122      	bne.n	8010070 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801002a:	2301      	movs	r3, #1
 801002c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801002e:	e014      	b.n	801005a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	4a41      	ldr	r2, [pc, #260]	; (8010138 <ADC_ConversionStop+0x164>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d90d      	bls.n	8010054 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801003c:	f043 0210 	orr.w	r2, r3, #16
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010048:	f043 0201 	orr.w	r2, r3, #1
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8010050:	2301      	movs	r3, #1
 8010052:	e06d      	b.n	8010130 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	3301      	adds	r3, #1
 8010058:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010064:	2b40      	cmp	r3, #64	; 0x40
 8010066:	d1e3      	bne.n	8010030 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2240      	movs	r2, #64	; 0x40
 801006e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	2b02      	cmp	r3, #2
 8010074:	d014      	beq.n	80100a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff f9aa 	bl	800f3d4 <LL_ADC_REG_IsConversionOngoing>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00c      	beq.n	80100a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff f967 	bl	800f35e <LL_ADC_IsDisableOngoing>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d104      	bne.n	80100a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff f986 	bl	800f3ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d014      	beq.n	80100d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff f9b9 	bl	800f422 <LL_ADC_INJ_IsConversionOngoing>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00c      	beq.n	80100d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff f94f 	bl	800f35e <LL_ADC_IsDisableOngoing>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d104      	bne.n	80100d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff f995 	bl	800f3fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d005      	beq.n	80100e2 <ADC_ConversionStop+0x10e>
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b03      	cmp	r3, #3
 80100da:	d105      	bne.n	80100e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80100dc:	230c      	movs	r3, #12
 80100de:	617b      	str	r3, [r7, #20]
        break;
 80100e0:	e005      	b.n	80100ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80100e2:	2308      	movs	r3, #8
 80100e4:	617b      	str	r3, [r7, #20]
        break;
 80100e6:	e002      	b.n	80100ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80100e8:	2304      	movs	r3, #4
 80100ea:	617b      	str	r3, [r7, #20]
        break;
 80100ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80100ee:	f7fe ff75 	bl	800efdc <HAL_GetTick>
 80100f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80100f4:	e014      	b.n	8010120 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80100f6:	f7fe ff71 	bl	800efdc <HAL_GetTick>
 80100fa:	4602      	mov	r2, r0
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	2b05      	cmp	r3, #5
 8010102:	d90d      	bls.n	8010120 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010108:	f043 0210 	orr.w	r2, r3, #16
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010114:	f043 0201 	orr.w	r2, r3, #1
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801011c:	2301      	movs	r3, #1
 801011e:	e007      	b.n	8010130 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689a      	ldr	r2, [r3, #8]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	4013      	ands	r3, r2
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1e3      	bne.n	80100f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3720      	adds	r7, #32
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	a33fffff 	.word	0xa33fffff

0801013c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff f8f5 	bl	800f338 <LL_ADC_IsEnabled>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d146      	bne.n	80101e2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	689a      	ldr	r2, [r3, #8]
 801015a:	4b24      	ldr	r3, [pc, #144]	; (80101ec <ADC_Enable+0xb0>)
 801015c:	4013      	ands	r3, r2
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00d      	beq.n	801017e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010166:	f043 0210 	orr.w	r2, r3, #16
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010172:	f043 0201 	orr.w	r2, r3, #1
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	e032      	b.n	80101e4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff f8b0 	bl	800f2e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8010188:	f7fe ff28 	bl	800efdc <HAL_GetTick>
 801018c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801018e:	e021      	b.n	80101d4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4618      	mov	r0, r3
 8010196:	f7ff f8cf 	bl	800f338 <LL_ADC_IsEnabled>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d104      	bne.n	80101aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7ff f89f 	bl	800f2e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80101aa:	f7fe ff17 	bl	800efdc <HAL_GetTick>
 80101ae:	4602      	mov	r2, r0
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d90d      	bls.n	80101d4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101bc:	f043 0210 	orr.w	r2, r3, #16
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c8:	f043 0201 	orr.w	r2, r3, #1
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80101d0:	2301      	movs	r3, #1
 80101d2:	e007      	b.n	80101e4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d1d6      	bne.n	8010190 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	8000003f 	.word	0x8000003f

080101f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff f8ae 	bl	800f35e <LL_ADC_IsDisableOngoing>
 8010202:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff f895 	bl	800f338 <LL_ADC_IsEnabled>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d040      	beq.n	8010296 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d13d      	bne.n	8010296 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	f003 030d 	and.w	r3, r3, #13
 8010224:	2b01      	cmp	r3, #1
 8010226:	d10c      	bne.n	8010242 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff f86f 	bl	800f310 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2203      	movs	r2, #3
 8010238:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801023a:	f7fe fecf 	bl	800efdc <HAL_GetTick>
 801023e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010240:	e022      	b.n	8010288 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010246:	f043 0210 	orr.w	r2, r3, #16
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010252:	f043 0201 	orr.w	r2, r3, #1
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e01c      	b.n	8010298 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801025e:	f7fe febd 	bl	800efdc <HAL_GetTick>
 8010262:	4602      	mov	r2, r0
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	2b02      	cmp	r3, #2
 801026a:	d90d      	bls.n	8010288 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010270:	f043 0210 	orr.w	r2, r3, #16
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027c:	f043 0201 	orr.w	r2, r3, #1
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8010284:	2301      	movs	r3, #1
 8010286:	e007      	b.n	8010298 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1e3      	bne.n	801025e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f003 0307 	and.w	r3, r3, #7
 80102ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80102b0:	4b0c      	ldr	r3, [pc, #48]	; (80102e4 <__NVIC_SetPriorityGrouping+0x44>)
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80102bc:	4013      	ands	r3, r2
 80102be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80102c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80102cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80102d2:	4a04      	ldr	r2, [pc, #16]	; (80102e4 <__NVIC_SetPriorityGrouping+0x44>)
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	60d3      	str	r3, [r2, #12]
}
 80102d8:	bf00      	nop
 80102da:	3714      	adds	r7, #20
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr
 80102e4:	e000ed00 	.word	0xe000ed00

080102e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80102e8:	b480      	push	{r7}
 80102ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <__NVIC_GetPriorityGrouping+0x18>)
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	0a1b      	lsrs	r3, r3, #8
 80102f2:	f003 0307 	and.w	r3, r3, #7
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	e000ed00 	.word	0xe000ed00

08010304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	4603      	mov	r3, r0
 801030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010312:	2b00      	cmp	r3, #0
 8010314:	db0b      	blt.n	801032e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	f003 021f 	and.w	r2, r3, #31
 801031c:	4907      	ldr	r1, [pc, #28]	; (801033c <__NVIC_EnableIRQ+0x38>)
 801031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010322:	095b      	lsrs	r3, r3, #5
 8010324:	2001      	movs	r0, #1
 8010326:	fa00 f202 	lsl.w	r2, r0, r2
 801032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801032e:	bf00      	nop
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	e000e100 	.word	0xe000e100

08010340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010340:	b480      	push	{r7}
 8010342:	b083      	sub	sp, #12
 8010344:	af00      	add	r7, sp, #0
 8010346:	4603      	mov	r3, r0
 8010348:	6039      	str	r1, [r7, #0]
 801034a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801034c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010350:	2b00      	cmp	r3, #0
 8010352:	db0a      	blt.n	801036a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	b2da      	uxtb	r2, r3
 8010358:	490c      	ldr	r1, [pc, #48]	; (801038c <__NVIC_SetPriority+0x4c>)
 801035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801035e:	0112      	lsls	r2, r2, #4
 8010360:	b2d2      	uxtb	r2, r2
 8010362:	440b      	add	r3, r1
 8010364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010368:	e00a      	b.n	8010380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	b2da      	uxtb	r2, r3
 801036e:	4908      	ldr	r1, [pc, #32]	; (8010390 <__NVIC_SetPriority+0x50>)
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	f003 030f 	and.w	r3, r3, #15
 8010376:	3b04      	subs	r3, #4
 8010378:	0112      	lsls	r2, r2, #4
 801037a:	b2d2      	uxtb	r2, r2
 801037c:	440b      	add	r3, r1
 801037e:	761a      	strb	r2, [r3, #24]
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	e000e100 	.word	0xe000e100
 8010390:	e000ed00 	.word	0xe000ed00

08010394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010394:	b480      	push	{r7}
 8010396:	b089      	sub	sp, #36	; 0x24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f003 0307 	and.w	r3, r3, #7
 80103a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	f1c3 0307 	rsb	r3, r3, #7
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	bf28      	it	cs
 80103b2:	2304      	movcs	r3, #4
 80103b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	3304      	adds	r3, #4
 80103ba:	2b06      	cmp	r3, #6
 80103bc:	d902      	bls.n	80103c4 <NVIC_EncodePriority+0x30>
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	3b03      	subs	r3, #3
 80103c2:	e000      	b.n	80103c6 <NVIC_EncodePriority+0x32>
 80103c4:	2300      	movs	r3, #0
 80103c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80103c8:	f04f 32ff 	mov.w	r2, #4294967295
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	fa02 f303 	lsl.w	r3, r2, r3
 80103d2:	43da      	mvns	r2, r3
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	401a      	ands	r2, r3
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80103dc:	f04f 31ff 	mov.w	r1, #4294967295
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	fa01 f303 	lsl.w	r3, r1, r3
 80103e6:	43d9      	mvns	r1, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80103ec:	4313      	orrs	r3, r2
         );
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3724      	adds	r7, #36	; 0x24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr

080103fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7ff ff4c 	bl	80102a0 <__NVIC_SetPriorityGrouping>
}
 8010408:	bf00      	nop
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af00      	add	r7, sp, #0
 8010416:	4603      	mov	r3, r0
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
 801041c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801041e:	2300      	movs	r3, #0
 8010420:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010422:	f7ff ff61 	bl	80102e8 <__NVIC_GetPriorityGrouping>
 8010426:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	68b9      	ldr	r1, [r7, #8]
 801042c:	6978      	ldr	r0, [r7, #20]
 801042e:	f7ff ffb1 	bl	8010394 <NVIC_EncodePriority>
 8010432:	4602      	mov	r2, r0
 8010434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010438:	4611      	mov	r1, r2
 801043a:	4618      	mov	r0, r3
 801043c:	f7ff ff80 	bl	8010340 <__NVIC_SetPriority>
}
 8010440:	bf00      	nop
 8010442:	3718      	adds	r7, #24
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	4603      	mov	r3, r0
 8010450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff ff54 	bl	8010304 <__NVIC_EnableIRQ>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010476:	b2db      	uxtb	r3, r3
 8010478:	2b02      	cmp	r3, #2
 801047a:	d005      	beq.n	8010488 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2204      	movs	r2, #4
 8010480:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8010482:	2301      	movs	r3, #1
 8010484:	73fb      	strb	r3, [r7, #15]
 8010486:	e029      	b.n	80104dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f022 020e 	bic.w	r2, r2, #14
 8010496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f022 0201 	bic.w	r2, r2, #1
 80104a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ac:	f003 021c 	and.w	r2, r3, #28
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104b4:	2101      	movs	r1, #1
 80104b6:	fa01 f202 	lsl.w	r2, r1, r2
 80104ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d003      	beq.n	80104dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	4798      	blx	r3
    }
  }
  return status;
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
	...

080104e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b087      	sub	sp, #28
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80104f2:	2300      	movs	r3, #0
 80104f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80104f6:	e154      	b.n	80107a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	2101      	movs	r1, #1
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	fa01 f303 	lsl.w	r3, r1, r3
 8010504:	4013      	ands	r3, r2
 8010506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	2b00      	cmp	r3, #0
 801050c:	f000 8146 	beq.w	801079c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d00b      	beq.n	8010530 <HAL_GPIO_Init+0x48>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	2b02      	cmp	r3, #2
 801051e:	d007      	beq.n	8010530 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010524:	2b11      	cmp	r3, #17
 8010526:	d003      	beq.n	8010530 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	2b12      	cmp	r3, #18
 801052e:	d130      	bne.n	8010592 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	2203      	movs	r2, #3
 801053c:	fa02 f303 	lsl.w	r3, r2, r3
 8010540:	43db      	mvns	r3, r3
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	4013      	ands	r3, r2
 8010546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	68da      	ldr	r2, [r3, #12]
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	fa02 f303 	lsl.w	r3, r2, r3
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	4313      	orrs	r3, r2
 8010558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010566:	2201      	movs	r2, #1
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	fa02 f303 	lsl.w	r3, r2, r3
 801056e:	43db      	mvns	r3, r3
 8010570:	693a      	ldr	r2, [r7, #16]
 8010572:	4013      	ands	r3, r2
 8010574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	091b      	lsrs	r3, r3, #4
 801057c:	f003 0201 	and.w	r2, r3, #1
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	fa02 f303 	lsl.w	r3, r2, r3
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	4313      	orrs	r3, r2
 801058a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	693a      	ldr	r2, [r7, #16]
 8010590:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	2203      	movs	r2, #3
 801059e:	fa02 f303 	lsl.w	r3, r2, r3
 80105a2:	43db      	mvns	r3, r3
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	4013      	ands	r3, r2
 80105a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	689a      	ldr	r2, [r3, #8]
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	005b      	lsls	r3, r3, #1
 80105b2:	fa02 f303 	lsl.w	r3, r2, r3
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d003      	beq.n	80105d2 <HAL_GPIO_Init+0xea>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	2b12      	cmp	r3, #18
 80105d0:	d123      	bne.n	801061a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	08da      	lsrs	r2, r3, #3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	3208      	adds	r2, #8
 80105da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f003 0307 	and.w	r3, r3, #7
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	220f      	movs	r2, #15
 80105ea:	fa02 f303 	lsl.w	r3, r2, r3
 80105ee:	43db      	mvns	r3, r3
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	4013      	ands	r3, r2
 80105f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	691a      	ldr	r2, [r3, #16]
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	f003 0307 	and.w	r3, r3, #7
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	fa02 f303 	lsl.w	r3, r2, r3
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	4313      	orrs	r3, r2
 801060a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	08da      	lsrs	r2, r3, #3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	3208      	adds	r2, #8
 8010614:	6939      	ldr	r1, [r7, #16]
 8010616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	2203      	movs	r2, #3
 8010626:	fa02 f303 	lsl.w	r3, r2, r3
 801062a:	43db      	mvns	r3, r3
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	4013      	ands	r3, r2
 8010630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f003 0203 	and.w	r2, r3, #3
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	fa02 f303 	lsl.w	r3, r2, r3
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	4313      	orrs	r3, r2
 8010646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010656:	2b00      	cmp	r3, #0
 8010658:	f000 80a0 	beq.w	801079c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801065c:	4b58      	ldr	r3, [pc, #352]	; (80107c0 <HAL_GPIO_Init+0x2d8>)
 801065e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010660:	4a57      	ldr	r2, [pc, #348]	; (80107c0 <HAL_GPIO_Init+0x2d8>)
 8010662:	f043 0301 	orr.w	r3, r3, #1
 8010666:	6613      	str	r3, [r2, #96]	; 0x60
 8010668:	4b55      	ldr	r3, [pc, #340]	; (80107c0 <HAL_GPIO_Init+0x2d8>)
 801066a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801066c:	f003 0301 	and.w	r3, r3, #1
 8010670:	60bb      	str	r3, [r7, #8]
 8010672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8010674:	4a53      	ldr	r2, [pc, #332]	; (80107c4 <HAL_GPIO_Init+0x2dc>)
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	089b      	lsrs	r3, r3, #2
 801067a:	3302      	adds	r3, #2
 801067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f003 0303 	and.w	r3, r3, #3
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	220f      	movs	r2, #15
 801068c:	fa02 f303 	lsl.w	r3, r2, r3
 8010690:	43db      	mvns	r3, r3
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	4013      	ands	r3, r2
 8010696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801069e:	d019      	beq.n	80106d4 <HAL_GPIO_Init+0x1ec>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	4a49      	ldr	r2, [pc, #292]	; (80107c8 <HAL_GPIO_Init+0x2e0>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d013      	beq.n	80106d0 <HAL_GPIO_Init+0x1e8>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4a48      	ldr	r2, [pc, #288]	; (80107cc <HAL_GPIO_Init+0x2e4>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d00d      	beq.n	80106cc <HAL_GPIO_Init+0x1e4>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4a47      	ldr	r2, [pc, #284]	; (80107d0 <HAL_GPIO_Init+0x2e8>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d007      	beq.n	80106c8 <HAL_GPIO_Init+0x1e0>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4a46      	ldr	r2, [pc, #280]	; (80107d4 <HAL_GPIO_Init+0x2ec>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d101      	bne.n	80106c4 <HAL_GPIO_Init+0x1dc>
 80106c0:	2304      	movs	r3, #4
 80106c2:	e008      	b.n	80106d6 <HAL_GPIO_Init+0x1ee>
 80106c4:	2307      	movs	r3, #7
 80106c6:	e006      	b.n	80106d6 <HAL_GPIO_Init+0x1ee>
 80106c8:	2303      	movs	r3, #3
 80106ca:	e004      	b.n	80106d6 <HAL_GPIO_Init+0x1ee>
 80106cc:	2302      	movs	r3, #2
 80106ce:	e002      	b.n	80106d6 <HAL_GPIO_Init+0x1ee>
 80106d0:	2301      	movs	r3, #1
 80106d2:	e000      	b.n	80106d6 <HAL_GPIO_Init+0x1ee>
 80106d4:	2300      	movs	r3, #0
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	f002 0203 	and.w	r2, r2, #3
 80106dc:	0092      	lsls	r2, r2, #2
 80106de:	4093      	lsls	r3, r2
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	4313      	orrs	r3, r2
 80106e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80106e6:	4937      	ldr	r1, [pc, #220]	; (80107c4 <HAL_GPIO_Init+0x2dc>)
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	089b      	lsrs	r3, r3, #2
 80106ec:	3302      	adds	r3, #2
 80106ee:	693a      	ldr	r2, [r7, #16]
 80106f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80106f4:	4b38      	ldr	r3, [pc, #224]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	43db      	mvns	r3, r3
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	4013      	ands	r3, r2
 8010702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d003      	beq.n	8010718 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	4313      	orrs	r3, r2
 8010716:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010718:	4a2f      	ldr	r2, [pc, #188]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 801071e:	4b2e      	ldr	r3, [pc, #184]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	43db      	mvns	r3, r3
 8010728:	693a      	ldr	r2, [r7, #16]
 801072a:	4013      	ands	r3, r2
 801072c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d003      	beq.n	8010742 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	4313      	orrs	r3, r2
 8010740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010742:	4a25      	ldr	r2, [pc, #148]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010748:	4b23      	ldr	r3, [pc, #140]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	43db      	mvns	r3, r3
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	4013      	ands	r3, r2
 8010756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d003      	beq.n	801076c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8010764:	693a      	ldr	r2, [r7, #16]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	4313      	orrs	r3, r2
 801076a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801076c:	4a1a      	ldr	r2, [pc, #104]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8010772:	4b19      	ldr	r3, [pc, #100]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	43db      	mvns	r3, r3
 801077c:	693a      	ldr	r2, [r7, #16]
 801077e:	4013      	ands	r3, r2
 8010780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801078a:	2b00      	cmp	r3, #0
 801078c:	d003      	beq.n	8010796 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801078e:	693a      	ldr	r2, [r7, #16]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	4313      	orrs	r3, r2
 8010794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010796:	4a10      	ldr	r2, [pc, #64]	; (80107d8 <HAL_GPIO_Init+0x2f0>)
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	3301      	adds	r3, #1
 80107a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	fa22 f303 	lsr.w	r3, r2, r3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f47f aea3 	bne.w	80104f8 <HAL_GPIO_Init+0x10>
  }
}
 80107b2:	bf00      	nop
 80107b4:	bf00      	nop
 80107b6:	371c      	adds	r7, #28
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	40021000 	.word	0x40021000
 80107c4:	40010000 	.word	0x40010000
 80107c8:	48000400 	.word	0x48000400
 80107cc:	48000800 	.word	0x48000800
 80107d0:	48000c00 	.word	0x48000c00
 80107d4:	48001000 	.word	0x48001000
 80107d8:	40010400 	.word	0x40010400

080107dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	691a      	ldr	r2, [r3, #16]
 80107ec:	887b      	ldrh	r3, [r7, #2]
 80107ee:	4013      	ands	r3, r2
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80107f4:	2301      	movs	r3, #1
 80107f6:	73fb      	strb	r3, [r7, #15]
 80107f8:	e001      	b.n	80107fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80107fa:	2300      	movs	r3, #0
 80107fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80107fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3714      	adds	r7, #20
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	460b      	mov	r3, r1
 8010816:	807b      	strh	r3, [r7, #2]
 8010818:	4613      	mov	r3, r2
 801081a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801081c:	787b      	ldrb	r3, [r7, #1]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d003      	beq.n	801082a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010822:	887a      	ldrh	r2, [r7, #2]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010828:	e002      	b.n	8010830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801082a:	887a      	ldrh	r2, [r7, #2]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010830:	bf00      	nop
 8010832:	370c      	adds	r7, #12
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8010846:	4b08      	ldr	r3, [pc, #32]	; (8010868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010848:	695a      	ldr	r2, [r3, #20]
 801084a:	88fb      	ldrh	r3, [r7, #6]
 801084c:	4013      	ands	r3, r2
 801084e:	2b00      	cmp	r3, #0
 8010850:	d006      	beq.n	8010860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010852:	4a05      	ldr	r2, [pc, #20]	; (8010868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010854:	88fb      	ldrh	r3, [r7, #6]
 8010856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010858:	88fb      	ldrh	r3, [r7, #6]
 801085a:	4618      	mov	r0, r3
 801085c:	f000 f806 	bl	801086c <HAL_GPIO_EXTI_Callback>
  }
}
 8010860:	bf00      	nop
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	40010400 	.word	0x40010400

0801086c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	4603      	mov	r3, r0
 8010874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8010876:	bf00      	nop
 8010878:	370c      	adds	r7, #12
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr

08010882 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b082      	sub	sp, #8
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d101      	bne.n	8010894 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010890:	2301      	movs	r3, #1
 8010892:	e081      	b.n	8010998 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801089a:	b2db      	uxtb	r3, r3
 801089c:	2b00      	cmp	r3, #0
 801089e:	d106      	bne.n	80108ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7fe f831 	bl	800e910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2224      	movs	r2, #36	; 0x24
 80108b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f022 0201 	bic.w	r2, r2, #1
 80108c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	685a      	ldr	r2, [r3, #4]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80108d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	689a      	ldr	r2, [r3, #8]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80108e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d107      	bne.n	80108fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	689a      	ldr	r2, [r3, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108f8:	609a      	str	r2, [r3, #8]
 80108fa:	e006      	b.n	801090a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	689a      	ldr	r2, [r3, #8]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8010908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d104      	bne.n	801091c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801091a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6812      	ldr	r2, [r2, #0]
 8010926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801092a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801092e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68da      	ldr	r2, [r3, #12]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801093e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	691a      	ldr	r2, [r3, #16]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	695b      	ldr	r3, [r3, #20]
 8010948:	ea42 0103 	orr.w	r1, r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	021a      	lsls	r2, r3, #8
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	430a      	orrs	r2, r1
 8010958:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	69d9      	ldr	r1, [r3, #28]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a1a      	ldr	r2, [r3, #32]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	430a      	orrs	r2, r1
 8010968:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f042 0201 	orr.w	r2, r2, #1
 8010978:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2220      	movs	r2, #32
 8010984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	607a      	str	r2, [r7, #4]
 80109aa:	461a      	mov	r2, r3
 80109ac:	460b      	mov	r3, r1
 80109ae:	817b      	strh	r3, [r7, #10]
 80109b0:	4613      	mov	r3, r2
 80109b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b20      	cmp	r3, #32
 80109be:	f040 80da 	bne.w	8010b76 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d101      	bne.n	80109d0 <HAL_I2C_Master_Transmit+0x30>
 80109cc:	2302      	movs	r3, #2
 80109ce:	e0d3      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2201      	movs	r2, #1
 80109d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80109d8:	f7fe fb00 	bl	800efdc <HAL_GetTick>
 80109dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	2319      	movs	r3, #25
 80109e4:	2201      	movs	r2, #1
 80109e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f000 fdc4 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d001      	beq.n	80109fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	e0be      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2221      	movs	r2, #33	; 0x21
 80109fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2210      	movs	r2, #16
 8010a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	893a      	ldrh	r2, [r7, #8]
 8010a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	2bff      	cmp	r3, #255	; 0xff
 8010a2a:	d90e      	bls.n	8010a4a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	22ff      	movs	r2, #255	; 0xff
 8010a30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a36:	b2da      	uxtb	r2, r3
 8010a38:	8979      	ldrh	r1, [r7, #10]
 8010a3a:	4b51      	ldr	r3, [pc, #324]	; (8010b80 <HAL_I2C_Master_Transmit+0x1e0>)
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f000 ff26 	bl	8011894 <I2C_TransferConfig>
 8010a48:	e06c      	b.n	8010b24 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a4e:	b29a      	uxth	r2, r3
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	8979      	ldrh	r1, [r7, #10]
 8010a5c:	4b48      	ldr	r3, [pc, #288]	; (8010b80 <HAL_I2C_Master_Transmit+0x1e0>)
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f000 ff15 	bl	8011894 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8010a6a:	e05b      	b.n	8010b24 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010a6c:	697a      	ldr	r2, [r7, #20]
 8010a6e:	6a39      	ldr	r1, [r7, #32]
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	f000 fdc1 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e07b      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	781a      	ldrb	r2, [r3, #0]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a90:	1c5a      	adds	r2, r3, #1
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d034      	beq.n	8010b24 <HAL_I2C_Master_Transmit+0x184>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d130      	bne.n	8010b24 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	6a3b      	ldr	r3, [r7, #32]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	2180      	movs	r1, #128	; 0x80
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 fd53 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e04d      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	2bff      	cmp	r3, #255	; 0xff
 8010ae4:	d90e      	bls.n	8010b04 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	22ff      	movs	r2, #255	; 0xff
 8010aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	8979      	ldrh	r1, [r7, #10]
 8010af4:	2300      	movs	r3, #0
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f000 fec9 	bl	8011894 <I2C_TransferConfig>
 8010b02:	e00f      	b.n	8010b24 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	8979      	ldrh	r1, [r7, #10]
 8010b16:	2300      	movs	r3, #0
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 feb8 	bl	8011894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d19e      	bne.n	8010a6c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	6a39      	ldr	r1, [r7, #32]
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 fda0 	bl	8011678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e01a      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2220      	movs	r2, #32
 8010b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	6859      	ldr	r1, [r3, #4]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	4b0b      	ldr	r3, [pc, #44]	; (8010b84 <HAL_I2C_Master_Transmit+0x1e4>)
 8010b56:	400b      	ands	r3, r1
 8010b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2220      	movs	r2, #32
 8010b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	e000      	b.n	8010b78 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8010b76:	2302      	movs	r3, #2
  }
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3718      	adds	r7, #24
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	80002000 	.word	0x80002000
 8010b84:	fe00e800 	.word	0xfe00e800

08010b88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b088      	sub	sp, #32
 8010b8c:	af02      	add	r7, sp, #8
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	607a      	str	r2, [r7, #4]
 8010b92:	461a      	mov	r2, r3
 8010b94:	460b      	mov	r3, r1
 8010b96:	817b      	strh	r3, [r7, #10]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	2b20      	cmp	r3, #32
 8010ba6:	f040 80db 	bne.w	8010d60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d101      	bne.n	8010bb8 <HAL_I2C_Master_Receive+0x30>
 8010bb4:	2302      	movs	r3, #2
 8010bb6:	e0d4      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010bc0:	f7fe fa0c 	bl	800efdc <HAL_GetTick>
 8010bc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	2319      	movs	r3, #25
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f000 fcd0 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e0bf      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2222      	movs	r2, #34	; 0x22
 8010be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2210      	movs	r2, #16
 8010bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	893a      	ldrh	r2, [r7, #8]
 8010c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2200      	movs	r2, #0
 8010c08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	2bff      	cmp	r3, #255	; 0xff
 8010c12:	d90e      	bls.n	8010c32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	22ff      	movs	r2, #255	; 0xff
 8010c18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	8979      	ldrh	r1, [r7, #10]
 8010c22:	4b52      	ldr	r3, [pc, #328]	; (8010d6c <HAL_I2C_Master_Receive+0x1e4>)
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f000 fe32 	bl	8011894 <I2C_TransferConfig>
 8010c30:	e06d      	b.n	8010d0e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	8979      	ldrh	r1, [r7, #10]
 8010c44:	4b49      	ldr	r3, [pc, #292]	; (8010d6c <HAL_I2C_Master_Receive+0x1e4>)
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f000 fe21 	bl	8011894 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8010c52:	e05c      	b.n	8010d0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010c54:	697a      	ldr	r2, [r7, #20]
 8010c56:	6a39      	ldr	r1, [r7, #32]
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f000 fd49 	bl	80116f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d001      	beq.n	8010c68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8010c64:	2301      	movs	r3, #1
 8010c66:	e07c      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c72:	b2d2      	uxtb	r2, r2
 8010c74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7a:	1c5a      	adds	r2, r3, #1
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c84:	3b01      	subs	r3, #1
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d034      	beq.n	8010d0e <HAL_I2C_Master_Receive+0x186>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d130      	bne.n	8010d0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2180      	movs	r1, #128	; 0x80
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f000 fc5e 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e04d      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	2bff      	cmp	r3, #255	; 0xff
 8010cce:	d90e      	bls.n	8010cee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	22ff      	movs	r2, #255	; 0xff
 8010cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	8979      	ldrh	r1, [r7, #10]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010ce6:	68f8      	ldr	r0, [r7, #12]
 8010ce8:	f000 fdd4 	bl	8011894 <I2C_TransferConfig>
 8010cec:	e00f      	b.n	8010d0e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cfc:	b2da      	uxtb	r2, r3
 8010cfe:	8979      	ldrh	r1, [r7, #10]
 8010d00:	2300      	movs	r3, #0
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	f000 fdc3 	bl	8011894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d19d      	bne.n	8010c54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	6a39      	ldr	r1, [r7, #32]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f000 fcab 	bl	8011678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e01a      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2220      	movs	r2, #32
 8010d32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	6859      	ldr	r1, [r3, #4]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <HAL_I2C_Master_Receive+0x1e8>)
 8010d40:	400b      	ands	r3, r1
 8010d42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2220      	movs	r2, #32
 8010d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	e000      	b.n	8010d62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8010d60:	2302      	movs	r3, #2
  }
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3718      	adds	r7, #24
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	80002400 	.word	0x80002400
 8010d70:	fe00e800 	.word	0xfe00e800

08010d74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b088      	sub	sp, #32
 8010d78:	af02      	add	r7, sp, #8
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	4608      	mov	r0, r1
 8010d7e:	4611      	mov	r1, r2
 8010d80:	461a      	mov	r2, r3
 8010d82:	4603      	mov	r3, r0
 8010d84:	817b      	strh	r3, [r7, #10]
 8010d86:	460b      	mov	r3, r1
 8010d88:	813b      	strh	r3, [r7, #8]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b20      	cmp	r3, #32
 8010d98:	f040 80f9 	bne.w	8010f8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d9c:	6a3b      	ldr	r3, [r7, #32]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d002      	beq.n	8010da8 <HAL_I2C_Mem_Write+0x34>
 8010da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d105      	bne.n	8010db4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8010db0:	2301      	movs	r3, #1
 8010db2:	e0ed      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d101      	bne.n	8010dc2 <HAL_I2C_Mem_Write+0x4e>
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	e0e6      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010dca:	f7fe f907 	bl	800efdc <HAL_GetTick>
 8010dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	2319      	movs	r3, #25
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 fbcb 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8010de8:	2301      	movs	r3, #1
 8010dea:	e0d1      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2221      	movs	r2, #33	; 0x21
 8010df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2240      	movs	r2, #64	; 0x40
 8010df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6a3a      	ldr	r2, [r7, #32]
 8010e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2200      	movs	r2, #0
 8010e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010e14:	88f8      	ldrh	r0, [r7, #6]
 8010e16:	893a      	ldrh	r2, [r7, #8]
 8010e18:	8979      	ldrh	r1, [r7, #10]
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	9300      	str	r3, [sp, #0]
 8010e22:	4603      	mov	r3, r0
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f000 fadb 	bl	80113e0 <I2C_RequestMemoryWrite>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d005      	beq.n	8010e3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	e0a9      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	2bff      	cmp	r3, #255	; 0xff
 8010e44:	d90e      	bls.n	8010e64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	22ff      	movs	r2, #255	; 0xff
 8010e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	8979      	ldrh	r1, [r7, #10]
 8010e54:	2300      	movs	r3, #0
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f000 fd19 	bl	8011894 <I2C_TransferConfig>
 8010e62:	e00f      	b.n	8010e84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	8979      	ldrh	r1, [r7, #10]
 8010e76:	2300      	movs	r3, #0
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f000 fd08 	bl	8011894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010e84:	697a      	ldr	r2, [r7, #20]
 8010e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f000 fbb5 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d001      	beq.n	8010e98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8010e94:	2301      	movs	r3, #1
 8010e96:	e07b      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9c:	781a      	ldrb	r2, [r3, #0]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea8:	1c5a      	adds	r2, r3, #1
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d034      	beq.n	8010f3c <HAL_I2C_Mem_Write+0x1c8>
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d130      	bne.n	8010f3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2180      	movs	r1, #128	; 0x80
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f000 fb47 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d001      	beq.n	8010ef4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e04d      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	2bff      	cmp	r3, #255	; 0xff
 8010efc:	d90e      	bls.n	8010f1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	22ff      	movs	r2, #255	; 0xff
 8010f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	8979      	ldrh	r1, [r7, #10]
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f000 fcbd 	bl	8011894 <I2C_TransferConfig>
 8010f1a:	e00f      	b.n	8010f3c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f2a:	b2da      	uxtb	r2, r3
 8010f2c:	8979      	ldrh	r1, [r7, #10]
 8010f2e:	2300      	movs	r3, #0
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f000 fcac 	bl	8011894 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d19e      	bne.n	8010e84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010f46:	697a      	ldr	r2, [r7, #20]
 8010f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f000 fb94 	bl	8011678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8010f56:	2301      	movs	r3, #1
 8010f58:	e01a      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2220      	movs	r2, #32
 8010f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	6859      	ldr	r1, [r3, #4]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <HAL_I2C_Mem_Write+0x224>)
 8010f6e:	400b      	ands	r3, r1
 8010f70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2220      	movs	r2, #32
 8010f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e000      	b.n	8010f90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8010f8e:	2302      	movs	r3, #2
  }
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3718      	adds	r7, #24
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	fe00e800 	.word	0xfe00e800

08010f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b088      	sub	sp, #32
 8010fa0:	af02      	add	r7, sp, #8
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	461a      	mov	r2, r3
 8010faa:	4603      	mov	r3, r0
 8010fac:	817b      	strh	r3, [r7, #10]
 8010fae:	460b      	mov	r3, r1
 8010fb0:	813b      	strh	r3, [r7, #8]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	f040 80fd 	bne.w	80111be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8010fc4:	6a3b      	ldr	r3, [r7, #32]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <HAL_I2C_Mem_Read+0x34>
 8010fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d105      	bne.n	8010fdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e0f1      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d101      	bne.n	8010fea <HAL_I2C_Mem_Read+0x4e>
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	e0ea      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010ff2:	f7fd fff3 	bl	800efdc <HAL_GetTick>
 8010ff6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	2319      	movs	r3, #25
 8010ffe:	2201      	movs	r2, #1
 8011000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 fab7 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8011010:	2301      	movs	r3, #1
 8011012:	e0d5      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2222      	movs	r2, #34	; 0x22
 8011018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2240      	movs	r2, #64	; 0x40
 8011020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6a3a      	ldr	r2, [r7, #32]
 801102e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2200      	movs	r2, #0
 801103a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801103c:	88f8      	ldrh	r0, [r7, #6]
 801103e:	893a      	ldrh	r2, [r7, #8]
 8011040:	8979      	ldrh	r1, [r7, #10]
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	4603      	mov	r3, r0
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 fa1b 	bl	8011488 <I2C_RequestMemoryRead>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d005      	beq.n	8011064 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2200      	movs	r2, #0
 801105c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011060:	2301      	movs	r3, #1
 8011062:	e0ad      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011068:	b29b      	uxth	r3, r3
 801106a:	2bff      	cmp	r3, #255	; 0xff
 801106c:	d90e      	bls.n	801108c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	22ff      	movs	r2, #255	; 0xff
 8011072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011078:	b2da      	uxtb	r2, r3
 801107a:	8979      	ldrh	r1, [r7, #10]
 801107c:	4b52      	ldr	r3, [pc, #328]	; (80111c8 <HAL_I2C_Mem_Read+0x22c>)
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011084:	68f8      	ldr	r0, [r7, #12]
 8011086:	f000 fc05 	bl	8011894 <I2C_TransferConfig>
 801108a:	e00f      	b.n	80110ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011090:	b29a      	uxth	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801109a:	b2da      	uxtb	r2, r3
 801109c:	8979      	ldrh	r1, [r7, #10]
 801109e:	4b4a      	ldr	r3, [pc, #296]	; (80111c8 <HAL_I2C_Mem_Read+0x22c>)
 80110a0:	9300      	str	r3, [sp, #0]
 80110a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f000 fbf4 	bl	8011894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	2200      	movs	r2, #0
 80110b4:	2104      	movs	r1, #4
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f000 fa5e 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e07c      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d0:	b2d2      	uxtb	r2, r2
 80110d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110e2:	3b01      	subs	r3, #1
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	3b01      	subs	r3, #1
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d034      	beq.n	801116c <HAL_I2C_Mem_Read+0x1d0>
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011106:	2b00      	cmp	r3, #0
 8011108:	d130      	bne.n	801116c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011110:	2200      	movs	r2, #0
 8011112:	2180      	movs	r1, #128	; 0x80
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f000 fa2f 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	e04d      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011128:	b29b      	uxth	r3, r3
 801112a:	2bff      	cmp	r3, #255	; 0xff
 801112c:	d90e      	bls.n	801114c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	22ff      	movs	r2, #255	; 0xff
 8011132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011138:	b2da      	uxtb	r2, r3
 801113a:	8979      	ldrh	r1, [r7, #10]
 801113c:	2300      	movs	r3, #0
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 fba5 	bl	8011894 <I2C_TransferConfig>
 801114a:	e00f      	b.n	801116c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011150:	b29a      	uxth	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801115a:	b2da      	uxtb	r2, r3
 801115c:	8979      	ldrh	r1, [r7, #10]
 801115e:	2300      	movs	r3, #0
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f000 fb94 	bl	8011894 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011170:	b29b      	uxth	r3, r3
 8011172:	2b00      	cmp	r3, #0
 8011174:	d19a      	bne.n	80110ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801117a:	68f8      	ldr	r0, [r7, #12]
 801117c:	f000 fa7c 	bl	8011678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8011186:	2301      	movs	r3, #1
 8011188:	e01a      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2220      	movs	r2, #32
 8011190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	6859      	ldr	r1, [r3, #4]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	4b0b      	ldr	r3, [pc, #44]	; (80111cc <HAL_I2C_Mem_Read+0x230>)
 801119e:	400b      	ands	r3, r1
 80111a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2220      	movs	r2, #32
 80111a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2200      	movs	r2, #0
 80111b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	e000      	b.n	80111c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80111be:	2302      	movs	r3, #2
  }
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3718      	adds	r7, #24
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	80002400 	.word	0x80002400
 80111cc:	fe00e800 	.word	0xfe00e800

080111d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08a      	sub	sp, #40	; 0x28
 80111d4:	af02      	add	r7, sp, #8
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	607a      	str	r2, [r7, #4]
 80111da:	603b      	str	r3, [r7, #0]
 80111dc:	460b      	mov	r3, r1
 80111de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80111e0:	2300      	movs	r3, #0
 80111e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	2b20      	cmp	r3, #32
 80111ee:	f040 80f1 	bne.w	80113d4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	699b      	ldr	r3, [r3, #24]
 80111f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011200:	d101      	bne.n	8011206 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8011202:	2302      	movs	r3, #2
 8011204:	e0e7      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801120c:	2b01      	cmp	r3, #1
 801120e:	d101      	bne.n	8011214 <HAL_I2C_IsDeviceReady+0x44>
 8011210:	2302      	movs	r3, #2
 8011212:	e0e0      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2201      	movs	r2, #1
 8011218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2224      	movs	r2, #36	; 0x24
 8011220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2200      	movs	r2, #0
 8011228:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d107      	bne.n	8011242 <HAL_I2C_IsDeviceReady+0x72>
 8011232:	897b      	ldrh	r3, [r7, #10]
 8011234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801123c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011240:	e004      	b.n	801124c <HAL_I2C_IsDeviceReady+0x7c>
 8011242:	897b      	ldrh	r3, [r7, #10]
 8011244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011248:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	6812      	ldr	r2, [r2, #0]
 8011250:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8011252:	f7fd fec3 	bl	800efdc <HAL_GetTick>
 8011256:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	f003 0320 	and.w	r3, r3, #32
 8011262:	2b20      	cmp	r3, #32
 8011264:	bf0c      	ite	eq
 8011266:	2301      	moveq	r3, #1
 8011268:	2300      	movne	r3, #0
 801126a:	b2db      	uxtb	r3, r3
 801126c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	699b      	ldr	r3, [r3, #24]
 8011274:	f003 0310 	and.w	r3, r3, #16
 8011278:	2b10      	cmp	r3, #16
 801127a:	bf0c      	ite	eq
 801127c:	2301      	moveq	r3, #1
 801127e:	2300      	movne	r3, #0
 8011280:	b2db      	uxtb	r3, r3
 8011282:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8011284:	e034      	b.n	80112f0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128c:	d01a      	beq.n	80112c4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801128e:	f7fd fea5 	bl	800efdc <HAL_GetTick>
 8011292:	4602      	mov	r2, r0
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	683a      	ldr	r2, [r7, #0]
 801129a:	429a      	cmp	r2, r3
 801129c:	d302      	bcc.n	80112a4 <HAL_I2C_IsDeviceReady+0xd4>
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d10f      	bne.n	80112c4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2220      	movs	r2, #32
 80112a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112b0:	f043 0220 	orr.w	r2, r3, #32
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2200      	movs	r2, #0
 80112bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e088      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	699b      	ldr	r3, [r3, #24]
 80112ca:	f003 0320 	and.w	r3, r3, #32
 80112ce:	2b20      	cmp	r3, #32
 80112d0:	bf0c      	ite	eq
 80112d2:	2301      	moveq	r3, #1
 80112d4:	2300      	movne	r3, #0
 80112d6:	b2db      	uxtb	r3, r3
 80112d8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	f003 0310 	and.w	r3, r3, #16
 80112e4:	2b10      	cmp	r3, #16
 80112e6:	bf0c      	ite	eq
 80112e8:	2301      	moveq	r3, #1
 80112ea:	2300      	movne	r3, #0
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80112f0:	7ffb      	ldrb	r3, [r7, #31]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d102      	bne.n	80112fc <HAL_I2C_IsDeviceReady+0x12c>
 80112f6:	7fbb      	ldrb	r3, [r7, #30]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d0c4      	beq.n	8011286 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	699b      	ldr	r3, [r3, #24]
 8011302:	f003 0310 	and.w	r3, r3, #16
 8011306:	2b10      	cmp	r3, #16
 8011308:	d01a      	beq.n	8011340 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2200      	movs	r2, #0
 8011312:	2120      	movs	r1, #32
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f000 f92f 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8011320:	2301      	movs	r3, #1
 8011322:	e058      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2220      	movs	r2, #32
 801132a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2220      	movs	r2, #32
 8011330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2200      	movs	r2, #0
 8011338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 801133c:	2300      	movs	r3, #0
 801133e:	e04a      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	9300      	str	r3, [sp, #0]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	2120      	movs	r1, #32
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f000 f914 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	e03d      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2210      	movs	r2, #16
 8011360:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2220      	movs	r2, #32
 8011368:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	429a      	cmp	r2, r3
 8011370:	d118      	bne.n	80113a4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011380:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	2200      	movs	r2, #0
 801138a:	2120      	movs	r1, #32
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f000 f8f3 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8011398:	2301      	movs	r3, #1
 801139a:	e01c      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2220      	movs	r2, #32
 80113a2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	3301      	adds	r3, #1
 80113a8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	f63f af3b 	bhi.w	801122a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2220      	movs	r2, #32
 80113b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113c0:	f043 0220 	orr.w	r2, r3, #32
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	e000      	b.n	80113d6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80113d4:	2302      	movs	r3, #2
  }
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3720      	adds	r7, #32
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af02      	add	r7, sp, #8
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	4608      	mov	r0, r1
 80113ea:	4611      	mov	r1, r2
 80113ec:	461a      	mov	r2, r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	817b      	strh	r3, [r7, #10]
 80113f2:	460b      	mov	r3, r1
 80113f4:	813b      	strh	r3, [r7, #8]
 80113f6:	4613      	mov	r3, r2
 80113f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80113fa:	88fb      	ldrh	r3, [r7, #6]
 80113fc:	b2da      	uxtb	r2, r3
 80113fe:	8979      	ldrh	r1, [r7, #10]
 8011400:	4b20      	ldr	r3, [pc, #128]	; (8011484 <I2C_RequestMemoryWrite+0xa4>)
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011408:	68f8      	ldr	r0, [r7, #12]
 801140a:	f000 fa43 	bl	8011894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801140e:	69fa      	ldr	r2, [r7, #28]
 8011410:	69b9      	ldr	r1, [r7, #24]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f000 f8f0 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8011418:	4603      	mov	r3, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801141e:	2301      	movs	r3, #1
 8011420:	e02c      	b.n	801147c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011422:	88fb      	ldrh	r3, [r7, #6]
 8011424:	2b01      	cmp	r3, #1
 8011426:	d105      	bne.n	8011434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011428:	893b      	ldrh	r3, [r7, #8]
 801142a:	b2da      	uxtb	r2, r3
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	629a      	str	r2, [r3, #40]	; 0x28
 8011432:	e015      	b.n	8011460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011434:	893b      	ldrh	r3, [r7, #8]
 8011436:	0a1b      	lsrs	r3, r3, #8
 8011438:	b29b      	uxth	r3, r3
 801143a:	b2da      	uxtb	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011442:	69fa      	ldr	r2, [r7, #28]
 8011444:	69b9      	ldr	r1, [r7, #24]
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f000 f8d6 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	e012      	b.n	801147c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011456:	893b      	ldrh	r3, [r7, #8]
 8011458:	b2da      	uxtb	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	2200      	movs	r2, #0
 8011468:	2180      	movs	r1, #128	; 0x80
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 f884 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8011470:	4603      	mov	r3, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	3710      	adds	r7, #16
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	80002000 	.word	0x80002000

08011488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af02      	add	r7, sp, #8
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	4608      	mov	r0, r1
 8011492:	4611      	mov	r1, r2
 8011494:	461a      	mov	r2, r3
 8011496:	4603      	mov	r3, r0
 8011498:	817b      	strh	r3, [r7, #10]
 801149a:	460b      	mov	r3, r1
 801149c:	813b      	strh	r3, [r7, #8]
 801149e:	4613      	mov	r3, r2
 80114a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80114a2:	88fb      	ldrh	r3, [r7, #6]
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	8979      	ldrh	r1, [r7, #10]
 80114a8:	4b20      	ldr	r3, [pc, #128]	; (801152c <I2C_RequestMemoryRead+0xa4>)
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	2300      	movs	r3, #0
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	f000 f9f0 	bl	8011894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80114b4:	69fa      	ldr	r2, [r7, #28]
 80114b6:	69b9      	ldr	r1, [r7, #24]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 f89d 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80114c4:	2301      	movs	r3, #1
 80114c6:	e02c      	b.n	8011522 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80114c8:	88fb      	ldrh	r3, [r7, #6]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d105      	bne.n	80114da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80114ce:	893b      	ldrh	r3, [r7, #8]
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	629a      	str	r2, [r3, #40]	; 0x28
 80114d8:	e015      	b.n	8011506 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80114da:	893b      	ldrh	r3, [r7, #8]
 80114dc:	0a1b      	lsrs	r3, r3, #8
 80114de:	b29b      	uxth	r3, r3
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80114e8:	69fa      	ldr	r2, [r7, #28]
 80114ea:	69b9      	ldr	r1, [r7, #24]
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f883 	bl	80115f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d001      	beq.n	80114fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80114f8:	2301      	movs	r3, #1
 80114fa:	e012      	b.n	8011522 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80114fc:	893b      	ldrh	r3, [r7, #8]
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	2200      	movs	r2, #0
 801150e:	2140      	movs	r1, #64	; 0x40
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f000 f831 	bl	8011578 <I2C_WaitOnFlagUntilTimeout>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	e000      	b.n	8011522 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3710      	adds	r7, #16
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	80002000 	.word	0x80002000

08011530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	f003 0302 	and.w	r3, r3, #2
 8011542:	2b02      	cmp	r3, #2
 8011544:	d103      	bne.n	801154e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2200      	movs	r2, #0
 801154c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	699b      	ldr	r3, [r3, #24]
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b01      	cmp	r3, #1
 801155a:	d007      	beq.n	801156c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	699a      	ldr	r2, [r3, #24]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f042 0201 	orr.w	r2, r2, #1
 801156a:	619a      	str	r2, [r3, #24]
  }
}
 801156c:	bf00      	nop
 801156e:	370c      	adds	r7, #12
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr

08011578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	603b      	str	r3, [r7, #0]
 8011584:	4613      	mov	r3, r2
 8011586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011588:	e022      	b.n	80115d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011590:	d01e      	beq.n	80115d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011592:	f7fd fd23 	bl	800efdc <HAL_GetTick>
 8011596:	4602      	mov	r2, r0
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d302      	bcc.n	80115a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d113      	bne.n	80115d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ac:	f043 0220 	orr.w	r2, r3, #32
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2220      	movs	r2, #32
 80115b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80115cc:	2301      	movs	r3, #1
 80115ce:	e00f      	b.n	80115f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	699a      	ldr	r2, [r3, #24]
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	4013      	ands	r3, r2
 80115da:	68ba      	ldr	r2, [r7, #8]
 80115dc:	429a      	cmp	r2, r3
 80115de:	bf0c      	ite	eq
 80115e0:	2301      	moveq	r3, #1
 80115e2:	2300      	movne	r3, #0
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	461a      	mov	r2, r3
 80115e8:	79fb      	ldrb	r3, [r7, #7]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d0cd      	beq.n	801158a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011604:	e02c      	b.n	8011660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	68b9      	ldr	r1, [r7, #8]
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	f000 f8dc 	bl	80117c8 <I2C_IsAcknowledgeFailed>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d001      	beq.n	801161a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	e02a      	b.n	8011670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011620:	d01e      	beq.n	8011660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011622:	f7fd fcdb 	bl	800efdc <HAL_GetTick>
 8011626:	4602      	mov	r2, r0
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	429a      	cmp	r2, r3
 8011630:	d302      	bcc.n	8011638 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d113      	bne.n	8011660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163c:	f043 0220 	orr.w	r2, r3, #32
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2220      	movs	r2, #32
 8011648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2200      	movs	r2, #0
 8011658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801165c:	2301      	movs	r3, #1
 801165e:	e007      	b.n	8011670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	f003 0302 	and.w	r3, r3, #2
 801166a:	2b02      	cmp	r3, #2
 801166c:	d1cb      	bne.n	8011606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011684:	e028      	b.n	80116d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	68b9      	ldr	r1, [r7, #8]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f000 f89c 	bl	80117c8 <I2C_IsAcknowledgeFailed>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011696:	2301      	movs	r3, #1
 8011698:	e026      	b.n	80116e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801169a:	f7fd fc9f 	bl	800efdc <HAL_GetTick>
 801169e:	4602      	mov	r2, r0
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d302      	bcc.n	80116b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d113      	bne.n	80116d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b4:	f043 0220 	orr.w	r2, r3, #32
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2220      	movs	r2, #32
 80116c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e007      	b.n	80116e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	699b      	ldr	r3, [r3, #24]
 80116de:	f003 0320 	and.w	r3, r3, #32
 80116e2:	2b20      	cmp	r3, #32
 80116e4:	d1cf      	bne.n	8011686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80116e6:	2300      	movs	r3, #0
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80116fc:	e055      	b.n	80117aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	68b9      	ldr	r1, [r7, #8]
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f000 f860 	bl	80117c8 <I2C_IsAcknowledgeFailed>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	d001      	beq.n	8011712 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801170e:	2301      	movs	r3, #1
 8011710:	e053      	b.n	80117ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	f003 0320 	and.w	r3, r3, #32
 801171c:	2b20      	cmp	r3, #32
 801171e:	d129      	bne.n	8011774 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	699b      	ldr	r3, [r3, #24]
 8011726:	f003 0304 	and.w	r3, r3, #4
 801172a:	2b04      	cmp	r3, #4
 801172c:	d105      	bne.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011732:	2b00      	cmp	r3, #0
 8011734:	d001      	beq.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	e03f      	b.n	80117ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2220      	movs	r2, #32
 8011740:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	6859      	ldr	r1, [r3, #4]
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	4b1d      	ldr	r3, [pc, #116]	; (80117c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 801174e:	400b      	ands	r3, r1
 8011750:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2220      	movs	r2, #32
 801175c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2200      	movs	r2, #0
 801176c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011770:	2301      	movs	r3, #1
 8011772:	e022      	b.n	80117ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011774:	f7fd fc32 	bl	800efdc <HAL_GetTick>
 8011778:	4602      	mov	r2, r0
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	429a      	cmp	r2, r3
 8011782:	d302      	bcc.n	801178a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d10f      	bne.n	80117aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801178e:	f043 0220 	orr.w	r2, r3, #32
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2220      	movs	r2, #32
 801179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80117a6:	2301      	movs	r3, #1
 80117a8:	e007      	b.n	80117ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	699b      	ldr	r3, [r3, #24]
 80117b0:	f003 0304 	and.w	r3, r3, #4
 80117b4:	2b04      	cmp	r3, #4
 80117b6:	d1a2      	bne.n	80116fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	fe00e800 	.word	0xfe00e800

080117c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	699b      	ldr	r3, [r3, #24]
 80117da:	f003 0310 	and.w	r3, r3, #16
 80117de:	2b10      	cmp	r3, #16
 80117e0:	d151      	bne.n	8011886 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80117e2:	e022      	b.n	801182a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ea:	d01e      	beq.n	801182a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117ec:	f7fd fbf6 	bl	800efdc <HAL_GetTick>
 80117f0:	4602      	mov	r2, r0
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	68ba      	ldr	r2, [r7, #8]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d302      	bcc.n	8011802 <I2C_IsAcknowledgeFailed+0x3a>
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d113      	bne.n	801182a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011806:	f043 0220 	orr.w	r2, r3, #32
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2220      	movs	r2, #32
 8011812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2200      	movs	r2, #0
 801181a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	e02e      	b.n	8011888 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	699b      	ldr	r3, [r3, #24]
 8011830:	f003 0320 	and.w	r3, r3, #32
 8011834:	2b20      	cmp	r3, #32
 8011836:	d1d5      	bne.n	80117e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2210      	movs	r2, #16
 801183e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2220      	movs	r2, #32
 8011846:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011848:	68f8      	ldr	r0, [r7, #12]
 801184a:	f7ff fe71 	bl	8011530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	6859      	ldr	r1, [r3, #4]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	4b0d      	ldr	r3, [pc, #52]	; (8011890 <I2C_IsAcknowledgeFailed+0xc8>)
 801185a:	400b      	ands	r3, r1
 801185c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011862:	f043 0204 	orr.w	r2, r3, #4
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2220      	movs	r2, #32
 801186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2200      	movs	r2, #0
 8011876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	e000      	b.n	8011888 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8011886:	2300      	movs	r3, #0
}
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	fe00e800 	.word	0xfe00e800

08011894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011894:	b480      	push	{r7}
 8011896:	b085      	sub	sp, #20
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	607b      	str	r3, [r7, #4]
 801189e:	460b      	mov	r3, r1
 80118a0:	817b      	strh	r3, [r7, #10]
 80118a2:	4613      	mov	r3, r2
 80118a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	685a      	ldr	r2, [r3, #4]
 80118ac:	69bb      	ldr	r3, [r7, #24]
 80118ae:	0d5b      	lsrs	r3, r3, #21
 80118b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80118b4:	4b0d      	ldr	r3, [pc, #52]	; (80118ec <I2C_TransferConfig+0x58>)
 80118b6:	430b      	orrs	r3, r1
 80118b8:	43db      	mvns	r3, r3
 80118ba:	ea02 0103 	and.w	r1, r2, r3
 80118be:	897b      	ldrh	r3, [r7, #10]
 80118c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80118c4:	7a7b      	ldrb	r3, [r7, #9]
 80118c6:	041b      	lsls	r3, r3, #16
 80118c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	431a      	orrs	r2, r3
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	431a      	orrs	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	430a      	orrs	r2, r1
 80118dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80118de:	bf00      	nop
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	03ff63ff 	.word	0x03ff63ff

080118f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011900:	b2db      	uxtb	r3, r3
 8011902:	2b20      	cmp	r3, #32
 8011904:	d138      	bne.n	8011978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801190c:	2b01      	cmp	r3, #1
 801190e:	d101      	bne.n	8011914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011910:	2302      	movs	r3, #2
 8011912:	e032      	b.n	801197a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2201      	movs	r2, #1
 8011918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2224      	movs	r2, #36	; 0x24
 8011920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f022 0201 	bic.w	r2, r2, #1
 8011932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6819      	ldr	r1, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	683a      	ldr	r2, [r7, #0]
 8011950:	430a      	orrs	r2, r1
 8011952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f042 0201 	orr.w	r2, r2, #1
 8011962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2220      	movs	r2, #32
 8011968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2200      	movs	r2, #0
 8011970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011974:	2300      	movs	r3, #0
 8011976:	e000      	b.n	801197a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011978:	2302      	movs	r3, #2
  }
}
 801197a:	4618      	mov	r0, r3
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr

08011986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011986:	b480      	push	{r7}
 8011988:	b085      	sub	sp, #20
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011996:	b2db      	uxtb	r3, r3
 8011998:	2b20      	cmp	r3, #32
 801199a:	d139      	bne.n	8011a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d101      	bne.n	80119aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80119a6:	2302      	movs	r3, #2
 80119a8:	e033      	b.n	8011a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2201      	movs	r2, #1
 80119ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2224      	movs	r2, #36	; 0x24
 80119b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	f022 0201 	bic.w	r2, r2, #1
 80119c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80119d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	021b      	lsls	r3, r3, #8
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	4313      	orrs	r3, r2
 80119e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	68fa      	ldr	r2, [r7, #12]
 80119ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f042 0201 	orr.w	r2, r2, #1
 80119fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2220      	movs	r2, #32
 8011a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	e000      	b.n	8011a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011a10:	2302      	movs	r3, #2
  }
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3714      	adds	r7, #20
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
	...

08011a20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011a20:	b480      	push	{r7}
 8011a22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a24:	4b05      	ldr	r3, [pc, #20]	; (8011a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	4a04      	ldr	r2, [pc, #16]	; (8011a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a2e:	6013      	str	r3, [r2, #0]
}
 8011a30:	bf00      	nop
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	40007000 	.word	0x40007000

08011a40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011a40:	b480      	push	{r7}
 8011a42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8011a44:	4b04      	ldr	r3, [pc, #16]	; (8011a58 <HAL_PWREx_GetVoltageRange+0x18>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	40007000 	.word	0x40007000

08011a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b085      	sub	sp, #20
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a6a:	d130      	bne.n	8011ace <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8011a6c:	4b23      	ldr	r3, [pc, #140]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a78:	d038      	beq.n	8011aec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8011a7a:	4b20      	ldr	r3, [pc, #128]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011a82:	4a1e      	ldr	r2, [pc, #120]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011a84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011a88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2232      	movs	r2, #50	; 0x32
 8011a90:	fb02 f303 	mul.w	r3, r2, r3
 8011a94:	4a1b      	ldr	r2, [pc, #108]	; (8011b04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011a96:	fba2 2303 	umull	r2, r3, r2, r3
 8011a9a:	0c9b      	lsrs	r3, r3, #18
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011aa0:	e002      	b.n	8011aa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	3b01      	subs	r3, #1
 8011aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011aa8:	4b14      	ldr	r3, [pc, #80]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ab4:	d102      	bne.n	8011abc <HAL_PWREx_ControlVoltageScaling+0x60>
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d1f2      	bne.n	8011aa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011abc:	4b0f      	ldr	r3, [pc, #60]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ac8:	d110      	bne.n	8011aec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8011aca:	2303      	movs	r3, #3
 8011acc:	e00f      	b.n	8011aee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8011ace:	4b0b      	ldr	r3, [pc, #44]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ada:	d007      	beq.n	8011aec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8011adc:	4b07      	ldr	r3, [pc, #28]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8011ae4:	4a05      	ldr	r2, [pc, #20]	; (8011afc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8011ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011aea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3714      	adds	r7, #20
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	40007000 	.word	0x40007000
 8011b00:	2000018c 	.word	0x2000018c
 8011b04:	431bde83 	.word	0x431bde83

08011b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b088      	sub	sp, #32
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	f000 bc11 	b.w	801233e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011b1c:	4ba0      	ldr	r3, [pc, #640]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	f003 030c 	and.w	r3, r3, #12
 8011b24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011b26:	4b9e      	ldr	r3, [pc, #632]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	f003 0303 	and.w	r3, r3, #3
 8011b2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f003 0310 	and.w	r3, r3, #16
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f000 80e4 	beq.w	8011d06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d007      	beq.n	8011b54 <HAL_RCC_OscConfig+0x4c>
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	2b0c      	cmp	r3, #12
 8011b48:	f040 808b 	bne.w	8011c62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	f040 8087 	bne.w	8011c62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011b54:	4b92      	ldr	r3, [pc, #584]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f003 0302 	and.w	r3, r3, #2
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d005      	beq.n	8011b6c <HAL_RCC_OscConfig+0x64>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	699b      	ldr	r3, [r3, #24]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d101      	bne.n	8011b6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	e3e8      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a1a      	ldr	r2, [r3, #32]
 8011b70:	4b8b      	ldr	r3, [pc, #556]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f003 0308 	and.w	r3, r3, #8
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d004      	beq.n	8011b86 <HAL_RCC_OscConfig+0x7e>
 8011b7c:	4b88      	ldr	r3, [pc, #544]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b84:	e005      	b.n	8011b92 <HAL_RCC_OscConfig+0x8a>
 8011b86:	4b86      	ldr	r3, [pc, #536]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b8c:	091b      	lsrs	r3, r3, #4
 8011b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d223      	bcs.n	8011bde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a1b      	ldr	r3, [r3, #32]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 fdac 	bl	80126f8 <RCC_SetFlashLatencyFromMSIRange>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e3c9      	b.n	801233e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011baa:	4b7d      	ldr	r3, [pc, #500]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	4a7c      	ldr	r2, [pc, #496]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bb0:	f043 0308 	orr.w	r3, r3, #8
 8011bb4:	6013      	str	r3, [r2, #0]
 8011bb6:	4b7a      	ldr	r3, [pc, #488]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	4977      	ldr	r1, [pc, #476]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011bc8:	4b75      	ldr	r3, [pc, #468]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	69db      	ldr	r3, [r3, #28]
 8011bd4:	021b      	lsls	r3, r3, #8
 8011bd6:	4972      	ldr	r1, [pc, #456]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bd8:	4313      	orrs	r3, r2
 8011bda:	604b      	str	r3, [r1, #4]
 8011bdc:	e025      	b.n	8011c2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011bde:	4b70      	ldr	r3, [pc, #448]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4a6f      	ldr	r2, [pc, #444]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011be4:	f043 0308 	orr.w	r3, r3, #8
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	4b6d      	ldr	r3, [pc, #436]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a1b      	ldr	r3, [r3, #32]
 8011bf6:	496a      	ldr	r1, [pc, #424]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011bfc:	4b68      	ldr	r3, [pc, #416]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	69db      	ldr	r3, [r3, #28]
 8011c08:	021b      	lsls	r3, r3, #8
 8011c0a:	4965      	ldr	r1, [pc, #404]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d109      	bne.n	8011c2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a1b      	ldr	r3, [r3, #32]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 fd6c 	bl	80126f8 <RCC_SetFlashLatencyFromMSIRange>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d001      	beq.n	8011c2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8011c26:	2301      	movs	r3, #1
 8011c28:	e389      	b.n	801233e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011c2a:	f000 fc6f 	bl	801250c <HAL_RCC_GetSysClockFreq>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	4b5b      	ldr	r3, [pc, #364]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	091b      	lsrs	r3, r3, #4
 8011c36:	f003 030f 	and.w	r3, r3, #15
 8011c3a:	495a      	ldr	r1, [pc, #360]	; (8011da4 <HAL_RCC_OscConfig+0x29c>)
 8011c3c:	5ccb      	ldrb	r3, [r1, r3]
 8011c3e:	f003 031f 	and.w	r3, r3, #31
 8011c42:	fa22 f303 	lsr.w	r3, r2, r3
 8011c46:	4a58      	ldr	r2, [pc, #352]	; (8011da8 <HAL_RCC_OscConfig+0x2a0>)
 8011c48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8011c4a:	4b58      	ldr	r3, [pc, #352]	; (8011dac <HAL_RCC_OscConfig+0x2a4>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fc ffc2 	bl	800ebd8 <HAL_InitTick>
 8011c54:	4603      	mov	r3, r0
 8011c56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d052      	beq.n	8011d04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8011c5e:	7bfb      	ldrb	r3, [r7, #15]
 8011c60:	e36d      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	699b      	ldr	r3, [r3, #24]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d032      	beq.n	8011cd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011c6a:	4b4d      	ldr	r3, [pc, #308]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4a4c      	ldr	r2, [pc, #304]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c70:	f043 0301 	orr.w	r3, r3, #1
 8011c74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011c76:	f7fd f9b1 	bl	800efdc <HAL_GetTick>
 8011c7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011c7c:	e008      	b.n	8011c90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011c7e:	f7fd f9ad 	bl	800efdc <HAL_GetTick>
 8011c82:	4602      	mov	r2, r0
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	2b02      	cmp	r3, #2
 8011c8a:	d901      	bls.n	8011c90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8011c8c:	2303      	movs	r3, #3
 8011c8e:	e356      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011c90:	4b43      	ldr	r3, [pc, #268]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f003 0302 	and.w	r3, r3, #2
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d0f0      	beq.n	8011c7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011c9c:	4b40      	ldr	r3, [pc, #256]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4a3f      	ldr	r2, [pc, #252]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011ca2:	f043 0308 	orr.w	r3, r3, #8
 8011ca6:	6013      	str	r3, [r2, #0]
 8011ca8:	4b3d      	ldr	r3, [pc, #244]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6a1b      	ldr	r3, [r3, #32]
 8011cb4:	493a      	ldr	r1, [pc, #232]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011cba:	4b39      	ldr	r3, [pc, #228]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	69db      	ldr	r3, [r3, #28]
 8011cc6:	021b      	lsls	r3, r3, #8
 8011cc8:	4935      	ldr	r1, [pc, #212]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cca:	4313      	orrs	r3, r2
 8011ccc:	604b      	str	r3, [r1, #4]
 8011cce:	e01a      	b.n	8011d06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011cd0:	4b33      	ldr	r3, [pc, #204]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	4a32      	ldr	r2, [pc, #200]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cd6:	f023 0301 	bic.w	r3, r3, #1
 8011cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011cdc:	f7fd f97e 	bl	800efdc <HAL_GetTick>
 8011ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011ce2:	e008      	b.n	8011cf6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011ce4:	f7fd f97a 	bl	800efdc <HAL_GetTick>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	2b02      	cmp	r3, #2
 8011cf0:	d901      	bls.n	8011cf6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8011cf2:	2303      	movs	r3, #3
 8011cf4:	e323      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011cf6:	4b2a      	ldr	r3, [pc, #168]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f003 0302 	and.w	r3, r3, #2
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1f0      	bne.n	8011ce4 <HAL_RCC_OscConfig+0x1dc>
 8011d02:	e000      	b.n	8011d06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011d04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f003 0301 	and.w	r3, r3, #1
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d073      	beq.n	8011dfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	2b08      	cmp	r3, #8
 8011d16:	d005      	beq.n	8011d24 <HAL_RCC_OscConfig+0x21c>
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	2b0c      	cmp	r3, #12
 8011d1c:	d10e      	bne.n	8011d3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	2b03      	cmp	r3, #3
 8011d22:	d10b      	bne.n	8011d3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d24:	4b1e      	ldr	r3, [pc, #120]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d063      	beq.n	8011df8 <HAL_RCC_OscConfig+0x2f0>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d15f      	bne.n	8011df8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e300      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d44:	d106      	bne.n	8011d54 <HAL_RCC_OscConfig+0x24c>
 8011d46:	4b16      	ldr	r3, [pc, #88]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4a15      	ldr	r2, [pc, #84]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d50:	6013      	str	r3, [r2, #0]
 8011d52:	e01d      	b.n	8011d90 <HAL_RCC_OscConfig+0x288>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d5c:	d10c      	bne.n	8011d78 <HAL_RCC_OscConfig+0x270>
 8011d5e:	4b10      	ldr	r3, [pc, #64]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a0f      	ldr	r2, [pc, #60]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011d68:	6013      	str	r3, [r2, #0]
 8011d6a:	4b0d      	ldr	r3, [pc, #52]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a0c      	ldr	r2, [pc, #48]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d74:	6013      	str	r3, [r2, #0]
 8011d76:	e00b      	b.n	8011d90 <HAL_RCC_OscConfig+0x288>
 8011d78:	4b09      	ldr	r3, [pc, #36]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4a08      	ldr	r2, [pc, #32]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d82:	6013      	str	r3, [r2, #0]
 8011d84:	4b06      	ldr	r3, [pc, #24]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a05      	ldr	r2, [pc, #20]	; (8011da0 <HAL_RCC_OscConfig+0x298>)
 8011d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d01b      	beq.n	8011dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d98:	f7fd f920 	bl	800efdc <HAL_GetTick>
 8011d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011d9e:	e010      	b.n	8011dc2 <HAL_RCC_OscConfig+0x2ba>
 8011da0:	40021000 	.word	0x40021000
 8011da4:	0801fee4 	.word	0x0801fee4
 8011da8:	2000018c 	.word	0x2000018c
 8011dac:	20000190 	.word	0x20000190
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011db0:	f7fd f914 	bl	800efdc <HAL_GetTick>
 8011db4:	4602      	mov	r2, r0
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	2b64      	cmp	r3, #100	; 0x64
 8011dbc:	d901      	bls.n	8011dc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8011dbe:	2303      	movs	r3, #3
 8011dc0:	e2bd      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011dc2:	4baf      	ldr	r3, [pc, #700]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d0f0      	beq.n	8011db0 <HAL_RCC_OscConfig+0x2a8>
 8011dce:	e014      	b.n	8011dfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011dd0:	f7fd f904 	bl	800efdc <HAL_GetTick>
 8011dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011dd6:	e008      	b.n	8011dea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011dd8:	f7fd f900 	bl	800efdc <HAL_GetTick>
 8011ddc:	4602      	mov	r2, r0
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	1ad3      	subs	r3, r2, r3
 8011de2:	2b64      	cmp	r3, #100	; 0x64
 8011de4:	d901      	bls.n	8011dea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011de6:	2303      	movs	r3, #3
 8011de8:	e2a9      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011dea:	4ba5      	ldr	r3, [pc, #660]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1f0      	bne.n	8011dd8 <HAL_RCC_OscConfig+0x2d0>
 8011df6:	e000      	b.n	8011dfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f003 0302 	and.w	r3, r3, #2
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d060      	beq.n	8011ec8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	2b04      	cmp	r3, #4
 8011e0a:	d005      	beq.n	8011e18 <HAL_RCC_OscConfig+0x310>
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	2b0c      	cmp	r3, #12
 8011e10:	d119      	bne.n	8011e46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d116      	bne.n	8011e46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011e18:	4b99      	ldr	r3, [pc, #612]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d005      	beq.n	8011e30 <HAL_RCC_OscConfig+0x328>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d101      	bne.n	8011e30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e286      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e30:	4b93      	ldr	r3, [pc, #588]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	061b      	lsls	r3, r3, #24
 8011e3e:	4990      	ldr	r1, [pc, #576]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e40:	4313      	orrs	r3, r2
 8011e42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011e44:	e040      	b.n	8011ec8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d023      	beq.n	8011e96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011e4e:	4b8c      	ldr	r3, [pc, #560]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a8b      	ldr	r2, [pc, #556]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e5a:	f7fd f8bf 	bl	800efdc <HAL_GetTick>
 8011e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011e60:	e008      	b.n	8011e74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011e62:	f7fd f8bb 	bl	800efdc <HAL_GetTick>
 8011e66:	4602      	mov	r2, r0
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d901      	bls.n	8011e74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8011e70:	2303      	movs	r3, #3
 8011e72:	e264      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011e74:	4b82      	ldr	r3, [pc, #520]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d0f0      	beq.n	8011e62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e80:	4b7f      	ldr	r3, [pc, #508]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	691b      	ldr	r3, [r3, #16]
 8011e8c:	061b      	lsls	r3, r3, #24
 8011e8e:	497c      	ldr	r1, [pc, #496]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e90:	4313      	orrs	r3, r2
 8011e92:	604b      	str	r3, [r1, #4]
 8011e94:	e018      	b.n	8011ec8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011e96:	4b7a      	ldr	r3, [pc, #488]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	4a79      	ldr	r2, [pc, #484]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ea2:	f7fd f89b 	bl	800efdc <HAL_GetTick>
 8011ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011ea8:	e008      	b.n	8011ebc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011eaa:	f7fd f897 	bl	800efdc <HAL_GetTick>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	1ad3      	subs	r3, r2, r3
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d901      	bls.n	8011ebc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8011eb8:	2303      	movs	r3, #3
 8011eba:	e240      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8011ebc:	4b70      	ldr	r3, [pc, #448]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1f0      	bne.n	8011eaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f003 0308 	and.w	r3, r3, #8
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d03c      	beq.n	8011f4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	695b      	ldr	r3, [r3, #20]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d01c      	beq.n	8011f16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011edc:	4b68      	ldr	r3, [pc, #416]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ee2:	4a67      	ldr	r2, [pc, #412]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011ee4:	f043 0301 	orr.w	r3, r3, #1
 8011ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011eec:	f7fd f876 	bl	800efdc <HAL_GetTick>
 8011ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011ef2:	e008      	b.n	8011f06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011ef4:	f7fd f872 	bl	800efdc <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	d901      	bls.n	8011f06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8011f02:	2303      	movs	r3, #3
 8011f04:	e21b      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011f06:	4b5e      	ldr	r3, [pc, #376]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f0c:	f003 0302 	and.w	r3, r3, #2
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d0ef      	beq.n	8011ef4 <HAL_RCC_OscConfig+0x3ec>
 8011f14:	e01b      	b.n	8011f4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011f16:	4b5a      	ldr	r3, [pc, #360]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f1c:	4a58      	ldr	r2, [pc, #352]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f1e:	f023 0301 	bic.w	r3, r3, #1
 8011f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011f26:	f7fd f859 	bl	800efdc <HAL_GetTick>
 8011f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011f2c:	e008      	b.n	8011f40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011f2e:	f7fd f855 	bl	800efdc <HAL_GetTick>
 8011f32:	4602      	mov	r2, r0
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d901      	bls.n	8011f40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8011f3c:	2303      	movs	r3, #3
 8011f3e:	e1fe      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011f40:	4b4f      	ldr	r3, [pc, #316]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f46:	f003 0302 	and.w	r3, r3, #2
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d1ef      	bne.n	8011f2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f003 0304 	and.w	r3, r3, #4
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 80a6 	beq.w	80120a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8011f60:	4b47      	ldr	r3, [pc, #284]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d10d      	bne.n	8011f88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011f6c:	4b44      	ldr	r3, [pc, #272]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f70:	4a43      	ldr	r2, [pc, #268]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f76:	6593      	str	r3, [r2, #88]	; 0x58
 8011f78:	4b41      	ldr	r3, [pc, #260]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f80:	60bb      	str	r3, [r7, #8]
 8011f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011f84:	2301      	movs	r3, #1
 8011f86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011f88:	4b3e      	ldr	r3, [pc, #248]	; (8012084 <HAL_RCC_OscConfig+0x57c>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d118      	bne.n	8011fc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011f94:	4b3b      	ldr	r3, [pc, #236]	; (8012084 <HAL_RCC_OscConfig+0x57c>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a3a      	ldr	r2, [pc, #232]	; (8012084 <HAL_RCC_OscConfig+0x57c>)
 8011f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011fa0:	f7fd f81c 	bl	800efdc <HAL_GetTick>
 8011fa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011fa6:	e008      	b.n	8011fba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fa8:	f7fd f818 	bl	800efdc <HAL_GetTick>
 8011fac:	4602      	mov	r2, r0
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d901      	bls.n	8011fba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8011fb6:	2303      	movs	r3, #3
 8011fb8:	e1c1      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011fba:	4b32      	ldr	r3, [pc, #200]	; (8012084 <HAL_RCC_OscConfig+0x57c>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d0f0      	beq.n	8011fa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d108      	bne.n	8011fe0 <HAL_RCC_OscConfig+0x4d8>
 8011fce:	4b2c      	ldr	r3, [pc, #176]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fd4:	4a2a      	ldr	r2, [pc, #168]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011fd6:	f043 0301 	orr.w	r3, r3, #1
 8011fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011fde:	e024      	b.n	801202a <HAL_RCC_OscConfig+0x522>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	2b05      	cmp	r3, #5
 8011fe6:	d110      	bne.n	801200a <HAL_RCC_OscConfig+0x502>
 8011fe8:	4b25      	ldr	r3, [pc, #148]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fee:	4a24      	ldr	r2, [pc, #144]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011ff0:	f043 0304 	orr.w	r3, r3, #4
 8011ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011ff8:	4b21      	ldr	r3, [pc, #132]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8011ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ffe:	4a20      	ldr	r2, [pc, #128]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8012000:	f043 0301 	orr.w	r3, r3, #1
 8012004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8012008:	e00f      	b.n	801202a <HAL_RCC_OscConfig+0x522>
 801200a:	4b1d      	ldr	r3, [pc, #116]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 801200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012010:	4a1b      	ldr	r2, [pc, #108]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8012012:	f023 0301 	bic.w	r3, r3, #1
 8012016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801201a:	4b19      	ldr	r3, [pc, #100]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 801201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012020:	4a17      	ldr	r2, [pc, #92]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8012022:	f023 0304 	bic.w	r3, r3, #4
 8012026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d016      	beq.n	8012060 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012032:	f7fc ffd3 	bl	800efdc <HAL_GetTick>
 8012036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012038:	e00a      	b.n	8012050 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801203a:	f7fc ffcf 	bl	800efdc <HAL_GetTick>
 801203e:	4602      	mov	r2, r0
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	1ad3      	subs	r3, r2, r3
 8012044:	f241 3288 	movw	r2, #5000	; 0x1388
 8012048:	4293      	cmp	r3, r2
 801204a:	d901      	bls.n	8012050 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 801204c:	2303      	movs	r3, #3
 801204e:	e176      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012050:	4b0b      	ldr	r3, [pc, #44]	; (8012080 <HAL_RCC_OscConfig+0x578>)
 8012052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012056:	f003 0302 	and.w	r3, r3, #2
 801205a:	2b00      	cmp	r3, #0
 801205c:	d0ed      	beq.n	801203a <HAL_RCC_OscConfig+0x532>
 801205e:	e01a      	b.n	8012096 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012060:	f7fc ffbc 	bl	800efdc <HAL_GetTick>
 8012064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012066:	e00f      	b.n	8012088 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012068:	f7fc ffb8 	bl	800efdc <HAL_GetTick>
 801206c:	4602      	mov	r2, r0
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	f241 3288 	movw	r2, #5000	; 0x1388
 8012076:	4293      	cmp	r3, r2
 8012078:	d906      	bls.n	8012088 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801207a:	2303      	movs	r3, #3
 801207c:	e15f      	b.n	801233e <HAL_RCC_OscConfig+0x836>
 801207e:	bf00      	nop
 8012080:	40021000 	.word	0x40021000
 8012084:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012088:	4baa      	ldr	r3, [pc, #680]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801208e:	f003 0302 	and.w	r3, r3, #2
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1e8      	bne.n	8012068 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012096:	7ffb      	ldrb	r3, [r7, #31]
 8012098:	2b01      	cmp	r3, #1
 801209a:	d105      	bne.n	80120a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801209c:	4ba5      	ldr	r3, [pc, #660]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120a0:	4aa4      	ldr	r2, [pc, #656]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f003 0320 	and.w	r3, r3, #32
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d03c      	beq.n	801212e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d01c      	beq.n	80120f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80120bc:	4b9d      	ldr	r3, [pc, #628]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80120c2:	4a9c      	ldr	r2, [pc, #624]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120c4:	f043 0301 	orr.w	r3, r3, #1
 80120c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120cc:	f7fc ff86 	bl	800efdc <HAL_GetTick>
 80120d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80120d2:	e008      	b.n	80120e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80120d4:	f7fc ff82 	bl	800efdc <HAL_GetTick>
 80120d8:	4602      	mov	r2, r0
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d901      	bls.n	80120e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80120e2:	2303      	movs	r3, #3
 80120e4:	e12b      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80120e6:	4b93      	ldr	r3, [pc, #588]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80120ec:	f003 0302 	and.w	r3, r3, #2
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d0ef      	beq.n	80120d4 <HAL_RCC_OscConfig+0x5cc>
 80120f4:	e01b      	b.n	801212e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80120f6:	4b8f      	ldr	r3, [pc, #572]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80120fc:	4a8d      	ldr	r2, [pc, #564]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80120fe:	f023 0301 	bic.w	r3, r3, #1
 8012102:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012106:	f7fc ff69 	bl	800efdc <HAL_GetTick>
 801210a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801210c:	e008      	b.n	8012120 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801210e:	f7fc ff65 	bl	800efdc <HAL_GetTick>
 8012112:	4602      	mov	r2, r0
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	1ad3      	subs	r3, r2, r3
 8012118:	2b02      	cmp	r3, #2
 801211a:	d901      	bls.n	8012120 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 801211c:	2303      	movs	r3, #3
 801211e:	e10e      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8012120:	4b84      	ldr	r3, [pc, #528]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012126:	f003 0302 	and.w	r3, r3, #2
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1ef      	bne.n	801210e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012132:	2b00      	cmp	r3, #0
 8012134:	f000 8102 	beq.w	801233c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801213c:	2b02      	cmp	r3, #2
 801213e:	f040 80c5 	bne.w	80122cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8012142:	4b7c      	ldr	r3, [pc, #496]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	f003 0203 	and.w	r2, r3, #3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012152:	429a      	cmp	r2, r3
 8012154:	d12c      	bne.n	80121b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012160:	3b01      	subs	r3, #1
 8012162:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8012164:	429a      	cmp	r2, r3
 8012166:	d123      	bne.n	80121b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012172:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012174:	429a      	cmp	r2, r3
 8012176:	d11b      	bne.n	80121b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012182:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8012184:	429a      	cmp	r2, r3
 8012186:	d113      	bne.n	80121b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012192:	085b      	lsrs	r3, r3, #1
 8012194:	3b01      	subs	r3, #1
 8012196:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012198:	429a      	cmp	r2, r3
 801219a:	d109      	bne.n	80121b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a6:	085b      	lsrs	r3, r3, #1
 80121a8:	3b01      	subs	r3, #1
 80121aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d067      	beq.n	8012280 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	2b0c      	cmp	r3, #12
 80121b4:	d062      	beq.n	801227c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80121b6:	4b5f      	ldr	r3, [pc, #380]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80121c2:	2301      	movs	r3, #1
 80121c4:	e0bb      	b.n	801233e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80121c6:	4b5b      	ldr	r3, [pc, #364]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a5a      	ldr	r2, [pc, #360]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80121cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80121d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80121d2:	f7fc ff03 	bl	800efdc <HAL_GetTick>
 80121d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80121d8:	e008      	b.n	80121ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80121da:	f7fc feff 	bl	800efdc <HAL_GetTick>
 80121de:	4602      	mov	r2, r0
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d901      	bls.n	80121ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80121e8:	2303      	movs	r3, #3
 80121ea:	e0a8      	b.n	801233e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80121ec:	4b51      	ldr	r3, [pc, #324]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1f0      	bne.n	80121da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80121f8:	4b4e      	ldr	r3, [pc, #312]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80121fa:	68da      	ldr	r2, [r3, #12]
 80121fc:	4b4e      	ldr	r3, [pc, #312]	; (8012338 <HAL_RCC_OscConfig+0x830>)
 80121fe:	4013      	ands	r3, r2
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012208:	3a01      	subs	r2, #1
 801220a:	0112      	lsls	r2, r2, #4
 801220c:	4311      	orrs	r1, r2
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012212:	0212      	lsls	r2, r2, #8
 8012214:	4311      	orrs	r1, r2
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801221a:	0852      	lsrs	r2, r2, #1
 801221c:	3a01      	subs	r2, #1
 801221e:	0552      	lsls	r2, r2, #21
 8012220:	4311      	orrs	r1, r2
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012226:	0852      	lsrs	r2, r2, #1
 8012228:	3a01      	subs	r2, #1
 801222a:	0652      	lsls	r2, r2, #25
 801222c:	4311      	orrs	r1, r2
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012232:	06d2      	lsls	r2, r2, #27
 8012234:	430a      	orrs	r2, r1
 8012236:	493f      	ldr	r1, [pc, #252]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012238:	4313      	orrs	r3, r2
 801223a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801223c:	4b3d      	ldr	r3, [pc, #244]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4a3c      	ldr	r2, [pc, #240]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012246:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012248:	4b3a      	ldr	r3, [pc, #232]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	4a39      	ldr	r2, [pc, #228]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012252:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8012254:	f7fc fec2 	bl	800efdc <HAL_GetTick>
 8012258:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801225a:	e008      	b.n	801226e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801225c:	f7fc febe 	bl	800efdc <HAL_GetTick>
 8012260:	4602      	mov	r2, r0
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	2b02      	cmp	r3, #2
 8012268:	d901      	bls.n	801226e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 801226a:	2303      	movs	r3, #3
 801226c:	e067      	b.n	801233e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801226e:	4b31      	ldr	r3, [pc, #196]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012276:	2b00      	cmp	r3, #0
 8012278:	d0f0      	beq.n	801225c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801227a:	e05f      	b.n	801233c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801227c:	2301      	movs	r3, #1
 801227e:	e05e      	b.n	801233e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012280:	4b2c      	ldr	r3, [pc, #176]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d157      	bne.n	801233c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801228c:	4b29      	ldr	r3, [pc, #164]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a28      	ldr	r2, [pc, #160]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012296:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012298:	4b26      	ldr	r3, [pc, #152]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	4a25      	ldr	r2, [pc, #148]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 801229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80122a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80122a4:	f7fc fe9a 	bl	800efdc <HAL_GetTick>
 80122a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80122aa:	e008      	b.n	80122be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80122ac:	f7fc fe96 	bl	800efdc <HAL_GetTick>
 80122b0:	4602      	mov	r2, r0
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	2b02      	cmp	r3, #2
 80122b8:	d901      	bls.n	80122be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80122ba:	2303      	movs	r3, #3
 80122bc:	e03f      	b.n	801233e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80122be:	4b1d      	ldr	r3, [pc, #116]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d0f0      	beq.n	80122ac <HAL_RCC_OscConfig+0x7a4>
 80122ca:	e037      	b.n	801233c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	2b0c      	cmp	r3, #12
 80122d0:	d02d      	beq.n	801232e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80122d2:	4b18      	ldr	r3, [pc, #96]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4a17      	ldr	r2, [pc, #92]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80122dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80122de:	4b15      	ldr	r3, [pc, #84]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d105      	bne.n	80122f6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80122ea:	4b12      	ldr	r3, [pc, #72]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	4a11      	ldr	r2, [pc, #68]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122f0:	f023 0303 	bic.w	r3, r3, #3
 80122f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80122f6:	4b0f      	ldr	r3, [pc, #60]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	4a0e      	ldr	r2, [pc, #56]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 80122fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8012300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012304:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012306:	f7fc fe69 	bl	800efdc <HAL_GetTick>
 801230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801230c:	e008      	b.n	8012320 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801230e:	f7fc fe65 	bl	800efdc <HAL_GetTick>
 8012312:	4602      	mov	r2, r0
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	2b02      	cmp	r3, #2
 801231a:	d901      	bls.n	8012320 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 801231c:	2303      	movs	r3, #3
 801231e:	e00e      	b.n	801233e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <HAL_RCC_OscConfig+0x82c>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d1f0      	bne.n	801230e <HAL_RCC_OscConfig+0x806>
 801232c:	e006      	b.n	801233c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801232e:	2301      	movs	r3, #1
 8012330:	e005      	b.n	801233e <HAL_RCC_OscConfig+0x836>
 8012332:	bf00      	nop
 8012334:	40021000 	.word	0x40021000
 8012338:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3720      	adds	r7, #32
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop

08012348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d101      	bne.n	801235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012358:	2301      	movs	r3, #1
 801235a:	e0c8      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801235c:	4b66      	ldr	r3, [pc, #408]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f003 0307 	and.w	r3, r3, #7
 8012364:	683a      	ldr	r2, [r7, #0]
 8012366:	429a      	cmp	r2, r3
 8012368:	d910      	bls.n	801238c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801236a:	4b63      	ldr	r3, [pc, #396]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f023 0207 	bic.w	r2, r3, #7
 8012372:	4961      	ldr	r1, [pc, #388]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	4313      	orrs	r3, r2
 8012378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801237a:	4b5f      	ldr	r3, [pc, #380]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f003 0307 	and.w	r3, r3, #7
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	429a      	cmp	r2, r3
 8012386:	d001      	beq.n	801238c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012388:	2301      	movs	r3, #1
 801238a:	e0b0      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f003 0301 	and.w	r3, r3, #1
 8012394:	2b00      	cmp	r3, #0
 8012396:	d04c      	beq.n	8012432 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	2b03      	cmp	r3, #3
 801239e:	d107      	bne.n	80123b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80123a0:	4b56      	ldr	r3, [pc, #344]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d121      	bne.n	80123f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80123ac:	2301      	movs	r3, #1
 80123ae:	e09e      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	2b02      	cmp	r3, #2
 80123b6:	d107      	bne.n	80123c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80123b8:	4b50      	ldr	r3, [pc, #320]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d115      	bne.n	80123f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80123c4:	2301      	movs	r3, #1
 80123c6:	e092      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d107      	bne.n	80123e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80123d0:	4b4a      	ldr	r3, [pc, #296]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f003 0302 	and.w	r3, r3, #2
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d109      	bne.n	80123f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80123dc:	2301      	movs	r3, #1
 80123de:	e086      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80123e0:	4b46      	ldr	r3, [pc, #280]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80123ec:	2301      	movs	r3, #1
 80123ee:	e07e      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80123f0:	4b42      	ldr	r3, [pc, #264]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	f023 0203 	bic.w	r2, r3, #3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	493f      	ldr	r1, [pc, #252]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80123fe:	4313      	orrs	r3, r2
 8012400:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012402:	f7fc fdeb 	bl	800efdc <HAL_GetTick>
 8012406:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012408:	e00a      	b.n	8012420 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801240a:	f7fc fde7 	bl	800efdc <HAL_GetTick>
 801240e:	4602      	mov	r2, r0
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	f241 3288 	movw	r2, #5000	; 0x1388
 8012418:	4293      	cmp	r3, r2
 801241a:	d901      	bls.n	8012420 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801241c:	2303      	movs	r3, #3
 801241e:	e066      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012420:	4b36      	ldr	r3, [pc, #216]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	f003 020c 	and.w	r2, r3, #12
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	429a      	cmp	r2, r3
 8012430:	d1eb      	bne.n	801240a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	2b00      	cmp	r3, #0
 801243c:	d008      	beq.n	8012450 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801243e:	4b2f      	ldr	r3, [pc, #188]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	492c      	ldr	r1, [pc, #176]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 801244c:	4313      	orrs	r3, r2
 801244e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012450:	4b29      	ldr	r3, [pc, #164]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f003 0307 	and.w	r3, r3, #7
 8012458:	683a      	ldr	r2, [r7, #0]
 801245a:	429a      	cmp	r2, r3
 801245c:	d210      	bcs.n	8012480 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801245e:	4b26      	ldr	r3, [pc, #152]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f023 0207 	bic.w	r2, r3, #7
 8012466:	4924      	ldr	r1, [pc, #144]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	4313      	orrs	r3, r2
 801246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801246e:	4b22      	ldr	r3, [pc, #136]	; (80124f8 <HAL_RCC_ClockConfig+0x1b0>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f003 0307 	and.w	r3, r3, #7
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	429a      	cmp	r2, r3
 801247a:	d001      	beq.n	8012480 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 801247c:	2301      	movs	r3, #1
 801247e:	e036      	b.n	80124ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f003 0304 	and.w	r3, r3, #4
 8012488:	2b00      	cmp	r3, #0
 801248a:	d008      	beq.n	801249e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801248c:	4b1b      	ldr	r3, [pc, #108]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	4918      	ldr	r1, [pc, #96]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 801249a:	4313      	orrs	r3, r2
 801249c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f003 0308 	and.w	r3, r3, #8
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d009      	beq.n	80124be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80124aa:	4b14      	ldr	r3, [pc, #80]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	691b      	ldr	r3, [r3, #16]
 80124b6:	00db      	lsls	r3, r3, #3
 80124b8:	4910      	ldr	r1, [pc, #64]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80124ba:	4313      	orrs	r3, r2
 80124bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80124be:	f000 f825 	bl	801250c <HAL_RCC_GetSysClockFreq>
 80124c2:	4602      	mov	r2, r0
 80124c4:	4b0d      	ldr	r3, [pc, #52]	; (80124fc <HAL_RCC_ClockConfig+0x1b4>)
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	091b      	lsrs	r3, r3, #4
 80124ca:	f003 030f 	and.w	r3, r3, #15
 80124ce:	490c      	ldr	r1, [pc, #48]	; (8012500 <HAL_RCC_ClockConfig+0x1b8>)
 80124d0:	5ccb      	ldrb	r3, [r1, r3]
 80124d2:	f003 031f 	and.w	r3, r3, #31
 80124d6:	fa22 f303 	lsr.w	r3, r2, r3
 80124da:	4a0a      	ldr	r2, [pc, #40]	; (8012504 <HAL_RCC_ClockConfig+0x1bc>)
 80124dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80124de:	4b0a      	ldr	r3, [pc, #40]	; (8012508 <HAL_RCC_ClockConfig+0x1c0>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fc fb78 	bl	800ebd8 <HAL_InitTick>
 80124e8:	4603      	mov	r3, r0
 80124ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80124ec:	7afb      	ldrb	r3, [r7, #11]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	40022000 	.word	0x40022000
 80124fc:	40021000 	.word	0x40021000
 8012500:	0801fee4 	.word	0x0801fee4
 8012504:	2000018c 	.word	0x2000018c
 8012508:	20000190 	.word	0x20000190

0801250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801250c:	b480      	push	{r7}
 801250e:	b089      	sub	sp, #36	; 0x24
 8012510:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8012512:	2300      	movs	r3, #0
 8012514:	61fb      	str	r3, [r7, #28]
 8012516:	2300      	movs	r3, #0
 8012518:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801251a:	4b3e      	ldr	r3, [pc, #248]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	f003 030c 	and.w	r3, r3, #12
 8012522:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012524:	4b3b      	ldr	r3, [pc, #236]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 8012526:	68db      	ldr	r3, [r3, #12]
 8012528:	f003 0303 	and.w	r3, r3, #3
 801252c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d005      	beq.n	8012540 <HAL_RCC_GetSysClockFreq+0x34>
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2b0c      	cmp	r3, #12
 8012538:	d121      	bne.n	801257e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d11e      	bne.n	801257e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012540:	4b34      	ldr	r3, [pc, #208]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f003 0308 	and.w	r3, r3, #8
 8012548:	2b00      	cmp	r3, #0
 801254a:	d107      	bne.n	801255c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801254c:	4b31      	ldr	r3, [pc, #196]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 801254e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012552:	0a1b      	lsrs	r3, r3, #8
 8012554:	f003 030f 	and.w	r3, r3, #15
 8012558:	61fb      	str	r3, [r7, #28]
 801255a:	e005      	b.n	8012568 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801255c:	4b2d      	ldr	r3, [pc, #180]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	091b      	lsrs	r3, r3, #4
 8012562:	f003 030f 	and.w	r3, r3, #15
 8012566:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8012568:	4a2b      	ldr	r2, [pc, #172]	; (8012618 <HAL_RCC_GetSysClockFreq+0x10c>)
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012570:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d10d      	bne.n	8012594 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801257c:	e00a      	b.n	8012594 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	2b04      	cmp	r3, #4
 8012582:	d102      	bne.n	801258a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012584:	4b25      	ldr	r3, [pc, #148]	; (801261c <HAL_RCC_GetSysClockFreq+0x110>)
 8012586:	61bb      	str	r3, [r7, #24]
 8012588:	e004      	b.n	8012594 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	2b08      	cmp	r3, #8
 801258e:	d101      	bne.n	8012594 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012590:	4b23      	ldr	r3, [pc, #140]	; (8012620 <HAL_RCC_GetSysClockFreq+0x114>)
 8012592:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	2b0c      	cmp	r3, #12
 8012598:	d134      	bne.n	8012604 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801259a:	4b1e      	ldr	r3, [pc, #120]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	f003 0303 	and.w	r3, r3, #3
 80125a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	2b02      	cmp	r3, #2
 80125a8:	d003      	beq.n	80125b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d003      	beq.n	80125b8 <HAL_RCC_GetSysClockFreq+0xac>
 80125b0:	e005      	b.n	80125be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80125b2:	4b1a      	ldr	r3, [pc, #104]	; (801261c <HAL_RCC_GetSysClockFreq+0x110>)
 80125b4:	617b      	str	r3, [r7, #20]
      break;
 80125b6:	e005      	b.n	80125c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80125b8:	4b19      	ldr	r3, [pc, #100]	; (8012620 <HAL_RCC_GetSysClockFreq+0x114>)
 80125ba:	617b      	str	r3, [r7, #20]
      break;
 80125bc:	e002      	b.n	80125c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	617b      	str	r3, [r7, #20]
      break;
 80125c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80125c4:	4b13      	ldr	r3, [pc, #76]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	091b      	lsrs	r3, r3, #4
 80125ca:	f003 0307 	and.w	r3, r3, #7
 80125ce:	3301      	adds	r3, #1
 80125d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80125d2:	4b10      	ldr	r3, [pc, #64]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	0a1b      	lsrs	r3, r3, #8
 80125d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125dc:	697a      	ldr	r2, [r7, #20]
 80125de:	fb02 f203 	mul.w	r2, r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80125e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80125ea:	4b0a      	ldr	r3, [pc, #40]	; (8012614 <HAL_RCC_GetSysClockFreq+0x108>)
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	0e5b      	lsrs	r3, r3, #25
 80125f0:	f003 0303 	and.w	r3, r3, #3
 80125f4:	3301      	adds	r3, #1
 80125f6:	005b      	lsls	r3, r3, #1
 80125f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012602:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8012604:	69bb      	ldr	r3, [r7, #24]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3724      	adds	r7, #36	; 0x24
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop
 8012614:	40021000 	.word	0x40021000
 8012618:	0801fefc 	.word	0x0801fefc
 801261c:	00f42400 	.word	0x00f42400
 8012620:	02dc6c00 	.word	0x02dc6c00

08012624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012624:	b480      	push	{r7}
 8012626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012628:	4b03      	ldr	r3, [pc, #12]	; (8012638 <HAL_RCC_GetHCLKFreq+0x14>)
 801262a:	681b      	ldr	r3, [r3, #0]
}
 801262c:	4618      	mov	r0, r3
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	2000018c 	.word	0x2000018c

0801263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8012640:	f7ff fff0 	bl	8012624 <HAL_RCC_GetHCLKFreq>
 8012644:	4602      	mov	r2, r0
 8012646:	4b06      	ldr	r3, [pc, #24]	; (8012660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	0a1b      	lsrs	r3, r3, #8
 801264c:	f003 0307 	and.w	r3, r3, #7
 8012650:	4904      	ldr	r1, [pc, #16]	; (8012664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012652:	5ccb      	ldrb	r3, [r1, r3]
 8012654:	f003 031f 	and.w	r3, r3, #31
 8012658:	fa22 f303 	lsr.w	r3, r2, r3
}
 801265c:	4618      	mov	r0, r3
 801265e:	bd80      	pop	{r7, pc}
 8012660:	40021000 	.word	0x40021000
 8012664:	0801fef4 	.word	0x0801fef4

08012668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801266c:	f7ff ffda 	bl	8012624 <HAL_RCC_GetHCLKFreq>
 8012670:	4602      	mov	r2, r0
 8012672:	4b06      	ldr	r3, [pc, #24]	; (801268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012674:	689b      	ldr	r3, [r3, #8]
 8012676:	0adb      	lsrs	r3, r3, #11
 8012678:	f003 0307 	and.w	r3, r3, #7
 801267c:	4904      	ldr	r1, [pc, #16]	; (8012690 <HAL_RCC_GetPCLK2Freq+0x28>)
 801267e:	5ccb      	ldrb	r3, [r1, r3]
 8012680:	f003 031f 	and.w	r3, r3, #31
 8012684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012688:	4618      	mov	r0, r3
 801268a:	bd80      	pop	{r7, pc}
 801268c:	40021000 	.word	0x40021000
 8012690:	0801fef4 	.word	0x0801fef4

08012694 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	220f      	movs	r2, #15
 80126a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80126a4:	4b12      	ldr	r3, [pc, #72]	; (80126f0 <HAL_RCC_GetClockConfig+0x5c>)
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	f003 0203 	and.w	r2, r3, #3
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80126b0:	4b0f      	ldr	r3, [pc, #60]	; (80126f0 <HAL_RCC_GetClockConfig+0x5c>)
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80126bc:	4b0c      	ldr	r3, [pc, #48]	; (80126f0 <HAL_RCC_GetClockConfig+0x5c>)
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80126c8:	4b09      	ldr	r3, [pc, #36]	; (80126f0 <HAL_RCC_GetClockConfig+0x5c>)
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	08db      	lsrs	r3, r3, #3
 80126ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80126d6:	4b07      	ldr	r3, [pc, #28]	; (80126f4 <HAL_RCC_GetClockConfig+0x60>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	f003 0207 	and.w	r2, r3, #7
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	601a      	str	r2, [r3, #0]
}
 80126e2:	bf00      	nop
 80126e4:	370c      	adds	r7, #12
 80126e6:	46bd      	mov	sp, r7
 80126e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	40021000 	.word	0x40021000
 80126f4:	40022000 	.word	0x40022000

080126f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8012700:	2300      	movs	r3, #0
 8012702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8012704:	4b2a      	ldr	r3, [pc, #168]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801270c:	2b00      	cmp	r3, #0
 801270e:	d003      	beq.n	8012718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8012710:	f7ff f996 	bl	8011a40 <HAL_PWREx_GetVoltageRange>
 8012714:	6178      	str	r0, [r7, #20]
 8012716:	e014      	b.n	8012742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8012718:	4b25      	ldr	r3, [pc, #148]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801271c:	4a24      	ldr	r2, [pc, #144]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012722:	6593      	str	r3, [r2, #88]	; 0x58
 8012724:	4b22      	ldr	r3, [pc, #136]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801272c:	60fb      	str	r3, [r7, #12]
 801272e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8012730:	f7ff f986 	bl	8011a40 <HAL_PWREx_GetVoltageRange>
 8012734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8012736:	4b1e      	ldr	r3, [pc, #120]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8012738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801273a:	4a1d      	ldr	r2, [pc, #116]	; (80127b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012748:	d10b      	bne.n	8012762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b80      	cmp	r3, #128	; 0x80
 801274e:	d919      	bls.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2ba0      	cmp	r3, #160	; 0xa0
 8012754:	d902      	bls.n	801275c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012756:	2302      	movs	r3, #2
 8012758:	613b      	str	r3, [r7, #16]
 801275a:	e013      	b.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801275c:	2301      	movs	r3, #1
 801275e:	613b      	str	r3, [r7, #16]
 8012760:	e010      	b.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2b80      	cmp	r3, #128	; 0x80
 8012766:	d902      	bls.n	801276e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8012768:	2303      	movs	r3, #3
 801276a:	613b      	str	r3, [r7, #16]
 801276c:	e00a      	b.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2b80      	cmp	r3, #128	; 0x80
 8012772:	d102      	bne.n	801277a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012774:	2302      	movs	r3, #2
 8012776:	613b      	str	r3, [r7, #16]
 8012778:	e004      	b.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2b70      	cmp	r3, #112	; 0x70
 801277e:	d101      	bne.n	8012784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012780:	2301      	movs	r3, #1
 8012782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8012784:	4b0b      	ldr	r3, [pc, #44]	; (80127b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f023 0207 	bic.w	r2, r3, #7
 801278c:	4909      	ldr	r1, [pc, #36]	; (80127b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	4313      	orrs	r3, r2
 8012792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8012794:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f003 0307 	and.w	r3, r3, #7
 801279c:	693a      	ldr	r2, [r7, #16]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d001      	beq.n	80127a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80127a2:	2301      	movs	r3, #1
 80127a4:	e000      	b.n	80127a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80127a6:	2300      	movs	r3, #0
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	40021000 	.word	0x40021000
 80127b4:	40022000 	.word	0x40022000

080127b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80127c0:	2300      	movs	r3, #0
 80127c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80127c4:	2300      	movs	r3, #0
 80127c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d031      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80127dc:	d01a      	beq.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80127de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80127e2:	d814      	bhi.n	801280e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d009      	beq.n	80127fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80127e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80127ec:	d10f      	bne.n	801280e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80127ee:	4b5d      	ldr	r3, [pc, #372]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	4a5c      	ldr	r2, [pc, #368]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80127f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80127f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80127fa:	e00c      	b.n	8012816 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	3304      	adds	r3, #4
 8012800:	2100      	movs	r1, #0
 8012802:	4618      	mov	r0, r3
 8012804:	f000 fa00 	bl	8012c08 <RCCEx_PLLSAI1_Config>
 8012808:	4603      	mov	r3, r0
 801280a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801280c:	e003      	b.n	8012816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801280e:	2301      	movs	r3, #1
 8012810:	74fb      	strb	r3, [r7, #19]
      break;
 8012812:	e000      	b.n	8012816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8012814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012816:	7cfb      	ldrb	r3, [r7, #19]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10b      	bne.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801281c:	4b51      	ldr	r3, [pc, #324]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801282a:	494e      	ldr	r1, [pc, #312]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801282c:	4313      	orrs	r3, r2
 801282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8012832:	e001      	b.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012834:	7cfb      	ldrb	r3, [r7, #19]
 8012836:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012840:	2b00      	cmp	r3, #0
 8012842:	f000 809e 	beq.w	8012982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012846:	2300      	movs	r3, #0
 8012848:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801284a:	4b46      	ldr	r3, [pc, #280]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012852:	2b00      	cmp	r3, #0
 8012854:	d101      	bne.n	801285a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8012856:	2301      	movs	r3, #1
 8012858:	e000      	b.n	801285c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 801285a:	2300      	movs	r3, #0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00d      	beq.n	801287c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012860:	4b40      	ldr	r3, [pc, #256]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012864:	4a3f      	ldr	r2, [pc, #252]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801286a:	6593      	str	r3, [r2, #88]	; 0x58
 801286c:	4b3d      	ldr	r3, [pc, #244]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012874:	60bb      	str	r3, [r7, #8]
 8012876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012878:	2301      	movs	r3, #1
 801287a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801287c:	4b3a      	ldr	r3, [pc, #232]	; (8012968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a39      	ldr	r2, [pc, #228]	; (8012968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8012882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012888:	f7fc fba8 	bl	800efdc <HAL_GetTick>
 801288c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801288e:	e009      	b.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012890:	f7fc fba4 	bl	800efdc <HAL_GetTick>
 8012894:	4602      	mov	r2, r0
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	2b02      	cmp	r3, #2
 801289c:	d902      	bls.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 801289e:	2303      	movs	r3, #3
 80128a0:	74fb      	strb	r3, [r7, #19]
        break;
 80128a2:	e005      	b.n	80128b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80128a4:	4b30      	ldr	r3, [pc, #192]	; (8012968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d0ef      	beq.n	8012890 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80128b0:	7cfb      	ldrb	r3, [r7, #19]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d15a      	bne.n	801296c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80128b6:	4b2b      	ldr	r3, [pc, #172]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d01e      	beq.n	8012906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128cc:	697a      	ldr	r2, [r7, #20]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d019      	beq.n	8012906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80128d2:	4b24      	ldr	r3, [pc, #144]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80128dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80128de:	4b21      	ldr	r3, [pc, #132]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128e4:	4a1f      	ldr	r2, [pc, #124]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80128ee:	4b1d      	ldr	r3, [pc, #116]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128f4:	4a1b      	ldr	r2, [pc, #108]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80128f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80128fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80128fe:	4a19      	ldr	r2, [pc, #100]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	f003 0301 	and.w	r3, r3, #1
 801290c:	2b00      	cmp	r3, #0
 801290e:	d016      	beq.n	801293e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012910:	f7fc fb64 	bl	800efdc <HAL_GetTick>
 8012914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012916:	e00b      	b.n	8012930 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012918:	f7fc fb60 	bl	800efdc <HAL_GetTick>
 801291c:	4602      	mov	r2, r0
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	f241 3288 	movw	r2, #5000	; 0x1388
 8012926:	4293      	cmp	r3, r2
 8012928:	d902      	bls.n	8012930 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 801292a:	2303      	movs	r3, #3
 801292c:	74fb      	strb	r3, [r7, #19]
            break;
 801292e:	e006      	b.n	801293e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012930:	4b0c      	ldr	r3, [pc, #48]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012936:	f003 0302 	and.w	r3, r3, #2
 801293a:	2b00      	cmp	r3, #0
 801293c:	d0ec      	beq.n	8012918 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801293e:	7cfb      	ldrb	r3, [r7, #19]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10b      	bne.n	801295c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012944:	4b07      	ldr	r3, [pc, #28]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801294a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012952:	4904      	ldr	r1, [pc, #16]	; (8012964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8012954:	4313      	orrs	r3, r2
 8012956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801295a:	e009      	b.n	8012970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801295c:	7cfb      	ldrb	r3, [r7, #19]
 801295e:	74bb      	strb	r3, [r7, #18]
 8012960:	e006      	b.n	8012970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8012962:	bf00      	nop
 8012964:	40021000 	.word	0x40021000
 8012968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801296c:	7cfb      	ldrb	r3, [r7, #19]
 801296e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012970:	7c7b      	ldrb	r3, [r7, #17]
 8012972:	2b01      	cmp	r3, #1
 8012974:	d105      	bne.n	8012982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012976:	4b9b      	ldr	r3, [pc, #620]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801297a:	4a9a      	ldr	r2, [pc, #616]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b00      	cmp	r3, #0
 801298c:	d00a      	beq.n	80129a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801298e:	4b95      	ldr	r3, [pc, #596]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012994:	f023 0203 	bic.w	r2, r3, #3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6a1b      	ldr	r3, [r3, #32]
 801299c:	4991      	ldr	r1, [pc, #580]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 801299e:	4313      	orrs	r3, r2
 80129a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f003 0302 	and.w	r3, r3, #2
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00a      	beq.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80129b0:	4b8c      	ldr	r3, [pc, #560]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80129b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129b6:	f023 020c 	bic.w	r2, r3, #12
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129be:	4989      	ldr	r1, [pc, #548]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80129c0:	4313      	orrs	r3, r2
 80129c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 0304 	and.w	r3, r3, #4
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00a      	beq.n	80129e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80129d2:	4b84      	ldr	r3, [pc, #528]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80129d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e0:	4980      	ldr	r1, [pc, #512]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80129e2:	4313      	orrs	r3, r2
 80129e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f003 0320 	and.w	r3, r3, #32
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00a      	beq.n	8012a0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80129f4:	4b7b      	ldr	r3, [pc, #492]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80129f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a02:	4978      	ldr	r1, [pc, #480]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a04:	4313      	orrs	r3, r2
 8012a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00a      	beq.n	8012a2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012a16:	4b73      	ldr	r3, [pc, #460]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a24:	496f      	ldr	r1, [pc, #444]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a26:	4313      	orrs	r3, r2
 8012a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d00a      	beq.n	8012a4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012a38:	4b6a      	ldr	r3, [pc, #424]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a46:	4967      	ldr	r1, [pc, #412]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00a      	beq.n	8012a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012a5a:	4b62      	ldr	r3, [pc, #392]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a68:	495e      	ldr	r1, [pc, #376]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d00a      	beq.n	8012a92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8012a7c:	4b59      	ldr	r3, [pc, #356]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a8a:	4956      	ldr	r1, [pc, #344]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00a      	beq.n	8012ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012a9e:	4b51      	ldr	r3, [pc, #324]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aac:	494d      	ldr	r1, [pc, #308]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d028      	beq.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8012ac0:	4b48      	ldr	r3, [pc, #288]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ace:	4945      	ldr	r1, [pc, #276]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012ad0:	4313      	orrs	r3, r2
 8012ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012ade:	d106      	bne.n	8012aee <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012ae0:	4b40      	ldr	r3, [pc, #256]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	4a3f      	ldr	r2, [pc, #252]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012aea:	60d3      	str	r3, [r2, #12]
 8012aec:	e011      	b.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012af6:	d10c      	bne.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	3304      	adds	r3, #4
 8012afc:	2101      	movs	r1, #1
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 f882 	bl	8012c08 <RCCEx_PLLSAI1_Config>
 8012b04:	4603      	mov	r3, r0
 8012b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012b08:	7cfb      	ldrb	r3, [r7, #19]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d001      	beq.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8012b0e:	7cfb      	ldrb	r3, [r7, #19]
 8012b10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d028      	beq.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012b1e:	4b31      	ldr	r3, [pc, #196]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b2c:	492d      	ldr	r1, [pc, #180]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b2e:	4313      	orrs	r3, r2
 8012b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012b3c:	d106      	bne.n	8012b4c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8012b3e:	4b29      	ldr	r3, [pc, #164]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	4a28      	ldr	r2, [pc, #160]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b48:	60d3      	str	r3, [r2, #12]
 8012b4a:	e011      	b.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012b54:	d10c      	bne.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f000 f853 	bl	8012c08 <RCCEx_PLLSAI1_Config>
 8012b62:	4603      	mov	r3, r0
 8012b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012b66:	7cfb      	ldrb	r3, [r7, #19]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d001      	beq.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8012b6c:	7cfb      	ldrb	r3, [r7, #19]
 8012b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d01c      	beq.n	8012bb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012b7c:	4b19      	ldr	r3, [pc, #100]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b8a:	4916      	ldr	r1, [pc, #88]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012b8c:	4313      	orrs	r3, r2
 8012b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b9a:	d10c      	bne.n	8012bb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	3304      	adds	r3, #4
 8012ba0:	2102      	movs	r1, #2
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f000 f830 	bl	8012c08 <RCCEx_PLLSAI1_Config>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012bac:	7cfb      	ldrb	r3, [r7, #19]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8012bb2:	7cfb      	ldrb	r3, [r7, #19]
 8012bb4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00a      	beq.n	8012bd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012bc2:	4b08      	ldr	r3, [pc, #32]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012bc8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bd0:	4904      	ldr	r1, [pc, #16]	; (8012be4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8012bd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3718      	adds	r7, #24
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	40021000 	.word	0x40021000

08012be8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8012be8:	b480      	push	{r7}
 8012bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8012bec:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a04      	ldr	r2, [pc, #16]	; (8012c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012bf2:	f043 0304 	orr.w	r3, r3, #4
 8012bf6:	6013      	str	r3, [r2, #0]
}
 8012bf8:	bf00      	nop
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	40021000 	.word	0x40021000

08012c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012c12:	2300      	movs	r3, #0
 8012c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012c16:	4b74      	ldr	r3, [pc, #464]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	f003 0303 	and.w	r3, r3, #3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d018      	beq.n	8012c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8012c22:	4b71      	ldr	r3, [pc, #452]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	f003 0203 	and.w	r2, r3, #3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d10d      	bne.n	8012c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
       ||
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d009      	beq.n	8012c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8012c3a:	4b6b      	ldr	r3, [pc, #428]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	091b      	lsrs	r3, r3, #4
 8012c40:	f003 0307 	and.w	r3, r3, #7
 8012c44:	1c5a      	adds	r2, r3, #1
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	685b      	ldr	r3, [r3, #4]
       ||
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d047      	beq.n	8012cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8012c4e:	2301      	movs	r3, #1
 8012c50:	73fb      	strb	r3, [r7, #15]
 8012c52:	e044      	b.n	8012cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b03      	cmp	r3, #3
 8012c5a:	d018      	beq.n	8012c8e <RCCEx_PLLSAI1_Config+0x86>
 8012c5c:	2b03      	cmp	r3, #3
 8012c5e:	d825      	bhi.n	8012cac <RCCEx_PLLSAI1_Config+0xa4>
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d002      	beq.n	8012c6a <RCCEx_PLLSAI1_Config+0x62>
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	d009      	beq.n	8012c7c <RCCEx_PLLSAI1_Config+0x74>
 8012c68:	e020      	b.n	8012cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012c6a:	4b5f      	ldr	r3, [pc, #380]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f003 0302 	and.w	r3, r3, #2
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d11d      	bne.n	8012cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8012c76:	2301      	movs	r3, #1
 8012c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c7a:	e01a      	b.n	8012cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012c7c:	4b5a      	ldr	r3, [pc, #360]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d116      	bne.n	8012cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012c8c:	e013      	b.n	8012cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012c8e:	4b56      	ldr	r3, [pc, #344]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d10f      	bne.n	8012cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012c9a:	4b53      	ldr	r3, [pc, #332]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d109      	bne.n	8012cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012caa:	e006      	b.n	8012cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012cac:	2301      	movs	r3, #1
 8012cae:	73fb      	strb	r3, [r7, #15]
      break;
 8012cb0:	e004      	b.n	8012cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012cb2:	bf00      	nop
 8012cb4:	e002      	b.n	8012cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012cb6:	bf00      	nop
 8012cb8:	e000      	b.n	8012cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8012cbc:	7bfb      	ldrb	r3, [r7, #15]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d10d      	bne.n	8012cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012cc2:	4b49      	ldr	r3, [pc, #292]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6819      	ldr	r1, [r3, #0]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	3b01      	subs	r3, #1
 8012cd4:	011b      	lsls	r3, r3, #4
 8012cd6:	430b      	orrs	r3, r1
 8012cd8:	4943      	ldr	r1, [pc, #268]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012cda:	4313      	orrs	r3, r2
 8012cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012cde:	7bfb      	ldrb	r3, [r7, #15]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d17c      	bne.n	8012dde <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012ce4:	4b40      	ldr	r3, [pc, #256]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4a3f      	ldr	r2, [pc, #252]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012cf0:	f7fc f974 	bl	800efdc <HAL_GetTick>
 8012cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012cf6:	e009      	b.n	8012d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012cf8:	f7fc f970 	bl	800efdc <HAL_GetTick>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b02      	cmp	r3, #2
 8012d04:	d902      	bls.n	8012d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8012d06:	2303      	movs	r3, #3
 8012d08:	73fb      	strb	r3, [r7, #15]
        break;
 8012d0a:	e005      	b.n	8012d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012d0c:	4b36      	ldr	r3, [pc, #216]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d1ef      	bne.n	8012cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8012d18:	7bfb      	ldrb	r3, [r7, #15]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d15f      	bne.n	8012dde <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d110      	bne.n	8012d46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012d24:	4b30      	ldr	r3, [pc, #192]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8012d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	6892      	ldr	r2, [r2, #8]
 8012d34:	0211      	lsls	r1, r2, #8
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	68d2      	ldr	r2, [r2, #12]
 8012d3a:	06d2      	lsls	r2, r2, #27
 8012d3c:	430a      	orrs	r2, r1
 8012d3e:	492a      	ldr	r1, [pc, #168]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d40:	4313      	orrs	r3, r2
 8012d42:	610b      	str	r3, [r1, #16]
 8012d44:	e027      	b.n	8012d96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d112      	bne.n	8012d72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012d4c:	4b26      	ldr	r3, [pc, #152]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8012d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	6892      	ldr	r2, [r2, #8]
 8012d5c:	0211      	lsls	r1, r2, #8
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	6912      	ldr	r2, [r2, #16]
 8012d62:	0852      	lsrs	r2, r2, #1
 8012d64:	3a01      	subs	r2, #1
 8012d66:	0552      	lsls	r2, r2, #21
 8012d68:	430a      	orrs	r2, r1
 8012d6a:	491f      	ldr	r1, [pc, #124]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	610b      	str	r3, [r1, #16]
 8012d70:	e011      	b.n	8012d96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012d72:	4b1d      	ldr	r3, [pc, #116]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d74:	691b      	ldr	r3, [r3, #16]
 8012d76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	6892      	ldr	r2, [r2, #8]
 8012d82:	0211      	lsls	r1, r2, #8
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	6952      	ldr	r2, [r2, #20]
 8012d88:	0852      	lsrs	r2, r2, #1
 8012d8a:	3a01      	subs	r2, #1
 8012d8c:	0652      	lsls	r2, r2, #25
 8012d8e:	430a      	orrs	r2, r1
 8012d90:	4915      	ldr	r1, [pc, #84]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d92:	4313      	orrs	r3, r2
 8012d94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012d96:	4b14      	ldr	r3, [pc, #80]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a13      	ldr	r2, [pc, #76]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012da2:	f7fc f91b 	bl	800efdc <HAL_GetTick>
 8012da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012da8:	e009      	b.n	8012dbe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012daa:	f7fc f917 	bl	800efdc <HAL_GetTick>
 8012dae:	4602      	mov	r2, r0
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	1ad3      	subs	r3, r2, r3
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	d902      	bls.n	8012dbe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8012db8:	2303      	movs	r3, #3
 8012dba:	73fb      	strb	r3, [r7, #15]
          break;
 8012dbc:	e005      	b.n	8012dca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012dbe:	4b0a      	ldr	r3, [pc, #40]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d0ef      	beq.n	8012daa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8012dca:	7bfb      	ldrb	r3, [r7, #15]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012dd0:	4b05      	ldr	r3, [pc, #20]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012dd2:	691a      	ldr	r2, [r3, #16]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	699b      	ldr	r3, [r3, #24]
 8012dd8:	4903      	ldr	r1, [pc, #12]	; (8012de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	40021000 	.word	0x40021000

08012dec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b084      	sub	sp, #16
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012df4:	2301      	movs	r3, #1
 8012df6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d06c      	beq.n	8012ed8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7fb fdc0 	bl	800e998 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2202      	movs	r2, #2
 8012e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	22ca      	movs	r2, #202	; 0xca
 8012e26:	625a      	str	r2, [r3, #36]	; 0x24
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2253      	movs	r2, #83	; 0x53
 8012e2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 fa49 	bl	80132c8 <RTC_EnterInitMode>
 8012e36:	4603      	mov	r3, r0
 8012e38:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8012e3a:	7bfb      	ldrb	r3, [r7, #15]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d14b      	bne.n	8012ed8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	689b      	ldr	r3, [r3, #8]
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	6812      	ldr	r2, [r2, #0]
 8012e4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e52:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	6899      	ldr	r1, [r3, #8]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	685a      	ldr	r2, [r3, #4]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	431a      	orrs	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	699b      	ldr	r3, [r3, #24]
 8012e68:	431a      	orrs	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	430a      	orrs	r2, r1
 8012e70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	68d2      	ldr	r2, [r2, #12]
 8012e7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	6919      	ldr	r1, [r3, #16]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	041a      	lsls	r2, r3, #16
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	430a      	orrs	r2, r1
 8012e8e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f000 fa4d 	bl	8013330 <RTC_ExitInitMode>
 8012e96:	4603      	mov	r3, r0
 8012e98:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012e9a:	7bfb      	ldrb	r3, [r7, #15]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d11b      	bne.n	8012ed8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f022 0203 	bic.w	r2, r2, #3
 8012eae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	69da      	ldr	r2, [r3, #28]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	695b      	ldr	r3, [r3, #20]
 8012ebe:	431a      	orrs	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	430a      	orrs	r2, r1
 8012ec6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	22ff      	movs	r2, #255	; 0xff
 8012ece:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8012ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3710      	adds	r7, #16
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012ee2:	b590      	push	{r4, r7, lr}
 8012ee4:	b087      	sub	sp, #28
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	60f8      	str	r0, [r7, #12]
 8012eea:	60b9      	str	r1, [r7, #8]
 8012eec:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d101      	bne.n	8012efc <HAL_RTC_SetTime+0x1a>
 8012ef8:	2302      	movs	r3, #2
 8012efa:	e08b      	b.n	8013014 <HAL_RTC_SetTime+0x132>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2201      	movs	r2, #1
 8012f00:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2202      	movs	r2, #2
 8012f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	22ca      	movs	r2, #202	; 0xca
 8012f12:	625a      	str	r2, [r3, #36]	; 0x24
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2253      	movs	r2, #83	; 0x53
 8012f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f000 f9d3 	bl	80132c8 <RTC_EnterInitMode>
 8012f22:	4603      	mov	r3, r0
 8012f24:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012f26:	7cfb      	ldrb	r3, [r7, #19]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d163      	bne.n	8012ff4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d126      	bne.n	8012f80 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	2200      	movs	r2, #0
 8012f44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f000 fa2e 	bl	80133ac <RTC_ByteToBcd2>
 8012f50:	4603      	mov	r3, r0
 8012f52:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	785b      	ldrb	r3, [r3, #1]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f000 fa27 	bl	80133ac <RTC_ByteToBcd2>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012f62:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	789b      	ldrb	r3, [r3, #2]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 fa1f 	bl	80133ac <RTC_ByteToBcd2>
 8012f6e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012f70:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	78db      	ldrb	r3, [r3, #3]
 8012f78:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	e018      	b.n	8012fb2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d102      	bne.n	8012f94 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	2200      	movs	r2, #0
 8012f92:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	785b      	ldrb	r3, [r3, #1]
 8012f9e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012fa0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012fa2:	68ba      	ldr	r2, [r7, #8]
 8012fa4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012fa6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	78db      	ldrb	r3, [r3, #3]
 8012fac:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012fbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012fc0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	689a      	ldr	r2, [r3, #8]
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012fd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6899      	ldr	r1, [r3, #8]
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	68da      	ldr	r2, [r3, #12]
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	691b      	ldr	r3, [r3, #16]
 8012fe0:	431a      	orrs	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	430a      	orrs	r2, r1
 8012fe8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f000 f9a0 	bl	8013330 <RTC_ExitInitMode>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	22ff      	movs	r2, #255	; 0xff
 8012ffa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012ffc:	7cfb      	ldrb	r3, [r7, #19]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d103      	bne.n	801300a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2201      	movs	r2, #1
 8013006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8013012:	7cfb      	ldrb	r3, [r7, #19]
}
 8013014:	4618      	mov	r0, r3
 8013016:	371c      	adds	r7, #28
 8013018:	46bd      	mov	sp, r7
 801301a:	bd90      	pop	{r4, r7, pc}

0801301c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b086      	sub	sp, #24
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801304a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801304e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	0c1b      	lsrs	r3, r3, #16
 8013054:	b2db      	uxtb	r3, r3
 8013056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801305a:	b2da      	uxtb	r2, r3
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	0a1b      	lsrs	r3, r3, #8
 8013064:	b2db      	uxtb	r3, r3
 8013066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801306a:	b2da      	uxtb	r2, r3
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	b2db      	uxtb	r3, r3
 8013074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013078:	b2da      	uxtb	r2, r3
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	0d9b      	lsrs	r3, r3, #22
 8013082:	b2db      	uxtb	r3, r3
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	b2da      	uxtb	r2, r3
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d11a      	bne.n	80130ca <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	4618      	mov	r0, r3
 801309a:	f000 f9a7 	bl	80133ec <RTC_Bcd2ToByte>
 801309e:	4603      	mov	r3, r0
 80130a0:	461a      	mov	r2, r3
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	785b      	ldrb	r3, [r3, #1]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f000 f99e 	bl	80133ec <RTC_Bcd2ToByte>
 80130b0:	4603      	mov	r3, r0
 80130b2:	461a      	mov	r2, r3
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	789b      	ldrb	r3, [r3, #2]
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f995 	bl	80133ec <RTC_Bcd2ToByte>
 80130c2:	4603      	mov	r3, r0
 80130c4:	461a      	mov	r2, r3
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80130ca:	2300      	movs	r3, #0
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3718      	adds	r7, #24
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}

080130d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80130d4:	b590      	push	{r4, r7, lr}
 80130d6:	b087      	sub	sp, #28
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d101      	bne.n	80130ee <HAL_RTC_SetDate+0x1a>
 80130ea:	2302      	movs	r3, #2
 80130ec:	e075      	b.n	80131da <HAL_RTC_SetDate+0x106>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2201      	movs	r2, #1
 80130f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2202      	movs	r2, #2
 80130fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10e      	bne.n	8013122 <HAL_RTC_SetDate+0x4e>
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	785b      	ldrb	r3, [r3, #1]
 8013108:	f003 0310 	and.w	r3, r3, #16
 801310c:	2b00      	cmp	r3, #0
 801310e:	d008      	beq.n	8013122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	785b      	ldrb	r3, [r3, #1]
 8013114:	f023 0310 	bic.w	r3, r3, #16
 8013118:	b2db      	uxtb	r3, r3
 801311a:	330a      	adds	r3, #10
 801311c:	b2da      	uxtb	r2, r3
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d11c      	bne.n	8013162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	78db      	ldrb	r3, [r3, #3]
 801312c:	4618      	mov	r0, r3
 801312e:	f000 f93d 	bl	80133ac <RTC_ByteToBcd2>
 8013132:	4603      	mov	r3, r0
 8013134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	785b      	ldrb	r3, [r3, #1]
 801313a:	4618      	mov	r0, r3
 801313c:	f000 f936 	bl	80133ac <RTC_ByteToBcd2>
 8013140:	4603      	mov	r3, r0
 8013142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8013144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	789b      	ldrb	r3, [r3, #2]
 801314a:	4618      	mov	r0, r3
 801314c:	f000 f92e 	bl	80133ac <RTC_ByteToBcd2>
 8013150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801315c:	4313      	orrs	r3, r2
 801315e:	617b      	str	r3, [r7, #20]
 8013160:	e00e      	b.n	8013180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	78db      	ldrb	r3, [r3, #3]
 8013166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	785b      	ldrb	r3, [r3, #1]
 801316c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801316e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8013174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801317c:	4313      	orrs	r3, r2
 801317e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	22ca      	movs	r2, #202	; 0xca
 8013186:	625a      	str	r2, [r3, #36]	; 0x24
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2253      	movs	r2, #83	; 0x53
 801318e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f000 f899 	bl	80132c8 <RTC_EnterInitMode>
 8013196:	4603      	mov	r3, r0
 8013198:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801319a:	7cfb      	ldrb	r3, [r7, #19]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d10c      	bne.n	80131ba <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80131ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f000 f8bd 	bl	8013330 <RTC_ExitInitMode>
 80131b6:	4603      	mov	r3, r0
 80131b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	22ff      	movs	r2, #255	; 0xff
 80131c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80131c2:	7cfb      	ldrb	r3, [r7, #19]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d103      	bne.n	80131d0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2201      	movs	r2, #1
 80131cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	2200      	movs	r2, #0
 80131d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80131d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80131da:	4618      	mov	r0, r3
 80131dc:	371c      	adds	r7, #28
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd90      	pop	{r4, r7, pc}

080131e2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80131e2:	b580      	push	{r7, lr}
 80131e4:	b086      	sub	sp, #24
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	60f8      	str	r0, [r7, #12]
 80131ea:	60b9      	str	r1, [r7, #8]
 80131ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80131fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	0c1b      	lsrs	r3, r3, #16
 8013202:	b2da      	uxtb	r2, r3
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	0a1b      	lsrs	r3, r3, #8
 801320c:	b2db      	uxtb	r3, r3
 801320e:	f003 031f 	and.w	r3, r3, #31
 8013212:	b2da      	uxtb	r2, r3
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	b2db      	uxtb	r3, r3
 801321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013220:	b2da      	uxtb	r2, r3
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	0b5b      	lsrs	r3, r3, #13
 801322a:	b2db      	uxtb	r3, r3
 801322c:	f003 0307 	and.w	r3, r3, #7
 8013230:	b2da      	uxtb	r2, r3
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d11a      	bne.n	8013272 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	78db      	ldrb	r3, [r3, #3]
 8013240:	4618      	mov	r0, r3
 8013242:	f000 f8d3 	bl	80133ec <RTC_Bcd2ToByte>
 8013246:	4603      	mov	r3, r0
 8013248:	461a      	mov	r2, r3
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	785b      	ldrb	r3, [r3, #1]
 8013252:	4618      	mov	r0, r3
 8013254:	f000 f8ca 	bl	80133ec <RTC_Bcd2ToByte>
 8013258:	4603      	mov	r3, r0
 801325a:	461a      	mov	r2, r3
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	789b      	ldrb	r3, [r3, #2]
 8013264:	4618      	mov	r0, r3
 8013266:	f000 f8c1 	bl	80133ec <RTC_Bcd2ToByte>
 801326a:	4603      	mov	r3, r0
 801326c:	461a      	mov	r2, r3
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8013272:	2300      	movs	r3, #0
}
 8013274:	4618      	mov	r0, r3
 8013276:	3718      	adds	r7, #24
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68da      	ldr	r2, [r3, #12]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013292:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8013294:	f7fb fea2 	bl	800efdc <HAL_GetTick>
 8013298:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801329a:	e009      	b.n	80132b0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801329c:	f7fb fe9e 	bl	800efdc <HAL_GetTick>
 80132a0:	4602      	mov	r2, r0
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80132aa:	d901      	bls.n	80132b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80132ac:	2303      	movs	r3, #3
 80132ae:	e007      	b.n	80132c0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	f003 0320 	and.w	r3, r3, #32
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d0ee      	beq.n	801329c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80132be:	2300      	movs	r3, #0
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3710      	adds	r7, #16
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}

080132c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80132d0:	2300      	movs	r3, #0
 80132d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d120      	bne.n	8013324 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80132ec:	f7fb fe76 	bl	800efdc <HAL_GetTick>
 80132f0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80132f2:	e00d      	b.n	8013310 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80132f4:	f7fb fe72 	bl	800efdc <HAL_GetTick>
 80132f8:	4602      	mov	r2, r0
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	1ad3      	subs	r3, r2, r3
 80132fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013302:	d905      	bls.n	8013310 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8013304:	2303      	movs	r3, #3
 8013306:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2203      	movs	r2, #3
 801330c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801331a:	2b00      	cmp	r3, #0
 801331c:	d102      	bne.n	8013324 <RTC_EnterInitMode+0x5c>
 801331e:	7bfb      	ldrb	r3, [r7, #15]
 8013320:	2b03      	cmp	r3, #3
 8013322:	d1e7      	bne.n	80132f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8013324:	7bfb      	ldrb	r3, [r7, #15]
}
 8013326:	4618      	mov	r0, r3
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013338:	2300      	movs	r3, #0
 801333a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 801333c:	4b1a      	ldr	r3, [pc, #104]	; (80133a8 <RTC_ExitInitMode+0x78>)
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	4a19      	ldr	r2, [pc, #100]	; (80133a8 <RTC_ExitInitMode+0x78>)
 8013342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013346:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013348:	4b17      	ldr	r3, [pc, #92]	; (80133a8 <RTC_ExitInitMode+0x78>)
 801334a:	689b      	ldr	r3, [r3, #8]
 801334c:	f003 0320 	and.w	r3, r3, #32
 8013350:	2b00      	cmp	r3, #0
 8013352:	d10c      	bne.n	801336e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f7ff ff91 	bl	801327c <HAL_RTC_WaitForSynchro>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d01e      	beq.n	801339e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2203      	movs	r2, #3
 8013364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8013368:	2303      	movs	r3, #3
 801336a:	73fb      	strb	r3, [r7, #15]
 801336c:	e017      	b.n	801339e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801336e:	4b0e      	ldr	r3, [pc, #56]	; (80133a8 <RTC_ExitInitMode+0x78>)
 8013370:	689b      	ldr	r3, [r3, #8]
 8013372:	4a0d      	ldr	r2, [pc, #52]	; (80133a8 <RTC_ExitInitMode+0x78>)
 8013374:	f023 0320 	bic.w	r3, r3, #32
 8013378:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff ff7e 	bl	801327c <HAL_RTC_WaitForSynchro>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d005      	beq.n	8013392 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2203      	movs	r2, #3
 801338a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801338e:	2303      	movs	r3, #3
 8013390:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013392:	4b05      	ldr	r3, [pc, #20]	; (80133a8 <RTC_ExitInitMode+0x78>)
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	4a04      	ldr	r2, [pc, #16]	; (80133a8 <RTC_ExitInitMode+0x78>)
 8013398:	f043 0320 	orr.w	r3, r3, #32
 801339c:	6093      	str	r3, [r2, #8]
  }

  return status;
 801339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3710      	adds	r7, #16
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	40002800 	.word	0x40002800

080133ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	4603      	mov	r3, r0
 80133b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80133b6:	2300      	movs	r3, #0
 80133b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80133ba:	79fb      	ldrb	r3, [r7, #7]
 80133bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80133be:	e005      	b.n	80133cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	3301      	adds	r3, #1
 80133c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80133c6:	7afb      	ldrb	r3, [r7, #11]
 80133c8:	3b0a      	subs	r3, #10
 80133ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80133cc:	7afb      	ldrb	r3, [r7, #11]
 80133ce:	2b09      	cmp	r3, #9
 80133d0:	d8f6      	bhi.n	80133c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	b2db      	uxtb	r3, r3
 80133d6:	011b      	lsls	r3, r3, #4
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	7afb      	ldrb	r3, [r7, #11]
 80133dc:	4313      	orrs	r3, r2
 80133de:	b2db      	uxtb	r3, r3
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3714      	adds	r7, #20
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b085      	sub	sp, #20
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80133f6:	79fb      	ldrb	r3, [r7, #7]
 80133f8:	091b      	lsrs	r3, r3, #4
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	461a      	mov	r2, r3
 80133fe:	0092      	lsls	r2, r2, #2
 8013400:	4413      	add	r3, r2
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8013406:	79fb      	ldrb	r3, [r7, #7]
 8013408:	f003 030f 	and.w	r3, r3, #15
 801340c:	b2da      	uxtb	r2, r3
 801340e:	7bfb      	ldrb	r3, [r7, #15]
 8013410:	4413      	add	r3, r2
 8013412:	b2db      	uxtb	r3, r3
}
 8013414:	4618      	mov	r0, r3
 8013416:	3714      	adds	r7, #20
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr

08013420 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8013420:	b480      	push	{r7}
 8013422:	b087      	sub	sp, #28
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3350      	adds	r3, #80	; 0x50
 8013432:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	009a      	lsls	r2, r3, #2
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	4413      	add	r3, r2
 801343c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	461a      	mov	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6013      	str	r3, [r2, #0]
}
 8013446:	bf00      	nop
 8013448:	371c      	adds	r7, #28
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013460:	2301      	movs	r3, #1
 8013462:	e07c      	b.n	801355e <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013470:	b2db      	uxtb	r3, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	d106      	bne.n	8013484 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	2200      	movs	r2, #0
 801347a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7fb faa6 	bl	800e9d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2202      	movs	r2, #2
 8013488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801349a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80134a4:	d902      	bls.n	80134ac <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80134a6:	2300      	movs	r3, #0
 80134a8:	60fb      	str	r3, [r7, #12]
 80134aa:	e002      	b.n	80134b2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80134ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	68db      	ldr	r3, [r3, #12]
 80134b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80134ba:	d007      	beq.n	80134cc <HAL_SPI_Init+0x7a>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80134c4:	d002      	beq.n	80134cc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2200      	movs	r2, #0
 80134ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d10b      	bne.n	80134ec <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80134dc:	d903      	bls.n	80134e6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2202      	movs	r2, #2
 80134e2:	631a      	str	r2, [r3, #48]	; 0x30
 80134e4:	e002      	b.n	80134ec <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2201      	movs	r2, #1
 80134ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	685a      	ldr	r2, [r3, #4]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	431a      	orrs	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	691b      	ldr	r3, [r3, #16]
 80134fa:	431a      	orrs	r2, r3
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	695b      	ldr	r3, [r3, #20]
 8013500:	431a      	orrs	r2, r3
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	699b      	ldr	r3, [r3, #24]
 8013506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801350a:	431a      	orrs	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	69db      	ldr	r3, [r3, #28]
 8013510:	431a      	orrs	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6a1b      	ldr	r3, [r3, #32]
 8013516:	ea42 0103 	orr.w	r1, r2, r3
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	430a      	orrs	r2, r1
 8013524:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	699b      	ldr	r3, [r3, #24]
 801352a:	0c1b      	lsrs	r3, r3, #16
 801352c:	f003 0204 	and.w	r2, r3, #4
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013534:	431a      	orrs	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801353a:	431a      	orrs	r2, r3
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	68db      	ldr	r3, [r3, #12]
 8013540:	ea42 0103 	orr.w	r1, r2, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	430a      	orrs	r2, r1
 801354c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2201      	movs	r2, #1
 8013558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3710      	adds	r7, #16
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013566:	b580      	push	{r7, lr}
 8013568:	b088      	sub	sp, #32
 801356a:	af00      	add	r7, sp, #0
 801356c:	60f8      	str	r0, [r7, #12]
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	603b      	str	r3, [r7, #0]
 8013572:	4613      	mov	r3, r2
 8013574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013580:	2b01      	cmp	r3, #1
 8013582:	d101      	bne.n	8013588 <HAL_SPI_Transmit+0x22>
 8013584:	2302      	movs	r3, #2
 8013586:	e150      	b.n	801382a <HAL_SPI_Transmit+0x2c4>
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2201      	movs	r2, #1
 801358c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013590:	f7fb fd24 	bl	800efdc <HAL_GetTick>
 8013594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013596:	88fb      	ldrh	r3, [r7, #6]
 8013598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d002      	beq.n	80135ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80135a6:	2302      	movs	r3, #2
 80135a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80135aa:	e135      	b.n	8013818 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d002      	beq.n	80135b8 <HAL_SPI_Transmit+0x52>
 80135b2:	88fb      	ldrh	r3, [r7, #6]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d102      	bne.n	80135be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80135b8:	2301      	movs	r3, #1
 80135ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80135bc:	e12c      	b.n	8013818 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2203      	movs	r2, #3
 80135c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2200      	movs	r2, #0
 80135ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68ba      	ldr	r2, [r7, #8]
 80135d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	88fa      	ldrh	r2, [r7, #6]
 80135d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	88fa      	ldrh	r2, [r7, #6]
 80135dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2200      	movs	r2, #0
 80135e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2200      	movs	r2, #0
 80135e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	2200      	movs	r2, #0
 80135f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2200      	movs	r2, #0
 80135f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2200      	movs	r2, #0
 80135fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	689b      	ldr	r3, [r3, #8]
 8013604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013608:	d107      	bne.n	801361a <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013624:	2b40      	cmp	r3, #64	; 0x40
 8013626:	d007      	beq.n	8013638 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013640:	d94b      	bls.n	80136da <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d002      	beq.n	8013650 <HAL_SPI_Transmit+0xea>
 801364a:	8afb      	ldrh	r3, [r7, #22]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d13e      	bne.n	80136ce <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013654:	881a      	ldrh	r2, [r3, #0]
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013660:	1c9a      	adds	r2, r3, #2
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801366a:	b29b      	uxth	r3, r3
 801366c:	3b01      	subs	r3, #1
 801366e:	b29a      	uxth	r2, r3
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013674:	e02b      	b.n	80136ce <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	689b      	ldr	r3, [r3, #8]
 801367c:	f003 0302 	and.w	r3, r3, #2
 8013680:	2b02      	cmp	r3, #2
 8013682:	d112      	bne.n	80136aa <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013688:	881a      	ldrh	r2, [r3, #0]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013694:	1c9a      	adds	r2, r3, #2
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b01      	subs	r3, #1
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80136a8:	e011      	b.n	80136ce <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136aa:	f7fb fc97 	bl	800efdc <HAL_GetTick>
 80136ae:	4602      	mov	r2, r0
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	683a      	ldr	r2, [r7, #0]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d803      	bhi.n	80136c2 <HAL_SPI_Transmit+0x15c>
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c0:	d102      	bne.n	80136c8 <HAL_SPI_Transmit+0x162>
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d102      	bne.n	80136ce <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80136c8:	2303      	movs	r3, #3
 80136ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80136cc:	e0a4      	b.n	8013818 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1ce      	bne.n	8013676 <HAL_SPI_Transmit+0x110>
 80136d8:	e07c      	b.n	80137d4 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <HAL_SPI_Transmit+0x182>
 80136e2:	8afb      	ldrh	r3, [r7, #22]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d170      	bne.n	80137ca <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	2b01      	cmp	r3, #1
 80136f0:	d912      	bls.n	8013718 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136f6:	881a      	ldrh	r2, [r3, #0]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013702:	1c9a      	adds	r2, r3, #2
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801370c:	b29b      	uxth	r3, r3
 801370e:	3b02      	subs	r3, #2
 8013710:	b29a      	uxth	r2, r3
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013716:	e058      	b.n	80137ca <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	330c      	adds	r3, #12
 8013722:	7812      	ldrb	r2, [r2, #0]
 8013724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801372a:	1c5a      	adds	r2, r3, #1
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013734:	b29b      	uxth	r3, r3
 8013736:	3b01      	subs	r3, #1
 8013738:	b29a      	uxth	r2, r3
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801373e:	e044      	b.n	80137ca <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	f003 0302 	and.w	r3, r3, #2
 801374a:	2b02      	cmp	r3, #2
 801374c:	d12b      	bne.n	80137a6 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013752:	b29b      	uxth	r3, r3
 8013754:	2b01      	cmp	r3, #1
 8013756:	d912      	bls.n	801377e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801375c:	881a      	ldrh	r2, [r3, #0]
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013768:	1c9a      	adds	r2, r3, #2
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013772:	b29b      	uxth	r3, r3
 8013774:	3b02      	subs	r3, #2
 8013776:	b29a      	uxth	r2, r3
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801377c:	e025      	b.n	80137ca <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	330c      	adds	r3, #12
 8013788:	7812      	ldrb	r2, [r2, #0]
 801378a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013790:	1c5a      	adds	r2, r3, #1
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801379a:	b29b      	uxth	r3, r3
 801379c:	3b01      	subs	r3, #1
 801379e:	b29a      	uxth	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80137a4:	e011      	b.n	80137ca <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80137a6:	f7fb fc19 	bl	800efdc <HAL_GetTick>
 80137aa:	4602      	mov	r2, r0
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d803      	bhi.n	80137be <HAL_SPI_Transmit+0x258>
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137bc:	d102      	bne.n	80137c4 <HAL_SPI_Transmit+0x25e>
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d102      	bne.n	80137ca <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80137c4:	2303      	movs	r3, #3
 80137c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80137c8:	e026      	b.n	8013818 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d1b5      	bne.n	8013740 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80137d4:	69ba      	ldr	r2, [r7, #24]
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f000 fb22 	bl	8013e22 <SPI_EndRxTxTransaction>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2220      	movs	r2, #32
 80137e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	689b      	ldr	r3, [r3, #8]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d10a      	bne.n	8013808 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80137f2:	2300      	movs	r3, #0
 80137f4:	613b      	str	r3, [r7, #16]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	613b      	str	r3, [r7, #16]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	613b      	str	r3, [r7, #16]
 8013806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801380c:	2b00      	cmp	r3, #0
 801380e:	d002      	beq.n	8013816 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8013810:	2301      	movs	r3, #1
 8013812:	77fb      	strb	r3, [r7, #31]
 8013814:	e000      	b.n	8013818 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8013816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2201      	movs	r2, #1
 801381c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2200      	movs	r2, #0
 8013824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013828:	7ffb      	ldrb	r3, [r7, #31]
}
 801382a:	4618      	mov	r0, r3
 801382c:	3720      	adds	r7, #32
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013832:	b580      	push	{r7, lr}
 8013834:	b08a      	sub	sp, #40	; 0x28
 8013836:	af00      	add	r7, sp, #0
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	607a      	str	r2, [r7, #4]
 801383e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013840:	2301      	movs	r3, #1
 8013842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013844:	2300      	movs	r3, #0
 8013846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013850:	2b01      	cmp	r3, #1
 8013852:	d101      	bne.n	8013858 <HAL_SPI_TransmitReceive+0x26>
 8013854:	2302      	movs	r3, #2
 8013856:	e1fb      	b.n	8013c50 <HAL_SPI_TransmitReceive+0x41e>
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	2201      	movs	r2, #1
 801385c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013860:	f7fb fbbc 	bl	800efdc <HAL_GetTick>
 8013864:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801386c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8013874:	887b      	ldrh	r3, [r7, #2]
 8013876:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8013878:	887b      	ldrh	r3, [r7, #2]
 801387a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801387c:	7efb      	ldrb	r3, [r7, #27]
 801387e:	2b01      	cmp	r3, #1
 8013880:	d00e      	beq.n	80138a0 <HAL_SPI_TransmitReceive+0x6e>
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013888:	d106      	bne.n	8013898 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	689b      	ldr	r3, [r3, #8]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d102      	bne.n	8013898 <HAL_SPI_TransmitReceive+0x66>
 8013892:	7efb      	ldrb	r3, [r7, #27]
 8013894:	2b04      	cmp	r3, #4
 8013896:	d003      	beq.n	80138a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8013898:	2302      	movs	r3, #2
 801389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801389e:	e1cd      	b.n	8013c3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d005      	beq.n	80138b2 <HAL_SPI_TransmitReceive+0x80>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d002      	beq.n	80138b2 <HAL_SPI_TransmitReceive+0x80>
 80138ac:	887b      	ldrh	r3, [r7, #2]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d103      	bne.n	80138ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80138b8:	e1c0      	b.n	8013c3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	2b04      	cmp	r3, #4
 80138c4:	d003      	beq.n	80138ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2205      	movs	r2, #5
 80138ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2200      	movs	r2, #0
 80138d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	887a      	ldrh	r2, [r7, #2]
 80138de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	887a      	ldrh	r2, [r7, #2]
 80138e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	887a      	ldrh	r2, [r7, #2]
 80138f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	887a      	ldrh	r2, [r7, #2]
 80138fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2200      	movs	r2, #0
 8013906:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013910:	d802      	bhi.n	8013918 <HAL_SPI_TransmitReceive+0xe6>
 8013912:	8a3b      	ldrh	r3, [r7, #16]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d908      	bls.n	801392a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	685a      	ldr	r2, [r3, #4]
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013926:	605a      	str	r2, [r3, #4]
 8013928:	e007      	b.n	801393a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013938:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013944:	2b40      	cmp	r3, #64	; 0x40
 8013946:	d007      	beq.n	8013958 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013960:	d97c      	bls.n	8013a5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d002      	beq.n	8013970 <HAL_SPI_TransmitReceive+0x13e>
 801396a:	8a7b      	ldrh	r3, [r7, #18]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d169      	bne.n	8013a44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013974:	881a      	ldrh	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013980:	1c9a      	adds	r2, r3, #2
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801398a:	b29b      	uxth	r3, r3
 801398c:	3b01      	subs	r3, #1
 801398e:	b29a      	uxth	r2, r3
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013994:	e056      	b.n	8013a44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	f003 0302 	and.w	r3, r3, #2
 80139a0:	2b02      	cmp	r3, #2
 80139a2:	d11b      	bne.n	80139dc <HAL_SPI_TransmitReceive+0x1aa>
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d016      	beq.n	80139dc <HAL_SPI_TransmitReceive+0x1aa>
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d113      	bne.n	80139dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139b8:	881a      	ldrh	r2, [r3, #0]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139c4:	1c9a      	adds	r2, r3, #2
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	3b01      	subs	r3, #1
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80139d8:	2300      	movs	r3, #0
 80139da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	689b      	ldr	r3, [r3, #8]
 80139e2:	f003 0301 	and.w	r3, r3, #1
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d11c      	bne.n	8013a24 <HAL_SPI_TransmitReceive+0x1f2>
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d016      	beq.n	8013a24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	68da      	ldr	r2, [r3, #12]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a00:	b292      	uxth	r2, r2
 8013a02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a08:	1c9a      	adds	r2, r3, #2
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	3b01      	subs	r3, #1
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013a20:	2301      	movs	r3, #1
 8013a22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013a24:	f7fb fada 	bl	800efdc <HAL_GetTick>
 8013a28:	4602      	mov	r2, r0
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d807      	bhi.n	8013a44 <HAL_SPI_TransmitReceive+0x212>
 8013a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a3a:	d003      	beq.n	8013a44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8013a3c:	2303      	movs	r3, #3
 8013a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8013a42:	e0fb      	b.n	8013c3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1a3      	bne.n	8013996 <HAL_SPI_TransmitReceive+0x164>
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d19d      	bne.n	8013996 <HAL_SPI_TransmitReceive+0x164>
 8013a5a:	e0df      	b.n	8013c1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d003      	beq.n	8013a6c <HAL_SPI_TransmitReceive+0x23a>
 8013a64:	8a7b      	ldrh	r3, [r7, #18]
 8013a66:	2b01      	cmp	r3, #1
 8013a68:	f040 80cb 	bne.w	8013c02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d912      	bls.n	8013a9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a7a:	881a      	ldrh	r2, [r3, #0]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a86:	1c9a      	adds	r2, r3, #2
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	3b02      	subs	r3, #2
 8013a94:	b29a      	uxth	r2, r3
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013a9a:	e0b2      	b.n	8013c02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	330c      	adds	r3, #12
 8013aa6:	7812      	ldrb	r2, [r2, #0]
 8013aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aae:	1c5a      	adds	r2, r3, #1
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	3b01      	subs	r3, #1
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013ac2:	e09e      	b.n	8013c02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	689b      	ldr	r3, [r3, #8]
 8013aca:	f003 0302 	and.w	r3, r3, #2
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	d134      	bne.n	8013b3c <HAL_SPI_TransmitReceive+0x30a>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d02f      	beq.n	8013b3c <HAL_SPI_TransmitReceive+0x30a>
 8013adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d12c      	bne.n	8013b3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	d912      	bls.n	8013b12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af0:	881a      	ldrh	r2, [r3, #0]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013afc:	1c9a      	adds	r2, r3, #2
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	3b02      	subs	r3, #2
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013b10:	e012      	b.n	8013b38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	330c      	adds	r3, #12
 8013b1c:	7812      	ldrb	r2, [r2, #0]
 8013b1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	3b01      	subs	r3, #1
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	689b      	ldr	r3, [r3, #8]
 8013b42:	f003 0301 	and.w	r3, r3, #1
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d148      	bne.n	8013bdc <HAL_SPI_TransmitReceive+0x3aa>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d042      	beq.n	8013bdc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d923      	bls.n	8013baa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	68da      	ldr	r2, [r3, #12]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b6c:	b292      	uxth	r2, r2
 8013b6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b74:	1c9a      	adds	r2, r3, #2
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	3b02      	subs	r3, #2
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d81f      	bhi.n	8013bd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	685a      	ldr	r2, [r3, #4]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013ba6:	605a      	str	r2, [r3, #4]
 8013ba8:	e016      	b.n	8013bd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f103 020c 	add.w	r2, r3, #12
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bb6:	7812      	ldrb	r2, [r2, #0]
 8013bb8:	b2d2      	uxtb	r2, r2
 8013bba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bc0:	1c5a      	adds	r2, r3, #1
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	3b01      	subs	r3, #1
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013bdc:	f7fb f9fe 	bl	800efdc <HAL_GetTick>
 8013be0:	4602      	mov	r2, r0
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	1ad3      	subs	r3, r2, r3
 8013be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d803      	bhi.n	8013bf4 <HAL_SPI_TransmitReceive+0x3c2>
 8013bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf2:	d102      	bne.n	8013bfa <HAL_SPI_TransmitReceive+0x3c8>
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d103      	bne.n	8013c02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8013c00:	e01c      	b.n	8013c3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f47f af5b 	bne.w	8013ac4 <HAL_SPI_TransmitReceive+0x292>
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f47f af54 	bne.w	8013ac4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013c1c:	69fa      	ldr	r2, [r7, #28]
 8013c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f000 f8fe 	bl	8013e22 <SPI_EndRxTxTransaction>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d006      	beq.n	8013c3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2220      	movs	r2, #32
 8013c36:	661a      	str	r2, [r3, #96]	; 0x60
 8013c38:	e000      	b.n	8013c3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8013c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2201      	movs	r2, #1
 8013c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2200      	movs	r2, #0
 8013c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3728      	adds	r7, #40	; 0x28
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8013c58:	b480      	push	{r7}
 8013c5a:	b083      	sub	sp, #12
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013c66:	b2db      	uxtb	r3, r3
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	603b      	str	r3, [r7, #0]
 8013c80:	4613      	mov	r3, r2
 8013c82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013c84:	e04c      	b.n	8013d20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c8c:	d048      	beq.n	8013d20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013c8e:	f7fb f9a5 	bl	800efdc <HAL_GetTick>
 8013c92:	4602      	mov	r2, r0
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	1ad3      	subs	r3, r2, r3
 8013c98:	683a      	ldr	r2, [r7, #0]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d902      	bls.n	8013ca4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d13d      	bne.n	8013d20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	685a      	ldr	r2, [r3, #4]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013cbc:	d111      	bne.n	8013ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	689b      	ldr	r3, [r3, #8]
 8013cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cc6:	d004      	beq.n	8013cd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cd0:	d107      	bne.n	8013ce2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013cea:	d10f      	bne.n	8013d0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013cfa:	601a      	str	r2, [r3, #0]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2201      	movs	r2, #1
 8013d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2200      	movs	r2, #0
 8013d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013d1c:	2303      	movs	r3, #3
 8013d1e:	e00f      	b.n	8013d40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	689a      	ldr	r2, [r3, #8]
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	4013      	ands	r3, r2
 8013d2a:	68ba      	ldr	r2, [r7, #8]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	bf0c      	ite	eq
 8013d30:	2301      	moveq	r3, #1
 8013d32:	2300      	movne	r3, #0
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	461a      	mov	r2, r3
 8013d38:	79fb      	ldrb	r3, [r7, #7]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d1a3      	bne.n	8013c86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8013d3e:	2300      	movs	r3, #0
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3710      	adds	r7, #16
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8013d56:	e057      	b.n	8013e08 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013d5e:	d106      	bne.n	8013d6e <SPI_WaitFifoStateUntilTimeout+0x26>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d103      	bne.n	8013d6e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	330c      	adds	r3, #12
 8013d6c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d74:	d048      	beq.n	8013e08 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8013d76:	f7fb f931 	bl	800efdc <HAL_GetTick>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	683a      	ldr	r2, [r7, #0]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d902      	bls.n	8013d8c <SPI_WaitFifoStateUntilTimeout+0x44>
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d13d      	bne.n	8013e08 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	685a      	ldr	r2, [r3, #4]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013d9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013da4:	d111      	bne.n	8013dca <SPI_WaitFifoStateUntilTimeout+0x82>
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	689b      	ldr	r3, [r3, #8]
 8013daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013dae:	d004      	beq.n	8013dba <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	689b      	ldr	r3, [r3, #8]
 8013db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013db8:	d107      	bne.n	8013dca <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013dd2:	d10f      	bne.n	8013df4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013de2:	601a      	str	r2, [r3, #0]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013df2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2201      	movs	r2, #1
 8013df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013e04:	2303      	movs	r3, #3
 8013e06:	e008      	b.n	8013e1a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	689a      	ldr	r2, [r3, #8]
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	4013      	ands	r3, r2
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d19f      	bne.n	8013d58 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3710      	adds	r7, #16
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b086      	sub	sp, #24
 8013e26:	af02      	add	r7, sp, #8
 8013e28:	60f8      	str	r0, [r7, #12]
 8013e2a:	60b9      	str	r1, [r7, #8]
 8013e2c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	2200      	movs	r2, #0
 8013e36:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f7ff ff84 	bl	8013d48 <SPI_WaitFifoStateUntilTimeout>
 8013e40:	4603      	mov	r3, r0
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d007      	beq.n	8013e56 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e4a:	f043 0220 	orr.w	r2, r3, #32
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013e52:	2303      	movs	r3, #3
 8013e54:	e027      	b.n	8013ea6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	2180      	movs	r1, #128	; 0x80
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	f7ff ff07 	bl	8013c74 <SPI_WaitFlagStateUntilTimeout>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d007      	beq.n	8013e7c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e70:	f043 0220 	orr.w	r2, r3, #32
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013e78:	2303      	movs	r3, #3
 8013e7a:	e014      	b.n	8013ea6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	2200      	movs	r2, #0
 8013e84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f7ff ff5d 	bl	8013d48 <SPI_WaitFifoStateUntilTimeout>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d007      	beq.n	8013ea4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e98:	f043 0220 	orr.w	r2, r3, #32
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013ea0:	2303      	movs	r3, #3
 8013ea2:	e000      	b.n	8013ea6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3710      	adds	r7, #16
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}

08013eae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013eae:	b580      	push	{r7, lr}
 8013eb0:	b082      	sub	sp, #8
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d101      	bne.n	8013ec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	e01d      	b.n	8013efc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d106      	bne.n	8013eda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 f815 	bl	8013f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2202      	movs	r2, #2
 8013ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	3304      	adds	r3, #4
 8013eea:	4619      	mov	r1, r3
 8013eec:	4610      	mov	r0, r2
 8013eee:	f000 f985 	bl	80141fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013efa:	2300      	movs	r3, #0
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013f0c:	bf00      	nop
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68da      	ldr	r2, [r3, #12]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	f042 0201 	orr.w	r2, r2, #1
 8013f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	689a      	ldr	r2, [r3, #8]
 8013f36:	4b0c      	ldr	r3, [pc, #48]	; (8013f68 <HAL_TIM_Base_Start_IT+0x50>)
 8013f38:	4013      	ands	r3, r2
 8013f3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2b06      	cmp	r3, #6
 8013f40:	d00b      	beq.n	8013f5a <HAL_TIM_Base_Start_IT+0x42>
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f48:	d007      	beq.n	8013f5a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f042 0201 	orr.w	r2, r2, #1
 8013f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013f5a:	2300      	movs	r3, #0
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3714      	adds	r7, #20
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr
 8013f68:	00010007 	.word	0x00010007

08013f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	f003 0302 	and.w	r3, r3, #2
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	d122      	bne.n	8013fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	68db      	ldr	r3, [r3, #12]
 8013f88:	f003 0302 	and.w	r3, r3, #2
 8013f8c:	2b02      	cmp	r3, #2
 8013f8e:	d11b      	bne.n	8013fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f06f 0202 	mvn.w	r2, #2
 8013f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	699b      	ldr	r3, [r3, #24]
 8013fa6:	f003 0303 	and.w	r3, r3, #3
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d003      	beq.n	8013fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f000 f905 	bl	80141be <HAL_TIM_IC_CaptureCallback>
 8013fb4:	e005      	b.n	8013fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f000 f8f7 	bl	80141aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 f908 	bl	80141d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	691b      	ldr	r3, [r3, #16]
 8013fce:	f003 0304 	and.w	r3, r3, #4
 8013fd2:	2b04      	cmp	r3, #4
 8013fd4:	d122      	bne.n	801401c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	f003 0304 	and.w	r3, r3, #4
 8013fe0:	2b04      	cmp	r3, #4
 8013fe2:	d11b      	bne.n	801401c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	f06f 0204 	mvn.w	r2, #4
 8013fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2202      	movs	r2, #2
 8013ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	699b      	ldr	r3, [r3, #24]
 8013ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d003      	beq.n	801400a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f8db 	bl	80141be <HAL_TIM_IC_CaptureCallback>
 8014008:	e005      	b.n	8014016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 f8cd 	bl	80141aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 f8de 	bl	80141d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	f003 0308 	and.w	r3, r3, #8
 8014026:	2b08      	cmp	r3, #8
 8014028:	d122      	bne.n	8014070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	f003 0308 	and.w	r3, r3, #8
 8014034:	2b08      	cmp	r3, #8
 8014036:	d11b      	bne.n	8014070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f06f 0208 	mvn.w	r2, #8
 8014040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2204      	movs	r2, #4
 8014046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	f003 0303 	and.w	r3, r3, #3
 8014052:	2b00      	cmp	r3, #0
 8014054:	d003      	beq.n	801405e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 f8b1 	bl	80141be <HAL_TIM_IC_CaptureCallback>
 801405c:	e005      	b.n	801406a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f000 f8a3 	bl	80141aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 f8b4 	bl	80141d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2200      	movs	r2, #0
 801406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	691b      	ldr	r3, [r3, #16]
 8014076:	f003 0310 	and.w	r3, r3, #16
 801407a:	2b10      	cmp	r3, #16
 801407c:	d122      	bne.n	80140c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	f003 0310 	and.w	r3, r3, #16
 8014088:	2b10      	cmp	r3, #16
 801408a:	d11b      	bne.n	80140c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f06f 0210 	mvn.w	r2, #16
 8014094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2208      	movs	r2, #8
 801409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	69db      	ldr	r3, [r3, #28]
 80140a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d003      	beq.n	80140b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f000 f887 	bl	80141be <HAL_TIM_IC_CaptureCallback>
 80140b0:	e005      	b.n	80140be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f000 f879 	bl	80141aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f000 f88a 	bl	80141d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2200      	movs	r2, #0
 80140c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	691b      	ldr	r3, [r3, #16]
 80140ca:	f003 0301 	and.w	r3, r3, #1
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d10e      	bne.n	80140f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	f003 0301 	and.w	r3, r3, #1
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d107      	bne.n	80140f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f06f 0201 	mvn.w	r2, #1
 80140e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f7fa fb98 	bl	800e820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140fa:	2b80      	cmp	r3, #128	; 0x80
 80140fc:	d10e      	bne.n	801411c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014108:	2b80      	cmp	r3, #128	; 0x80
 801410a:	d107      	bne.n	801411c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f8de 	bl	80142d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	691b      	ldr	r3, [r3, #16]
 8014122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801412a:	d10e      	bne.n	801414a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	68db      	ldr	r3, [r3, #12]
 8014132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014136:	2b80      	cmp	r3, #128	; 0x80
 8014138:	d107      	bne.n	801414a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 f8d1 	bl	80142ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014154:	2b40      	cmp	r3, #64	; 0x40
 8014156:	d10e      	bne.n	8014176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	68db      	ldr	r3, [r3, #12]
 801415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014162:	2b40      	cmp	r3, #64	; 0x40
 8014164:	d107      	bne.n	8014176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 f838 	bl	80141e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	691b      	ldr	r3, [r3, #16]
 801417c:	f003 0320 	and.w	r3, r3, #32
 8014180:	2b20      	cmp	r3, #32
 8014182:	d10e      	bne.n	80141a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	f003 0320 	and.w	r3, r3, #32
 801418e:	2b20      	cmp	r3, #32
 8014190:	d107      	bne.n	80141a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f06f 0220 	mvn.w	r2, #32
 801419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f000 f891 	bl	80142c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80141aa:	b480      	push	{r7}
 80141ac:	b083      	sub	sp, #12
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80141b2:	bf00      	nop
 80141b4:	370c      	adds	r7, #12
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr

080141be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80141be:	b480      	push	{r7}
 80141c0:	b083      	sub	sp, #12
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80141c6:	bf00      	nop
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr

080141d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80141d2:	b480      	push	{r7}
 80141d4:	b083      	sub	sp, #12
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80141da:	bf00      	nop
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr

080141e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80141e6:	b480      	push	{r7}
 80141e8:	b083      	sub	sp, #12
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80141ee:	bf00      	nop
 80141f0:	370c      	adds	r7, #12
 80141f2:	46bd      	mov	sp, r7
 80141f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f8:	4770      	bx	lr
	...

080141fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	4a2a      	ldr	r2, [pc, #168]	; (80142b8 <TIM_Base_SetConfig+0xbc>)
 8014210:	4293      	cmp	r3, r2
 8014212:	d003      	beq.n	801421c <TIM_Base_SetConfig+0x20>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801421a:	d108      	bne.n	801422e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	4313      	orrs	r3, r2
 801422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4a21      	ldr	r2, [pc, #132]	; (80142b8 <TIM_Base_SetConfig+0xbc>)
 8014232:	4293      	cmp	r3, r2
 8014234:	d00b      	beq.n	801424e <TIM_Base_SetConfig+0x52>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801423c:	d007      	beq.n	801424e <TIM_Base_SetConfig+0x52>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4a1e      	ldr	r2, [pc, #120]	; (80142bc <TIM_Base_SetConfig+0xc0>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d003      	beq.n	801424e <TIM_Base_SetConfig+0x52>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	4a1d      	ldr	r2, [pc, #116]	; (80142c0 <TIM_Base_SetConfig+0xc4>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d108      	bne.n	8014260 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	68db      	ldr	r3, [r3, #12]
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	4313      	orrs	r3, r2
 801425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	695b      	ldr	r3, [r3, #20]
 801426a:	4313      	orrs	r3, r2
 801426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	68fa      	ldr	r2, [r7, #12]
 8014272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	689a      	ldr	r2, [r3, #8]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	4a0c      	ldr	r2, [pc, #48]	; (80142b8 <TIM_Base_SetConfig+0xbc>)
 8014288:	4293      	cmp	r3, r2
 801428a:	d007      	beq.n	801429c <TIM_Base_SetConfig+0xa0>
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	4a0b      	ldr	r2, [pc, #44]	; (80142bc <TIM_Base_SetConfig+0xc0>)
 8014290:	4293      	cmp	r3, r2
 8014292:	d003      	beq.n	801429c <TIM_Base_SetConfig+0xa0>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	4a0a      	ldr	r2, [pc, #40]	; (80142c0 <TIM_Base_SetConfig+0xc4>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d103      	bne.n	80142a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	691a      	ldr	r2, [r3, #16]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2201      	movs	r2, #1
 80142a8:	615a      	str	r2, [r3, #20]
}
 80142aa:	bf00      	nop
 80142ac:	3714      	adds	r7, #20
 80142ae:	46bd      	mov	sp, r7
 80142b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop
 80142b8:	40012c00 	.word	0x40012c00
 80142bc:	40014000 	.word	0x40014000
 80142c0:	40014400 	.word	0x40014400

080142c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80142c4:	b480      	push	{r7}
 80142c6:	b083      	sub	sp, #12
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80142cc:	bf00      	nop
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80142e0:	bf00      	nop
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80142f4:	bf00      	nop
 80142f6:	370c      	adds	r7, #12
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801430e:	2301      	movs	r3, #1
 8014310:	e040      	b.n	8014394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014316:	2b00      	cmp	r3, #0
 8014318:	d106      	bne.n	8014328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2200      	movs	r2, #0
 801431e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f7fa fb98 	bl	800ea58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2224      	movs	r2, #36	; 0x24
 801432c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	681a      	ldr	r2, [r3, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	f022 0201 	bic.w	r2, r2, #1
 801433c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 faba 	bl	80148b8 <UART_SetConfig>
 8014344:	4603      	mov	r3, r0
 8014346:	2b01      	cmp	r3, #1
 8014348:	d101      	bne.n	801434e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801434a:	2301      	movs	r3, #1
 801434c:	e022      	b.n	8014394 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014352:	2b00      	cmp	r3, #0
 8014354:	d002      	beq.n	801435c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 fdd2 	bl	8014f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	685a      	ldr	r2, [r3, #4]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801436a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	689a      	ldr	r2, [r3, #8]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801437a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	f042 0201 	orr.w	r2, r2, #1
 801438a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 fe59 	bl	8015044 <UART_CheckIdleState>
 8014392:	4603      	mov	r3, r0
}
 8014394:	4618      	mov	r0, r3
 8014396:	3708      	adds	r7, #8
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b08a      	sub	sp, #40	; 0x28
 80143a0:	af02      	add	r7, sp, #8
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	603b      	str	r3, [r7, #0]
 80143a8:	4613      	mov	r3, r2
 80143aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143b0:	2b20      	cmp	r3, #32
 80143b2:	f040 8081 	bne.w	80144b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <HAL_UART_Transmit+0x26>
 80143bc:	88fb      	ldrh	r3, [r7, #6]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d101      	bne.n	80143c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80143c2:	2301      	movs	r3, #1
 80143c4:	e079      	b.n	80144ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d101      	bne.n	80143d4 <HAL_UART_Transmit+0x38>
 80143d0:	2302      	movs	r3, #2
 80143d2:	e072      	b.n	80144ba <HAL_UART_Transmit+0x11e>
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2201      	movs	r2, #1
 80143d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2200      	movs	r2, #0
 80143e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2221      	movs	r2, #33	; 0x21
 80143e6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80143e8:	f7fa fdf8 	bl	800efdc <HAL_GetTick>
 80143ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	88fa      	ldrh	r2, [r7, #6]
 80143f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	88fa      	ldrh	r2, [r7, #6]
 80143fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014406:	d108      	bne.n	801441a <HAL_UART_Transmit+0x7e>
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	691b      	ldr	r3, [r3, #16]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d104      	bne.n	801441a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8014410:	2300      	movs	r3, #0
 8014412:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	61bb      	str	r3, [r7, #24]
 8014418:	e003      	b.n	8014422 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801441e:	2300      	movs	r3, #0
 8014420:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	2200      	movs	r2, #0
 8014426:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 801442a:	e02d      	b.n	8014488 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	2200      	movs	r2, #0
 8014434:	2180      	movs	r1, #128	; 0x80
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	f000 fe49 	bl	80150ce <UART_WaitOnFlagUntilTimeout>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d001      	beq.n	8014446 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8014442:	2303      	movs	r3, #3
 8014444:	e039      	b.n	80144ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d10b      	bne.n	8014464 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801444c:	69bb      	ldr	r3, [r7, #24]
 801444e:	881a      	ldrh	r2, [r3, #0]
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014458:	b292      	uxth	r2, r2
 801445a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	3302      	adds	r3, #2
 8014460:	61bb      	str	r3, [r7, #24]
 8014462:	e008      	b.n	8014476 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	781a      	ldrb	r2, [r3, #0]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	b292      	uxth	r2, r2
 801446e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	3301      	adds	r3, #1
 8014474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801447c:	b29b      	uxth	r3, r3
 801447e:	3b01      	subs	r3, #1
 8014480:	b29a      	uxth	r2, r3
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801448e:	b29b      	uxth	r3, r3
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1cb      	bne.n	801442c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	2200      	movs	r2, #0
 801449c:	2140      	movs	r1, #64	; 0x40
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	f000 fe15 	bl	80150ce <UART_WaitOnFlagUntilTimeout>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d001      	beq.n	80144ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80144aa:	2303      	movs	r3, #3
 80144ac:	e005      	b.n	80144ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	2220      	movs	r2, #32
 80144b2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80144b4:	2300      	movs	r3, #0
 80144b6:	e000      	b.n	80144ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80144b8:	2302      	movs	r3, #2
  }
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3720      	adds	r7, #32
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
	...

080144c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80144c4:	b480      	push	{r7}
 80144c6:	b085      	sub	sp, #20
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	4613      	mov	r3, r2
 80144d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144d6:	2b20      	cmp	r3, #32
 80144d8:	f040 808a 	bne.w	80145f0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d002      	beq.n	80144e8 <HAL_UART_Receive_IT+0x24>
 80144e2:	88fb      	ldrh	r3, [r7, #6]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d101      	bne.n	80144ec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80144e8:	2301      	movs	r3, #1
 80144ea:	e082      	b.n	80145f2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d101      	bne.n	80144fa <HAL_UART_Receive_IT+0x36>
 80144f6:	2302      	movs	r3, #2
 80144f8:	e07b      	b.n	80145f2 <HAL_UART_Receive_IT+0x12e>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2201      	movs	r2, #1
 80144fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	68ba      	ldr	r2, [r7, #8]
 8014506:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	88fa      	ldrh	r2, [r7, #6]
 801450c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	88fa      	ldrh	r2, [r7, #6]
 8014514:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	689b      	ldr	r3, [r3, #8]
 8014522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014526:	d10e      	bne.n	8014546 <HAL_UART_Receive_IT+0x82>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	691b      	ldr	r3, [r3, #16]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d105      	bne.n	801453c <HAL_UART_Receive_IT+0x78>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801453a:	e02d      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	22ff      	movs	r2, #255	; 0xff
 8014540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014544:	e028      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d10d      	bne.n	801456a <HAL_UART_Receive_IT+0xa6>
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	691b      	ldr	r3, [r3, #16]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d104      	bne.n	8014560 <HAL_UART_Receive_IT+0x9c>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	22ff      	movs	r2, #255	; 0xff
 801455a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801455e:	e01b      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	227f      	movs	r2, #127	; 0x7f
 8014564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014568:	e016      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014572:	d10d      	bne.n	8014590 <HAL_UART_Receive_IT+0xcc>
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d104      	bne.n	8014586 <HAL_UART_Receive_IT+0xc2>
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	227f      	movs	r2, #127	; 0x7f
 8014580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014584:	e008      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	223f      	movs	r2, #63	; 0x3f
 801458a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801458e:	e003      	b.n	8014598 <HAL_UART_Receive_IT+0xd4>
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	2200      	movs	r2, #0
 8014594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2222      	movs	r2, #34	; 0x22
 80145a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	689a      	ldr	r2, [r3, #8]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	f042 0201 	orr.w	r2, r2, #1
 80145b2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145bc:	d107      	bne.n	80145ce <HAL_UART_Receive_IT+0x10a>
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	691b      	ldr	r3, [r3, #16]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d103      	bne.n	80145ce <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	4a0d      	ldr	r2, [pc, #52]	; (8014600 <HAL_UART_Receive_IT+0x13c>)
 80145ca:	661a      	str	r2, [r3, #96]	; 0x60
 80145cc:	e002      	b.n	80145d4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	4a0c      	ldr	r2, [pc, #48]	; (8014604 <HAL_UART_Receive_IT+0x140>)
 80145d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2200      	movs	r2, #0
 80145d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80145ea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80145ec:	2300      	movs	r3, #0
 80145ee:	e000      	b.n	80145f2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80145f0:	2302      	movs	r3, #2
  }
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3714      	adds	r7, #20
 80145f6:	46bd      	mov	sp, r7
 80145f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fc:	4770      	bx	lr
 80145fe:	bf00      	nop
 8014600:	0801530d 	.word	0x0801530d
 8014604:	08015263 	.word	0x08015263

08014608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b088      	sub	sp, #32
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	69db      	ldr	r3, [r3, #28]
 8014616:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	689b      	ldr	r3, [r3, #8]
 8014626:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014628:	69fa      	ldr	r2, [r7, #28]
 801462a:	f640 030f 	movw	r3, #2063	; 0x80f
 801462e:	4013      	ands	r3, r2
 8014630:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d113      	bne.n	8014660 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8014638:	69fb      	ldr	r3, [r7, #28]
 801463a:	f003 0320 	and.w	r3, r3, #32
 801463e:	2b00      	cmp	r3, #0
 8014640:	d00e      	beq.n	8014660 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014642:	69bb      	ldr	r3, [r7, #24]
 8014644:	f003 0320 	and.w	r3, r3, #32
 8014648:	2b00      	cmp	r3, #0
 801464a:	d009      	beq.n	8014660 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014650:	2b00      	cmp	r3, #0
 8014652:	f000 8113 	beq.w	801487c <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	4798      	blx	r3
      }
      return;
 801465e:	e10d      	b.n	801487c <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	2b00      	cmp	r3, #0
 8014664:	f000 80d6 	beq.w	8014814 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	f003 0301 	and.w	r3, r3, #1
 801466e:	2b00      	cmp	r3, #0
 8014670:	d105      	bne.n	801467e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8014672:	69bb      	ldr	r3, [r7, #24]
 8014674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014678:	2b00      	cmp	r3, #0
 801467a:	f000 80cb 	beq.w	8014814 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801467e:	69fb      	ldr	r3, [r7, #28]
 8014680:	f003 0301 	and.w	r3, r3, #1
 8014684:	2b00      	cmp	r3, #0
 8014686:	d00e      	beq.n	80146a6 <HAL_UART_IRQHandler+0x9e>
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801468e:	2b00      	cmp	r3, #0
 8014690:	d009      	beq.n	80146a6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	2201      	movs	r2, #1
 8014698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801469e:	f043 0201 	orr.w	r2, r3, #1
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80146a6:	69fb      	ldr	r3, [r7, #28]
 80146a8:	f003 0302 	and.w	r3, r3, #2
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00e      	beq.n	80146ce <HAL_UART_IRQHandler+0xc6>
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f003 0301 	and.w	r3, r3, #1
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d009      	beq.n	80146ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2202      	movs	r2, #2
 80146c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80146c6:	f043 0204 	orr.w	r2, r3, #4
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	f003 0304 	and.w	r3, r3, #4
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00e      	beq.n	80146f6 <HAL_UART_IRQHandler+0xee>
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	f003 0301 	and.w	r3, r3, #1
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d009      	beq.n	80146f6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2204      	movs	r2, #4
 80146e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80146ee:	f043 0202 	orr.w	r2, r3, #2
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80146f6:	69fb      	ldr	r3, [r7, #28]
 80146f8:	f003 0308 	and.w	r3, r3, #8
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d013      	beq.n	8014728 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	f003 0320 	and.w	r3, r3, #32
 8014706:	2b00      	cmp	r3, #0
 8014708:	d104      	bne.n	8014714 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8014710:	2b00      	cmp	r3, #0
 8014712:	d009      	beq.n	8014728 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2208      	movs	r2, #8
 801471a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014720:	f043 0208 	orr.w	r2, r3, #8
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00f      	beq.n	8014752 <HAL_UART_IRQHandler+0x14a>
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00a      	beq.n	8014752 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014744:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801474a:	f043 0220 	orr.w	r2, r3, #32
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014756:	2b00      	cmp	r3, #0
 8014758:	f000 8092 	beq.w	8014880 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	f003 0320 	and.w	r3, r3, #32
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00c      	beq.n	8014780 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	f003 0320 	and.w	r3, r3, #32
 801476c:	2b00      	cmp	r3, #0
 801476e:	d007      	beq.n	8014780 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014774:	2b00      	cmp	r3, #0
 8014776:	d003      	beq.n	8014780 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014784:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	689b      	ldr	r3, [r3, #8]
 801478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014790:	2b40      	cmp	r3, #64	; 0x40
 8014792:	d004      	beq.n	801479e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801479a:	2b00      	cmp	r3, #0
 801479c:	d031      	beq.n	8014802 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 fd10 	bl	80151c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	689b      	ldr	r3, [r3, #8]
 80147aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147ae:	2b40      	cmp	r3, #64	; 0x40
 80147b0:	d123      	bne.n	80147fa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	689a      	ldr	r2, [r3, #8]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80147c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d013      	beq.n	80147f2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147ce:	4a2f      	ldr	r2, [pc, #188]	; (801488c <HAL_UART_IRQHandler+0x284>)
 80147d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7fb fe44 	bl	8010464 <HAL_DMA_Abort_IT>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d016      	beq.n	8014810 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80147ec:	4610      	mov	r0, r2
 80147ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147f0:	e00e      	b.n	8014810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 f856 	bl	80148a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147f8:	e00a      	b.n	8014810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 f852 	bl	80148a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014800:	e006      	b.n	8014810 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 f84e 	bl	80148a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2200      	movs	r2, #0
 801480c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 801480e:	e037      	b.n	8014880 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014810:	bf00      	nop
    return;
 8014812:	e035      	b.n	8014880 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00d      	beq.n	801483a <HAL_UART_IRQHandler+0x232>
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014824:	2b00      	cmp	r3, #0
 8014826:	d008      	beq.n	801483a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f000 fdbf 	bl	80153b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014838:	e025      	b.n	8014886 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801483a:	69fb      	ldr	r3, [r7, #28]
 801483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00d      	beq.n	8014860 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801484a:	2b00      	cmp	r3, #0
 801484c:	d008      	beq.n	8014860 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014852:	2b00      	cmp	r3, #0
 8014854:	d016      	beq.n	8014884 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	4798      	blx	r3
    }
    return;
 801485e:	e011      	b.n	8014884 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014866:	2b00      	cmp	r3, #0
 8014868:	d00d      	beq.n	8014886 <HAL_UART_IRQHandler+0x27e>
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014870:	2b00      	cmp	r3, #0
 8014872:	d008      	beq.n	8014886 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fcdb 	bl	8015230 <UART_EndTransmit_IT>
    return;
 801487a:	e004      	b.n	8014886 <HAL_UART_IRQHandler+0x27e>
      return;
 801487c:	bf00      	nop
 801487e:	e002      	b.n	8014886 <HAL_UART_IRQHandler+0x27e>
    return;
 8014880:	bf00      	nop
 8014882:	e000      	b.n	8014886 <HAL_UART_IRQHandler+0x27e>
    return;
 8014884:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8014886:	3720      	adds	r7, #32
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	08015205 	.word	0x08015205

08014890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014898:	bf00      	nop
 801489a:	370c      	adds	r7, #12
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80148a4:	b480      	push	{r7}
 80148a6:	b083      	sub	sp, #12
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80148ac:	bf00      	nop
 80148ae:	370c      	adds	r7, #12
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80148b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80148bc:	b08c      	sub	sp, #48	; 0x30
 80148be:	af00      	add	r7, sp, #0
 80148c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80148c2:	2300      	movs	r3, #0
 80148c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 80148c6:	2300      	movs	r3, #0
 80148c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80148cc:	2300      	movs	r3, #0
 80148ce:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	689a      	ldr	r2, [r3, #8]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	431a      	orrs	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	695b      	ldr	r3, [r3, #20]
 80148de:	431a      	orrs	r2, r3
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	69db      	ldr	r3, [r3, #28]
 80148e4:	4313      	orrs	r3, r2
 80148e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	4baa      	ldr	r3, [pc, #680]	; (8014b98 <UART_SetConfig+0x2e0>)
 80148f0:	4013      	ands	r3, r2
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	6812      	ldr	r2, [r2, #0]
 80148f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80148f8:	430b      	orrs	r3, r1
 80148fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	68da      	ldr	r2, [r3, #12]
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	430a      	orrs	r2, r1
 8014910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	699b      	ldr	r3, [r3, #24]
 8014916:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4a9f      	ldr	r2, [pc, #636]	; (8014b9c <UART_SetConfig+0x2e4>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d004      	beq.n	801492c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	6a1b      	ldr	r3, [r3, #32]
 8014926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014928:	4313      	orrs	r3, r2
 801492a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	689b      	ldr	r3, [r3, #8]
 8014932:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801493c:	430a      	orrs	r2, r1
 801493e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a96      	ldr	r2, [pc, #600]	; (8014ba0 <UART_SetConfig+0x2e8>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d126      	bne.n	8014998 <UART_SetConfig+0xe0>
 801494a:	4b96      	ldr	r3, [pc, #600]	; (8014ba4 <UART_SetConfig+0x2ec>)
 801494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014950:	f003 0303 	and.w	r3, r3, #3
 8014954:	2b03      	cmp	r3, #3
 8014956:	d81b      	bhi.n	8014990 <UART_SetConfig+0xd8>
 8014958:	a201      	add	r2, pc, #4	; (adr r2, 8014960 <UART_SetConfig+0xa8>)
 801495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801495e:	bf00      	nop
 8014960:	08014971 	.word	0x08014971
 8014964:	08014981 	.word	0x08014981
 8014968:	08014979 	.word	0x08014979
 801496c:	08014989 	.word	0x08014989
 8014970:	2301      	movs	r3, #1
 8014972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014976:	e0ab      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014978:	2302      	movs	r3, #2
 801497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801497e:	e0a7      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014980:	2304      	movs	r3, #4
 8014982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014986:	e0a3      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014988:	2308      	movs	r3, #8
 801498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801498e:	e09f      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014990:	2310      	movs	r3, #16
 8014992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014996:	e09b      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4a82      	ldr	r2, [pc, #520]	; (8014ba8 <UART_SetConfig+0x2f0>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	d138      	bne.n	8014a14 <UART_SetConfig+0x15c>
 80149a2:	4b80      	ldr	r3, [pc, #512]	; (8014ba4 <UART_SetConfig+0x2ec>)
 80149a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80149a8:	f003 030c 	and.w	r3, r3, #12
 80149ac:	2b0c      	cmp	r3, #12
 80149ae:	d82d      	bhi.n	8014a0c <UART_SetConfig+0x154>
 80149b0:	a201      	add	r2, pc, #4	; (adr r2, 80149b8 <UART_SetConfig+0x100>)
 80149b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b6:	bf00      	nop
 80149b8:	080149ed 	.word	0x080149ed
 80149bc:	08014a0d 	.word	0x08014a0d
 80149c0:	08014a0d 	.word	0x08014a0d
 80149c4:	08014a0d 	.word	0x08014a0d
 80149c8:	080149fd 	.word	0x080149fd
 80149cc:	08014a0d 	.word	0x08014a0d
 80149d0:	08014a0d 	.word	0x08014a0d
 80149d4:	08014a0d 	.word	0x08014a0d
 80149d8:	080149f5 	.word	0x080149f5
 80149dc:	08014a0d 	.word	0x08014a0d
 80149e0:	08014a0d 	.word	0x08014a0d
 80149e4:	08014a0d 	.word	0x08014a0d
 80149e8:	08014a05 	.word	0x08014a05
 80149ec:	2300      	movs	r3, #0
 80149ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80149f2:	e06d      	b.n	8014ad0 <UART_SetConfig+0x218>
 80149f4:	2302      	movs	r3, #2
 80149f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80149fa:	e069      	b.n	8014ad0 <UART_SetConfig+0x218>
 80149fc:	2304      	movs	r3, #4
 80149fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a02:	e065      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a04:	2308      	movs	r3, #8
 8014a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a0a:	e061      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a0c:	2310      	movs	r3, #16
 8014a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a12:	e05d      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4a64      	ldr	r2, [pc, #400]	; (8014bac <UART_SetConfig+0x2f4>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d125      	bne.n	8014a6a <UART_SetConfig+0x1b2>
 8014a1e:	4b61      	ldr	r3, [pc, #388]	; (8014ba4 <UART_SetConfig+0x2ec>)
 8014a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014a24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014a28:	2b30      	cmp	r3, #48	; 0x30
 8014a2a:	d016      	beq.n	8014a5a <UART_SetConfig+0x1a2>
 8014a2c:	2b30      	cmp	r3, #48	; 0x30
 8014a2e:	d818      	bhi.n	8014a62 <UART_SetConfig+0x1aa>
 8014a30:	2b20      	cmp	r3, #32
 8014a32:	d00a      	beq.n	8014a4a <UART_SetConfig+0x192>
 8014a34:	2b20      	cmp	r3, #32
 8014a36:	d814      	bhi.n	8014a62 <UART_SetConfig+0x1aa>
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d002      	beq.n	8014a42 <UART_SetConfig+0x18a>
 8014a3c:	2b10      	cmp	r3, #16
 8014a3e:	d008      	beq.n	8014a52 <UART_SetConfig+0x19a>
 8014a40:	e00f      	b.n	8014a62 <UART_SetConfig+0x1aa>
 8014a42:	2300      	movs	r3, #0
 8014a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a48:	e042      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a4a:	2302      	movs	r3, #2
 8014a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a50:	e03e      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a52:	2304      	movs	r3, #4
 8014a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a58:	e03a      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a5a:	2308      	movs	r3, #8
 8014a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a60:	e036      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a62:	2310      	movs	r3, #16
 8014a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014a68:	e032      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	4a4b      	ldr	r2, [pc, #300]	; (8014b9c <UART_SetConfig+0x2e4>)
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d12a      	bne.n	8014aca <UART_SetConfig+0x212>
 8014a74:	4b4b      	ldr	r3, [pc, #300]	; (8014ba4 <UART_SetConfig+0x2ec>)
 8014a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014a7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014a82:	d01a      	beq.n	8014aba <UART_SetConfig+0x202>
 8014a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014a88:	d81b      	bhi.n	8014ac2 <UART_SetConfig+0x20a>
 8014a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a8e:	d00c      	beq.n	8014aaa <UART_SetConfig+0x1f2>
 8014a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a94:	d815      	bhi.n	8014ac2 <UART_SetConfig+0x20a>
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d003      	beq.n	8014aa2 <UART_SetConfig+0x1ea>
 8014a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a9e:	d008      	beq.n	8014ab2 <UART_SetConfig+0x1fa>
 8014aa0:	e00f      	b.n	8014ac2 <UART_SetConfig+0x20a>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014aa8:	e012      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014aaa:	2302      	movs	r3, #2
 8014aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014ab0:	e00e      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014ab2:	2304      	movs	r3, #4
 8014ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014ab8:	e00a      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014aba:	2308      	movs	r3, #8
 8014abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014ac0:	e006      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014ac2:	2310      	movs	r3, #16
 8014ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8014ac8:	e002      	b.n	8014ad0 <UART_SetConfig+0x218>
 8014aca:	2310      	movs	r3, #16
 8014acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a31      	ldr	r2, [pc, #196]	; (8014b9c <UART_SetConfig+0x2e4>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	f040 8102 	bne.w	8014ce0 <UART_SetConfig+0x428>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014ae0:	2b08      	cmp	r3, #8
 8014ae2:	d824      	bhi.n	8014b2e <UART_SetConfig+0x276>
 8014ae4:	a201      	add	r2, pc, #4	; (adr r2, 8014aec <UART_SetConfig+0x234>)
 8014ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aea:	bf00      	nop
 8014aec:	08014b11 	.word	0x08014b11
 8014af0:	08014b2f 	.word	0x08014b2f
 8014af4:	08014b19 	.word	0x08014b19
 8014af8:	08014b2f 	.word	0x08014b2f
 8014afc:	08014b1f 	.word	0x08014b1f
 8014b00:	08014b2f 	.word	0x08014b2f
 8014b04:	08014b2f 	.word	0x08014b2f
 8014b08:	08014b2f 	.word	0x08014b2f
 8014b0c:	08014b27 	.word	0x08014b27
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8014b10:	f7fd fd94 	bl	801263c <HAL_RCC_GetPCLK1Freq>
 8014b14:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014b16:	e00e      	b.n	8014b36 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8014b18:	4b25      	ldr	r3, [pc, #148]	; (8014bb0 <UART_SetConfig+0x2f8>)
 8014b1a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014b1c:	e00b      	b.n	8014b36 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8014b1e:	f7fd fcf5 	bl	801250c <HAL_RCC_GetSysClockFreq>
 8014b22:	61f8      	str	r0, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014b24:	e007      	b.n	8014b36 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8014b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b2a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8014b2c:	e003      	b.n	8014b36 <UART_SetConfig+0x27e>
      default:
        ret = HAL_ERROR;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8014b34:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f000 81d4 	beq.w	8014ee6 <UART_SetConfig+0x62e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	685a      	ldr	r2, [r3, #4]
 8014b42:	4613      	mov	r3, r2
 8014b44:	005b      	lsls	r3, r3, #1
 8014b46:	4413      	add	r3, r2
 8014b48:	69fa      	ldr	r2, [r7, #28]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d305      	bcc.n	8014b5a <UART_SetConfig+0x2a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014b54:	69fa      	ldr	r2, [r7, #28]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d903      	bls.n	8014b62 <UART_SetConfig+0x2aa>
      {
        ret = HAL_ERROR;
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014b60:	e1c1      	b.n	8014ee6 <UART_SetConfig+0x62e>
      }
      else
      {
        switch (clocksource)
 8014b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014b66:	2b08      	cmp	r3, #8
 8014b68:	f200 80a5 	bhi.w	8014cb6 <UART_SetConfig+0x3fe>
 8014b6c:	a201      	add	r2, pc, #4	; (adr r2, 8014b74 <UART_SetConfig+0x2bc>)
 8014b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b72:	bf00      	nop
 8014b74:	08014bb5 	.word	0x08014bb5
 8014b78:	08014cb7 	.word	0x08014cb7
 8014b7c:	08014c03 	.word	0x08014c03
 8014b80:	08014cb7 	.word	0x08014cb7
 8014b84:	08014c39 	.word	0x08014c39
 8014b88:	08014cb7 	.word	0x08014cb7
 8014b8c:	08014cb7 	.word	0x08014cb7
 8014b90:	08014cb7 	.word	0x08014cb7
 8014b94:	08014c87 	.word	0x08014c87
 8014b98:	efff69f3 	.word	0xefff69f3
 8014b9c:	40008000 	.word	0x40008000
 8014ba0:	40013800 	.word	0x40013800
 8014ba4:	40021000 	.word	0x40021000
 8014ba8:	40004400 	.word	0x40004400
 8014bac:	40004800 	.word	0x40004800
 8014bb0:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8014bb4:	f7fd fd42 	bl	801263c <HAL_RCC_GetPCLK1Freq>
 8014bb8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f04f 0100 	mov.w	r1, #0
 8014bc2:	f04f 0200 	mov.w	r2, #0
 8014bc6:	f04f 0300 	mov.w	r3, #0
 8014bca:	020b      	lsls	r3, r1, #8
 8014bcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014bd0:	0202      	lsls	r2, r0, #8
 8014bd2:	68f9      	ldr	r1, [r7, #12]
 8014bd4:	6849      	ldr	r1, [r1, #4]
 8014bd6:	0849      	lsrs	r1, r1, #1
 8014bd8:	4608      	mov	r0, r1
 8014bda:	f04f 0100 	mov.w	r1, #0
 8014bde:	1814      	adds	r4, r2, r0
 8014be0:	603c      	str	r4, [r7, #0]
 8014be2:	414b      	adcs	r3, r1
 8014be4:	607b      	str	r3, [r7, #4]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	461a      	mov	r2, r3
 8014bec:	f04f 0300 	mov.w	r3, #0
 8014bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014bf4:	f7ec f808 	bl	8000c08 <__aeabi_uldivmod>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8014c00:	e05d      	b.n	8014cbe <UART_SetConfig+0x406>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	085b      	lsrs	r3, r3, #1
 8014c08:	461a      	mov	r2, r3
 8014c0a:	f04f 0300 	mov.w	r3, #0
 8014c0e:	48b3      	ldr	r0, [pc, #716]	; (8014edc <UART_SetConfig+0x624>)
 8014c10:	f04f 0100 	mov.w	r1, #0
 8014c14:	eb12 0a00 	adds.w	sl, r2, r0
 8014c18:	eb43 0b01 	adc.w	fp, r3, r1
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	461a      	mov	r2, r3
 8014c22:	f04f 0300 	mov.w	r3, #0
 8014c26:	4650      	mov	r0, sl
 8014c28:	4659      	mov	r1, fp
 8014c2a:	f7eb ffed 	bl	8000c08 <__aeabi_uldivmod>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	460b      	mov	r3, r1
 8014c32:	4613      	mov	r3, r2
 8014c34:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8014c36:	e042      	b.n	8014cbe <UART_SetConfig+0x406>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8014c38:	f7fd fc68 	bl	801250c <HAL_RCC_GetSysClockFreq>
 8014c3c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014c3e:	69bb      	ldr	r3, [r7, #24]
 8014c40:	4618      	mov	r0, r3
 8014c42:	f04f 0100 	mov.w	r1, #0
 8014c46:	f04f 0200 	mov.w	r2, #0
 8014c4a:	f04f 0300 	mov.w	r3, #0
 8014c4e:	020b      	lsls	r3, r1, #8
 8014c50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014c54:	0202      	lsls	r2, r0, #8
 8014c56:	68f9      	ldr	r1, [r7, #12]
 8014c58:	6849      	ldr	r1, [r1, #4]
 8014c5a:	0849      	lsrs	r1, r1, #1
 8014c5c:	4608      	mov	r0, r1
 8014c5e:	f04f 0100 	mov.w	r1, #0
 8014c62:	eb12 0800 	adds.w	r8, r2, r0
 8014c66:	eb43 0901 	adc.w	r9, r3, r1
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	f04f 0300 	mov.w	r3, #0
 8014c74:	4640      	mov	r0, r8
 8014c76:	4649      	mov	r1, r9
 8014c78:	f7eb ffc6 	bl	8000c08 <__aeabi_uldivmod>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	4613      	mov	r3, r2
 8014c82:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8014c84:	e01b      	b.n	8014cbe <UART_SetConfig+0x406>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	085b      	lsrs	r3, r3, #1
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	f04f 0300 	mov.w	r3, #0
 8014c92:	f512 0400 	adds.w	r4, r2, #8388608	; 0x800000
 8014c96:	f143 0500 	adc.w	r5, r3, #0
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	f04f 0300 	mov.w	r3, #0
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f7eb ffae 	bl	8000c08 <__aeabi_uldivmod>
 8014cac:	4602      	mov	r2, r0
 8014cae:	460b      	mov	r3, r1
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
            break;
 8014cb4:	e003      	b.n	8014cbe <UART_SetConfig+0x406>
          default:
            ret = HAL_ERROR;
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8014cbc:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014cc4:	d308      	bcc.n	8014cd8 <UART_SetConfig+0x420>
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ccc:	d204      	bcs.n	8014cd8 <UART_SetConfig+0x420>
        {
          huart->Instance->BRR = usartdiv;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cd4:	60da      	str	r2, [r3, #12]
 8014cd6:	e106      	b.n	8014ee6 <UART_SetConfig+0x62e>
        }
        else
        {
          ret = HAL_ERROR;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014cde:	e102      	b.n	8014ee6 <UART_SetConfig+0x62e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	69db      	ldr	r3, [r3, #28]
 8014ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ce8:	f040 8086 	bne.w	8014df8 <UART_SetConfig+0x540>
  {
    switch (clocksource)
 8014cec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014cf0:	2b08      	cmp	r3, #8
 8014cf2:	d85f      	bhi.n	8014db4 <UART_SetConfig+0x4fc>
 8014cf4:	a201      	add	r2, pc, #4	; (adr r2, 8014cfc <UART_SetConfig+0x444>)
 8014cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cfa:	bf00      	nop
 8014cfc:	08014d21 	.word	0x08014d21
 8014d00:	08014d41 	.word	0x08014d41
 8014d04:	08014d61 	.word	0x08014d61
 8014d08:	08014db5 	.word	0x08014db5
 8014d0c:	08014d7d 	.word	0x08014d7d
 8014d10:	08014db5 	.word	0x08014db5
 8014d14:	08014db5 	.word	0x08014db5
 8014d18:	08014db5 	.word	0x08014db5
 8014d1c:	08014d9d 	.word	0x08014d9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d20:	f7fd fc8c 	bl	801263c <HAL_RCC_GetPCLK1Freq>
 8014d24:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	005a      	lsls	r2, r3, #1
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	085b      	lsrs	r3, r3, #1
 8014d30:	441a      	add	r2, r3
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014d3e:	e03d      	b.n	8014dbc <UART_SetConfig+0x504>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d40:	f7fd fc92 	bl	8012668 <HAL_RCC_GetPCLK2Freq>
 8014d44:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	005a      	lsls	r2, r3, #1
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	085b      	lsrs	r3, r3, #1
 8014d50:	441a      	add	r2, r3
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014d5e:	e02d      	b.n	8014dbc <UART_SetConfig+0x504>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	085b      	lsrs	r3, r3, #1
 8014d66:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8014d6a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	6852      	ldr	r2, [r2, #4]
 8014d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014d7a:	e01f      	b.n	8014dbc <UART_SetConfig+0x504>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014d7c:	f7fd fbc6 	bl	801250c <HAL_RCC_GetSysClockFreq>
 8014d80:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014d82:	69bb      	ldr	r3, [r7, #24]
 8014d84:	005a      	lsls	r2, r3, #1
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	085b      	lsrs	r3, r3, #1
 8014d8c:	441a      	add	r2, r3
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014d9a:	e00f      	b.n	8014dbc <UART_SetConfig+0x504>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	085b      	lsrs	r3, r3, #1
 8014da2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014db2:	e003      	b.n	8014dbc <UART_SetConfig+0x504>
      default:
        ret = HAL_ERROR;
 8014db4:	2301      	movs	r3, #1
 8014db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8014dba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbe:	2b0f      	cmp	r3, #15
 8014dc0:	d916      	bls.n	8014df0 <UART_SetConfig+0x538>
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dc8:	d212      	bcs.n	8014df0 <UART_SetConfig+0x538>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	f023 030f 	bic.w	r3, r3, #15
 8014dd2:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd6:	085b      	lsrs	r3, r3, #1
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	f003 0307 	and.w	r3, r3, #7
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	8afb      	ldrh	r3, [r7, #22]
 8014de2:	4313      	orrs	r3, r2
 8014de4:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	8afa      	ldrh	r2, [r7, #22]
 8014dec:	60da      	str	r2, [r3, #12]
 8014dee:	e07a      	b.n	8014ee6 <UART_SetConfig+0x62e>
    }
    else
    {
      ret = HAL_ERROR;
 8014df0:	2301      	movs	r3, #1
 8014df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014df6:	e076      	b.n	8014ee6 <UART_SetConfig+0x62e>
    }
  }
  else
  {
    switch (clocksource)
 8014df8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014dfc:	2b08      	cmp	r3, #8
 8014dfe:	d85c      	bhi.n	8014eba <UART_SetConfig+0x602>
 8014e00:	a201      	add	r2, pc, #4	; (adr r2, 8014e08 <UART_SetConfig+0x550>)
 8014e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e06:	bf00      	nop
 8014e08:	08014e2d 	.word	0x08014e2d
 8014e0c:	08014e4b 	.word	0x08014e4b
 8014e10:	08014e69 	.word	0x08014e69
 8014e14:	08014ebb 	.word	0x08014ebb
 8014e18:	08014e85 	.word	0x08014e85
 8014e1c:	08014ebb 	.word	0x08014ebb
 8014e20:	08014ebb 	.word	0x08014ebb
 8014e24:	08014ebb 	.word	0x08014ebb
 8014e28:	08014ea3 	.word	0x08014ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014e2c:	f7fd fc06 	bl	801263c <HAL_RCC_GetPCLK1Freq>
 8014e30:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	085a      	lsrs	r2, r3, #1
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	441a      	add	r2, r3
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014e48:	e03b      	b.n	8014ec2 <UART_SetConfig+0x60a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014e4a:	f7fd fc0d 	bl	8012668 <HAL_RCC_GetPCLK2Freq>
 8014e4e:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	085a      	lsrs	r2, r3, #1
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	441a      	add	r2, r3
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014e66:	e02c      	b.n	8014ec2 <UART_SetConfig+0x60a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	085b      	lsrs	r3, r3, #1
 8014e6e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8014e72:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	6852      	ldr	r2, [r2, #4]
 8014e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014e82:	e01e      	b.n	8014ec2 <UART_SetConfig+0x60a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014e84:	f7fd fb42 	bl	801250c <HAL_RCC_GetSysClockFreq>
 8014e88:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	085a      	lsrs	r2, r3, #1
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	441a      	add	r2, r3
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014ea0:	e00f      	b.n	8014ec2 <UART_SetConfig+0x60a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	085b      	lsrs	r3, r3, #1
 8014ea8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_PRESC_PRESCALER */
        break;
 8014eb8:	e003      	b.n	8014ec2 <UART_SetConfig+0x60a>
      default:
        ret = HAL_ERROR;
 8014eba:	2301      	movs	r3, #1
 8014ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8014ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec4:	2b0f      	cmp	r3, #15
 8014ec6:	d90b      	bls.n	8014ee0 <UART_SetConfig+0x628>
 8014ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ece:	d207      	bcs.n	8014ee0 <UART_SetConfig+0x628>
    {
      huart->Instance->BRR = usartdiv;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ed6:	60da      	str	r2, [r3, #12]
 8014ed8:	e005      	b.n	8014ee6 <UART_SetConfig+0x62e>
 8014eda:	bf00      	nop
 8014edc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8014ee0:	2301      	movs	r3, #1
 8014ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8014ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3730      	adds	r7, #48	; 0x30
 8014efa:	46bd      	mov	sp, r7
 8014efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0c:	f003 0301 	and.w	r3, r3, #1
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d00a      	beq.n	8014f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	430a      	orrs	r2, r1
 8014f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f2e:	f003 0302 	and.w	r3, r3, #2
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00a      	beq.n	8014f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	430a      	orrs	r2, r1
 8014f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f50:	f003 0304 	and.w	r3, r3, #4
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00a      	beq.n	8014f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	430a      	orrs	r2, r1
 8014f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f72:	f003 0308 	and.w	r3, r3, #8
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d00a      	beq.n	8014f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	430a      	orrs	r2, r1
 8014f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f94:	f003 0310 	and.w	r3, r3, #16
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00a      	beq.n	8014fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	689b      	ldr	r3, [r3, #8]
 8014fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	430a      	orrs	r2, r1
 8014fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fb6:	f003 0320 	and.w	r3, r3, #32
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d00a      	beq.n	8014fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	689b      	ldr	r3, [r3, #8]
 8014fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	430a      	orrs	r2, r1
 8014fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d01a      	beq.n	8015016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	430a      	orrs	r2, r1
 8014ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ffe:	d10a      	bne.n	8015016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	430a      	orrs	r2, r1
 8015014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801501e:	2b00      	cmp	r3, #0
 8015020:	d00a      	beq.n	8015038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	430a      	orrs	r2, r1
 8015036:	605a      	str	r2, [r3, #4]
  }
}
 8015038:	bf00      	nop
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr

08015044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af02      	add	r7, sp, #8
 801504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2200      	movs	r2, #0
 8015050:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8015052:	f7f9 ffc3 	bl	800efdc <HAL_GetTick>
 8015056:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	f003 0308 	and.w	r3, r3, #8
 8015062:	2b08      	cmp	r3, #8
 8015064:	d10e      	bne.n	8015084 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015066:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801506a:	9300      	str	r3, [sp, #0]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2200      	movs	r2, #0
 8015070:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 f82a 	bl	80150ce <UART_WaitOnFlagUntilTimeout>
 801507a:	4603      	mov	r3, r0
 801507c:	2b00      	cmp	r3, #0
 801507e:	d001      	beq.n	8015084 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015080:	2303      	movs	r3, #3
 8015082:	e020      	b.n	80150c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f003 0304 	and.w	r3, r3, #4
 801508e:	2b04      	cmp	r3, #4
 8015090:	d10e      	bne.n	80150b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015096:	9300      	str	r3, [sp, #0]
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2200      	movs	r2, #0
 801509c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f000 f814 	bl	80150ce <UART_WaitOnFlagUntilTimeout>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d001      	beq.n	80150b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80150ac:	2303      	movs	r3, #3
 80150ae:	e00a      	b.n	80150c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2220      	movs	r2, #32
 80150b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2220      	movs	r2, #32
 80150ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	60f8      	str	r0, [r7, #12]
 80150d6:	60b9      	str	r1, [r7, #8]
 80150d8:	603b      	str	r3, [r7, #0]
 80150da:	4613      	mov	r3, r2
 80150dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80150de:	e05d      	b.n	801519c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150e6:	d059      	beq.n	801519c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80150e8:	f7f9 ff78 	bl	800efdc <HAL_GetTick>
 80150ec:	4602      	mov	r2, r0
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	1ad3      	subs	r3, r2, r3
 80150f2:	69ba      	ldr	r2, [r7, #24]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d302      	bcc.n	80150fe <UART_WaitOnFlagUntilTimeout+0x30>
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d11b      	bne.n	8015136 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801510c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	689a      	ldr	r2, [r3, #8]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f022 0201 	bic.w	r2, r2, #1
 801511c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2220      	movs	r2, #32
 8015122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2220      	movs	r2, #32
 8015128:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2200      	movs	r2, #0
 801512e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8015132:	2303      	movs	r3, #3
 8015134:	e042      	b.n	80151bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	f003 0304 	and.w	r3, r3, #4
 8015140:	2b00      	cmp	r3, #0
 8015142:	d02b      	beq.n	801519c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	69db      	ldr	r3, [r3, #28]
 801514a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801514e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015152:	d123      	bne.n	801519c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801515c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801516c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	689a      	ldr	r2, [r3, #8]
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f022 0201 	bic.w	r2, r2, #1
 801517c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2220      	movs	r2, #32
 8015182:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2220      	movs	r2, #32
 8015188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2220      	movs	r2, #32
 801518e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2200      	movs	r2, #0
 8015194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8015198:	2303      	movs	r3, #3
 801519a:	e00f      	b.n	80151bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	69da      	ldr	r2, [r3, #28]
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	4013      	ands	r3, r2
 80151a6:	68ba      	ldr	r2, [r7, #8]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	bf0c      	ite	eq
 80151ac:	2301      	moveq	r3, #1
 80151ae:	2300      	movne	r3, #0
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	461a      	mov	r2, r3
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d092      	beq.n	80150e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80151ba:	2300      	movs	r3, #0
}
 80151bc:	4618      	mov	r0, r3
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	681a      	ldr	r2, [r3, #0]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80151da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	689a      	ldr	r2, [r3, #8]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f022 0201 	bic.w	r2, r2, #1
 80151ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2220      	movs	r2, #32
 80151f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2200      	movs	r2, #0
 80151f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80151f8:	bf00      	nop
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr

08015204 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b084      	sub	sp, #16
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015210:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	2200      	movs	r2, #0
 8015216:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2200      	movs	r2, #0
 801521e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f7ff fb3e 	bl	80148a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015228:	bf00      	nop
 801522a:	3710      	adds	r7, #16
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}

08015230 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b082      	sub	sp, #8
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015246:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2220      	movs	r2, #32
 801524c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2200      	movs	r2, #0
 8015252:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff fb1b 	bl	8014890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801525a:	bf00      	nop
 801525c:	3708      	adds	r7, #8
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b084      	sub	sp, #16
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015270:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015276:	2b22      	cmp	r3, #34	; 0x22
 8015278:	d13a      	bne.n	80152f0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015280:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015282:	89bb      	ldrh	r3, [r7, #12]
 8015284:	b2d9      	uxtb	r1, r3
 8015286:	89fb      	ldrh	r3, [r7, #14]
 8015288:	b2da      	uxtb	r2, r3
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801528e:	400a      	ands	r2, r1
 8015290:	b2d2      	uxtb	r2, r2
 8015292:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015298:	1c5a      	adds	r2, r3, #1
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	3b01      	subs	r3, #1
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d123      	bne.n	8015304 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80152ca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	689a      	ldr	r2, [r3, #8]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	f022 0201 	bic.w	r2, r2, #1
 80152da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2220      	movs	r2, #32
 80152e0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2200      	movs	r2, #0
 80152e6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f7f7 fc2f 	bl	800cb4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80152ee:	e009      	b.n	8015304 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	8b1b      	ldrh	r3, [r3, #24]
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	f042 0208 	orr.w	r2, r2, #8
 8015300:	b292      	uxth	r2, r2
 8015302:	831a      	strh	r2, [r3, #24]
}
 8015304:	bf00      	nop
 8015306:	3710      	adds	r7, #16
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801531a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015320:	2b22      	cmp	r3, #34	; 0x22
 8015322:	d13a      	bne.n	801539a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801532a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015330:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8015332:	89ba      	ldrh	r2, [r7, #12]
 8015334:	89fb      	ldrh	r3, [r7, #14]
 8015336:	4013      	ands	r3, r2
 8015338:	b29a      	uxth	r2, r3
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015342:	1c9a      	adds	r2, r3, #2
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801534e:	b29b      	uxth	r3, r3
 8015350:	3b01      	subs	r3, #1
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015360:	b29b      	uxth	r3, r3
 8015362:	2b00      	cmp	r3, #0
 8015364:	d123      	bne.n	80153ae <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8015374:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	689a      	ldr	r2, [r3, #8]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f022 0201 	bic.w	r2, r2, #1
 8015384:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2220      	movs	r2, #32
 801538a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2200      	movs	r2, #0
 8015390:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f7f7 fbda 	bl	800cb4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015398:	e009      	b.n	80153ae <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	8b1b      	ldrh	r3, [r3, #24]
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f042 0208 	orr.w	r2, r2, #8
 80153aa:	b292      	uxth	r2, r2
 80153ac:	831a      	strh	r2, [r3, #24]
}
 80153ae:	bf00      	nop
 80153b0:	3710      	adds	r7, #16
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80153b6:	b480      	push	{r7}
 80153b8:	b083      	sub	sp, #12
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80153be:	bf00      	nop
 80153c0:	370c      	adds	r7, #12
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr
	...

080153cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80153d0:	4904      	ldr	r1, [pc, #16]	; (80153e4 <MX_FATFS_Init+0x18>)
 80153d2:	4805      	ldr	r0, [pc, #20]	; (80153e8 <MX_FATFS_Init+0x1c>)
 80153d4:	f003 fa32 	bl	801883c <FATFS_LinkDriver>
 80153d8:	4603      	mov	r3, r0
 80153da:	461a      	mov	r2, r3
 80153dc:	4b03      	ldr	r3, [pc, #12]	; (80153ec <MX_FATFS_Init+0x20>)
 80153de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80153e0:	bf00      	nop
 80153e2:	bd80      	pop	{r7, pc}
 80153e4:	2000b55c 	.word	0x2000b55c
 80153e8:	20000198 	.word	0x20000198
 80153ec:	2000b560 	.word	0x2000b560

080153f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80153f0:	b480      	push	{r7}
 80153f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80153f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_initialize (pdrv); //changed
 801540a:	79fb      	ldrb	r3, [r7, #7]
 801540c:	4618      	mov	r0, r3
 801540e:	f7f1 f9eb 	bl	80067e8 <SD_disk_initialize>
 8015412:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	4603      	mov	r3, r0
 8015424:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		return SD_disk_status (pdrv); //changed
 8015426:	79fb      	ldrb	r3, [r7, #7]
 8015428:	4618      	mov	r0, r3
 801542a:	f7f1 fac7 	bl	80069bc <SD_disk_status>
 801542e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
 8015442:	603b      	str	r3, [r7, #0]
 8015444:	4603      	mov	r3, r0
 8015446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv,buff,sector,count); //changed
 8015448:	7bf8      	ldrb	r0, [r7, #15]
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	f7f1 faca 	bl	80069e8 <SD_disk_read>
 8015454:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8015456:	4618      	mov	r0, r3
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	607a      	str	r2, [r7, #4]
 8015468:	603b      	str	r3, [r7, #0]
 801546a:	4603      	mov	r3, r0
 801546c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv,buff,sector,count); //changed
 801546e:	7bf8      	ldrb	r0, [r7, #15]
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	68b9      	ldr	r1, [r7, #8]
 8015476:	f7f1 fb21 	bl	8006abc <SD_disk_write>
 801547a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	603a      	str	r2, [r7, #0]
 801548e:	71fb      	strb	r3, [r7, #7]
 8015490:	460b      	mov	r3, r1
 8015492:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv,cmd,buff); //changed
 8015494:	79b9      	ldrb	r1, [r7, #6]
 8015496:	79fb      	ldrb	r3, [r7, #7]
 8015498:	683a      	ldr	r2, [r7, #0]
 801549a:	4618      	mov	r0, r3
 801549c:	f7f1 fb92 	bl	8006bc4 <SD_disk_ioctl>
 80154a0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
	...

080154ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b084      	sub	sp, #16
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	4603      	mov	r3, r0
 80154b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80154b6:	79fb      	ldrb	r3, [r7, #7]
 80154b8:	4a08      	ldr	r2, [pc, #32]	; (80154dc <disk_status+0x30>)
 80154ba:	009b      	lsls	r3, r3, #2
 80154bc:	4413      	add	r3, r2
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	79fa      	ldrb	r2, [r7, #7]
 80154c4:	4905      	ldr	r1, [pc, #20]	; (80154dc <disk_status+0x30>)
 80154c6:	440a      	add	r2, r1
 80154c8:	7a12      	ldrb	r2, [r2, #8]
 80154ca:	4610      	mov	r0, r2
 80154cc:	4798      	blx	r3
 80154ce:	4603      	mov	r3, r0
 80154d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80154d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3710      	adds	r7, #16
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	20000688 	.word	0x20000688

080154e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	4603      	mov	r3, r0
 80154e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80154ea:	2300      	movs	r3, #0
 80154ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	4a0d      	ldr	r2, [pc, #52]	; (8015528 <disk_initialize+0x48>)
 80154f2:	5cd3      	ldrb	r3, [r2, r3]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d111      	bne.n	801551c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80154f8:	79fb      	ldrb	r3, [r7, #7]
 80154fa:	4a0b      	ldr	r2, [pc, #44]	; (8015528 <disk_initialize+0x48>)
 80154fc:	2101      	movs	r1, #1
 80154fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015500:	79fb      	ldrb	r3, [r7, #7]
 8015502:	4a09      	ldr	r2, [pc, #36]	; (8015528 <disk_initialize+0x48>)
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	4413      	add	r3, r2
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	79fa      	ldrb	r2, [r7, #7]
 801550e:	4906      	ldr	r1, [pc, #24]	; (8015528 <disk_initialize+0x48>)
 8015510:	440a      	add	r2, r1
 8015512:	7a12      	ldrb	r2, [r2, #8]
 8015514:	4610      	mov	r0, r2
 8015516:	4798      	blx	r3
 8015518:	4603      	mov	r3, r0
 801551a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801551c:	7bfb      	ldrb	r3, [r7, #15]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	20000688 	.word	0x20000688

0801552c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801552c:	b590      	push	{r4, r7, lr}
 801552e:	b087      	sub	sp, #28
 8015530:	af00      	add	r7, sp, #0
 8015532:	60b9      	str	r1, [r7, #8]
 8015534:	607a      	str	r2, [r7, #4]
 8015536:	603b      	str	r3, [r7, #0]
 8015538:	4603      	mov	r3, r0
 801553a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801553c:	7bfb      	ldrb	r3, [r7, #15]
 801553e:	4a0a      	ldr	r2, [pc, #40]	; (8015568 <disk_read+0x3c>)
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	4413      	add	r3, r2
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	689c      	ldr	r4, [r3, #8]
 8015548:	7bfb      	ldrb	r3, [r7, #15]
 801554a:	4a07      	ldr	r2, [pc, #28]	; (8015568 <disk_read+0x3c>)
 801554c:	4413      	add	r3, r2
 801554e:	7a18      	ldrb	r0, [r3, #8]
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	68b9      	ldr	r1, [r7, #8]
 8015556:	47a0      	blx	r4
 8015558:	4603      	mov	r3, r0
 801555a:	75fb      	strb	r3, [r7, #23]
  return res;
 801555c:	7dfb      	ldrb	r3, [r7, #23]
}
 801555e:	4618      	mov	r0, r3
 8015560:	371c      	adds	r7, #28
 8015562:	46bd      	mov	sp, r7
 8015564:	bd90      	pop	{r4, r7, pc}
 8015566:	bf00      	nop
 8015568:	20000688 	.word	0x20000688

0801556c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801556c:	b590      	push	{r4, r7, lr}
 801556e:	b087      	sub	sp, #28
 8015570:	af00      	add	r7, sp, #0
 8015572:	60b9      	str	r1, [r7, #8]
 8015574:	607a      	str	r2, [r7, #4]
 8015576:	603b      	str	r3, [r7, #0]
 8015578:	4603      	mov	r3, r0
 801557a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801557c:	7bfb      	ldrb	r3, [r7, #15]
 801557e:	4a0a      	ldr	r2, [pc, #40]	; (80155a8 <disk_write+0x3c>)
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	4413      	add	r3, r2
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	68dc      	ldr	r4, [r3, #12]
 8015588:	7bfb      	ldrb	r3, [r7, #15]
 801558a:	4a07      	ldr	r2, [pc, #28]	; (80155a8 <disk_write+0x3c>)
 801558c:	4413      	add	r3, r2
 801558e:	7a18      	ldrb	r0, [r3, #8]
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	68b9      	ldr	r1, [r7, #8]
 8015596:	47a0      	blx	r4
 8015598:	4603      	mov	r3, r0
 801559a:	75fb      	strb	r3, [r7, #23]
  return res;
 801559c:	7dfb      	ldrb	r3, [r7, #23]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	371c      	adds	r7, #28
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd90      	pop	{r4, r7, pc}
 80155a6:	bf00      	nop
 80155a8:	20000688 	.word	0x20000688

080155ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	603a      	str	r2, [r7, #0]
 80155b6:	71fb      	strb	r3, [r7, #7]
 80155b8:	460b      	mov	r3, r1
 80155ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80155bc:	79fb      	ldrb	r3, [r7, #7]
 80155be:	4a09      	ldr	r2, [pc, #36]	; (80155e4 <disk_ioctl+0x38>)
 80155c0:	009b      	lsls	r3, r3, #2
 80155c2:	4413      	add	r3, r2
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	691b      	ldr	r3, [r3, #16]
 80155c8:	79fa      	ldrb	r2, [r7, #7]
 80155ca:	4906      	ldr	r1, [pc, #24]	; (80155e4 <disk_ioctl+0x38>)
 80155cc:	440a      	add	r2, r1
 80155ce:	7a10      	ldrb	r0, [r2, #8]
 80155d0:	79b9      	ldrb	r1, [r7, #6]
 80155d2:	683a      	ldr	r2, [r7, #0]
 80155d4:	4798      	blx	r3
 80155d6:	4603      	mov	r3, r0
 80155d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80155da:	7bfb      	ldrb	r3, [r7, #15]
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3710      	adds	r7, #16
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	20000688 	.word	0x20000688

080155e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80155e8:	b480      	push	{r7}
 80155ea:	b085      	sub	sp, #20
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	3301      	adds	r3, #1
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80155f8:	89fb      	ldrh	r3, [r7, #14]
 80155fa:	021b      	lsls	r3, r3, #8
 80155fc:	b21a      	sxth	r2, r3
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	b21b      	sxth	r3, r3
 8015604:	4313      	orrs	r3, r2
 8015606:	b21b      	sxth	r3, r3
 8015608:	81fb      	strh	r3, [r7, #14]
	return rv;
 801560a:	89fb      	ldrh	r3, [r7, #14]
}
 801560c:	4618      	mov	r0, r3
 801560e:	3714      	adds	r7, #20
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr

08015618 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015618:	b480      	push	{r7}
 801561a:	b085      	sub	sp, #20
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	3303      	adds	r3, #3
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	021b      	lsls	r3, r3, #8
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	3202      	adds	r2, #2
 8015630:	7812      	ldrb	r2, [r2, #0]
 8015632:	4313      	orrs	r3, r2
 8015634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	021b      	lsls	r3, r3, #8
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	3201      	adds	r2, #1
 801563e:	7812      	ldrb	r2, [r2, #0]
 8015640:	4313      	orrs	r3, r2
 8015642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	021b      	lsls	r3, r3, #8
 8015648:	687a      	ldr	r2, [r7, #4]
 801564a:	7812      	ldrb	r2, [r2, #0]
 801564c:	4313      	orrs	r3, r2
 801564e:	60fb      	str	r3, [r7, #12]
	return rv;
 8015650:	68fb      	ldr	r3, [r7, #12]
}
 8015652:	4618      	mov	r0, r3
 8015654:	3714      	adds	r7, #20
 8015656:	46bd      	mov	sp, r7
 8015658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565c:	4770      	bx	lr

0801565e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801565e:	b480      	push	{r7}
 8015660:	b083      	sub	sp, #12
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
 8015666:	460b      	mov	r3, r1
 8015668:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	1c5a      	adds	r2, r3, #1
 801566e:	607a      	str	r2, [r7, #4]
 8015670:	887a      	ldrh	r2, [r7, #2]
 8015672:	b2d2      	uxtb	r2, r2
 8015674:	701a      	strb	r2, [r3, #0]
 8015676:	887b      	ldrh	r3, [r7, #2]
 8015678:	0a1b      	lsrs	r3, r3, #8
 801567a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	1c5a      	adds	r2, r3, #1
 8015680:	607a      	str	r2, [r7, #4]
 8015682:	887a      	ldrh	r2, [r7, #2]
 8015684:	b2d2      	uxtb	r2, r2
 8015686:	701a      	strb	r2, [r3, #0]
}
 8015688:	bf00      	nop
 801568a:	370c      	adds	r7, #12
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	1c5a      	adds	r2, r3, #1
 80156a2:	607a      	str	r2, [r7, #4]
 80156a4:	683a      	ldr	r2, [r7, #0]
 80156a6:	b2d2      	uxtb	r2, r2
 80156a8:	701a      	strb	r2, [r3, #0]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	0a1b      	lsrs	r3, r3, #8
 80156ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	1c5a      	adds	r2, r3, #1
 80156b4:	607a      	str	r2, [r7, #4]
 80156b6:	683a      	ldr	r2, [r7, #0]
 80156b8:	b2d2      	uxtb	r2, r2
 80156ba:	701a      	strb	r2, [r3, #0]
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	0a1b      	lsrs	r3, r3, #8
 80156c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	1c5a      	adds	r2, r3, #1
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	b2d2      	uxtb	r2, r2
 80156cc:	701a      	strb	r2, [r3, #0]
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	0a1b      	lsrs	r3, r3, #8
 80156d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	1c5a      	adds	r2, r3, #1
 80156d8:	607a      	str	r2, [r7, #4]
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	b2d2      	uxtb	r2, r2
 80156de:	701a      	strb	r2, [r3, #0]
}
 80156e0:	bf00      	nop
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80156ec:	b480      	push	{r7}
 80156ee:	b087      	sub	sp, #28
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d00d      	beq.n	8015722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015706:	693a      	ldr	r2, [r7, #16]
 8015708:	1c53      	adds	r3, r2, #1
 801570a:	613b      	str	r3, [r7, #16]
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	1c59      	adds	r1, r3, #1
 8015710:	6179      	str	r1, [r7, #20]
 8015712:	7812      	ldrb	r2, [r2, #0]
 8015714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	3b01      	subs	r3, #1
 801571a:	607b      	str	r3, [r7, #4]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d1f1      	bne.n	8015706 <mem_cpy+0x1a>
	}
}
 8015722:	bf00      	nop
 8015724:	371c      	adds	r7, #28
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr

0801572e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801572e:	b480      	push	{r7}
 8015730:	b087      	sub	sp, #28
 8015732:	af00      	add	r7, sp, #0
 8015734:	60f8      	str	r0, [r7, #12]
 8015736:	60b9      	str	r1, [r7, #8]
 8015738:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	1c5a      	adds	r2, r3, #1
 8015742:	617a      	str	r2, [r7, #20]
 8015744:	68ba      	ldr	r2, [r7, #8]
 8015746:	b2d2      	uxtb	r2, r2
 8015748:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	3b01      	subs	r3, #1
 801574e:	607b      	str	r3, [r7, #4]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1f3      	bne.n	801573e <mem_set+0x10>
}
 8015756:	bf00      	nop
 8015758:	bf00      	nop
 801575a:	371c      	adds	r7, #28
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015764:	b480      	push	{r7}
 8015766:	b089      	sub	sp, #36	; 0x24
 8015768:	af00      	add	r7, sp, #0
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	61fb      	str	r3, [r7, #28]
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015778:	2300      	movs	r3, #0
 801577a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	1c5a      	adds	r2, r3, #1
 8015780:	61fa      	str	r2, [r7, #28]
 8015782:	781b      	ldrb	r3, [r3, #0]
 8015784:	4619      	mov	r1, r3
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	1c5a      	adds	r2, r3, #1
 801578a:	61ba      	str	r2, [r7, #24]
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	1acb      	subs	r3, r1, r3
 8015790:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	3b01      	subs	r3, #1
 8015796:	607b      	str	r3, [r7, #4]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d002      	beq.n	80157a4 <mem_cmp+0x40>
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d0eb      	beq.n	801577c <mem_cmp+0x18>

	return r;
 80157a4:	697b      	ldr	r3, [r7, #20]
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3724      	adds	r7, #36	; 0x24
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr

080157b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80157b2:	b480      	push	{r7}
 80157b4:	b083      	sub	sp, #12
 80157b6:	af00      	add	r7, sp, #0
 80157b8:	6078      	str	r0, [r7, #4]
 80157ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80157bc:	e002      	b.n	80157c4 <chk_chr+0x12>
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	3301      	adds	r3, #1
 80157c2:	607b      	str	r3, [r7, #4]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d005      	beq.n	80157d8 <chk_chr+0x26>
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	461a      	mov	r2, r3
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d1f2      	bne.n	80157be <chk_chr+0xc>
	return *str;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	781b      	ldrb	r3, [r3, #0]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b082      	sub	sp, #8
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <lock_fs+0x22>
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	4618      	mov	r0, r3
 80157fc:	f003 f91f 	bl	8018a3e <ff_req_grant>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d001      	beq.n	801580a <lock_fs+0x22>
 8015806:	2301      	movs	r3, #1
 8015808:	e000      	b.n	801580c <lock_fs+0x24>
 801580a:	2300      	movs	r3, #0
}
 801580c:	4618      	mov	r0, r3
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	460b      	mov	r3, r1
 801581e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d00d      	beq.n	8015842 <unlock_fs+0x2e>
 8015826:	78fb      	ldrb	r3, [r7, #3]
 8015828:	2b0c      	cmp	r3, #12
 801582a:	d00a      	beq.n	8015842 <unlock_fs+0x2e>
 801582c:	78fb      	ldrb	r3, [r7, #3]
 801582e:	2b0b      	cmp	r3, #11
 8015830:	d007      	beq.n	8015842 <unlock_fs+0x2e>
 8015832:	78fb      	ldrb	r3, [r7, #3]
 8015834:	2b0f      	cmp	r3, #15
 8015836:	d004      	beq.n	8015842 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	4618      	mov	r0, r3
 801583e:	f003 f913 	bl	8018a68 <ff_rel_grant>
	}
}
 8015842:	bf00      	nop
 8015844:	3708      	adds	r7, #8
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
	...

0801584c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801584c:	b480      	push	{r7}
 801584e:	b085      	sub	sp, #20
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015856:	2300      	movs	r3, #0
 8015858:	60bb      	str	r3, [r7, #8]
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	60fb      	str	r3, [r7, #12]
 801585e:	e029      	b.n	80158b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8015860:	4a27      	ldr	r2, [pc, #156]	; (8015900 <chk_lock+0xb4>)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	011b      	lsls	r3, r3, #4
 8015866:	4413      	add	r3, r2
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d01d      	beq.n	80158aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801586e:	4a24      	ldr	r2, [pc, #144]	; (8015900 <chk_lock+0xb4>)
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	011b      	lsls	r3, r3, #4
 8015874:	4413      	add	r3, r2
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	429a      	cmp	r2, r3
 801587e:	d116      	bne.n	80158ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015880:	4a1f      	ldr	r2, [pc, #124]	; (8015900 <chk_lock+0xb4>)
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	011b      	lsls	r3, r3, #4
 8015886:	4413      	add	r3, r2
 8015888:	3304      	adds	r3, #4
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015890:	429a      	cmp	r2, r3
 8015892:	d10c      	bne.n	80158ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015894:	4a1a      	ldr	r2, [pc, #104]	; (8015900 <chk_lock+0xb4>)
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	011b      	lsls	r3, r3, #4
 801589a:	4413      	add	r3, r2
 801589c:	3308      	adds	r3, #8
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d102      	bne.n	80158ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80158a8:	e007      	b.n	80158ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80158aa:	2301      	movs	r3, #1
 80158ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	3301      	adds	r3, #1
 80158b2:	60fb      	str	r3, [r7, #12]
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2b02      	cmp	r3, #2
 80158b8:	d9d2      	bls.n	8015860 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2b03      	cmp	r3, #3
 80158be:	d109      	bne.n	80158d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d102      	bne.n	80158cc <chk_lock+0x80>
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	2b02      	cmp	r3, #2
 80158ca:	d101      	bne.n	80158d0 <chk_lock+0x84>
 80158cc:	2300      	movs	r3, #0
 80158ce:	e010      	b.n	80158f2 <chk_lock+0xa6>
 80158d0:	2312      	movs	r3, #18
 80158d2:	e00e      	b.n	80158f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d108      	bne.n	80158ec <chk_lock+0xa0>
 80158da:	4a09      	ldr	r2, [pc, #36]	; (8015900 <chk_lock+0xb4>)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	011b      	lsls	r3, r3, #4
 80158e0:	4413      	add	r3, r2
 80158e2:	330c      	adds	r3, #12
 80158e4:	881b      	ldrh	r3, [r3, #0]
 80158e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80158ea:	d101      	bne.n	80158f0 <chk_lock+0xa4>
 80158ec:	2310      	movs	r3, #16
 80158ee:	e000      	b.n	80158f2 <chk_lock+0xa6>
 80158f0:	2300      	movs	r3, #0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3714      	adds	r7, #20
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	20000658 	.word	0x20000658

08015904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801590a:	2300      	movs	r3, #0
 801590c:	607b      	str	r3, [r7, #4]
 801590e:	e002      	b.n	8015916 <enq_lock+0x12>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3301      	adds	r3, #1
 8015914:	607b      	str	r3, [r7, #4]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2b02      	cmp	r3, #2
 801591a:	d806      	bhi.n	801592a <enq_lock+0x26>
 801591c:	4a09      	ldr	r2, [pc, #36]	; (8015944 <enq_lock+0x40>)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	011b      	lsls	r3, r3, #4
 8015922:	4413      	add	r3, r2
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d1f2      	bne.n	8015910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2b03      	cmp	r3, #3
 801592e:	bf14      	ite	ne
 8015930:	2301      	movne	r3, #1
 8015932:	2300      	moveq	r3, #0
 8015934:	b2db      	uxtb	r3, r3
}
 8015936:	4618      	mov	r0, r3
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20000658 	.word	0x20000658

08015948 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015952:	2300      	movs	r3, #0
 8015954:	60fb      	str	r3, [r7, #12]
 8015956:	e01f      	b.n	8015998 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015958:	4a41      	ldr	r2, [pc, #260]	; (8015a60 <inc_lock+0x118>)
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	011b      	lsls	r3, r3, #4
 801595e:	4413      	add	r3, r2
 8015960:	681a      	ldr	r2, [r3, #0]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	429a      	cmp	r2, r3
 8015968:	d113      	bne.n	8015992 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801596a:	4a3d      	ldr	r2, [pc, #244]	; (8015a60 <inc_lock+0x118>)
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	011b      	lsls	r3, r3, #4
 8015970:	4413      	add	r3, r2
 8015972:	3304      	adds	r3, #4
 8015974:	681a      	ldr	r2, [r3, #0]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801597a:	429a      	cmp	r2, r3
 801597c:	d109      	bne.n	8015992 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801597e:	4a38      	ldr	r2, [pc, #224]	; (8015a60 <inc_lock+0x118>)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	011b      	lsls	r3, r3, #4
 8015984:	4413      	add	r3, r2
 8015986:	3308      	adds	r3, #8
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801598e:	429a      	cmp	r2, r3
 8015990:	d006      	beq.n	80159a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	3301      	adds	r3, #1
 8015996:	60fb      	str	r3, [r7, #12]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	2b02      	cmp	r3, #2
 801599c:	d9dc      	bls.n	8015958 <inc_lock+0x10>
 801599e:	e000      	b.n	80159a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80159a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2b03      	cmp	r3, #3
 80159a6:	d132      	bne.n	8015a0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80159a8:	2300      	movs	r3, #0
 80159aa:	60fb      	str	r3, [r7, #12]
 80159ac:	e002      	b.n	80159b4 <inc_lock+0x6c>
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	3301      	adds	r3, #1
 80159b2:	60fb      	str	r3, [r7, #12]
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2b02      	cmp	r3, #2
 80159b8:	d806      	bhi.n	80159c8 <inc_lock+0x80>
 80159ba:	4a29      	ldr	r2, [pc, #164]	; (8015a60 <inc_lock+0x118>)
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	011b      	lsls	r3, r3, #4
 80159c0:	4413      	add	r3, r2
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d1f2      	bne.n	80159ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2b03      	cmp	r3, #3
 80159cc:	d101      	bne.n	80159d2 <inc_lock+0x8a>
 80159ce:	2300      	movs	r3, #0
 80159d0:	e040      	b.n	8015a54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	4922      	ldr	r1, [pc, #136]	; (8015a60 <inc_lock+0x118>)
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	011b      	lsls	r3, r3, #4
 80159dc:	440b      	add	r3, r1
 80159de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	689a      	ldr	r2, [r3, #8]
 80159e4:	491e      	ldr	r1, [pc, #120]	; (8015a60 <inc_lock+0x118>)
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	011b      	lsls	r3, r3, #4
 80159ea:	440b      	add	r3, r1
 80159ec:	3304      	adds	r3, #4
 80159ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	695a      	ldr	r2, [r3, #20]
 80159f4:	491a      	ldr	r1, [pc, #104]	; (8015a60 <inc_lock+0x118>)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	011b      	lsls	r3, r3, #4
 80159fa:	440b      	add	r3, r1
 80159fc:	3308      	adds	r3, #8
 80159fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015a00:	4a17      	ldr	r2, [pc, #92]	; (8015a60 <inc_lock+0x118>)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	011b      	lsls	r3, r3, #4
 8015a06:	4413      	add	r3, r2
 8015a08:	330c      	adds	r3, #12
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d009      	beq.n	8015a28 <inc_lock+0xe0>
 8015a14:	4a12      	ldr	r2, [pc, #72]	; (8015a60 <inc_lock+0x118>)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	011b      	lsls	r3, r3, #4
 8015a1a:	4413      	add	r3, r2
 8015a1c:	330c      	adds	r3, #12
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d001      	beq.n	8015a28 <inc_lock+0xe0>
 8015a24:	2300      	movs	r3, #0
 8015a26:	e015      	b.n	8015a54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d108      	bne.n	8015a40 <inc_lock+0xf8>
 8015a2e:	4a0c      	ldr	r2, [pc, #48]	; (8015a60 <inc_lock+0x118>)
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	011b      	lsls	r3, r3, #4
 8015a34:	4413      	add	r3, r2
 8015a36:	330c      	adds	r3, #12
 8015a38:	881b      	ldrh	r3, [r3, #0]
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	e001      	b.n	8015a44 <inc_lock+0xfc>
 8015a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a44:	4906      	ldr	r1, [pc, #24]	; (8015a60 <inc_lock+0x118>)
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	011b      	lsls	r3, r3, #4
 8015a4a:	440b      	add	r3, r1
 8015a4c:	330c      	adds	r3, #12
 8015a4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	3301      	adds	r3, #1
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	3714      	adds	r7, #20
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr
 8015a60:	20000658 	.word	0x20000658

08015a64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b085      	sub	sp, #20
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	607b      	str	r3, [r7, #4]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2b02      	cmp	r3, #2
 8015a76:	d825      	bhi.n	8015ac4 <dec_lock+0x60>
		n = Files[i].ctr;
 8015a78:	4a17      	ldr	r2, [pc, #92]	; (8015ad8 <dec_lock+0x74>)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	011b      	lsls	r3, r3, #4
 8015a7e:	4413      	add	r3, r2
 8015a80:	330c      	adds	r3, #12
 8015a82:	881b      	ldrh	r3, [r3, #0]
 8015a84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015a86:	89fb      	ldrh	r3, [r7, #14]
 8015a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a8c:	d101      	bne.n	8015a92 <dec_lock+0x2e>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8015a92:	89fb      	ldrh	r3, [r7, #14]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d002      	beq.n	8015a9e <dec_lock+0x3a>
 8015a98:	89fb      	ldrh	r3, [r7, #14]
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015a9e:	4a0e      	ldr	r2, [pc, #56]	; (8015ad8 <dec_lock+0x74>)
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	011b      	lsls	r3, r3, #4
 8015aa4:	4413      	add	r3, r2
 8015aa6:	330c      	adds	r3, #12
 8015aa8:	89fa      	ldrh	r2, [r7, #14]
 8015aaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015aac:	89fb      	ldrh	r3, [r7, #14]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d105      	bne.n	8015abe <dec_lock+0x5a>
 8015ab2:	4a09      	ldr	r2, [pc, #36]	; (8015ad8 <dec_lock+0x74>)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	011b      	lsls	r3, r3, #4
 8015ab8:	4413      	add	r3, r2
 8015aba:	2200      	movs	r2, #0
 8015abc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	737b      	strb	r3, [r7, #13]
 8015ac2:	e001      	b.n	8015ac8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015ac4:	2302      	movs	r3, #2
 8015ac6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015ac8:	7b7b      	ldrb	r3, [r7, #13]
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3714      	adds	r7, #20
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad4:	4770      	bx	lr
 8015ad6:	bf00      	nop
 8015ad8:	20000658 	.word	0x20000658

08015adc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b085      	sub	sp, #20
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	60fb      	str	r3, [r7, #12]
 8015ae8:	e010      	b.n	8015b0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015aea:	4a0d      	ldr	r2, [pc, #52]	; (8015b20 <clear_lock+0x44>)
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	011b      	lsls	r3, r3, #4
 8015af0:	4413      	add	r3, r2
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d105      	bne.n	8015b06 <clear_lock+0x2a>
 8015afa:	4a09      	ldr	r2, [pc, #36]	; (8015b20 <clear_lock+0x44>)
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	011b      	lsls	r3, r3, #4
 8015b00:	4413      	add	r3, r2
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	3301      	adds	r3, #1
 8015b0a:	60fb      	str	r3, [r7, #12]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2b02      	cmp	r3, #2
 8015b10:	d9eb      	bls.n	8015aea <clear_lock+0xe>
	}
}
 8015b12:	bf00      	nop
 8015b14:	bf00      	nop
 8015b16:	3714      	adds	r7, #20
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	20000658 	.word	0x20000658

08015b24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b086      	sub	sp, #24
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	78db      	ldrb	r3, [r3, #3]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d034      	beq.n	8015ba2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	7858      	ldrb	r0, [r3, #1]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015b48:	2301      	movs	r3, #1
 8015b4a:	697a      	ldr	r2, [r7, #20]
 8015b4c:	f7ff fd0e 	bl	801556c <disk_write>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d002      	beq.n	8015b5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015b56:	2301      	movs	r3, #1
 8015b58:	73fb      	strb	r3, [r7, #15]
 8015b5a:	e022      	b.n	8015ba2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b66:	697a      	ldr	r2, [r7, #20]
 8015b68:	1ad2      	subs	r2, r2, r3
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6a1b      	ldr	r3, [r3, #32]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d217      	bcs.n	8015ba2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	789b      	ldrb	r3, [r3, #2]
 8015b76:	613b      	str	r3, [r7, #16]
 8015b78:	e010      	b.n	8015b9c <sync_window+0x78>
					wsect += fs->fsize;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6a1b      	ldr	r3, [r3, #32]
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	4413      	add	r3, r2
 8015b82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	7858      	ldrb	r0, [r3, #1]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015b8e:	2301      	movs	r3, #1
 8015b90:	697a      	ldr	r2, [r7, #20]
 8015b92:	f7ff fceb 	bl	801556c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	3b01      	subs	r3, #1
 8015b9a:	613b      	str	r3, [r7, #16]
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	d8eb      	bhi.n	8015b7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3718      	adds	r7, #24
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bbe:	683a      	ldr	r2, [r7, #0]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d01b      	beq.n	8015bfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7ff ffad 	bl	8015b24 <sync_window>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015bce:	7bfb      	ldrb	r3, [r7, #15]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d113      	bne.n	8015bfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	7858      	ldrb	r0, [r3, #1]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015bde:	2301      	movs	r3, #1
 8015be0:	683a      	ldr	r2, [r7, #0]
 8015be2:	f7ff fca3 	bl	801552c <disk_read>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d004      	beq.n	8015bf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015bec:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	683a      	ldr	r2, [r7, #0]
 8015bfa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8015bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
	...

08015c08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ff ff87 	bl	8015b24 <sync_window>
 8015c16:	4603      	mov	r3, r0
 8015c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015c1a:	7bfb      	ldrb	r3, [r7, #15]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d158      	bne.n	8015cd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	781b      	ldrb	r3, [r3, #0]
 8015c24:	2b03      	cmp	r3, #3
 8015c26:	d148      	bne.n	8015cba <sync_fs+0xb2>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	791b      	ldrb	r3, [r3, #4]
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d144      	bne.n	8015cba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	3338      	adds	r3, #56	; 0x38
 8015c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015c38:	2100      	movs	r1, #0
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7ff fd77 	bl	801572e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	3338      	adds	r3, #56	; 0x38
 8015c44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7ff fd06 	bl	801565e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	3338      	adds	r3, #56	; 0x38
 8015c56:	4921      	ldr	r1, [pc, #132]	; (8015cdc <sync_fs+0xd4>)
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ff fd1b 	bl	8015694 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	3338      	adds	r3, #56	; 0x38
 8015c62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015c66:	491e      	ldr	r1, [pc, #120]	; (8015ce0 <sync_fs+0xd8>)
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7ff fd13 	bl	8015694 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	3338      	adds	r3, #56	; 0x38
 8015c72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	699b      	ldr	r3, [r3, #24]
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	4610      	mov	r0, r2
 8015c7e:	f7ff fd09 	bl	8015694 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	3338      	adds	r3, #56	; 0x38
 8015c86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	695b      	ldr	r3, [r3, #20]
 8015c8e:	4619      	mov	r1, r3
 8015c90:	4610      	mov	r0, r2
 8015c92:	f7ff fcff 	bl	8015694 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c9a:	1c5a      	adds	r2, r3, #1
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	7858      	ldrb	r0, [r3, #1]
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015cae:	2301      	movs	r3, #1
 8015cb0:	f7ff fc5c 	bl	801556c <disk_write>
			fs->fsi_flag = 0;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	785b      	ldrb	r3, [r3, #1]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ff fc72 	bl	80155ac <disk_ioctl>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d001      	beq.n	8015cd2 <sync_fs+0xca>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3710      	adds	r7, #16
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	41615252 	.word	0x41615252
 8015ce0:	61417272 	.word	0x61417272

08015ce4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	3b02      	subs	r3, #2
 8015cf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	69db      	ldr	r3, [r3, #28]
 8015cf8:	3b02      	subs	r3, #2
 8015cfa:	683a      	ldr	r2, [r7, #0]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d301      	bcc.n	8015d04 <clust2sect+0x20>
 8015d00:	2300      	movs	r3, #0
 8015d02:	e008      	b.n	8015d16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	895b      	ldrh	r3, [r3, #10]
 8015d08:	461a      	mov	r2, r3
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	fb03 f202 	mul.w	r2, r3, r2
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d14:	4413      	add	r3, r2
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	370c      	adds	r7, #12
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr

08015d22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b086      	sub	sp, #24
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d904      	bls.n	8015d42 <get_fat+0x20>
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	69db      	ldr	r3, [r3, #28]
 8015d3c:	683a      	ldr	r2, [r7, #0]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d302      	bcc.n	8015d48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015d42:	2301      	movs	r3, #1
 8015d44:	617b      	str	r3, [r7, #20]
 8015d46:	e08f      	b.n	8015e68 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015d48:	f04f 33ff 	mov.w	r3, #4294967295
 8015d4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	2b03      	cmp	r3, #3
 8015d54:	d062      	beq.n	8015e1c <get_fat+0xfa>
 8015d56:	2b03      	cmp	r3, #3
 8015d58:	dc7c      	bgt.n	8015e54 <get_fat+0x132>
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d002      	beq.n	8015d64 <get_fat+0x42>
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d042      	beq.n	8015de8 <get_fat+0xc6>
 8015d62:	e077      	b.n	8015e54 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	60fb      	str	r3, [r7, #12]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	085b      	lsrs	r3, r3, #1
 8015d6c:	68fa      	ldr	r2, [r7, #12]
 8015d6e:	4413      	add	r3, r2
 8015d70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	0a5b      	lsrs	r3, r3, #9
 8015d7a:	4413      	add	r3, r2
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	6938      	ldr	r0, [r7, #16]
 8015d80:	f7ff ff14 	bl	8015bac <move_window>
 8015d84:	4603      	mov	r3, r0
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d167      	bne.n	8015e5a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	1c5a      	adds	r2, r3, #1
 8015d8e:	60fa      	str	r2, [r7, #12]
 8015d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d94:	693a      	ldr	r2, [r7, #16]
 8015d96:	4413      	add	r3, r2
 8015d98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015d9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	0a5b      	lsrs	r3, r3, #9
 8015da6:	4413      	add	r3, r2
 8015da8:	4619      	mov	r1, r3
 8015daa:	6938      	ldr	r0, [r7, #16]
 8015dac:	f7ff fefe 	bl	8015bac <move_window>
 8015db0:	4603      	mov	r3, r0
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d153      	bne.n	8015e5e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dbc:	693a      	ldr	r2, [r7, #16]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dc4:	021b      	lsls	r3, r3, #8
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	4313      	orrs	r3, r2
 8015dcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	f003 0301 	and.w	r3, r3, #1
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d002      	beq.n	8015dde <get_fat+0xbc>
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	091b      	lsrs	r3, r3, #4
 8015ddc:	e002      	b.n	8015de4 <get_fat+0xc2>
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015de4:	617b      	str	r3, [r7, #20]
			break;
 8015de6:	e03f      	b.n	8015e68 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	0a1b      	lsrs	r3, r3, #8
 8015df0:	4413      	add	r3, r2
 8015df2:	4619      	mov	r1, r3
 8015df4:	6938      	ldr	r0, [r7, #16]
 8015df6:	f7ff fed9 	bl	8015bac <move_window>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d130      	bne.n	8015e62 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	005b      	lsls	r3, r3, #1
 8015e0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e0e:	4413      	add	r3, r2
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7ff fbe9 	bl	80155e8 <ld_word>
 8015e16:	4603      	mov	r3, r0
 8015e18:	617b      	str	r3, [r7, #20]
			break;
 8015e1a:	e025      	b.n	8015e68 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	09db      	lsrs	r3, r3, #7
 8015e24:	4413      	add	r3, r2
 8015e26:	4619      	mov	r1, r3
 8015e28:	6938      	ldr	r0, [r7, #16]
 8015e2a:	f7ff febf 	bl	8015bac <move_window>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d118      	bne.n	8015e66 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015e42:	4413      	add	r3, r2
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7ff fbe7 	bl	8015618 <ld_dword>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015e50:	617b      	str	r3, [r7, #20]
			break;
 8015e52:	e009      	b.n	8015e68 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015e54:	2301      	movs	r3, #1
 8015e56:	617b      	str	r3, [r7, #20]
 8015e58:	e006      	b.n	8015e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e5a:	bf00      	nop
 8015e5c:	e004      	b.n	8015e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015e5e:	bf00      	nop
 8015e60:	e002      	b.n	8015e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015e62:	bf00      	nop
 8015e64:	e000      	b.n	8015e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015e66:	bf00      	nop
		}
	}

	return val;
 8015e68:	697b      	ldr	r3, [r7, #20]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3718      	adds	r7, #24
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}

08015e72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015e72:	b590      	push	{r4, r7, lr}
 8015e74:	b089      	sub	sp, #36	; 0x24
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	60f8      	str	r0, [r7, #12]
 8015e7a:	60b9      	str	r1, [r7, #8]
 8015e7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015e7e:	2302      	movs	r3, #2
 8015e80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	f240 80d2 	bls.w	801602e <put_fat+0x1bc>
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	69db      	ldr	r3, [r3, #28]
 8015e8e:	68ba      	ldr	r2, [r7, #8]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	f080 80cc 	bcs.w	801602e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	2b03      	cmp	r3, #3
 8015e9c:	f000 8096 	beq.w	8015fcc <put_fat+0x15a>
 8015ea0:	2b03      	cmp	r3, #3
 8015ea2:	f300 80cd 	bgt.w	8016040 <put_fat+0x1ce>
 8015ea6:	2b01      	cmp	r3, #1
 8015ea8:	d002      	beq.n	8015eb0 <put_fat+0x3e>
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d06e      	beq.n	8015f8c <put_fat+0x11a>
 8015eae:	e0c7      	b.n	8016040 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	61bb      	str	r3, [r7, #24]
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	085b      	lsrs	r3, r3, #1
 8015eb8:	69ba      	ldr	r2, [r7, #24]
 8015eba:	4413      	add	r3, r2
 8015ebc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	0a5b      	lsrs	r3, r3, #9
 8015ec6:	4413      	add	r3, r2
 8015ec8:	4619      	mov	r1, r3
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f7ff fe6e 	bl	8015bac <move_window>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015ed4:	7ffb      	ldrb	r3, [r7, #31]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f040 80ab 	bne.w	8016032 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	1c59      	adds	r1, r3, #1
 8015ee6:	61b9      	str	r1, [r7, #24]
 8015ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015eec:	4413      	add	r3, r2
 8015eee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	f003 0301 	and.w	r3, r3, #1
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00d      	beq.n	8015f16 <put_fat+0xa4>
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	b25b      	sxtb	r3, r3
 8015f00:	f003 030f 	and.w	r3, r3, #15
 8015f04:	b25a      	sxtb	r2, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	011b      	lsls	r3, r3, #4
 8015f0c:	b25b      	sxtb	r3, r3
 8015f0e:	4313      	orrs	r3, r2
 8015f10:	b25b      	sxtb	r3, r3
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	e001      	b.n	8015f1a <put_fat+0xa8>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	697a      	ldr	r2, [r7, #20]
 8015f1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2201      	movs	r2, #1
 8015f22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	0a5b      	lsrs	r3, r3, #9
 8015f2c:	4413      	add	r3, r2
 8015f2e:	4619      	mov	r1, r3
 8015f30:	68f8      	ldr	r0, [r7, #12]
 8015f32:	f7ff fe3b 	bl	8015bac <move_window>
 8015f36:	4603      	mov	r3, r0
 8015f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f3a:	7ffb      	ldrb	r3, [r7, #31]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d17a      	bne.n	8016036 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015f46:	69bb      	ldr	r3, [r7, #24]
 8015f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f4c:	4413      	add	r3, r2
 8015f4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	f003 0301 	and.w	r3, r3, #1
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d003      	beq.n	8015f62 <put_fat+0xf0>
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	091b      	lsrs	r3, r3, #4
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	e00e      	b.n	8015f80 <put_fat+0x10e>
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	b25b      	sxtb	r3, r3
 8015f68:	f023 030f 	bic.w	r3, r3, #15
 8015f6c:	b25a      	sxtb	r2, r3
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	0a1b      	lsrs	r3, r3, #8
 8015f72:	b25b      	sxtb	r3, r3
 8015f74:	f003 030f 	and.w	r3, r3, #15
 8015f78:	b25b      	sxtb	r3, r3
 8015f7a:	4313      	orrs	r3, r2
 8015f7c:	b25b      	sxtb	r3, r3
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	697a      	ldr	r2, [r7, #20]
 8015f82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2201      	movs	r2, #1
 8015f88:	70da      	strb	r2, [r3, #3]
			break;
 8015f8a:	e059      	b.n	8016040 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	0a1b      	lsrs	r3, r3, #8
 8015f94:	4413      	add	r3, r2
 8015f96:	4619      	mov	r1, r3
 8015f98:	68f8      	ldr	r0, [r7, #12]
 8015f9a:	f7ff fe07 	bl	8015bac <move_window>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fa2:	7ffb      	ldrb	r3, [r7, #31]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d148      	bne.n	801603a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	005b      	lsls	r3, r3, #1
 8015fb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015fb6:	4413      	add	r3, r2
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	b292      	uxth	r2, r2
 8015fbc:	4611      	mov	r1, r2
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7ff fb4d 	bl	801565e <st_word>
			fs->wflag = 1;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2201      	movs	r2, #1
 8015fc8:	70da      	strb	r2, [r3, #3]
			break;
 8015fca:	e039      	b.n	8016040 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	09db      	lsrs	r3, r3, #7
 8015fd4:	4413      	add	r3, r2
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	68f8      	ldr	r0, [r7, #12]
 8015fda:	f7ff fde7 	bl	8015bac <move_window>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015fe2:	7ffb      	ldrb	r3, [r7, #31]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d12a      	bne.n	801603e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ffc:	4413      	add	r3, r2
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7ff fb0a 	bl	8015618 <ld_dword>
 8016004:	4603      	mov	r3, r0
 8016006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801600a:	4323      	orrs	r3, r4
 801600c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801601c:	4413      	add	r3, r2
 801601e:	6879      	ldr	r1, [r7, #4]
 8016020:	4618      	mov	r0, r3
 8016022:	f7ff fb37 	bl	8015694 <st_dword>
			fs->wflag = 1;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2201      	movs	r2, #1
 801602a:	70da      	strb	r2, [r3, #3]
			break;
 801602c:	e008      	b.n	8016040 <put_fat+0x1ce>
		}
	}
 801602e:	bf00      	nop
 8016030:	e006      	b.n	8016040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016032:	bf00      	nop
 8016034:	e004      	b.n	8016040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016036:	bf00      	nop
 8016038:	e002      	b.n	8016040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801603a:	bf00      	nop
 801603c:	e000      	b.n	8016040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801603e:	bf00      	nop
	return res;
 8016040:	7ffb      	ldrb	r3, [r7, #31]
}
 8016042:	4618      	mov	r0, r3
 8016044:	3724      	adds	r7, #36	; 0x24
 8016046:	46bd      	mov	sp, r7
 8016048:	bd90      	pop	{r4, r7, pc}

0801604a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801604a:	b580      	push	{r7, lr}
 801604c:	b088      	sub	sp, #32
 801604e:	af00      	add	r7, sp, #0
 8016050:	60f8      	str	r0, [r7, #12]
 8016052:	60b9      	str	r1, [r7, #8]
 8016054:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016056:	2300      	movs	r3, #0
 8016058:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d904      	bls.n	8016070 <remove_chain+0x26>
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	69db      	ldr	r3, [r3, #28]
 801606a:	68ba      	ldr	r2, [r7, #8]
 801606c:	429a      	cmp	r2, r3
 801606e:	d301      	bcc.n	8016074 <remove_chain+0x2a>
 8016070:	2302      	movs	r3, #2
 8016072:	e04b      	b.n	801610c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d00c      	beq.n	8016094 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801607a:	f04f 32ff 	mov.w	r2, #4294967295
 801607e:	6879      	ldr	r1, [r7, #4]
 8016080:	69b8      	ldr	r0, [r7, #24]
 8016082:	f7ff fef6 	bl	8015e72 <put_fat>
 8016086:	4603      	mov	r3, r0
 8016088:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801608a:	7ffb      	ldrb	r3, [r7, #31]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <remove_chain+0x4a>
 8016090:	7ffb      	ldrb	r3, [r7, #31]
 8016092:	e03b      	b.n	801610c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016094:	68b9      	ldr	r1, [r7, #8]
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7ff fe43 	bl	8015d22 <get_fat>
 801609c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d031      	beq.n	8016108 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2b01      	cmp	r3, #1
 80160a8:	d101      	bne.n	80160ae <remove_chain+0x64>
 80160aa:	2302      	movs	r3, #2
 80160ac:	e02e      	b.n	801610c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160b4:	d101      	bne.n	80160ba <remove_chain+0x70>
 80160b6:	2301      	movs	r3, #1
 80160b8:	e028      	b.n	801610c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80160ba:	2200      	movs	r2, #0
 80160bc:	68b9      	ldr	r1, [r7, #8]
 80160be:	69b8      	ldr	r0, [r7, #24]
 80160c0:	f7ff fed7 	bl	8015e72 <put_fat>
 80160c4:	4603      	mov	r3, r0
 80160c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80160c8:	7ffb      	ldrb	r3, [r7, #31]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d001      	beq.n	80160d2 <remove_chain+0x88>
 80160ce:	7ffb      	ldrb	r3, [r7, #31]
 80160d0:	e01c      	b.n	801610c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80160d2:	69bb      	ldr	r3, [r7, #24]
 80160d4:	699a      	ldr	r2, [r3, #24]
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	69db      	ldr	r3, [r3, #28]
 80160da:	3b02      	subs	r3, #2
 80160dc:	429a      	cmp	r2, r3
 80160de:	d20b      	bcs.n	80160f8 <remove_chain+0xae>
			fs->free_clst++;
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	699b      	ldr	r3, [r3, #24]
 80160e4:	1c5a      	adds	r2, r3, #1
 80160e6:	69bb      	ldr	r3, [r7, #24]
 80160e8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	791b      	ldrb	r3, [r3, #4]
 80160ee:	f043 0301 	orr.w	r3, r3, #1
 80160f2:	b2da      	uxtb	r2, r3
 80160f4:	69bb      	ldr	r3, [r7, #24]
 80160f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	69db      	ldr	r3, [r3, #28]
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	429a      	cmp	r2, r3
 8016104:	d3c6      	bcc.n	8016094 <remove_chain+0x4a>
 8016106:	e000      	b.n	801610a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016108:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801610a:	2300      	movs	r3, #0
}
 801610c:	4618      	mov	r0, r3
 801610e:	3720      	adds	r7, #32
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b088      	sub	sp, #32
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d10d      	bne.n	8016146 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	695b      	ldr	r3, [r3, #20]
 801612e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016130:	69bb      	ldr	r3, [r7, #24]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d004      	beq.n	8016140 <create_chain+0x2c>
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	69db      	ldr	r3, [r3, #28]
 801613a:	69ba      	ldr	r2, [r7, #24]
 801613c:	429a      	cmp	r2, r3
 801613e:	d31b      	bcc.n	8016178 <create_chain+0x64>
 8016140:	2301      	movs	r3, #1
 8016142:	61bb      	str	r3, [r7, #24]
 8016144:	e018      	b.n	8016178 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016146:	6839      	ldr	r1, [r7, #0]
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7ff fdea 	bl	8015d22 <get_fat>
 801614e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2b01      	cmp	r3, #1
 8016154:	d801      	bhi.n	801615a <create_chain+0x46>
 8016156:	2301      	movs	r3, #1
 8016158:	e070      	b.n	801623c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016160:	d101      	bne.n	8016166 <create_chain+0x52>
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	e06a      	b.n	801623c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	69db      	ldr	r3, [r3, #28]
 801616a:	68fa      	ldr	r2, [r7, #12]
 801616c:	429a      	cmp	r2, r3
 801616e:	d201      	bcs.n	8016174 <create_chain+0x60>
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	e063      	b.n	801623c <create_chain+0x128>
		scl = clst;
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016178:	69bb      	ldr	r3, [r7, #24]
 801617a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801617c:	69fb      	ldr	r3, [r7, #28]
 801617e:	3301      	adds	r3, #1
 8016180:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	69db      	ldr	r3, [r3, #28]
 8016186:	69fa      	ldr	r2, [r7, #28]
 8016188:	429a      	cmp	r2, r3
 801618a:	d307      	bcc.n	801619c <create_chain+0x88>
				ncl = 2;
 801618c:	2302      	movs	r3, #2
 801618e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016190:	69fa      	ldr	r2, [r7, #28]
 8016192:	69bb      	ldr	r3, [r7, #24]
 8016194:	429a      	cmp	r2, r3
 8016196:	d901      	bls.n	801619c <create_chain+0x88>
 8016198:	2300      	movs	r3, #0
 801619a:	e04f      	b.n	801623c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801619c:	69f9      	ldr	r1, [r7, #28]
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f7ff fdbf 	bl	8015d22 <get_fat>
 80161a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d00e      	beq.n	80161ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2b01      	cmp	r3, #1
 80161b0:	d003      	beq.n	80161ba <create_chain+0xa6>
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161b8:	d101      	bne.n	80161be <create_chain+0xaa>
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	e03e      	b.n	801623c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80161be:	69fa      	ldr	r2, [r7, #28]
 80161c0:	69bb      	ldr	r3, [r7, #24]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d1da      	bne.n	801617c <create_chain+0x68>
 80161c6:	2300      	movs	r3, #0
 80161c8:	e038      	b.n	801623c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80161ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80161cc:	f04f 32ff 	mov.w	r2, #4294967295
 80161d0:	69f9      	ldr	r1, [r7, #28]
 80161d2:	6938      	ldr	r0, [r7, #16]
 80161d4:	f7ff fe4d 	bl	8015e72 <put_fat>
 80161d8:	4603      	mov	r3, r0
 80161da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80161dc:	7dfb      	ldrb	r3, [r7, #23]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d109      	bne.n	80161f6 <create_chain+0xe2>
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d006      	beq.n	80161f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80161e8:	69fa      	ldr	r2, [r7, #28]
 80161ea:	6839      	ldr	r1, [r7, #0]
 80161ec:	6938      	ldr	r0, [r7, #16]
 80161ee:	f7ff fe40 	bl	8015e72 <put_fat>
 80161f2:	4603      	mov	r3, r0
 80161f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d116      	bne.n	801622a <create_chain+0x116>
		fs->last_clst = ncl;
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	69fa      	ldr	r2, [r7, #28]
 8016200:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	699a      	ldr	r2, [r3, #24]
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	69db      	ldr	r3, [r3, #28]
 801620a:	3b02      	subs	r3, #2
 801620c:	429a      	cmp	r2, r3
 801620e:	d804      	bhi.n	801621a <create_chain+0x106>
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	699b      	ldr	r3, [r3, #24]
 8016214:	1e5a      	subs	r2, r3, #1
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	791b      	ldrb	r3, [r3, #4]
 801621e:	f043 0301 	orr.w	r3, r3, #1
 8016222:	b2da      	uxtb	r2, r3
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	711a      	strb	r2, [r3, #4]
 8016228:	e007      	b.n	801623a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801622a:	7dfb      	ldrb	r3, [r7, #23]
 801622c:	2b01      	cmp	r3, #1
 801622e:	d102      	bne.n	8016236 <create_chain+0x122>
 8016230:	f04f 33ff 	mov.w	r3, #4294967295
 8016234:	e000      	b.n	8016238 <create_chain+0x124>
 8016236:	2301      	movs	r3, #1
 8016238:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801623a:	69fb      	ldr	r3, [r7, #28]
}
 801623c:	4618      	mov	r0, r3
 801623e:	3720      	adds	r7, #32
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016244:	b480      	push	{r7}
 8016246:	b087      	sub	sp, #28
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016258:	3304      	adds	r3, #4
 801625a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	0a5b      	lsrs	r3, r3, #9
 8016260:	68fa      	ldr	r2, [r7, #12]
 8016262:	8952      	ldrh	r2, [r2, #10]
 8016264:	fbb3 f3f2 	udiv	r3, r3, r2
 8016268:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	1d1a      	adds	r2, r3, #4
 801626e:	613a      	str	r2, [r7, #16]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d101      	bne.n	801627e <clmt_clust+0x3a>
 801627a:	2300      	movs	r3, #0
 801627c:	e010      	b.n	80162a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801627e:	697a      	ldr	r2, [r7, #20]
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	429a      	cmp	r2, r3
 8016284:	d307      	bcc.n	8016296 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016286:	697a      	ldr	r2, [r7, #20]
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	617b      	str	r3, [r7, #20]
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	3304      	adds	r3, #4
 8016292:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016294:	e7e9      	b.n	801626a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8016296:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	4413      	add	r3, r2
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	371c      	adds	r7, #28
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr

080162ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b086      	sub	sp, #24
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80162c2:	d204      	bcs.n	80162ce <dir_sdi+0x22>
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	f003 031f 	and.w	r3, r3, #31
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d001      	beq.n	80162d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80162ce:	2302      	movs	r3, #2
 80162d0:	e063      	b.n	801639a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	683a      	ldr	r2, [r7, #0]
 80162d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	689b      	ldr	r3, [r3, #8]
 80162dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d106      	bne.n	80162f2 <dir_sdi+0x46>
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	2b02      	cmp	r3, #2
 80162ea:	d902      	bls.n	80162f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80162f2:	697b      	ldr	r3, [r7, #20]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d10c      	bne.n	8016312 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	095b      	lsrs	r3, r3, #5
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	8912      	ldrh	r2, [r2, #8]
 8016300:	4293      	cmp	r3, r2
 8016302:	d301      	bcc.n	8016308 <dir_sdi+0x5c>
 8016304:	2302      	movs	r3, #2
 8016306:	e048      	b.n	801639a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	61da      	str	r2, [r3, #28]
 8016310:	e029      	b.n	8016366 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	895b      	ldrh	r3, [r3, #10]
 8016316:	025b      	lsls	r3, r3, #9
 8016318:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801631a:	e019      	b.n	8016350 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	6979      	ldr	r1, [r7, #20]
 8016320:	4618      	mov	r0, r3
 8016322:	f7ff fcfe 	bl	8015d22 <get_fat>
 8016326:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801632e:	d101      	bne.n	8016334 <dir_sdi+0x88>
 8016330:	2301      	movs	r3, #1
 8016332:	e032      	b.n	801639a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	2b01      	cmp	r3, #1
 8016338:	d904      	bls.n	8016344 <dir_sdi+0x98>
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	69db      	ldr	r3, [r3, #28]
 801633e:	697a      	ldr	r2, [r7, #20]
 8016340:	429a      	cmp	r2, r3
 8016342:	d301      	bcc.n	8016348 <dir_sdi+0x9c>
 8016344:	2302      	movs	r3, #2
 8016346:	e028      	b.n	801639a <dir_sdi+0xee>
			ofs -= csz;
 8016348:	683a      	ldr	r2, [r7, #0]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	1ad3      	subs	r3, r2, r3
 801634e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016350:	683a      	ldr	r2, [r7, #0]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	429a      	cmp	r2, r3
 8016356:	d2e1      	bcs.n	801631c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016358:	6979      	ldr	r1, [r7, #20]
 801635a:	6938      	ldr	r0, [r7, #16]
 801635c:	f7ff fcc2 	bl	8015ce4 <clust2sect>
 8016360:	4602      	mov	r2, r0
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	697a      	ldr	r2, [r7, #20]
 801636a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	69db      	ldr	r3, [r3, #28]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d101      	bne.n	8016378 <dir_sdi+0xcc>
 8016374:	2302      	movs	r3, #2
 8016376:	e010      	b.n	801639a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	69da      	ldr	r2, [r3, #28]
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	0a5b      	lsrs	r3, r3, #9
 8016380:	441a      	add	r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016392:	441a      	add	r2, r3
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016398:	2300      	movs	r3, #0
}
 801639a:	4618      	mov	r0, r3
 801639c:	3718      	adds	r7, #24
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b086      	sub	sp, #24
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
 80163aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	695b      	ldr	r3, [r3, #20]
 80163b6:	3320      	adds	r3, #32
 80163b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	69db      	ldr	r3, [r3, #28]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d003      	beq.n	80163ca <dir_next+0x28>
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80163c8:	d301      	bcc.n	80163ce <dir_next+0x2c>
 80163ca:	2304      	movs	r3, #4
 80163cc:	e0aa      	b.n	8016524 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	f040 8098 	bne.w	801650a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	69db      	ldr	r3, [r3, #28]
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	699b      	ldr	r3, [r3, #24]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d10b      	bne.n	8016404 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	095b      	lsrs	r3, r3, #5
 80163f0:	68fa      	ldr	r2, [r7, #12]
 80163f2:	8912      	ldrh	r2, [r2, #8]
 80163f4:	4293      	cmp	r3, r2
 80163f6:	f0c0 8088 	bcc.w	801650a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2200      	movs	r2, #0
 80163fe:	61da      	str	r2, [r3, #28]
 8016400:	2304      	movs	r3, #4
 8016402:	e08f      	b.n	8016524 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	0a5b      	lsrs	r3, r3, #9
 8016408:	68fa      	ldr	r2, [r7, #12]
 801640a:	8952      	ldrh	r2, [r2, #10]
 801640c:	3a01      	subs	r2, #1
 801640e:	4013      	ands	r3, r2
 8016410:	2b00      	cmp	r3, #0
 8016412:	d17a      	bne.n	801650a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	699b      	ldr	r3, [r3, #24]
 801641a:	4619      	mov	r1, r3
 801641c:	4610      	mov	r0, r2
 801641e:	f7ff fc80 	bl	8015d22 <get_fat>
 8016422:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	2b01      	cmp	r3, #1
 8016428:	d801      	bhi.n	801642e <dir_next+0x8c>
 801642a:	2302      	movs	r3, #2
 801642c:	e07a      	b.n	8016524 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801642e:	697b      	ldr	r3, [r7, #20]
 8016430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016434:	d101      	bne.n	801643a <dir_next+0x98>
 8016436:	2301      	movs	r3, #1
 8016438:	e074      	b.n	8016524 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	69db      	ldr	r3, [r3, #28]
 801643e:	697a      	ldr	r2, [r7, #20]
 8016440:	429a      	cmp	r2, r3
 8016442:	d358      	bcc.n	80164f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d104      	bne.n	8016454 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2200      	movs	r2, #0
 801644e:	61da      	str	r2, [r3, #28]
 8016450:	2304      	movs	r3, #4
 8016452:	e067      	b.n	8016524 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	699b      	ldr	r3, [r3, #24]
 801645a:	4619      	mov	r1, r3
 801645c:	4610      	mov	r0, r2
 801645e:	f7ff fe59 	bl	8016114 <create_chain>
 8016462:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d101      	bne.n	801646e <dir_next+0xcc>
 801646a:	2307      	movs	r3, #7
 801646c:	e05a      	b.n	8016524 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	2b01      	cmp	r3, #1
 8016472:	d101      	bne.n	8016478 <dir_next+0xd6>
 8016474:	2302      	movs	r3, #2
 8016476:	e055      	b.n	8016524 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801647e:	d101      	bne.n	8016484 <dir_next+0xe2>
 8016480:	2301      	movs	r3, #1
 8016482:	e04f      	b.n	8016524 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f7ff fb4d 	bl	8015b24 <sync_window>
 801648a:	4603      	mov	r3, r0
 801648c:	2b00      	cmp	r3, #0
 801648e:	d001      	beq.n	8016494 <dir_next+0xf2>
 8016490:	2301      	movs	r3, #1
 8016492:	e047      	b.n	8016524 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	3338      	adds	r3, #56	; 0x38
 8016498:	f44f 7200 	mov.w	r2, #512	; 0x200
 801649c:	2100      	movs	r1, #0
 801649e:	4618      	mov	r0, r3
 80164a0:	f7ff f945 	bl	801572e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164a4:	2300      	movs	r3, #0
 80164a6:	613b      	str	r3, [r7, #16]
 80164a8:	6979      	ldr	r1, [r7, #20]
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f7ff fc1a 	bl	8015ce4 <clust2sect>
 80164b0:	4602      	mov	r2, r0
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	635a      	str	r2, [r3, #52]	; 0x34
 80164b6:	e012      	b.n	80164de <dir_next+0x13c>
						fs->wflag = 1;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2201      	movs	r2, #1
 80164bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80164be:	68f8      	ldr	r0, [r7, #12]
 80164c0:	f7ff fb30 	bl	8015b24 <sync_window>
 80164c4:	4603      	mov	r3, r0
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d001      	beq.n	80164ce <dir_next+0x12c>
 80164ca:	2301      	movs	r3, #1
 80164cc:	e02a      	b.n	8016524 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	3301      	adds	r3, #1
 80164d2:	613b      	str	r3, [r7, #16]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164d8:	1c5a      	adds	r2, r3, #1
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	635a      	str	r2, [r3, #52]	; 0x34
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	895b      	ldrh	r3, [r3, #10]
 80164e2:	461a      	mov	r2, r3
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	4293      	cmp	r3, r2
 80164e8:	d3e6      	bcc.n	80164b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	1ad2      	subs	r2, r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	697a      	ldr	r2, [r7, #20]
 80164fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80164fc:	6979      	ldr	r1, [r7, #20]
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f7ff fbf0 	bl	8015ce4 <clust2sect>
 8016504:	4602      	mov	r2, r0
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801651c:	441a      	add	r2, r3
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016522:	2300      	movs	r3, #0
}
 8016524:	4618      	mov	r0, r3
 8016526:	3718      	adds	r7, #24
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}

0801652c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b086      	sub	sp, #24
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801653c:	2100      	movs	r1, #0
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7ff feb4 	bl	80162ac <dir_sdi>
 8016544:	4603      	mov	r3, r0
 8016546:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016548:	7dfb      	ldrb	r3, [r7, #23]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d12b      	bne.n	80165a6 <dir_alloc+0x7a>
		n = 0;
 801654e:	2300      	movs	r3, #0
 8016550:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	69db      	ldr	r3, [r3, #28]
 8016556:	4619      	mov	r1, r3
 8016558:	68f8      	ldr	r0, [r7, #12]
 801655a:	f7ff fb27 	bl	8015bac <move_window>
 801655e:	4603      	mov	r3, r0
 8016560:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016562:	7dfb      	ldrb	r3, [r7, #23]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d11d      	bne.n	80165a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6a1b      	ldr	r3, [r3, #32]
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	2be5      	cmp	r3, #229	; 0xe5
 8016570:	d004      	beq.n	801657c <dir_alloc+0x50>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6a1b      	ldr	r3, [r3, #32]
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d107      	bne.n	801658c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	3301      	adds	r3, #1
 8016580:	613b      	str	r3, [r7, #16]
 8016582:	693a      	ldr	r2, [r7, #16]
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	429a      	cmp	r2, r3
 8016588:	d102      	bne.n	8016590 <dir_alloc+0x64>
 801658a:	e00c      	b.n	80165a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801658c:	2300      	movs	r3, #0
 801658e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016590:	2101      	movs	r1, #1
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7ff ff05 	bl	80163a2 <dir_next>
 8016598:	4603      	mov	r3, r0
 801659a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801659c:	7dfb      	ldrb	r3, [r7, #23]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d0d7      	beq.n	8016552 <dir_alloc+0x26>
 80165a2:	e000      	b.n	80165a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80165a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80165a6:	7dfb      	ldrb	r3, [r7, #23]
 80165a8:	2b04      	cmp	r3, #4
 80165aa:	d101      	bne.n	80165b0 <dir_alloc+0x84>
 80165ac:	2307      	movs	r3, #7
 80165ae:	75fb      	strb	r3, [r7, #23]
	return res;
 80165b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3718      	adds	r7, #24
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b084      	sub	sp, #16
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	331a      	adds	r3, #26
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7ff f80d 	bl	80155e8 <ld_word>
 80165ce:	4603      	mov	r3, r0
 80165d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	2b03      	cmp	r3, #3
 80165d8:	d109      	bne.n	80165ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	3314      	adds	r3, #20
 80165de:	4618      	mov	r0, r3
 80165e0:	f7ff f802 	bl	80155e8 <ld_word>
 80165e4:	4603      	mov	r3, r0
 80165e6:	041b      	lsls	r3, r3, #16
 80165e8:	68fa      	ldr	r2, [r7, #12]
 80165ea:	4313      	orrs	r3, r2
 80165ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80165ee:	68fb      	ldr	r3, [r7, #12]
}
 80165f0:	4618      	mov	r0, r3
 80165f2:	3710      	adds	r7, #16
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}

080165f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	331a      	adds	r3, #26
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	b292      	uxth	r2, r2
 801660c:	4611      	mov	r1, r2
 801660e:	4618      	mov	r0, r3
 8016610:	f7ff f825 	bl	801565e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	2b03      	cmp	r3, #3
 801661a:	d109      	bne.n	8016630 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	f103 0214 	add.w	r2, r3, #20
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	0c1b      	lsrs	r3, r3, #16
 8016626:	b29b      	uxth	r3, r3
 8016628:	4619      	mov	r1, r3
 801662a:	4610      	mov	r0, r2
 801662c:	f7ff f817 	bl	801565e <st_word>
	}
}
 8016630:	bf00      	nop
 8016632:	3710      	adds	r7, #16
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016638:	b590      	push	{r4, r7, lr}
 801663a:	b087      	sub	sp, #28
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	331a      	adds	r3, #26
 8016646:	4618      	mov	r0, r3
 8016648:	f7fe ffce 	bl	80155e8 <ld_word>
 801664c:	4603      	mov	r3, r0
 801664e:	2b00      	cmp	r3, #0
 8016650:	d001      	beq.n	8016656 <cmp_lfn+0x1e>
 8016652:	2300      	movs	r3, #0
 8016654:	e059      	b.n	801670a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801665e:	1e5a      	subs	r2, r3, #1
 8016660:	4613      	mov	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4413      	add	r3, r2
 801666a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801666c:	2301      	movs	r3, #1
 801666e:	81fb      	strh	r3, [r7, #14]
 8016670:	2300      	movs	r3, #0
 8016672:	613b      	str	r3, [r7, #16]
 8016674:	e033      	b.n	80166de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016676:	4a27      	ldr	r2, [pc, #156]	; (8016714 <cmp_lfn+0xdc>)
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	4413      	add	r3, r2
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	461a      	mov	r2, r3
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	4413      	add	r3, r2
 8016684:	4618      	mov	r0, r3
 8016686:	f7fe ffaf 	bl	80155e8 <ld_word>
 801668a:	4603      	mov	r3, r0
 801668c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801668e:	89fb      	ldrh	r3, [r7, #14]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d01a      	beq.n	80166ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	2bfe      	cmp	r3, #254	; 0xfe
 8016698:	d812      	bhi.n	80166c0 <cmp_lfn+0x88>
 801669a:	89bb      	ldrh	r3, [r7, #12]
 801669c:	4618      	mov	r0, r3
 801669e:	f002 f919 	bl	80188d4 <ff_wtoupper>
 80166a2:	4603      	mov	r3, r0
 80166a4:	461c      	mov	r4, r3
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	1c5a      	adds	r2, r3, #1
 80166aa:	617a      	str	r2, [r7, #20]
 80166ac:	005b      	lsls	r3, r3, #1
 80166ae:	687a      	ldr	r2, [r7, #4]
 80166b0:	4413      	add	r3, r2
 80166b2:	881b      	ldrh	r3, [r3, #0]
 80166b4:	4618      	mov	r0, r3
 80166b6:	f002 f90d 	bl	80188d4 <ff_wtoupper>
 80166ba:	4603      	mov	r3, r0
 80166bc:	429c      	cmp	r4, r3
 80166be:	d001      	beq.n	80166c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80166c0:	2300      	movs	r3, #0
 80166c2:	e022      	b.n	801670a <cmp_lfn+0xd2>
			}
			wc = uc;
 80166c4:	89bb      	ldrh	r3, [r7, #12]
 80166c6:	81fb      	strh	r3, [r7, #14]
 80166c8:	e006      	b.n	80166d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80166ca:	89bb      	ldrh	r3, [r7, #12]
 80166cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d001      	beq.n	80166d8 <cmp_lfn+0xa0>
 80166d4:	2300      	movs	r3, #0
 80166d6:	e018      	b.n	801670a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80166d8:	693b      	ldr	r3, [r7, #16]
 80166da:	3301      	adds	r3, #1
 80166dc:	613b      	str	r3, [r7, #16]
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	2b0c      	cmp	r3, #12
 80166e2:	d9c8      	bls.n	8016676 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00b      	beq.n	8016708 <cmp_lfn+0xd0>
 80166f0:	89fb      	ldrh	r3, [r7, #14]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d008      	beq.n	8016708 <cmp_lfn+0xd0>
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	4413      	add	r3, r2
 80166fe:	881b      	ldrh	r3, [r3, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d001      	beq.n	8016708 <cmp_lfn+0xd0>
 8016704:	2300      	movs	r3, #0
 8016706:	e000      	b.n	801670a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016708:	2301      	movs	r3, #1
}
 801670a:	4618      	mov	r0, r3
 801670c:	371c      	adds	r7, #28
 801670e:	46bd      	mov	sp, r7
 8016710:	bd90      	pop	{r4, r7, pc}
 8016712:	bf00      	nop
 8016714:	0801ffac 	.word	0x0801ffac

08016718 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b088      	sub	sp, #32
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	4611      	mov	r1, r2
 8016724:	461a      	mov	r2, r3
 8016726:	460b      	mov	r3, r1
 8016728:	71fb      	strb	r3, [r7, #7]
 801672a:	4613      	mov	r3, r2
 801672c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	330d      	adds	r3, #13
 8016732:	79ba      	ldrb	r2, [r7, #6]
 8016734:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	330b      	adds	r3, #11
 801673a:	220f      	movs	r2, #15
 801673c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	330c      	adds	r3, #12
 8016742:	2200      	movs	r2, #0
 8016744:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	331a      	adds	r3, #26
 801674a:	2100      	movs	r1, #0
 801674c:	4618      	mov	r0, r3
 801674e:	f7fe ff86 	bl	801565e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016752:	79fb      	ldrb	r3, [r7, #7]
 8016754:	1e5a      	subs	r2, r3, #1
 8016756:	4613      	mov	r3, r2
 8016758:	005b      	lsls	r3, r3, #1
 801675a:	4413      	add	r3, r2
 801675c:	009b      	lsls	r3, r3, #2
 801675e:	4413      	add	r3, r2
 8016760:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016762:	2300      	movs	r3, #0
 8016764:	82fb      	strh	r3, [r7, #22]
 8016766:	2300      	movs	r3, #0
 8016768:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801676a:	8afb      	ldrh	r3, [r7, #22]
 801676c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016770:	4293      	cmp	r3, r2
 8016772:	d007      	beq.n	8016784 <put_lfn+0x6c>
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	1c5a      	adds	r2, r3, #1
 8016778:	61fa      	str	r2, [r7, #28]
 801677a:	005b      	lsls	r3, r3, #1
 801677c:	68fa      	ldr	r2, [r7, #12]
 801677e:	4413      	add	r3, r2
 8016780:	881b      	ldrh	r3, [r3, #0]
 8016782:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016784:	4a17      	ldr	r2, [pc, #92]	; (80167e4 <put_lfn+0xcc>)
 8016786:	69bb      	ldr	r3, [r7, #24]
 8016788:	4413      	add	r3, r2
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	461a      	mov	r2, r3
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	4413      	add	r3, r2
 8016792:	8afa      	ldrh	r2, [r7, #22]
 8016794:	4611      	mov	r1, r2
 8016796:	4618      	mov	r0, r3
 8016798:	f7fe ff61 	bl	801565e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801679c:	8afb      	ldrh	r3, [r7, #22]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d102      	bne.n	80167a8 <put_lfn+0x90>
 80167a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	3301      	adds	r3, #1
 80167ac:	61bb      	str	r3, [r7, #24]
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	2b0c      	cmp	r3, #12
 80167b2:	d9da      	bls.n	801676a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80167b4:	8afb      	ldrh	r3, [r7, #22]
 80167b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167ba:	4293      	cmp	r3, r2
 80167bc:	d006      	beq.n	80167cc <put_lfn+0xb4>
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	005b      	lsls	r3, r3, #1
 80167c2:	68fa      	ldr	r2, [r7, #12]
 80167c4:	4413      	add	r3, r2
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d103      	bne.n	80167d4 <put_lfn+0xbc>
 80167cc:	79fb      	ldrb	r3, [r7, #7]
 80167ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	79fa      	ldrb	r2, [r7, #7]
 80167d8:	701a      	strb	r2, [r3, #0]
}
 80167da:	bf00      	nop
 80167dc:	3720      	adds	r7, #32
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	0801ffac 	.word	0x0801ffac

080167e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b08c      	sub	sp, #48	; 0x30
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	60b9      	str	r1, [r7, #8]
 80167f2:	607a      	str	r2, [r7, #4]
 80167f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80167f6:	220b      	movs	r2, #11
 80167f8:	68b9      	ldr	r1, [r7, #8]
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f7fe ff76 	bl	80156ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	2b05      	cmp	r3, #5
 8016804:	d92b      	bls.n	801685e <gen_numname+0x76>
		sr = seq;
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801680a:	e022      	b.n	8016852 <gen_numname+0x6a>
			wc = *lfn++;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	1c9a      	adds	r2, r3, #2
 8016810:	607a      	str	r2, [r7, #4]
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8016816:	2300      	movs	r3, #0
 8016818:	62bb      	str	r3, [r7, #40]	; 0x28
 801681a:	e017      	b.n	801684c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	005a      	lsls	r2, r3, #1
 8016820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016822:	f003 0301 	and.w	r3, r3, #1
 8016826:	4413      	add	r3, r2
 8016828:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801682a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801682c:	085b      	lsrs	r3, r3, #1
 801682e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016836:	2b00      	cmp	r3, #0
 8016838:	d005      	beq.n	8016846 <gen_numname+0x5e>
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016840:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016844:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016848:	3301      	adds	r3, #1
 801684a:	62bb      	str	r3, [r7, #40]	; 0x28
 801684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801684e:	2b0f      	cmp	r3, #15
 8016850:	d9e4      	bls.n	801681c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	881b      	ldrh	r3, [r3, #0]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d1d8      	bne.n	801680c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801685e:	2307      	movs	r3, #7
 8016860:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	b2db      	uxtb	r3, r3
 8016866:	f003 030f 	and.w	r3, r3, #15
 801686a:	b2db      	uxtb	r3, r3
 801686c:	3330      	adds	r3, #48	; 0x30
 801686e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016876:	2b39      	cmp	r3, #57	; 0x39
 8016878:	d904      	bls.n	8016884 <gen_numname+0x9c>
 801687a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801687e:	3307      	adds	r3, #7
 8016880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016886:	1e5a      	subs	r2, r3, #1
 8016888:	62ba      	str	r2, [r7, #40]	; 0x28
 801688a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801688e:	4413      	add	r3, r2
 8016890:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016894:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	091b      	lsrs	r3, r3, #4
 801689c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d1de      	bne.n	8016862 <gen_numname+0x7a>
	ns[i] = '~';
 80168a4:	f107 0214 	add.w	r2, r7, #20
 80168a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168aa:	4413      	add	r3, r2
 80168ac:	227e      	movs	r2, #126	; 0x7e
 80168ae:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80168b0:	2300      	movs	r3, #0
 80168b2:	627b      	str	r3, [r7, #36]	; 0x24
 80168b4:	e002      	b.n	80168bc <gen_numname+0xd4>
 80168b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b8:	3301      	adds	r3, #1
 80168ba:	627b      	str	r3, [r7, #36]	; 0x24
 80168bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d205      	bcs.n	80168d0 <gen_numname+0xe8>
 80168c4:	68fa      	ldr	r2, [r7, #12]
 80168c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c8:	4413      	add	r3, r2
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	2b20      	cmp	r3, #32
 80168ce:	d1f2      	bne.n	80168b6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80168d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d2:	2b07      	cmp	r3, #7
 80168d4:	d808      	bhi.n	80168e8 <gen_numname+0x100>
 80168d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d8:	1c5a      	adds	r2, r3, #1
 80168da:	62ba      	str	r2, [r7, #40]	; 0x28
 80168dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80168e0:	4413      	add	r3, r2
 80168e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80168e6:	e000      	b.n	80168ea <gen_numname+0x102>
 80168e8:	2120      	movs	r1, #32
 80168ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ec:	1c5a      	adds	r2, r3, #1
 80168ee:	627a      	str	r2, [r7, #36]	; 0x24
 80168f0:	68fa      	ldr	r2, [r7, #12]
 80168f2:	4413      	add	r3, r2
 80168f4:	460a      	mov	r2, r1
 80168f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80168f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fa:	2b07      	cmp	r3, #7
 80168fc:	d9e8      	bls.n	80168d0 <gen_numname+0xe8>
}
 80168fe:	bf00      	nop
 8016900:	bf00      	nop
 8016902:	3730      	adds	r7, #48	; 0x30
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016908:	b480      	push	{r7}
 801690a:	b085      	sub	sp, #20
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016910:	2300      	movs	r3, #0
 8016912:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016914:	230b      	movs	r3, #11
 8016916:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016918:	7bfb      	ldrb	r3, [r7, #15]
 801691a:	b2da      	uxtb	r2, r3
 801691c:	0852      	lsrs	r2, r2, #1
 801691e:	01db      	lsls	r3, r3, #7
 8016920:	4313      	orrs	r3, r2
 8016922:	b2da      	uxtb	r2, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	1c59      	adds	r1, r3, #1
 8016928:	6079      	str	r1, [r7, #4]
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	4413      	add	r3, r2
 801692e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	3b01      	subs	r3, #1
 8016934:	60bb      	str	r3, [r7, #8]
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d1ed      	bne.n	8016918 <sum_sfn+0x10>
	return sum;
 801693c:	7bfb      	ldrb	r3, [r7, #15]
}
 801693e:	4618      	mov	r0, r3
 8016940:	3714      	adds	r7, #20
 8016942:	46bd      	mov	sp, r7
 8016944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016948:	4770      	bx	lr

0801694a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801694a:	b580      	push	{r7, lr}
 801694c:	b086      	sub	sp, #24
 801694e:	af00      	add	r7, sp, #0
 8016950:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016958:	2100      	movs	r1, #0
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f7ff fca6 	bl	80162ac <dir_sdi>
 8016960:	4603      	mov	r3, r0
 8016962:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016964:	7dfb      	ldrb	r3, [r7, #23]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d001      	beq.n	801696e <dir_find+0x24>
 801696a:	7dfb      	ldrb	r3, [r7, #23]
 801696c:	e0a9      	b.n	8016ac2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801696e:	23ff      	movs	r3, #255	; 0xff
 8016970:	753b      	strb	r3, [r7, #20]
 8016972:	7d3b      	ldrb	r3, [r7, #20]
 8016974:	757b      	strb	r3, [r7, #21]
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f04f 32ff 	mov.w	r2, #4294967295
 801697c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	69db      	ldr	r3, [r3, #28]
 8016982:	4619      	mov	r1, r3
 8016984:	6938      	ldr	r0, [r7, #16]
 8016986:	f7ff f911 	bl	8015bac <move_window>
 801698a:	4603      	mov	r3, r0
 801698c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801698e:	7dfb      	ldrb	r3, [r7, #23]
 8016990:	2b00      	cmp	r3, #0
 8016992:	f040 8090 	bne.w	8016ab6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6a1b      	ldr	r3, [r3, #32]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801699e:	7dbb      	ldrb	r3, [r7, #22]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d102      	bne.n	80169aa <dir_find+0x60>
 80169a4:	2304      	movs	r3, #4
 80169a6:	75fb      	strb	r3, [r7, #23]
 80169a8:	e08a      	b.n	8016ac0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6a1b      	ldr	r3, [r3, #32]
 80169ae:	330b      	adds	r3, #11
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80169b6:	73fb      	strb	r3, [r7, #15]
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	7bfa      	ldrb	r2, [r7, #15]
 80169bc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80169be:	7dbb      	ldrb	r3, [r7, #22]
 80169c0:	2be5      	cmp	r3, #229	; 0xe5
 80169c2:	d007      	beq.n	80169d4 <dir_find+0x8a>
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
 80169c6:	f003 0308 	and.w	r3, r3, #8
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d009      	beq.n	80169e2 <dir_find+0x98>
 80169ce:	7bfb      	ldrb	r3, [r7, #15]
 80169d0:	2b0f      	cmp	r3, #15
 80169d2:	d006      	beq.n	80169e2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80169d4:	23ff      	movs	r3, #255	; 0xff
 80169d6:	757b      	strb	r3, [r7, #21]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f04f 32ff 	mov.w	r2, #4294967295
 80169de:	631a      	str	r2, [r3, #48]	; 0x30
 80169e0:	e05e      	b.n	8016aa0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80169e2:	7bfb      	ldrb	r3, [r7, #15]
 80169e4:	2b0f      	cmp	r3, #15
 80169e6:	d136      	bne.n	8016a56 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80169ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d154      	bne.n	8016aa0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80169f6:	7dbb      	ldrb	r3, [r7, #22]
 80169f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d00d      	beq.n	8016a1c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6a1b      	ldr	r3, [r3, #32]
 8016a04:	7b5b      	ldrb	r3, [r3, #13]
 8016a06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016a08:	7dbb      	ldrb	r3, [r7, #22]
 8016a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016a0e:	75bb      	strb	r3, [r7, #22]
 8016a10:	7dbb      	ldrb	r3, [r7, #22]
 8016a12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	695a      	ldr	r2, [r3, #20]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016a1c:	7dba      	ldrb	r2, [r7, #22]
 8016a1e:	7d7b      	ldrb	r3, [r7, #21]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d115      	bne.n	8016a50 <dir_find+0x106>
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6a1b      	ldr	r3, [r3, #32]
 8016a28:	330d      	adds	r3, #13
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	7d3a      	ldrb	r2, [r7, #20]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d10e      	bne.n	8016a50 <dir_find+0x106>
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	68da      	ldr	r2, [r3, #12]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	6a1b      	ldr	r3, [r3, #32]
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	4610      	mov	r0, r2
 8016a3e:	f7ff fdfb 	bl	8016638 <cmp_lfn>
 8016a42:	4603      	mov	r3, r0
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d003      	beq.n	8016a50 <dir_find+0x106>
 8016a48:	7d7b      	ldrb	r3, [r7, #21]
 8016a4a:	3b01      	subs	r3, #1
 8016a4c:	b2db      	uxtb	r3, r3
 8016a4e:	e000      	b.n	8016a52 <dir_find+0x108>
 8016a50:	23ff      	movs	r3, #255	; 0xff
 8016a52:	757b      	strb	r3, [r7, #21]
 8016a54:	e024      	b.n	8016aa0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016a56:	7d7b      	ldrb	r3, [r7, #21]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d109      	bne.n	8016a70 <dir_find+0x126>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6a1b      	ldr	r3, [r3, #32]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7ff ff51 	bl	8016908 <sum_sfn>
 8016a66:	4603      	mov	r3, r0
 8016a68:	461a      	mov	r2, r3
 8016a6a:	7d3b      	ldrb	r3, [r7, #20]
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d024      	beq.n	8016aba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016a76:	f003 0301 	and.w	r3, r3, #1
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d10a      	bne.n	8016a94 <dir_find+0x14a>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6a18      	ldr	r0, [r3, #32]
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	3324      	adds	r3, #36	; 0x24
 8016a86:	220b      	movs	r2, #11
 8016a88:	4619      	mov	r1, r3
 8016a8a:	f7fe fe6b 	bl	8015764 <mem_cmp>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d014      	beq.n	8016abe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016a94:	23ff      	movs	r3, #255	; 0xff
 8016a96:	757b      	strb	r3, [r7, #21]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016aa0:	2100      	movs	r1, #0
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f7ff fc7d 	bl	80163a2 <dir_next>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016aac:	7dfb      	ldrb	r3, [r7, #23]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f43f af65 	beq.w	801697e <dir_find+0x34>
 8016ab4:	e004      	b.n	8016ac0 <dir_find+0x176>
		if (res != FR_OK) break;
 8016ab6:	bf00      	nop
 8016ab8:	e002      	b.n	8016ac0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016aba:	bf00      	nop
 8016abc:	e000      	b.n	8016ac0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016abe:	bf00      	nop

	return res;
 8016ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3718      	adds	r7, #24
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}
	...

08016acc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b08c      	sub	sp, #48	; 0x30
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016ae0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d001      	beq.n	8016aec <dir_register+0x20>
 8016ae8:	2306      	movs	r3, #6
 8016aea:	e0e0      	b.n	8016cae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016aec:	2300      	movs	r3, #0
 8016aee:	627b      	str	r3, [r7, #36]	; 0x24
 8016af0:	e002      	b.n	8016af8 <dir_register+0x2c>
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	3301      	adds	r3, #1
 8016af6:	627b      	str	r3, [r7, #36]	; 0x24
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	68da      	ldr	r2, [r3, #12]
 8016afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afe:	005b      	lsls	r3, r3, #1
 8016b00:	4413      	add	r3, r2
 8016b02:	881b      	ldrh	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d1f4      	bne.n	8016af2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8016b0e:	f107 030c 	add.w	r3, r7, #12
 8016b12:	220c      	movs	r2, #12
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7fe fde9 	bl	80156ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8016b1a:	7dfb      	ldrb	r3, [r7, #23]
 8016b1c:	f003 0301 	and.w	r3, r3, #1
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d032      	beq.n	8016b8a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2240      	movs	r2, #64	; 0x40
 8016b28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b30:	e016      	b.n	8016b60 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	68da      	ldr	r2, [r3, #12]
 8016b3c:	f107 010c 	add.w	r1, r7, #12
 8016b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b42:	f7ff fe51 	bl	80167e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f7ff feff 	bl	801694a <dir_find>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8016b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8016b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b62:	2b63      	cmp	r3, #99	; 0x63
 8016b64:	d9e5      	bls.n	8016b32 <dir_register+0x66>
 8016b66:	e000      	b.n	8016b6a <dir_register+0x9e>
			if (res != FR_OK) break;
 8016b68:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8016b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b6c:	2b64      	cmp	r3, #100	; 0x64
 8016b6e:	d101      	bne.n	8016b74 <dir_register+0xa8>
 8016b70:	2307      	movs	r3, #7
 8016b72:	e09c      	b.n	8016cae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8016b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b78:	2b04      	cmp	r3, #4
 8016b7a:	d002      	beq.n	8016b82 <dir_register+0xb6>
 8016b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b80:	e095      	b.n	8016cae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8016b82:	7dfa      	ldrb	r2, [r7, #23]
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8016b8a:	7dfb      	ldrb	r3, [r7, #23]
 8016b8c:	f003 0302 	and.w	r3, r3, #2
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d007      	beq.n	8016ba4 <dir_register+0xd8>
 8016b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b96:	330c      	adds	r3, #12
 8016b98:	4a47      	ldr	r2, [pc, #284]	; (8016cb8 <dir_register+0x1ec>)
 8016b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8016b9e:	089b      	lsrs	r3, r3, #2
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	e000      	b.n	8016ba6 <dir_register+0xda>
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016ba8:	6a39      	ldr	r1, [r7, #32]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f7ff fcbe 	bl	801652c <dir_alloc>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d148      	bne.n	8016c50 <dir_register+0x184>
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	623b      	str	r3, [r7, #32]
 8016bc4:	6a3b      	ldr	r3, [r7, #32]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d042      	beq.n	8016c50 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	695a      	ldr	r2, [r3, #20]
 8016bce:	6a3b      	ldr	r3, [r7, #32]
 8016bd0:	015b      	lsls	r3, r3, #5
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f7ff fb68 	bl	80162ac <dir_sdi>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d132      	bne.n	8016c50 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	3324      	adds	r3, #36	; 0x24
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ff fe8a 	bl	8016908 <sum_sfn>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	69db      	ldr	r3, [r3, #28]
 8016bfc:	4619      	mov	r1, r3
 8016bfe:	69f8      	ldr	r0, [r7, #28]
 8016c00:	f7fe ffd4 	bl	8015bac <move_window>
 8016c04:	4603      	mov	r3, r0
 8016c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8016c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d11d      	bne.n	8016c4e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	68d8      	ldr	r0, [r3, #12]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6a19      	ldr	r1, [r3, #32]
 8016c1a:	6a3b      	ldr	r3, [r7, #32]
 8016c1c:	b2da      	uxtb	r2, r3
 8016c1e:	7efb      	ldrb	r3, [r7, #27]
 8016c20:	f7ff fd7a 	bl	8016718 <put_lfn>
				fs->wflag = 1;
 8016c24:	69fb      	ldr	r3, [r7, #28]
 8016c26:	2201      	movs	r2, #1
 8016c28:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8016c2a:	2100      	movs	r1, #0
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f7ff fbb8 	bl	80163a2 <dir_next>
 8016c32:	4603      	mov	r3, r0
 8016c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d107      	bne.n	8016c50 <dir_register+0x184>
 8016c40:	6a3b      	ldr	r3, [r7, #32]
 8016c42:	3b01      	subs	r3, #1
 8016c44:	623b      	str	r3, [r7, #32]
 8016c46:	6a3b      	ldr	r3, [r7, #32]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d1d5      	bne.n	8016bf8 <dir_register+0x12c>
 8016c4c:	e000      	b.n	8016c50 <dir_register+0x184>
				if (res != FR_OK) break;
 8016c4e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d128      	bne.n	8016caa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	69db      	ldr	r3, [r3, #28]
 8016c5c:	4619      	mov	r1, r3
 8016c5e:	69f8      	ldr	r0, [r7, #28]
 8016c60:	f7fe ffa4 	bl	8015bac <move_window>
 8016c64:	4603      	mov	r3, r0
 8016c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d11b      	bne.n	8016caa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a1b      	ldr	r3, [r3, #32]
 8016c76:	2220      	movs	r2, #32
 8016c78:	2100      	movs	r1, #0
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7fe fd57 	bl	801572e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6a18      	ldr	r0, [r3, #32]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	3324      	adds	r3, #36	; 0x24
 8016c88:	220b      	movs	r2, #11
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	f7fe fd2e 	bl	80156ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6a1b      	ldr	r3, [r3, #32]
 8016c9a:	330c      	adds	r3, #12
 8016c9c:	f002 0218 	and.w	r2, r2, #24
 8016ca0:	b2d2      	uxtb	r2, r2
 8016ca2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3730      	adds	r7, #48	; 0x30
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	4ec4ec4f 	.word	0x4ec4ec4f

08016cbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b08a      	sub	sp, #40	; 0x28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	613b      	str	r3, [r7, #16]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	68db      	ldr	r3, [r3, #12]
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	617b      	str	r3, [r7, #20]
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8016cdc:	69bb      	ldr	r3, [r7, #24]
 8016cde:	1c5a      	adds	r2, r3, #1
 8016ce0:	61ba      	str	r2, [r7, #24]
 8016ce2:	693a      	ldr	r2, [r7, #16]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8016cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cec:	2b1f      	cmp	r3, #31
 8016cee:	d940      	bls.n	8016d72 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8016cf4:	d006      	beq.n	8016d04 <create_name+0x48>
 8016cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8016cfa:	d110      	bne.n	8016d1e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016cfc:	e002      	b.n	8016d04 <create_name+0x48>
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	3301      	adds	r3, #1
 8016d02:	61bb      	str	r3, [r7, #24]
 8016d04:	693a      	ldr	r2, [r7, #16]
 8016d06:	69bb      	ldr	r3, [r7, #24]
 8016d08:	4413      	add	r3, r2
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8016d0e:	d0f6      	beq.n	8016cfe <create_name+0x42>
 8016d10:	693a      	ldr	r2, [r7, #16]
 8016d12:	69bb      	ldr	r3, [r7, #24]
 8016d14:	4413      	add	r3, r2
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	2b5c      	cmp	r3, #92	; 0x5c
 8016d1a:	d0f0      	beq.n	8016cfe <create_name+0x42>
			break;
 8016d1c:	e02a      	b.n	8016d74 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2bfe      	cmp	r3, #254	; 0xfe
 8016d22:	d901      	bls.n	8016d28 <create_name+0x6c>
 8016d24:	2306      	movs	r3, #6
 8016d26:	e177      	b.n	8017018 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d30:	2101      	movs	r1, #1
 8016d32:	4618      	mov	r0, r3
 8016d34:	f001 fd92 	bl	801885c <ff_convert>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d101      	bne.n	8016d46 <create_name+0x8a>
 8016d42:	2306      	movs	r3, #6
 8016d44:	e168      	b.n	8017018 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d48:	2b7f      	cmp	r3, #127	; 0x7f
 8016d4a:	d809      	bhi.n	8016d60 <create_name+0xa4>
 8016d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d4e:	4619      	mov	r1, r3
 8016d50:	48b3      	ldr	r0, [pc, #716]	; (8017020 <create_name+0x364>)
 8016d52:	f7fe fd2e 	bl	80157b2 <chk_chr>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <create_name+0xa4>
 8016d5c:	2306      	movs	r3, #6
 8016d5e:	e15b      	b.n	8017018 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8016d60:	697b      	ldr	r3, [r7, #20]
 8016d62:	1c5a      	adds	r2, r3, #1
 8016d64:	617a      	str	r2, [r7, #20]
 8016d66:	005b      	lsls	r3, r3, #1
 8016d68:	68fa      	ldr	r2, [r7, #12]
 8016d6a:	4413      	add	r3, r2
 8016d6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016d6e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8016d70:	e7b4      	b.n	8016cdc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8016d72:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8016d74:	693a      	ldr	r2, [r7, #16]
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	441a      	add	r2, r3
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d80:	2b1f      	cmp	r3, #31
 8016d82:	d801      	bhi.n	8016d88 <create_name+0xcc>
 8016d84:	2304      	movs	r3, #4
 8016d86:	e000      	b.n	8016d8a <create_name+0xce>
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016d8e:	e011      	b.n	8016db4 <create_name+0xf8>
		w = lfn[di - 1];
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016d96:	3b01      	subs	r3, #1
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	68fa      	ldr	r2, [r7, #12]
 8016d9c:	4413      	add	r3, r2
 8016d9e:	881b      	ldrh	r3, [r3, #0]
 8016da0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8016da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016da4:	2b20      	cmp	r3, #32
 8016da6:	d002      	beq.n	8016dae <create_name+0xf2>
 8016da8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016daa:	2b2e      	cmp	r3, #46	; 0x2e
 8016dac:	d106      	bne.n	8016dbc <create_name+0x100>
		di--;
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	3b01      	subs	r3, #1
 8016db2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1ea      	bne.n	8016d90 <create_name+0xd4>
 8016dba:	e000      	b.n	8016dbe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016dbc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	005b      	lsls	r3, r3, #1
 8016dc2:	68fa      	ldr	r2, [r7, #12]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d101      	bne.n	8016dd4 <create_name+0x118>
 8016dd0:	2306      	movs	r3, #6
 8016dd2:	e121      	b.n	8017018 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	3324      	adds	r3, #36	; 0x24
 8016dd8:	220b      	movs	r2, #11
 8016dda:	2120      	movs	r1, #32
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7fe fca6 	bl	801572e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016de2:	2300      	movs	r3, #0
 8016de4:	61bb      	str	r3, [r7, #24]
 8016de6:	e002      	b.n	8016dee <create_name+0x132>
 8016de8:	69bb      	ldr	r3, [r7, #24]
 8016dea:	3301      	adds	r3, #1
 8016dec:	61bb      	str	r3, [r7, #24]
 8016dee:	69bb      	ldr	r3, [r7, #24]
 8016df0:	005b      	lsls	r3, r3, #1
 8016df2:	68fa      	ldr	r2, [r7, #12]
 8016df4:	4413      	add	r3, r2
 8016df6:	881b      	ldrh	r3, [r3, #0]
 8016df8:	2b20      	cmp	r3, #32
 8016dfa:	d0f5      	beq.n	8016de8 <create_name+0x12c>
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	005b      	lsls	r3, r3, #1
 8016e00:	68fa      	ldr	r2, [r7, #12]
 8016e02:	4413      	add	r3, r2
 8016e04:	881b      	ldrh	r3, [r3, #0]
 8016e06:	2b2e      	cmp	r3, #46	; 0x2e
 8016e08:	d0ee      	beq.n	8016de8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d009      	beq.n	8016e24 <create_name+0x168>
 8016e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e14:	f043 0303 	orr.w	r3, r3, #3
 8016e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016e1c:	e002      	b.n	8016e24 <create_name+0x168>
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	617b      	str	r3, [r7, #20]
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d009      	beq.n	8016e3e <create_name+0x182>
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e30:	3b01      	subs	r3, #1
 8016e32:	005b      	lsls	r3, r3, #1
 8016e34:	68fa      	ldr	r2, [r7, #12]
 8016e36:	4413      	add	r3, r2
 8016e38:	881b      	ldrh	r3, [r3, #0]
 8016e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8016e3c:	d1ef      	bne.n	8016e1e <create_name+0x162>

	i = b = 0; ni = 8;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016e44:	2300      	movs	r3, #0
 8016e46:	623b      	str	r3, [r7, #32]
 8016e48:	2308      	movs	r3, #8
 8016e4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	1c5a      	adds	r2, r3, #1
 8016e50:	61ba      	str	r2, [r7, #24]
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	68fa      	ldr	r2, [r7, #12]
 8016e56:	4413      	add	r3, r2
 8016e58:	881b      	ldrh	r3, [r3, #0]
 8016e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f000 8090 	beq.w	8016f84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e66:	2b20      	cmp	r3, #32
 8016e68:	d006      	beq.n	8016e78 <create_name+0x1bc>
 8016e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8016e6e:	d10a      	bne.n	8016e86 <create_name+0x1ca>
 8016e70:	69ba      	ldr	r2, [r7, #24]
 8016e72:	697b      	ldr	r3, [r7, #20]
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d006      	beq.n	8016e86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e7c:	f043 0303 	orr.w	r3, r3, #3
 8016e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e84:	e07d      	b.n	8016f82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016e86:	6a3a      	ldr	r2, [r7, #32]
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d203      	bcs.n	8016e96 <create_name+0x1da>
 8016e8e:	69ba      	ldr	r2, [r7, #24]
 8016e90:	697b      	ldr	r3, [r7, #20]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d123      	bne.n	8016ede <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	2b0b      	cmp	r3, #11
 8016e9a:	d106      	bne.n	8016eaa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ea0:	f043 0303 	orr.w	r3, r3, #3
 8016ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ea8:	e06f      	b.n	8016f8a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016eaa:	69ba      	ldr	r2, [r7, #24]
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d005      	beq.n	8016ebe <create_name+0x202>
 8016eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016eb6:	f043 0303 	orr.w	r3, r3, #3
 8016eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016ebe:	69ba      	ldr	r2, [r7, #24]
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	d860      	bhi.n	8016f88 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	61bb      	str	r3, [r7, #24]
 8016eca:	2308      	movs	r3, #8
 8016ecc:	623b      	str	r3, [r7, #32]
 8016ece:	230b      	movs	r3, #11
 8016ed0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016edc:	e051      	b.n	8016f82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8016ee2:	d914      	bls.n	8016f0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ee6:	2100      	movs	r1, #0
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f001 fcb7 	bl	801885c <ff_convert>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d004      	beq.n	8016f02 <create_name+0x246>
 8016ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016efa:	3b80      	subs	r3, #128	; 0x80
 8016efc:	4a49      	ldr	r2, [pc, #292]	; (8017024 <create_name+0x368>)
 8016efe:	5cd3      	ldrb	r3, [r2, r3]
 8016f00:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f06:	f043 0302 	orr.w	r3, r3, #2
 8016f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d007      	beq.n	8016f24 <create_name+0x268>
 8016f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f16:	4619      	mov	r1, r3
 8016f18:	4843      	ldr	r0, [pc, #268]	; (8017028 <create_name+0x36c>)
 8016f1a:	f7fe fc4a 	bl	80157b2 <chk_chr>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d008      	beq.n	8016f36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016f24:	235f      	movs	r3, #95	; 0x5f
 8016f26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f2c:	f043 0303 	orr.w	r3, r3, #3
 8016f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f34:	e01b      	b.n	8016f6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f38:	2b40      	cmp	r3, #64	; 0x40
 8016f3a:	d909      	bls.n	8016f50 <create_name+0x294>
 8016f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f3e:	2b5a      	cmp	r3, #90	; 0x5a
 8016f40:	d806      	bhi.n	8016f50 <create_name+0x294>
					b |= 2;
 8016f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f46:	f043 0302 	orr.w	r3, r3, #2
 8016f4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f4e:	e00e      	b.n	8016f6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f52:	2b60      	cmp	r3, #96	; 0x60
 8016f54:	d90b      	bls.n	8016f6e <create_name+0x2b2>
 8016f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f58:	2b7a      	cmp	r3, #122	; 0x7a
 8016f5a:	d808      	bhi.n	8016f6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f60:	f043 0301 	orr.w	r3, r3, #1
 8016f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f6a:	3b20      	subs	r3, #32
 8016f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016f6e:	6a3b      	ldr	r3, [r7, #32]
 8016f70:	1c5a      	adds	r2, r3, #1
 8016f72:	623a      	str	r2, [r7, #32]
 8016f74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f76:	b2d1      	uxtb	r1, r2
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	4413      	add	r3, r2
 8016f7c:	460a      	mov	r2, r1
 8016f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016f82:	e763      	b.n	8016e4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016f84:	bf00      	nop
 8016f86:	e000      	b.n	8016f8a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8016f88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016f90:	2be5      	cmp	r3, #229	; 0xe5
 8016f92:	d103      	bne.n	8016f9c <create_name+0x2e0>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2205      	movs	r2, #5
 8016f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	2b08      	cmp	r3, #8
 8016fa0:	d104      	bne.n	8016fac <create_name+0x2f0>
 8016fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fb0:	f003 030c 	and.w	r3, r3, #12
 8016fb4:	2b0c      	cmp	r3, #12
 8016fb6:	d005      	beq.n	8016fc4 <create_name+0x308>
 8016fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fbc:	f003 0303 	and.w	r3, r3, #3
 8016fc0:	2b03      	cmp	r3, #3
 8016fc2:	d105      	bne.n	8016fd0 <create_name+0x314>
 8016fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc8:	f043 0302 	orr.w	r3, r3, #2
 8016fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fd4:	f003 0302 	and.w	r3, r3, #2
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d117      	bne.n	801700c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fe0:	f003 0303 	and.w	r3, r3, #3
 8016fe4:	2b01      	cmp	r3, #1
 8016fe6:	d105      	bne.n	8016ff4 <create_name+0x338>
 8016fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fec:	f043 0310 	orr.w	r3, r3, #16
 8016ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ff8:	f003 030c 	and.w	r3, r3, #12
 8016ffc:	2b04      	cmp	r3, #4
 8016ffe:	d105      	bne.n	801700c <create_name+0x350>
 8017000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017004:	f043 0308 	orr.w	r3, r3, #8
 8017008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017012:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8017016:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017018:	4618      	mov	r0, r3
 801701a:	3728      	adds	r7, #40	; 0x28
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	0801fe94 	.word	0x0801fe94
 8017024:	0801ff2c 	.word	0x0801ff2c
 8017028:	0801fea0 	.word	0x0801fea0

0801702c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801703a:	693b      	ldr	r3, [r7, #16]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017040:	e002      	b.n	8017048 <follow_path+0x1c>
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	3301      	adds	r3, #1
 8017046:	603b      	str	r3, [r7, #0]
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b2f      	cmp	r3, #47	; 0x2f
 801704e:	d0f8      	beq.n	8017042 <follow_path+0x16>
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	2b5c      	cmp	r3, #92	; 0x5c
 8017056:	d0f4      	beq.n	8017042 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017058:	693b      	ldr	r3, [r7, #16]
 801705a:	2200      	movs	r2, #0
 801705c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	2b1f      	cmp	r3, #31
 8017064:	d80a      	bhi.n	801707c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2280      	movs	r2, #128	; 0x80
 801706a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801706e:	2100      	movs	r1, #0
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f7ff f91b 	bl	80162ac <dir_sdi>
 8017076:	4603      	mov	r3, r0
 8017078:	75fb      	strb	r3, [r7, #23]
 801707a:	e043      	b.n	8017104 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801707c:	463b      	mov	r3, r7
 801707e:	4619      	mov	r1, r3
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f7ff fe1b 	bl	8016cbc <create_name>
 8017086:	4603      	mov	r3, r0
 8017088:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801708a:	7dfb      	ldrb	r3, [r7, #23]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d134      	bne.n	80170fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f7ff fc5a 	bl	801694a <dir_find>
 8017096:	4603      	mov	r3, r0
 8017098:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80170a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80170a2:	7dfb      	ldrb	r3, [r7, #23]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d00a      	beq.n	80170be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80170a8:	7dfb      	ldrb	r3, [r7, #23]
 80170aa:	2b04      	cmp	r3, #4
 80170ac:	d127      	bne.n	80170fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80170ae:	7afb      	ldrb	r3, [r7, #11]
 80170b0:	f003 0304 	and.w	r3, r3, #4
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d122      	bne.n	80170fe <follow_path+0xd2>
 80170b8:	2305      	movs	r3, #5
 80170ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80170bc:	e01f      	b.n	80170fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80170be:	7afb      	ldrb	r3, [r7, #11]
 80170c0:	f003 0304 	and.w	r3, r3, #4
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d11c      	bne.n	8017102 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	799b      	ldrb	r3, [r3, #6]
 80170cc:	f003 0310 	and.w	r3, r3, #16
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d102      	bne.n	80170da <follow_path+0xae>
				res = FR_NO_PATH; break;
 80170d4:	2305      	movs	r3, #5
 80170d6:	75fb      	strb	r3, [r7, #23]
 80170d8:	e014      	b.n	8017104 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170e8:	4413      	add	r3, r2
 80170ea:	4619      	mov	r1, r3
 80170ec:	68f8      	ldr	r0, [r7, #12]
 80170ee:	f7ff fa64 	bl	80165ba <ld_clust>
 80170f2:	4602      	mov	r2, r0
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80170f8:	e7c0      	b.n	801707c <follow_path+0x50>
			if (res != FR_OK) break;
 80170fa:	bf00      	nop
 80170fc:	e002      	b.n	8017104 <follow_path+0xd8>
				break;
 80170fe:	bf00      	nop
 8017100:	e000      	b.n	8017104 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017102:	bf00      	nop
			}
		}
	}

	return res;
 8017104:	7dfb      	ldrb	r3, [r7, #23]
}
 8017106:	4618      	mov	r0, r3
 8017108:	3718      	adds	r7, #24
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}

0801710e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801710e:	b480      	push	{r7}
 8017110:	b087      	sub	sp, #28
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017116:	f04f 33ff 	mov.w	r3, #4294967295
 801711a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d031      	beq.n	8017188 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	617b      	str	r3, [r7, #20]
 801712a:	e002      	b.n	8017132 <get_ldnumber+0x24>
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	3301      	adds	r3, #1
 8017130:	617b      	str	r3, [r7, #20]
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	2b1f      	cmp	r3, #31
 8017138:	d903      	bls.n	8017142 <get_ldnumber+0x34>
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	781b      	ldrb	r3, [r3, #0]
 801713e:	2b3a      	cmp	r3, #58	; 0x3a
 8017140:	d1f4      	bne.n	801712c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	781b      	ldrb	r3, [r3, #0]
 8017146:	2b3a      	cmp	r3, #58	; 0x3a
 8017148:	d11c      	bne.n	8017184 <get_ldnumber+0x76>
			tp = *path;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	1c5a      	adds	r2, r3, #1
 8017154:	60fa      	str	r2, [r7, #12]
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	3b30      	subs	r3, #48	; 0x30
 801715a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	2b09      	cmp	r3, #9
 8017160:	d80e      	bhi.n	8017180 <get_ldnumber+0x72>
 8017162:	68fa      	ldr	r2, [r7, #12]
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	429a      	cmp	r2, r3
 8017168:	d10a      	bne.n	8017180 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d107      	bne.n	8017180 <get_ldnumber+0x72>
					vol = (int)i;
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	3301      	adds	r3, #1
 8017178:	617b      	str	r3, [r7, #20]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	697a      	ldr	r2, [r7, #20]
 801717e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	e002      	b.n	801718a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017184:	2300      	movs	r3, #0
 8017186:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017188:	693b      	ldr	r3, [r7, #16]
}
 801718a:	4618      	mov	r0, r3
 801718c:	371c      	adds	r7, #28
 801718e:	46bd      	mov	sp, r7
 8017190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017194:	4770      	bx	lr
	...

08017198 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2200      	movs	r2, #0
 80171a6:	70da      	strb	r2, [r3, #3]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f04f 32ff 	mov.w	r2, #4294967295
 80171ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80171b0:	6839      	ldr	r1, [r7, #0]
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f7fe fcfa 	bl	8015bac <move_window>
 80171b8:	4603      	mov	r3, r0
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d001      	beq.n	80171c2 <check_fs+0x2a>
 80171be:	2304      	movs	r3, #4
 80171c0:	e038      	b.n	8017234 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	3338      	adds	r3, #56	; 0x38
 80171c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7fe fa0c 	bl	80155e8 <ld_word>
 80171d0:	4603      	mov	r3, r0
 80171d2:	461a      	mov	r2, r3
 80171d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80171d8:	429a      	cmp	r2, r3
 80171da:	d001      	beq.n	80171e0 <check_fs+0x48>
 80171dc:	2303      	movs	r3, #3
 80171de:	e029      	b.n	8017234 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80171e6:	2be9      	cmp	r3, #233	; 0xe9
 80171e8:	d009      	beq.n	80171fe <check_fs+0x66>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80171f0:	2beb      	cmp	r3, #235	; 0xeb
 80171f2:	d11e      	bne.n	8017232 <check_fs+0x9a>
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80171fa:	2b90      	cmp	r3, #144	; 0x90
 80171fc:	d119      	bne.n	8017232 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	3338      	adds	r3, #56	; 0x38
 8017202:	3336      	adds	r3, #54	; 0x36
 8017204:	4618      	mov	r0, r3
 8017206:	f7fe fa07 	bl	8015618 <ld_dword>
 801720a:	4603      	mov	r3, r0
 801720c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017210:	4a0a      	ldr	r2, [pc, #40]	; (801723c <check_fs+0xa4>)
 8017212:	4293      	cmp	r3, r2
 8017214:	d101      	bne.n	801721a <check_fs+0x82>
 8017216:	2300      	movs	r3, #0
 8017218:	e00c      	b.n	8017234 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	3338      	adds	r3, #56	; 0x38
 801721e:	3352      	adds	r3, #82	; 0x52
 8017220:	4618      	mov	r0, r3
 8017222:	f7fe f9f9 	bl	8015618 <ld_dword>
 8017226:	4603      	mov	r3, r0
 8017228:	4a05      	ldr	r2, [pc, #20]	; (8017240 <check_fs+0xa8>)
 801722a:	4293      	cmp	r3, r2
 801722c:	d101      	bne.n	8017232 <check_fs+0x9a>
 801722e:	2300      	movs	r3, #0
 8017230:	e000      	b.n	8017234 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017232:	2302      	movs	r3, #2
}
 8017234:	4618      	mov	r0, r3
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	00544146 	.word	0x00544146
 8017240:	33544146 	.word	0x33544146

08017244 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b096      	sub	sp, #88	; 0x58
 8017248:	af00      	add	r7, sp, #0
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	4613      	mov	r3, r2
 8017250:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	2200      	movs	r2, #0
 8017256:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017258:	68f8      	ldr	r0, [r7, #12]
 801725a:	f7ff ff58 	bl	801710e <get_ldnumber>
 801725e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017262:	2b00      	cmp	r3, #0
 8017264:	da01      	bge.n	801726a <find_volume+0x26>
 8017266:	230b      	movs	r3, #11
 8017268:	e236      	b.n	80176d8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801726a:	4aac      	ldr	r2, [pc, #688]	; (801751c <find_volume+0x2d8>)
 801726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017272:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017276:	2b00      	cmp	r3, #0
 8017278:	d101      	bne.n	801727e <find_volume+0x3a>
 801727a:	230c      	movs	r3, #12
 801727c:	e22c      	b.n	80176d8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801727e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017280:	f7fe fab2 	bl	80157e8 <lock_fs>
 8017284:	4603      	mov	r3, r0
 8017286:	2b00      	cmp	r3, #0
 8017288:	d101      	bne.n	801728e <find_volume+0x4a>
 801728a:	230f      	movs	r3, #15
 801728c:	e224      	b.n	80176d8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801728e:	68bb      	ldr	r3, [r7, #8]
 8017290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017292:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017294:	79fb      	ldrb	r3, [r7, #7]
 8017296:	f023 0301 	bic.w	r3, r3, #1
 801729a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d01a      	beq.n	80172da <find_volume+0x96>
		stat = disk_status(fs->drv);
 80172a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a6:	785b      	ldrb	r3, [r3, #1]
 80172a8:	4618      	mov	r0, r3
 80172aa:	f7fe f8ff 	bl	80154ac <disk_status>
 80172ae:	4603      	mov	r3, r0
 80172b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80172b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172b8:	f003 0301 	and.w	r3, r3, #1
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d10c      	bne.n	80172da <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80172c0:	79fb      	ldrb	r3, [r7, #7]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d007      	beq.n	80172d6 <find_volume+0x92>
 80172c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172ca:	f003 0304 	and.w	r3, r3, #4
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d001      	beq.n	80172d6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80172d2:	230a      	movs	r3, #10
 80172d4:	e200      	b.n	80176d8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80172d6:	2300      	movs	r3, #0
 80172d8:	e1fe      	b.n	80176d8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80172da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172dc:	2200      	movs	r2, #0
 80172de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80172e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172e2:	b2da      	uxtb	r2, r3
 80172e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80172e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ea:	785b      	ldrb	r3, [r3, #1]
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7fe f8f7 	bl	80154e0 <disk_initialize>
 80172f2:	4603      	mov	r3, r0
 80172f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80172f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172fc:	f003 0301 	and.w	r3, r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017304:	2303      	movs	r3, #3
 8017306:	e1e7      	b.n	80176d8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017308:	79fb      	ldrb	r3, [r7, #7]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d007      	beq.n	801731e <find_volume+0xda>
 801730e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017312:	f003 0304 	and.w	r3, r3, #4
 8017316:	2b00      	cmp	r3, #0
 8017318:	d001      	beq.n	801731e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801731a:	230a      	movs	r3, #10
 801731c:	e1dc      	b.n	80176d8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801731e:	2300      	movs	r3, #0
 8017320:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017326:	f7ff ff37 	bl	8017198 <check_fs>
 801732a:	4603      	mov	r3, r0
 801732c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017334:	2b02      	cmp	r3, #2
 8017336:	d14b      	bne.n	80173d0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017338:	2300      	movs	r3, #0
 801733a:	643b      	str	r3, [r7, #64]	; 0x40
 801733c:	e01f      	b.n	801737e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017340:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017346:	011b      	lsls	r3, r3, #4
 8017348:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801734c:	4413      	add	r3, r2
 801734e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017352:	3304      	adds	r3, #4
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d006      	beq.n	8017368 <find_volume+0x124>
 801735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801735c:	3308      	adds	r3, #8
 801735e:	4618      	mov	r0, r3
 8017360:	f7fe f95a 	bl	8015618 <ld_dword>
 8017364:	4602      	mov	r2, r0
 8017366:	e000      	b.n	801736a <find_volume+0x126>
 8017368:	2200      	movs	r2, #0
 801736a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017372:	440b      	add	r3, r1
 8017374:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801737a:	3301      	adds	r3, #1
 801737c:	643b      	str	r3, [r7, #64]	; 0x40
 801737e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017380:	2b03      	cmp	r3, #3
 8017382:	d9dc      	bls.n	801733e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017384:	2300      	movs	r3, #0
 8017386:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801738a:	2b00      	cmp	r3, #0
 801738c:	d002      	beq.n	8017394 <find_volume+0x150>
 801738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017390:	3b01      	subs	r3, #1
 8017392:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801739c:	4413      	add	r3, r2
 801739e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80173a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80173a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d005      	beq.n	80173b6 <find_volume+0x172>
 80173aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80173ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80173ae:	f7ff fef3 	bl	8017198 <check_fs>
 80173b2:	4603      	mov	r3, r0
 80173b4:	e000      	b.n	80173b8 <find_volume+0x174>
 80173b6:	2303      	movs	r3, #3
 80173b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80173bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173c0:	2b01      	cmp	r3, #1
 80173c2:	d905      	bls.n	80173d0 <find_volume+0x18c>
 80173c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173c6:	3301      	adds	r3, #1
 80173c8:	643b      	str	r3, [r7, #64]	; 0x40
 80173ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173cc:	2b03      	cmp	r3, #3
 80173ce:	d9e1      	bls.n	8017394 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80173d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173d4:	2b04      	cmp	r3, #4
 80173d6:	d101      	bne.n	80173dc <find_volume+0x198>
 80173d8:	2301      	movs	r3, #1
 80173da:	e17d      	b.n	80176d8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80173dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173e0:	2b01      	cmp	r3, #1
 80173e2:	d901      	bls.n	80173e8 <find_volume+0x1a4>
 80173e4:	230d      	movs	r3, #13
 80173e6:	e177      	b.n	80176d8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80173e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ea:	3338      	adds	r3, #56	; 0x38
 80173ec:	330b      	adds	r3, #11
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7fe f8fa 	bl	80155e8 <ld_word>
 80173f4:	4603      	mov	r3, r0
 80173f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80173fa:	d001      	beq.n	8017400 <find_volume+0x1bc>
 80173fc:	230d      	movs	r3, #13
 80173fe:	e16b      	b.n	80176d8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017402:	3338      	adds	r3, #56	; 0x38
 8017404:	3316      	adds	r3, #22
 8017406:	4618      	mov	r0, r3
 8017408:	f7fe f8ee 	bl	80155e8 <ld_word>
 801740c:	4603      	mov	r3, r0
 801740e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017412:	2b00      	cmp	r3, #0
 8017414:	d106      	bne.n	8017424 <find_volume+0x1e0>
 8017416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017418:	3338      	adds	r3, #56	; 0x38
 801741a:	3324      	adds	r3, #36	; 0x24
 801741c:	4618      	mov	r0, r3
 801741e:	f7fe f8fb 	bl	8015618 <ld_dword>
 8017422:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017428:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801742c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017432:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017436:	789b      	ldrb	r3, [r3, #2]
 8017438:	2b01      	cmp	r3, #1
 801743a:	d005      	beq.n	8017448 <find_volume+0x204>
 801743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801743e:	789b      	ldrb	r3, [r3, #2]
 8017440:	2b02      	cmp	r3, #2
 8017442:	d001      	beq.n	8017448 <find_volume+0x204>
 8017444:	230d      	movs	r3, #13
 8017446:	e147      	b.n	80176d8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801744a:	789b      	ldrb	r3, [r3, #2]
 801744c:	461a      	mov	r2, r3
 801744e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017450:	fb02 f303 	mul.w	r3, r2, r3
 8017454:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801745c:	b29a      	uxth	r2, r3
 801745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017460:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017464:	895b      	ldrh	r3, [r3, #10]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d008      	beq.n	801747c <find_volume+0x238>
 801746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801746c:	895b      	ldrh	r3, [r3, #10]
 801746e:	461a      	mov	r2, r3
 8017470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017472:	895b      	ldrh	r3, [r3, #10]
 8017474:	3b01      	subs	r3, #1
 8017476:	4013      	ands	r3, r2
 8017478:	2b00      	cmp	r3, #0
 801747a:	d001      	beq.n	8017480 <find_volume+0x23c>
 801747c:	230d      	movs	r3, #13
 801747e:	e12b      	b.n	80176d8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017482:	3338      	adds	r3, #56	; 0x38
 8017484:	3311      	adds	r3, #17
 8017486:	4618      	mov	r0, r3
 8017488:	f7fe f8ae 	bl	80155e8 <ld_word>
 801748c:	4603      	mov	r3, r0
 801748e:	461a      	mov	r2, r3
 8017490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017492:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017496:	891b      	ldrh	r3, [r3, #8]
 8017498:	f003 030f 	and.w	r3, r3, #15
 801749c:	b29b      	uxth	r3, r3
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d001      	beq.n	80174a6 <find_volume+0x262>
 80174a2:	230d      	movs	r3, #13
 80174a4:	e118      	b.n	80176d8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80174a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a8:	3338      	adds	r3, #56	; 0x38
 80174aa:	3313      	adds	r3, #19
 80174ac:	4618      	mov	r0, r3
 80174ae:	f7fe f89b 	bl	80155e8 <ld_word>
 80174b2:	4603      	mov	r3, r0
 80174b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80174b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d106      	bne.n	80174ca <find_volume+0x286>
 80174bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174be:	3338      	adds	r3, #56	; 0x38
 80174c0:	3320      	adds	r3, #32
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7fe f8a8 	bl	8015618 <ld_dword>
 80174c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80174ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174cc:	3338      	adds	r3, #56	; 0x38
 80174ce:	330e      	adds	r3, #14
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7fe f889 	bl	80155e8 <ld_word>
 80174d6:	4603      	mov	r3, r0
 80174d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80174da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d101      	bne.n	80174e4 <find_volume+0x2a0>
 80174e0:	230d      	movs	r3, #13
 80174e2:	e0f9      	b.n	80176d8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80174e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80174e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174e8:	4413      	add	r3, r2
 80174ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174ec:	8912      	ldrh	r2, [r2, #8]
 80174ee:	0912      	lsrs	r2, r2, #4
 80174f0:	b292      	uxth	r2, r2
 80174f2:	4413      	add	r3, r2
 80174f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80174f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80174f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d201      	bcs.n	8017502 <find_volume+0x2be>
 80174fe:	230d      	movs	r3, #13
 8017500:	e0ea      	b.n	80176d8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017506:	1ad3      	subs	r3, r2, r3
 8017508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801750a:	8952      	ldrh	r2, [r2, #10]
 801750c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017510:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017514:	2b00      	cmp	r3, #0
 8017516:	d103      	bne.n	8017520 <find_volume+0x2dc>
 8017518:	230d      	movs	r3, #13
 801751a:	e0dd      	b.n	80176d8 <find_volume+0x494>
 801751c:	20000650 	.word	0x20000650
		fmt = FS_FAT32;
 8017520:	2303      	movs	r3, #3
 8017522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017528:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801752c:	4293      	cmp	r3, r2
 801752e:	d802      	bhi.n	8017536 <find_volume+0x2f2>
 8017530:	2302      	movs	r3, #2
 8017532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017538:	f640 72f5 	movw	r2, #4085	; 0xff5
 801753c:	4293      	cmp	r3, r2
 801753e:	d802      	bhi.n	8017546 <find_volume+0x302>
 8017540:	2301      	movs	r3, #1
 8017542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017548:	1c9a      	adds	r2, r3, #2
 801754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801754c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017550:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017552:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017558:	441a      	add	r2, r3
 801755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801755c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801755e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017562:	441a      	add	r2, r3
 8017564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017566:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8017568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801756c:	2b03      	cmp	r3, #3
 801756e:	d11e      	bne.n	80175ae <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017572:	3338      	adds	r3, #56	; 0x38
 8017574:	332a      	adds	r3, #42	; 0x2a
 8017576:	4618      	mov	r0, r3
 8017578:	f7fe f836 	bl	80155e8 <ld_word>
 801757c:	4603      	mov	r3, r0
 801757e:	2b00      	cmp	r3, #0
 8017580:	d001      	beq.n	8017586 <find_volume+0x342>
 8017582:	230d      	movs	r3, #13
 8017584:	e0a8      	b.n	80176d8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017588:	891b      	ldrh	r3, [r3, #8]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d001      	beq.n	8017592 <find_volume+0x34e>
 801758e:	230d      	movs	r3, #13
 8017590:	e0a2      	b.n	80176d8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017594:	3338      	adds	r3, #56	; 0x38
 8017596:	332c      	adds	r3, #44	; 0x2c
 8017598:	4618      	mov	r0, r3
 801759a:	f7fe f83d 	bl	8015618 <ld_dword>
 801759e:	4602      	mov	r2, r0
 80175a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80175a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a6:	69db      	ldr	r3, [r3, #28]
 80175a8:	009b      	lsls	r3, r3, #2
 80175aa:	647b      	str	r3, [r7, #68]	; 0x44
 80175ac:	e01f      	b.n	80175ee <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80175ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b0:	891b      	ldrh	r3, [r3, #8]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d101      	bne.n	80175ba <find_volume+0x376>
 80175b6:	230d      	movs	r3, #13
 80175b8:	e08e      	b.n	80176d8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80175ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80175be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175c0:	441a      	add	r2, r3
 80175c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80175c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80175ca:	2b02      	cmp	r3, #2
 80175cc:	d103      	bne.n	80175d6 <find_volume+0x392>
 80175ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d0:	69db      	ldr	r3, [r3, #28]
 80175d2:	005b      	lsls	r3, r3, #1
 80175d4:	e00a      	b.n	80175ec <find_volume+0x3a8>
 80175d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d8:	69da      	ldr	r2, [r3, #28]
 80175da:	4613      	mov	r3, r2
 80175dc:	005b      	lsls	r3, r3, #1
 80175de:	4413      	add	r3, r2
 80175e0:	085a      	lsrs	r2, r3, #1
 80175e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175e4:	69db      	ldr	r3, [r3, #28]
 80175e6:	f003 0301 	and.w	r3, r3, #1
 80175ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80175ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80175ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f0:	6a1a      	ldr	r2, [r3, #32]
 80175f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80175f8:	0a5b      	lsrs	r3, r3, #9
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d201      	bcs.n	8017602 <find_volume+0x3be>
 80175fe:	230d      	movs	r3, #13
 8017600:	e06a      	b.n	80176d8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017604:	f04f 32ff 	mov.w	r2, #4294967295
 8017608:	619a      	str	r2, [r3, #24]
 801760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801760c:	699a      	ldr	r2, [r3, #24]
 801760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017610:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8017612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017614:	2280      	movs	r2, #128	; 0x80
 8017616:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801761c:	2b03      	cmp	r3, #3
 801761e:	d149      	bne.n	80176b4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017622:	3338      	adds	r3, #56	; 0x38
 8017624:	3330      	adds	r3, #48	; 0x30
 8017626:	4618      	mov	r0, r3
 8017628:	f7fd ffde 	bl	80155e8 <ld_word>
 801762c:	4603      	mov	r3, r0
 801762e:	2b01      	cmp	r3, #1
 8017630:	d140      	bne.n	80176b4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017634:	3301      	adds	r3, #1
 8017636:	4619      	mov	r1, r3
 8017638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801763a:	f7fe fab7 	bl	8015bac <move_window>
 801763e:	4603      	mov	r3, r0
 8017640:	2b00      	cmp	r3, #0
 8017642:	d137      	bne.n	80176b4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8017644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017646:	2200      	movs	r2, #0
 8017648:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801764c:	3338      	adds	r3, #56	; 0x38
 801764e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017652:	4618      	mov	r0, r3
 8017654:	f7fd ffc8 	bl	80155e8 <ld_word>
 8017658:	4603      	mov	r3, r0
 801765a:	461a      	mov	r2, r3
 801765c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017660:	429a      	cmp	r2, r3
 8017662:	d127      	bne.n	80176b4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017666:	3338      	adds	r3, #56	; 0x38
 8017668:	4618      	mov	r0, r3
 801766a:	f7fd ffd5 	bl	8015618 <ld_dword>
 801766e:	4603      	mov	r3, r0
 8017670:	4a1b      	ldr	r2, [pc, #108]	; (80176e0 <find_volume+0x49c>)
 8017672:	4293      	cmp	r3, r2
 8017674:	d11e      	bne.n	80176b4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017678:	3338      	adds	r3, #56	; 0x38
 801767a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801767e:	4618      	mov	r0, r3
 8017680:	f7fd ffca 	bl	8015618 <ld_dword>
 8017684:	4603      	mov	r3, r0
 8017686:	4a17      	ldr	r2, [pc, #92]	; (80176e4 <find_volume+0x4a0>)
 8017688:	4293      	cmp	r3, r2
 801768a:	d113      	bne.n	80176b4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801768e:	3338      	adds	r3, #56	; 0x38
 8017690:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017694:	4618      	mov	r0, r3
 8017696:	f7fd ffbf 	bl	8015618 <ld_dword>
 801769a:	4602      	mov	r2, r0
 801769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801769e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80176a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176a2:	3338      	adds	r3, #56	; 0x38
 80176a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7fd ffb5 	bl	8015618 <ld_dword>
 80176ae:	4602      	mov	r2, r0
 80176b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80176b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80176ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80176bc:	4b0a      	ldr	r3, [pc, #40]	; (80176e8 <find_volume+0x4a4>)
 80176be:	881b      	ldrh	r3, [r3, #0]
 80176c0:	3301      	adds	r3, #1
 80176c2:	b29a      	uxth	r2, r3
 80176c4:	4b08      	ldr	r3, [pc, #32]	; (80176e8 <find_volume+0x4a4>)
 80176c6:	801a      	strh	r2, [r3, #0]
 80176c8:	4b07      	ldr	r3, [pc, #28]	; (80176e8 <find_volume+0x4a4>)
 80176ca:	881a      	ldrh	r2, [r3, #0]
 80176cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80176d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80176d2:	f7fe fa03 	bl	8015adc <clear_lock>
#endif
	return FR_OK;
 80176d6:	2300      	movs	r3, #0
}
 80176d8:	4618      	mov	r0, r3
 80176da:	3758      	adds	r7, #88	; 0x58
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	41615252 	.word	0x41615252
 80176e4:	61417272 	.word	0x61417272
 80176e8:	20000654 	.word	0x20000654

080176ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b084      	sub	sp, #16
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
 80176f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80176f6:	2309      	movs	r3, #9
 80176f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d02e      	beq.n	801775e <validate+0x72>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d02a      	beq.n	801775e <validate+0x72>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d025      	beq.n	801775e <validate+0x72>
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	889a      	ldrh	r2, [r3, #4]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	88db      	ldrh	r3, [r3, #6]
 801771c:	429a      	cmp	r2, r3
 801771e:	d11e      	bne.n	801775e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	4618      	mov	r0, r3
 8017726:	f7fe f85f 	bl	80157e8 <lock_fs>
 801772a:	4603      	mov	r3, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	d014      	beq.n	801775a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	785b      	ldrb	r3, [r3, #1]
 8017736:	4618      	mov	r0, r3
 8017738:	f7fd feb8 	bl	80154ac <disk_status>
 801773c:	4603      	mov	r3, r0
 801773e:	f003 0301 	and.w	r3, r3, #1
 8017742:	2b00      	cmp	r3, #0
 8017744:	d102      	bne.n	801774c <validate+0x60>
				res = FR_OK;
 8017746:	2300      	movs	r3, #0
 8017748:	73fb      	strb	r3, [r7, #15]
 801774a:	e008      	b.n	801775e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2100      	movs	r1, #0
 8017752:	4618      	mov	r0, r3
 8017754:	f7fe f85e 	bl	8015814 <unlock_fs>
 8017758:	e001      	b.n	801775e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801775a:	230f      	movs	r3, #15
 801775c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801775e:	7bfb      	ldrb	r3, [r7, #15]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d102      	bne.n	801776a <validate+0x7e>
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	e000      	b.n	801776c <validate+0x80>
 801776a:	2300      	movs	r3, #0
 801776c:	683a      	ldr	r2, [r7, #0]
 801776e:	6013      	str	r3, [r2, #0]
	return res;
 8017770:	7bfb      	ldrb	r3, [r7, #15]
}
 8017772:	4618      	mov	r0, r3
 8017774:	3710      	adds	r7, #16
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
	...

0801777c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b088      	sub	sp, #32
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	4613      	mov	r3, r2
 8017788:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801778e:	f107 0310 	add.w	r3, r7, #16
 8017792:	4618      	mov	r0, r3
 8017794:	f7ff fcbb 	bl	801710e <get_ldnumber>
 8017798:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801779a:	69fb      	ldr	r3, [r7, #28]
 801779c:	2b00      	cmp	r3, #0
 801779e:	da01      	bge.n	80177a4 <f_mount+0x28>
 80177a0:	230b      	movs	r3, #11
 80177a2:	e048      	b.n	8017836 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80177a4:	4a26      	ldr	r2, [pc, #152]	; (8017840 <f_mount+0xc4>)
 80177a6:	69fb      	ldr	r3, [r7, #28]
 80177a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d00f      	beq.n	80177d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80177b4:	69b8      	ldr	r0, [r7, #24]
 80177b6:	f7fe f991 	bl	8015adc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	691b      	ldr	r3, [r3, #16]
 80177be:	4618      	mov	r0, r3
 80177c0:	f001 f931 	bl	8018a26 <ff_del_syncobj>
 80177c4:	4603      	mov	r3, r0
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d101      	bne.n	80177ce <f_mount+0x52>
 80177ca:	2302      	movs	r3, #2
 80177cc:	e033      	b.n	8017836 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80177ce:	69bb      	ldr	r3, [r7, #24]
 80177d0:	2200      	movs	r2, #0
 80177d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d00f      	beq.n	80177fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	2200      	movs	r2, #0
 80177de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	b2da      	uxtb	r2, r3
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	3310      	adds	r3, #16
 80177e8:	4619      	mov	r1, r3
 80177ea:	4610      	mov	r0, r2
 80177ec:	f001 f8fc 	bl	80189e8 <ff_cre_syncobj>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d101      	bne.n	80177fa <f_mount+0x7e>
 80177f6:	2302      	movs	r3, #2
 80177f8:	e01d      	b.n	8017836 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80177fa:	68fa      	ldr	r2, [r7, #12]
 80177fc:	4910      	ldr	r1, [pc, #64]	; (8017840 <f_mount+0xc4>)
 80177fe:	69fb      	ldr	r3, [r7, #28]
 8017800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d002      	beq.n	8017810 <f_mount+0x94>
 801780a:	79fb      	ldrb	r3, [r7, #7]
 801780c:	2b01      	cmp	r3, #1
 801780e:	d001      	beq.n	8017814 <f_mount+0x98>
 8017810:	2300      	movs	r3, #0
 8017812:	e010      	b.n	8017836 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017814:	f107 010c 	add.w	r1, r7, #12
 8017818:	f107 0308 	add.w	r3, r7, #8
 801781c:	2200      	movs	r2, #0
 801781e:	4618      	mov	r0, r3
 8017820:	f7ff fd10 	bl	8017244 <find_volume>
 8017824:	4603      	mov	r3, r0
 8017826:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	7dfa      	ldrb	r2, [r7, #23]
 801782c:	4611      	mov	r1, r2
 801782e:	4618      	mov	r0, r3
 8017830:	f7fd fff0 	bl	8015814 <unlock_fs>
 8017834:	7dfb      	ldrb	r3, [r7, #23]
}
 8017836:	4618      	mov	r0, r3
 8017838:	3720      	adds	r7, #32
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
 801783e:	bf00      	nop
 8017840:	20000650 	.word	0x20000650

08017844 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801784a:	af00      	add	r7, sp, #0
 801784c:	f107 030c 	add.w	r3, r7, #12
 8017850:	6018      	str	r0, [r3, #0]
 8017852:	f107 0308 	add.w	r3, r7, #8
 8017856:	6019      	str	r1, [r3, #0]
 8017858:	1dfb      	adds	r3, r7, #7
 801785a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801785c:	f107 030c 	add.w	r3, r7, #12
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d101      	bne.n	801786a <f_open+0x26>
 8017866:	2309      	movs	r3, #9
 8017868:	e239      	b.n	8017cde <f_open+0x49a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801786a:	1dfb      	adds	r3, r7, #7
 801786c:	1dfa      	adds	r2, r7, #7
 801786e:	7812      	ldrb	r2, [r2, #0]
 8017870:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8017874:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8017876:	1dfb      	adds	r3, r7, #7
 8017878:	781a      	ldrb	r2, [r3, #0]
 801787a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801787e:	f107 0308 	add.w	r3, r7, #8
 8017882:	4618      	mov	r0, r3
 8017884:	f7ff fcde 	bl	8017244 <find_volume>
 8017888:	4603      	mov	r3, r0
 801788a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801788e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017892:	2b00      	cmp	r3, #0
 8017894:	f040 8210 	bne.w	8017cb8 <f_open+0x474>
		dj.obj.fs = fs;
 8017898:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801789c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80178a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80178a4:	f107 0214 	add.w	r2, r7, #20
 80178a8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80178aa:	f107 0308 	add.w	r3, r7, #8
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80178b4:	4611      	mov	r1, r2
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7ff fbb8 	bl	801702c <follow_path>
 80178bc:	4603      	mov	r3, r0
 80178be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80178c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d11b      	bne.n	8017902 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80178ca:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80178ce:	b25b      	sxtb	r3, r3
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	da03      	bge.n	80178dc <f_open+0x98>
				res = FR_INVALID_NAME;
 80178d4:	2306      	movs	r3, #6
 80178d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80178da:	e012      	b.n	8017902 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80178dc:	1dfb      	adds	r3, r7, #7
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	f023 0301 	bic.w	r3, r3, #1
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	bf14      	ite	ne
 80178e8:	2301      	movne	r3, #1
 80178ea:	2300      	moveq	r3, #0
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	461a      	mov	r2, r3
 80178f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80178f4:	4611      	mov	r1, r2
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7fd ffa8 	bl	801584c <chk_lock>
 80178fc:	4603      	mov	r3, r0
 80178fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017902:	1dfb      	adds	r3, r7, #7
 8017904:	781b      	ldrb	r3, [r3, #0]
 8017906:	f003 031c 	and.w	r3, r3, #28
 801790a:	2b00      	cmp	r3, #0
 801790c:	f000 809b 	beq.w	8017a46 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8017910:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017914:	2b00      	cmp	r3, #0
 8017916:	d019      	beq.n	801794c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017918:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801791c:	2b04      	cmp	r3, #4
 801791e:	d10e      	bne.n	801793e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017920:	f7fd fff0 	bl	8015904 <enq_lock>
 8017924:	4603      	mov	r3, r0
 8017926:	2b00      	cmp	r3, #0
 8017928:	d006      	beq.n	8017938 <f_open+0xf4>
 801792a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801792e:	4618      	mov	r0, r3
 8017930:	f7ff f8cc 	bl	8016acc <dir_register>
 8017934:	4603      	mov	r3, r0
 8017936:	e000      	b.n	801793a <f_open+0xf6>
 8017938:	2312      	movs	r3, #18
 801793a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801793e:	1dfb      	adds	r3, r7, #7
 8017940:	1dfa      	adds	r2, r7, #7
 8017942:	7812      	ldrb	r2, [r2, #0]
 8017944:	f042 0208 	orr.w	r2, r2, #8
 8017948:	701a      	strb	r2, [r3, #0]
 801794a:	e012      	b.n	8017972 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801794c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8017950:	f003 0311 	and.w	r3, r3, #17
 8017954:	2b00      	cmp	r3, #0
 8017956:	d003      	beq.n	8017960 <f_open+0x11c>
					res = FR_DENIED;
 8017958:	2307      	movs	r3, #7
 801795a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801795e:	e008      	b.n	8017972 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017960:	1dfb      	adds	r3, r7, #7
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	f003 0304 	and.w	r3, r3, #4
 8017968:	2b00      	cmp	r3, #0
 801796a:	d002      	beq.n	8017972 <f_open+0x12e>
 801796c:	2308      	movs	r3, #8
 801796e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017972:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017976:	2b00      	cmp	r3, #0
 8017978:	f040 8082 	bne.w	8017a80 <f_open+0x23c>
 801797c:	1dfb      	adds	r3, r7, #7
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	f003 0308 	and.w	r3, r3, #8
 8017984:	2b00      	cmp	r3, #0
 8017986:	d07b      	beq.n	8017a80 <f_open+0x23c>
				dw = GET_FATTIME();
 8017988:	f7fd fd32 	bl	80153f0 <get_fattime>
 801798c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017990:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017994:	330e      	adds	r3, #14
 8017996:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801799a:	4618      	mov	r0, r3
 801799c:	f7fd fe7a 	bl	8015694 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80179a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80179a4:	3316      	adds	r3, #22
 80179a6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7fd fe72 	bl	8015694 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80179b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80179b4:	330b      	adds	r3, #11
 80179b6:	2220      	movs	r2, #32
 80179b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80179ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80179be:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80179c2:	4611      	mov	r1, r2
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7fe fdf8 	bl	80165ba <ld_clust>
 80179ca:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80179ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80179d2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80179d6:	2200      	movs	r2, #0
 80179d8:	4618      	mov	r0, r3
 80179da:	f7fe fe0d 	bl	80165f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80179de:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80179e2:	331c      	adds	r3, #28
 80179e4:	2100      	movs	r1, #0
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7fd fe54 	bl	8015694 <st_dword>
					fs->wflag = 1;
 80179ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80179f0:	2201      	movs	r2, #1
 80179f2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80179f4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d041      	beq.n	8017a80 <f_open+0x23c>
						dw = fs->winsect;
 80179fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a02:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8017a06:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7fe fb1a 	bl	801604a <remove_chain>
 8017a16:	4603      	mov	r3, r0
 8017a18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8017a1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d12d      	bne.n	8017a80 <f_open+0x23c>
							res = move_window(fs, dw);
 8017a24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017a28:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7fe f8bd 	bl	8015bac <move_window>
 8017a32:	4603      	mov	r3, r0
 8017a34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017a38:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017a3c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8017a40:	3a01      	subs	r2, #1
 8017a42:	615a      	str	r2, [r3, #20]
 8017a44:	e01c      	b.n	8017a80 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017a46:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d118      	bne.n	8017a80 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017a4e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8017a52:	f003 0310 	and.w	r3, r3, #16
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d003      	beq.n	8017a62 <f_open+0x21e>
					res = FR_NO_FILE;
 8017a5a:	2304      	movs	r3, #4
 8017a5c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8017a60:	e00e      	b.n	8017a80 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017a62:	1dfb      	adds	r3, r7, #7
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	f003 0302 	and.w	r3, r3, #2
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d008      	beq.n	8017a80 <f_open+0x23c>
 8017a6e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8017a72:	f003 0301 	and.w	r3, r3, #1
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d002      	beq.n	8017a80 <f_open+0x23c>
						res = FR_DENIED;
 8017a7a:	2307      	movs	r3, #7
 8017a7c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8017a80:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d136      	bne.n	8017af6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017a88:	1dfb      	adds	r3, r7, #7
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	f003 0308 	and.w	r3, r3, #8
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d005      	beq.n	8017aa0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8017a94:	1dfb      	adds	r3, r7, #7
 8017a96:	1dfa      	adds	r2, r7, #7
 8017a98:	7812      	ldrb	r2, [r2, #0]
 8017a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017a9e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017aa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017aa6:	f107 030c 	add.w	r3, r7, #12
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017aae:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8017ab2:	f107 030c 	add.w	r3, r7, #12
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017aba:	1dfb      	adds	r3, r7, #7
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	f023 0301 	bic.w	r3, r3, #1
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	bf14      	ite	ne
 8017ac6:	2301      	movne	r3, #1
 8017ac8:	2300      	moveq	r3, #0
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	461a      	mov	r2, r3
 8017ace:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017ad2:	4611      	mov	r1, r2
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7fd ff37 	bl	8015948 <inc_lock>
 8017ada:	4602      	mov	r2, r0
 8017adc:	f107 030c 	add.w	r3, r7, #12
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017ae4:	f107 030c 	add.w	r3, r7, #12
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	691b      	ldr	r3, [r3, #16]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d102      	bne.n	8017af6 <f_open+0x2b2>
 8017af0:	2302      	movs	r3, #2
 8017af2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017af6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f040 80dc 	bne.w	8017cb8 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017b00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017b04:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8017b08:	4611      	mov	r1, r2
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7fe fd55 	bl	80165ba <ld_clust>
 8017b10:	4602      	mov	r2, r0
 8017b12:	f107 030c 	add.w	r3, r7, #12
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017b1a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017b1e:	331c      	adds	r3, #28
 8017b20:	4618      	mov	r0, r3
 8017b22:	f7fd fd79 	bl	8015618 <ld_dword>
 8017b26:	4602      	mov	r2, r0
 8017b28:	f107 030c 	add.w	r3, r7, #12
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017b30:	f107 030c 	add.w	r3, r7, #12
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	2200      	movs	r2, #0
 8017b38:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017b3a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8017b3e:	f107 030c 	add.w	r3, r7, #12
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8017b46:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017b4a:	88da      	ldrh	r2, [r3, #6]
 8017b4c:	f107 030c 	add.w	r3, r7, #12
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017b54:	f107 030c 	add.w	r3, r7, #12
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	1dfa      	adds	r2, r7, #7
 8017b5c:	7812      	ldrb	r2, [r2, #0]
 8017b5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8017b60:	f107 030c 	add.w	r3, r7, #12
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	2200      	movs	r2, #0
 8017b68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017b6a:	f107 030c 	add.w	r3, r7, #12
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	2200      	movs	r2, #0
 8017b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017b74:	f107 030c 	add.w	r3, r7, #12
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8017b7e:	f107 030c 	add.w	r3, r7, #12
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	3330      	adds	r3, #48	; 0x30
 8017b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7fd fdce 	bl	801572e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8017b92:	1dfb      	adds	r3, r7, #7
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	f003 0320 	and.w	r3, r3, #32
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	f000 808c 	beq.w	8017cb8 <f_open+0x474>
 8017ba0:	f107 030c 	add.w	r3, r7, #12
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	f000 8085 	beq.w	8017cb8 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017bae:	f107 030c 	add.w	r3, r7, #12
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	68da      	ldr	r2, [r3, #12]
 8017bb6:	f107 030c 	add.w	r3, r7, #12
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017bbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017bc2:	895b      	ldrh	r3, [r3, #10]
 8017bc4:	025b      	lsls	r3, r3, #9
 8017bc6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017bca:	f107 030c 	add.w	r3, r7, #12
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	689b      	ldr	r3, [r3, #8]
 8017bd2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017bd6:	f107 030c 	add.w	r3, r7, #12
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	68db      	ldr	r3, [r3, #12]
 8017bde:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8017be2:	e01f      	b.n	8017c24 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8017be4:	f107 030c 	add.w	r3, r7, #12
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fe f897 	bl	8015d22 <get_fat>
 8017bf4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8017bf8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d802      	bhi.n	8017c06 <f_open+0x3c2>
 8017c00:	2302      	movs	r3, #2
 8017c02:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017c06:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8017c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c0e:	d102      	bne.n	8017c16 <f_open+0x3d2>
 8017c10:	2301      	movs	r3, #1
 8017c12:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017c16:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8017c1a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8017c1e:	1ad3      	subs	r3, r2, r3
 8017c20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8017c24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d105      	bne.n	8017c38 <f_open+0x3f4>
 8017c2c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8017c30:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d8d5      	bhi.n	8017be4 <f_open+0x3a0>
				}
				fp->clust = clst;
 8017c38:	f107 030c 	add.w	r3, r7, #12
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8017c42:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017c44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d135      	bne.n	8017cb8 <f_open+0x474>
 8017c4c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8017c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d02f      	beq.n	8017cb8 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017c58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017c5c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017c60:	4618      	mov	r0, r3
 8017c62:	f7fe f83f 	bl	8015ce4 <clust2sect>
 8017c66:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8017c6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d103      	bne.n	8017c7a <f_open+0x436>
						res = FR_INT_ERR;
 8017c72:	2302      	movs	r3, #2
 8017c74:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8017c78:	e01e      	b.n	8017cb8 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017c7a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8017c7e:	0a5a      	lsrs	r2, r3, #9
 8017c80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8017c84:	441a      	add	r2, r3
 8017c86:	f107 030c 	add.w	r3, r7, #12
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017c8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017c92:	7858      	ldrb	r0, [r3, #1]
 8017c94:	f107 030c 	add.w	r3, r7, #12
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017c9e:	f107 030c 	add.w	r3, r7, #12
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	6a1a      	ldr	r2, [r3, #32]
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	f7fd fc40 	bl	801552c <disk_read>
 8017cac:	4603      	mov	r3, r0
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d002      	beq.n	8017cb8 <f_open+0x474>
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017cb8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d004      	beq.n	8017cca <f_open+0x486>
 8017cc0:	f107 030c 	add.w	r3, r7, #12
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017cca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8017cce:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8017cd2:	4611      	mov	r1, r2
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7fd fd9d 	bl	8015814 <unlock_fs>
 8017cda:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b08e      	sub	sp, #56	; 0x38
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	60f8      	str	r0, [r7, #12]
 8017cf0:	60b9      	str	r1, [r7, #8]
 8017cf2:	607a      	str	r2, [r7, #4]
 8017cf4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	f107 0214 	add.w	r2, r7, #20
 8017d06:	4611      	mov	r1, r2
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7ff fcef 	bl	80176ec <validate>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d107      	bne.n	8017d2c <f_read+0x44>
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	7d5b      	ldrb	r3, [r3, #21]
 8017d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d009      	beq.n	8017d40 <f_read+0x58>
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017d32:	4611      	mov	r1, r2
 8017d34:	4618      	mov	r0, r3
 8017d36:	f7fd fd6d 	bl	8015814 <unlock_fs>
 8017d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017d3e:	e13d      	b.n	8017fbc <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	7d1b      	ldrb	r3, [r3, #20]
 8017d44:	f003 0301 	and.w	r3, r3, #1
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d106      	bne.n	8017d5a <f_read+0x72>
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	2107      	movs	r1, #7
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7fd fd5f 	bl	8015814 <unlock_fs>
 8017d56:	2307      	movs	r3, #7
 8017d58:	e130      	b.n	8017fbc <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	68da      	ldr	r2, [r3, #12]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	699b      	ldr	r3, [r3, #24]
 8017d62:	1ad3      	subs	r3, r2, r3
 8017d64:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	6a3b      	ldr	r3, [r7, #32]
 8017d6a:	429a      	cmp	r2, r3
 8017d6c:	f240 811c 	bls.w	8017fa8 <f_read+0x2c0>
 8017d70:	6a3b      	ldr	r3, [r7, #32]
 8017d72:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017d74:	e118      	b.n	8017fa8 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	699b      	ldr	r3, [r3, #24]
 8017d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	f040 80e4 	bne.w	8017f4c <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	699b      	ldr	r3, [r3, #24]
 8017d88:	0a5b      	lsrs	r3, r3, #9
 8017d8a:	697a      	ldr	r2, [r7, #20]
 8017d8c:	8952      	ldrh	r2, [r2, #10]
 8017d8e:	3a01      	subs	r2, #1
 8017d90:	4013      	ands	r3, r2
 8017d92:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d139      	bne.n	8017e0e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	699b      	ldr	r3, [r3, #24]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d103      	bne.n	8017daa <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	689b      	ldr	r3, [r3, #8]
 8017da6:	633b      	str	r3, [r7, #48]	; 0x30
 8017da8:	e013      	b.n	8017dd2 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d007      	beq.n	8017dc2 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	699b      	ldr	r3, [r3, #24]
 8017db6:	4619      	mov	r1, r3
 8017db8:	68f8      	ldr	r0, [r7, #12]
 8017dba:	f7fe fa43 	bl	8016244 <clmt_clust>
 8017dbe:	6338      	str	r0, [r7, #48]	; 0x30
 8017dc0:	e007      	b.n	8017dd2 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017dc2:	68fa      	ldr	r2, [r7, #12]
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	69db      	ldr	r3, [r3, #28]
 8017dc8:	4619      	mov	r1, r3
 8017dca:	4610      	mov	r0, r2
 8017dcc:	f7fd ffa9 	bl	8015d22 <get_fat>
 8017dd0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd4:	2b01      	cmp	r3, #1
 8017dd6:	d809      	bhi.n	8017dec <f_read+0x104>
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	2202      	movs	r2, #2
 8017ddc:	755a      	strb	r2, [r3, #21]
 8017dde:	697b      	ldr	r3, [r7, #20]
 8017de0:	2102      	movs	r1, #2
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7fd fd16 	bl	8015814 <unlock_fs>
 8017de8:	2302      	movs	r3, #2
 8017dea:	e0e7      	b.n	8017fbc <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017df2:	d109      	bne.n	8017e08 <f_read+0x120>
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	2201      	movs	r2, #1
 8017df8:	755a      	strb	r2, [r3, #21]
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	2101      	movs	r1, #1
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7fd fd08 	bl	8015814 <unlock_fs>
 8017e04:	2301      	movs	r3, #1
 8017e06:	e0d9      	b.n	8017fbc <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e0c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017e0e:	697a      	ldr	r2, [r7, #20]
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	69db      	ldr	r3, [r3, #28]
 8017e14:	4619      	mov	r1, r3
 8017e16:	4610      	mov	r0, r2
 8017e18:	f7fd ff64 	bl	8015ce4 <clust2sect>
 8017e1c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017e1e:	69bb      	ldr	r3, [r7, #24]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d109      	bne.n	8017e38 <f_read+0x150>
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	2202      	movs	r2, #2
 8017e28:	755a      	strb	r2, [r3, #21]
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	2102      	movs	r1, #2
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7fd fcf0 	bl	8015814 <unlock_fs>
 8017e34:	2302      	movs	r3, #2
 8017e36:	e0c1      	b.n	8017fbc <f_read+0x2d4>
			sect += csect;
 8017e38:	69ba      	ldr	r2, [r7, #24]
 8017e3a:	69fb      	ldr	r3, [r7, #28]
 8017e3c:	4413      	add	r3, r2
 8017e3e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	0a5b      	lsrs	r3, r3, #9
 8017e44:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d03e      	beq.n	8017eca <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017e4c:	69fa      	ldr	r2, [r7, #28]
 8017e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e50:	4413      	add	r3, r2
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	8952      	ldrh	r2, [r2, #10]
 8017e56:	4293      	cmp	r3, r2
 8017e58:	d905      	bls.n	8017e66 <f_read+0x17e>
					cc = fs->csize - csect;
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	895b      	ldrh	r3, [r3, #10]
 8017e5e:	461a      	mov	r2, r3
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	1ad3      	subs	r3, r2, r3
 8017e64:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017e66:	697b      	ldr	r3, [r7, #20]
 8017e68:	7858      	ldrb	r0, [r3, #1]
 8017e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6c:	69ba      	ldr	r2, [r7, #24]
 8017e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e70:	f7fd fb5c 	bl	801552c <disk_read>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d009      	beq.n	8017e8e <f_read+0x1a6>
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	755a      	strb	r2, [r3, #21]
 8017e80:	697b      	ldr	r3, [r7, #20]
 8017e82:	2101      	movs	r1, #1
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7fd fcc5 	bl	8015814 <unlock_fs>
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	e096      	b.n	8017fbc <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	7d1b      	ldrb	r3, [r3, #20]
 8017e92:	b25b      	sxtb	r3, r3
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	da14      	bge.n	8017ec2 <f_read+0x1da>
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	6a1a      	ldr	r2, [r3, #32]
 8017e9c:	69bb      	ldr	r3, [r7, #24]
 8017e9e:	1ad3      	subs	r3, r2, r3
 8017ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d90d      	bls.n	8017ec2 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	6a1a      	ldr	r2, [r3, #32]
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	1ad3      	subs	r3, r2, r3
 8017eae:	025b      	lsls	r3, r3, #9
 8017eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eb2:	18d0      	adds	r0, r2, r3
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	3330      	adds	r3, #48	; 0x30
 8017eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	f7fd fc15 	bl	80156ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec4:	025b      	lsls	r3, r3, #9
 8017ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017ec8:	e05a      	b.n	8017f80 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	6a1b      	ldr	r3, [r3, #32]
 8017ece:	69ba      	ldr	r2, [r7, #24]
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d038      	beq.n	8017f46 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	7d1b      	ldrb	r3, [r3, #20]
 8017ed8:	b25b      	sxtb	r3, r3
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	da1d      	bge.n	8017f1a <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	7858      	ldrb	r0, [r3, #1]
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	6a1a      	ldr	r2, [r3, #32]
 8017eec:	2301      	movs	r3, #1
 8017eee:	f7fd fb3d 	bl	801556c <disk_write>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d009      	beq.n	8017f0c <f_read+0x224>
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	2201      	movs	r2, #1
 8017efc:	755a      	strb	r2, [r3, #21]
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	2101      	movs	r1, #1
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7fd fc86 	bl	8015814 <unlock_fs>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	e057      	b.n	8017fbc <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	7d1b      	ldrb	r3, [r3, #20]
 8017f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017f14:	b2da      	uxtb	r2, r3
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	7858      	ldrb	r0, [r3, #1]
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017f24:	2301      	movs	r3, #1
 8017f26:	69ba      	ldr	r2, [r7, #24]
 8017f28:	f7fd fb00 	bl	801552c <disk_read>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d009      	beq.n	8017f46 <f_read+0x25e>
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	2201      	movs	r2, #1
 8017f36:	755a      	strb	r2, [r3, #21]
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	2101      	movs	r1, #1
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7fd fc69 	bl	8015814 <unlock_fs>
 8017f42:	2301      	movs	r3, #1
 8017f44:	e03a      	b.n	8017fbc <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	69ba      	ldr	r2, [r7, #24]
 8017f4a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	699b      	ldr	r3, [r3, #24]
 8017f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017f58:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d901      	bls.n	8017f66 <f_read+0x27e>
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	699b      	ldr	r3, [r3, #24]
 8017f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f74:	4413      	add	r3, r2
 8017f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f78:	4619      	mov	r1, r3
 8017f7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f7c:	f7fd fbb6 	bl	80156ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f84:	4413      	add	r3, r2
 8017f86:	627b      	str	r3, [r7, #36]	; 0x24
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	699a      	ldr	r2, [r3, #24]
 8017f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f8e:	441a      	add	r2, r3
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	619a      	str	r2, [r3, #24]
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f9a:	441a      	add	r2, r3
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	601a      	str	r2, [r3, #0]
 8017fa0:	687a      	ldr	r2, [r7, #4]
 8017fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa4:	1ad3      	subs	r3, r2, r3
 8017fa6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f47f aee3 	bne.w	8017d76 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017fb0:	697b      	ldr	r3, [r7, #20]
 8017fb2:	2100      	movs	r1, #0
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7fd fc2d 	bl	8015814 <unlock_fs>
 8017fba:	2300      	movs	r3, #0
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3738      	adds	r7, #56	; 0x38
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b08c      	sub	sp, #48	; 0x30
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	60b9      	str	r1, [r7, #8]
 8017fce:	607a      	str	r2, [r7, #4]
 8017fd0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	f107 0210 	add.w	r2, r7, #16
 8017fe2:	4611      	mov	r1, r2
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7ff fb81 	bl	80176ec <validate>
 8017fea:	4603      	mov	r3, r0
 8017fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d107      	bne.n	8018008 <f_write+0x44>
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	7d5b      	ldrb	r3, [r3, #21]
 8017ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018004:	2b00      	cmp	r3, #0
 8018006:	d009      	beq.n	801801c <f_write+0x58>
 8018008:	693b      	ldr	r3, [r7, #16]
 801800a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801800e:	4611      	mov	r1, r2
 8018010:	4618      	mov	r0, r3
 8018012:	f7fd fbff 	bl	8015814 <unlock_fs>
 8018016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801801a:	e173      	b.n	8018304 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	7d1b      	ldrb	r3, [r3, #20]
 8018020:	f003 0302 	and.w	r3, r3, #2
 8018024:	2b00      	cmp	r3, #0
 8018026:	d106      	bne.n	8018036 <f_write+0x72>
 8018028:	693b      	ldr	r3, [r7, #16]
 801802a:	2107      	movs	r1, #7
 801802c:	4618      	mov	r0, r3
 801802e:	f7fd fbf1 	bl	8015814 <unlock_fs>
 8018032:	2307      	movs	r3, #7
 8018034:	e166      	b.n	8018304 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	699a      	ldr	r2, [r3, #24]
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	441a      	add	r2, r3
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	699b      	ldr	r3, [r3, #24]
 8018042:	429a      	cmp	r2, r3
 8018044:	f080 814b 	bcs.w	80182de <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	699b      	ldr	r3, [r3, #24]
 801804c:	43db      	mvns	r3, r3
 801804e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018050:	e145      	b.n	80182de <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	699b      	ldr	r3, [r3, #24]
 8018056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801805a:	2b00      	cmp	r3, #0
 801805c:	f040 8101 	bne.w	8018262 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	699b      	ldr	r3, [r3, #24]
 8018064:	0a5b      	lsrs	r3, r3, #9
 8018066:	693a      	ldr	r2, [r7, #16]
 8018068:	8952      	ldrh	r2, [r2, #10]
 801806a:	3a01      	subs	r2, #1
 801806c:	4013      	ands	r3, r2
 801806e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018070:	69bb      	ldr	r3, [r7, #24]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d14d      	bne.n	8018112 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	699b      	ldr	r3, [r3, #24]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d10c      	bne.n	8018098 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	689b      	ldr	r3, [r3, #8]
 8018082:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018086:	2b00      	cmp	r3, #0
 8018088:	d11a      	bne.n	80180c0 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	2100      	movs	r1, #0
 801808e:	4618      	mov	r0, r3
 8018090:	f7fe f840 	bl	8016114 <create_chain>
 8018094:	62b8      	str	r0, [r7, #40]	; 0x28
 8018096:	e013      	b.n	80180c0 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801809c:	2b00      	cmp	r3, #0
 801809e:	d007      	beq.n	80180b0 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	699b      	ldr	r3, [r3, #24]
 80180a4:	4619      	mov	r1, r3
 80180a6:	68f8      	ldr	r0, [r7, #12]
 80180a8:	f7fe f8cc 	bl	8016244 <clmt_clust>
 80180ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80180ae:	e007      	b.n	80180c0 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80180b0:	68fa      	ldr	r2, [r7, #12]
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	69db      	ldr	r3, [r3, #28]
 80180b6:	4619      	mov	r1, r3
 80180b8:	4610      	mov	r0, r2
 80180ba:	f7fe f82b 	bl	8016114 <create_chain>
 80180be:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80180c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	f000 8110 	beq.w	80182e8 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80180c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ca:	2b01      	cmp	r3, #1
 80180cc:	d109      	bne.n	80180e2 <f_write+0x11e>
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2202      	movs	r2, #2
 80180d2:	755a      	strb	r2, [r3, #21]
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	2102      	movs	r1, #2
 80180d8:	4618      	mov	r0, r3
 80180da:	f7fd fb9b 	bl	8015814 <unlock_fs>
 80180de:	2302      	movs	r3, #2
 80180e0:	e110      	b.n	8018304 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80180e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180e8:	d109      	bne.n	80180fe <f_write+0x13a>
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	2201      	movs	r2, #1
 80180ee:	755a      	strb	r2, [r3, #21]
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	2101      	movs	r1, #1
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7fd fb8d 	bl	8015814 <unlock_fs>
 80180fa:	2301      	movs	r3, #1
 80180fc:	e102      	b.n	8018304 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018102:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	689b      	ldr	r3, [r3, #8]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d102      	bne.n	8018112 <f_write+0x14e>
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018110:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	7d1b      	ldrb	r3, [r3, #20]
 8018116:	b25b      	sxtb	r3, r3
 8018118:	2b00      	cmp	r3, #0
 801811a:	da1d      	bge.n	8018158 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	7858      	ldrb	r0, [r3, #1]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	6a1a      	ldr	r2, [r3, #32]
 801812a:	2301      	movs	r3, #1
 801812c:	f7fd fa1e 	bl	801556c <disk_write>
 8018130:	4603      	mov	r3, r0
 8018132:	2b00      	cmp	r3, #0
 8018134:	d009      	beq.n	801814a <f_write+0x186>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2201      	movs	r2, #1
 801813a:	755a      	strb	r2, [r3, #21]
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	2101      	movs	r1, #1
 8018140:	4618      	mov	r0, r3
 8018142:	f7fd fb67 	bl	8015814 <unlock_fs>
 8018146:	2301      	movs	r3, #1
 8018148:	e0dc      	b.n	8018304 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	7d1b      	ldrb	r3, [r3, #20]
 801814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018152:	b2da      	uxtb	r2, r3
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018158:	693a      	ldr	r2, [r7, #16]
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	69db      	ldr	r3, [r3, #28]
 801815e:	4619      	mov	r1, r3
 8018160:	4610      	mov	r0, r2
 8018162:	f7fd fdbf 	bl	8015ce4 <clust2sect>
 8018166:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d109      	bne.n	8018182 <f_write+0x1be>
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2202      	movs	r2, #2
 8018172:	755a      	strb	r2, [r3, #21]
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	2102      	movs	r1, #2
 8018178:	4618      	mov	r0, r3
 801817a:	f7fd fb4b 	bl	8015814 <unlock_fs>
 801817e:	2302      	movs	r3, #2
 8018180:	e0c0      	b.n	8018304 <f_write+0x340>
			sect += csect;
 8018182:	697a      	ldr	r2, [r7, #20]
 8018184:	69bb      	ldr	r3, [r7, #24]
 8018186:	4413      	add	r3, r2
 8018188:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	0a5b      	lsrs	r3, r3, #9
 801818e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018190:	6a3b      	ldr	r3, [r7, #32]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d041      	beq.n	801821a <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018196:	69ba      	ldr	r2, [r7, #24]
 8018198:	6a3b      	ldr	r3, [r7, #32]
 801819a:	4413      	add	r3, r2
 801819c:	693a      	ldr	r2, [r7, #16]
 801819e:	8952      	ldrh	r2, [r2, #10]
 80181a0:	4293      	cmp	r3, r2
 80181a2:	d905      	bls.n	80181b0 <f_write+0x1ec>
					cc = fs->csize - csect;
 80181a4:	693b      	ldr	r3, [r7, #16]
 80181a6:	895b      	ldrh	r3, [r3, #10]
 80181a8:	461a      	mov	r2, r3
 80181aa:	69bb      	ldr	r3, [r7, #24]
 80181ac:	1ad3      	subs	r3, r2, r3
 80181ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	7858      	ldrb	r0, [r3, #1]
 80181b4:	6a3b      	ldr	r3, [r7, #32]
 80181b6:	697a      	ldr	r2, [r7, #20]
 80181b8:	69f9      	ldr	r1, [r7, #28]
 80181ba:	f7fd f9d7 	bl	801556c <disk_write>
 80181be:	4603      	mov	r3, r0
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d009      	beq.n	80181d8 <f_write+0x214>
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	2201      	movs	r2, #1
 80181c8:	755a      	strb	r2, [r3, #21]
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	2101      	movs	r1, #1
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fd fb20 	bl	8015814 <unlock_fs>
 80181d4:	2301      	movs	r3, #1
 80181d6:	e095      	b.n	8018304 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	6a1a      	ldr	r2, [r3, #32]
 80181dc:	697b      	ldr	r3, [r7, #20]
 80181de:	1ad3      	subs	r3, r2, r3
 80181e0:	6a3a      	ldr	r2, [r7, #32]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d915      	bls.n	8018212 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6a1a      	ldr	r2, [r3, #32]
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	1ad3      	subs	r3, r2, r3
 80181f4:	025b      	lsls	r3, r3, #9
 80181f6:	69fa      	ldr	r2, [r7, #28]
 80181f8:	4413      	add	r3, r2
 80181fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181fe:	4619      	mov	r1, r3
 8018200:	f7fd fa74 	bl	80156ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	7d1b      	ldrb	r3, [r3, #20]
 8018208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801820c:	b2da      	uxtb	r2, r3
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	025b      	lsls	r3, r3, #9
 8018216:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018218:	e044      	b.n	80182a4 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	6a1b      	ldr	r3, [r3, #32]
 801821e:	697a      	ldr	r2, [r7, #20]
 8018220:	429a      	cmp	r2, r3
 8018222:	d01b      	beq.n	801825c <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	699a      	ldr	r2, [r3, #24]
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801822c:	429a      	cmp	r2, r3
 801822e:	d215      	bcs.n	801825c <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018230:	693b      	ldr	r3, [r7, #16]
 8018232:	7858      	ldrb	r0, [r3, #1]
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801823a:	2301      	movs	r3, #1
 801823c:	697a      	ldr	r2, [r7, #20]
 801823e:	f7fd f975 	bl	801552c <disk_read>
 8018242:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018244:	2b00      	cmp	r3, #0
 8018246:	d009      	beq.n	801825c <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	2201      	movs	r2, #1
 801824c:	755a      	strb	r2, [r3, #21]
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	2101      	movs	r1, #1
 8018252:	4618      	mov	r0, r3
 8018254:	f7fd fade 	bl	8015814 <unlock_fs>
 8018258:	2301      	movs	r3, #1
 801825a:	e053      	b.n	8018304 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	697a      	ldr	r2, [r7, #20]
 8018260:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	699b      	ldr	r3, [r3, #24]
 8018266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801826a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801826e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	429a      	cmp	r2, r3
 8018276:	d901      	bls.n	801827c <f_write+0x2b8>
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	699b      	ldr	r3, [r3, #24]
 8018286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801828a:	4413      	add	r3, r2
 801828c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801828e:	69f9      	ldr	r1, [r7, #28]
 8018290:	4618      	mov	r0, r3
 8018292:	f7fd fa2b 	bl	80156ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	7d1b      	ldrb	r3, [r3, #20]
 801829a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801829e:	b2da      	uxtb	r2, r3
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80182a4:	69fa      	ldr	r2, [r7, #28]
 80182a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a8:	4413      	add	r3, r2
 80182aa:	61fb      	str	r3, [r7, #28]
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	699a      	ldr	r2, [r3, #24]
 80182b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b2:	441a      	add	r2, r3
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	619a      	str	r2, [r3, #24]
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	68da      	ldr	r2, [r3, #12]
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	699b      	ldr	r3, [r3, #24]
 80182c0:	429a      	cmp	r2, r3
 80182c2:	bf38      	it	cc
 80182c4:	461a      	movcc	r2, r3
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	60da      	str	r2, [r3, #12]
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	681a      	ldr	r2, [r3, #0]
 80182ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182d0:	441a      	add	r2, r3
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	601a      	str	r2, [r3, #0]
 80182d6:	687a      	ldr	r2, [r7, #4]
 80182d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182da:	1ad3      	subs	r3, r2, r3
 80182dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	f47f aeb6 	bne.w	8018052 <f_write+0x8e>
 80182e6:	e000      	b.n	80182ea <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80182e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	7d1b      	ldrb	r3, [r3, #20]
 80182ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182f2:	b2da      	uxtb	r2, r3
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80182f8:	693b      	ldr	r3, [r7, #16]
 80182fa:	2100      	movs	r1, #0
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7fd fa89 	bl	8015814 <unlock_fs>
 8018302:	2300      	movs	r3, #0
}
 8018304:	4618      	mov	r0, r3
 8018306:	3730      	adds	r7, #48	; 0x30
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}

0801830c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b086      	sub	sp, #24
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f107 0208 	add.w	r2, r7, #8
 801831a:	4611      	mov	r1, r2
 801831c:	4618      	mov	r0, r3
 801831e:	f7ff f9e5 	bl	80176ec <validate>
 8018322:	4603      	mov	r3, r0
 8018324:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018326:	7dfb      	ldrb	r3, [r7, #23]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d16d      	bne.n	8018408 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	7d1b      	ldrb	r3, [r3, #20]
 8018330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018334:	2b00      	cmp	r3, #0
 8018336:	d067      	beq.n	8018408 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	7d1b      	ldrb	r3, [r3, #20]
 801833c:	b25b      	sxtb	r3, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	da1a      	bge.n	8018378 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	7858      	ldrb	r0, [r3, #1]
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6a1a      	ldr	r2, [r3, #32]
 8018350:	2301      	movs	r3, #1
 8018352:	f7fd f90b 	bl	801556c <disk_write>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	d006      	beq.n	801836a <f_sync+0x5e>
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	2101      	movs	r1, #1
 8018360:	4618      	mov	r0, r3
 8018362:	f7fd fa57 	bl	8015814 <unlock_fs>
 8018366:	2301      	movs	r3, #1
 8018368:	e055      	b.n	8018416 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	7d1b      	ldrb	r3, [r3, #20]
 801836e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018372:	b2da      	uxtb	r2, r3
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018378:	f7fd f83a 	bl	80153f0 <get_fattime>
 801837c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801837e:	68ba      	ldr	r2, [r7, #8]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018384:	4619      	mov	r1, r3
 8018386:	4610      	mov	r0, r2
 8018388:	f7fd fc10 	bl	8015bac <move_window>
 801838c:	4603      	mov	r3, r0
 801838e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018390:	7dfb      	ldrb	r3, [r7, #23]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d138      	bne.n	8018408 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801839a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	330b      	adds	r3, #11
 80183a0:	781a      	ldrb	r2, [r3, #0]
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	330b      	adds	r3, #11
 80183a6:	f042 0220 	orr.w	r2, r2, #32
 80183aa:	b2d2      	uxtb	r2, r2
 80183ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6818      	ldr	r0, [r3, #0]
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	689b      	ldr	r3, [r3, #8]
 80183b6:	461a      	mov	r2, r3
 80183b8:	68f9      	ldr	r1, [r7, #12]
 80183ba:	f7fe f91d 	bl	80165f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	f103 021c 	add.w	r2, r3, #28
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	68db      	ldr	r3, [r3, #12]
 80183c8:	4619      	mov	r1, r3
 80183ca:	4610      	mov	r0, r2
 80183cc:	f7fd f962 	bl	8015694 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	3316      	adds	r3, #22
 80183d4:	6939      	ldr	r1, [r7, #16]
 80183d6:	4618      	mov	r0, r3
 80183d8:	f7fd f95c 	bl	8015694 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	3312      	adds	r3, #18
 80183e0:	2100      	movs	r1, #0
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7fd f93b 	bl	801565e <st_word>
					fs->wflag = 1;
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	2201      	movs	r2, #1
 80183ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	4618      	mov	r0, r3
 80183f2:	f7fd fc09 	bl	8015c08 <sync_fs>
 80183f6:	4603      	mov	r3, r0
 80183f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	7d1b      	ldrb	r3, [r3, #20]
 80183fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018402:	b2da      	uxtb	r2, r3
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	7dfa      	ldrb	r2, [r7, #23]
 801840c:	4611      	mov	r1, r2
 801840e:	4618      	mov	r0, r3
 8018410:	f7fd fa00 	bl	8015814 <unlock_fs>
 8018414:	7dfb      	ldrb	r3, [r7, #23]
}
 8018416:	4618      	mov	r0, r3
 8018418:	3718      	adds	r7, #24
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}

0801841e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b084      	sub	sp, #16
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f7ff ff70 	bl	801830c <f_sync>
 801842c:	4603      	mov	r3, r0
 801842e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018430:	7bfb      	ldrb	r3, [r7, #15]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d11d      	bne.n	8018472 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f107 0208 	add.w	r2, r7, #8
 801843c:	4611      	mov	r1, r2
 801843e:	4618      	mov	r0, r3
 8018440:	f7ff f954 	bl	80176ec <validate>
 8018444:	4603      	mov	r3, r0
 8018446:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018448:	7bfb      	ldrb	r3, [r7, #15]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d111      	bne.n	8018472 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	691b      	ldr	r3, [r3, #16]
 8018452:	4618      	mov	r0, r3
 8018454:	f7fd fb06 	bl	8015a64 <dec_lock>
 8018458:	4603      	mov	r3, r0
 801845a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801845c:	7bfb      	ldrb	r3, [r7, #15]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d102      	bne.n	8018468 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	2100      	movs	r1, #0
 801846c:	4618      	mov	r0, r3
 801846e:	f7fd f9d1 	bl	8015814 <unlock_fs>
#endif
		}
	}
	return res;
 8018472:	7bfb      	ldrb	r3, [r7, #15]
}
 8018474:	4618      	mov	r0, r3
 8018476:	3710      	adds	r7, #16
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}

0801847c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b092      	sub	sp, #72	; 0x48
 8018480:	af00      	add	r7, sp, #0
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8018488:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801848c:	f107 030c 	add.w	r3, r7, #12
 8018490:	2200      	movs	r2, #0
 8018492:	4618      	mov	r0, r3
 8018494:	f7fe fed6 	bl	8017244 <find_volume>
 8018498:	4603      	mov	r3, r0
 801849a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801849e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	f040 8099 	bne.w	80185da <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80184a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	699a      	ldr	r2, [r3, #24]
 80184b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b4:	69db      	ldr	r3, [r3, #28]
 80184b6:	3b02      	subs	r3, #2
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d804      	bhi.n	80184c6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80184bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184be:	699a      	ldr	r2, [r3, #24]
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	601a      	str	r2, [r3, #0]
 80184c4:	e089      	b.n	80185da <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80184c6:	2300      	movs	r3, #0
 80184c8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80184ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	2b01      	cmp	r3, #1
 80184d0:	d128      	bne.n	8018524 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80184d2:	2302      	movs	r3, #2
 80184d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80184da:	f107 0314 	add.w	r3, r7, #20
 80184de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7fd fc1e 	bl	8015d22 <get_fat>
 80184e6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80184e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ee:	d103      	bne.n	80184f8 <f_getfree+0x7c>
 80184f0:	2301      	movs	r3, #1
 80184f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80184f6:	e063      	b.n	80185c0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80184f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fa:	2b01      	cmp	r3, #1
 80184fc:	d103      	bne.n	8018506 <f_getfree+0x8a>
 80184fe:	2302      	movs	r3, #2
 8018500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8018504:	e05c      	b.n	80185c0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8018506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018508:	2b00      	cmp	r3, #0
 801850a:	d102      	bne.n	8018512 <f_getfree+0x96>
 801850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801850e:	3301      	adds	r3, #1
 8018510:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8018512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018514:	3301      	adds	r3, #1
 8018516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801851a:	69db      	ldr	r3, [r3, #28]
 801851c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801851e:	429a      	cmp	r2, r3
 8018520:	d3db      	bcc.n	80184da <f_getfree+0x5e>
 8018522:	e04d      	b.n	80185c0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8018524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018526:	69db      	ldr	r3, [r3, #28]
 8018528:	63fb      	str	r3, [r7, #60]	; 0x3c
 801852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801852e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8018530:	2300      	movs	r3, #0
 8018532:	637b      	str	r3, [r7, #52]	; 0x34
 8018534:	2300      	movs	r3, #0
 8018536:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8018538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801853a:	2b00      	cmp	r3, #0
 801853c:	d113      	bne.n	8018566 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801853e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018542:	1c5a      	adds	r2, r3, #1
 8018544:	63ba      	str	r2, [r7, #56]	; 0x38
 8018546:	4619      	mov	r1, r3
 8018548:	f7fd fb30 	bl	8015bac <move_window>
 801854c:	4603      	mov	r3, r0
 801854e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8018552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018556:	2b00      	cmp	r3, #0
 8018558:	d131      	bne.n	80185be <f_getfree+0x142>
							p = fs->win;
 801855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801855c:	3338      	adds	r3, #56	; 0x38
 801855e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8018560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018564:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8018566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	2b02      	cmp	r3, #2
 801856c:	d10f      	bne.n	801858e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801856e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018570:	f7fd f83a 	bl	80155e8 <ld_word>
 8018574:	4603      	mov	r3, r0
 8018576:	2b00      	cmp	r3, #0
 8018578:	d102      	bne.n	8018580 <f_getfree+0x104>
 801857a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801857c:	3301      	adds	r3, #1
 801857e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8018580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018582:	3302      	adds	r3, #2
 8018584:	633b      	str	r3, [r7, #48]	; 0x30
 8018586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018588:	3b02      	subs	r3, #2
 801858a:	637b      	str	r3, [r7, #52]	; 0x34
 801858c:	e010      	b.n	80185b0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801858e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018590:	f7fd f842 	bl	8015618 <ld_dword>
 8018594:	4603      	mov	r3, r0
 8018596:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801859a:	2b00      	cmp	r3, #0
 801859c:	d102      	bne.n	80185a4 <f_getfree+0x128>
 801859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80185a0:	3301      	adds	r3, #1
 80185a2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80185a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185a6:	3304      	adds	r3, #4
 80185a8:	633b      	str	r3, [r7, #48]	; 0x30
 80185aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ac:	3b04      	subs	r3, #4
 80185ae:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80185b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185b2:	3b01      	subs	r3, #1
 80185b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d1bd      	bne.n	8018538 <f_getfree+0xbc>
 80185bc:	e000      	b.n	80185c0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80185be:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80185c4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80185c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80185ca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80185cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ce:	791a      	ldrb	r2, [r3, #4]
 80185d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d2:	f042 0201 	orr.w	r2, r2, #1
 80185d6:	b2d2      	uxtb	r2, r2
 80185d8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80185da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185dc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80185e0:	4611      	mov	r1, r2
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7fd f916 	bl	8015814 <unlock_fs>
 80185e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80185ec:	4618      	mov	r0, r3
 80185ee:	3748      	adds	r7, #72	; 0x48
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b088      	sub	sp, #32
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8018600:	2300      	movs	r3, #0
 8018602:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8018608:	e01b      	b.n	8018642 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801860a:	f107 0310 	add.w	r3, r7, #16
 801860e:	f107 0114 	add.w	r1, r7, #20
 8018612:	2201      	movs	r2, #1
 8018614:	6878      	ldr	r0, [r7, #4]
 8018616:	f7ff fb67 	bl	8017ce8 <f_read>
		if (rc != 1) break;
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	2b01      	cmp	r3, #1
 801861e:	d116      	bne.n	801864e <f_gets+0x5a>
		c = s[0];
 8018620:	7d3b      	ldrb	r3, [r7, #20]
 8018622:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8018624:	7dfb      	ldrb	r3, [r7, #23]
 8018626:	2b0d      	cmp	r3, #13
 8018628:	d100      	bne.n	801862c <f_gets+0x38>
 801862a:	e00a      	b.n	8018642 <f_gets+0x4e>
		*p++ = c;
 801862c:	69bb      	ldr	r3, [r7, #24]
 801862e:	1c5a      	adds	r2, r3, #1
 8018630:	61ba      	str	r2, [r7, #24]
 8018632:	7dfa      	ldrb	r2, [r7, #23]
 8018634:	701a      	strb	r2, [r3, #0]
		n++;
 8018636:	69fb      	ldr	r3, [r7, #28]
 8018638:	3301      	adds	r3, #1
 801863a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801863c:	7dfb      	ldrb	r3, [r7, #23]
 801863e:	2b0a      	cmp	r3, #10
 8018640:	d007      	beq.n	8018652 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	3b01      	subs	r3, #1
 8018646:	69fa      	ldr	r2, [r7, #28]
 8018648:	429a      	cmp	r2, r3
 801864a:	dbde      	blt.n	801860a <f_gets+0x16>
 801864c:	e002      	b.n	8018654 <f_gets+0x60>
		if (rc != 1) break;
 801864e:	bf00      	nop
 8018650:	e000      	b.n	8018654 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8018652:	bf00      	nop
	}
	*p = 0;
 8018654:	69bb      	ldr	r3, [r7, #24]
 8018656:	2200      	movs	r2, #0
 8018658:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801865a:	69fb      	ldr	r3, [r7, #28]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d001      	beq.n	8018664 <f_gets+0x70>
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	e000      	b.n	8018666 <f_gets+0x72>
 8018664:	2300      	movs	r3, #0
}
 8018666:	4618      	mov	r0, r3
 8018668:	3720      	adds	r7, #32
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}

0801866e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801866e:	b580      	push	{r7, lr}
 8018670:	b084      	sub	sp, #16
 8018672:	af00      	add	r7, sp, #0
 8018674:	6078      	str	r0, [r7, #4]
 8018676:	460b      	mov	r3, r1
 8018678:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801867a:	78fb      	ldrb	r3, [r7, #3]
 801867c:	2b0a      	cmp	r3, #10
 801867e:	d103      	bne.n	8018688 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8018680:	210d      	movs	r1, #13
 8018682:	6878      	ldr	r0, [r7, #4]
 8018684:	f7ff fff3 	bl	801866e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	2b00      	cmp	r3, #0
 8018692:	db25      	blt.n	80186e0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	1c5a      	adds	r2, r3, #1
 8018698:	60fa      	str	r2, [r7, #12]
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	4413      	add	r3, r2
 801869e:	78fa      	ldrb	r2, [r7, #3]
 80186a0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2b3c      	cmp	r3, #60	; 0x3c
 80186a6:	dd12      	ble.n	80186ce <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6818      	ldr	r0, [r3, #0]
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f103 010c 	add.w	r1, r3, #12
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	f107 0308 	add.w	r3, r7, #8
 80186b8:	f7ff fc84 	bl	8017fc4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80186bc:	68ba      	ldr	r2, [r7, #8]
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d101      	bne.n	80186c8 <putc_bfd+0x5a>
 80186c4:	2300      	movs	r3, #0
 80186c6:	e001      	b.n	80186cc <putc_bfd+0x5e>
 80186c8:	f04f 33ff 	mov.w	r3, #4294967295
 80186cc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	68fa      	ldr	r2, [r7, #12]
 80186d2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	689b      	ldr	r3, [r3, #8]
 80186d8:	1c5a      	adds	r2, r3, #1
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	609a      	str	r2, [r3, #8]
 80186de:	e000      	b.n	80186e2 <putc_bfd+0x74>
	if (i < 0) return;
 80186e0:	bf00      	nop
}
 80186e2:	3710      	adds	r7, #16
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}

080186e8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b084      	sub	sp, #16
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	db16      	blt.n	8018726 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6818      	ldr	r0, [r3, #0]
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	f103 010c 	add.w	r1, r3, #12
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	685b      	ldr	r3, [r3, #4]
 8018706:	461a      	mov	r2, r3
 8018708:	f107 030c 	add.w	r3, r7, #12
 801870c:	f7ff fc5a 	bl	8017fc4 <f_write>
 8018710:	4603      	mov	r3, r0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d107      	bne.n	8018726 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	685b      	ldr	r3, [r3, #4]
 801871a:	68fa      	ldr	r2, [r7, #12]
 801871c:	4293      	cmp	r3, r2
 801871e:	d102      	bne.n	8018726 <putc_flush+0x3e>
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	689b      	ldr	r3, [r3, #8]
 8018724:	e001      	b.n	801872a <putc_flush+0x42>
	return EOF;
 8018726:	f04f 33ff 	mov.w	r3, #4294967295
}
 801872a:	4618      	mov	r0, r3
 801872c:	3710      	adds	r7, #16
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8018732:	b480      	push	{r7}
 8018734:	b083      	sub	sp, #12
 8018736:	af00      	add	r7, sp, #0
 8018738:	6078      	str	r0, [r7, #4]
 801873a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	683a      	ldr	r2, [r7, #0]
 8018740:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	605a      	str	r2, [r3, #4]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	685a      	ldr	r2, [r3, #4]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	609a      	str	r2, [r3, #8]
}
 8018750:	bf00      	nop
 8018752:	370c      	adds	r7, #12
 8018754:	46bd      	mov	sp, r7
 8018756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875a:	4770      	bx	lr

0801875c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b096      	sub	sp, #88	; 0x58
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
 8018764:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8018766:	f107 030c 	add.w	r3, r7, #12
 801876a:	6839      	ldr	r1, [r7, #0]
 801876c:	4618      	mov	r0, r3
 801876e:	f7ff ffe0 	bl	8018732 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8018772:	e009      	b.n	8018788 <f_puts+0x2c>
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	1c5a      	adds	r2, r3, #1
 8018778:	607a      	str	r2, [r7, #4]
 801877a:	781a      	ldrb	r2, [r3, #0]
 801877c:	f107 030c 	add.w	r3, r7, #12
 8018780:	4611      	mov	r1, r2
 8018782:	4618      	mov	r0, r3
 8018784:	f7ff ff73 	bl	801866e <putc_bfd>
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d1f1      	bne.n	8018774 <f_puts+0x18>
	return putc_flush(&pb);
 8018790:	f107 030c 	add.w	r3, r7, #12
 8018794:	4618      	mov	r0, r3
 8018796:	f7ff ffa7 	bl	80186e8 <putc_flush>
 801879a:	4603      	mov	r3, r0
}
 801879c:	4618      	mov	r0, r3
 801879e:	3758      	adds	r7, #88	; 0x58
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bd80      	pop	{r7, pc}

080187a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80187a4:	b480      	push	{r7}
 80187a6:	b087      	sub	sp, #28
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	4613      	mov	r3, r2
 80187b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80187b2:	2301      	movs	r3, #1
 80187b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80187b6:	2300      	movs	r3, #0
 80187b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80187ba:	4b1f      	ldr	r3, [pc, #124]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187bc:	7a5b      	ldrb	r3, [r3, #9]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d131      	bne.n	8018828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80187c4:	4b1c      	ldr	r3, [pc, #112]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187c6:	7a5b      	ldrb	r3, [r3, #9]
 80187c8:	b2db      	uxtb	r3, r3
 80187ca:	461a      	mov	r2, r3
 80187cc:	4b1a      	ldr	r3, [pc, #104]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187ce:	2100      	movs	r1, #0
 80187d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80187d2:	4b19      	ldr	r3, [pc, #100]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187d4:	7a5b      	ldrb	r3, [r3, #9]
 80187d6:	b2db      	uxtb	r3, r3
 80187d8:	4a17      	ldr	r2, [pc, #92]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187da:	009b      	lsls	r3, r3, #2
 80187dc:	4413      	add	r3, r2
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80187e2:	4b15      	ldr	r3, [pc, #84]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187e4:	7a5b      	ldrb	r3, [r3, #9]
 80187e6:	b2db      	uxtb	r3, r3
 80187e8:	461a      	mov	r2, r3
 80187ea:	4b13      	ldr	r3, [pc, #76]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187ec:	4413      	add	r3, r2
 80187ee:	79fa      	ldrb	r2, [r7, #7]
 80187f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80187f2:	4b11      	ldr	r3, [pc, #68]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187f4:	7a5b      	ldrb	r3, [r3, #9]
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	1c5a      	adds	r2, r3, #1
 80187fa:	b2d1      	uxtb	r1, r2
 80187fc:	4a0e      	ldr	r2, [pc, #56]	; (8018838 <FATFS_LinkDriverEx+0x94>)
 80187fe:	7251      	strb	r1, [r2, #9]
 8018800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018802:	7dbb      	ldrb	r3, [r7, #22]
 8018804:	3330      	adds	r3, #48	; 0x30
 8018806:	b2da      	uxtb	r2, r3
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	3301      	adds	r3, #1
 8018810:	223a      	movs	r2, #58	; 0x3a
 8018812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	3302      	adds	r3, #2
 8018818:	222f      	movs	r2, #47	; 0x2f
 801881a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	3303      	adds	r3, #3
 8018820:	2200      	movs	r2, #0
 8018822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018824:	2300      	movs	r3, #0
 8018826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018828:	7dfb      	ldrb	r3, [r7, #23]
}
 801882a:	4618      	mov	r0, r3
 801882c:	371c      	adds	r7, #28
 801882e:	46bd      	mov	sp, r7
 8018830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop
 8018838:	20000688 	.word	0x20000688

0801883c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b082      	sub	sp, #8
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
 8018844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018846:	2200      	movs	r2, #0
 8018848:	6839      	ldr	r1, [r7, #0]
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f7ff ffaa 	bl	80187a4 <FATFS_LinkDriverEx>
 8018850:	4603      	mov	r3, r0
}
 8018852:	4618      	mov	r0, r3
 8018854:	3708      	adds	r7, #8
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
	...

0801885c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801885c:	b480      	push	{r7}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	4603      	mov	r3, r0
 8018864:	6039      	str	r1, [r7, #0]
 8018866:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018868:	88fb      	ldrh	r3, [r7, #6]
 801886a:	2b7f      	cmp	r3, #127	; 0x7f
 801886c:	d802      	bhi.n	8018874 <ff_convert+0x18>
		c = chr;
 801886e:	88fb      	ldrh	r3, [r7, #6]
 8018870:	81fb      	strh	r3, [r7, #14]
 8018872:	e025      	b.n	80188c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d00b      	beq.n	8018892 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801887a:	88fb      	ldrh	r3, [r7, #6]
 801887c:	2bff      	cmp	r3, #255	; 0xff
 801887e:	d805      	bhi.n	801888c <ff_convert+0x30>
 8018880:	88fb      	ldrh	r3, [r7, #6]
 8018882:	3b80      	subs	r3, #128	; 0x80
 8018884:	4a12      	ldr	r2, [pc, #72]	; (80188d0 <ff_convert+0x74>)
 8018886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801888a:	e000      	b.n	801888e <ff_convert+0x32>
 801888c:	2300      	movs	r3, #0
 801888e:	81fb      	strh	r3, [r7, #14]
 8018890:	e016      	b.n	80188c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018892:	2300      	movs	r3, #0
 8018894:	81fb      	strh	r3, [r7, #14]
 8018896:	e009      	b.n	80188ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018898:	89fb      	ldrh	r3, [r7, #14]
 801889a:	4a0d      	ldr	r2, [pc, #52]	; (80188d0 <ff_convert+0x74>)
 801889c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80188a0:	88fa      	ldrh	r2, [r7, #6]
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d006      	beq.n	80188b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80188a6:	89fb      	ldrh	r3, [r7, #14]
 80188a8:	3301      	adds	r3, #1
 80188aa:	81fb      	strh	r3, [r7, #14]
 80188ac:	89fb      	ldrh	r3, [r7, #14]
 80188ae:	2b7f      	cmp	r3, #127	; 0x7f
 80188b0:	d9f2      	bls.n	8018898 <ff_convert+0x3c>
 80188b2:	e000      	b.n	80188b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80188b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80188b6:	89fb      	ldrh	r3, [r7, #14]
 80188b8:	3380      	adds	r3, #128	; 0x80
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80188c0:	89fb      	ldrh	r3, [r7, #14]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3714      	adds	r7, #20
 80188c6:	46bd      	mov	sp, r7
 80188c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188cc:	4770      	bx	lr
 80188ce:	bf00      	nop
 80188d0:	0801ffbc 	.word	0x0801ffbc

080188d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80188d4:	b480      	push	{r7}
 80188d6:	b087      	sub	sp, #28
 80188d8:	af00      	add	r7, sp, #0
 80188da:	4603      	mov	r3, r0
 80188dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80188de:	88fb      	ldrh	r3, [r7, #6]
 80188e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80188e4:	d201      	bcs.n	80188ea <ff_wtoupper+0x16>
 80188e6:	4b3e      	ldr	r3, [pc, #248]	; (80189e0 <ff_wtoupper+0x10c>)
 80188e8:	e000      	b.n	80188ec <ff_wtoupper+0x18>
 80188ea:	4b3e      	ldr	r3, [pc, #248]	; (80189e4 <ff_wtoupper+0x110>)
 80188ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	1c9a      	adds	r2, r3, #2
 80188f2:	617a      	str	r2, [r7, #20]
 80188f4:	881b      	ldrh	r3, [r3, #0]
 80188f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80188f8:	8a7b      	ldrh	r3, [r7, #18]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d068      	beq.n	80189d0 <ff_wtoupper+0xfc>
 80188fe:	88fa      	ldrh	r2, [r7, #6]
 8018900:	8a7b      	ldrh	r3, [r7, #18]
 8018902:	429a      	cmp	r2, r3
 8018904:	d364      	bcc.n	80189d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	1c9a      	adds	r2, r3, #2
 801890a:	617a      	str	r2, [r7, #20]
 801890c:	881b      	ldrh	r3, [r3, #0]
 801890e:	823b      	strh	r3, [r7, #16]
 8018910:	8a3b      	ldrh	r3, [r7, #16]
 8018912:	0a1b      	lsrs	r3, r3, #8
 8018914:	81fb      	strh	r3, [r7, #14]
 8018916:	8a3b      	ldrh	r3, [r7, #16]
 8018918:	b2db      	uxtb	r3, r3
 801891a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801891c:	88fa      	ldrh	r2, [r7, #6]
 801891e:	8a79      	ldrh	r1, [r7, #18]
 8018920:	8a3b      	ldrh	r3, [r7, #16]
 8018922:	440b      	add	r3, r1
 8018924:	429a      	cmp	r2, r3
 8018926:	da49      	bge.n	80189bc <ff_wtoupper+0xe8>
			switch (cmd) {
 8018928:	89fb      	ldrh	r3, [r7, #14]
 801892a:	2b08      	cmp	r3, #8
 801892c:	d84f      	bhi.n	80189ce <ff_wtoupper+0xfa>
 801892e:	a201      	add	r2, pc, #4	; (adr r2, 8018934 <ff_wtoupper+0x60>)
 8018930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018934:	08018959 	.word	0x08018959
 8018938:	0801896b 	.word	0x0801896b
 801893c:	08018981 	.word	0x08018981
 8018940:	08018989 	.word	0x08018989
 8018944:	08018991 	.word	0x08018991
 8018948:	08018999 	.word	0x08018999
 801894c:	080189a1 	.word	0x080189a1
 8018950:	080189a9 	.word	0x080189a9
 8018954:	080189b1 	.word	0x080189b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018958:	88fa      	ldrh	r2, [r7, #6]
 801895a:	8a7b      	ldrh	r3, [r7, #18]
 801895c:	1ad3      	subs	r3, r2, r3
 801895e:	005b      	lsls	r3, r3, #1
 8018960:	697a      	ldr	r2, [r7, #20]
 8018962:	4413      	add	r3, r2
 8018964:	881b      	ldrh	r3, [r3, #0]
 8018966:	80fb      	strh	r3, [r7, #6]
 8018968:	e027      	b.n	80189ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801896a:	88fa      	ldrh	r2, [r7, #6]
 801896c:	8a7b      	ldrh	r3, [r7, #18]
 801896e:	1ad3      	subs	r3, r2, r3
 8018970:	b29b      	uxth	r3, r3
 8018972:	f003 0301 	and.w	r3, r3, #1
 8018976:	b29b      	uxth	r3, r3
 8018978:	88fa      	ldrh	r2, [r7, #6]
 801897a:	1ad3      	subs	r3, r2, r3
 801897c:	80fb      	strh	r3, [r7, #6]
 801897e:	e01c      	b.n	80189ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018980:	88fb      	ldrh	r3, [r7, #6]
 8018982:	3b10      	subs	r3, #16
 8018984:	80fb      	strh	r3, [r7, #6]
 8018986:	e018      	b.n	80189ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018988:	88fb      	ldrh	r3, [r7, #6]
 801898a:	3b20      	subs	r3, #32
 801898c:	80fb      	strh	r3, [r7, #6]
 801898e:	e014      	b.n	80189ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018990:	88fb      	ldrh	r3, [r7, #6]
 8018992:	3b30      	subs	r3, #48	; 0x30
 8018994:	80fb      	strh	r3, [r7, #6]
 8018996:	e010      	b.n	80189ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018998:	88fb      	ldrh	r3, [r7, #6]
 801899a:	3b1a      	subs	r3, #26
 801899c:	80fb      	strh	r3, [r7, #6]
 801899e:	e00c      	b.n	80189ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80189a0:	88fb      	ldrh	r3, [r7, #6]
 80189a2:	3308      	adds	r3, #8
 80189a4:	80fb      	strh	r3, [r7, #6]
 80189a6:	e008      	b.n	80189ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80189a8:	88fb      	ldrh	r3, [r7, #6]
 80189aa:	3b50      	subs	r3, #80	; 0x50
 80189ac:	80fb      	strh	r3, [r7, #6]
 80189ae:	e004      	b.n	80189ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80189b0:	88fb      	ldrh	r3, [r7, #6]
 80189b2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80189b6:	80fb      	strh	r3, [r7, #6]
 80189b8:	bf00      	nop
			}
			break;
 80189ba:	e008      	b.n	80189ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80189bc:	89fb      	ldrh	r3, [r7, #14]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d195      	bne.n	80188ee <ff_wtoupper+0x1a>
 80189c2:	8a3b      	ldrh	r3, [r7, #16]
 80189c4:	005b      	lsls	r3, r3, #1
 80189c6:	697a      	ldr	r2, [r7, #20]
 80189c8:	4413      	add	r3, r2
 80189ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80189cc:	e78f      	b.n	80188ee <ff_wtoupper+0x1a>
			break;
 80189ce:	bf00      	nop
	}

	return chr;
 80189d0:	88fb      	ldrh	r3, [r7, #6]
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	371c      	adds	r7, #28
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	080200bc 	.word	0x080200bc
 80189e4:	080202b0 	.word	0x080202b0

080189e8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b086      	sub	sp, #24
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	4603      	mov	r3, r0
 80189f0:	6039      	str	r1, [r7, #0]
 80189f2:	71fb      	strb	r3, [r7, #7]

    int ret;
#if _USE_MUTEX

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
 80189f4:	2300      	movs	r3, #0
 80189f6:	60fb      	str	r3, [r7, #12]
 80189f8:	2300      	movs	r3, #0
 80189fa:	613b      	str	r3, [r7, #16]
    *sobj = osMutexCreate(osMutex(MTX));
 80189fc:	f107 030c 	add.w	r3, r7, #12
 8018a00:	4618      	mov	r0, r3
 8018a02:	f000 f959 	bl	8018cb8 <osMutexCreate>
 8018a06:	4602      	mov	r2, r0
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	bf14      	ite	ne
 8018a14:	2301      	movne	r3, #1
 8018a16:	2300      	moveq	r3, #0
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	617b      	str	r3, [r7, #20]

    return ret;
 8018a1c:	697b      	ldr	r3, [r7, #20]
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3718      	adds	r7, #24
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}

08018a26 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8018a26:	b580      	push	{r7, lr}
 8018a28:	b082      	sub	sp, #8
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f000 f9de 	bl	8018df0 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 8018a34:	2301      	movs	r3, #1
}
 8018a36:	4618      	mov	r0, r3
 8018a38:	3708      	adds	r7, #8
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bd80      	pop	{r7, pc}

08018a3e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8018a3e:	b580      	push	{r7, lr}
 8018a40:	b084      	sub	sp, #16
 8018a42:	af00      	add	r7, sp, #0
 8018a44:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8018a46:	2300      	movs	r3, #0
 8018a48:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
 8018a4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 f94a 	bl	8018ce8 <osMutexWait>
 8018a54:	4603      	mov	r3, r0
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d101      	bne.n	8018a5e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8018a5a:	2301      	movs	r3, #1
 8018a5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	3710      	adds	r7, #16
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}

08018a68 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 8018a70:	6878      	ldr	r0, [r7, #4]
 8018a72:	f000 f987 	bl	8018d84 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 8018a76:	bf00      	nop
 8018a78:	3708      	adds	r7, #8
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}

08018a7e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018a7e:	b480      	push	{r7}
 8018a80:	b085      	sub	sp, #20
 8018a82:	af00      	add	r7, sp, #0
 8018a84:	4603      	mov	r3, r0
 8018a86:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018a90:	2b84      	cmp	r3, #132	; 0x84
 8018a92:	d005      	beq.n	8018aa0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8018a94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	4413      	add	r3, r2
 8018a9c:	3303      	adds	r3, #3
 8018a9e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8018aa0:	68fb      	ldr	r3, [r7, #12]
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3714      	adds	r7, #20
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aac:	4770      	bx	lr

08018aae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8018aae:	b480      	push	{r7}
 8018ab0:	b083      	sub	sp, #12
 8018ab2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ab4:	f3ef 8305 	mrs	r3, IPSR
 8018ab8:	607b      	str	r3, [r7, #4]
  return(result);
 8018aba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	bf14      	ite	ne
 8018ac0:	2301      	movne	r3, #1
 8018ac2:	2300      	moveq	r3, #0
 8018ac4:	b2db      	uxtb	r3, r3
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	370c      	adds	r7, #12
 8018aca:	46bd      	mov	sp, r7
 8018acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad0:	4770      	bx	lr

08018ad2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018ad2:	b580      	push	{r7, lr}
 8018ad4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8018ad6:	f001 fa35 	bl	8019f44 <vTaskStartScheduler>
  
  return osOK;
 8018ada:	2300      	movs	r3, #0
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	bd80      	pop	{r7, pc}

08018ae0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8018ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ae2:	b089      	sub	sp, #36	; 0x24
 8018ae4:	af04      	add	r7, sp, #16
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	695b      	ldr	r3, [r3, #20]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d020      	beq.n	8018b34 <osThreadCreate+0x54>
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	699b      	ldr	r3, [r3, #24]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d01c      	beq.n	8018b34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	685c      	ldr	r4, [r3, #4]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681d      	ldr	r5, [r3, #0]
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	691e      	ldr	r6, [r3, #16]
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7ff ffb6 	bl	8018a7e <makeFreeRtosPriority>
 8018b12:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	695b      	ldr	r3, [r3, #20]
 8018b18:	687a      	ldr	r2, [r7, #4]
 8018b1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018b1c:	9202      	str	r2, [sp, #8]
 8018b1e:	9301      	str	r3, [sp, #4]
 8018b20:	9100      	str	r1, [sp, #0]
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	4632      	mov	r2, r6
 8018b26:	4629      	mov	r1, r5
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f001 f843 	bl	8019bb4 <xTaskCreateStatic>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	60fb      	str	r3, [r7, #12]
 8018b32:	e01c      	b.n	8018b6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	685c      	ldr	r4, [r3, #4]
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018b40:	b29e      	uxth	r6, r3
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7ff ff98 	bl	8018a7e <makeFreeRtosPriority>
 8018b4e:	4602      	mov	r2, r0
 8018b50:	f107 030c 	add.w	r3, r7, #12
 8018b54:	9301      	str	r3, [sp, #4]
 8018b56:	9200      	str	r2, [sp, #0]
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	4632      	mov	r2, r6
 8018b5c:	4629      	mov	r1, r5
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f001 f885 	bl	8019c6e <xTaskCreate>
 8018b64:	4603      	mov	r3, r0
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d001      	beq.n	8018b6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	e000      	b.n	8018b70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
}
 8018b70:	4618      	mov	r0, r3
 8018b72:	3714      	adds	r7, #20
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d001      	beq.n	8018b8e <osDelay+0x16>
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	e000      	b.n	8018b90 <osDelay+0x18>
 8018b8e:	2301      	movs	r3, #1
 8018b90:	4618      	mov	r0, r3
 8018b92:	f001 f9a3 	bl	8019edc <vTaskDelay>
  
  return osOK;
 8018b96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018b98:	4618      	mov	r0, r3
 8018b9a:	3710      	adds	r7, #16
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b086      	sub	sp, #24
 8018ba4:	af02      	add	r7, sp, #8
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018baa:	2300      	movs	r3, #0
 8018bac:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8018bb2:	f7ff ff7c 	bl	8018aae <inHandlerMode>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d01c      	beq.n	8018bf6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8018bbc:	6839      	ldr	r1, [r7, #0]
 8018bbe:	f107 0208 	add.w	r2, r7, #8
 8018bc2:	f107 030c 	add.w	r3, r7, #12
 8018bc6:	9300      	str	r3, [sp, #0]
 8018bc8:	4613      	mov	r3, r2
 8018bca:	2201      	movs	r2, #1
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f002 f899 	bl	801ad04 <xTaskGenericNotifyFromISR>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d002      	beq.n	8018bde <osSignalSet+0x3e>
      return 0x80000000;
 8018bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018bdc:	e019      	b.n	8018c12 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d015      	beq.n	8018c10 <osSignalSet+0x70>
 8018be4:	4b0d      	ldr	r3, [pc, #52]	; (8018c1c <osSignalSet+0x7c>)
 8018be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bea:	601a      	str	r2, [r3, #0]
 8018bec:	f3bf 8f4f 	dsb	sy
 8018bf0:	f3bf 8f6f 	isb	sy
 8018bf4:	e00c      	b.n	8018c10 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8018bf6:	6839      	ldr	r1, [r7, #0]
 8018bf8:	f107 0308 	add.w	r3, r7, #8
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	6878      	ldr	r0, [r7, #4]
 8018c00:	f001 ffca 	bl	801ab98 <xTaskGenericNotify>
 8018c04:	4603      	mov	r3, r0
 8018c06:	2b01      	cmp	r3, #1
 8018c08:	d002      	beq.n	8018c10 <osSignalSet+0x70>
    return 0x80000000;
 8018c0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018c0e:	e000      	b.n	8018c12 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8018c10:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3710      	adds	r7, #16
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	e000ed04 	.word	0xe000ed04

08018c20 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8018c20:	b590      	push	{r4, r7, lr}
 8018c22:	b089      	sub	sp, #36	; 0x24
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8018c30:	2300      	movs	r3, #0
 8018c32:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c3a:	d103      	bne.n	8018c44 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8018c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c40:	61fb      	str	r3, [r7, #28]
 8018c42:	e009      	b.n	8018c58 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d006      	beq.n	8018c58 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8018c4e:	69fb      	ldr	r3, [r7, #28]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d101      	bne.n	8018c58 <osSignalWait+0x38>
      ticks = 1;
 8018c54:	2301      	movs	r3, #1
 8018c56:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8018c58:	f7ff ff29 	bl	8018aae <inHandlerMode>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d002      	beq.n	8018c68 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8018c62:	2382      	movs	r3, #130	; 0x82
 8018c64:	613b      	str	r3, [r7, #16]
 8018c66:	e01b      	b.n	8018ca0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8018c68:	68b9      	ldr	r1, [r7, #8]
 8018c6a:	f107 0310 	add.w	r3, r7, #16
 8018c6e:	1d1a      	adds	r2, r3, #4
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	2000      	movs	r0, #0
 8018c74:	f001 ff36 	bl	801aae4 <xTaskNotifyWait>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	2b01      	cmp	r3, #1
 8018c7c:	d008      	beq.n	8018c90 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d102      	bne.n	8018c8a <osSignalWait+0x6a>
 8018c84:	2300      	movs	r3, #0
 8018c86:	613b      	str	r3, [r7, #16]
 8018c88:	e00a      	b.n	8018ca0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8018c8a:	2340      	movs	r3, #64	; 0x40
 8018c8c:	613b      	str	r3, [r7, #16]
 8018c8e:	e007      	b.n	8018ca0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	da02      	bge.n	8018c9c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8018c96:	2386      	movs	r3, #134	; 0x86
 8018c98:	613b      	str	r3, [r7, #16]
 8018c9a:	e001      	b.n	8018ca0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8018c9c:	2308      	movs	r3, #8
 8018c9e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	461c      	mov	r4, r3
 8018ca4:	f107 0310 	add.w	r3, r7, #16
 8018ca8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018cac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018cb0:	68f8      	ldr	r0, [r7, #12]
 8018cb2:	3724      	adds	r7, #36	; 0x24
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd90      	pop	{r4, r7, pc}

08018cb8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	685b      	ldr	r3, [r3, #4]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d007      	beq.n	8018cd8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	685b      	ldr	r3, [r3, #4]
 8018ccc:	4619      	mov	r1, r3
 8018cce:	2001      	movs	r0, #1
 8018cd0:	f000 fac7 	bl	8019262 <xQueueCreateMutexStatic>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	e003      	b.n	8018ce0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8018cd8:	2001      	movs	r0, #1
 8018cda:	f000 faaa 	bl	8019232 <xQueueCreateMutex>
 8018cde:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d101      	bne.n	8018d00 <osMutexWait+0x18>
    return osErrorParameter;
 8018cfc:	2380      	movs	r3, #128	; 0x80
 8018cfe:	e03a      	b.n	8018d76 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8018d00:	2300      	movs	r3, #0
 8018d02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d0a:	d103      	bne.n	8018d14 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8018d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8018d10:	60fb      	str	r3, [r7, #12]
 8018d12:	e009      	b.n	8018d28 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d006      	beq.n	8018d28 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d101      	bne.n	8018d28 <osMutexWait+0x40>
      ticks = 1;
 8018d24:	2301      	movs	r3, #1
 8018d26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8018d28:	f7ff fec1 	bl	8018aae <inHandlerMode>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d017      	beq.n	8018d62 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8018d32:	f107 0308 	add.w	r3, r7, #8
 8018d36:	461a      	mov	r2, r3
 8018d38:	2100      	movs	r1, #0
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f000 fd44 	bl	80197c8 <xQueueReceiveFromISR>
 8018d40:	4603      	mov	r3, r0
 8018d42:	2b01      	cmp	r3, #1
 8018d44:	d001      	beq.n	8018d4a <osMutexWait+0x62>
      return osErrorOS;
 8018d46:	23ff      	movs	r3, #255	; 0xff
 8018d48:	e015      	b.n	8018d76 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d011      	beq.n	8018d74 <osMutexWait+0x8c>
 8018d50:	4b0b      	ldr	r3, [pc, #44]	; (8018d80 <osMutexWait+0x98>)
 8018d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d56:	601a      	str	r2, [r3, #0]
 8018d58:	f3bf 8f4f 	dsb	sy
 8018d5c:	f3bf 8f6f 	isb	sy
 8018d60:	e008      	b.n	8018d74 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8018d62:	68f9      	ldr	r1, [r7, #12]
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f000 fc23 	bl	80195b0 <xQueueSemaphoreTake>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	2b01      	cmp	r3, #1
 8018d6e:	d001      	beq.n	8018d74 <osMutexWait+0x8c>
    return osErrorOS;
 8018d70:	23ff      	movs	r3, #255	; 0xff
 8018d72:	e000      	b.n	8018d76 <osMutexWait+0x8e>
  }
  
  return osOK;
 8018d74:	2300      	movs	r3, #0
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3710      	adds	r7, #16
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	e000ed04 	.word	0xe000ed04

08018d84 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b084      	sub	sp, #16
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8018d90:	2300      	movs	r3, #0
 8018d92:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8018d94:	f7ff fe8b 	bl	8018aae <inHandlerMode>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d016      	beq.n	8018dcc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8018d9e:	f107 0308 	add.w	r3, r7, #8
 8018da2:	4619      	mov	r1, r3
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f000 fb75 	bl	8019494 <xQueueGiveFromISR>
 8018daa:	4603      	mov	r3, r0
 8018dac:	2b01      	cmp	r3, #1
 8018dae:	d001      	beq.n	8018db4 <osMutexRelease+0x30>
      return osErrorOS;
 8018db0:	23ff      	movs	r3, #255	; 0xff
 8018db2:	e017      	b.n	8018de4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d013      	beq.n	8018de2 <osMutexRelease+0x5e>
 8018dba:	4b0c      	ldr	r3, [pc, #48]	; (8018dec <osMutexRelease+0x68>)
 8018dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dc0:	601a      	str	r2, [r3, #0]
 8018dc2:	f3bf 8f4f 	dsb	sy
 8018dc6:	f3bf 8f6f 	isb	sy
 8018dca:	e00a      	b.n	8018de2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8018dcc:	2300      	movs	r3, #0
 8018dce:	2200      	movs	r2, #0
 8018dd0:	2100      	movs	r1, #0
 8018dd2:	6878      	ldr	r0, [r7, #4]
 8018dd4:	f000 fa60 	bl	8019298 <xQueueGenericSend>
 8018dd8:	4603      	mov	r3, r0
 8018dda:	2b01      	cmp	r3, #1
 8018ddc:	d001      	beq.n	8018de2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8018dde:	23ff      	movs	r3, #255	; 0xff
 8018de0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8018de2:	68fb      	ldr	r3, [r7, #12]
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3710      	adds	r7, #16
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	e000ed04 	.word	0xe000ed04

08018df0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8018df8:	f7ff fe59 	bl	8018aae <inHandlerMode>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d001      	beq.n	8018e06 <osMutexDelete+0x16>
    return osErrorISR;
 8018e02:	2382      	movs	r3, #130	; 0x82
 8018e04:	e003      	b.n	8018e0e <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 8018e06:	6878      	ldr	r0, [r7, #4]
 8018e08:	f000 fd5e 	bl	80198c8 <vQueueDelete>

  return osOK;
 8018e0c:	2300      	movs	r3, #0
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3708      	adds	r7, #8
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}

08018e16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018e16:	b480      	push	{r7}
 8018e18:	b083      	sub	sp, #12
 8018e1a:	af00      	add	r7, sp, #0
 8018e1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	f103 0208 	add.w	r2, r3, #8
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8018e2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	f103 0208 	add.w	r2, r3, #8
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f103 0208 	add.w	r2, r3, #8
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2200      	movs	r2, #0
 8018e48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018e4a:	bf00      	nop
 8018e4c:	370c      	adds	r7, #12
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e54:	4770      	bx	lr

08018e56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018e56:	b480      	push	{r7}
 8018e58:	b083      	sub	sp, #12
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	2200      	movs	r2, #0
 8018e62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018e64:	bf00      	nop
 8018e66:	370c      	adds	r7, #12
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6e:	4770      	bx	lr

08018e70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018e70:	b480      	push	{r7}
 8018e72:	b085      	sub	sp, #20
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	685b      	ldr	r3, [r3, #4]
 8018e7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	68fa      	ldr	r2, [r7, #12]
 8018e84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	689a      	ldr	r2, [r3, #8]
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	689b      	ldr	r3, [r3, #8]
 8018e92:	683a      	ldr	r2, [r7, #0]
 8018e94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	683a      	ldr	r2, [r7, #0]
 8018e9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	687a      	ldr	r2, [r7, #4]
 8018ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	1c5a      	adds	r2, r3, #1
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	601a      	str	r2, [r3, #0]
}
 8018eac:	bf00      	nop
 8018eae:	3714      	adds	r7, #20
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb6:	4770      	bx	lr

08018eb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018eb8:	b480      	push	{r7}
 8018eba:	b085      	sub	sp, #20
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
 8018ec0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ece:	d103      	bne.n	8018ed8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	691b      	ldr	r3, [r3, #16]
 8018ed4:	60fb      	str	r3, [r7, #12]
 8018ed6:	e00c      	b.n	8018ef2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	3308      	adds	r3, #8
 8018edc:	60fb      	str	r3, [r7, #12]
 8018ede:	e002      	b.n	8018ee6 <vListInsert+0x2e>
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	60fb      	str	r3, [r7, #12]
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	685b      	ldr	r3, [r3, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	68ba      	ldr	r2, [r7, #8]
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d2f6      	bcs.n	8018ee0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	685a      	ldr	r2, [r3, #4]
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	685b      	ldr	r3, [r3, #4]
 8018efe:	683a      	ldr	r2, [r7, #0]
 8018f00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	68fa      	ldr	r2, [r7, #12]
 8018f06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	683a      	ldr	r2, [r7, #0]
 8018f0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018f0e:	683b      	ldr	r3, [r7, #0]
 8018f10:	687a      	ldr	r2, [r7, #4]
 8018f12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	1c5a      	adds	r2, r3, #1
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	601a      	str	r2, [r3, #0]
}
 8018f1e:	bf00      	nop
 8018f20:	3714      	adds	r7, #20
 8018f22:	46bd      	mov	sp, r7
 8018f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f28:	4770      	bx	lr

08018f2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018f2a:	b480      	push	{r7}
 8018f2c:	b085      	sub	sp, #20
 8018f2e:	af00      	add	r7, sp, #0
 8018f30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	691b      	ldr	r3, [r3, #16]
 8018f36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	685b      	ldr	r3, [r3, #4]
 8018f3c:	687a      	ldr	r2, [r7, #4]
 8018f3e:	6892      	ldr	r2, [r2, #8]
 8018f40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	689b      	ldr	r3, [r3, #8]
 8018f46:	687a      	ldr	r2, [r7, #4]
 8018f48:	6852      	ldr	r2, [r2, #4]
 8018f4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	685b      	ldr	r3, [r3, #4]
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d103      	bne.n	8018f5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	689a      	ldr	r2, [r3, #8]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	2200      	movs	r2, #0
 8018f62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	1e5a      	subs	r2, r3, #1
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	681b      	ldr	r3, [r3, #0]
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3714      	adds	r7, #20
 8018f76:	46bd      	mov	sp, r7
 8018f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7c:	4770      	bx	lr
	...

08018f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d10a      	bne.n	8018faa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f98:	f383 8811 	msr	BASEPRI, r3
 8018f9c:	f3bf 8f6f 	isb	sy
 8018fa0:	f3bf 8f4f 	dsb	sy
 8018fa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018fa6:	bf00      	nop
 8018fa8:	e7fe      	b.n	8018fa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018faa:	f002 f91b 	bl	801b1e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681a      	ldr	r2, [r3, #0]
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb6:	68f9      	ldr	r1, [r7, #12]
 8018fb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018fba:	fb01 f303 	mul.w	r3, r1, r3
 8018fbe:	441a      	add	r2, r3
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	681a      	ldr	r2, [r3, #0]
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	681a      	ldr	r2, [r3, #0]
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fda:	3b01      	subs	r3, #1
 8018fdc:	68f9      	ldr	r1, [r7, #12]
 8018fde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018fe0:	fb01 f303 	mul.w	r3, r1, r3
 8018fe4:	441a      	add	r2, r3
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	22ff      	movs	r2, #255	; 0xff
 8018fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	22ff      	movs	r2, #255	; 0xff
 8018ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d114      	bne.n	801902a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	691b      	ldr	r3, [r3, #16]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d01a      	beq.n	801903e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	3310      	adds	r3, #16
 801900c:	4618      	mov	r0, r3
 801900e:	f001 f9db 	bl	801a3c8 <xTaskRemoveFromEventList>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d012      	beq.n	801903e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019018:	4b0c      	ldr	r3, [pc, #48]	; (801904c <xQueueGenericReset+0xcc>)
 801901a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801901e:	601a      	str	r2, [r3, #0]
 8019020:	f3bf 8f4f 	dsb	sy
 8019024:	f3bf 8f6f 	isb	sy
 8019028:	e009      	b.n	801903e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	3310      	adds	r3, #16
 801902e:	4618      	mov	r0, r3
 8019030:	f7ff fef1 	bl	8018e16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	3324      	adds	r3, #36	; 0x24
 8019038:	4618      	mov	r0, r3
 801903a:	f7ff feec 	bl	8018e16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801903e:	f002 f901 	bl	801b244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019042:	2301      	movs	r3, #1
}
 8019044:	4618      	mov	r0, r3
 8019046:	3710      	adds	r7, #16
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}
 801904c:	e000ed04 	.word	0xe000ed04

08019050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019050:	b580      	push	{r7, lr}
 8019052:	b08e      	sub	sp, #56	; 0x38
 8019054:	af02      	add	r7, sp, #8
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
 801905c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d10a      	bne.n	801907a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019068:	f383 8811 	msr	BASEPRI, r3
 801906c:	f3bf 8f6f 	isb	sy
 8019070:	f3bf 8f4f 	dsb	sy
 8019074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019076:	bf00      	nop
 8019078:	e7fe      	b.n	8019078 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d10a      	bne.n	8019096 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019084:	f383 8811 	msr	BASEPRI, r3
 8019088:	f3bf 8f6f 	isb	sy
 801908c:	f3bf 8f4f 	dsb	sy
 8019090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019092:	bf00      	nop
 8019094:	e7fe      	b.n	8019094 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d002      	beq.n	80190a2 <xQueueGenericCreateStatic+0x52>
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d001      	beq.n	80190a6 <xQueueGenericCreateStatic+0x56>
 80190a2:	2301      	movs	r3, #1
 80190a4:	e000      	b.n	80190a8 <xQueueGenericCreateStatic+0x58>
 80190a6:	2300      	movs	r3, #0
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d10a      	bne.n	80190c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80190ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190b0:	f383 8811 	msr	BASEPRI, r3
 80190b4:	f3bf 8f6f 	isb	sy
 80190b8:	f3bf 8f4f 	dsb	sy
 80190bc:	623b      	str	r3, [r7, #32]
}
 80190be:	bf00      	nop
 80190c0:	e7fe      	b.n	80190c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d102      	bne.n	80190ce <xQueueGenericCreateStatic+0x7e>
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d101      	bne.n	80190d2 <xQueueGenericCreateStatic+0x82>
 80190ce:	2301      	movs	r3, #1
 80190d0:	e000      	b.n	80190d4 <xQueueGenericCreateStatic+0x84>
 80190d2:	2300      	movs	r3, #0
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d10a      	bne.n	80190ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80190d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190dc:	f383 8811 	msr	BASEPRI, r3
 80190e0:	f3bf 8f6f 	isb	sy
 80190e4:	f3bf 8f4f 	dsb	sy
 80190e8:	61fb      	str	r3, [r7, #28]
}
 80190ea:	bf00      	nop
 80190ec:	e7fe      	b.n	80190ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80190ee:	2348      	movs	r3, #72	; 0x48
 80190f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	2b48      	cmp	r3, #72	; 0x48
 80190f6:	d00a      	beq.n	801910e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80190f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190fc:	f383 8811 	msr	BASEPRI, r3
 8019100:	f3bf 8f6f 	isb	sy
 8019104:	f3bf 8f4f 	dsb	sy
 8019108:	61bb      	str	r3, [r7, #24]
}
 801910a:	bf00      	nop
 801910c:	e7fe      	b.n	801910c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801910e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019116:	2b00      	cmp	r3, #0
 8019118:	d00d      	beq.n	8019136 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911c:	2201      	movs	r2, #1
 801911e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019122:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019128:	9300      	str	r3, [sp, #0]
 801912a:	4613      	mov	r3, r2
 801912c:	687a      	ldr	r2, [r7, #4]
 801912e:	68b9      	ldr	r1, [r7, #8]
 8019130:	68f8      	ldr	r0, [r7, #12]
 8019132:	f000 f845 	bl	80191c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019138:	4618      	mov	r0, r3
 801913a:	3730      	adds	r7, #48	; 0x30
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019140:	b580      	push	{r7, lr}
 8019142:	b08a      	sub	sp, #40	; 0x28
 8019144:	af02      	add	r7, sp, #8
 8019146:	60f8      	str	r0, [r7, #12]
 8019148:	60b9      	str	r1, [r7, #8]
 801914a:	4613      	mov	r3, r2
 801914c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d10a      	bne.n	801916a <xQueueGenericCreate+0x2a>
	__asm volatile
 8019154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019158:	f383 8811 	msr	BASEPRI, r3
 801915c:	f3bf 8f6f 	isb	sy
 8019160:	f3bf 8f4f 	dsb	sy
 8019164:	613b      	str	r3, [r7, #16]
}
 8019166:	bf00      	nop
 8019168:	e7fe      	b.n	8019168 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d102      	bne.n	8019176 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8019170:	2300      	movs	r3, #0
 8019172:	61fb      	str	r3, [r7, #28]
 8019174:	e004      	b.n	8019180 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	68ba      	ldr	r2, [r7, #8]
 801917a:	fb02 f303 	mul.w	r3, r2, r3
 801917e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019180:	69fb      	ldr	r3, [r7, #28]
 8019182:	3348      	adds	r3, #72	; 0x48
 8019184:	4618      	mov	r0, r3
 8019186:	f002 f94f 	bl	801b428 <pvPortMalloc>
 801918a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801918c:	69bb      	ldr	r3, [r7, #24]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d011      	beq.n	80191b6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019192:	69bb      	ldr	r3, [r7, #24]
 8019194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	3348      	adds	r3, #72	; 0x48
 801919a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801919c:	69bb      	ldr	r3, [r7, #24]
 801919e:	2200      	movs	r2, #0
 80191a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80191a4:	79fa      	ldrb	r2, [r7, #7]
 80191a6:	69bb      	ldr	r3, [r7, #24]
 80191a8:	9300      	str	r3, [sp, #0]
 80191aa:	4613      	mov	r3, r2
 80191ac:	697a      	ldr	r2, [r7, #20]
 80191ae:	68b9      	ldr	r1, [r7, #8]
 80191b0:	68f8      	ldr	r0, [r7, #12]
 80191b2:	f000 f805 	bl	80191c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80191b6:	69bb      	ldr	r3, [r7, #24]
	}
 80191b8:	4618      	mov	r0, r3
 80191ba:	3720      	adds	r7, #32
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b084      	sub	sp, #16
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	60f8      	str	r0, [r7, #12]
 80191c8:	60b9      	str	r1, [r7, #8]
 80191ca:	607a      	str	r2, [r7, #4]
 80191cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d103      	bne.n	80191dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80191d4:	69bb      	ldr	r3, [r7, #24]
 80191d6:	69ba      	ldr	r2, [r7, #24]
 80191d8:	601a      	str	r2, [r3, #0]
 80191da:	e002      	b.n	80191e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80191dc:	69bb      	ldr	r3, [r7, #24]
 80191de:	687a      	ldr	r2, [r7, #4]
 80191e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80191e2:	69bb      	ldr	r3, [r7, #24]
 80191e4:	68fa      	ldr	r2, [r7, #12]
 80191e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80191e8:	69bb      	ldr	r3, [r7, #24]
 80191ea:	68ba      	ldr	r2, [r7, #8]
 80191ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80191ee:	2101      	movs	r1, #1
 80191f0:	69b8      	ldr	r0, [r7, #24]
 80191f2:	f7ff fec5 	bl	8018f80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80191f6:	bf00      	nop
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80191fe:	b580      	push	{r7, lr}
 8019200:	b082      	sub	sp, #8
 8019202:	af00      	add	r7, sp, #0
 8019204:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d00e      	beq.n	801922a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	2200      	movs	r2, #0
 8019210:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2200      	movs	r2, #0
 8019216:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2200      	movs	r2, #0
 801921c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801921e:	2300      	movs	r3, #0
 8019220:	2200      	movs	r2, #0
 8019222:	2100      	movs	r1, #0
 8019224:	6878      	ldr	r0, [r7, #4]
 8019226:	f000 f837 	bl	8019298 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801922a:	bf00      	nop
 801922c:	3708      	adds	r7, #8
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}

08019232 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019232:	b580      	push	{r7, lr}
 8019234:	b086      	sub	sp, #24
 8019236:	af00      	add	r7, sp, #0
 8019238:	4603      	mov	r3, r0
 801923a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801923c:	2301      	movs	r3, #1
 801923e:	617b      	str	r3, [r7, #20]
 8019240:	2300      	movs	r3, #0
 8019242:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019244:	79fb      	ldrb	r3, [r7, #7]
 8019246:	461a      	mov	r2, r3
 8019248:	6939      	ldr	r1, [r7, #16]
 801924a:	6978      	ldr	r0, [r7, #20]
 801924c:	f7ff ff78 	bl	8019140 <xQueueGenericCreate>
 8019250:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019252:	68f8      	ldr	r0, [r7, #12]
 8019254:	f7ff ffd3 	bl	80191fe <prvInitialiseMutex>

		return xNewQueue;
 8019258:	68fb      	ldr	r3, [r7, #12]
	}
 801925a:	4618      	mov	r0, r3
 801925c:	3718      	adds	r7, #24
 801925e:	46bd      	mov	sp, r7
 8019260:	bd80      	pop	{r7, pc}

08019262 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019262:	b580      	push	{r7, lr}
 8019264:	b088      	sub	sp, #32
 8019266:	af02      	add	r7, sp, #8
 8019268:	4603      	mov	r3, r0
 801926a:	6039      	str	r1, [r7, #0]
 801926c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801926e:	2301      	movs	r3, #1
 8019270:	617b      	str	r3, [r7, #20]
 8019272:	2300      	movs	r3, #0
 8019274:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019276:	79fb      	ldrb	r3, [r7, #7]
 8019278:	9300      	str	r3, [sp, #0]
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	2200      	movs	r2, #0
 801927e:	6939      	ldr	r1, [r7, #16]
 8019280:	6978      	ldr	r0, [r7, #20]
 8019282:	f7ff fee5 	bl	8019050 <xQueueGenericCreateStatic>
 8019286:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f7ff ffb8 	bl	80191fe <prvInitialiseMutex>

		return xNewQueue;
 801928e:	68fb      	ldr	r3, [r7, #12]
	}
 8019290:	4618      	mov	r0, r3
 8019292:	3718      	adds	r7, #24
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}

08019298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b08e      	sub	sp, #56	; 0x38
 801929c:	af00      	add	r7, sp, #0
 801929e:	60f8      	str	r0, [r7, #12]
 80192a0:	60b9      	str	r1, [r7, #8]
 80192a2:	607a      	str	r2, [r7, #4]
 80192a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80192a6:	2300      	movs	r3, #0
 80192a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80192ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d10a      	bne.n	80192ca <xQueueGenericSend+0x32>
	__asm volatile
 80192b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b8:	f383 8811 	msr	BASEPRI, r3
 80192bc:	f3bf 8f6f 	isb	sy
 80192c0:	f3bf 8f4f 	dsb	sy
 80192c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80192c6:	bf00      	nop
 80192c8:	e7fe      	b.n	80192c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d103      	bne.n	80192d8 <xQueueGenericSend+0x40>
 80192d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d101      	bne.n	80192dc <xQueueGenericSend+0x44>
 80192d8:	2301      	movs	r3, #1
 80192da:	e000      	b.n	80192de <xQueueGenericSend+0x46>
 80192dc:	2300      	movs	r3, #0
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d10a      	bne.n	80192f8 <xQueueGenericSend+0x60>
	__asm volatile
 80192e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e6:	f383 8811 	msr	BASEPRI, r3
 80192ea:	f3bf 8f6f 	isb	sy
 80192ee:	f3bf 8f4f 	dsb	sy
 80192f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80192f4:	bf00      	nop
 80192f6:	e7fe      	b.n	80192f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	2b02      	cmp	r3, #2
 80192fc:	d103      	bne.n	8019306 <xQueueGenericSend+0x6e>
 80192fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019302:	2b01      	cmp	r3, #1
 8019304:	d101      	bne.n	801930a <xQueueGenericSend+0x72>
 8019306:	2301      	movs	r3, #1
 8019308:	e000      	b.n	801930c <xQueueGenericSend+0x74>
 801930a:	2300      	movs	r3, #0
 801930c:	2b00      	cmp	r3, #0
 801930e:	d10a      	bne.n	8019326 <xQueueGenericSend+0x8e>
	__asm volatile
 8019310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019314:	f383 8811 	msr	BASEPRI, r3
 8019318:	f3bf 8f6f 	isb	sy
 801931c:	f3bf 8f4f 	dsb	sy
 8019320:	623b      	str	r3, [r7, #32]
}
 8019322:	bf00      	nop
 8019324:	e7fe      	b.n	8019324 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019326:	f001 fa0b 	bl	801a740 <xTaskGetSchedulerState>
 801932a:	4603      	mov	r3, r0
 801932c:	2b00      	cmp	r3, #0
 801932e:	d102      	bne.n	8019336 <xQueueGenericSend+0x9e>
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d101      	bne.n	801933a <xQueueGenericSend+0xa2>
 8019336:	2301      	movs	r3, #1
 8019338:	e000      	b.n	801933c <xQueueGenericSend+0xa4>
 801933a:	2300      	movs	r3, #0
 801933c:	2b00      	cmp	r3, #0
 801933e:	d10a      	bne.n	8019356 <xQueueGenericSend+0xbe>
	__asm volatile
 8019340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019344:	f383 8811 	msr	BASEPRI, r3
 8019348:	f3bf 8f6f 	isb	sy
 801934c:	f3bf 8f4f 	dsb	sy
 8019350:	61fb      	str	r3, [r7, #28]
}
 8019352:	bf00      	nop
 8019354:	e7fe      	b.n	8019354 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019356:	f001 ff45 	bl	801b1e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801935c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019362:	429a      	cmp	r2, r3
 8019364:	d302      	bcc.n	801936c <xQueueGenericSend+0xd4>
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	2b02      	cmp	r3, #2
 801936a:	d129      	bne.n	80193c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801936c:	683a      	ldr	r2, [r7, #0]
 801936e:	68b9      	ldr	r1, [r7, #8]
 8019370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019372:	f000 fae4 	bl	801993e <prvCopyDataToQueue>
 8019376:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801937c:	2b00      	cmp	r3, #0
 801937e:	d010      	beq.n	80193a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019382:	3324      	adds	r3, #36	; 0x24
 8019384:	4618      	mov	r0, r3
 8019386:	f001 f81f 	bl	801a3c8 <xTaskRemoveFromEventList>
 801938a:	4603      	mov	r3, r0
 801938c:	2b00      	cmp	r3, #0
 801938e:	d013      	beq.n	80193b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019390:	4b3f      	ldr	r3, [pc, #252]	; (8019490 <xQueueGenericSend+0x1f8>)
 8019392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019396:	601a      	str	r2, [r3, #0]
 8019398:	f3bf 8f4f 	dsb	sy
 801939c:	f3bf 8f6f 	isb	sy
 80193a0:	e00a      	b.n	80193b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80193a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d007      	beq.n	80193b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80193a8:	4b39      	ldr	r3, [pc, #228]	; (8019490 <xQueueGenericSend+0x1f8>)
 80193aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193ae:	601a      	str	r2, [r3, #0]
 80193b0:	f3bf 8f4f 	dsb	sy
 80193b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80193b8:	f001 ff44 	bl	801b244 <vPortExitCritical>
				return pdPASS;
 80193bc:	2301      	movs	r3, #1
 80193be:	e063      	b.n	8019488 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d103      	bne.n	80193ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80193c6:	f001 ff3d 	bl	801b244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80193ca:	2300      	movs	r3, #0
 80193cc:	e05c      	b.n	8019488 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80193ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d106      	bne.n	80193e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80193d4:	f107 0314 	add.w	r3, r7, #20
 80193d8:	4618      	mov	r0, r3
 80193da:	f001 f857 	bl	801a48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80193de:	2301      	movs	r3, #1
 80193e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80193e2:	f001 ff2f 	bl	801b244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80193e6:	f000 fe0d 	bl	801a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80193ea:	f001 fefb 	bl	801b1e4 <vPortEnterCritical>
 80193ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80193f4:	b25b      	sxtb	r3, r3
 80193f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193fa:	d103      	bne.n	8019404 <xQueueGenericSend+0x16c>
 80193fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193fe:	2200      	movs	r2, #0
 8019400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801940a:	b25b      	sxtb	r3, r3
 801940c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019410:	d103      	bne.n	801941a <xQueueGenericSend+0x182>
 8019412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019414:	2200      	movs	r2, #0
 8019416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801941a:	f001 ff13 	bl	801b244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801941e:	1d3a      	adds	r2, r7, #4
 8019420:	f107 0314 	add.w	r3, r7, #20
 8019424:	4611      	mov	r1, r2
 8019426:	4618      	mov	r0, r3
 8019428:	f001 f846 	bl	801a4b8 <xTaskCheckForTimeOut>
 801942c:	4603      	mov	r3, r0
 801942e:	2b00      	cmp	r3, #0
 8019430:	d124      	bne.n	801947c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019434:	f000 fb7b 	bl	8019b2e <prvIsQueueFull>
 8019438:	4603      	mov	r3, r0
 801943a:	2b00      	cmp	r3, #0
 801943c:	d018      	beq.n	8019470 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019440:	3310      	adds	r3, #16
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	4611      	mov	r1, r2
 8019446:	4618      	mov	r0, r3
 8019448:	f000 ff9a 	bl	801a380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801944c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801944e:	f000 fb06 	bl	8019a5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019452:	f000 fde5 	bl	801a020 <xTaskResumeAll>
 8019456:	4603      	mov	r3, r0
 8019458:	2b00      	cmp	r3, #0
 801945a:	f47f af7c 	bne.w	8019356 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801945e:	4b0c      	ldr	r3, [pc, #48]	; (8019490 <xQueueGenericSend+0x1f8>)
 8019460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019464:	601a      	str	r2, [r3, #0]
 8019466:	f3bf 8f4f 	dsb	sy
 801946a:	f3bf 8f6f 	isb	sy
 801946e:	e772      	b.n	8019356 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019472:	f000 faf4 	bl	8019a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019476:	f000 fdd3 	bl	801a020 <xTaskResumeAll>
 801947a:	e76c      	b.n	8019356 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801947c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801947e:	f000 faee 	bl	8019a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019482:	f000 fdcd 	bl	801a020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019486:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019488:	4618      	mov	r0, r3
 801948a:	3738      	adds	r7, #56	; 0x38
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}
 8019490:	e000ed04 	.word	0xe000ed04

08019494 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b08e      	sub	sp, #56	; 0x38
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80194a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d10a      	bne.n	80194be <xQueueGiveFromISR+0x2a>
	__asm volatile
 80194a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ac:	f383 8811 	msr	BASEPRI, r3
 80194b0:	f3bf 8f6f 	isb	sy
 80194b4:	f3bf 8f4f 	dsb	sy
 80194b8:	623b      	str	r3, [r7, #32]
}
 80194ba:	bf00      	nop
 80194bc:	e7fe      	b.n	80194bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80194be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d00a      	beq.n	80194dc <xQueueGiveFromISR+0x48>
	__asm volatile
 80194c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ca:	f383 8811 	msr	BASEPRI, r3
 80194ce:	f3bf 8f6f 	isb	sy
 80194d2:	f3bf 8f4f 	dsb	sy
 80194d6:	61fb      	str	r3, [r7, #28]
}
 80194d8:	bf00      	nop
 80194da:	e7fe      	b.n	80194da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80194dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d103      	bne.n	80194ec <xQueueGiveFromISR+0x58>
 80194e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194e6:	689b      	ldr	r3, [r3, #8]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d101      	bne.n	80194f0 <xQueueGiveFromISR+0x5c>
 80194ec:	2301      	movs	r3, #1
 80194ee:	e000      	b.n	80194f2 <xQueueGiveFromISR+0x5e>
 80194f0:	2300      	movs	r3, #0
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d10a      	bne.n	801950c <xQueueGiveFromISR+0x78>
	__asm volatile
 80194f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194fa:	f383 8811 	msr	BASEPRI, r3
 80194fe:	f3bf 8f6f 	isb	sy
 8019502:	f3bf 8f4f 	dsb	sy
 8019506:	61bb      	str	r3, [r7, #24]
}
 8019508:	bf00      	nop
 801950a:	e7fe      	b.n	801950a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801950c:	f001 ff4c 	bl	801b3a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019510:	f3ef 8211 	mrs	r2, BASEPRI
 8019514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019518:	f383 8811 	msr	BASEPRI, r3
 801951c:	f3bf 8f6f 	isb	sy
 8019520:	f3bf 8f4f 	dsb	sy
 8019524:	617a      	str	r2, [r7, #20]
 8019526:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019528:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801952a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019530:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019538:	429a      	cmp	r2, r3
 801953a:	d22b      	bcs.n	8019594 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801953e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019548:	1c5a      	adds	r2, r3, #1
 801954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801954c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801954e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019556:	d112      	bne.n	801957e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801955c:	2b00      	cmp	r3, #0
 801955e:	d016      	beq.n	801958e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019562:	3324      	adds	r3, #36	; 0x24
 8019564:	4618      	mov	r0, r3
 8019566:	f000 ff2f 	bl	801a3c8 <xTaskRemoveFromEventList>
 801956a:	4603      	mov	r3, r0
 801956c:	2b00      	cmp	r3, #0
 801956e:	d00e      	beq.n	801958e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019570:	683b      	ldr	r3, [r7, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00b      	beq.n	801958e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	2201      	movs	r2, #1
 801957a:	601a      	str	r2, [r3, #0]
 801957c:	e007      	b.n	801958e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801957e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019582:	3301      	adds	r3, #1
 8019584:	b2db      	uxtb	r3, r3
 8019586:	b25a      	sxtb	r2, r3
 8019588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801958a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801958e:	2301      	movs	r3, #1
 8019590:	637b      	str	r3, [r7, #52]	; 0x34
 8019592:	e001      	b.n	8019598 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019594:	2300      	movs	r3, #0
 8019596:	637b      	str	r3, [r7, #52]	; 0x34
 8019598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80195a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80195a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80195a6:	4618      	mov	r0, r3
 80195a8:	3738      	adds	r7, #56	; 0x38
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bd80      	pop	{r7, pc}
	...

080195b0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b08e      	sub	sp, #56	; 0x38
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
 80195b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80195ba:	2300      	movs	r3, #0
 80195bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80195c2:	2300      	movs	r3, #0
 80195c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80195c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d10a      	bne.n	80195e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80195cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195d0:	f383 8811 	msr	BASEPRI, r3
 80195d4:	f3bf 8f6f 	isb	sy
 80195d8:	f3bf 8f4f 	dsb	sy
 80195dc:	623b      	str	r3, [r7, #32]
}
 80195de:	bf00      	nop
 80195e0:	e7fe      	b.n	80195e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80195e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d00a      	beq.n	8019600 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80195ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195ee:	f383 8811 	msr	BASEPRI, r3
 80195f2:	f3bf 8f6f 	isb	sy
 80195f6:	f3bf 8f4f 	dsb	sy
 80195fa:	61fb      	str	r3, [r7, #28]
}
 80195fc:	bf00      	nop
 80195fe:	e7fe      	b.n	80195fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019600:	f001 f89e 	bl	801a740 <xTaskGetSchedulerState>
 8019604:	4603      	mov	r3, r0
 8019606:	2b00      	cmp	r3, #0
 8019608:	d102      	bne.n	8019610 <xQueueSemaphoreTake+0x60>
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d101      	bne.n	8019614 <xQueueSemaphoreTake+0x64>
 8019610:	2301      	movs	r3, #1
 8019612:	e000      	b.n	8019616 <xQueueSemaphoreTake+0x66>
 8019614:	2300      	movs	r3, #0
 8019616:	2b00      	cmp	r3, #0
 8019618:	d10a      	bne.n	8019630 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961e:	f383 8811 	msr	BASEPRI, r3
 8019622:	f3bf 8f6f 	isb	sy
 8019626:	f3bf 8f4f 	dsb	sy
 801962a:	61bb      	str	r3, [r7, #24]
}
 801962c:	bf00      	nop
 801962e:	e7fe      	b.n	801962e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019630:	f001 fdd8 	bl	801b1e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019638:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963c:	2b00      	cmp	r3, #0
 801963e:	d024      	beq.n	801968a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019642:	1e5a      	subs	r2, r3, #1
 8019644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019646:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d104      	bne.n	801965a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019650:	f001 fa34 	bl	801aabc <pvTaskIncrementMutexHeldCount>
 8019654:	4602      	mov	r2, r0
 8019656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019658:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965c:	691b      	ldr	r3, [r3, #16]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d00f      	beq.n	8019682 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019664:	3310      	adds	r3, #16
 8019666:	4618      	mov	r0, r3
 8019668:	f000 feae 	bl	801a3c8 <xTaskRemoveFromEventList>
 801966c:	4603      	mov	r3, r0
 801966e:	2b00      	cmp	r3, #0
 8019670:	d007      	beq.n	8019682 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019672:	4b54      	ldr	r3, [pc, #336]	; (80197c4 <xQueueSemaphoreTake+0x214>)
 8019674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019678:	601a      	str	r2, [r3, #0]
 801967a:	f3bf 8f4f 	dsb	sy
 801967e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019682:	f001 fddf 	bl	801b244 <vPortExitCritical>
				return pdPASS;
 8019686:	2301      	movs	r3, #1
 8019688:	e097      	b.n	80197ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d111      	bne.n	80196b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019692:	2b00      	cmp	r3, #0
 8019694:	d00a      	beq.n	80196ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8019696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801969a:	f383 8811 	msr	BASEPRI, r3
 801969e:	f3bf 8f6f 	isb	sy
 80196a2:	f3bf 8f4f 	dsb	sy
 80196a6:	617b      	str	r3, [r7, #20]
}
 80196a8:	bf00      	nop
 80196aa:	e7fe      	b.n	80196aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80196ac:	f001 fdca 	bl	801b244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80196b0:	2300      	movs	r3, #0
 80196b2:	e082      	b.n	80197ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80196b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d106      	bne.n	80196c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80196ba:	f107 030c 	add.w	r3, r7, #12
 80196be:	4618      	mov	r0, r3
 80196c0:	f000 fee4 	bl	801a48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80196c4:	2301      	movs	r3, #1
 80196c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80196c8:	f001 fdbc 	bl	801b244 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80196cc:	f000 fc9a 	bl	801a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80196d0:	f001 fd88 	bl	801b1e4 <vPortEnterCritical>
 80196d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80196da:	b25b      	sxtb	r3, r3
 80196dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196e0:	d103      	bne.n	80196ea <xQueueSemaphoreTake+0x13a>
 80196e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e4:	2200      	movs	r2, #0
 80196e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80196ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80196f0:	b25b      	sxtb	r3, r3
 80196f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196f6:	d103      	bne.n	8019700 <xQueueSemaphoreTake+0x150>
 80196f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196fa:	2200      	movs	r2, #0
 80196fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019700:	f001 fda0 	bl	801b244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019704:	463a      	mov	r2, r7
 8019706:	f107 030c 	add.w	r3, r7, #12
 801970a:	4611      	mov	r1, r2
 801970c:	4618      	mov	r0, r3
 801970e:	f000 fed3 	bl	801a4b8 <xTaskCheckForTimeOut>
 8019712:	4603      	mov	r3, r0
 8019714:	2b00      	cmp	r3, #0
 8019716:	d132      	bne.n	801977e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801971a:	f000 f9f2 	bl	8019b02 <prvIsQueueEmpty>
 801971e:	4603      	mov	r3, r0
 8019720:	2b00      	cmp	r3, #0
 8019722:	d026      	beq.n	8019772 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d109      	bne.n	8019740 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801972c:	f001 fd5a 	bl	801b1e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019732:	689b      	ldr	r3, [r3, #8]
 8019734:	4618      	mov	r0, r3
 8019736:	f001 f821 	bl	801a77c <xTaskPriorityInherit>
 801973a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801973c:	f001 fd82 	bl	801b244 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019742:	3324      	adds	r3, #36	; 0x24
 8019744:	683a      	ldr	r2, [r7, #0]
 8019746:	4611      	mov	r1, r2
 8019748:	4618      	mov	r0, r3
 801974a:	f000 fe19 	bl	801a380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801974e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019750:	f000 f985 	bl	8019a5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019754:	f000 fc64 	bl	801a020 <xTaskResumeAll>
 8019758:	4603      	mov	r3, r0
 801975a:	2b00      	cmp	r3, #0
 801975c:	f47f af68 	bne.w	8019630 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8019760:	4b18      	ldr	r3, [pc, #96]	; (80197c4 <xQueueSemaphoreTake+0x214>)
 8019762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019766:	601a      	str	r2, [r3, #0]
 8019768:	f3bf 8f4f 	dsb	sy
 801976c:	f3bf 8f6f 	isb	sy
 8019770:	e75e      	b.n	8019630 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019774:	f000 f973 	bl	8019a5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019778:	f000 fc52 	bl	801a020 <xTaskResumeAll>
 801977c:	e758      	b.n	8019630 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801977e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019780:	f000 f96d 	bl	8019a5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019784:	f000 fc4c 	bl	801a020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801978a:	f000 f9ba 	bl	8019b02 <prvIsQueueEmpty>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	f43f af4d 	beq.w	8019630 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019798:	2b00      	cmp	r3, #0
 801979a:	d00d      	beq.n	80197b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801979c:	f001 fd22 	bl	801b1e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80197a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197a2:	f000 f8b4 	bl	801990e <prvGetDisinheritPriorityAfterTimeout>
 80197a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80197a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197aa:	689b      	ldr	r3, [r3, #8]
 80197ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197ae:	4618      	mov	r0, r3
 80197b0:	f001 f8ea 	bl	801a988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80197b4:	f001 fd46 	bl	801b244 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80197b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	3738      	adds	r7, #56	; 0x38
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd80      	pop	{r7, pc}
 80197c2:	bf00      	nop
 80197c4:	e000ed04 	.word	0xe000ed04

080197c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b08e      	sub	sp, #56	; 0x38
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80197d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d10a      	bne.n	80197f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80197de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197e2:	f383 8811 	msr	BASEPRI, r3
 80197e6:	f3bf 8f6f 	isb	sy
 80197ea:	f3bf 8f4f 	dsb	sy
 80197ee:	623b      	str	r3, [r7, #32]
}
 80197f0:	bf00      	nop
 80197f2:	e7fe      	b.n	80197f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d103      	bne.n	8019802 <xQueueReceiveFromISR+0x3a>
 80197fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d101      	bne.n	8019806 <xQueueReceiveFromISR+0x3e>
 8019802:	2301      	movs	r3, #1
 8019804:	e000      	b.n	8019808 <xQueueReceiveFromISR+0x40>
 8019806:	2300      	movs	r3, #0
 8019808:	2b00      	cmp	r3, #0
 801980a:	d10a      	bne.n	8019822 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019810:	f383 8811 	msr	BASEPRI, r3
 8019814:	f3bf 8f6f 	isb	sy
 8019818:	f3bf 8f4f 	dsb	sy
 801981c:	61fb      	str	r3, [r7, #28]
}
 801981e:	bf00      	nop
 8019820:	e7fe      	b.n	8019820 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019822:	f001 fdc1 	bl	801b3a8 <vPortValidateInterruptPriority>
	__asm volatile
 8019826:	f3ef 8211 	mrs	r2, BASEPRI
 801982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801982e:	f383 8811 	msr	BASEPRI, r3
 8019832:	f3bf 8f6f 	isb	sy
 8019836:	f3bf 8f4f 	dsb	sy
 801983a:	61ba      	str	r2, [r7, #24]
 801983c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801983e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019840:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019846:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984a:	2b00      	cmp	r3, #0
 801984c:	d02f      	beq.n	80198ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019858:	68b9      	ldr	r1, [r7, #8]
 801985a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801985c:	f000 f8d9 	bl	8019a12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019862:	1e5a      	subs	r2, r3, #1
 8019864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019866:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019868:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019870:	d112      	bne.n	8019898 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019874:	691b      	ldr	r3, [r3, #16]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d016      	beq.n	80198a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801987c:	3310      	adds	r3, #16
 801987e:	4618      	mov	r0, r3
 8019880:	f000 fda2 	bl	801a3c8 <xTaskRemoveFromEventList>
 8019884:	4603      	mov	r3, r0
 8019886:	2b00      	cmp	r3, #0
 8019888:	d00e      	beq.n	80198a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d00b      	beq.n	80198a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2201      	movs	r2, #1
 8019894:	601a      	str	r2, [r3, #0]
 8019896:	e007      	b.n	80198a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801989c:	3301      	adds	r3, #1
 801989e:	b2db      	uxtb	r3, r3
 80198a0:	b25a      	sxtb	r2, r3
 80198a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80198a8:	2301      	movs	r3, #1
 80198aa:	637b      	str	r3, [r7, #52]	; 0x34
 80198ac:	e001      	b.n	80198b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80198ae:	2300      	movs	r3, #0
 80198b0:	637b      	str	r3, [r7, #52]	; 0x34
 80198b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80198b6:	693b      	ldr	r3, [r7, #16]
 80198b8:	f383 8811 	msr	BASEPRI, r3
}
 80198bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80198be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80198c0:	4618      	mov	r0, r3
 80198c2:	3738      	adds	r7, #56	; 0x38
 80198c4:	46bd      	mov	sp, r7
 80198c6:	bd80      	pop	{r7, pc}

080198c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b084      	sub	sp, #16
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d10a      	bne.n	80198f0 <vQueueDelete+0x28>
	__asm volatile
 80198da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198de:	f383 8811 	msr	BASEPRI, r3
 80198e2:	f3bf 8f6f 	isb	sy
 80198e6:	f3bf 8f4f 	dsb	sy
 80198ea:	60bb      	str	r3, [r7, #8]
}
 80198ec:	bf00      	nop
 80198ee:	e7fe      	b.n	80198ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80198f0:	68f8      	ldr	r0, [r7, #12]
 80198f2:	f000 f935 	bl	8019b60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d102      	bne.n	8019906 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8019900:	68f8      	ldr	r0, [r7, #12]
 8019902:	f001 fe55 	bl	801b5b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8019906:	bf00      	nop
 8019908:	3710      	adds	r7, #16
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801990e:	b480      	push	{r7}
 8019910:	b085      	sub	sp, #20
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991a:	2b00      	cmp	r3, #0
 801991c:	d006      	beq.n	801992c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	f1c3 0307 	rsb	r3, r3, #7
 8019928:	60fb      	str	r3, [r7, #12]
 801992a:	e001      	b.n	8019930 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801992c:	2300      	movs	r3, #0
 801992e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019930:	68fb      	ldr	r3, [r7, #12]
	}
 8019932:	4618      	mov	r0, r3
 8019934:	3714      	adds	r7, #20
 8019936:	46bd      	mov	sp, r7
 8019938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993c:	4770      	bx	lr

0801993e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801993e:	b580      	push	{r7, lr}
 8019940:	b086      	sub	sp, #24
 8019942:	af00      	add	r7, sp, #0
 8019944:	60f8      	str	r0, [r7, #12]
 8019946:	60b9      	str	r1, [r7, #8]
 8019948:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801994a:	2300      	movs	r3, #0
 801994c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019952:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019958:	2b00      	cmp	r3, #0
 801995a:	d10d      	bne.n	8019978 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d14d      	bne.n	8019a00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	689b      	ldr	r3, [r3, #8]
 8019968:	4618      	mov	r0, r3
 801996a:	f000 ff87 	bl	801a87c <xTaskPriorityDisinherit>
 801996e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	2200      	movs	r2, #0
 8019974:	609a      	str	r2, [r3, #8]
 8019976:	e043      	b.n	8019a00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d119      	bne.n	80199b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	6858      	ldr	r0, [r3, #4]
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019986:	461a      	mov	r2, r3
 8019988:	68b9      	ldr	r1, [r7, #8]
 801998a:	f001 ff61 	bl	801b850 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	685a      	ldr	r2, [r3, #4]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019996:	441a      	add	r2, r3
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	685a      	ldr	r2, [r3, #4]
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	689b      	ldr	r3, [r3, #8]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d32b      	bcc.n	8019a00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	605a      	str	r2, [r3, #4]
 80199b0:	e026      	b.n	8019a00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	68d8      	ldr	r0, [r3, #12]
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ba:	461a      	mov	r2, r3
 80199bc:	68b9      	ldr	r1, [r7, #8]
 80199be:	f001 ff47 	bl	801b850 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	68da      	ldr	r2, [r3, #12]
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ca:	425b      	negs	r3, r3
 80199cc:	441a      	add	r2, r3
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	68da      	ldr	r2, [r3, #12]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d207      	bcs.n	80199ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	689a      	ldr	r2, [r3, #8]
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199e6:	425b      	negs	r3, r3
 80199e8:	441a      	add	r2, r3
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	2b02      	cmp	r3, #2
 80199f2:	d105      	bne.n	8019a00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d002      	beq.n	8019a00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	3b01      	subs	r3, #1
 80199fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	1c5a      	adds	r2, r3, #1
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019a08:	697b      	ldr	r3, [r7, #20]
}
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3718      	adds	r7, #24
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}

08019a12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019a12:	b580      	push	{r7, lr}
 8019a14:	b082      	sub	sp, #8
 8019a16:	af00      	add	r7, sp, #0
 8019a18:	6078      	str	r0, [r7, #4]
 8019a1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d018      	beq.n	8019a56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	68da      	ldr	r2, [r3, #12]
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a2c:	441a      	add	r2, r3
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	68da      	ldr	r2, [r3, #12]
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	689b      	ldr	r3, [r3, #8]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d303      	bcc.n	8019a46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681a      	ldr	r2, [r3, #0]
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	68d9      	ldr	r1, [r3, #12]
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a4e:	461a      	mov	r2, r3
 8019a50:	6838      	ldr	r0, [r7, #0]
 8019a52:	f001 fefd 	bl	801b850 <memcpy>
	}
}
 8019a56:	bf00      	nop
 8019a58:	3708      	adds	r7, #8
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019a5e:	b580      	push	{r7, lr}
 8019a60:	b084      	sub	sp, #16
 8019a62:	af00      	add	r7, sp, #0
 8019a64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019a66:	f001 fbbd 	bl	801b1e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019a72:	e011      	b.n	8019a98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d012      	beq.n	8019aa2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	3324      	adds	r3, #36	; 0x24
 8019a80:	4618      	mov	r0, r3
 8019a82:	f000 fca1 	bl	801a3c8 <xTaskRemoveFromEventList>
 8019a86:	4603      	mov	r3, r0
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d001      	beq.n	8019a90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019a8c:	f000 fd76 	bl	801a57c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019a90:	7bfb      	ldrb	r3, [r7, #15]
 8019a92:	3b01      	subs	r3, #1
 8019a94:	b2db      	uxtb	r3, r3
 8019a96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	dce9      	bgt.n	8019a74 <prvUnlockQueue+0x16>
 8019aa0:	e000      	b.n	8019aa4 <prvUnlockQueue+0x46>
					break;
 8019aa2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	22ff      	movs	r2, #255	; 0xff
 8019aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019aac:	f001 fbca 	bl	801b244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019ab0:	f001 fb98 	bl	801b1e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019aba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019abc:	e011      	b.n	8019ae2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	691b      	ldr	r3, [r3, #16]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d012      	beq.n	8019aec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	3310      	adds	r3, #16
 8019aca:	4618      	mov	r0, r3
 8019acc:	f000 fc7c 	bl	801a3c8 <xTaskRemoveFromEventList>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d001      	beq.n	8019ada <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019ad6:	f000 fd51 	bl	801a57c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019ada:	7bbb      	ldrb	r3, [r7, #14]
 8019adc:	3b01      	subs	r3, #1
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	dce9      	bgt.n	8019abe <prvUnlockQueue+0x60>
 8019aea:	e000      	b.n	8019aee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019aec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	22ff      	movs	r2, #255	; 0xff
 8019af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019af6:	f001 fba5 	bl	801b244 <vPortExitCritical>
}
 8019afa:	bf00      	nop
 8019afc:	3710      	adds	r7, #16
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}

08019b02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b084      	sub	sp, #16
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019b0a:	f001 fb6b 	bl	801b1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d102      	bne.n	8019b1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019b16:	2301      	movs	r3, #1
 8019b18:	60fb      	str	r3, [r7, #12]
 8019b1a:	e001      	b.n	8019b20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019b20:	f001 fb90 	bl	801b244 <vPortExitCritical>

	return xReturn;
 8019b24:	68fb      	ldr	r3, [r7, #12]
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b084      	sub	sp, #16
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019b36:	f001 fb55 	bl	801b1e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b42:	429a      	cmp	r2, r3
 8019b44:	d102      	bne.n	8019b4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019b46:	2301      	movs	r3, #1
 8019b48:	60fb      	str	r3, [r7, #12]
 8019b4a:	e001      	b.n	8019b50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019b50:	f001 fb78 	bl	801b244 <vPortExitCritical>

	return xReturn;
 8019b54:	68fb      	ldr	r3, [r7, #12]
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3710      	adds	r7, #16
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
	...

08019b60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019b60:	b480      	push	{r7}
 8019b62:	b085      	sub	sp, #20
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b68:	2300      	movs	r3, #0
 8019b6a:	60fb      	str	r3, [r7, #12]
 8019b6c:	e016      	b.n	8019b9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8019b6e:	4a10      	ldr	r2, [pc, #64]	; (8019bb0 <vQueueUnregisterQueue+0x50>)
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	00db      	lsls	r3, r3, #3
 8019b74:	4413      	add	r3, r2
 8019b76:	685b      	ldr	r3, [r3, #4]
 8019b78:	687a      	ldr	r2, [r7, #4]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d10b      	bne.n	8019b96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8019b7e:	4a0c      	ldr	r2, [pc, #48]	; (8019bb0 <vQueueUnregisterQueue+0x50>)
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2100      	movs	r1, #0
 8019b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8019b88:	4a09      	ldr	r2, [pc, #36]	; (8019bb0 <vQueueUnregisterQueue+0x50>)
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	00db      	lsls	r3, r3, #3
 8019b8e:	4413      	add	r3, r2
 8019b90:	2200      	movs	r2, #0
 8019b92:	605a      	str	r2, [r3, #4]
				break;
 8019b94:	e006      	b.n	8019ba4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	3301      	adds	r3, #1
 8019b9a:	60fb      	str	r3, [r7, #12]
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	2b07      	cmp	r3, #7
 8019ba0:	d9e5      	bls.n	8019b6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8019ba2:	bf00      	nop
 8019ba4:	bf00      	nop
 8019ba6:	3714      	adds	r7, #20
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bae:	4770      	bx	lr
 8019bb0:	2000b9cc 	.word	0x2000b9cc

08019bb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b08e      	sub	sp, #56	; 0x38
 8019bb8:	af04      	add	r7, sp, #16
 8019bba:	60f8      	str	r0, [r7, #12]
 8019bbc:	60b9      	str	r1, [r7, #8]
 8019bbe:	607a      	str	r2, [r7, #4]
 8019bc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d10a      	bne.n	8019bde <xTaskCreateStatic+0x2a>
	__asm volatile
 8019bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bcc:	f383 8811 	msr	BASEPRI, r3
 8019bd0:	f3bf 8f6f 	isb	sy
 8019bd4:	f3bf 8f4f 	dsb	sy
 8019bd8:	623b      	str	r3, [r7, #32]
}
 8019bda:	bf00      	nop
 8019bdc:	e7fe      	b.n	8019bdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d10a      	bne.n	8019bfa <xTaskCreateStatic+0x46>
	__asm volatile
 8019be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019be8:	f383 8811 	msr	BASEPRI, r3
 8019bec:	f3bf 8f6f 	isb	sy
 8019bf0:	f3bf 8f4f 	dsb	sy
 8019bf4:	61fb      	str	r3, [r7, #28]
}
 8019bf6:	bf00      	nop
 8019bf8:	e7fe      	b.n	8019bf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019bfa:	2354      	movs	r3, #84	; 0x54
 8019bfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019bfe:	693b      	ldr	r3, [r7, #16]
 8019c00:	2b54      	cmp	r3, #84	; 0x54
 8019c02:	d00a      	beq.n	8019c1a <xTaskCreateStatic+0x66>
	__asm volatile
 8019c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c08:	f383 8811 	msr	BASEPRI, r3
 8019c0c:	f3bf 8f6f 	isb	sy
 8019c10:	f3bf 8f4f 	dsb	sy
 8019c14:	61bb      	str	r3, [r7, #24]
}
 8019c16:	bf00      	nop
 8019c18:	e7fe      	b.n	8019c18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019c1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d01e      	beq.n	8019c60 <xTaskCreateStatic+0xac>
 8019c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d01b      	beq.n	8019c60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019c30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c34:	2202      	movs	r2, #2
 8019c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	9303      	str	r3, [sp, #12]
 8019c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c40:	9302      	str	r3, [sp, #8]
 8019c42:	f107 0314 	add.w	r3, r7, #20
 8019c46:	9301      	str	r3, [sp, #4]
 8019c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	68b9      	ldr	r1, [r7, #8]
 8019c52:	68f8      	ldr	r0, [r7, #12]
 8019c54:	f000 f850 	bl	8019cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c5a:	f000 f8d5 	bl	8019e08 <prvAddNewTaskToReadyList>
 8019c5e:	e001      	b.n	8019c64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019c60:	2300      	movs	r3, #0
 8019c62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019c64:	697b      	ldr	r3, [r7, #20]
	}
 8019c66:	4618      	mov	r0, r3
 8019c68:	3728      	adds	r7, #40	; 0x28
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}

08019c6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019c6e:	b580      	push	{r7, lr}
 8019c70:	b08c      	sub	sp, #48	; 0x30
 8019c72:	af04      	add	r7, sp, #16
 8019c74:	60f8      	str	r0, [r7, #12]
 8019c76:	60b9      	str	r1, [r7, #8]
 8019c78:	603b      	str	r3, [r7, #0]
 8019c7a:	4613      	mov	r3, r2
 8019c7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019c7e:	88fb      	ldrh	r3, [r7, #6]
 8019c80:	009b      	lsls	r3, r3, #2
 8019c82:	4618      	mov	r0, r3
 8019c84:	f001 fbd0 	bl	801b428 <pvPortMalloc>
 8019c88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019c8a:	697b      	ldr	r3, [r7, #20]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d00e      	beq.n	8019cae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019c90:	2054      	movs	r0, #84	; 0x54
 8019c92:	f001 fbc9 	bl	801b428 <pvPortMalloc>
 8019c96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019c98:	69fb      	ldr	r3, [r7, #28]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d003      	beq.n	8019ca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019c9e:	69fb      	ldr	r3, [r7, #28]
 8019ca0:	697a      	ldr	r2, [r7, #20]
 8019ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8019ca4:	e005      	b.n	8019cb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019ca6:	6978      	ldr	r0, [r7, #20]
 8019ca8:	f001 fc82 	bl	801b5b0 <vPortFree>
 8019cac:	e001      	b.n	8019cb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019cb2:	69fb      	ldr	r3, [r7, #28]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d017      	beq.n	8019ce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019cb8:	69fb      	ldr	r3, [r7, #28]
 8019cba:	2200      	movs	r2, #0
 8019cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019cc0:	88fa      	ldrh	r2, [r7, #6]
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	9303      	str	r3, [sp, #12]
 8019cc6:	69fb      	ldr	r3, [r7, #28]
 8019cc8:	9302      	str	r3, [sp, #8]
 8019cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ccc:	9301      	str	r3, [sp, #4]
 8019cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	68b9      	ldr	r1, [r7, #8]
 8019cd6:	68f8      	ldr	r0, [r7, #12]
 8019cd8:	f000 f80e 	bl	8019cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019cdc:	69f8      	ldr	r0, [r7, #28]
 8019cde:	f000 f893 	bl	8019e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019ce2:	2301      	movs	r3, #1
 8019ce4:	61bb      	str	r3, [r7, #24]
 8019ce6:	e002      	b.n	8019cee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019cee:	69bb      	ldr	r3, [r7, #24]
	}
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	3720      	adds	r7, #32
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}

08019cf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b088      	sub	sp, #32
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	60f8      	str	r0, [r7, #12]
 8019d00:	60b9      	str	r1, [r7, #8]
 8019d02:	607a      	str	r2, [r7, #4]
 8019d04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019d10:	3b01      	subs	r3, #1
 8019d12:	009b      	lsls	r3, r3, #2
 8019d14:	4413      	add	r3, r2
 8019d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	f023 0307 	bic.w	r3, r3, #7
 8019d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	f003 0307 	and.w	r3, r3, #7
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d00a      	beq.n	8019d40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8019d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d2e:	f383 8811 	msr	BASEPRI, r3
 8019d32:	f3bf 8f6f 	isb	sy
 8019d36:	f3bf 8f4f 	dsb	sy
 8019d3a:	617b      	str	r3, [r7, #20]
}
 8019d3c:	bf00      	nop
 8019d3e:	e7fe      	b.n	8019d3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d01f      	beq.n	8019d86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019d46:	2300      	movs	r3, #0
 8019d48:	61fb      	str	r3, [r7, #28]
 8019d4a:	e012      	b.n	8019d72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019d4c:	68ba      	ldr	r2, [r7, #8]
 8019d4e:	69fb      	ldr	r3, [r7, #28]
 8019d50:	4413      	add	r3, r2
 8019d52:	7819      	ldrb	r1, [r3, #0]
 8019d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d56:	69fb      	ldr	r3, [r7, #28]
 8019d58:	4413      	add	r3, r2
 8019d5a:	3334      	adds	r3, #52	; 0x34
 8019d5c:	460a      	mov	r2, r1
 8019d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019d60:	68ba      	ldr	r2, [r7, #8]
 8019d62:	69fb      	ldr	r3, [r7, #28]
 8019d64:	4413      	add	r3, r2
 8019d66:	781b      	ldrb	r3, [r3, #0]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d006      	beq.n	8019d7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	3301      	adds	r3, #1
 8019d70:	61fb      	str	r3, [r7, #28]
 8019d72:	69fb      	ldr	r3, [r7, #28]
 8019d74:	2b0f      	cmp	r3, #15
 8019d76:	d9e9      	bls.n	8019d4c <prvInitialiseNewTask+0x54>
 8019d78:	e000      	b.n	8019d7c <prvInitialiseNewTask+0x84>
			{
				break;
 8019d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d7e:	2200      	movs	r2, #0
 8019d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019d84:	e003      	b.n	8019d8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d88:	2200      	movs	r2, #0
 8019d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d90:	2b06      	cmp	r3, #6
 8019d92:	d901      	bls.n	8019d98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019d94:	2306      	movs	r3, #6
 8019d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019da2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019da6:	2200      	movs	r2, #0
 8019da8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dac:	3304      	adds	r3, #4
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7ff f851 	bl	8018e56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019db6:	3318      	adds	r3, #24
 8019db8:	4618      	mov	r0, r3
 8019dba:	f7ff f84c 	bl	8018e56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dc6:	f1c3 0207 	rsb	r2, r3, #7
 8019dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ddc:	2200      	movs	r2, #0
 8019dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019de2:	683a      	ldr	r2, [r7, #0]
 8019de4:	68f9      	ldr	r1, [r7, #12]
 8019de6:	69b8      	ldr	r0, [r7, #24]
 8019de8:	f001 f8cc 	bl	801af84 <pxPortInitialiseStack>
 8019dec:	4602      	mov	r2, r0
 8019dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d002      	beq.n	8019dfe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019dfe:	bf00      	nop
 8019e00:	3720      	adds	r7, #32
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
	...

08019e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019e10:	f001 f9e8 	bl	801b1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019e14:	4b2a      	ldr	r3, [pc, #168]	; (8019ec0 <prvAddNewTaskToReadyList+0xb8>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	3301      	adds	r3, #1
 8019e1a:	4a29      	ldr	r2, [pc, #164]	; (8019ec0 <prvAddNewTaskToReadyList+0xb8>)
 8019e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019e1e:	4b29      	ldr	r3, [pc, #164]	; (8019ec4 <prvAddNewTaskToReadyList+0xbc>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d109      	bne.n	8019e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019e26:	4a27      	ldr	r2, [pc, #156]	; (8019ec4 <prvAddNewTaskToReadyList+0xbc>)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019e2c:	4b24      	ldr	r3, [pc, #144]	; (8019ec0 <prvAddNewTaskToReadyList+0xb8>)
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	2b01      	cmp	r3, #1
 8019e32:	d110      	bne.n	8019e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019e34:	f000 fbc6 	bl	801a5c4 <prvInitialiseTaskLists>
 8019e38:	e00d      	b.n	8019e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019e3a:	4b23      	ldr	r3, [pc, #140]	; (8019ec8 <prvAddNewTaskToReadyList+0xc0>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d109      	bne.n	8019e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019e42:	4b20      	ldr	r3, [pc, #128]	; (8019ec4 <prvAddNewTaskToReadyList+0xbc>)
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e4c:	429a      	cmp	r2, r3
 8019e4e:	d802      	bhi.n	8019e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019e50:	4a1c      	ldr	r2, [pc, #112]	; (8019ec4 <prvAddNewTaskToReadyList+0xbc>)
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019e56:	4b1d      	ldr	r3, [pc, #116]	; (8019ecc <prvAddNewTaskToReadyList+0xc4>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	4a1b      	ldr	r2, [pc, #108]	; (8019ecc <prvAddNewTaskToReadyList+0xc4>)
 8019e5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e64:	2201      	movs	r2, #1
 8019e66:	409a      	lsls	r2, r3
 8019e68:	4b19      	ldr	r3, [pc, #100]	; (8019ed0 <prvAddNewTaskToReadyList+0xc8>)
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	4a18      	ldr	r2, [pc, #96]	; (8019ed0 <prvAddNewTaskToReadyList+0xc8>)
 8019e70:	6013      	str	r3, [r2, #0]
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e76:	4613      	mov	r3, r2
 8019e78:	009b      	lsls	r3, r3, #2
 8019e7a:	4413      	add	r3, r2
 8019e7c:	009b      	lsls	r3, r3, #2
 8019e7e:	4a15      	ldr	r2, [pc, #84]	; (8019ed4 <prvAddNewTaskToReadyList+0xcc>)
 8019e80:	441a      	add	r2, r3
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	3304      	adds	r3, #4
 8019e86:	4619      	mov	r1, r3
 8019e88:	4610      	mov	r0, r2
 8019e8a:	f7fe fff1 	bl	8018e70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019e8e:	f001 f9d9 	bl	801b244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019e92:	4b0d      	ldr	r3, [pc, #52]	; (8019ec8 <prvAddNewTaskToReadyList+0xc0>)
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d00e      	beq.n	8019eb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019e9a:	4b0a      	ldr	r3, [pc, #40]	; (8019ec4 <prvAddNewTaskToReadyList+0xbc>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d207      	bcs.n	8019eb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019ea8:	4b0b      	ldr	r3, [pc, #44]	; (8019ed8 <prvAddNewTaskToReadyList+0xd0>)
 8019eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019eae:	601a      	str	r2, [r3, #0]
 8019eb0:	f3bf 8f4f 	dsb	sy
 8019eb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019eb8:	bf00      	nop
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	20000794 	.word	0x20000794
 8019ec4:	20000694 	.word	0x20000694
 8019ec8:	200007a0 	.word	0x200007a0
 8019ecc:	200007b0 	.word	0x200007b0
 8019ed0:	2000079c 	.word	0x2000079c
 8019ed4:	20000698 	.word	0x20000698
 8019ed8:	e000ed04 	.word	0xe000ed04

08019edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b084      	sub	sp, #16
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d017      	beq.n	8019f1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019eee:	4b13      	ldr	r3, [pc, #76]	; (8019f3c <vTaskDelay+0x60>)
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d00a      	beq.n	8019f0c <vTaskDelay+0x30>
	__asm volatile
 8019ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019efa:	f383 8811 	msr	BASEPRI, r3
 8019efe:	f3bf 8f6f 	isb	sy
 8019f02:	f3bf 8f4f 	dsb	sy
 8019f06:	60bb      	str	r3, [r7, #8]
}
 8019f08:	bf00      	nop
 8019f0a:	e7fe      	b.n	8019f0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019f0c:	f000 f87a 	bl	801a004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019f10:	2100      	movs	r1, #0
 8019f12:	6878      	ldr	r0, [r7, #4]
 8019f14:	f000 ffd0 	bl	801aeb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019f18:	f000 f882 	bl	801a020 <xTaskResumeAll>
 8019f1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d107      	bne.n	8019f34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019f24:	4b06      	ldr	r3, [pc, #24]	; (8019f40 <vTaskDelay+0x64>)
 8019f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f2a:	601a      	str	r2, [r3, #0]
 8019f2c:	f3bf 8f4f 	dsb	sy
 8019f30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019f34:	bf00      	nop
 8019f36:	3710      	adds	r7, #16
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	200007bc 	.word	0x200007bc
 8019f40:	e000ed04 	.word	0xe000ed04

08019f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b08a      	sub	sp, #40	; 0x28
 8019f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019f4e:	2300      	movs	r3, #0
 8019f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019f52:	463a      	mov	r2, r7
 8019f54:	1d39      	adds	r1, r7, #4
 8019f56:	f107 0308 	add.w	r3, r7, #8
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	f7ec ff64 	bl	8006e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019f60:	6839      	ldr	r1, [r7, #0]
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	68ba      	ldr	r2, [r7, #8]
 8019f66:	9202      	str	r2, [sp, #8]
 8019f68:	9301      	str	r3, [sp, #4]
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	9300      	str	r3, [sp, #0]
 8019f6e:	2300      	movs	r3, #0
 8019f70:	460a      	mov	r2, r1
 8019f72:	491e      	ldr	r1, [pc, #120]	; (8019fec <vTaskStartScheduler+0xa8>)
 8019f74:	481e      	ldr	r0, [pc, #120]	; (8019ff0 <vTaskStartScheduler+0xac>)
 8019f76:	f7ff fe1d 	bl	8019bb4 <xTaskCreateStatic>
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	4a1d      	ldr	r2, [pc, #116]	; (8019ff4 <vTaskStartScheduler+0xb0>)
 8019f7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019f80:	4b1c      	ldr	r3, [pc, #112]	; (8019ff4 <vTaskStartScheduler+0xb0>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d002      	beq.n	8019f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019f88:	2301      	movs	r3, #1
 8019f8a:	617b      	str	r3, [r7, #20]
 8019f8c:	e001      	b.n	8019f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019f92:	697b      	ldr	r3, [r7, #20]
 8019f94:	2b01      	cmp	r3, #1
 8019f96:	d116      	bne.n	8019fc6 <vTaskStartScheduler+0x82>
	__asm volatile
 8019f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f9c:	f383 8811 	msr	BASEPRI, r3
 8019fa0:	f3bf 8f6f 	isb	sy
 8019fa4:	f3bf 8f4f 	dsb	sy
 8019fa8:	613b      	str	r3, [r7, #16]
}
 8019faa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019fac:	4b12      	ldr	r3, [pc, #72]	; (8019ff8 <vTaskStartScheduler+0xb4>)
 8019fae:	f04f 32ff 	mov.w	r2, #4294967295
 8019fb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019fb4:	4b11      	ldr	r3, [pc, #68]	; (8019ffc <vTaskStartScheduler+0xb8>)
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019fba:	4b11      	ldr	r3, [pc, #68]	; (801a000 <vTaskStartScheduler+0xbc>)
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019fc0:	f001 f86e 	bl	801b0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019fc4:	e00e      	b.n	8019fe4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019fc6:	697b      	ldr	r3, [r7, #20]
 8019fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fcc:	d10a      	bne.n	8019fe4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8019fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fd2:	f383 8811 	msr	BASEPRI, r3
 8019fd6:	f3bf 8f6f 	isb	sy
 8019fda:	f3bf 8f4f 	dsb	sy
 8019fde:	60fb      	str	r3, [r7, #12]
}
 8019fe0:	bf00      	nop
 8019fe2:	e7fe      	b.n	8019fe2 <vTaskStartScheduler+0x9e>
}
 8019fe4:	bf00      	nop
 8019fe6:	3718      	adds	r7, #24
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	0801fedc 	.word	0x0801fedc
 8019ff0:	0801a595 	.word	0x0801a595
 8019ff4:	200007b8 	.word	0x200007b8
 8019ff8:	200007b4 	.word	0x200007b4
 8019ffc:	200007a0 	.word	0x200007a0
 801a000:	20000798 	.word	0x20000798

0801a004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a004:	b480      	push	{r7}
 801a006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a008:	4b04      	ldr	r3, [pc, #16]	; (801a01c <vTaskSuspendAll+0x18>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	3301      	adds	r3, #1
 801a00e:	4a03      	ldr	r2, [pc, #12]	; (801a01c <vTaskSuspendAll+0x18>)
 801a010:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a012:	bf00      	nop
 801a014:	46bd      	mov	sp, r7
 801a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a01a:	4770      	bx	lr
 801a01c:	200007bc 	.word	0x200007bc

0801a020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b084      	sub	sp, #16
 801a024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a026:	2300      	movs	r3, #0
 801a028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a02a:	2300      	movs	r3, #0
 801a02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a02e:	4b41      	ldr	r3, [pc, #260]	; (801a134 <xTaskResumeAll+0x114>)
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d10a      	bne.n	801a04c <xTaskResumeAll+0x2c>
	__asm volatile
 801a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a03a:	f383 8811 	msr	BASEPRI, r3
 801a03e:	f3bf 8f6f 	isb	sy
 801a042:	f3bf 8f4f 	dsb	sy
 801a046:	603b      	str	r3, [r7, #0]
}
 801a048:	bf00      	nop
 801a04a:	e7fe      	b.n	801a04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a04c:	f001 f8ca 	bl	801b1e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a050:	4b38      	ldr	r3, [pc, #224]	; (801a134 <xTaskResumeAll+0x114>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	3b01      	subs	r3, #1
 801a056:	4a37      	ldr	r2, [pc, #220]	; (801a134 <xTaskResumeAll+0x114>)
 801a058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a05a:	4b36      	ldr	r3, [pc, #216]	; (801a134 <xTaskResumeAll+0x114>)
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d161      	bne.n	801a126 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a062:	4b35      	ldr	r3, [pc, #212]	; (801a138 <xTaskResumeAll+0x118>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d05d      	beq.n	801a126 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a06a:	e02e      	b.n	801a0ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a06c:	4b33      	ldr	r3, [pc, #204]	; (801a13c <xTaskResumeAll+0x11c>)
 801a06e:	68db      	ldr	r3, [r3, #12]
 801a070:	68db      	ldr	r3, [r3, #12]
 801a072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	3318      	adds	r3, #24
 801a078:	4618      	mov	r0, r3
 801a07a:	f7fe ff56 	bl	8018f2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	3304      	adds	r3, #4
 801a082:	4618      	mov	r0, r3
 801a084:	f7fe ff51 	bl	8018f2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a08c:	2201      	movs	r2, #1
 801a08e:	409a      	lsls	r2, r3
 801a090:	4b2b      	ldr	r3, [pc, #172]	; (801a140 <xTaskResumeAll+0x120>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	4313      	orrs	r3, r2
 801a096:	4a2a      	ldr	r2, [pc, #168]	; (801a140 <xTaskResumeAll+0x120>)
 801a098:	6013      	str	r3, [r2, #0]
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a09e:	4613      	mov	r3, r2
 801a0a0:	009b      	lsls	r3, r3, #2
 801a0a2:	4413      	add	r3, r2
 801a0a4:	009b      	lsls	r3, r3, #2
 801a0a6:	4a27      	ldr	r2, [pc, #156]	; (801a144 <xTaskResumeAll+0x124>)
 801a0a8:	441a      	add	r2, r3
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	3304      	adds	r3, #4
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	4610      	mov	r0, r2
 801a0b2:	f7fe fedd 	bl	8018e70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0ba:	4b23      	ldr	r3, [pc, #140]	; (801a148 <xTaskResumeAll+0x128>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0c0:	429a      	cmp	r2, r3
 801a0c2:	d302      	bcc.n	801a0ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a0c4:	4b21      	ldr	r3, [pc, #132]	; (801a14c <xTaskResumeAll+0x12c>)
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a0ca:	4b1c      	ldr	r3, [pc, #112]	; (801a13c <xTaskResumeAll+0x11c>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d1cc      	bne.n	801a06c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d001      	beq.n	801a0dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a0d8:	f000 fb12 	bl	801a700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a0dc:	4b1c      	ldr	r3, [pc, #112]	; (801a150 <xTaskResumeAll+0x130>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d010      	beq.n	801a10a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a0e8:	f000 f836 	bl	801a158 <xTaskIncrementTick>
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d002      	beq.n	801a0f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a0f2:	4b16      	ldr	r3, [pc, #88]	; (801a14c <xTaskResumeAll+0x12c>)
 801a0f4:	2201      	movs	r2, #1
 801a0f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	3b01      	subs	r3, #1
 801a0fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1f1      	bne.n	801a0e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801a104:	4b12      	ldr	r3, [pc, #72]	; (801a150 <xTaskResumeAll+0x130>)
 801a106:	2200      	movs	r2, #0
 801a108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a10a:	4b10      	ldr	r3, [pc, #64]	; (801a14c <xTaskResumeAll+0x12c>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d009      	beq.n	801a126 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a112:	2301      	movs	r3, #1
 801a114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a116:	4b0f      	ldr	r3, [pc, #60]	; (801a154 <xTaskResumeAll+0x134>)
 801a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a11c:	601a      	str	r2, [r3, #0]
 801a11e:	f3bf 8f4f 	dsb	sy
 801a122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a126:	f001 f88d 	bl	801b244 <vPortExitCritical>

	return xAlreadyYielded;
 801a12a:	68bb      	ldr	r3, [r7, #8]
}
 801a12c:	4618      	mov	r0, r3
 801a12e:	3710      	adds	r7, #16
 801a130:	46bd      	mov	sp, r7
 801a132:	bd80      	pop	{r7, pc}
 801a134:	200007bc 	.word	0x200007bc
 801a138:	20000794 	.word	0x20000794
 801a13c:	20000754 	.word	0x20000754
 801a140:	2000079c 	.word	0x2000079c
 801a144:	20000698 	.word	0x20000698
 801a148:	20000694 	.word	0x20000694
 801a14c:	200007a8 	.word	0x200007a8
 801a150:	200007a4 	.word	0x200007a4
 801a154:	e000ed04 	.word	0xe000ed04

0801a158 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b086      	sub	sp, #24
 801a15c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a15e:	2300      	movs	r3, #0
 801a160:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a162:	4b4e      	ldr	r3, [pc, #312]	; (801a29c <xTaskIncrementTick+0x144>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	2b00      	cmp	r3, #0
 801a168:	f040 8088 	bne.w	801a27c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a16c:	4b4c      	ldr	r3, [pc, #304]	; (801a2a0 <xTaskIncrementTick+0x148>)
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	3301      	adds	r3, #1
 801a172:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a174:	4a4a      	ldr	r2, [pc, #296]	; (801a2a0 <xTaskIncrementTick+0x148>)
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a17a:	693b      	ldr	r3, [r7, #16]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d120      	bne.n	801a1c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a180:	4b48      	ldr	r3, [pc, #288]	; (801a2a4 <xTaskIncrementTick+0x14c>)
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d00a      	beq.n	801a1a0 <xTaskIncrementTick+0x48>
	__asm volatile
 801a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a18e:	f383 8811 	msr	BASEPRI, r3
 801a192:	f3bf 8f6f 	isb	sy
 801a196:	f3bf 8f4f 	dsb	sy
 801a19a:	603b      	str	r3, [r7, #0]
}
 801a19c:	bf00      	nop
 801a19e:	e7fe      	b.n	801a19e <xTaskIncrementTick+0x46>
 801a1a0:	4b40      	ldr	r3, [pc, #256]	; (801a2a4 <xTaskIncrementTick+0x14c>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	60fb      	str	r3, [r7, #12]
 801a1a6:	4b40      	ldr	r3, [pc, #256]	; (801a2a8 <xTaskIncrementTick+0x150>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	4a3e      	ldr	r2, [pc, #248]	; (801a2a4 <xTaskIncrementTick+0x14c>)
 801a1ac:	6013      	str	r3, [r2, #0]
 801a1ae:	4a3e      	ldr	r2, [pc, #248]	; (801a2a8 <xTaskIncrementTick+0x150>)
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	6013      	str	r3, [r2, #0]
 801a1b4:	4b3d      	ldr	r3, [pc, #244]	; (801a2ac <xTaskIncrementTick+0x154>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	4a3c      	ldr	r2, [pc, #240]	; (801a2ac <xTaskIncrementTick+0x154>)
 801a1bc:	6013      	str	r3, [r2, #0]
 801a1be:	f000 fa9f 	bl	801a700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a1c2:	4b3b      	ldr	r3, [pc, #236]	; (801a2b0 <xTaskIncrementTick+0x158>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	693a      	ldr	r2, [r7, #16]
 801a1c8:	429a      	cmp	r2, r3
 801a1ca:	d348      	bcc.n	801a25e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a1cc:	4b35      	ldr	r3, [pc, #212]	; (801a2a4 <xTaskIncrementTick+0x14c>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d104      	bne.n	801a1e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a1d6:	4b36      	ldr	r3, [pc, #216]	; (801a2b0 <xTaskIncrementTick+0x158>)
 801a1d8:	f04f 32ff 	mov.w	r2, #4294967295
 801a1dc:	601a      	str	r2, [r3, #0]
					break;
 801a1de:	e03e      	b.n	801a25e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1e0:	4b30      	ldr	r3, [pc, #192]	; (801a2a4 <xTaskIncrementTick+0x14c>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	68db      	ldr	r3, [r3, #12]
 801a1e6:	68db      	ldr	r3, [r3, #12]
 801a1e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	685b      	ldr	r3, [r3, #4]
 801a1ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a1f0:	693a      	ldr	r2, [r7, #16]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	429a      	cmp	r2, r3
 801a1f6:	d203      	bcs.n	801a200 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a1f8:	4a2d      	ldr	r2, [pc, #180]	; (801a2b0 <xTaskIncrementTick+0x158>)
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a1fe:	e02e      	b.n	801a25e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	3304      	adds	r3, #4
 801a204:	4618      	mov	r0, r3
 801a206:	f7fe fe90 	bl	8018f2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d004      	beq.n	801a21c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a212:	68bb      	ldr	r3, [r7, #8]
 801a214:	3318      	adds	r3, #24
 801a216:	4618      	mov	r0, r3
 801a218:	f7fe fe87 	bl	8018f2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a220:	2201      	movs	r2, #1
 801a222:	409a      	lsls	r2, r3
 801a224:	4b23      	ldr	r3, [pc, #140]	; (801a2b4 <xTaskIncrementTick+0x15c>)
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	4313      	orrs	r3, r2
 801a22a:	4a22      	ldr	r2, [pc, #136]	; (801a2b4 <xTaskIncrementTick+0x15c>)
 801a22c:	6013      	str	r3, [r2, #0]
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a232:	4613      	mov	r3, r2
 801a234:	009b      	lsls	r3, r3, #2
 801a236:	4413      	add	r3, r2
 801a238:	009b      	lsls	r3, r3, #2
 801a23a:	4a1f      	ldr	r2, [pc, #124]	; (801a2b8 <xTaskIncrementTick+0x160>)
 801a23c:	441a      	add	r2, r3
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	3304      	adds	r3, #4
 801a242:	4619      	mov	r1, r3
 801a244:	4610      	mov	r0, r2
 801a246:	f7fe fe13 	bl	8018e70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a24e:	4b1b      	ldr	r3, [pc, #108]	; (801a2bc <xTaskIncrementTick+0x164>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a254:	429a      	cmp	r2, r3
 801a256:	d3b9      	bcc.n	801a1cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a258:	2301      	movs	r3, #1
 801a25a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a25c:	e7b6      	b.n	801a1cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a25e:	4b17      	ldr	r3, [pc, #92]	; (801a2bc <xTaskIncrementTick+0x164>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a264:	4914      	ldr	r1, [pc, #80]	; (801a2b8 <xTaskIncrementTick+0x160>)
 801a266:	4613      	mov	r3, r2
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	4413      	add	r3, r2
 801a26c:	009b      	lsls	r3, r3, #2
 801a26e:	440b      	add	r3, r1
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2b01      	cmp	r3, #1
 801a274:	d907      	bls.n	801a286 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801a276:	2301      	movs	r3, #1
 801a278:	617b      	str	r3, [r7, #20]
 801a27a:	e004      	b.n	801a286 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801a27c:	4b10      	ldr	r3, [pc, #64]	; (801a2c0 <xTaskIncrementTick+0x168>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	3301      	adds	r3, #1
 801a282:	4a0f      	ldr	r2, [pc, #60]	; (801a2c0 <xTaskIncrementTick+0x168>)
 801a284:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801a286:	4b0f      	ldr	r3, [pc, #60]	; (801a2c4 <xTaskIncrementTick+0x16c>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d001      	beq.n	801a292 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801a28e:	2301      	movs	r3, #1
 801a290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801a292:	697b      	ldr	r3, [r7, #20]
}
 801a294:	4618      	mov	r0, r3
 801a296:	3718      	adds	r7, #24
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	200007bc 	.word	0x200007bc
 801a2a0:	20000798 	.word	0x20000798
 801a2a4:	2000074c 	.word	0x2000074c
 801a2a8:	20000750 	.word	0x20000750
 801a2ac:	200007ac 	.word	0x200007ac
 801a2b0:	200007b4 	.word	0x200007b4
 801a2b4:	2000079c 	.word	0x2000079c
 801a2b8:	20000698 	.word	0x20000698
 801a2bc:	20000694 	.word	0x20000694
 801a2c0:	200007a4 	.word	0x200007a4
 801a2c4:	200007a8 	.word	0x200007a8

0801a2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a2c8:	b480      	push	{r7}
 801a2ca:	b087      	sub	sp, #28
 801a2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a2ce:	4b27      	ldr	r3, [pc, #156]	; (801a36c <vTaskSwitchContext+0xa4>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d003      	beq.n	801a2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a2d6:	4b26      	ldr	r3, [pc, #152]	; (801a370 <vTaskSwitchContext+0xa8>)
 801a2d8:	2201      	movs	r2, #1
 801a2da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a2dc:	e03f      	b.n	801a35e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801a2de:	4b24      	ldr	r3, [pc, #144]	; (801a370 <vTaskSwitchContext+0xa8>)
 801a2e0:	2200      	movs	r2, #0
 801a2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2e4:	4b23      	ldr	r3, [pc, #140]	; (801a374 <vTaskSwitchContext+0xac>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	fab3 f383 	clz	r3, r3
 801a2f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a2f2:	7afb      	ldrb	r3, [r7, #11]
 801a2f4:	f1c3 031f 	rsb	r3, r3, #31
 801a2f8:	617b      	str	r3, [r7, #20]
 801a2fa:	491f      	ldr	r1, [pc, #124]	; (801a378 <vTaskSwitchContext+0xb0>)
 801a2fc:	697a      	ldr	r2, [r7, #20]
 801a2fe:	4613      	mov	r3, r2
 801a300:	009b      	lsls	r3, r3, #2
 801a302:	4413      	add	r3, r2
 801a304:	009b      	lsls	r3, r3, #2
 801a306:	440b      	add	r3, r1
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d10a      	bne.n	801a324 <vTaskSwitchContext+0x5c>
	__asm volatile
 801a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a312:	f383 8811 	msr	BASEPRI, r3
 801a316:	f3bf 8f6f 	isb	sy
 801a31a:	f3bf 8f4f 	dsb	sy
 801a31e:	607b      	str	r3, [r7, #4]
}
 801a320:	bf00      	nop
 801a322:	e7fe      	b.n	801a322 <vTaskSwitchContext+0x5a>
 801a324:	697a      	ldr	r2, [r7, #20]
 801a326:	4613      	mov	r3, r2
 801a328:	009b      	lsls	r3, r3, #2
 801a32a:	4413      	add	r3, r2
 801a32c:	009b      	lsls	r3, r3, #2
 801a32e:	4a12      	ldr	r2, [pc, #72]	; (801a378 <vTaskSwitchContext+0xb0>)
 801a330:	4413      	add	r3, r2
 801a332:	613b      	str	r3, [r7, #16]
 801a334:	693b      	ldr	r3, [r7, #16]
 801a336:	685b      	ldr	r3, [r3, #4]
 801a338:	685a      	ldr	r2, [r3, #4]
 801a33a:	693b      	ldr	r3, [r7, #16]
 801a33c:	605a      	str	r2, [r3, #4]
 801a33e:	693b      	ldr	r3, [r7, #16]
 801a340:	685a      	ldr	r2, [r3, #4]
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	3308      	adds	r3, #8
 801a346:	429a      	cmp	r2, r3
 801a348:	d104      	bne.n	801a354 <vTaskSwitchContext+0x8c>
 801a34a:	693b      	ldr	r3, [r7, #16]
 801a34c:	685b      	ldr	r3, [r3, #4]
 801a34e:	685a      	ldr	r2, [r3, #4]
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	605a      	str	r2, [r3, #4]
 801a354:	693b      	ldr	r3, [r7, #16]
 801a356:	685b      	ldr	r3, [r3, #4]
 801a358:	68db      	ldr	r3, [r3, #12]
 801a35a:	4a08      	ldr	r2, [pc, #32]	; (801a37c <vTaskSwitchContext+0xb4>)
 801a35c:	6013      	str	r3, [r2, #0]
}
 801a35e:	bf00      	nop
 801a360:	371c      	adds	r7, #28
 801a362:	46bd      	mov	sp, r7
 801a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a368:	4770      	bx	lr
 801a36a:	bf00      	nop
 801a36c:	200007bc 	.word	0x200007bc
 801a370:	200007a8 	.word	0x200007a8
 801a374:	2000079c 	.word	0x2000079c
 801a378:	20000698 	.word	0x20000698
 801a37c:	20000694 	.word	0x20000694

0801a380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b084      	sub	sp, #16
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d10a      	bne.n	801a3a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a394:	f383 8811 	msr	BASEPRI, r3
 801a398:	f3bf 8f6f 	isb	sy
 801a39c:	f3bf 8f4f 	dsb	sy
 801a3a0:	60fb      	str	r3, [r7, #12]
}
 801a3a2:	bf00      	nop
 801a3a4:	e7fe      	b.n	801a3a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a3a6:	4b07      	ldr	r3, [pc, #28]	; (801a3c4 <vTaskPlaceOnEventList+0x44>)
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	3318      	adds	r3, #24
 801a3ac:	4619      	mov	r1, r3
 801a3ae:	6878      	ldr	r0, [r7, #4]
 801a3b0:	f7fe fd82 	bl	8018eb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a3b4:	2101      	movs	r1, #1
 801a3b6:	6838      	ldr	r0, [r7, #0]
 801a3b8:	f000 fd7e 	bl	801aeb8 <prvAddCurrentTaskToDelayedList>
}
 801a3bc:	bf00      	nop
 801a3be:	3710      	adds	r7, #16
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	bd80      	pop	{r7, pc}
 801a3c4:	20000694 	.word	0x20000694

0801a3c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b086      	sub	sp, #24
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	68db      	ldr	r3, [r3, #12]
 801a3d4:	68db      	ldr	r3, [r3, #12]
 801a3d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a3d8:	693b      	ldr	r3, [r7, #16]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d10a      	bne.n	801a3f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3e2:	f383 8811 	msr	BASEPRI, r3
 801a3e6:	f3bf 8f6f 	isb	sy
 801a3ea:	f3bf 8f4f 	dsb	sy
 801a3ee:	60fb      	str	r3, [r7, #12]
}
 801a3f0:	bf00      	nop
 801a3f2:	e7fe      	b.n	801a3f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a3f4:	693b      	ldr	r3, [r7, #16]
 801a3f6:	3318      	adds	r3, #24
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f7fe fd96 	bl	8018f2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a3fe:	4b1d      	ldr	r3, [pc, #116]	; (801a474 <xTaskRemoveFromEventList+0xac>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d11c      	bne.n	801a440 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a406:	693b      	ldr	r3, [r7, #16]
 801a408:	3304      	adds	r3, #4
 801a40a:	4618      	mov	r0, r3
 801a40c:	f7fe fd8d 	bl	8018f2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a410:	693b      	ldr	r3, [r7, #16]
 801a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a414:	2201      	movs	r2, #1
 801a416:	409a      	lsls	r2, r3
 801a418:	4b17      	ldr	r3, [pc, #92]	; (801a478 <xTaskRemoveFromEventList+0xb0>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	4313      	orrs	r3, r2
 801a41e:	4a16      	ldr	r2, [pc, #88]	; (801a478 <xTaskRemoveFromEventList+0xb0>)
 801a420:	6013      	str	r3, [r2, #0]
 801a422:	693b      	ldr	r3, [r7, #16]
 801a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a426:	4613      	mov	r3, r2
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	4413      	add	r3, r2
 801a42c:	009b      	lsls	r3, r3, #2
 801a42e:	4a13      	ldr	r2, [pc, #76]	; (801a47c <xTaskRemoveFromEventList+0xb4>)
 801a430:	441a      	add	r2, r3
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	3304      	adds	r3, #4
 801a436:	4619      	mov	r1, r3
 801a438:	4610      	mov	r0, r2
 801a43a:	f7fe fd19 	bl	8018e70 <vListInsertEnd>
 801a43e:	e005      	b.n	801a44c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a440:	693b      	ldr	r3, [r7, #16]
 801a442:	3318      	adds	r3, #24
 801a444:	4619      	mov	r1, r3
 801a446:	480e      	ldr	r0, [pc, #56]	; (801a480 <xTaskRemoveFromEventList+0xb8>)
 801a448:	f7fe fd12 	bl	8018e70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a450:	4b0c      	ldr	r3, [pc, #48]	; (801a484 <xTaskRemoveFromEventList+0xbc>)
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a456:	429a      	cmp	r2, r3
 801a458:	d905      	bls.n	801a466 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a45a:	2301      	movs	r3, #1
 801a45c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a45e:	4b0a      	ldr	r3, [pc, #40]	; (801a488 <xTaskRemoveFromEventList+0xc0>)
 801a460:	2201      	movs	r2, #1
 801a462:	601a      	str	r2, [r3, #0]
 801a464:	e001      	b.n	801a46a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801a466:	2300      	movs	r3, #0
 801a468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a46a:	697b      	ldr	r3, [r7, #20]
}
 801a46c:	4618      	mov	r0, r3
 801a46e:	3718      	adds	r7, #24
 801a470:	46bd      	mov	sp, r7
 801a472:	bd80      	pop	{r7, pc}
 801a474:	200007bc 	.word	0x200007bc
 801a478:	2000079c 	.word	0x2000079c
 801a47c:	20000698 	.word	0x20000698
 801a480:	20000754 	.word	0x20000754
 801a484:	20000694 	.word	0x20000694
 801a488:	200007a8 	.word	0x200007a8

0801a48c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a48c:	b480      	push	{r7}
 801a48e:	b083      	sub	sp, #12
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a494:	4b06      	ldr	r3, [pc, #24]	; (801a4b0 <vTaskInternalSetTimeOutState+0x24>)
 801a496:	681a      	ldr	r2, [r3, #0]
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a49c:	4b05      	ldr	r3, [pc, #20]	; (801a4b4 <vTaskInternalSetTimeOutState+0x28>)
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	605a      	str	r2, [r3, #4]
}
 801a4a4:	bf00      	nop
 801a4a6:	370c      	adds	r7, #12
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ae:	4770      	bx	lr
 801a4b0:	200007ac 	.word	0x200007ac
 801a4b4:	20000798 	.word	0x20000798

0801a4b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b088      	sub	sp, #32
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d10a      	bne.n	801a4de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4cc:	f383 8811 	msr	BASEPRI, r3
 801a4d0:	f3bf 8f6f 	isb	sy
 801a4d4:	f3bf 8f4f 	dsb	sy
 801a4d8:	613b      	str	r3, [r7, #16]
}
 801a4da:	bf00      	nop
 801a4dc:	e7fe      	b.n	801a4dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d10a      	bne.n	801a4fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4e8:	f383 8811 	msr	BASEPRI, r3
 801a4ec:	f3bf 8f6f 	isb	sy
 801a4f0:	f3bf 8f4f 	dsb	sy
 801a4f4:	60fb      	str	r3, [r7, #12]
}
 801a4f6:	bf00      	nop
 801a4f8:	e7fe      	b.n	801a4f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a4fa:	f000 fe73 	bl	801b1e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a4fe:	4b1d      	ldr	r3, [pc, #116]	; (801a574 <xTaskCheckForTimeOut+0xbc>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	685b      	ldr	r3, [r3, #4]
 801a508:	69ba      	ldr	r2, [r7, #24]
 801a50a:	1ad3      	subs	r3, r2, r3
 801a50c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a516:	d102      	bne.n	801a51e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a518:	2300      	movs	r3, #0
 801a51a:	61fb      	str	r3, [r7, #28]
 801a51c:	e023      	b.n	801a566 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681a      	ldr	r2, [r3, #0]
 801a522:	4b15      	ldr	r3, [pc, #84]	; (801a578 <xTaskCheckForTimeOut+0xc0>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	429a      	cmp	r2, r3
 801a528:	d007      	beq.n	801a53a <xTaskCheckForTimeOut+0x82>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	69ba      	ldr	r2, [r7, #24]
 801a530:	429a      	cmp	r2, r3
 801a532:	d302      	bcc.n	801a53a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a534:	2301      	movs	r3, #1
 801a536:	61fb      	str	r3, [r7, #28]
 801a538:	e015      	b.n	801a566 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	697a      	ldr	r2, [r7, #20]
 801a540:	429a      	cmp	r2, r3
 801a542:	d20b      	bcs.n	801a55c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	681a      	ldr	r2, [r3, #0]
 801a548:	697b      	ldr	r3, [r7, #20]
 801a54a:	1ad2      	subs	r2, r2, r3
 801a54c:	683b      	ldr	r3, [r7, #0]
 801a54e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a550:	6878      	ldr	r0, [r7, #4]
 801a552:	f7ff ff9b 	bl	801a48c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a556:	2300      	movs	r3, #0
 801a558:	61fb      	str	r3, [r7, #28]
 801a55a:	e004      	b.n	801a566 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	2200      	movs	r2, #0
 801a560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a562:	2301      	movs	r3, #1
 801a564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a566:	f000 fe6d 	bl	801b244 <vPortExitCritical>

	return xReturn;
 801a56a:	69fb      	ldr	r3, [r7, #28]
}
 801a56c:	4618      	mov	r0, r3
 801a56e:	3720      	adds	r7, #32
 801a570:	46bd      	mov	sp, r7
 801a572:	bd80      	pop	{r7, pc}
 801a574:	20000798 	.word	0x20000798
 801a578:	200007ac 	.word	0x200007ac

0801a57c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a57c:	b480      	push	{r7}
 801a57e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a580:	4b03      	ldr	r3, [pc, #12]	; (801a590 <vTaskMissedYield+0x14>)
 801a582:	2201      	movs	r2, #1
 801a584:	601a      	str	r2, [r3, #0]
}
 801a586:	bf00      	nop
 801a588:	46bd      	mov	sp, r7
 801a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58e:	4770      	bx	lr
 801a590:	200007a8 	.word	0x200007a8

0801a594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a59c:	f000 f852 	bl	801a644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a5a0:	4b06      	ldr	r3, [pc, #24]	; (801a5bc <prvIdleTask+0x28>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d9f9      	bls.n	801a59c <prvIdleTask+0x8>
			{
				taskYIELD();
 801a5a8:	4b05      	ldr	r3, [pc, #20]	; (801a5c0 <prvIdleTask+0x2c>)
 801a5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5ae:	601a      	str	r2, [r3, #0]
 801a5b0:	f3bf 8f4f 	dsb	sy
 801a5b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a5b8:	e7f0      	b.n	801a59c <prvIdleTask+0x8>
 801a5ba:	bf00      	nop
 801a5bc:	20000698 	.word	0x20000698
 801a5c0:	e000ed04 	.word	0xe000ed04

0801a5c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b082      	sub	sp, #8
 801a5c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a5ca:	2300      	movs	r3, #0
 801a5cc:	607b      	str	r3, [r7, #4]
 801a5ce:	e00c      	b.n	801a5ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a5d0:	687a      	ldr	r2, [r7, #4]
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	009b      	lsls	r3, r3, #2
 801a5d6:	4413      	add	r3, r2
 801a5d8:	009b      	lsls	r3, r3, #2
 801a5da:	4a12      	ldr	r2, [pc, #72]	; (801a624 <prvInitialiseTaskLists+0x60>)
 801a5dc:	4413      	add	r3, r2
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7fe fc19 	bl	8018e16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	607b      	str	r3, [r7, #4]
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	2b06      	cmp	r3, #6
 801a5ee:	d9ef      	bls.n	801a5d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a5f0:	480d      	ldr	r0, [pc, #52]	; (801a628 <prvInitialiseTaskLists+0x64>)
 801a5f2:	f7fe fc10 	bl	8018e16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a5f6:	480d      	ldr	r0, [pc, #52]	; (801a62c <prvInitialiseTaskLists+0x68>)
 801a5f8:	f7fe fc0d 	bl	8018e16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a5fc:	480c      	ldr	r0, [pc, #48]	; (801a630 <prvInitialiseTaskLists+0x6c>)
 801a5fe:	f7fe fc0a 	bl	8018e16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a602:	480c      	ldr	r0, [pc, #48]	; (801a634 <prvInitialiseTaskLists+0x70>)
 801a604:	f7fe fc07 	bl	8018e16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a608:	480b      	ldr	r0, [pc, #44]	; (801a638 <prvInitialiseTaskLists+0x74>)
 801a60a:	f7fe fc04 	bl	8018e16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a60e:	4b0b      	ldr	r3, [pc, #44]	; (801a63c <prvInitialiseTaskLists+0x78>)
 801a610:	4a05      	ldr	r2, [pc, #20]	; (801a628 <prvInitialiseTaskLists+0x64>)
 801a612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a614:	4b0a      	ldr	r3, [pc, #40]	; (801a640 <prvInitialiseTaskLists+0x7c>)
 801a616:	4a05      	ldr	r2, [pc, #20]	; (801a62c <prvInitialiseTaskLists+0x68>)
 801a618:	601a      	str	r2, [r3, #0]
}
 801a61a:	bf00      	nop
 801a61c:	3708      	adds	r7, #8
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd80      	pop	{r7, pc}
 801a622:	bf00      	nop
 801a624:	20000698 	.word	0x20000698
 801a628:	20000724 	.word	0x20000724
 801a62c:	20000738 	.word	0x20000738
 801a630:	20000754 	.word	0x20000754
 801a634:	20000768 	.word	0x20000768
 801a638:	20000780 	.word	0x20000780
 801a63c:	2000074c 	.word	0x2000074c
 801a640:	20000750 	.word	0x20000750

0801a644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b082      	sub	sp, #8
 801a648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a64a:	e019      	b.n	801a680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a64c:	f000 fdca 	bl	801b1e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a650:	4b10      	ldr	r3, [pc, #64]	; (801a694 <prvCheckTasksWaitingTermination+0x50>)
 801a652:	68db      	ldr	r3, [r3, #12]
 801a654:	68db      	ldr	r3, [r3, #12]
 801a656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	3304      	adds	r3, #4
 801a65c:	4618      	mov	r0, r3
 801a65e:	f7fe fc64 	bl	8018f2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a662:	4b0d      	ldr	r3, [pc, #52]	; (801a698 <prvCheckTasksWaitingTermination+0x54>)
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	3b01      	subs	r3, #1
 801a668:	4a0b      	ldr	r2, [pc, #44]	; (801a698 <prvCheckTasksWaitingTermination+0x54>)
 801a66a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a66c:	4b0b      	ldr	r3, [pc, #44]	; (801a69c <prvCheckTasksWaitingTermination+0x58>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	3b01      	subs	r3, #1
 801a672:	4a0a      	ldr	r2, [pc, #40]	; (801a69c <prvCheckTasksWaitingTermination+0x58>)
 801a674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a676:	f000 fde5 	bl	801b244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a67a:	6878      	ldr	r0, [r7, #4]
 801a67c:	f000 f810 	bl	801a6a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a680:	4b06      	ldr	r3, [pc, #24]	; (801a69c <prvCheckTasksWaitingTermination+0x58>)
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d1e1      	bne.n	801a64c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a688:	bf00      	nop
 801a68a:	bf00      	nop
 801a68c:	3708      	adds	r7, #8
 801a68e:	46bd      	mov	sp, r7
 801a690:	bd80      	pop	{r7, pc}
 801a692:	bf00      	nop
 801a694:	20000768 	.word	0x20000768
 801a698:	20000794 	.word	0x20000794
 801a69c:	2000077c 	.word	0x2000077c

0801a6a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d108      	bne.n	801a6c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f000 ff7a 	bl	801b5b0 <vPortFree>
				vPortFree( pxTCB );
 801a6bc:	6878      	ldr	r0, [r7, #4]
 801a6be:	f000 ff77 	bl	801b5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a6c2:	e018      	b.n	801a6f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a6ca:	2b01      	cmp	r3, #1
 801a6cc:	d103      	bne.n	801a6d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a6ce:	6878      	ldr	r0, [r7, #4]
 801a6d0:	f000 ff6e 	bl	801b5b0 <vPortFree>
	}
 801a6d4:	e00f      	b.n	801a6f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a6dc:	2b02      	cmp	r3, #2
 801a6de:	d00a      	beq.n	801a6f6 <prvDeleteTCB+0x56>
	__asm volatile
 801a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6e4:	f383 8811 	msr	BASEPRI, r3
 801a6e8:	f3bf 8f6f 	isb	sy
 801a6ec:	f3bf 8f4f 	dsb	sy
 801a6f0:	60fb      	str	r3, [r7, #12]
}
 801a6f2:	bf00      	nop
 801a6f4:	e7fe      	b.n	801a6f4 <prvDeleteTCB+0x54>
	}
 801a6f6:	bf00      	nop
 801a6f8:	3710      	adds	r7, #16
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	bd80      	pop	{r7, pc}
	...

0801a700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a700:	b480      	push	{r7}
 801a702:	b083      	sub	sp, #12
 801a704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a706:	4b0c      	ldr	r3, [pc, #48]	; (801a738 <prvResetNextTaskUnblockTime+0x38>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d104      	bne.n	801a71a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a710:	4b0a      	ldr	r3, [pc, #40]	; (801a73c <prvResetNextTaskUnblockTime+0x3c>)
 801a712:	f04f 32ff 	mov.w	r2, #4294967295
 801a716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a718:	e008      	b.n	801a72c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a71a:	4b07      	ldr	r3, [pc, #28]	; (801a738 <prvResetNextTaskUnblockTime+0x38>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	68db      	ldr	r3, [r3, #12]
 801a720:	68db      	ldr	r3, [r3, #12]
 801a722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	685b      	ldr	r3, [r3, #4]
 801a728:	4a04      	ldr	r2, [pc, #16]	; (801a73c <prvResetNextTaskUnblockTime+0x3c>)
 801a72a:	6013      	str	r3, [r2, #0]
}
 801a72c:	bf00      	nop
 801a72e:	370c      	adds	r7, #12
 801a730:	46bd      	mov	sp, r7
 801a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a736:	4770      	bx	lr
 801a738:	2000074c 	.word	0x2000074c
 801a73c:	200007b4 	.word	0x200007b4

0801a740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a740:	b480      	push	{r7}
 801a742:	b083      	sub	sp, #12
 801a744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a746:	4b0b      	ldr	r3, [pc, #44]	; (801a774 <xTaskGetSchedulerState+0x34>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d102      	bne.n	801a754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a74e:	2301      	movs	r3, #1
 801a750:	607b      	str	r3, [r7, #4]
 801a752:	e008      	b.n	801a766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a754:	4b08      	ldr	r3, [pc, #32]	; (801a778 <xTaskGetSchedulerState+0x38>)
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d102      	bne.n	801a762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a75c:	2302      	movs	r3, #2
 801a75e:	607b      	str	r3, [r7, #4]
 801a760:	e001      	b.n	801a766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a762:	2300      	movs	r3, #0
 801a764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a766:	687b      	ldr	r3, [r7, #4]
	}
 801a768:	4618      	mov	r0, r3
 801a76a:	370c      	adds	r7, #12
 801a76c:	46bd      	mov	sp, r7
 801a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a772:	4770      	bx	lr
 801a774:	200007a0 	.word	0x200007a0
 801a778:	200007bc 	.word	0x200007bc

0801a77c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a77c:	b580      	push	{r7, lr}
 801a77e:	b084      	sub	sp, #16
 801a780:	af00      	add	r7, sp, #0
 801a782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a788:	2300      	movs	r3, #0
 801a78a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d069      	beq.n	801a866 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a796:	4b36      	ldr	r3, [pc, #216]	; (801a870 <xTaskPriorityInherit+0xf4>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a79c:	429a      	cmp	r2, r3
 801a79e:	d259      	bcs.n	801a854 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	699b      	ldr	r3, [r3, #24]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	db06      	blt.n	801a7b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7a8:	4b31      	ldr	r3, [pc, #196]	; (801a870 <xTaskPriorityInherit+0xf4>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7ae:	f1c3 0207 	rsb	r2, r3, #7
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a7b6:	68bb      	ldr	r3, [r7, #8]
 801a7b8:	6959      	ldr	r1, [r3, #20]
 801a7ba:	68bb      	ldr	r3, [r7, #8]
 801a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7be:	4613      	mov	r3, r2
 801a7c0:	009b      	lsls	r3, r3, #2
 801a7c2:	4413      	add	r3, r2
 801a7c4:	009b      	lsls	r3, r3, #2
 801a7c6:	4a2b      	ldr	r2, [pc, #172]	; (801a874 <xTaskPriorityInherit+0xf8>)
 801a7c8:	4413      	add	r3, r2
 801a7ca:	4299      	cmp	r1, r3
 801a7cc:	d13a      	bne.n	801a844 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a7ce:	68bb      	ldr	r3, [r7, #8]
 801a7d0:	3304      	adds	r3, #4
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f7fe fba9 	bl	8018f2a <uxListRemove>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d115      	bne.n	801a80a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a7de:	68bb      	ldr	r3, [r7, #8]
 801a7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7e2:	4924      	ldr	r1, [pc, #144]	; (801a874 <xTaskPriorityInherit+0xf8>)
 801a7e4:	4613      	mov	r3, r2
 801a7e6:	009b      	lsls	r3, r3, #2
 801a7e8:	4413      	add	r3, r2
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	440b      	add	r3, r1
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d10a      	bne.n	801a80a <xTaskPriorityInherit+0x8e>
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	fa02 f303 	lsl.w	r3, r2, r3
 801a7fe:	43da      	mvns	r2, r3
 801a800:	4b1d      	ldr	r3, [pc, #116]	; (801a878 <xTaskPriorityInherit+0xfc>)
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	4013      	ands	r3, r2
 801a806:	4a1c      	ldr	r2, [pc, #112]	; (801a878 <xTaskPriorityInherit+0xfc>)
 801a808:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a80a:	4b19      	ldr	r3, [pc, #100]	; (801a870 <xTaskPriorityInherit+0xf4>)
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a814:	68bb      	ldr	r3, [r7, #8]
 801a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a818:	2201      	movs	r2, #1
 801a81a:	409a      	lsls	r2, r3
 801a81c:	4b16      	ldr	r3, [pc, #88]	; (801a878 <xTaskPriorityInherit+0xfc>)
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	4313      	orrs	r3, r2
 801a822:	4a15      	ldr	r2, [pc, #84]	; (801a878 <xTaskPriorityInherit+0xfc>)
 801a824:	6013      	str	r3, [r2, #0]
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a82a:	4613      	mov	r3, r2
 801a82c:	009b      	lsls	r3, r3, #2
 801a82e:	4413      	add	r3, r2
 801a830:	009b      	lsls	r3, r3, #2
 801a832:	4a10      	ldr	r2, [pc, #64]	; (801a874 <xTaskPriorityInherit+0xf8>)
 801a834:	441a      	add	r2, r3
 801a836:	68bb      	ldr	r3, [r7, #8]
 801a838:	3304      	adds	r3, #4
 801a83a:	4619      	mov	r1, r3
 801a83c:	4610      	mov	r0, r2
 801a83e:	f7fe fb17 	bl	8018e70 <vListInsertEnd>
 801a842:	e004      	b.n	801a84e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a844:	4b0a      	ldr	r3, [pc, #40]	; (801a870 <xTaskPriorityInherit+0xf4>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a84e:	2301      	movs	r3, #1
 801a850:	60fb      	str	r3, [r7, #12]
 801a852:	e008      	b.n	801a866 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a858:	4b05      	ldr	r3, [pc, #20]	; (801a870 <xTaskPriorityInherit+0xf4>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a85e:	429a      	cmp	r2, r3
 801a860:	d201      	bcs.n	801a866 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a862:	2301      	movs	r3, #1
 801a864:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a866:	68fb      	ldr	r3, [r7, #12]
	}
 801a868:	4618      	mov	r0, r3
 801a86a:	3710      	adds	r7, #16
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	20000694 	.word	0x20000694
 801a874:	20000698 	.word	0x20000698
 801a878:	2000079c 	.word	0x2000079c

0801a87c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b086      	sub	sp, #24
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a888:	2300      	movs	r3, #0
 801a88a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d06e      	beq.n	801a970 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a892:	4b3a      	ldr	r3, [pc, #232]	; (801a97c <xTaskPriorityDisinherit+0x100>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	693a      	ldr	r2, [r7, #16]
 801a898:	429a      	cmp	r2, r3
 801a89a:	d00a      	beq.n	801a8b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8a0:	f383 8811 	msr	BASEPRI, r3
 801a8a4:	f3bf 8f6f 	isb	sy
 801a8a8:	f3bf 8f4f 	dsb	sy
 801a8ac:	60fb      	str	r3, [r7, #12]
}
 801a8ae:	bf00      	nop
 801a8b0:	e7fe      	b.n	801a8b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a8b2:	693b      	ldr	r3, [r7, #16]
 801a8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d10a      	bne.n	801a8d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8be:	f383 8811 	msr	BASEPRI, r3
 801a8c2:	f3bf 8f6f 	isb	sy
 801a8c6:	f3bf 8f4f 	dsb	sy
 801a8ca:	60bb      	str	r3, [r7, #8]
}
 801a8cc:	bf00      	nop
 801a8ce:	e7fe      	b.n	801a8ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a8d0:	693b      	ldr	r3, [r7, #16]
 801a8d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8d4:	1e5a      	subs	r2, r3, #1
 801a8d6:	693b      	ldr	r3, [r7, #16]
 801a8d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d044      	beq.n	801a970 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d140      	bne.n	801a970 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a8ee:	693b      	ldr	r3, [r7, #16]
 801a8f0:	3304      	adds	r3, #4
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	f7fe fb19 	bl	8018f2a <uxListRemove>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d115      	bne.n	801a92a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a902:	491f      	ldr	r1, [pc, #124]	; (801a980 <xTaskPriorityDisinherit+0x104>)
 801a904:	4613      	mov	r3, r2
 801a906:	009b      	lsls	r3, r3, #2
 801a908:	4413      	add	r3, r2
 801a90a:	009b      	lsls	r3, r3, #2
 801a90c:	440b      	add	r3, r1
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d10a      	bne.n	801a92a <xTaskPriorityDisinherit+0xae>
 801a914:	693b      	ldr	r3, [r7, #16]
 801a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a918:	2201      	movs	r2, #1
 801a91a:	fa02 f303 	lsl.w	r3, r2, r3
 801a91e:	43da      	mvns	r2, r3
 801a920:	4b18      	ldr	r3, [pc, #96]	; (801a984 <xTaskPriorityDisinherit+0x108>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4013      	ands	r3, r2
 801a926:	4a17      	ldr	r2, [pc, #92]	; (801a984 <xTaskPriorityDisinherit+0x108>)
 801a928:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a92e:	693b      	ldr	r3, [r7, #16]
 801a930:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a932:	693b      	ldr	r3, [r7, #16]
 801a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a936:	f1c3 0207 	rsb	r2, r3, #7
 801a93a:	693b      	ldr	r3, [r7, #16]
 801a93c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a93e:	693b      	ldr	r3, [r7, #16]
 801a940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a942:	2201      	movs	r2, #1
 801a944:	409a      	lsls	r2, r3
 801a946:	4b0f      	ldr	r3, [pc, #60]	; (801a984 <xTaskPriorityDisinherit+0x108>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4313      	orrs	r3, r2
 801a94c:	4a0d      	ldr	r2, [pc, #52]	; (801a984 <xTaskPriorityDisinherit+0x108>)
 801a94e:	6013      	str	r3, [r2, #0]
 801a950:	693b      	ldr	r3, [r7, #16]
 801a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a954:	4613      	mov	r3, r2
 801a956:	009b      	lsls	r3, r3, #2
 801a958:	4413      	add	r3, r2
 801a95a:	009b      	lsls	r3, r3, #2
 801a95c:	4a08      	ldr	r2, [pc, #32]	; (801a980 <xTaskPriorityDisinherit+0x104>)
 801a95e:	441a      	add	r2, r3
 801a960:	693b      	ldr	r3, [r7, #16]
 801a962:	3304      	adds	r3, #4
 801a964:	4619      	mov	r1, r3
 801a966:	4610      	mov	r0, r2
 801a968:	f7fe fa82 	bl	8018e70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a96c:	2301      	movs	r3, #1
 801a96e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a970:	697b      	ldr	r3, [r7, #20]
	}
 801a972:	4618      	mov	r0, r3
 801a974:	3718      	adds	r7, #24
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}
 801a97a:	bf00      	nop
 801a97c:	20000694 	.word	0x20000694
 801a980:	20000698 	.word	0x20000698
 801a984:	2000079c 	.word	0x2000079c

0801a988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b088      	sub	sp, #32
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
 801a990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a996:	2301      	movs	r3, #1
 801a998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	f000 8083 	beq.w	801aaa8 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a9a2:	69bb      	ldr	r3, [r7, #24]
 801a9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d10a      	bne.n	801a9c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9ae:	f383 8811 	msr	BASEPRI, r3
 801a9b2:	f3bf 8f6f 	isb	sy
 801a9b6:	f3bf 8f4f 	dsb	sy
 801a9ba:	60fb      	str	r3, [r7, #12]
}
 801a9bc:	bf00      	nop
 801a9be:	e7fe      	b.n	801a9be <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a9c0:	69bb      	ldr	r3, [r7, #24]
 801a9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9c4:	683a      	ldr	r2, [r7, #0]
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d902      	bls.n	801a9d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	61fb      	str	r3, [r7, #28]
 801a9ce:	e002      	b.n	801a9d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a9d0:	69bb      	ldr	r3, [r7, #24]
 801a9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a9d6:	69bb      	ldr	r3, [r7, #24]
 801a9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9da:	69fa      	ldr	r2, [r7, #28]
 801a9dc:	429a      	cmp	r2, r3
 801a9de:	d063      	beq.n	801aaa8 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a9e0:	69bb      	ldr	r3, [r7, #24]
 801a9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a9e4:	697a      	ldr	r2, [r7, #20]
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	d15e      	bne.n	801aaa8 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a9ea:	4b31      	ldr	r3, [pc, #196]	; (801aab0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	69ba      	ldr	r2, [r7, #24]
 801a9f0:	429a      	cmp	r2, r3
 801a9f2:	d10a      	bne.n	801aa0a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 801a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9f8:	f383 8811 	msr	BASEPRI, r3
 801a9fc:	f3bf 8f6f 	isb	sy
 801aa00:	f3bf 8f4f 	dsb	sy
 801aa04:	60bb      	str	r3, [r7, #8]
}
 801aa06:	bf00      	nop
 801aa08:	e7fe      	b.n	801aa08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801aa0a:	69bb      	ldr	r3, [r7, #24]
 801aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801aa10:	69bb      	ldr	r3, [r7, #24]
 801aa12:	69fa      	ldr	r2, [r7, #28]
 801aa14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801aa16:	69bb      	ldr	r3, [r7, #24]
 801aa18:	699b      	ldr	r3, [r3, #24]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	db04      	blt.n	801aa28 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa1e:	69fb      	ldr	r3, [r7, #28]
 801aa20:	f1c3 0207 	rsb	r2, r3, #7
 801aa24:	69bb      	ldr	r3, [r7, #24]
 801aa26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801aa28:	69bb      	ldr	r3, [r7, #24]
 801aa2a:	6959      	ldr	r1, [r3, #20]
 801aa2c:	693a      	ldr	r2, [r7, #16]
 801aa2e:	4613      	mov	r3, r2
 801aa30:	009b      	lsls	r3, r3, #2
 801aa32:	4413      	add	r3, r2
 801aa34:	009b      	lsls	r3, r3, #2
 801aa36:	4a1f      	ldr	r2, [pc, #124]	; (801aab4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801aa38:	4413      	add	r3, r2
 801aa3a:	4299      	cmp	r1, r3
 801aa3c:	d134      	bne.n	801aaa8 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aa3e:	69bb      	ldr	r3, [r7, #24]
 801aa40:	3304      	adds	r3, #4
 801aa42:	4618      	mov	r0, r3
 801aa44:	f7fe fa71 	bl	8018f2a <uxListRemove>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d115      	bne.n	801aa7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa52:	4918      	ldr	r1, [pc, #96]	; (801aab4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801aa54:	4613      	mov	r3, r2
 801aa56:	009b      	lsls	r3, r3, #2
 801aa58:	4413      	add	r3, r2
 801aa5a:	009b      	lsls	r3, r3, #2
 801aa5c:	440b      	add	r3, r1
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d10a      	bne.n	801aa7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801aa64:	69bb      	ldr	r3, [r7, #24]
 801aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa68:	2201      	movs	r2, #1
 801aa6a:	fa02 f303 	lsl.w	r3, r2, r3
 801aa6e:	43da      	mvns	r2, r3
 801aa70:	4b11      	ldr	r3, [pc, #68]	; (801aab8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	4013      	ands	r3, r2
 801aa76:	4a10      	ldr	r2, [pc, #64]	; (801aab8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801aa78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801aa7a:	69bb      	ldr	r3, [r7, #24]
 801aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa7e:	2201      	movs	r2, #1
 801aa80:	409a      	lsls	r2, r3
 801aa82:	4b0d      	ldr	r3, [pc, #52]	; (801aab8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	4313      	orrs	r3, r2
 801aa88:	4a0b      	ldr	r2, [pc, #44]	; (801aab8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801aa8a:	6013      	str	r3, [r2, #0]
 801aa8c:	69bb      	ldr	r3, [r7, #24]
 801aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa90:	4613      	mov	r3, r2
 801aa92:	009b      	lsls	r3, r3, #2
 801aa94:	4413      	add	r3, r2
 801aa96:	009b      	lsls	r3, r3, #2
 801aa98:	4a06      	ldr	r2, [pc, #24]	; (801aab4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801aa9a:	441a      	add	r2, r3
 801aa9c:	69bb      	ldr	r3, [r7, #24]
 801aa9e:	3304      	adds	r3, #4
 801aaa0:	4619      	mov	r1, r3
 801aaa2:	4610      	mov	r0, r2
 801aaa4:	f7fe f9e4 	bl	8018e70 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801aaa8:	bf00      	nop
 801aaaa:	3720      	adds	r7, #32
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd80      	pop	{r7, pc}
 801aab0:	20000694 	.word	0x20000694
 801aab4:	20000698 	.word	0x20000698
 801aab8:	2000079c 	.word	0x2000079c

0801aabc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801aabc:	b480      	push	{r7}
 801aabe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801aac0:	4b07      	ldr	r3, [pc, #28]	; (801aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d004      	beq.n	801aad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801aac8:	4b05      	ldr	r3, [pc, #20]	; (801aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801aace:	3201      	adds	r2, #1
 801aad0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801aad2:	4b03      	ldr	r3, [pc, #12]	; (801aae0 <pvTaskIncrementMutexHeldCount+0x24>)
 801aad4:	681b      	ldr	r3, [r3, #0]
	}
 801aad6:	4618      	mov	r0, r3
 801aad8:	46bd      	mov	sp, r7
 801aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aade:	4770      	bx	lr
 801aae0:	20000694 	.word	0x20000694

0801aae4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b086      	sub	sp, #24
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	60f8      	str	r0, [r7, #12]
 801aaec:	60b9      	str	r1, [r7, #8]
 801aaee:	607a      	str	r2, [r7, #4]
 801aaf0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801aaf2:	f000 fb77 	bl	801b1e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801aaf6:	4b26      	ldr	r3, [pc, #152]	; (801ab90 <xTaskNotifyWait+0xac>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	2b02      	cmp	r3, #2
 801ab02:	d01a      	beq.n	801ab3a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801ab04:	4b22      	ldr	r3, [pc, #136]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801ab0a:	68fa      	ldr	r2, [r7, #12]
 801ab0c:	43d2      	mvns	r2, r2
 801ab0e:	400a      	ands	r2, r1
 801ab10:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801ab12:	4b1f      	ldr	r3, [pc, #124]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	2201      	movs	r2, #1
 801ab18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d00b      	beq.n	801ab3a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ab22:	2101      	movs	r1, #1
 801ab24:	6838      	ldr	r0, [r7, #0]
 801ab26:	f000 f9c7 	bl	801aeb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801ab2a:	4b1a      	ldr	r3, [pc, #104]	; (801ab94 <xTaskNotifyWait+0xb0>)
 801ab2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab30:	601a      	str	r2, [r3, #0]
 801ab32:	f3bf 8f4f 	dsb	sy
 801ab36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801ab3a:	f000 fb83 	bl	801b244 <vPortExitCritical>

		taskENTER_CRITICAL();
 801ab3e:	f000 fb51 	bl	801b1e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d004      	beq.n	801ab52 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801ab48:	4b11      	ldr	r3, [pc, #68]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801ab52:	4b0f      	ldr	r3, [pc, #60]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ab5a:	b2db      	uxtb	r3, r3
 801ab5c:	2b02      	cmp	r3, #2
 801ab5e:	d002      	beq.n	801ab66 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801ab60:	2300      	movs	r3, #0
 801ab62:	617b      	str	r3, [r7, #20]
 801ab64:	e008      	b.n	801ab78 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801ab66:	4b0a      	ldr	r3, [pc, #40]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801ab6c:	68ba      	ldr	r2, [r7, #8]
 801ab6e:	43d2      	mvns	r2, r2
 801ab70:	400a      	ands	r2, r1
 801ab72:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801ab74:	2301      	movs	r3, #1
 801ab76:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ab78:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <xTaskNotifyWait+0xac>)
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801ab82:	f000 fb5f 	bl	801b244 <vPortExitCritical>

		return xReturn;
 801ab86:	697b      	ldr	r3, [r7, #20]
	}
 801ab88:	4618      	mov	r0, r3
 801ab8a:	3718      	adds	r7, #24
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd80      	pop	{r7, pc}
 801ab90:	20000694 	.word	0x20000694
 801ab94:	e000ed04 	.word	0xe000ed04

0801ab98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b08a      	sub	sp, #40	; 0x28
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	60f8      	str	r0, [r7, #12]
 801aba0:	60b9      	str	r1, [r7, #8]
 801aba2:	603b      	str	r3, [r7, #0]
 801aba4:	4613      	mov	r3, r2
 801aba6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801aba8:	2301      	movs	r3, #1
 801abaa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d10a      	bne.n	801abc8 <xTaskGenericNotify+0x30>
	__asm volatile
 801abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abb6:	f383 8811 	msr	BASEPRI, r3
 801abba:	f3bf 8f6f 	isb	sy
 801abbe:	f3bf 8f4f 	dsb	sy
 801abc2:	61bb      	str	r3, [r7, #24]
}
 801abc4:	bf00      	nop
 801abc6:	e7fe      	b.n	801abc6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801abcc:	f000 fb0a 	bl	801b1e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d003      	beq.n	801abde <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801abd6:	6a3b      	ldr	r3, [r7, #32]
 801abd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801abde:	6a3b      	ldr	r3, [r7, #32]
 801abe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801abe4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801abe6:	6a3b      	ldr	r3, [r7, #32]
 801abe8:	2202      	movs	r2, #2
 801abea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801abee:	79fb      	ldrb	r3, [r7, #7]
 801abf0:	2b04      	cmp	r3, #4
 801abf2:	d828      	bhi.n	801ac46 <xTaskGenericNotify+0xae>
 801abf4:	a201      	add	r2, pc, #4	; (adr r2, 801abfc <xTaskGenericNotify+0x64>)
 801abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abfa:	bf00      	nop
 801abfc:	0801ac67 	.word	0x0801ac67
 801ac00:	0801ac11 	.word	0x0801ac11
 801ac04:	0801ac1f 	.word	0x0801ac1f
 801ac08:	0801ac2b 	.word	0x0801ac2b
 801ac0c:	0801ac33 	.word	0x0801ac33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801ac10:	6a3b      	ldr	r3, [r7, #32]
 801ac12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	431a      	orrs	r2, r3
 801ac18:	6a3b      	ldr	r3, [r7, #32]
 801ac1a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac1c:	e026      	b.n	801ac6c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801ac1e:	6a3b      	ldr	r3, [r7, #32]
 801ac20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac22:	1c5a      	adds	r2, r3, #1
 801ac24:	6a3b      	ldr	r3, [r7, #32]
 801ac26:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac28:	e020      	b.n	801ac6c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801ac2a:	6a3b      	ldr	r3, [r7, #32]
 801ac2c:	68ba      	ldr	r2, [r7, #8]
 801ac2e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ac30:	e01c      	b.n	801ac6c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801ac32:	7ffb      	ldrb	r3, [r7, #31]
 801ac34:	2b02      	cmp	r3, #2
 801ac36:	d003      	beq.n	801ac40 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801ac38:	6a3b      	ldr	r3, [r7, #32]
 801ac3a:	68ba      	ldr	r2, [r7, #8]
 801ac3c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801ac3e:	e015      	b.n	801ac6c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 801ac40:	2300      	movs	r3, #0
 801ac42:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801ac44:	e012      	b.n	801ac6c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801ac46:	6a3b      	ldr	r3, [r7, #32]
 801ac48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac4e:	d00c      	beq.n	801ac6a <xTaskGenericNotify+0xd2>
	__asm volatile
 801ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac54:	f383 8811 	msr	BASEPRI, r3
 801ac58:	f3bf 8f6f 	isb	sy
 801ac5c:	f3bf 8f4f 	dsb	sy
 801ac60:	617b      	str	r3, [r7, #20]
}
 801ac62:	bf00      	nop
 801ac64:	e7fe      	b.n	801ac64 <xTaskGenericNotify+0xcc>
					break;
 801ac66:	bf00      	nop
 801ac68:	e000      	b.n	801ac6c <xTaskGenericNotify+0xd4>

					break;
 801ac6a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801ac6c:	7ffb      	ldrb	r3, [r7, #31]
 801ac6e:	2b01      	cmp	r3, #1
 801ac70:	d139      	bne.n	801ace6 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ac72:	6a3b      	ldr	r3, [r7, #32]
 801ac74:	3304      	adds	r3, #4
 801ac76:	4618      	mov	r0, r3
 801ac78:	f7fe f957 	bl	8018f2a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801ac7c:	6a3b      	ldr	r3, [r7, #32]
 801ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac80:	2201      	movs	r2, #1
 801ac82:	409a      	lsls	r2, r3
 801ac84:	4b1b      	ldr	r3, [pc, #108]	; (801acf4 <xTaskGenericNotify+0x15c>)
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	4313      	orrs	r3, r2
 801ac8a:	4a1a      	ldr	r2, [pc, #104]	; (801acf4 <xTaskGenericNotify+0x15c>)
 801ac8c:	6013      	str	r3, [r2, #0]
 801ac8e:	6a3b      	ldr	r3, [r7, #32]
 801ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac92:	4613      	mov	r3, r2
 801ac94:	009b      	lsls	r3, r3, #2
 801ac96:	4413      	add	r3, r2
 801ac98:	009b      	lsls	r3, r3, #2
 801ac9a:	4a17      	ldr	r2, [pc, #92]	; (801acf8 <xTaskGenericNotify+0x160>)
 801ac9c:	441a      	add	r2, r3
 801ac9e:	6a3b      	ldr	r3, [r7, #32]
 801aca0:	3304      	adds	r3, #4
 801aca2:	4619      	mov	r1, r3
 801aca4:	4610      	mov	r0, r2
 801aca6:	f7fe f8e3 	bl	8018e70 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801acaa:	6a3b      	ldr	r3, [r7, #32]
 801acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d00a      	beq.n	801acc8 <xTaskGenericNotify+0x130>
	__asm volatile
 801acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acb6:	f383 8811 	msr	BASEPRI, r3
 801acba:	f3bf 8f6f 	isb	sy
 801acbe:	f3bf 8f4f 	dsb	sy
 801acc2:	613b      	str	r3, [r7, #16]
}
 801acc4:	bf00      	nop
 801acc6:	e7fe      	b.n	801acc6 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801acc8:	6a3b      	ldr	r3, [r7, #32]
 801acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801accc:	4b0b      	ldr	r3, [pc, #44]	; (801acfc <xTaskGenericNotify+0x164>)
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acd2:	429a      	cmp	r2, r3
 801acd4:	d907      	bls.n	801ace6 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801acd6:	4b0a      	ldr	r3, [pc, #40]	; (801ad00 <xTaskGenericNotify+0x168>)
 801acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801acdc:	601a      	str	r2, [r3, #0]
 801acde:	f3bf 8f4f 	dsb	sy
 801ace2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801ace6:	f000 faad 	bl	801b244 <vPortExitCritical>

		return xReturn;
 801acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801acec:	4618      	mov	r0, r3
 801acee:	3728      	adds	r7, #40	; 0x28
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	2000079c 	.word	0x2000079c
 801acf8:	20000698 	.word	0x20000698
 801acfc:	20000694 	.word	0x20000694
 801ad00:	e000ed04 	.word	0xe000ed04

0801ad04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b08e      	sub	sp, #56	; 0x38
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	60f8      	str	r0, [r7, #12]
 801ad0c:	60b9      	str	r1, [r7, #8]
 801ad0e:	603b      	str	r3, [r7, #0]
 801ad10:	4613      	mov	r3, r2
 801ad12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801ad14:	2301      	movs	r3, #1
 801ad16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d10a      	bne.n	801ad34 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad22:	f383 8811 	msr	BASEPRI, r3
 801ad26:	f3bf 8f6f 	isb	sy
 801ad2a:	f3bf 8f4f 	dsb	sy
 801ad2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801ad30:	bf00      	nop
 801ad32:	e7fe      	b.n	801ad32 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ad34:	f000 fb38 	bl	801b3a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801ad3c:	f3ef 8211 	mrs	r2, BASEPRI
 801ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad44:	f383 8811 	msr	BASEPRI, r3
 801ad48:	f3bf 8f6f 	isb	sy
 801ad4c:	f3bf 8f4f 	dsb	sy
 801ad50:	623a      	str	r2, [r7, #32]
 801ad52:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801ad54:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801ad58:	683b      	ldr	r3, [r7, #0]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d003      	beq.n	801ad66 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ad6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad72:	2202      	movs	r2, #2
 801ad74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801ad78:	79fb      	ldrb	r3, [r7, #7]
 801ad7a:	2b04      	cmp	r3, #4
 801ad7c:	d828      	bhi.n	801add0 <xTaskGenericNotifyFromISR+0xcc>
 801ad7e:	a201      	add	r2, pc, #4	; (adr r2, 801ad84 <xTaskGenericNotifyFromISR+0x80>)
 801ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad84:	0801adf1 	.word	0x0801adf1
 801ad88:	0801ad99 	.word	0x0801ad99
 801ad8c:	0801ada7 	.word	0x0801ada7
 801ad90:	0801adb3 	.word	0x0801adb3
 801ad94:	0801adbb 	.word	0x0801adbb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	431a      	orrs	r2, r3
 801ada0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801ada4:	e027      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801adaa:	1c5a      	adds	r2, r3, #1
 801adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801adb0:	e021      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb4:	68ba      	ldr	r2, [r7, #8]
 801adb6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801adb8:	e01d      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801adba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801adbe:	2b02      	cmp	r3, #2
 801adc0:	d003      	beq.n	801adca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc4:	68ba      	ldr	r2, [r7, #8]
 801adc6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801adc8:	e015      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 801adca:	2300      	movs	r3, #0
 801adcc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801adce:	e012      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801add8:	d00c      	beq.n	801adf4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adde:	f383 8811 	msr	BASEPRI, r3
 801ade2:	f3bf 8f6f 	isb	sy
 801ade6:	f3bf 8f4f 	dsb	sy
 801adea:	61bb      	str	r3, [r7, #24]
}
 801adec:	bf00      	nop
 801adee:	e7fe      	b.n	801adee <xTaskGenericNotifyFromISR+0xea>
					break;
 801adf0:	bf00      	nop
 801adf2:	e000      	b.n	801adf6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 801adf4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801adf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801adfa:	2b01      	cmp	r3, #1
 801adfc:	d145      	bne.n	801ae8a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d00a      	beq.n	801ae1c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 801ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae0a:	f383 8811 	msr	BASEPRI, r3
 801ae0e:	f3bf 8f6f 	isb	sy
 801ae12:	f3bf 8f4f 	dsb	sy
 801ae16:	617b      	str	r3, [r7, #20]
}
 801ae18:	bf00      	nop
 801ae1a:	e7fe      	b.n	801ae1a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ae1c:	4b20      	ldr	r3, [pc, #128]	; (801aea0 <xTaskGenericNotifyFromISR+0x19c>)
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d11c      	bne.n	801ae5e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae26:	3304      	adds	r3, #4
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7fe f87e 	bl	8018f2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae32:	2201      	movs	r2, #1
 801ae34:	409a      	lsls	r2, r3
 801ae36:	4b1b      	ldr	r3, [pc, #108]	; (801aea4 <xTaskGenericNotifyFromISR+0x1a0>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	4313      	orrs	r3, r2
 801ae3c:	4a19      	ldr	r2, [pc, #100]	; (801aea4 <xTaskGenericNotifyFromISR+0x1a0>)
 801ae3e:	6013      	str	r3, [r2, #0]
 801ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae44:	4613      	mov	r3, r2
 801ae46:	009b      	lsls	r3, r3, #2
 801ae48:	4413      	add	r3, r2
 801ae4a:	009b      	lsls	r3, r3, #2
 801ae4c:	4a16      	ldr	r2, [pc, #88]	; (801aea8 <xTaskGenericNotifyFromISR+0x1a4>)
 801ae4e:	441a      	add	r2, r3
 801ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae52:	3304      	adds	r3, #4
 801ae54:	4619      	mov	r1, r3
 801ae56:	4610      	mov	r0, r2
 801ae58:	f7fe f80a 	bl	8018e70 <vListInsertEnd>
 801ae5c:	e005      	b.n	801ae6a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae60:	3318      	adds	r3, #24
 801ae62:	4619      	mov	r1, r3
 801ae64:	4811      	ldr	r0, [pc, #68]	; (801aeac <xTaskGenericNotifyFromISR+0x1a8>)
 801ae66:	f7fe f803 	bl	8018e70 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae6e:	4b10      	ldr	r3, [pc, #64]	; (801aeb0 <xTaskGenericNotifyFromISR+0x1ac>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae74:	429a      	cmp	r2, r3
 801ae76:	d908      	bls.n	801ae8a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801ae78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d002      	beq.n	801ae84 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801ae7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ae80:	2201      	movs	r2, #1
 801ae82:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801ae84:	4b0b      	ldr	r3, [pc, #44]	; (801aeb4 <xTaskGenericNotifyFromISR+0x1b0>)
 801ae86:	2201      	movs	r2, #1
 801ae88:	601a      	str	r2, [r3, #0]
 801ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	f383 8811 	msr	BASEPRI, r3
}
 801ae94:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801ae96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3738      	adds	r7, #56	; 0x38
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}
 801aea0:	200007bc 	.word	0x200007bc
 801aea4:	2000079c 	.word	0x2000079c
 801aea8:	20000698 	.word	0x20000698
 801aeac:	20000754 	.word	0x20000754
 801aeb0:	20000694 	.word	0x20000694
 801aeb4:	200007a8 	.word	0x200007a8

0801aeb8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b084      	sub	sp, #16
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
 801aec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801aec2:	4b29      	ldr	r3, [pc, #164]	; (801af68 <prvAddCurrentTaskToDelayedList+0xb0>)
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aec8:	4b28      	ldr	r3, [pc, #160]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	3304      	adds	r3, #4
 801aece:	4618      	mov	r0, r3
 801aed0:	f7fe f82b 	bl	8018f2a <uxListRemove>
 801aed4:	4603      	mov	r3, r0
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d10b      	bne.n	801aef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801aeda:	4b24      	ldr	r3, [pc, #144]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aee0:	2201      	movs	r2, #1
 801aee2:	fa02 f303 	lsl.w	r3, r2, r3
 801aee6:	43da      	mvns	r2, r3
 801aee8:	4b21      	ldr	r3, [pc, #132]	; (801af70 <prvAddCurrentTaskToDelayedList+0xb8>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	4013      	ands	r3, r2
 801aeee:	4a20      	ldr	r2, [pc, #128]	; (801af70 <prvAddCurrentTaskToDelayedList+0xb8>)
 801aef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aef8:	d10a      	bne.n	801af10 <prvAddCurrentTaskToDelayedList+0x58>
 801aefa:	683b      	ldr	r3, [r7, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d007      	beq.n	801af10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801af00:	4b1a      	ldr	r3, [pc, #104]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	3304      	adds	r3, #4
 801af06:	4619      	mov	r1, r3
 801af08:	481a      	ldr	r0, [pc, #104]	; (801af74 <prvAddCurrentTaskToDelayedList+0xbc>)
 801af0a:	f7fd ffb1 	bl	8018e70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801af0e:	e026      	b.n	801af5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801af10:	68fa      	ldr	r2, [r7, #12]
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	4413      	add	r3, r2
 801af16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801af18:	4b14      	ldr	r3, [pc, #80]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	68ba      	ldr	r2, [r7, #8]
 801af1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801af20:	68ba      	ldr	r2, [r7, #8]
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	429a      	cmp	r2, r3
 801af26:	d209      	bcs.n	801af3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801af28:	4b13      	ldr	r3, [pc, #76]	; (801af78 <prvAddCurrentTaskToDelayedList+0xc0>)
 801af2a:	681a      	ldr	r2, [r3, #0]
 801af2c:	4b0f      	ldr	r3, [pc, #60]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	3304      	adds	r3, #4
 801af32:	4619      	mov	r1, r3
 801af34:	4610      	mov	r0, r2
 801af36:	f7fd ffbf 	bl	8018eb8 <vListInsert>
}
 801af3a:	e010      	b.n	801af5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801af3c:	4b0f      	ldr	r3, [pc, #60]	; (801af7c <prvAddCurrentTaskToDelayedList+0xc4>)
 801af3e:	681a      	ldr	r2, [r3, #0]
 801af40:	4b0a      	ldr	r3, [pc, #40]	; (801af6c <prvAddCurrentTaskToDelayedList+0xb4>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	3304      	adds	r3, #4
 801af46:	4619      	mov	r1, r3
 801af48:	4610      	mov	r0, r2
 801af4a:	f7fd ffb5 	bl	8018eb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801af4e:	4b0c      	ldr	r3, [pc, #48]	; (801af80 <prvAddCurrentTaskToDelayedList+0xc8>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	68ba      	ldr	r2, [r7, #8]
 801af54:	429a      	cmp	r2, r3
 801af56:	d202      	bcs.n	801af5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801af58:	4a09      	ldr	r2, [pc, #36]	; (801af80 <prvAddCurrentTaskToDelayedList+0xc8>)
 801af5a:	68bb      	ldr	r3, [r7, #8]
 801af5c:	6013      	str	r3, [r2, #0]
}
 801af5e:	bf00      	nop
 801af60:	3710      	adds	r7, #16
 801af62:	46bd      	mov	sp, r7
 801af64:	bd80      	pop	{r7, pc}
 801af66:	bf00      	nop
 801af68:	20000798 	.word	0x20000798
 801af6c:	20000694 	.word	0x20000694
 801af70:	2000079c 	.word	0x2000079c
 801af74:	20000780 	.word	0x20000780
 801af78:	20000750 	.word	0x20000750
 801af7c:	2000074c 	.word	0x2000074c
 801af80:	200007b4 	.word	0x200007b4

0801af84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801af84:	b480      	push	{r7}
 801af86:	b085      	sub	sp, #20
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	3b04      	subs	r3, #4
 801af94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801af9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	3b04      	subs	r3, #4
 801afa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	f023 0201 	bic.w	r2, r3, #1
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	3b04      	subs	r3, #4
 801afb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801afb4:	4a0c      	ldr	r2, [pc, #48]	; (801afe8 <pxPortInitialiseStack+0x64>)
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	3b14      	subs	r3, #20
 801afbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801afc0:	687a      	ldr	r2, [r7, #4]
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	3b04      	subs	r3, #4
 801afca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	f06f 0202 	mvn.w	r2, #2
 801afd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	3b20      	subs	r3, #32
 801afd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801afda:	68fb      	ldr	r3, [r7, #12]
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3714      	adds	r7, #20
 801afe0:	46bd      	mov	sp, r7
 801afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe6:	4770      	bx	lr
 801afe8:	0801afed 	.word	0x0801afed

0801afec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801afec:	b480      	push	{r7}
 801afee:	b085      	sub	sp, #20
 801aff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801aff2:	2300      	movs	r3, #0
 801aff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801aff6:	4b12      	ldr	r3, [pc, #72]	; (801b040 <prvTaskExitError+0x54>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801affe:	d00a      	beq.n	801b016 <prvTaskExitError+0x2a>
	__asm volatile
 801b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b004:	f383 8811 	msr	BASEPRI, r3
 801b008:	f3bf 8f6f 	isb	sy
 801b00c:	f3bf 8f4f 	dsb	sy
 801b010:	60fb      	str	r3, [r7, #12]
}
 801b012:	bf00      	nop
 801b014:	e7fe      	b.n	801b014 <prvTaskExitError+0x28>
	__asm volatile
 801b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b01a:	f383 8811 	msr	BASEPRI, r3
 801b01e:	f3bf 8f6f 	isb	sy
 801b022:	f3bf 8f4f 	dsb	sy
 801b026:	60bb      	str	r3, [r7, #8]
}
 801b028:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b02a:	bf00      	nop
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d0fc      	beq.n	801b02c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b032:	bf00      	nop
 801b034:	bf00      	nop
 801b036:	3714      	adds	r7, #20
 801b038:	46bd      	mov	sp, r7
 801b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03e:	4770      	bx	lr
 801b040:	200001ac 	.word	0x200001ac
	...

0801b050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b050:	4b07      	ldr	r3, [pc, #28]	; (801b070 <pxCurrentTCBConst2>)
 801b052:	6819      	ldr	r1, [r3, #0]
 801b054:	6808      	ldr	r0, [r1, #0]
 801b056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b05a:	f380 8809 	msr	PSP, r0
 801b05e:	f3bf 8f6f 	isb	sy
 801b062:	f04f 0000 	mov.w	r0, #0
 801b066:	f380 8811 	msr	BASEPRI, r0
 801b06a:	4770      	bx	lr
 801b06c:	f3af 8000 	nop.w

0801b070 <pxCurrentTCBConst2>:
 801b070:	20000694 	.word	0x20000694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b074:	bf00      	nop
 801b076:	bf00      	nop

0801b078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b078:	4808      	ldr	r0, [pc, #32]	; (801b09c <prvPortStartFirstTask+0x24>)
 801b07a:	6800      	ldr	r0, [r0, #0]
 801b07c:	6800      	ldr	r0, [r0, #0]
 801b07e:	f380 8808 	msr	MSP, r0
 801b082:	f04f 0000 	mov.w	r0, #0
 801b086:	f380 8814 	msr	CONTROL, r0
 801b08a:	b662      	cpsie	i
 801b08c:	b661      	cpsie	f
 801b08e:	f3bf 8f4f 	dsb	sy
 801b092:	f3bf 8f6f 	isb	sy
 801b096:	df00      	svc	0
 801b098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b09a:	bf00      	nop
 801b09c:	e000ed08 	.word	0xe000ed08

0801b0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b086      	sub	sp, #24
 801b0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b0a6:	4b46      	ldr	r3, [pc, #280]	; (801b1c0 <xPortStartScheduler+0x120>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	4a46      	ldr	r2, [pc, #280]	; (801b1c4 <xPortStartScheduler+0x124>)
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d10a      	bne.n	801b0c6 <xPortStartScheduler+0x26>
	__asm volatile
 801b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0b4:	f383 8811 	msr	BASEPRI, r3
 801b0b8:	f3bf 8f6f 	isb	sy
 801b0bc:	f3bf 8f4f 	dsb	sy
 801b0c0:	613b      	str	r3, [r7, #16]
}
 801b0c2:	bf00      	nop
 801b0c4:	e7fe      	b.n	801b0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b0c6:	4b3e      	ldr	r3, [pc, #248]	; (801b1c0 <xPortStartScheduler+0x120>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	4a3f      	ldr	r2, [pc, #252]	; (801b1c8 <xPortStartScheduler+0x128>)
 801b0cc:	4293      	cmp	r3, r2
 801b0ce:	d10a      	bne.n	801b0e6 <xPortStartScheduler+0x46>
	__asm volatile
 801b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0d4:	f383 8811 	msr	BASEPRI, r3
 801b0d8:	f3bf 8f6f 	isb	sy
 801b0dc:	f3bf 8f4f 	dsb	sy
 801b0e0:	60fb      	str	r3, [r7, #12]
}
 801b0e2:	bf00      	nop
 801b0e4:	e7fe      	b.n	801b0e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b0e6:	4b39      	ldr	r3, [pc, #228]	; (801b1cc <xPortStartScheduler+0x12c>)
 801b0e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	b2db      	uxtb	r3, r3
 801b0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	22ff      	movs	r2, #255	; 0xff
 801b0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b0f8:	697b      	ldr	r3, [r7, #20]
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b100:	78fb      	ldrb	r3, [r7, #3]
 801b102:	b2db      	uxtb	r3, r3
 801b104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b108:	b2da      	uxtb	r2, r3
 801b10a:	4b31      	ldr	r3, [pc, #196]	; (801b1d0 <xPortStartScheduler+0x130>)
 801b10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b10e:	4b31      	ldr	r3, [pc, #196]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b110:	2207      	movs	r2, #7
 801b112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b114:	e009      	b.n	801b12a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b116:	4b2f      	ldr	r3, [pc, #188]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	3b01      	subs	r3, #1
 801b11c:	4a2d      	ldr	r2, [pc, #180]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b120:	78fb      	ldrb	r3, [r7, #3]
 801b122:	b2db      	uxtb	r3, r3
 801b124:	005b      	lsls	r3, r3, #1
 801b126:	b2db      	uxtb	r3, r3
 801b128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b12a:	78fb      	ldrb	r3, [r7, #3]
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b132:	2b80      	cmp	r3, #128	; 0x80
 801b134:	d0ef      	beq.n	801b116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b136:	4b27      	ldr	r3, [pc, #156]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	f1c3 0307 	rsb	r3, r3, #7
 801b13e:	2b04      	cmp	r3, #4
 801b140:	d00a      	beq.n	801b158 <xPortStartScheduler+0xb8>
	__asm volatile
 801b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b146:	f383 8811 	msr	BASEPRI, r3
 801b14a:	f3bf 8f6f 	isb	sy
 801b14e:	f3bf 8f4f 	dsb	sy
 801b152:	60bb      	str	r3, [r7, #8]
}
 801b154:	bf00      	nop
 801b156:	e7fe      	b.n	801b156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b158:	4b1e      	ldr	r3, [pc, #120]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	021b      	lsls	r3, r3, #8
 801b15e:	4a1d      	ldr	r2, [pc, #116]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b162:	4b1c      	ldr	r3, [pc, #112]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b16a:	4a1a      	ldr	r2, [pc, #104]	; (801b1d4 <xPortStartScheduler+0x134>)
 801b16c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	b2da      	uxtb	r2, r3
 801b172:	697b      	ldr	r3, [r7, #20]
 801b174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b176:	4b18      	ldr	r3, [pc, #96]	; (801b1d8 <xPortStartScheduler+0x138>)
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	4a17      	ldr	r2, [pc, #92]	; (801b1d8 <xPortStartScheduler+0x138>)
 801b17c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b182:	4b15      	ldr	r3, [pc, #84]	; (801b1d8 <xPortStartScheduler+0x138>)
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	4a14      	ldr	r2, [pc, #80]	; (801b1d8 <xPortStartScheduler+0x138>)
 801b188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b18c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b18e:	f000 f8dd 	bl	801b34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b192:	4b12      	ldr	r3, [pc, #72]	; (801b1dc <xPortStartScheduler+0x13c>)
 801b194:	2200      	movs	r2, #0
 801b196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b198:	f000 f8fc 	bl	801b394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b19c:	4b10      	ldr	r3, [pc, #64]	; (801b1e0 <xPortStartScheduler+0x140>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	4a0f      	ldr	r2, [pc, #60]	; (801b1e0 <xPortStartScheduler+0x140>)
 801b1a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b1a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b1a8:	f7ff ff66 	bl	801b078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b1ac:	f7ff f88c 	bl	801a2c8 <vTaskSwitchContext>
	prvTaskExitError();
 801b1b0:	f7ff ff1c 	bl	801afec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b1b4:	2300      	movs	r3, #0
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3718      	adds	r7, #24
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	e000ed00 	.word	0xe000ed00
 801b1c4:	410fc271 	.word	0x410fc271
 801b1c8:	410fc270 	.word	0x410fc270
 801b1cc:	e000e400 	.word	0xe000e400
 801b1d0:	200007c0 	.word	0x200007c0
 801b1d4:	200007c4 	.word	0x200007c4
 801b1d8:	e000ed20 	.word	0xe000ed20
 801b1dc:	200001ac 	.word	0x200001ac
 801b1e0:	e000ef34 	.word	0xe000ef34

0801b1e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b1e4:	b480      	push	{r7}
 801b1e6:	b083      	sub	sp, #12
 801b1e8:	af00      	add	r7, sp, #0
	__asm volatile
 801b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1ee:	f383 8811 	msr	BASEPRI, r3
 801b1f2:	f3bf 8f6f 	isb	sy
 801b1f6:	f3bf 8f4f 	dsb	sy
 801b1fa:	607b      	str	r3, [r7, #4]
}
 801b1fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b1fe:	4b0f      	ldr	r3, [pc, #60]	; (801b23c <vPortEnterCritical+0x58>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	3301      	adds	r3, #1
 801b204:	4a0d      	ldr	r2, [pc, #52]	; (801b23c <vPortEnterCritical+0x58>)
 801b206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b208:	4b0c      	ldr	r3, [pc, #48]	; (801b23c <vPortEnterCritical+0x58>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	2b01      	cmp	r3, #1
 801b20e:	d10f      	bne.n	801b230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b210:	4b0b      	ldr	r3, [pc, #44]	; (801b240 <vPortEnterCritical+0x5c>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	b2db      	uxtb	r3, r3
 801b216:	2b00      	cmp	r3, #0
 801b218:	d00a      	beq.n	801b230 <vPortEnterCritical+0x4c>
	__asm volatile
 801b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b21e:	f383 8811 	msr	BASEPRI, r3
 801b222:	f3bf 8f6f 	isb	sy
 801b226:	f3bf 8f4f 	dsb	sy
 801b22a:	603b      	str	r3, [r7, #0]
}
 801b22c:	bf00      	nop
 801b22e:	e7fe      	b.n	801b22e <vPortEnterCritical+0x4a>
	}
}
 801b230:	bf00      	nop
 801b232:	370c      	adds	r7, #12
 801b234:	46bd      	mov	sp, r7
 801b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23a:	4770      	bx	lr
 801b23c:	200001ac 	.word	0x200001ac
 801b240:	e000ed04 	.word	0xe000ed04

0801b244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b244:	b480      	push	{r7}
 801b246:	b083      	sub	sp, #12
 801b248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b24a:	4b12      	ldr	r3, [pc, #72]	; (801b294 <vPortExitCritical+0x50>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d10a      	bne.n	801b268 <vPortExitCritical+0x24>
	__asm volatile
 801b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b256:	f383 8811 	msr	BASEPRI, r3
 801b25a:	f3bf 8f6f 	isb	sy
 801b25e:	f3bf 8f4f 	dsb	sy
 801b262:	607b      	str	r3, [r7, #4]
}
 801b264:	bf00      	nop
 801b266:	e7fe      	b.n	801b266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b268:	4b0a      	ldr	r3, [pc, #40]	; (801b294 <vPortExitCritical+0x50>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	3b01      	subs	r3, #1
 801b26e:	4a09      	ldr	r2, [pc, #36]	; (801b294 <vPortExitCritical+0x50>)
 801b270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b272:	4b08      	ldr	r3, [pc, #32]	; (801b294 <vPortExitCritical+0x50>)
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d105      	bne.n	801b286 <vPortExitCritical+0x42>
 801b27a:	2300      	movs	r3, #0
 801b27c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b27e:	683b      	ldr	r3, [r7, #0]
 801b280:	f383 8811 	msr	BASEPRI, r3
}
 801b284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b286:	bf00      	nop
 801b288:	370c      	adds	r7, #12
 801b28a:	46bd      	mov	sp, r7
 801b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b290:	4770      	bx	lr
 801b292:	bf00      	nop
 801b294:	200001ac 	.word	0x200001ac
	...

0801b2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b2a0:	f3ef 8009 	mrs	r0, PSP
 801b2a4:	f3bf 8f6f 	isb	sy
 801b2a8:	4b15      	ldr	r3, [pc, #84]	; (801b300 <pxCurrentTCBConst>)
 801b2aa:	681a      	ldr	r2, [r3, #0]
 801b2ac:	f01e 0f10 	tst.w	lr, #16
 801b2b0:	bf08      	it	eq
 801b2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ba:	6010      	str	r0, [r2, #0]
 801b2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b2c4:	f380 8811 	msr	BASEPRI, r0
 801b2c8:	f3bf 8f4f 	dsb	sy
 801b2cc:	f3bf 8f6f 	isb	sy
 801b2d0:	f7fe fffa 	bl	801a2c8 <vTaskSwitchContext>
 801b2d4:	f04f 0000 	mov.w	r0, #0
 801b2d8:	f380 8811 	msr	BASEPRI, r0
 801b2dc:	bc09      	pop	{r0, r3}
 801b2de:	6819      	ldr	r1, [r3, #0]
 801b2e0:	6808      	ldr	r0, [r1, #0]
 801b2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e6:	f01e 0f10 	tst.w	lr, #16
 801b2ea:	bf08      	it	eq
 801b2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b2f0:	f380 8809 	msr	PSP, r0
 801b2f4:	f3bf 8f6f 	isb	sy
 801b2f8:	4770      	bx	lr
 801b2fa:	bf00      	nop
 801b2fc:	f3af 8000 	nop.w

0801b300 <pxCurrentTCBConst>:
 801b300:	20000694 	.word	0x20000694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b304:	bf00      	nop
 801b306:	bf00      	nop

0801b308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b082      	sub	sp, #8
 801b30c:	af00      	add	r7, sp, #0
	__asm volatile
 801b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b312:	f383 8811 	msr	BASEPRI, r3
 801b316:	f3bf 8f6f 	isb	sy
 801b31a:	f3bf 8f4f 	dsb	sy
 801b31e:	607b      	str	r3, [r7, #4]
}
 801b320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b322:	f7fe ff19 	bl	801a158 <xTaskIncrementTick>
 801b326:	4603      	mov	r3, r0
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d003      	beq.n	801b334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b32c:	4b06      	ldr	r3, [pc, #24]	; (801b348 <SysTick_Handler+0x40>)
 801b32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b332:	601a      	str	r2, [r3, #0]
 801b334:	2300      	movs	r3, #0
 801b336:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	f383 8811 	msr	BASEPRI, r3
}
 801b33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b340:	bf00      	nop
 801b342:	3708      	adds	r7, #8
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}
 801b348:	e000ed04 	.word	0xe000ed04

0801b34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b34c:	b480      	push	{r7}
 801b34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b350:	4b0b      	ldr	r3, [pc, #44]	; (801b380 <vPortSetupTimerInterrupt+0x34>)
 801b352:	2200      	movs	r2, #0
 801b354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b356:	4b0b      	ldr	r3, [pc, #44]	; (801b384 <vPortSetupTimerInterrupt+0x38>)
 801b358:	2200      	movs	r2, #0
 801b35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b35c:	4b0a      	ldr	r3, [pc, #40]	; (801b388 <vPortSetupTimerInterrupt+0x3c>)
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	4a0a      	ldr	r2, [pc, #40]	; (801b38c <vPortSetupTimerInterrupt+0x40>)
 801b362:	fba2 2303 	umull	r2, r3, r2, r3
 801b366:	099b      	lsrs	r3, r3, #6
 801b368:	4a09      	ldr	r2, [pc, #36]	; (801b390 <vPortSetupTimerInterrupt+0x44>)
 801b36a:	3b01      	subs	r3, #1
 801b36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b36e:	4b04      	ldr	r3, [pc, #16]	; (801b380 <vPortSetupTimerInterrupt+0x34>)
 801b370:	2207      	movs	r2, #7
 801b372:	601a      	str	r2, [r3, #0]
}
 801b374:	bf00      	nop
 801b376:	46bd      	mov	sp, r7
 801b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37c:	4770      	bx	lr
 801b37e:	bf00      	nop
 801b380:	e000e010 	.word	0xe000e010
 801b384:	e000e018 	.word	0xe000e018
 801b388:	2000018c 	.word	0x2000018c
 801b38c:	10624dd3 	.word	0x10624dd3
 801b390:	e000e014 	.word	0xe000e014

0801b394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b3a4 <vPortEnableVFP+0x10>
 801b398:	6801      	ldr	r1, [r0, #0]
 801b39a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b39e:	6001      	str	r1, [r0, #0]
 801b3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b3a2:	bf00      	nop
 801b3a4:	e000ed88 	.word	0xe000ed88

0801b3a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b3a8:	b480      	push	{r7}
 801b3aa:	b085      	sub	sp, #20
 801b3ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b3ae:	f3ef 8305 	mrs	r3, IPSR
 801b3b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	2b0f      	cmp	r3, #15
 801b3b8:	d914      	bls.n	801b3e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b3ba:	4a17      	ldr	r2, [pc, #92]	; (801b418 <vPortValidateInterruptPriority+0x70>)
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	4413      	add	r3, r2
 801b3c0:	781b      	ldrb	r3, [r3, #0]
 801b3c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b3c4:	4b15      	ldr	r3, [pc, #84]	; (801b41c <vPortValidateInterruptPriority+0x74>)
 801b3c6:	781b      	ldrb	r3, [r3, #0]
 801b3c8:	7afa      	ldrb	r2, [r7, #11]
 801b3ca:	429a      	cmp	r2, r3
 801b3cc:	d20a      	bcs.n	801b3e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3d2:	f383 8811 	msr	BASEPRI, r3
 801b3d6:	f3bf 8f6f 	isb	sy
 801b3da:	f3bf 8f4f 	dsb	sy
 801b3de:	607b      	str	r3, [r7, #4]
}
 801b3e0:	bf00      	nop
 801b3e2:	e7fe      	b.n	801b3e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b3e4:	4b0e      	ldr	r3, [pc, #56]	; (801b420 <vPortValidateInterruptPriority+0x78>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b3ec:	4b0d      	ldr	r3, [pc, #52]	; (801b424 <vPortValidateInterruptPriority+0x7c>)
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	429a      	cmp	r2, r3
 801b3f2:	d90a      	bls.n	801b40a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3f8:	f383 8811 	msr	BASEPRI, r3
 801b3fc:	f3bf 8f6f 	isb	sy
 801b400:	f3bf 8f4f 	dsb	sy
 801b404:	603b      	str	r3, [r7, #0]
}
 801b406:	bf00      	nop
 801b408:	e7fe      	b.n	801b408 <vPortValidateInterruptPriority+0x60>
	}
 801b40a:	bf00      	nop
 801b40c:	3714      	adds	r7, #20
 801b40e:	46bd      	mov	sp, r7
 801b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b414:	4770      	bx	lr
 801b416:	bf00      	nop
 801b418:	e000e3f0 	.word	0xe000e3f0
 801b41c:	200007c0 	.word	0x200007c0
 801b420:	e000ed0c 	.word	0xe000ed0c
 801b424:	200007c4 	.word	0x200007c4

0801b428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b08a      	sub	sp, #40	; 0x28
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b430:	2300      	movs	r3, #0
 801b432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b434:	f7fe fde6 	bl	801a004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b438:	4b58      	ldr	r3, [pc, #352]	; (801b59c <pvPortMalloc+0x174>)
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d101      	bne.n	801b444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b440:	f000 f910 	bl	801b664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b444:	4b56      	ldr	r3, [pc, #344]	; (801b5a0 <pvPortMalloc+0x178>)
 801b446:	681a      	ldr	r2, [r3, #0]
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	4013      	ands	r3, r2
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	f040 808e 	bne.w	801b56e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d01d      	beq.n	801b494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b458:	2208      	movs	r2, #8
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4413      	add	r3, r2
 801b45e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	f003 0307 	and.w	r3, r3, #7
 801b466:	2b00      	cmp	r3, #0
 801b468:	d014      	beq.n	801b494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	f023 0307 	bic.w	r3, r3, #7
 801b470:	3308      	adds	r3, #8
 801b472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	f003 0307 	and.w	r3, r3, #7
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d00a      	beq.n	801b494 <pvPortMalloc+0x6c>
	__asm volatile
 801b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b482:	f383 8811 	msr	BASEPRI, r3
 801b486:	f3bf 8f6f 	isb	sy
 801b48a:	f3bf 8f4f 	dsb	sy
 801b48e:	617b      	str	r3, [r7, #20]
}
 801b490:	bf00      	nop
 801b492:	e7fe      	b.n	801b492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d069      	beq.n	801b56e <pvPortMalloc+0x146>
 801b49a:	4b42      	ldr	r3, [pc, #264]	; (801b5a4 <pvPortMalloc+0x17c>)
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	687a      	ldr	r2, [r7, #4]
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	d864      	bhi.n	801b56e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b4a4:	4b40      	ldr	r3, [pc, #256]	; (801b5a8 <pvPortMalloc+0x180>)
 801b4a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b4a8:	4b3f      	ldr	r3, [pc, #252]	; (801b5a8 <pvPortMalloc+0x180>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4ae:	e004      	b.n	801b4ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4bc:	685b      	ldr	r3, [r3, #4]
 801b4be:	687a      	ldr	r2, [r7, #4]
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d903      	bls.n	801b4cc <pvPortMalloc+0xa4>
 801b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d1f1      	bne.n	801b4b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b4cc:	4b33      	ldr	r3, [pc, #204]	; (801b59c <pvPortMalloc+0x174>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	d04b      	beq.n	801b56e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b4d6:	6a3b      	ldr	r3, [r7, #32]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	2208      	movs	r2, #8
 801b4dc:	4413      	add	r3, r2
 801b4de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	6a3b      	ldr	r3, [r7, #32]
 801b4e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ea:	685a      	ldr	r2, [r3, #4]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	1ad2      	subs	r2, r2, r3
 801b4f0:	2308      	movs	r3, #8
 801b4f2:	005b      	lsls	r3, r3, #1
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d91f      	bls.n	801b538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	4413      	add	r3, r2
 801b4fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b500:	69bb      	ldr	r3, [r7, #24]
 801b502:	f003 0307 	and.w	r3, r3, #7
 801b506:	2b00      	cmp	r3, #0
 801b508:	d00a      	beq.n	801b520 <pvPortMalloc+0xf8>
	__asm volatile
 801b50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b50e:	f383 8811 	msr	BASEPRI, r3
 801b512:	f3bf 8f6f 	isb	sy
 801b516:	f3bf 8f4f 	dsb	sy
 801b51a:	613b      	str	r3, [r7, #16]
}
 801b51c:	bf00      	nop
 801b51e:	e7fe      	b.n	801b51e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b522:	685a      	ldr	r2, [r3, #4]
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	1ad2      	subs	r2, r2, r3
 801b528:	69bb      	ldr	r3, [r7, #24]
 801b52a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b52e:	687a      	ldr	r2, [r7, #4]
 801b530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b532:	69b8      	ldr	r0, [r7, #24]
 801b534:	f000 f8f8 	bl	801b728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b538:	4b1a      	ldr	r3, [pc, #104]	; (801b5a4 <pvPortMalloc+0x17c>)
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b53e:	685b      	ldr	r3, [r3, #4]
 801b540:	1ad3      	subs	r3, r2, r3
 801b542:	4a18      	ldr	r2, [pc, #96]	; (801b5a4 <pvPortMalloc+0x17c>)
 801b544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b546:	4b17      	ldr	r3, [pc, #92]	; (801b5a4 <pvPortMalloc+0x17c>)
 801b548:	681a      	ldr	r2, [r3, #0]
 801b54a:	4b18      	ldr	r3, [pc, #96]	; (801b5ac <pvPortMalloc+0x184>)
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	429a      	cmp	r2, r3
 801b550:	d203      	bcs.n	801b55a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b552:	4b14      	ldr	r3, [pc, #80]	; (801b5a4 <pvPortMalloc+0x17c>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4a15      	ldr	r2, [pc, #84]	; (801b5ac <pvPortMalloc+0x184>)
 801b558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b55c:	685a      	ldr	r2, [r3, #4]
 801b55e:	4b10      	ldr	r3, [pc, #64]	; (801b5a0 <pvPortMalloc+0x178>)
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	431a      	orrs	r2, r3
 801b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b56a:	2200      	movs	r2, #0
 801b56c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b56e:	f7fe fd57 	bl	801a020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b572:	69fb      	ldr	r3, [r7, #28]
 801b574:	f003 0307 	and.w	r3, r3, #7
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d00a      	beq.n	801b592 <pvPortMalloc+0x16a>
	__asm volatile
 801b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b580:	f383 8811 	msr	BASEPRI, r3
 801b584:	f3bf 8f6f 	isb	sy
 801b588:	f3bf 8f4f 	dsb	sy
 801b58c:	60fb      	str	r3, [r7, #12]
}
 801b58e:	bf00      	nop
 801b590:	e7fe      	b.n	801b590 <pvPortMalloc+0x168>
	return pvReturn;
 801b592:	69fb      	ldr	r3, [r7, #28]
}
 801b594:	4618      	mov	r0, r3
 801b596:	3728      	adds	r7, #40	; 0x28
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}
 801b59c:	20001fd0 	.word	0x20001fd0
 801b5a0:	20001fdc 	.word	0x20001fdc
 801b5a4:	20001fd4 	.word	0x20001fd4
 801b5a8:	20001fc8 	.word	0x20001fc8
 801b5ac:	20001fd8 	.word	0x20001fd8

0801b5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b086      	sub	sp, #24
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d048      	beq.n	801b654 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b5c2:	2308      	movs	r3, #8
 801b5c4:	425b      	negs	r3, r3
 801b5c6:	697a      	ldr	r2, [r7, #20]
 801b5c8:	4413      	add	r3, r2
 801b5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b5d0:	693b      	ldr	r3, [r7, #16]
 801b5d2:	685a      	ldr	r2, [r3, #4]
 801b5d4:	4b21      	ldr	r3, [pc, #132]	; (801b65c <vPortFree+0xac>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4013      	ands	r3, r2
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d10a      	bne.n	801b5f4 <vPortFree+0x44>
	__asm volatile
 801b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5e2:	f383 8811 	msr	BASEPRI, r3
 801b5e6:	f3bf 8f6f 	isb	sy
 801b5ea:	f3bf 8f4f 	dsb	sy
 801b5ee:	60fb      	str	r3, [r7, #12]
}
 801b5f0:	bf00      	nop
 801b5f2:	e7fe      	b.n	801b5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d00a      	beq.n	801b612 <vPortFree+0x62>
	__asm volatile
 801b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b600:	f383 8811 	msr	BASEPRI, r3
 801b604:	f3bf 8f6f 	isb	sy
 801b608:	f3bf 8f4f 	dsb	sy
 801b60c:	60bb      	str	r3, [r7, #8]
}
 801b60e:	bf00      	nop
 801b610:	e7fe      	b.n	801b610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	685a      	ldr	r2, [r3, #4]
 801b616:	4b11      	ldr	r3, [pc, #68]	; (801b65c <vPortFree+0xac>)
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	4013      	ands	r3, r2
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d019      	beq.n	801b654 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d115      	bne.n	801b654 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	4b0b      	ldr	r3, [pc, #44]	; (801b65c <vPortFree+0xac>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	43db      	mvns	r3, r3
 801b632:	401a      	ands	r2, r3
 801b634:	693b      	ldr	r3, [r7, #16]
 801b636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b638:	f7fe fce4 	bl	801a004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	685a      	ldr	r2, [r3, #4]
 801b640:	4b07      	ldr	r3, [pc, #28]	; (801b660 <vPortFree+0xb0>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	4413      	add	r3, r2
 801b646:	4a06      	ldr	r2, [pc, #24]	; (801b660 <vPortFree+0xb0>)
 801b648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b64a:	6938      	ldr	r0, [r7, #16]
 801b64c:	f000 f86c 	bl	801b728 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801b650:	f7fe fce6 	bl	801a020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b654:	bf00      	nop
 801b656:	3718      	adds	r7, #24
 801b658:	46bd      	mov	sp, r7
 801b65a:	bd80      	pop	{r7, pc}
 801b65c:	20001fdc 	.word	0x20001fdc
 801b660:	20001fd4 	.word	0x20001fd4

0801b664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b664:	b480      	push	{r7}
 801b666:	b085      	sub	sp, #20
 801b668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b66a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801b66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b670:	4b27      	ldr	r3, [pc, #156]	; (801b710 <prvHeapInit+0xac>)
 801b672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	f003 0307 	and.w	r3, r3, #7
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d00c      	beq.n	801b698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	3307      	adds	r3, #7
 801b682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	f023 0307 	bic.w	r3, r3, #7
 801b68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b68c:	68ba      	ldr	r2, [r7, #8]
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	1ad3      	subs	r3, r2, r3
 801b692:	4a1f      	ldr	r2, [pc, #124]	; (801b710 <prvHeapInit+0xac>)
 801b694:	4413      	add	r3, r2
 801b696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b69c:	4a1d      	ldr	r2, [pc, #116]	; (801b714 <prvHeapInit+0xb0>)
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b6a2:	4b1c      	ldr	r3, [pc, #112]	; (801b714 <prvHeapInit+0xb0>)
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	68ba      	ldr	r2, [r7, #8]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b6b0:	2208      	movs	r2, #8
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	1a9b      	subs	r3, r3, r2
 801b6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	f023 0307 	bic.w	r3, r3, #7
 801b6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	4a15      	ldr	r2, [pc, #84]	; (801b718 <prvHeapInit+0xb4>)
 801b6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b6c6:	4b14      	ldr	r3, [pc, #80]	; (801b718 <prvHeapInit+0xb4>)
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	2200      	movs	r2, #0
 801b6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b6ce:	4b12      	ldr	r3, [pc, #72]	; (801b718 <prvHeapInit+0xb4>)
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b6da:	683b      	ldr	r3, [r7, #0]
 801b6dc:	68fa      	ldr	r2, [r7, #12]
 801b6de:	1ad2      	subs	r2, r2, r3
 801b6e0:	683b      	ldr	r3, [r7, #0]
 801b6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b6e4:	4b0c      	ldr	r3, [pc, #48]	; (801b718 <prvHeapInit+0xb4>)
 801b6e6:	681a      	ldr	r2, [r3, #0]
 801b6e8:	683b      	ldr	r3, [r7, #0]
 801b6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b6ec:	683b      	ldr	r3, [r7, #0]
 801b6ee:	685b      	ldr	r3, [r3, #4]
 801b6f0:	4a0a      	ldr	r2, [pc, #40]	; (801b71c <prvHeapInit+0xb8>)
 801b6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	685b      	ldr	r3, [r3, #4]
 801b6f8:	4a09      	ldr	r2, [pc, #36]	; (801b720 <prvHeapInit+0xbc>)
 801b6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b6fc:	4b09      	ldr	r3, [pc, #36]	; (801b724 <prvHeapInit+0xc0>)
 801b6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b702:	601a      	str	r2, [r3, #0]
}
 801b704:	bf00      	nop
 801b706:	3714      	adds	r7, #20
 801b708:	46bd      	mov	sp, r7
 801b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b70e:	4770      	bx	lr
 801b710:	200007c8 	.word	0x200007c8
 801b714:	20001fc8 	.word	0x20001fc8
 801b718:	20001fd0 	.word	0x20001fd0
 801b71c:	20001fd8 	.word	0x20001fd8
 801b720:	20001fd4 	.word	0x20001fd4
 801b724:	20001fdc 	.word	0x20001fdc

0801b728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b728:	b480      	push	{r7}
 801b72a:	b085      	sub	sp, #20
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b730:	4b28      	ldr	r3, [pc, #160]	; (801b7d4 <prvInsertBlockIntoFreeList+0xac>)
 801b732:	60fb      	str	r3, [r7, #12]
 801b734:	e002      	b.n	801b73c <prvInsertBlockIntoFreeList+0x14>
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	60fb      	str	r3, [r7, #12]
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	687a      	ldr	r2, [r7, #4]
 801b742:	429a      	cmp	r2, r3
 801b744:	d8f7      	bhi.n	801b736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	685b      	ldr	r3, [r3, #4]
 801b74e:	68ba      	ldr	r2, [r7, #8]
 801b750:	4413      	add	r3, r2
 801b752:	687a      	ldr	r2, [r7, #4]
 801b754:	429a      	cmp	r2, r3
 801b756:	d108      	bne.n	801b76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	685a      	ldr	r2, [r3, #4]
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	685b      	ldr	r3, [r3, #4]
 801b760:	441a      	add	r2, r3
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	685b      	ldr	r3, [r3, #4]
 801b772:	68ba      	ldr	r2, [r7, #8]
 801b774:	441a      	add	r2, r3
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	429a      	cmp	r2, r3
 801b77c:	d118      	bne.n	801b7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	681a      	ldr	r2, [r3, #0]
 801b782:	4b15      	ldr	r3, [pc, #84]	; (801b7d8 <prvInsertBlockIntoFreeList+0xb0>)
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	429a      	cmp	r2, r3
 801b788:	d00d      	beq.n	801b7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	685a      	ldr	r2, [r3, #4]
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	685b      	ldr	r3, [r3, #4]
 801b794:	441a      	add	r2, r3
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	681a      	ldr	r2, [r3, #0]
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	601a      	str	r2, [r3, #0]
 801b7a4:	e008      	b.n	801b7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b7a6:	4b0c      	ldr	r3, [pc, #48]	; (801b7d8 <prvInsertBlockIntoFreeList+0xb0>)
 801b7a8:	681a      	ldr	r2, [r3, #0]
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	601a      	str	r2, [r3, #0]
 801b7ae:	e003      	b.n	801b7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	681a      	ldr	r2, [r3, #0]
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b7b8:	68fa      	ldr	r2, [r7, #12]
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d002      	beq.n	801b7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	687a      	ldr	r2, [r7, #4]
 801b7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b7c6:	bf00      	nop
 801b7c8:	3714      	adds	r7, #20
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop
 801b7d4:	20001fc8 	.word	0x20001fc8
 801b7d8:	20001fd0 	.word	0x20001fd0

0801b7dc <atoi>:
 801b7dc:	220a      	movs	r2, #10
 801b7de:	2100      	movs	r1, #0
 801b7e0:	f000 bf2c 	b.w	801c63c <strtol>

0801b7e4 <atol>:
 801b7e4:	220a      	movs	r2, #10
 801b7e6:	2100      	movs	r1, #0
 801b7e8:	f000 bf28 	b.w	801c63c <strtol>

0801b7ec <__errno>:
 801b7ec:	4b01      	ldr	r3, [pc, #4]	; (801b7f4 <__errno+0x8>)
 801b7ee:	6818      	ldr	r0, [r3, #0]
 801b7f0:	4770      	bx	lr
 801b7f2:	bf00      	nop
 801b7f4:	200001b0 	.word	0x200001b0

0801b7f8 <__libc_init_array>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	4d0d      	ldr	r5, [pc, #52]	; (801b830 <__libc_init_array+0x38>)
 801b7fc:	4c0d      	ldr	r4, [pc, #52]	; (801b834 <__libc_init_array+0x3c>)
 801b7fe:	1b64      	subs	r4, r4, r5
 801b800:	10a4      	asrs	r4, r4, #2
 801b802:	2600      	movs	r6, #0
 801b804:	42a6      	cmp	r6, r4
 801b806:	d109      	bne.n	801b81c <__libc_init_array+0x24>
 801b808:	4d0b      	ldr	r5, [pc, #44]	; (801b838 <__libc_init_array+0x40>)
 801b80a:	4c0c      	ldr	r4, [pc, #48]	; (801b83c <__libc_init_array+0x44>)
 801b80c:	f003 f890 	bl	801e930 <_init>
 801b810:	1b64      	subs	r4, r4, r5
 801b812:	10a4      	asrs	r4, r4, #2
 801b814:	2600      	movs	r6, #0
 801b816:	42a6      	cmp	r6, r4
 801b818:	d105      	bne.n	801b826 <__libc_init_array+0x2e>
 801b81a:	bd70      	pop	{r4, r5, r6, pc}
 801b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b820:	4798      	blx	r3
 801b822:	3601      	adds	r6, #1
 801b824:	e7ee      	b.n	801b804 <__libc_init_array+0xc>
 801b826:	f855 3b04 	ldr.w	r3, [r5], #4
 801b82a:	4798      	blx	r3
 801b82c:	3601      	adds	r6, #1
 801b82e:	e7f2      	b.n	801b816 <__libc_init_array+0x1e>
 801b830:	080207b8 	.word	0x080207b8
 801b834:	080207b8 	.word	0x080207b8
 801b838:	080207b8 	.word	0x080207b8
 801b83c:	080207bc 	.word	0x080207bc

0801b840 <malloc>:
 801b840:	4b02      	ldr	r3, [pc, #8]	; (801b84c <malloc+0xc>)
 801b842:	4601      	mov	r1, r0
 801b844:	6818      	ldr	r0, [r3, #0]
 801b846:	f000 b869 	b.w	801b91c <_malloc_r>
 801b84a:	bf00      	nop
 801b84c:	200001b0 	.word	0x200001b0

0801b850 <memcpy>:
 801b850:	440a      	add	r2, r1
 801b852:	4291      	cmp	r1, r2
 801b854:	f100 33ff 	add.w	r3, r0, #4294967295
 801b858:	d100      	bne.n	801b85c <memcpy+0xc>
 801b85a:	4770      	bx	lr
 801b85c:	b510      	push	{r4, lr}
 801b85e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b862:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b866:	4291      	cmp	r1, r2
 801b868:	d1f9      	bne.n	801b85e <memcpy+0xe>
 801b86a:	bd10      	pop	{r4, pc}

0801b86c <memset>:
 801b86c:	4402      	add	r2, r0
 801b86e:	4603      	mov	r3, r0
 801b870:	4293      	cmp	r3, r2
 801b872:	d100      	bne.n	801b876 <memset+0xa>
 801b874:	4770      	bx	lr
 801b876:	f803 1b01 	strb.w	r1, [r3], #1
 801b87a:	e7f9      	b.n	801b870 <memset+0x4>

0801b87c <_free_r>:
 801b87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b87e:	2900      	cmp	r1, #0
 801b880:	d048      	beq.n	801b914 <_free_r+0x98>
 801b882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b886:	9001      	str	r0, [sp, #4]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	f1a1 0404 	sub.w	r4, r1, #4
 801b88e:	bfb8      	it	lt
 801b890:	18e4      	addlt	r4, r4, r3
 801b892:	f002 f86b 	bl	801d96c <__malloc_lock>
 801b896:	4a20      	ldr	r2, [pc, #128]	; (801b918 <_free_r+0x9c>)
 801b898:	9801      	ldr	r0, [sp, #4]
 801b89a:	6813      	ldr	r3, [r2, #0]
 801b89c:	4615      	mov	r5, r2
 801b89e:	b933      	cbnz	r3, 801b8ae <_free_r+0x32>
 801b8a0:	6063      	str	r3, [r4, #4]
 801b8a2:	6014      	str	r4, [r2, #0]
 801b8a4:	b003      	add	sp, #12
 801b8a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b8aa:	f002 b865 	b.w	801d978 <__malloc_unlock>
 801b8ae:	42a3      	cmp	r3, r4
 801b8b0:	d90b      	bls.n	801b8ca <_free_r+0x4e>
 801b8b2:	6821      	ldr	r1, [r4, #0]
 801b8b4:	1862      	adds	r2, r4, r1
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	bf04      	itt	eq
 801b8ba:	681a      	ldreq	r2, [r3, #0]
 801b8bc:	685b      	ldreq	r3, [r3, #4]
 801b8be:	6063      	str	r3, [r4, #4]
 801b8c0:	bf04      	itt	eq
 801b8c2:	1852      	addeq	r2, r2, r1
 801b8c4:	6022      	streq	r2, [r4, #0]
 801b8c6:	602c      	str	r4, [r5, #0]
 801b8c8:	e7ec      	b.n	801b8a4 <_free_r+0x28>
 801b8ca:	461a      	mov	r2, r3
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	b10b      	cbz	r3, 801b8d4 <_free_r+0x58>
 801b8d0:	42a3      	cmp	r3, r4
 801b8d2:	d9fa      	bls.n	801b8ca <_free_r+0x4e>
 801b8d4:	6811      	ldr	r1, [r2, #0]
 801b8d6:	1855      	adds	r5, r2, r1
 801b8d8:	42a5      	cmp	r5, r4
 801b8da:	d10b      	bne.n	801b8f4 <_free_r+0x78>
 801b8dc:	6824      	ldr	r4, [r4, #0]
 801b8de:	4421      	add	r1, r4
 801b8e0:	1854      	adds	r4, r2, r1
 801b8e2:	42a3      	cmp	r3, r4
 801b8e4:	6011      	str	r1, [r2, #0]
 801b8e6:	d1dd      	bne.n	801b8a4 <_free_r+0x28>
 801b8e8:	681c      	ldr	r4, [r3, #0]
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	6053      	str	r3, [r2, #4]
 801b8ee:	4421      	add	r1, r4
 801b8f0:	6011      	str	r1, [r2, #0]
 801b8f2:	e7d7      	b.n	801b8a4 <_free_r+0x28>
 801b8f4:	d902      	bls.n	801b8fc <_free_r+0x80>
 801b8f6:	230c      	movs	r3, #12
 801b8f8:	6003      	str	r3, [r0, #0]
 801b8fa:	e7d3      	b.n	801b8a4 <_free_r+0x28>
 801b8fc:	6825      	ldr	r5, [r4, #0]
 801b8fe:	1961      	adds	r1, r4, r5
 801b900:	428b      	cmp	r3, r1
 801b902:	bf04      	itt	eq
 801b904:	6819      	ldreq	r1, [r3, #0]
 801b906:	685b      	ldreq	r3, [r3, #4]
 801b908:	6063      	str	r3, [r4, #4]
 801b90a:	bf04      	itt	eq
 801b90c:	1949      	addeq	r1, r1, r5
 801b90e:	6021      	streq	r1, [r4, #0]
 801b910:	6054      	str	r4, [r2, #4]
 801b912:	e7c7      	b.n	801b8a4 <_free_r+0x28>
 801b914:	b003      	add	sp, #12
 801b916:	bd30      	pop	{r4, r5, pc}
 801b918:	20001fe0 	.word	0x20001fe0

0801b91c <_malloc_r>:
 801b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b91e:	1ccd      	adds	r5, r1, #3
 801b920:	f025 0503 	bic.w	r5, r5, #3
 801b924:	3508      	adds	r5, #8
 801b926:	2d0c      	cmp	r5, #12
 801b928:	bf38      	it	cc
 801b92a:	250c      	movcc	r5, #12
 801b92c:	2d00      	cmp	r5, #0
 801b92e:	4606      	mov	r6, r0
 801b930:	db01      	blt.n	801b936 <_malloc_r+0x1a>
 801b932:	42a9      	cmp	r1, r5
 801b934:	d903      	bls.n	801b93e <_malloc_r+0x22>
 801b936:	230c      	movs	r3, #12
 801b938:	6033      	str	r3, [r6, #0]
 801b93a:	2000      	movs	r0, #0
 801b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b93e:	f002 f815 	bl	801d96c <__malloc_lock>
 801b942:	4921      	ldr	r1, [pc, #132]	; (801b9c8 <_malloc_r+0xac>)
 801b944:	680a      	ldr	r2, [r1, #0]
 801b946:	4614      	mov	r4, r2
 801b948:	b99c      	cbnz	r4, 801b972 <_malloc_r+0x56>
 801b94a:	4f20      	ldr	r7, [pc, #128]	; (801b9cc <_malloc_r+0xb0>)
 801b94c:	683b      	ldr	r3, [r7, #0]
 801b94e:	b923      	cbnz	r3, 801b95a <_malloc_r+0x3e>
 801b950:	4621      	mov	r1, r4
 801b952:	4630      	mov	r0, r6
 801b954:	f000 fd34 	bl	801c3c0 <_sbrk_r>
 801b958:	6038      	str	r0, [r7, #0]
 801b95a:	4629      	mov	r1, r5
 801b95c:	4630      	mov	r0, r6
 801b95e:	f000 fd2f 	bl	801c3c0 <_sbrk_r>
 801b962:	1c43      	adds	r3, r0, #1
 801b964:	d123      	bne.n	801b9ae <_malloc_r+0x92>
 801b966:	230c      	movs	r3, #12
 801b968:	6033      	str	r3, [r6, #0]
 801b96a:	4630      	mov	r0, r6
 801b96c:	f002 f804 	bl	801d978 <__malloc_unlock>
 801b970:	e7e3      	b.n	801b93a <_malloc_r+0x1e>
 801b972:	6823      	ldr	r3, [r4, #0]
 801b974:	1b5b      	subs	r3, r3, r5
 801b976:	d417      	bmi.n	801b9a8 <_malloc_r+0x8c>
 801b978:	2b0b      	cmp	r3, #11
 801b97a:	d903      	bls.n	801b984 <_malloc_r+0x68>
 801b97c:	6023      	str	r3, [r4, #0]
 801b97e:	441c      	add	r4, r3
 801b980:	6025      	str	r5, [r4, #0]
 801b982:	e004      	b.n	801b98e <_malloc_r+0x72>
 801b984:	6863      	ldr	r3, [r4, #4]
 801b986:	42a2      	cmp	r2, r4
 801b988:	bf0c      	ite	eq
 801b98a:	600b      	streq	r3, [r1, #0]
 801b98c:	6053      	strne	r3, [r2, #4]
 801b98e:	4630      	mov	r0, r6
 801b990:	f001 fff2 	bl	801d978 <__malloc_unlock>
 801b994:	f104 000b 	add.w	r0, r4, #11
 801b998:	1d23      	adds	r3, r4, #4
 801b99a:	f020 0007 	bic.w	r0, r0, #7
 801b99e:	1ac2      	subs	r2, r0, r3
 801b9a0:	d0cc      	beq.n	801b93c <_malloc_r+0x20>
 801b9a2:	1a1b      	subs	r3, r3, r0
 801b9a4:	50a3      	str	r3, [r4, r2]
 801b9a6:	e7c9      	b.n	801b93c <_malloc_r+0x20>
 801b9a8:	4622      	mov	r2, r4
 801b9aa:	6864      	ldr	r4, [r4, #4]
 801b9ac:	e7cc      	b.n	801b948 <_malloc_r+0x2c>
 801b9ae:	1cc4      	adds	r4, r0, #3
 801b9b0:	f024 0403 	bic.w	r4, r4, #3
 801b9b4:	42a0      	cmp	r0, r4
 801b9b6:	d0e3      	beq.n	801b980 <_malloc_r+0x64>
 801b9b8:	1a21      	subs	r1, r4, r0
 801b9ba:	4630      	mov	r0, r6
 801b9bc:	f000 fd00 	bl	801c3c0 <_sbrk_r>
 801b9c0:	3001      	adds	r0, #1
 801b9c2:	d1dd      	bne.n	801b980 <_malloc_r+0x64>
 801b9c4:	e7cf      	b.n	801b966 <_malloc_r+0x4a>
 801b9c6:	bf00      	nop
 801b9c8:	20001fe0 	.word	0x20001fe0
 801b9cc:	20001fe4 	.word	0x20001fe4

0801b9d0 <__cvt>:
 801b9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b9d4:	ec55 4b10 	vmov	r4, r5, d0
 801b9d8:	2d00      	cmp	r5, #0
 801b9da:	460e      	mov	r6, r1
 801b9dc:	4619      	mov	r1, r3
 801b9de:	462b      	mov	r3, r5
 801b9e0:	bfbb      	ittet	lt
 801b9e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b9e6:	461d      	movlt	r5, r3
 801b9e8:	2300      	movge	r3, #0
 801b9ea:	232d      	movlt	r3, #45	; 0x2d
 801b9ec:	700b      	strb	r3, [r1, #0]
 801b9ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b9f4:	4691      	mov	r9, r2
 801b9f6:	f023 0820 	bic.w	r8, r3, #32
 801b9fa:	bfbc      	itt	lt
 801b9fc:	4622      	movlt	r2, r4
 801b9fe:	4614      	movlt	r4, r2
 801ba00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ba04:	d005      	beq.n	801ba12 <__cvt+0x42>
 801ba06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ba0a:	d100      	bne.n	801ba0e <__cvt+0x3e>
 801ba0c:	3601      	adds	r6, #1
 801ba0e:	2102      	movs	r1, #2
 801ba10:	e000      	b.n	801ba14 <__cvt+0x44>
 801ba12:	2103      	movs	r1, #3
 801ba14:	ab03      	add	r3, sp, #12
 801ba16:	9301      	str	r3, [sp, #4]
 801ba18:	ab02      	add	r3, sp, #8
 801ba1a:	9300      	str	r3, [sp, #0]
 801ba1c:	ec45 4b10 	vmov	d0, r4, r5
 801ba20:	4653      	mov	r3, sl
 801ba22:	4632      	mov	r2, r6
 801ba24:	f000 ff80 	bl	801c928 <_dtoa_r>
 801ba28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ba2c:	4607      	mov	r7, r0
 801ba2e:	d102      	bne.n	801ba36 <__cvt+0x66>
 801ba30:	f019 0f01 	tst.w	r9, #1
 801ba34:	d022      	beq.n	801ba7c <__cvt+0xac>
 801ba36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ba3a:	eb07 0906 	add.w	r9, r7, r6
 801ba3e:	d110      	bne.n	801ba62 <__cvt+0x92>
 801ba40:	783b      	ldrb	r3, [r7, #0]
 801ba42:	2b30      	cmp	r3, #48	; 0x30
 801ba44:	d10a      	bne.n	801ba5c <__cvt+0x8c>
 801ba46:	2200      	movs	r2, #0
 801ba48:	2300      	movs	r3, #0
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	4629      	mov	r1, r5
 801ba4e:	f7e5 f84b 	bl	8000ae8 <__aeabi_dcmpeq>
 801ba52:	b918      	cbnz	r0, 801ba5c <__cvt+0x8c>
 801ba54:	f1c6 0601 	rsb	r6, r6, #1
 801ba58:	f8ca 6000 	str.w	r6, [sl]
 801ba5c:	f8da 3000 	ldr.w	r3, [sl]
 801ba60:	4499      	add	r9, r3
 801ba62:	2200      	movs	r2, #0
 801ba64:	2300      	movs	r3, #0
 801ba66:	4620      	mov	r0, r4
 801ba68:	4629      	mov	r1, r5
 801ba6a:	f7e5 f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 801ba6e:	b108      	cbz	r0, 801ba74 <__cvt+0xa4>
 801ba70:	f8cd 900c 	str.w	r9, [sp, #12]
 801ba74:	2230      	movs	r2, #48	; 0x30
 801ba76:	9b03      	ldr	r3, [sp, #12]
 801ba78:	454b      	cmp	r3, r9
 801ba7a:	d307      	bcc.n	801ba8c <__cvt+0xbc>
 801ba7c:	9b03      	ldr	r3, [sp, #12]
 801ba7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba80:	1bdb      	subs	r3, r3, r7
 801ba82:	4638      	mov	r0, r7
 801ba84:	6013      	str	r3, [r2, #0]
 801ba86:	b004      	add	sp, #16
 801ba88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba8c:	1c59      	adds	r1, r3, #1
 801ba8e:	9103      	str	r1, [sp, #12]
 801ba90:	701a      	strb	r2, [r3, #0]
 801ba92:	e7f0      	b.n	801ba76 <__cvt+0xa6>

0801ba94 <__exponent>:
 801ba94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba96:	4603      	mov	r3, r0
 801ba98:	2900      	cmp	r1, #0
 801ba9a:	bfb8      	it	lt
 801ba9c:	4249      	neglt	r1, r1
 801ba9e:	f803 2b02 	strb.w	r2, [r3], #2
 801baa2:	bfb4      	ite	lt
 801baa4:	222d      	movlt	r2, #45	; 0x2d
 801baa6:	222b      	movge	r2, #43	; 0x2b
 801baa8:	2909      	cmp	r1, #9
 801baaa:	7042      	strb	r2, [r0, #1]
 801baac:	dd2a      	ble.n	801bb04 <__exponent+0x70>
 801baae:	f10d 0407 	add.w	r4, sp, #7
 801bab2:	46a4      	mov	ip, r4
 801bab4:	270a      	movs	r7, #10
 801bab6:	46a6      	mov	lr, r4
 801bab8:	460a      	mov	r2, r1
 801baba:	fb91 f6f7 	sdiv	r6, r1, r7
 801babe:	fb07 1516 	mls	r5, r7, r6, r1
 801bac2:	3530      	adds	r5, #48	; 0x30
 801bac4:	2a63      	cmp	r2, #99	; 0x63
 801bac6:	f104 34ff 	add.w	r4, r4, #4294967295
 801baca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bace:	4631      	mov	r1, r6
 801bad0:	dcf1      	bgt.n	801bab6 <__exponent+0x22>
 801bad2:	3130      	adds	r1, #48	; 0x30
 801bad4:	f1ae 0502 	sub.w	r5, lr, #2
 801bad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801badc:	1c44      	adds	r4, r0, #1
 801bade:	4629      	mov	r1, r5
 801bae0:	4561      	cmp	r1, ip
 801bae2:	d30a      	bcc.n	801bafa <__exponent+0x66>
 801bae4:	f10d 0209 	add.w	r2, sp, #9
 801bae8:	eba2 020e 	sub.w	r2, r2, lr
 801baec:	4565      	cmp	r5, ip
 801baee:	bf88      	it	hi
 801baf0:	2200      	movhi	r2, #0
 801baf2:	4413      	add	r3, r2
 801baf4:	1a18      	subs	r0, r3, r0
 801baf6:	b003      	add	sp, #12
 801baf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bafe:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bb02:	e7ed      	b.n	801bae0 <__exponent+0x4c>
 801bb04:	2330      	movs	r3, #48	; 0x30
 801bb06:	3130      	adds	r1, #48	; 0x30
 801bb08:	7083      	strb	r3, [r0, #2]
 801bb0a:	70c1      	strb	r1, [r0, #3]
 801bb0c:	1d03      	adds	r3, r0, #4
 801bb0e:	e7f1      	b.n	801baf4 <__exponent+0x60>

0801bb10 <_printf_float>:
 801bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb14:	ed2d 8b02 	vpush	{d8}
 801bb18:	b08d      	sub	sp, #52	; 0x34
 801bb1a:	460c      	mov	r4, r1
 801bb1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801bb20:	4616      	mov	r6, r2
 801bb22:	461f      	mov	r7, r3
 801bb24:	4605      	mov	r5, r0
 801bb26:	f001 feb5 	bl	801d894 <_localeconv_r>
 801bb2a:	f8d0 a000 	ldr.w	sl, [r0]
 801bb2e:	4650      	mov	r0, sl
 801bb30:	f7e4 fb58 	bl	80001e4 <strlen>
 801bb34:	2300      	movs	r3, #0
 801bb36:	930a      	str	r3, [sp, #40]	; 0x28
 801bb38:	6823      	ldr	r3, [r4, #0]
 801bb3a:	9305      	str	r3, [sp, #20]
 801bb3c:	f8d8 3000 	ldr.w	r3, [r8]
 801bb40:	f894 b018 	ldrb.w	fp, [r4, #24]
 801bb44:	3307      	adds	r3, #7
 801bb46:	f023 0307 	bic.w	r3, r3, #7
 801bb4a:	f103 0208 	add.w	r2, r3, #8
 801bb4e:	f8c8 2000 	str.w	r2, [r8]
 801bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bb5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801bb5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bb62:	9307      	str	r3, [sp, #28]
 801bb64:	f8cd 8018 	str.w	r8, [sp, #24]
 801bb68:	ee08 0a10 	vmov	s16, r0
 801bb6c:	4b9f      	ldr	r3, [pc, #636]	; (801bdec <_printf_float+0x2dc>)
 801bb6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb72:	f04f 32ff 	mov.w	r2, #4294967295
 801bb76:	f7e4 ffe9 	bl	8000b4c <__aeabi_dcmpun>
 801bb7a:	bb88      	cbnz	r0, 801bbe0 <_printf_float+0xd0>
 801bb7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb80:	4b9a      	ldr	r3, [pc, #616]	; (801bdec <_printf_float+0x2dc>)
 801bb82:	f04f 32ff 	mov.w	r2, #4294967295
 801bb86:	f7e4 ffc3 	bl	8000b10 <__aeabi_dcmple>
 801bb8a:	bb48      	cbnz	r0, 801bbe0 <_printf_float+0xd0>
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	2300      	movs	r3, #0
 801bb90:	4640      	mov	r0, r8
 801bb92:	4649      	mov	r1, r9
 801bb94:	f7e4 ffb2 	bl	8000afc <__aeabi_dcmplt>
 801bb98:	b110      	cbz	r0, 801bba0 <_printf_float+0x90>
 801bb9a:	232d      	movs	r3, #45	; 0x2d
 801bb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bba0:	4b93      	ldr	r3, [pc, #588]	; (801bdf0 <_printf_float+0x2e0>)
 801bba2:	4894      	ldr	r0, [pc, #592]	; (801bdf4 <_printf_float+0x2e4>)
 801bba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801bba8:	bf94      	ite	ls
 801bbaa:	4698      	movls	r8, r3
 801bbac:	4680      	movhi	r8, r0
 801bbae:	2303      	movs	r3, #3
 801bbb0:	6123      	str	r3, [r4, #16]
 801bbb2:	9b05      	ldr	r3, [sp, #20]
 801bbb4:	f023 0204 	bic.w	r2, r3, #4
 801bbb8:	6022      	str	r2, [r4, #0]
 801bbba:	f04f 0900 	mov.w	r9, #0
 801bbbe:	9700      	str	r7, [sp, #0]
 801bbc0:	4633      	mov	r3, r6
 801bbc2:	aa0b      	add	r2, sp, #44	; 0x2c
 801bbc4:	4621      	mov	r1, r4
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	f000 f9d8 	bl	801bf7c <_printf_common>
 801bbcc:	3001      	adds	r0, #1
 801bbce:	f040 8090 	bne.w	801bcf2 <_printf_float+0x1e2>
 801bbd2:	f04f 30ff 	mov.w	r0, #4294967295
 801bbd6:	b00d      	add	sp, #52	; 0x34
 801bbd8:	ecbd 8b02 	vpop	{d8}
 801bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbe0:	4642      	mov	r2, r8
 801bbe2:	464b      	mov	r3, r9
 801bbe4:	4640      	mov	r0, r8
 801bbe6:	4649      	mov	r1, r9
 801bbe8:	f7e4 ffb0 	bl	8000b4c <__aeabi_dcmpun>
 801bbec:	b140      	cbz	r0, 801bc00 <_printf_float+0xf0>
 801bbee:	464b      	mov	r3, r9
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	bfbc      	itt	lt
 801bbf4:	232d      	movlt	r3, #45	; 0x2d
 801bbf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bbfa:	487f      	ldr	r0, [pc, #508]	; (801bdf8 <_printf_float+0x2e8>)
 801bbfc:	4b7f      	ldr	r3, [pc, #508]	; (801bdfc <_printf_float+0x2ec>)
 801bbfe:	e7d1      	b.n	801bba4 <_printf_float+0x94>
 801bc00:	6863      	ldr	r3, [r4, #4]
 801bc02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801bc06:	9206      	str	r2, [sp, #24]
 801bc08:	1c5a      	adds	r2, r3, #1
 801bc0a:	d13f      	bne.n	801bc8c <_printf_float+0x17c>
 801bc0c:	2306      	movs	r3, #6
 801bc0e:	6063      	str	r3, [r4, #4]
 801bc10:	9b05      	ldr	r3, [sp, #20]
 801bc12:	6861      	ldr	r1, [r4, #4]
 801bc14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801bc18:	2300      	movs	r3, #0
 801bc1a:	9303      	str	r3, [sp, #12]
 801bc1c:	ab0a      	add	r3, sp, #40	; 0x28
 801bc1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801bc22:	ab09      	add	r3, sp, #36	; 0x24
 801bc24:	ec49 8b10 	vmov	d0, r8, r9
 801bc28:	9300      	str	r3, [sp, #0]
 801bc2a:	6022      	str	r2, [r4, #0]
 801bc2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bc30:	4628      	mov	r0, r5
 801bc32:	f7ff fecd 	bl	801b9d0 <__cvt>
 801bc36:	9b06      	ldr	r3, [sp, #24]
 801bc38:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc3a:	2b47      	cmp	r3, #71	; 0x47
 801bc3c:	4680      	mov	r8, r0
 801bc3e:	d108      	bne.n	801bc52 <_printf_float+0x142>
 801bc40:	1cc8      	adds	r0, r1, #3
 801bc42:	db02      	blt.n	801bc4a <_printf_float+0x13a>
 801bc44:	6863      	ldr	r3, [r4, #4]
 801bc46:	4299      	cmp	r1, r3
 801bc48:	dd41      	ble.n	801bcce <_printf_float+0x1be>
 801bc4a:	f1ab 0b02 	sub.w	fp, fp, #2
 801bc4e:	fa5f fb8b 	uxtb.w	fp, fp
 801bc52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801bc56:	d820      	bhi.n	801bc9a <_printf_float+0x18a>
 801bc58:	3901      	subs	r1, #1
 801bc5a:	465a      	mov	r2, fp
 801bc5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bc60:	9109      	str	r1, [sp, #36]	; 0x24
 801bc62:	f7ff ff17 	bl	801ba94 <__exponent>
 801bc66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc68:	1813      	adds	r3, r2, r0
 801bc6a:	2a01      	cmp	r2, #1
 801bc6c:	4681      	mov	r9, r0
 801bc6e:	6123      	str	r3, [r4, #16]
 801bc70:	dc02      	bgt.n	801bc78 <_printf_float+0x168>
 801bc72:	6822      	ldr	r2, [r4, #0]
 801bc74:	07d2      	lsls	r2, r2, #31
 801bc76:	d501      	bpl.n	801bc7c <_printf_float+0x16c>
 801bc78:	3301      	adds	r3, #1
 801bc7a:	6123      	str	r3, [r4, #16]
 801bc7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d09c      	beq.n	801bbbe <_printf_float+0xae>
 801bc84:	232d      	movs	r3, #45	; 0x2d
 801bc86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc8a:	e798      	b.n	801bbbe <_printf_float+0xae>
 801bc8c:	9a06      	ldr	r2, [sp, #24]
 801bc8e:	2a47      	cmp	r2, #71	; 0x47
 801bc90:	d1be      	bne.n	801bc10 <_printf_float+0x100>
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d1bc      	bne.n	801bc10 <_printf_float+0x100>
 801bc96:	2301      	movs	r3, #1
 801bc98:	e7b9      	b.n	801bc0e <_printf_float+0xfe>
 801bc9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801bc9e:	d118      	bne.n	801bcd2 <_printf_float+0x1c2>
 801bca0:	2900      	cmp	r1, #0
 801bca2:	6863      	ldr	r3, [r4, #4]
 801bca4:	dd0b      	ble.n	801bcbe <_printf_float+0x1ae>
 801bca6:	6121      	str	r1, [r4, #16]
 801bca8:	b913      	cbnz	r3, 801bcb0 <_printf_float+0x1a0>
 801bcaa:	6822      	ldr	r2, [r4, #0]
 801bcac:	07d0      	lsls	r0, r2, #31
 801bcae:	d502      	bpl.n	801bcb6 <_printf_float+0x1a6>
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	440b      	add	r3, r1
 801bcb4:	6123      	str	r3, [r4, #16]
 801bcb6:	65a1      	str	r1, [r4, #88]	; 0x58
 801bcb8:	f04f 0900 	mov.w	r9, #0
 801bcbc:	e7de      	b.n	801bc7c <_printf_float+0x16c>
 801bcbe:	b913      	cbnz	r3, 801bcc6 <_printf_float+0x1b6>
 801bcc0:	6822      	ldr	r2, [r4, #0]
 801bcc2:	07d2      	lsls	r2, r2, #31
 801bcc4:	d501      	bpl.n	801bcca <_printf_float+0x1ba>
 801bcc6:	3302      	adds	r3, #2
 801bcc8:	e7f4      	b.n	801bcb4 <_printf_float+0x1a4>
 801bcca:	2301      	movs	r3, #1
 801bccc:	e7f2      	b.n	801bcb4 <_printf_float+0x1a4>
 801bcce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801bcd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcd4:	4299      	cmp	r1, r3
 801bcd6:	db05      	blt.n	801bce4 <_printf_float+0x1d4>
 801bcd8:	6823      	ldr	r3, [r4, #0]
 801bcda:	6121      	str	r1, [r4, #16]
 801bcdc:	07d8      	lsls	r0, r3, #31
 801bcde:	d5ea      	bpl.n	801bcb6 <_printf_float+0x1a6>
 801bce0:	1c4b      	adds	r3, r1, #1
 801bce2:	e7e7      	b.n	801bcb4 <_printf_float+0x1a4>
 801bce4:	2900      	cmp	r1, #0
 801bce6:	bfd4      	ite	le
 801bce8:	f1c1 0202 	rsble	r2, r1, #2
 801bcec:	2201      	movgt	r2, #1
 801bcee:	4413      	add	r3, r2
 801bcf0:	e7e0      	b.n	801bcb4 <_printf_float+0x1a4>
 801bcf2:	6823      	ldr	r3, [r4, #0]
 801bcf4:	055a      	lsls	r2, r3, #21
 801bcf6:	d407      	bmi.n	801bd08 <_printf_float+0x1f8>
 801bcf8:	6923      	ldr	r3, [r4, #16]
 801bcfa:	4642      	mov	r2, r8
 801bcfc:	4631      	mov	r1, r6
 801bcfe:	4628      	mov	r0, r5
 801bd00:	47b8      	blx	r7
 801bd02:	3001      	adds	r0, #1
 801bd04:	d12c      	bne.n	801bd60 <_printf_float+0x250>
 801bd06:	e764      	b.n	801bbd2 <_printf_float+0xc2>
 801bd08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801bd0c:	f240 80e0 	bls.w	801bed0 <_printf_float+0x3c0>
 801bd10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bd14:	2200      	movs	r2, #0
 801bd16:	2300      	movs	r3, #0
 801bd18:	f7e4 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 801bd1c:	2800      	cmp	r0, #0
 801bd1e:	d034      	beq.n	801bd8a <_printf_float+0x27a>
 801bd20:	4a37      	ldr	r2, [pc, #220]	; (801be00 <_printf_float+0x2f0>)
 801bd22:	2301      	movs	r3, #1
 801bd24:	4631      	mov	r1, r6
 801bd26:	4628      	mov	r0, r5
 801bd28:	47b8      	blx	r7
 801bd2a:	3001      	adds	r0, #1
 801bd2c:	f43f af51 	beq.w	801bbd2 <_printf_float+0xc2>
 801bd30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bd34:	429a      	cmp	r2, r3
 801bd36:	db02      	blt.n	801bd3e <_printf_float+0x22e>
 801bd38:	6823      	ldr	r3, [r4, #0]
 801bd3a:	07d8      	lsls	r0, r3, #31
 801bd3c:	d510      	bpl.n	801bd60 <_printf_float+0x250>
 801bd3e:	ee18 3a10 	vmov	r3, s16
 801bd42:	4652      	mov	r2, sl
 801bd44:	4631      	mov	r1, r6
 801bd46:	4628      	mov	r0, r5
 801bd48:	47b8      	blx	r7
 801bd4a:	3001      	adds	r0, #1
 801bd4c:	f43f af41 	beq.w	801bbd2 <_printf_float+0xc2>
 801bd50:	f04f 0800 	mov.w	r8, #0
 801bd54:	f104 091a 	add.w	r9, r4, #26
 801bd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd5a:	3b01      	subs	r3, #1
 801bd5c:	4543      	cmp	r3, r8
 801bd5e:	dc09      	bgt.n	801bd74 <_printf_float+0x264>
 801bd60:	6823      	ldr	r3, [r4, #0]
 801bd62:	079b      	lsls	r3, r3, #30
 801bd64:	f100 8105 	bmi.w	801bf72 <_printf_float+0x462>
 801bd68:	68e0      	ldr	r0, [r4, #12]
 801bd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd6c:	4298      	cmp	r0, r3
 801bd6e:	bfb8      	it	lt
 801bd70:	4618      	movlt	r0, r3
 801bd72:	e730      	b.n	801bbd6 <_printf_float+0xc6>
 801bd74:	2301      	movs	r3, #1
 801bd76:	464a      	mov	r2, r9
 801bd78:	4631      	mov	r1, r6
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	47b8      	blx	r7
 801bd7e:	3001      	adds	r0, #1
 801bd80:	f43f af27 	beq.w	801bbd2 <_printf_float+0xc2>
 801bd84:	f108 0801 	add.w	r8, r8, #1
 801bd88:	e7e6      	b.n	801bd58 <_printf_float+0x248>
 801bd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	dc39      	bgt.n	801be04 <_printf_float+0x2f4>
 801bd90:	4a1b      	ldr	r2, [pc, #108]	; (801be00 <_printf_float+0x2f0>)
 801bd92:	2301      	movs	r3, #1
 801bd94:	4631      	mov	r1, r6
 801bd96:	4628      	mov	r0, r5
 801bd98:	47b8      	blx	r7
 801bd9a:	3001      	adds	r0, #1
 801bd9c:	f43f af19 	beq.w	801bbd2 <_printf_float+0xc2>
 801bda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bda4:	4313      	orrs	r3, r2
 801bda6:	d102      	bne.n	801bdae <_printf_float+0x29e>
 801bda8:	6823      	ldr	r3, [r4, #0]
 801bdaa:	07d9      	lsls	r1, r3, #31
 801bdac:	d5d8      	bpl.n	801bd60 <_printf_float+0x250>
 801bdae:	ee18 3a10 	vmov	r3, s16
 801bdb2:	4652      	mov	r2, sl
 801bdb4:	4631      	mov	r1, r6
 801bdb6:	4628      	mov	r0, r5
 801bdb8:	47b8      	blx	r7
 801bdba:	3001      	adds	r0, #1
 801bdbc:	f43f af09 	beq.w	801bbd2 <_printf_float+0xc2>
 801bdc0:	f04f 0900 	mov.w	r9, #0
 801bdc4:	f104 0a1a 	add.w	sl, r4, #26
 801bdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdca:	425b      	negs	r3, r3
 801bdcc:	454b      	cmp	r3, r9
 801bdce:	dc01      	bgt.n	801bdd4 <_printf_float+0x2c4>
 801bdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd2:	e792      	b.n	801bcfa <_printf_float+0x1ea>
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	4652      	mov	r2, sl
 801bdd8:	4631      	mov	r1, r6
 801bdda:	4628      	mov	r0, r5
 801bddc:	47b8      	blx	r7
 801bdde:	3001      	adds	r0, #1
 801bde0:	f43f aef7 	beq.w	801bbd2 <_printf_float+0xc2>
 801bde4:	f109 0901 	add.w	r9, r9, #1
 801bde8:	e7ee      	b.n	801bdc8 <_printf_float+0x2b8>
 801bdea:	bf00      	nop
 801bdec:	7fefffff 	.word	0x7fefffff
 801bdf0:	08020370 	.word	0x08020370
 801bdf4:	08020374 	.word	0x08020374
 801bdf8:	0802037c 	.word	0x0802037c
 801bdfc:	08020378 	.word	0x08020378
 801be00:	08020380 	.word	0x08020380
 801be04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801be08:	429a      	cmp	r2, r3
 801be0a:	bfa8      	it	ge
 801be0c:	461a      	movge	r2, r3
 801be0e:	2a00      	cmp	r2, #0
 801be10:	4691      	mov	r9, r2
 801be12:	dc37      	bgt.n	801be84 <_printf_float+0x374>
 801be14:	f04f 0b00 	mov.w	fp, #0
 801be18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801be1c:	f104 021a 	add.w	r2, r4, #26
 801be20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801be22:	9305      	str	r3, [sp, #20]
 801be24:	eba3 0309 	sub.w	r3, r3, r9
 801be28:	455b      	cmp	r3, fp
 801be2a:	dc33      	bgt.n	801be94 <_printf_float+0x384>
 801be2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801be30:	429a      	cmp	r2, r3
 801be32:	db3b      	blt.n	801beac <_printf_float+0x39c>
 801be34:	6823      	ldr	r3, [r4, #0]
 801be36:	07da      	lsls	r2, r3, #31
 801be38:	d438      	bmi.n	801beac <_printf_float+0x39c>
 801be3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801be3c:	9b05      	ldr	r3, [sp, #20]
 801be3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	eba2 0901 	sub.w	r9, r2, r1
 801be46:	4599      	cmp	r9, r3
 801be48:	bfa8      	it	ge
 801be4a:	4699      	movge	r9, r3
 801be4c:	f1b9 0f00 	cmp.w	r9, #0
 801be50:	dc35      	bgt.n	801bebe <_printf_float+0x3ae>
 801be52:	f04f 0800 	mov.w	r8, #0
 801be56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801be5a:	f104 0a1a 	add.w	sl, r4, #26
 801be5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801be62:	1a9b      	subs	r3, r3, r2
 801be64:	eba3 0309 	sub.w	r3, r3, r9
 801be68:	4543      	cmp	r3, r8
 801be6a:	f77f af79 	ble.w	801bd60 <_printf_float+0x250>
 801be6e:	2301      	movs	r3, #1
 801be70:	4652      	mov	r2, sl
 801be72:	4631      	mov	r1, r6
 801be74:	4628      	mov	r0, r5
 801be76:	47b8      	blx	r7
 801be78:	3001      	adds	r0, #1
 801be7a:	f43f aeaa 	beq.w	801bbd2 <_printf_float+0xc2>
 801be7e:	f108 0801 	add.w	r8, r8, #1
 801be82:	e7ec      	b.n	801be5e <_printf_float+0x34e>
 801be84:	4613      	mov	r3, r2
 801be86:	4631      	mov	r1, r6
 801be88:	4642      	mov	r2, r8
 801be8a:	4628      	mov	r0, r5
 801be8c:	47b8      	blx	r7
 801be8e:	3001      	adds	r0, #1
 801be90:	d1c0      	bne.n	801be14 <_printf_float+0x304>
 801be92:	e69e      	b.n	801bbd2 <_printf_float+0xc2>
 801be94:	2301      	movs	r3, #1
 801be96:	4631      	mov	r1, r6
 801be98:	4628      	mov	r0, r5
 801be9a:	9205      	str	r2, [sp, #20]
 801be9c:	47b8      	blx	r7
 801be9e:	3001      	adds	r0, #1
 801bea0:	f43f ae97 	beq.w	801bbd2 <_printf_float+0xc2>
 801bea4:	9a05      	ldr	r2, [sp, #20]
 801bea6:	f10b 0b01 	add.w	fp, fp, #1
 801beaa:	e7b9      	b.n	801be20 <_printf_float+0x310>
 801beac:	ee18 3a10 	vmov	r3, s16
 801beb0:	4652      	mov	r2, sl
 801beb2:	4631      	mov	r1, r6
 801beb4:	4628      	mov	r0, r5
 801beb6:	47b8      	blx	r7
 801beb8:	3001      	adds	r0, #1
 801beba:	d1be      	bne.n	801be3a <_printf_float+0x32a>
 801bebc:	e689      	b.n	801bbd2 <_printf_float+0xc2>
 801bebe:	9a05      	ldr	r2, [sp, #20]
 801bec0:	464b      	mov	r3, r9
 801bec2:	4442      	add	r2, r8
 801bec4:	4631      	mov	r1, r6
 801bec6:	4628      	mov	r0, r5
 801bec8:	47b8      	blx	r7
 801beca:	3001      	adds	r0, #1
 801becc:	d1c1      	bne.n	801be52 <_printf_float+0x342>
 801bece:	e680      	b.n	801bbd2 <_printf_float+0xc2>
 801bed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bed2:	2a01      	cmp	r2, #1
 801bed4:	dc01      	bgt.n	801beda <_printf_float+0x3ca>
 801bed6:	07db      	lsls	r3, r3, #31
 801bed8:	d538      	bpl.n	801bf4c <_printf_float+0x43c>
 801beda:	2301      	movs	r3, #1
 801bedc:	4642      	mov	r2, r8
 801bede:	4631      	mov	r1, r6
 801bee0:	4628      	mov	r0, r5
 801bee2:	47b8      	blx	r7
 801bee4:	3001      	adds	r0, #1
 801bee6:	f43f ae74 	beq.w	801bbd2 <_printf_float+0xc2>
 801beea:	ee18 3a10 	vmov	r3, s16
 801beee:	4652      	mov	r2, sl
 801bef0:	4631      	mov	r1, r6
 801bef2:	4628      	mov	r0, r5
 801bef4:	47b8      	blx	r7
 801bef6:	3001      	adds	r0, #1
 801bef8:	f43f ae6b 	beq.w	801bbd2 <_printf_float+0xc2>
 801befc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bf00:	2200      	movs	r2, #0
 801bf02:	2300      	movs	r3, #0
 801bf04:	f7e4 fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 801bf08:	b9d8      	cbnz	r0, 801bf42 <_printf_float+0x432>
 801bf0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf0c:	f108 0201 	add.w	r2, r8, #1
 801bf10:	3b01      	subs	r3, #1
 801bf12:	4631      	mov	r1, r6
 801bf14:	4628      	mov	r0, r5
 801bf16:	47b8      	blx	r7
 801bf18:	3001      	adds	r0, #1
 801bf1a:	d10e      	bne.n	801bf3a <_printf_float+0x42a>
 801bf1c:	e659      	b.n	801bbd2 <_printf_float+0xc2>
 801bf1e:	2301      	movs	r3, #1
 801bf20:	4652      	mov	r2, sl
 801bf22:	4631      	mov	r1, r6
 801bf24:	4628      	mov	r0, r5
 801bf26:	47b8      	blx	r7
 801bf28:	3001      	adds	r0, #1
 801bf2a:	f43f ae52 	beq.w	801bbd2 <_printf_float+0xc2>
 801bf2e:	f108 0801 	add.w	r8, r8, #1
 801bf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf34:	3b01      	subs	r3, #1
 801bf36:	4543      	cmp	r3, r8
 801bf38:	dcf1      	bgt.n	801bf1e <_printf_float+0x40e>
 801bf3a:	464b      	mov	r3, r9
 801bf3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bf40:	e6dc      	b.n	801bcfc <_printf_float+0x1ec>
 801bf42:	f04f 0800 	mov.w	r8, #0
 801bf46:	f104 0a1a 	add.w	sl, r4, #26
 801bf4a:	e7f2      	b.n	801bf32 <_printf_float+0x422>
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	4642      	mov	r2, r8
 801bf50:	e7df      	b.n	801bf12 <_printf_float+0x402>
 801bf52:	2301      	movs	r3, #1
 801bf54:	464a      	mov	r2, r9
 801bf56:	4631      	mov	r1, r6
 801bf58:	4628      	mov	r0, r5
 801bf5a:	47b8      	blx	r7
 801bf5c:	3001      	adds	r0, #1
 801bf5e:	f43f ae38 	beq.w	801bbd2 <_printf_float+0xc2>
 801bf62:	f108 0801 	add.w	r8, r8, #1
 801bf66:	68e3      	ldr	r3, [r4, #12]
 801bf68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf6a:	1a5b      	subs	r3, r3, r1
 801bf6c:	4543      	cmp	r3, r8
 801bf6e:	dcf0      	bgt.n	801bf52 <_printf_float+0x442>
 801bf70:	e6fa      	b.n	801bd68 <_printf_float+0x258>
 801bf72:	f04f 0800 	mov.w	r8, #0
 801bf76:	f104 0919 	add.w	r9, r4, #25
 801bf7a:	e7f4      	b.n	801bf66 <_printf_float+0x456>

0801bf7c <_printf_common>:
 801bf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf80:	4616      	mov	r6, r2
 801bf82:	4699      	mov	r9, r3
 801bf84:	688a      	ldr	r2, [r1, #8]
 801bf86:	690b      	ldr	r3, [r1, #16]
 801bf88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf8c:	4293      	cmp	r3, r2
 801bf8e:	bfb8      	it	lt
 801bf90:	4613      	movlt	r3, r2
 801bf92:	6033      	str	r3, [r6, #0]
 801bf94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bf98:	4607      	mov	r7, r0
 801bf9a:	460c      	mov	r4, r1
 801bf9c:	b10a      	cbz	r2, 801bfa2 <_printf_common+0x26>
 801bf9e:	3301      	adds	r3, #1
 801bfa0:	6033      	str	r3, [r6, #0]
 801bfa2:	6823      	ldr	r3, [r4, #0]
 801bfa4:	0699      	lsls	r1, r3, #26
 801bfa6:	bf42      	ittt	mi
 801bfa8:	6833      	ldrmi	r3, [r6, #0]
 801bfaa:	3302      	addmi	r3, #2
 801bfac:	6033      	strmi	r3, [r6, #0]
 801bfae:	6825      	ldr	r5, [r4, #0]
 801bfb0:	f015 0506 	ands.w	r5, r5, #6
 801bfb4:	d106      	bne.n	801bfc4 <_printf_common+0x48>
 801bfb6:	f104 0a19 	add.w	sl, r4, #25
 801bfba:	68e3      	ldr	r3, [r4, #12]
 801bfbc:	6832      	ldr	r2, [r6, #0]
 801bfbe:	1a9b      	subs	r3, r3, r2
 801bfc0:	42ab      	cmp	r3, r5
 801bfc2:	dc26      	bgt.n	801c012 <_printf_common+0x96>
 801bfc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bfc8:	1e13      	subs	r3, r2, #0
 801bfca:	6822      	ldr	r2, [r4, #0]
 801bfcc:	bf18      	it	ne
 801bfce:	2301      	movne	r3, #1
 801bfd0:	0692      	lsls	r2, r2, #26
 801bfd2:	d42b      	bmi.n	801c02c <_printf_common+0xb0>
 801bfd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bfd8:	4649      	mov	r1, r9
 801bfda:	4638      	mov	r0, r7
 801bfdc:	47c0      	blx	r8
 801bfde:	3001      	adds	r0, #1
 801bfe0:	d01e      	beq.n	801c020 <_printf_common+0xa4>
 801bfe2:	6823      	ldr	r3, [r4, #0]
 801bfe4:	68e5      	ldr	r5, [r4, #12]
 801bfe6:	6832      	ldr	r2, [r6, #0]
 801bfe8:	f003 0306 	and.w	r3, r3, #6
 801bfec:	2b04      	cmp	r3, #4
 801bfee:	bf08      	it	eq
 801bff0:	1aad      	subeq	r5, r5, r2
 801bff2:	68a3      	ldr	r3, [r4, #8]
 801bff4:	6922      	ldr	r2, [r4, #16]
 801bff6:	bf0c      	ite	eq
 801bff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bffc:	2500      	movne	r5, #0
 801bffe:	4293      	cmp	r3, r2
 801c000:	bfc4      	itt	gt
 801c002:	1a9b      	subgt	r3, r3, r2
 801c004:	18ed      	addgt	r5, r5, r3
 801c006:	2600      	movs	r6, #0
 801c008:	341a      	adds	r4, #26
 801c00a:	42b5      	cmp	r5, r6
 801c00c:	d11a      	bne.n	801c044 <_printf_common+0xc8>
 801c00e:	2000      	movs	r0, #0
 801c010:	e008      	b.n	801c024 <_printf_common+0xa8>
 801c012:	2301      	movs	r3, #1
 801c014:	4652      	mov	r2, sl
 801c016:	4649      	mov	r1, r9
 801c018:	4638      	mov	r0, r7
 801c01a:	47c0      	blx	r8
 801c01c:	3001      	adds	r0, #1
 801c01e:	d103      	bne.n	801c028 <_printf_common+0xac>
 801c020:	f04f 30ff 	mov.w	r0, #4294967295
 801c024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c028:	3501      	adds	r5, #1
 801c02a:	e7c6      	b.n	801bfba <_printf_common+0x3e>
 801c02c:	18e1      	adds	r1, r4, r3
 801c02e:	1c5a      	adds	r2, r3, #1
 801c030:	2030      	movs	r0, #48	; 0x30
 801c032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c036:	4422      	add	r2, r4
 801c038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c040:	3302      	adds	r3, #2
 801c042:	e7c7      	b.n	801bfd4 <_printf_common+0x58>
 801c044:	2301      	movs	r3, #1
 801c046:	4622      	mov	r2, r4
 801c048:	4649      	mov	r1, r9
 801c04a:	4638      	mov	r0, r7
 801c04c:	47c0      	blx	r8
 801c04e:	3001      	adds	r0, #1
 801c050:	d0e6      	beq.n	801c020 <_printf_common+0xa4>
 801c052:	3601      	adds	r6, #1
 801c054:	e7d9      	b.n	801c00a <_printf_common+0x8e>
	...

0801c058 <_printf_i>:
 801c058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c05c:	460c      	mov	r4, r1
 801c05e:	4691      	mov	r9, r2
 801c060:	7e27      	ldrb	r7, [r4, #24]
 801c062:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c064:	2f78      	cmp	r7, #120	; 0x78
 801c066:	4680      	mov	r8, r0
 801c068:	469a      	mov	sl, r3
 801c06a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c06e:	d807      	bhi.n	801c080 <_printf_i+0x28>
 801c070:	2f62      	cmp	r7, #98	; 0x62
 801c072:	d80a      	bhi.n	801c08a <_printf_i+0x32>
 801c074:	2f00      	cmp	r7, #0
 801c076:	f000 80d8 	beq.w	801c22a <_printf_i+0x1d2>
 801c07a:	2f58      	cmp	r7, #88	; 0x58
 801c07c:	f000 80a3 	beq.w	801c1c6 <_printf_i+0x16e>
 801c080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c088:	e03a      	b.n	801c100 <_printf_i+0xa8>
 801c08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c08e:	2b15      	cmp	r3, #21
 801c090:	d8f6      	bhi.n	801c080 <_printf_i+0x28>
 801c092:	a001      	add	r0, pc, #4	; (adr r0, 801c098 <_printf_i+0x40>)
 801c094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c098:	0801c0f1 	.word	0x0801c0f1
 801c09c:	0801c105 	.word	0x0801c105
 801c0a0:	0801c081 	.word	0x0801c081
 801c0a4:	0801c081 	.word	0x0801c081
 801c0a8:	0801c081 	.word	0x0801c081
 801c0ac:	0801c081 	.word	0x0801c081
 801c0b0:	0801c105 	.word	0x0801c105
 801c0b4:	0801c081 	.word	0x0801c081
 801c0b8:	0801c081 	.word	0x0801c081
 801c0bc:	0801c081 	.word	0x0801c081
 801c0c0:	0801c081 	.word	0x0801c081
 801c0c4:	0801c211 	.word	0x0801c211
 801c0c8:	0801c135 	.word	0x0801c135
 801c0cc:	0801c1f3 	.word	0x0801c1f3
 801c0d0:	0801c081 	.word	0x0801c081
 801c0d4:	0801c081 	.word	0x0801c081
 801c0d8:	0801c233 	.word	0x0801c233
 801c0dc:	0801c081 	.word	0x0801c081
 801c0e0:	0801c135 	.word	0x0801c135
 801c0e4:	0801c081 	.word	0x0801c081
 801c0e8:	0801c081 	.word	0x0801c081
 801c0ec:	0801c1fb 	.word	0x0801c1fb
 801c0f0:	680b      	ldr	r3, [r1, #0]
 801c0f2:	1d1a      	adds	r2, r3, #4
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	600a      	str	r2, [r1, #0]
 801c0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c100:	2301      	movs	r3, #1
 801c102:	e0a3      	b.n	801c24c <_printf_i+0x1f4>
 801c104:	6825      	ldr	r5, [r4, #0]
 801c106:	6808      	ldr	r0, [r1, #0]
 801c108:	062e      	lsls	r6, r5, #24
 801c10a:	f100 0304 	add.w	r3, r0, #4
 801c10e:	d50a      	bpl.n	801c126 <_printf_i+0xce>
 801c110:	6805      	ldr	r5, [r0, #0]
 801c112:	600b      	str	r3, [r1, #0]
 801c114:	2d00      	cmp	r5, #0
 801c116:	da03      	bge.n	801c120 <_printf_i+0xc8>
 801c118:	232d      	movs	r3, #45	; 0x2d
 801c11a:	426d      	negs	r5, r5
 801c11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c120:	485e      	ldr	r0, [pc, #376]	; (801c29c <_printf_i+0x244>)
 801c122:	230a      	movs	r3, #10
 801c124:	e019      	b.n	801c15a <_printf_i+0x102>
 801c126:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c12a:	6805      	ldr	r5, [r0, #0]
 801c12c:	600b      	str	r3, [r1, #0]
 801c12e:	bf18      	it	ne
 801c130:	b22d      	sxthne	r5, r5
 801c132:	e7ef      	b.n	801c114 <_printf_i+0xbc>
 801c134:	680b      	ldr	r3, [r1, #0]
 801c136:	6825      	ldr	r5, [r4, #0]
 801c138:	1d18      	adds	r0, r3, #4
 801c13a:	6008      	str	r0, [r1, #0]
 801c13c:	0628      	lsls	r0, r5, #24
 801c13e:	d501      	bpl.n	801c144 <_printf_i+0xec>
 801c140:	681d      	ldr	r5, [r3, #0]
 801c142:	e002      	b.n	801c14a <_printf_i+0xf2>
 801c144:	0669      	lsls	r1, r5, #25
 801c146:	d5fb      	bpl.n	801c140 <_printf_i+0xe8>
 801c148:	881d      	ldrh	r5, [r3, #0]
 801c14a:	4854      	ldr	r0, [pc, #336]	; (801c29c <_printf_i+0x244>)
 801c14c:	2f6f      	cmp	r7, #111	; 0x6f
 801c14e:	bf0c      	ite	eq
 801c150:	2308      	moveq	r3, #8
 801c152:	230a      	movne	r3, #10
 801c154:	2100      	movs	r1, #0
 801c156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c15a:	6866      	ldr	r6, [r4, #4]
 801c15c:	60a6      	str	r6, [r4, #8]
 801c15e:	2e00      	cmp	r6, #0
 801c160:	bfa2      	ittt	ge
 801c162:	6821      	ldrge	r1, [r4, #0]
 801c164:	f021 0104 	bicge.w	r1, r1, #4
 801c168:	6021      	strge	r1, [r4, #0]
 801c16a:	b90d      	cbnz	r5, 801c170 <_printf_i+0x118>
 801c16c:	2e00      	cmp	r6, #0
 801c16e:	d04d      	beq.n	801c20c <_printf_i+0x1b4>
 801c170:	4616      	mov	r6, r2
 801c172:	fbb5 f1f3 	udiv	r1, r5, r3
 801c176:	fb03 5711 	mls	r7, r3, r1, r5
 801c17a:	5dc7      	ldrb	r7, [r0, r7]
 801c17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c180:	462f      	mov	r7, r5
 801c182:	42bb      	cmp	r3, r7
 801c184:	460d      	mov	r5, r1
 801c186:	d9f4      	bls.n	801c172 <_printf_i+0x11a>
 801c188:	2b08      	cmp	r3, #8
 801c18a:	d10b      	bne.n	801c1a4 <_printf_i+0x14c>
 801c18c:	6823      	ldr	r3, [r4, #0]
 801c18e:	07df      	lsls	r7, r3, #31
 801c190:	d508      	bpl.n	801c1a4 <_printf_i+0x14c>
 801c192:	6923      	ldr	r3, [r4, #16]
 801c194:	6861      	ldr	r1, [r4, #4]
 801c196:	4299      	cmp	r1, r3
 801c198:	bfde      	ittt	le
 801c19a:	2330      	movle	r3, #48	; 0x30
 801c19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c1a4:	1b92      	subs	r2, r2, r6
 801c1a6:	6122      	str	r2, [r4, #16]
 801c1a8:	f8cd a000 	str.w	sl, [sp]
 801c1ac:	464b      	mov	r3, r9
 801c1ae:	aa03      	add	r2, sp, #12
 801c1b0:	4621      	mov	r1, r4
 801c1b2:	4640      	mov	r0, r8
 801c1b4:	f7ff fee2 	bl	801bf7c <_printf_common>
 801c1b8:	3001      	adds	r0, #1
 801c1ba:	d14c      	bne.n	801c256 <_printf_i+0x1fe>
 801c1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c1c0:	b004      	add	sp, #16
 801c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1c6:	4835      	ldr	r0, [pc, #212]	; (801c29c <_printf_i+0x244>)
 801c1c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c1cc:	6823      	ldr	r3, [r4, #0]
 801c1ce:	680e      	ldr	r6, [r1, #0]
 801c1d0:	061f      	lsls	r7, r3, #24
 801c1d2:	f856 5b04 	ldr.w	r5, [r6], #4
 801c1d6:	600e      	str	r6, [r1, #0]
 801c1d8:	d514      	bpl.n	801c204 <_printf_i+0x1ac>
 801c1da:	07d9      	lsls	r1, r3, #31
 801c1dc:	bf44      	itt	mi
 801c1de:	f043 0320 	orrmi.w	r3, r3, #32
 801c1e2:	6023      	strmi	r3, [r4, #0]
 801c1e4:	b91d      	cbnz	r5, 801c1ee <_printf_i+0x196>
 801c1e6:	6823      	ldr	r3, [r4, #0]
 801c1e8:	f023 0320 	bic.w	r3, r3, #32
 801c1ec:	6023      	str	r3, [r4, #0]
 801c1ee:	2310      	movs	r3, #16
 801c1f0:	e7b0      	b.n	801c154 <_printf_i+0xfc>
 801c1f2:	6823      	ldr	r3, [r4, #0]
 801c1f4:	f043 0320 	orr.w	r3, r3, #32
 801c1f8:	6023      	str	r3, [r4, #0]
 801c1fa:	2378      	movs	r3, #120	; 0x78
 801c1fc:	4828      	ldr	r0, [pc, #160]	; (801c2a0 <_printf_i+0x248>)
 801c1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c202:	e7e3      	b.n	801c1cc <_printf_i+0x174>
 801c204:	065e      	lsls	r6, r3, #25
 801c206:	bf48      	it	mi
 801c208:	b2ad      	uxthmi	r5, r5
 801c20a:	e7e6      	b.n	801c1da <_printf_i+0x182>
 801c20c:	4616      	mov	r6, r2
 801c20e:	e7bb      	b.n	801c188 <_printf_i+0x130>
 801c210:	680b      	ldr	r3, [r1, #0]
 801c212:	6826      	ldr	r6, [r4, #0]
 801c214:	6960      	ldr	r0, [r4, #20]
 801c216:	1d1d      	adds	r5, r3, #4
 801c218:	600d      	str	r5, [r1, #0]
 801c21a:	0635      	lsls	r5, r6, #24
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	d501      	bpl.n	801c224 <_printf_i+0x1cc>
 801c220:	6018      	str	r0, [r3, #0]
 801c222:	e002      	b.n	801c22a <_printf_i+0x1d2>
 801c224:	0671      	lsls	r1, r6, #25
 801c226:	d5fb      	bpl.n	801c220 <_printf_i+0x1c8>
 801c228:	8018      	strh	r0, [r3, #0]
 801c22a:	2300      	movs	r3, #0
 801c22c:	6123      	str	r3, [r4, #16]
 801c22e:	4616      	mov	r6, r2
 801c230:	e7ba      	b.n	801c1a8 <_printf_i+0x150>
 801c232:	680b      	ldr	r3, [r1, #0]
 801c234:	1d1a      	adds	r2, r3, #4
 801c236:	600a      	str	r2, [r1, #0]
 801c238:	681e      	ldr	r6, [r3, #0]
 801c23a:	6862      	ldr	r2, [r4, #4]
 801c23c:	2100      	movs	r1, #0
 801c23e:	4630      	mov	r0, r6
 801c240:	f7e3 ffde 	bl	8000200 <memchr>
 801c244:	b108      	cbz	r0, 801c24a <_printf_i+0x1f2>
 801c246:	1b80      	subs	r0, r0, r6
 801c248:	6060      	str	r0, [r4, #4]
 801c24a:	6863      	ldr	r3, [r4, #4]
 801c24c:	6123      	str	r3, [r4, #16]
 801c24e:	2300      	movs	r3, #0
 801c250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c254:	e7a8      	b.n	801c1a8 <_printf_i+0x150>
 801c256:	6923      	ldr	r3, [r4, #16]
 801c258:	4632      	mov	r2, r6
 801c25a:	4649      	mov	r1, r9
 801c25c:	4640      	mov	r0, r8
 801c25e:	47d0      	blx	sl
 801c260:	3001      	adds	r0, #1
 801c262:	d0ab      	beq.n	801c1bc <_printf_i+0x164>
 801c264:	6823      	ldr	r3, [r4, #0]
 801c266:	079b      	lsls	r3, r3, #30
 801c268:	d413      	bmi.n	801c292 <_printf_i+0x23a>
 801c26a:	68e0      	ldr	r0, [r4, #12]
 801c26c:	9b03      	ldr	r3, [sp, #12]
 801c26e:	4298      	cmp	r0, r3
 801c270:	bfb8      	it	lt
 801c272:	4618      	movlt	r0, r3
 801c274:	e7a4      	b.n	801c1c0 <_printf_i+0x168>
 801c276:	2301      	movs	r3, #1
 801c278:	4632      	mov	r2, r6
 801c27a:	4649      	mov	r1, r9
 801c27c:	4640      	mov	r0, r8
 801c27e:	47d0      	blx	sl
 801c280:	3001      	adds	r0, #1
 801c282:	d09b      	beq.n	801c1bc <_printf_i+0x164>
 801c284:	3501      	adds	r5, #1
 801c286:	68e3      	ldr	r3, [r4, #12]
 801c288:	9903      	ldr	r1, [sp, #12]
 801c28a:	1a5b      	subs	r3, r3, r1
 801c28c:	42ab      	cmp	r3, r5
 801c28e:	dcf2      	bgt.n	801c276 <_printf_i+0x21e>
 801c290:	e7eb      	b.n	801c26a <_printf_i+0x212>
 801c292:	2500      	movs	r5, #0
 801c294:	f104 0619 	add.w	r6, r4, #25
 801c298:	e7f5      	b.n	801c286 <_printf_i+0x22e>
 801c29a:	bf00      	nop
 801c29c:	08020382 	.word	0x08020382
 801c2a0:	08020393 	.word	0x08020393

0801c2a4 <iprintf>:
 801c2a4:	b40f      	push	{r0, r1, r2, r3}
 801c2a6:	4b0a      	ldr	r3, [pc, #40]	; (801c2d0 <iprintf+0x2c>)
 801c2a8:	b513      	push	{r0, r1, r4, lr}
 801c2aa:	681c      	ldr	r4, [r3, #0]
 801c2ac:	b124      	cbz	r4, 801c2b8 <iprintf+0x14>
 801c2ae:	69a3      	ldr	r3, [r4, #24]
 801c2b0:	b913      	cbnz	r3, 801c2b8 <iprintf+0x14>
 801c2b2:	4620      	mov	r0, r4
 801c2b4:	f001 fa3e 	bl	801d734 <__sinit>
 801c2b8:	ab05      	add	r3, sp, #20
 801c2ba:	9a04      	ldr	r2, [sp, #16]
 801c2bc:	68a1      	ldr	r1, [r4, #8]
 801c2be:	9301      	str	r3, [sp, #4]
 801c2c0:	4620      	mov	r0, r4
 801c2c2:	f002 f871 	bl	801e3a8 <_vfiprintf_r>
 801c2c6:	b002      	add	sp, #8
 801c2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2cc:	b004      	add	sp, #16
 801c2ce:	4770      	bx	lr
 801c2d0:	200001b0 	.word	0x200001b0

0801c2d4 <_puts_r>:
 801c2d4:	b570      	push	{r4, r5, r6, lr}
 801c2d6:	460e      	mov	r6, r1
 801c2d8:	4605      	mov	r5, r0
 801c2da:	b118      	cbz	r0, 801c2e4 <_puts_r+0x10>
 801c2dc:	6983      	ldr	r3, [r0, #24]
 801c2de:	b90b      	cbnz	r3, 801c2e4 <_puts_r+0x10>
 801c2e0:	f001 fa28 	bl	801d734 <__sinit>
 801c2e4:	69ab      	ldr	r3, [r5, #24]
 801c2e6:	68ac      	ldr	r4, [r5, #8]
 801c2e8:	b913      	cbnz	r3, 801c2f0 <_puts_r+0x1c>
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	f001 fa22 	bl	801d734 <__sinit>
 801c2f0:	4b2c      	ldr	r3, [pc, #176]	; (801c3a4 <_puts_r+0xd0>)
 801c2f2:	429c      	cmp	r4, r3
 801c2f4:	d120      	bne.n	801c338 <_puts_r+0x64>
 801c2f6:	686c      	ldr	r4, [r5, #4]
 801c2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c2fa:	07db      	lsls	r3, r3, #31
 801c2fc:	d405      	bmi.n	801c30a <_puts_r+0x36>
 801c2fe:	89a3      	ldrh	r3, [r4, #12]
 801c300:	0598      	lsls	r0, r3, #22
 801c302:	d402      	bmi.n	801c30a <_puts_r+0x36>
 801c304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c306:	f001 faca 	bl	801d89e <__retarget_lock_acquire_recursive>
 801c30a:	89a3      	ldrh	r3, [r4, #12]
 801c30c:	0719      	lsls	r1, r3, #28
 801c30e:	d51d      	bpl.n	801c34c <_puts_r+0x78>
 801c310:	6923      	ldr	r3, [r4, #16]
 801c312:	b1db      	cbz	r3, 801c34c <_puts_r+0x78>
 801c314:	3e01      	subs	r6, #1
 801c316:	68a3      	ldr	r3, [r4, #8]
 801c318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c31c:	3b01      	subs	r3, #1
 801c31e:	60a3      	str	r3, [r4, #8]
 801c320:	bb39      	cbnz	r1, 801c372 <_puts_r+0x9e>
 801c322:	2b00      	cmp	r3, #0
 801c324:	da38      	bge.n	801c398 <_puts_r+0xc4>
 801c326:	4622      	mov	r2, r4
 801c328:	210a      	movs	r1, #10
 801c32a:	4628      	mov	r0, r5
 801c32c:	f000 f990 	bl	801c650 <__swbuf_r>
 801c330:	3001      	adds	r0, #1
 801c332:	d011      	beq.n	801c358 <_puts_r+0x84>
 801c334:	250a      	movs	r5, #10
 801c336:	e011      	b.n	801c35c <_puts_r+0x88>
 801c338:	4b1b      	ldr	r3, [pc, #108]	; (801c3a8 <_puts_r+0xd4>)
 801c33a:	429c      	cmp	r4, r3
 801c33c:	d101      	bne.n	801c342 <_puts_r+0x6e>
 801c33e:	68ac      	ldr	r4, [r5, #8]
 801c340:	e7da      	b.n	801c2f8 <_puts_r+0x24>
 801c342:	4b1a      	ldr	r3, [pc, #104]	; (801c3ac <_puts_r+0xd8>)
 801c344:	429c      	cmp	r4, r3
 801c346:	bf08      	it	eq
 801c348:	68ec      	ldreq	r4, [r5, #12]
 801c34a:	e7d5      	b.n	801c2f8 <_puts_r+0x24>
 801c34c:	4621      	mov	r1, r4
 801c34e:	4628      	mov	r0, r5
 801c350:	f000 f9d0 	bl	801c6f4 <__swsetup_r>
 801c354:	2800      	cmp	r0, #0
 801c356:	d0dd      	beq.n	801c314 <_puts_r+0x40>
 801c358:	f04f 35ff 	mov.w	r5, #4294967295
 801c35c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c35e:	07da      	lsls	r2, r3, #31
 801c360:	d405      	bmi.n	801c36e <_puts_r+0x9a>
 801c362:	89a3      	ldrh	r3, [r4, #12]
 801c364:	059b      	lsls	r3, r3, #22
 801c366:	d402      	bmi.n	801c36e <_puts_r+0x9a>
 801c368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c36a:	f001 fa99 	bl	801d8a0 <__retarget_lock_release_recursive>
 801c36e:	4628      	mov	r0, r5
 801c370:	bd70      	pop	{r4, r5, r6, pc}
 801c372:	2b00      	cmp	r3, #0
 801c374:	da04      	bge.n	801c380 <_puts_r+0xac>
 801c376:	69a2      	ldr	r2, [r4, #24]
 801c378:	429a      	cmp	r2, r3
 801c37a:	dc06      	bgt.n	801c38a <_puts_r+0xb6>
 801c37c:	290a      	cmp	r1, #10
 801c37e:	d004      	beq.n	801c38a <_puts_r+0xb6>
 801c380:	6823      	ldr	r3, [r4, #0]
 801c382:	1c5a      	adds	r2, r3, #1
 801c384:	6022      	str	r2, [r4, #0]
 801c386:	7019      	strb	r1, [r3, #0]
 801c388:	e7c5      	b.n	801c316 <_puts_r+0x42>
 801c38a:	4622      	mov	r2, r4
 801c38c:	4628      	mov	r0, r5
 801c38e:	f000 f95f 	bl	801c650 <__swbuf_r>
 801c392:	3001      	adds	r0, #1
 801c394:	d1bf      	bne.n	801c316 <_puts_r+0x42>
 801c396:	e7df      	b.n	801c358 <_puts_r+0x84>
 801c398:	6823      	ldr	r3, [r4, #0]
 801c39a:	250a      	movs	r5, #10
 801c39c:	1c5a      	adds	r2, r3, #1
 801c39e:	6022      	str	r2, [r4, #0]
 801c3a0:	701d      	strb	r5, [r3, #0]
 801c3a2:	e7db      	b.n	801c35c <_puts_r+0x88>
 801c3a4:	080205f8 	.word	0x080205f8
 801c3a8:	08020618 	.word	0x08020618
 801c3ac:	080205d8 	.word	0x080205d8

0801c3b0 <puts>:
 801c3b0:	4b02      	ldr	r3, [pc, #8]	; (801c3bc <puts+0xc>)
 801c3b2:	4601      	mov	r1, r0
 801c3b4:	6818      	ldr	r0, [r3, #0]
 801c3b6:	f7ff bf8d 	b.w	801c2d4 <_puts_r>
 801c3ba:	bf00      	nop
 801c3bc:	200001b0 	.word	0x200001b0

0801c3c0 <_sbrk_r>:
 801c3c0:	b538      	push	{r3, r4, r5, lr}
 801c3c2:	4d06      	ldr	r5, [pc, #24]	; (801c3dc <_sbrk_r+0x1c>)
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	4604      	mov	r4, r0
 801c3c8:	4608      	mov	r0, r1
 801c3ca:	602b      	str	r3, [r5, #0]
 801c3cc:	f7f2 fd46 	bl	800ee5c <_sbrk>
 801c3d0:	1c43      	adds	r3, r0, #1
 801c3d2:	d102      	bne.n	801c3da <_sbrk_r+0x1a>
 801c3d4:	682b      	ldr	r3, [r5, #0]
 801c3d6:	b103      	cbz	r3, 801c3da <_sbrk_r+0x1a>
 801c3d8:	6023      	str	r3, [r4, #0]
 801c3da:	bd38      	pop	{r3, r4, r5, pc}
 801c3dc:	2000ba18 	.word	0x2000ba18

0801c3e0 <siprintf>:
 801c3e0:	b40e      	push	{r1, r2, r3}
 801c3e2:	b500      	push	{lr}
 801c3e4:	b09c      	sub	sp, #112	; 0x70
 801c3e6:	ab1d      	add	r3, sp, #116	; 0x74
 801c3e8:	9002      	str	r0, [sp, #8]
 801c3ea:	9006      	str	r0, [sp, #24]
 801c3ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c3f0:	4809      	ldr	r0, [pc, #36]	; (801c418 <siprintf+0x38>)
 801c3f2:	9107      	str	r1, [sp, #28]
 801c3f4:	9104      	str	r1, [sp, #16]
 801c3f6:	4909      	ldr	r1, [pc, #36]	; (801c41c <siprintf+0x3c>)
 801c3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3fc:	9105      	str	r1, [sp, #20]
 801c3fe:	6800      	ldr	r0, [r0, #0]
 801c400:	9301      	str	r3, [sp, #4]
 801c402:	a902      	add	r1, sp, #8
 801c404:	f001 fea6 	bl	801e154 <_svfiprintf_r>
 801c408:	9b02      	ldr	r3, [sp, #8]
 801c40a:	2200      	movs	r2, #0
 801c40c:	701a      	strb	r2, [r3, #0]
 801c40e:	b01c      	add	sp, #112	; 0x70
 801c410:	f85d eb04 	ldr.w	lr, [sp], #4
 801c414:	b003      	add	sp, #12
 801c416:	4770      	bx	lr
 801c418:	200001b0 	.word	0x200001b0
 801c41c:	ffff0208 	.word	0xffff0208

0801c420 <strcat>:
 801c420:	b510      	push	{r4, lr}
 801c422:	4602      	mov	r2, r0
 801c424:	7814      	ldrb	r4, [r2, #0]
 801c426:	4613      	mov	r3, r2
 801c428:	3201      	adds	r2, #1
 801c42a:	2c00      	cmp	r4, #0
 801c42c:	d1fa      	bne.n	801c424 <strcat+0x4>
 801c42e:	3b01      	subs	r3, #1
 801c430:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c434:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c438:	2a00      	cmp	r2, #0
 801c43a:	d1f9      	bne.n	801c430 <strcat+0x10>
 801c43c:	bd10      	pop	{r4, pc}

0801c43e <strcpy>:
 801c43e:	4603      	mov	r3, r0
 801c440:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c444:	f803 2b01 	strb.w	r2, [r3], #1
 801c448:	2a00      	cmp	r2, #0
 801c44a:	d1f9      	bne.n	801c440 <strcpy+0x2>
 801c44c:	4770      	bx	lr

0801c44e <strstr>:
 801c44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c450:	780c      	ldrb	r4, [r1, #0]
 801c452:	b164      	cbz	r4, 801c46e <strstr+0x20>
 801c454:	4603      	mov	r3, r0
 801c456:	781a      	ldrb	r2, [r3, #0]
 801c458:	4618      	mov	r0, r3
 801c45a:	1c5e      	adds	r6, r3, #1
 801c45c:	b90a      	cbnz	r2, 801c462 <strstr+0x14>
 801c45e:	4610      	mov	r0, r2
 801c460:	e005      	b.n	801c46e <strstr+0x20>
 801c462:	4294      	cmp	r4, r2
 801c464:	d108      	bne.n	801c478 <strstr+0x2a>
 801c466:	460d      	mov	r5, r1
 801c468:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801c46c:	b902      	cbnz	r2, 801c470 <strstr+0x22>
 801c46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c470:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801c474:	4297      	cmp	r7, r2
 801c476:	d0f7      	beq.n	801c468 <strstr+0x1a>
 801c478:	4633      	mov	r3, r6
 801c47a:	e7ec      	b.n	801c456 <strstr+0x8>

0801c47c <strtok>:
 801c47c:	4b16      	ldr	r3, [pc, #88]	; (801c4d8 <strtok+0x5c>)
 801c47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c480:	681e      	ldr	r6, [r3, #0]
 801c482:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801c484:	4605      	mov	r5, r0
 801c486:	b9fc      	cbnz	r4, 801c4c8 <strtok+0x4c>
 801c488:	2050      	movs	r0, #80	; 0x50
 801c48a:	9101      	str	r1, [sp, #4]
 801c48c:	f7ff f9d8 	bl	801b840 <malloc>
 801c490:	9901      	ldr	r1, [sp, #4]
 801c492:	65b0      	str	r0, [r6, #88]	; 0x58
 801c494:	4602      	mov	r2, r0
 801c496:	b920      	cbnz	r0, 801c4a2 <strtok+0x26>
 801c498:	4b10      	ldr	r3, [pc, #64]	; (801c4dc <strtok+0x60>)
 801c49a:	4811      	ldr	r0, [pc, #68]	; (801c4e0 <strtok+0x64>)
 801c49c:	2157      	movs	r1, #87	; 0x57
 801c49e:	f000 f997 	bl	801c7d0 <__assert_func>
 801c4a2:	e9c0 4400 	strd	r4, r4, [r0]
 801c4a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c4aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c4ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c4b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c4b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c4ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c4be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c4c2:	6184      	str	r4, [r0, #24]
 801c4c4:	7704      	strb	r4, [r0, #28]
 801c4c6:	6244      	str	r4, [r0, #36]	; 0x24
 801c4c8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801c4ca:	2301      	movs	r3, #1
 801c4cc:	4628      	mov	r0, r5
 801c4ce:	b002      	add	sp, #8
 801c4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4d4:	f000 b806 	b.w	801c4e4 <__strtok_r>
 801c4d8:	200001b0 	.word	0x200001b0
 801c4dc:	080203a4 	.word	0x080203a4
 801c4e0:	080203bb 	.word	0x080203bb

0801c4e4 <__strtok_r>:
 801c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4e6:	b908      	cbnz	r0, 801c4ec <__strtok_r+0x8>
 801c4e8:	6810      	ldr	r0, [r2, #0]
 801c4ea:	b188      	cbz	r0, 801c510 <__strtok_r+0x2c>
 801c4ec:	4604      	mov	r4, r0
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c4f4:	460f      	mov	r7, r1
 801c4f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c4fa:	b91e      	cbnz	r6, 801c504 <__strtok_r+0x20>
 801c4fc:	b965      	cbnz	r5, 801c518 <__strtok_r+0x34>
 801c4fe:	6015      	str	r5, [r2, #0]
 801c500:	4628      	mov	r0, r5
 801c502:	e005      	b.n	801c510 <__strtok_r+0x2c>
 801c504:	42b5      	cmp	r5, r6
 801c506:	d1f6      	bne.n	801c4f6 <__strtok_r+0x12>
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d1f0      	bne.n	801c4ee <__strtok_r+0xa>
 801c50c:	6014      	str	r4, [r2, #0]
 801c50e:	7003      	strb	r3, [r0, #0]
 801c510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c512:	461c      	mov	r4, r3
 801c514:	e00c      	b.n	801c530 <__strtok_r+0x4c>
 801c516:	b915      	cbnz	r5, 801c51e <__strtok_r+0x3a>
 801c518:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c51c:	460e      	mov	r6, r1
 801c51e:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c522:	42ab      	cmp	r3, r5
 801c524:	d1f7      	bne.n	801c516 <__strtok_r+0x32>
 801c526:	2b00      	cmp	r3, #0
 801c528:	d0f3      	beq.n	801c512 <__strtok_r+0x2e>
 801c52a:	2300      	movs	r3, #0
 801c52c:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c530:	6014      	str	r4, [r2, #0]
 801c532:	e7ed      	b.n	801c510 <__strtok_r+0x2c>

0801c534 <_strtol_l.isra.0>:
 801c534:	2b01      	cmp	r3, #1
 801c536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c53a:	d001      	beq.n	801c540 <_strtol_l.isra.0+0xc>
 801c53c:	2b24      	cmp	r3, #36	; 0x24
 801c53e:	d906      	bls.n	801c54e <_strtol_l.isra.0+0x1a>
 801c540:	f7ff f954 	bl	801b7ec <__errno>
 801c544:	2316      	movs	r3, #22
 801c546:	6003      	str	r3, [r0, #0]
 801c548:	2000      	movs	r0, #0
 801c54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c54e:	4f3a      	ldr	r7, [pc, #232]	; (801c638 <_strtol_l.isra.0+0x104>)
 801c550:	468e      	mov	lr, r1
 801c552:	4676      	mov	r6, lr
 801c554:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c558:	5de5      	ldrb	r5, [r4, r7]
 801c55a:	f015 0508 	ands.w	r5, r5, #8
 801c55e:	d1f8      	bne.n	801c552 <_strtol_l.isra.0+0x1e>
 801c560:	2c2d      	cmp	r4, #45	; 0x2d
 801c562:	d134      	bne.n	801c5ce <_strtol_l.isra.0+0x9a>
 801c564:	f89e 4000 	ldrb.w	r4, [lr]
 801c568:	f04f 0801 	mov.w	r8, #1
 801c56c:	f106 0e02 	add.w	lr, r6, #2
 801c570:	2b00      	cmp	r3, #0
 801c572:	d05c      	beq.n	801c62e <_strtol_l.isra.0+0xfa>
 801c574:	2b10      	cmp	r3, #16
 801c576:	d10c      	bne.n	801c592 <_strtol_l.isra.0+0x5e>
 801c578:	2c30      	cmp	r4, #48	; 0x30
 801c57a:	d10a      	bne.n	801c592 <_strtol_l.isra.0+0x5e>
 801c57c:	f89e 4000 	ldrb.w	r4, [lr]
 801c580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c584:	2c58      	cmp	r4, #88	; 0x58
 801c586:	d14d      	bne.n	801c624 <_strtol_l.isra.0+0xf0>
 801c588:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c58c:	2310      	movs	r3, #16
 801c58e:	f10e 0e02 	add.w	lr, lr, #2
 801c592:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c596:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c59a:	2600      	movs	r6, #0
 801c59c:	fbbc f9f3 	udiv	r9, ip, r3
 801c5a0:	4635      	mov	r5, r6
 801c5a2:	fb03 ca19 	mls	sl, r3, r9, ip
 801c5a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c5aa:	2f09      	cmp	r7, #9
 801c5ac:	d818      	bhi.n	801c5e0 <_strtol_l.isra.0+0xac>
 801c5ae:	463c      	mov	r4, r7
 801c5b0:	42a3      	cmp	r3, r4
 801c5b2:	dd24      	ble.n	801c5fe <_strtol_l.isra.0+0xca>
 801c5b4:	2e00      	cmp	r6, #0
 801c5b6:	db1f      	blt.n	801c5f8 <_strtol_l.isra.0+0xc4>
 801c5b8:	45a9      	cmp	r9, r5
 801c5ba:	d31d      	bcc.n	801c5f8 <_strtol_l.isra.0+0xc4>
 801c5bc:	d101      	bne.n	801c5c2 <_strtol_l.isra.0+0x8e>
 801c5be:	45a2      	cmp	sl, r4
 801c5c0:	db1a      	blt.n	801c5f8 <_strtol_l.isra.0+0xc4>
 801c5c2:	fb05 4503 	mla	r5, r5, r3, r4
 801c5c6:	2601      	movs	r6, #1
 801c5c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c5cc:	e7eb      	b.n	801c5a6 <_strtol_l.isra.0+0x72>
 801c5ce:	2c2b      	cmp	r4, #43	; 0x2b
 801c5d0:	bf08      	it	eq
 801c5d2:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c5d6:	46a8      	mov	r8, r5
 801c5d8:	bf08      	it	eq
 801c5da:	f106 0e02 	addeq.w	lr, r6, #2
 801c5de:	e7c7      	b.n	801c570 <_strtol_l.isra.0+0x3c>
 801c5e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c5e4:	2f19      	cmp	r7, #25
 801c5e6:	d801      	bhi.n	801c5ec <_strtol_l.isra.0+0xb8>
 801c5e8:	3c37      	subs	r4, #55	; 0x37
 801c5ea:	e7e1      	b.n	801c5b0 <_strtol_l.isra.0+0x7c>
 801c5ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c5f0:	2f19      	cmp	r7, #25
 801c5f2:	d804      	bhi.n	801c5fe <_strtol_l.isra.0+0xca>
 801c5f4:	3c57      	subs	r4, #87	; 0x57
 801c5f6:	e7db      	b.n	801c5b0 <_strtol_l.isra.0+0x7c>
 801c5f8:	f04f 36ff 	mov.w	r6, #4294967295
 801c5fc:	e7e4      	b.n	801c5c8 <_strtol_l.isra.0+0x94>
 801c5fe:	2e00      	cmp	r6, #0
 801c600:	da05      	bge.n	801c60e <_strtol_l.isra.0+0xda>
 801c602:	2322      	movs	r3, #34	; 0x22
 801c604:	6003      	str	r3, [r0, #0]
 801c606:	4665      	mov	r5, ip
 801c608:	b942      	cbnz	r2, 801c61c <_strtol_l.isra.0+0xe8>
 801c60a:	4628      	mov	r0, r5
 801c60c:	e79d      	b.n	801c54a <_strtol_l.isra.0+0x16>
 801c60e:	f1b8 0f00 	cmp.w	r8, #0
 801c612:	d000      	beq.n	801c616 <_strtol_l.isra.0+0xe2>
 801c614:	426d      	negs	r5, r5
 801c616:	2a00      	cmp	r2, #0
 801c618:	d0f7      	beq.n	801c60a <_strtol_l.isra.0+0xd6>
 801c61a:	b10e      	cbz	r6, 801c620 <_strtol_l.isra.0+0xec>
 801c61c:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c620:	6011      	str	r1, [r2, #0]
 801c622:	e7f2      	b.n	801c60a <_strtol_l.isra.0+0xd6>
 801c624:	2430      	movs	r4, #48	; 0x30
 801c626:	2b00      	cmp	r3, #0
 801c628:	d1b3      	bne.n	801c592 <_strtol_l.isra.0+0x5e>
 801c62a:	2308      	movs	r3, #8
 801c62c:	e7b1      	b.n	801c592 <_strtol_l.isra.0+0x5e>
 801c62e:	2c30      	cmp	r4, #48	; 0x30
 801c630:	d0a4      	beq.n	801c57c <_strtol_l.isra.0+0x48>
 801c632:	230a      	movs	r3, #10
 801c634:	e7ad      	b.n	801c592 <_strtol_l.isra.0+0x5e>
 801c636:	bf00      	nop
 801c638:	08020459 	.word	0x08020459

0801c63c <strtol>:
 801c63c:	4613      	mov	r3, r2
 801c63e:	460a      	mov	r2, r1
 801c640:	4601      	mov	r1, r0
 801c642:	4802      	ldr	r0, [pc, #8]	; (801c64c <strtol+0x10>)
 801c644:	6800      	ldr	r0, [r0, #0]
 801c646:	f7ff bf75 	b.w	801c534 <_strtol_l.isra.0>
 801c64a:	bf00      	nop
 801c64c:	200001b0 	.word	0x200001b0

0801c650 <__swbuf_r>:
 801c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c652:	460e      	mov	r6, r1
 801c654:	4614      	mov	r4, r2
 801c656:	4605      	mov	r5, r0
 801c658:	b118      	cbz	r0, 801c662 <__swbuf_r+0x12>
 801c65a:	6983      	ldr	r3, [r0, #24]
 801c65c:	b90b      	cbnz	r3, 801c662 <__swbuf_r+0x12>
 801c65e:	f001 f869 	bl	801d734 <__sinit>
 801c662:	4b21      	ldr	r3, [pc, #132]	; (801c6e8 <__swbuf_r+0x98>)
 801c664:	429c      	cmp	r4, r3
 801c666:	d12b      	bne.n	801c6c0 <__swbuf_r+0x70>
 801c668:	686c      	ldr	r4, [r5, #4]
 801c66a:	69a3      	ldr	r3, [r4, #24]
 801c66c:	60a3      	str	r3, [r4, #8]
 801c66e:	89a3      	ldrh	r3, [r4, #12]
 801c670:	071a      	lsls	r2, r3, #28
 801c672:	d52f      	bpl.n	801c6d4 <__swbuf_r+0x84>
 801c674:	6923      	ldr	r3, [r4, #16]
 801c676:	b36b      	cbz	r3, 801c6d4 <__swbuf_r+0x84>
 801c678:	6923      	ldr	r3, [r4, #16]
 801c67a:	6820      	ldr	r0, [r4, #0]
 801c67c:	1ac0      	subs	r0, r0, r3
 801c67e:	6963      	ldr	r3, [r4, #20]
 801c680:	b2f6      	uxtb	r6, r6
 801c682:	4283      	cmp	r3, r0
 801c684:	4637      	mov	r7, r6
 801c686:	dc04      	bgt.n	801c692 <__swbuf_r+0x42>
 801c688:	4621      	mov	r1, r4
 801c68a:	4628      	mov	r0, r5
 801c68c:	f000 ffbe 	bl	801d60c <_fflush_r>
 801c690:	bb30      	cbnz	r0, 801c6e0 <__swbuf_r+0x90>
 801c692:	68a3      	ldr	r3, [r4, #8]
 801c694:	3b01      	subs	r3, #1
 801c696:	60a3      	str	r3, [r4, #8]
 801c698:	6823      	ldr	r3, [r4, #0]
 801c69a:	1c5a      	adds	r2, r3, #1
 801c69c:	6022      	str	r2, [r4, #0]
 801c69e:	701e      	strb	r6, [r3, #0]
 801c6a0:	6963      	ldr	r3, [r4, #20]
 801c6a2:	3001      	adds	r0, #1
 801c6a4:	4283      	cmp	r3, r0
 801c6a6:	d004      	beq.n	801c6b2 <__swbuf_r+0x62>
 801c6a8:	89a3      	ldrh	r3, [r4, #12]
 801c6aa:	07db      	lsls	r3, r3, #31
 801c6ac:	d506      	bpl.n	801c6bc <__swbuf_r+0x6c>
 801c6ae:	2e0a      	cmp	r6, #10
 801c6b0:	d104      	bne.n	801c6bc <__swbuf_r+0x6c>
 801c6b2:	4621      	mov	r1, r4
 801c6b4:	4628      	mov	r0, r5
 801c6b6:	f000 ffa9 	bl	801d60c <_fflush_r>
 801c6ba:	b988      	cbnz	r0, 801c6e0 <__swbuf_r+0x90>
 801c6bc:	4638      	mov	r0, r7
 801c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6c0:	4b0a      	ldr	r3, [pc, #40]	; (801c6ec <__swbuf_r+0x9c>)
 801c6c2:	429c      	cmp	r4, r3
 801c6c4:	d101      	bne.n	801c6ca <__swbuf_r+0x7a>
 801c6c6:	68ac      	ldr	r4, [r5, #8]
 801c6c8:	e7cf      	b.n	801c66a <__swbuf_r+0x1a>
 801c6ca:	4b09      	ldr	r3, [pc, #36]	; (801c6f0 <__swbuf_r+0xa0>)
 801c6cc:	429c      	cmp	r4, r3
 801c6ce:	bf08      	it	eq
 801c6d0:	68ec      	ldreq	r4, [r5, #12]
 801c6d2:	e7ca      	b.n	801c66a <__swbuf_r+0x1a>
 801c6d4:	4621      	mov	r1, r4
 801c6d6:	4628      	mov	r0, r5
 801c6d8:	f000 f80c 	bl	801c6f4 <__swsetup_r>
 801c6dc:	2800      	cmp	r0, #0
 801c6de:	d0cb      	beq.n	801c678 <__swbuf_r+0x28>
 801c6e0:	f04f 37ff 	mov.w	r7, #4294967295
 801c6e4:	e7ea      	b.n	801c6bc <__swbuf_r+0x6c>
 801c6e6:	bf00      	nop
 801c6e8:	080205f8 	.word	0x080205f8
 801c6ec:	08020618 	.word	0x08020618
 801c6f0:	080205d8 	.word	0x080205d8

0801c6f4 <__swsetup_r>:
 801c6f4:	4b32      	ldr	r3, [pc, #200]	; (801c7c0 <__swsetup_r+0xcc>)
 801c6f6:	b570      	push	{r4, r5, r6, lr}
 801c6f8:	681d      	ldr	r5, [r3, #0]
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	460c      	mov	r4, r1
 801c6fe:	b125      	cbz	r5, 801c70a <__swsetup_r+0x16>
 801c700:	69ab      	ldr	r3, [r5, #24]
 801c702:	b913      	cbnz	r3, 801c70a <__swsetup_r+0x16>
 801c704:	4628      	mov	r0, r5
 801c706:	f001 f815 	bl	801d734 <__sinit>
 801c70a:	4b2e      	ldr	r3, [pc, #184]	; (801c7c4 <__swsetup_r+0xd0>)
 801c70c:	429c      	cmp	r4, r3
 801c70e:	d10f      	bne.n	801c730 <__swsetup_r+0x3c>
 801c710:	686c      	ldr	r4, [r5, #4]
 801c712:	89a3      	ldrh	r3, [r4, #12]
 801c714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c718:	0719      	lsls	r1, r3, #28
 801c71a:	d42c      	bmi.n	801c776 <__swsetup_r+0x82>
 801c71c:	06dd      	lsls	r5, r3, #27
 801c71e:	d411      	bmi.n	801c744 <__swsetup_r+0x50>
 801c720:	2309      	movs	r3, #9
 801c722:	6033      	str	r3, [r6, #0]
 801c724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c728:	81a3      	strh	r3, [r4, #12]
 801c72a:	f04f 30ff 	mov.w	r0, #4294967295
 801c72e:	e03e      	b.n	801c7ae <__swsetup_r+0xba>
 801c730:	4b25      	ldr	r3, [pc, #148]	; (801c7c8 <__swsetup_r+0xd4>)
 801c732:	429c      	cmp	r4, r3
 801c734:	d101      	bne.n	801c73a <__swsetup_r+0x46>
 801c736:	68ac      	ldr	r4, [r5, #8]
 801c738:	e7eb      	b.n	801c712 <__swsetup_r+0x1e>
 801c73a:	4b24      	ldr	r3, [pc, #144]	; (801c7cc <__swsetup_r+0xd8>)
 801c73c:	429c      	cmp	r4, r3
 801c73e:	bf08      	it	eq
 801c740:	68ec      	ldreq	r4, [r5, #12]
 801c742:	e7e6      	b.n	801c712 <__swsetup_r+0x1e>
 801c744:	0758      	lsls	r0, r3, #29
 801c746:	d512      	bpl.n	801c76e <__swsetup_r+0x7a>
 801c748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c74a:	b141      	cbz	r1, 801c75e <__swsetup_r+0x6a>
 801c74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c750:	4299      	cmp	r1, r3
 801c752:	d002      	beq.n	801c75a <__swsetup_r+0x66>
 801c754:	4630      	mov	r0, r6
 801c756:	f7ff f891 	bl	801b87c <_free_r>
 801c75a:	2300      	movs	r3, #0
 801c75c:	6363      	str	r3, [r4, #52]	; 0x34
 801c75e:	89a3      	ldrh	r3, [r4, #12]
 801c760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c764:	81a3      	strh	r3, [r4, #12]
 801c766:	2300      	movs	r3, #0
 801c768:	6063      	str	r3, [r4, #4]
 801c76a:	6923      	ldr	r3, [r4, #16]
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	89a3      	ldrh	r3, [r4, #12]
 801c770:	f043 0308 	orr.w	r3, r3, #8
 801c774:	81a3      	strh	r3, [r4, #12]
 801c776:	6923      	ldr	r3, [r4, #16]
 801c778:	b94b      	cbnz	r3, 801c78e <__swsetup_r+0x9a>
 801c77a:	89a3      	ldrh	r3, [r4, #12]
 801c77c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c784:	d003      	beq.n	801c78e <__swsetup_r+0x9a>
 801c786:	4621      	mov	r1, r4
 801c788:	4630      	mov	r0, r6
 801c78a:	f001 f8af 	bl	801d8ec <__smakebuf_r>
 801c78e:	89a0      	ldrh	r0, [r4, #12]
 801c790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c794:	f010 0301 	ands.w	r3, r0, #1
 801c798:	d00a      	beq.n	801c7b0 <__swsetup_r+0xbc>
 801c79a:	2300      	movs	r3, #0
 801c79c:	60a3      	str	r3, [r4, #8]
 801c79e:	6963      	ldr	r3, [r4, #20]
 801c7a0:	425b      	negs	r3, r3
 801c7a2:	61a3      	str	r3, [r4, #24]
 801c7a4:	6923      	ldr	r3, [r4, #16]
 801c7a6:	b943      	cbnz	r3, 801c7ba <__swsetup_r+0xc6>
 801c7a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c7ac:	d1ba      	bne.n	801c724 <__swsetup_r+0x30>
 801c7ae:	bd70      	pop	{r4, r5, r6, pc}
 801c7b0:	0781      	lsls	r1, r0, #30
 801c7b2:	bf58      	it	pl
 801c7b4:	6963      	ldrpl	r3, [r4, #20]
 801c7b6:	60a3      	str	r3, [r4, #8]
 801c7b8:	e7f4      	b.n	801c7a4 <__swsetup_r+0xb0>
 801c7ba:	2000      	movs	r0, #0
 801c7bc:	e7f7      	b.n	801c7ae <__swsetup_r+0xba>
 801c7be:	bf00      	nop
 801c7c0:	200001b0 	.word	0x200001b0
 801c7c4:	080205f8 	.word	0x080205f8
 801c7c8:	08020618 	.word	0x08020618
 801c7cc:	080205d8 	.word	0x080205d8

0801c7d0 <__assert_func>:
 801c7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c7d2:	4614      	mov	r4, r2
 801c7d4:	461a      	mov	r2, r3
 801c7d6:	4b09      	ldr	r3, [pc, #36]	; (801c7fc <__assert_func+0x2c>)
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	4605      	mov	r5, r0
 801c7dc:	68d8      	ldr	r0, [r3, #12]
 801c7de:	b14c      	cbz	r4, 801c7f4 <__assert_func+0x24>
 801c7e0:	4b07      	ldr	r3, [pc, #28]	; (801c800 <__assert_func+0x30>)
 801c7e2:	9100      	str	r1, [sp, #0]
 801c7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c7e8:	4906      	ldr	r1, [pc, #24]	; (801c804 <__assert_func+0x34>)
 801c7ea:	462b      	mov	r3, r5
 801c7ec:	f001 f820 	bl	801d830 <fiprintf>
 801c7f0:	f001 ff60 	bl	801e6b4 <abort>
 801c7f4:	4b04      	ldr	r3, [pc, #16]	; (801c808 <__assert_func+0x38>)
 801c7f6:	461c      	mov	r4, r3
 801c7f8:	e7f3      	b.n	801c7e2 <__assert_func+0x12>
 801c7fa:	bf00      	nop
 801c7fc:	200001b0 	.word	0x200001b0
 801c800:	0802041c 	.word	0x0802041c
 801c804:	08020429 	.word	0x08020429
 801c808:	08020457 	.word	0x08020457

0801c80c <quorem>:
 801c80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c810:	6903      	ldr	r3, [r0, #16]
 801c812:	690c      	ldr	r4, [r1, #16]
 801c814:	42a3      	cmp	r3, r4
 801c816:	4607      	mov	r7, r0
 801c818:	f2c0 8081 	blt.w	801c91e <quorem+0x112>
 801c81c:	3c01      	subs	r4, #1
 801c81e:	f101 0814 	add.w	r8, r1, #20
 801c822:	f100 0514 	add.w	r5, r0, #20
 801c826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c82a:	9301      	str	r3, [sp, #4]
 801c82c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c834:	3301      	adds	r3, #1
 801c836:	429a      	cmp	r2, r3
 801c838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c840:	fbb2 f6f3 	udiv	r6, r2, r3
 801c844:	d331      	bcc.n	801c8aa <quorem+0x9e>
 801c846:	f04f 0e00 	mov.w	lr, #0
 801c84a:	4640      	mov	r0, r8
 801c84c:	46ac      	mov	ip, r5
 801c84e:	46f2      	mov	sl, lr
 801c850:	f850 2b04 	ldr.w	r2, [r0], #4
 801c854:	b293      	uxth	r3, r2
 801c856:	fb06 e303 	mla	r3, r6, r3, lr
 801c85a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c85e:	b29b      	uxth	r3, r3
 801c860:	ebaa 0303 	sub.w	r3, sl, r3
 801c864:	0c12      	lsrs	r2, r2, #16
 801c866:	f8dc a000 	ldr.w	sl, [ip]
 801c86a:	fb06 e202 	mla	r2, r6, r2, lr
 801c86e:	fa13 f38a 	uxtah	r3, r3, sl
 801c872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c876:	fa1f fa82 	uxth.w	sl, r2
 801c87a:	f8dc 2000 	ldr.w	r2, [ip]
 801c87e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c886:	b29b      	uxth	r3, r3
 801c888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c88c:	4581      	cmp	r9, r0
 801c88e:	f84c 3b04 	str.w	r3, [ip], #4
 801c892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c896:	d2db      	bcs.n	801c850 <quorem+0x44>
 801c898:	f855 300b 	ldr.w	r3, [r5, fp]
 801c89c:	b92b      	cbnz	r3, 801c8aa <quorem+0x9e>
 801c89e:	9b01      	ldr	r3, [sp, #4]
 801c8a0:	3b04      	subs	r3, #4
 801c8a2:	429d      	cmp	r5, r3
 801c8a4:	461a      	mov	r2, r3
 801c8a6:	d32e      	bcc.n	801c906 <quorem+0xfa>
 801c8a8:	613c      	str	r4, [r7, #16]
 801c8aa:	4638      	mov	r0, r7
 801c8ac:	f001 fae8 	bl	801de80 <__mcmp>
 801c8b0:	2800      	cmp	r0, #0
 801c8b2:	db24      	blt.n	801c8fe <quorem+0xf2>
 801c8b4:	3601      	adds	r6, #1
 801c8b6:	4628      	mov	r0, r5
 801c8b8:	f04f 0c00 	mov.w	ip, #0
 801c8bc:	f858 2b04 	ldr.w	r2, [r8], #4
 801c8c0:	f8d0 e000 	ldr.w	lr, [r0]
 801c8c4:	b293      	uxth	r3, r2
 801c8c6:	ebac 0303 	sub.w	r3, ip, r3
 801c8ca:	0c12      	lsrs	r2, r2, #16
 801c8cc:	fa13 f38e 	uxtah	r3, r3, lr
 801c8d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8d8:	b29b      	uxth	r3, r3
 801c8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8de:	45c1      	cmp	r9, r8
 801c8e0:	f840 3b04 	str.w	r3, [r0], #4
 801c8e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c8e8:	d2e8      	bcs.n	801c8bc <quorem+0xb0>
 801c8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c8f2:	b922      	cbnz	r2, 801c8fe <quorem+0xf2>
 801c8f4:	3b04      	subs	r3, #4
 801c8f6:	429d      	cmp	r5, r3
 801c8f8:	461a      	mov	r2, r3
 801c8fa:	d30a      	bcc.n	801c912 <quorem+0x106>
 801c8fc:	613c      	str	r4, [r7, #16]
 801c8fe:	4630      	mov	r0, r6
 801c900:	b003      	add	sp, #12
 801c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c906:	6812      	ldr	r2, [r2, #0]
 801c908:	3b04      	subs	r3, #4
 801c90a:	2a00      	cmp	r2, #0
 801c90c:	d1cc      	bne.n	801c8a8 <quorem+0x9c>
 801c90e:	3c01      	subs	r4, #1
 801c910:	e7c7      	b.n	801c8a2 <quorem+0x96>
 801c912:	6812      	ldr	r2, [r2, #0]
 801c914:	3b04      	subs	r3, #4
 801c916:	2a00      	cmp	r2, #0
 801c918:	d1f0      	bne.n	801c8fc <quorem+0xf0>
 801c91a:	3c01      	subs	r4, #1
 801c91c:	e7eb      	b.n	801c8f6 <quorem+0xea>
 801c91e:	2000      	movs	r0, #0
 801c920:	e7ee      	b.n	801c900 <quorem+0xf4>
 801c922:	0000      	movs	r0, r0
 801c924:	0000      	movs	r0, r0
	...

0801c928 <_dtoa_r>:
 801c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c92c:	ed2d 8b02 	vpush	{d8}
 801c930:	ec57 6b10 	vmov	r6, r7, d0
 801c934:	b095      	sub	sp, #84	; 0x54
 801c936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c93c:	9105      	str	r1, [sp, #20]
 801c93e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c942:	4604      	mov	r4, r0
 801c944:	9209      	str	r2, [sp, #36]	; 0x24
 801c946:	930f      	str	r3, [sp, #60]	; 0x3c
 801c948:	b975      	cbnz	r5, 801c968 <_dtoa_r+0x40>
 801c94a:	2010      	movs	r0, #16
 801c94c:	f7fe ff78 	bl	801b840 <malloc>
 801c950:	4602      	mov	r2, r0
 801c952:	6260      	str	r0, [r4, #36]	; 0x24
 801c954:	b920      	cbnz	r0, 801c960 <_dtoa_r+0x38>
 801c956:	4bb2      	ldr	r3, [pc, #712]	; (801cc20 <_dtoa_r+0x2f8>)
 801c958:	21ea      	movs	r1, #234	; 0xea
 801c95a:	48b2      	ldr	r0, [pc, #712]	; (801cc24 <_dtoa_r+0x2fc>)
 801c95c:	f7ff ff38 	bl	801c7d0 <__assert_func>
 801c960:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c964:	6005      	str	r5, [r0, #0]
 801c966:	60c5      	str	r5, [r0, #12]
 801c968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c96a:	6819      	ldr	r1, [r3, #0]
 801c96c:	b151      	cbz	r1, 801c984 <_dtoa_r+0x5c>
 801c96e:	685a      	ldr	r2, [r3, #4]
 801c970:	604a      	str	r2, [r1, #4]
 801c972:	2301      	movs	r3, #1
 801c974:	4093      	lsls	r3, r2
 801c976:	608b      	str	r3, [r1, #8]
 801c978:	4620      	mov	r0, r4
 801c97a:	f001 f843 	bl	801da04 <_Bfree>
 801c97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c980:	2200      	movs	r2, #0
 801c982:	601a      	str	r2, [r3, #0]
 801c984:	1e3b      	subs	r3, r7, #0
 801c986:	bfb9      	ittee	lt
 801c988:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c98c:	9303      	strlt	r3, [sp, #12]
 801c98e:	2300      	movge	r3, #0
 801c990:	f8c8 3000 	strge.w	r3, [r8]
 801c994:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c998:	4ba3      	ldr	r3, [pc, #652]	; (801cc28 <_dtoa_r+0x300>)
 801c99a:	bfbc      	itt	lt
 801c99c:	2201      	movlt	r2, #1
 801c99e:	f8c8 2000 	strlt.w	r2, [r8]
 801c9a2:	ea33 0309 	bics.w	r3, r3, r9
 801c9a6:	d11b      	bne.n	801c9e0 <_dtoa_r+0xb8>
 801c9a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c9aa:	f242 730f 	movw	r3, #9999	; 0x270f
 801c9ae:	6013      	str	r3, [r2, #0]
 801c9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9b4:	4333      	orrs	r3, r6
 801c9b6:	f000 857a 	beq.w	801d4ae <_dtoa_r+0xb86>
 801c9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c9bc:	b963      	cbnz	r3, 801c9d8 <_dtoa_r+0xb0>
 801c9be:	4b9b      	ldr	r3, [pc, #620]	; (801cc2c <_dtoa_r+0x304>)
 801c9c0:	e024      	b.n	801ca0c <_dtoa_r+0xe4>
 801c9c2:	4b9b      	ldr	r3, [pc, #620]	; (801cc30 <_dtoa_r+0x308>)
 801c9c4:	9300      	str	r3, [sp, #0]
 801c9c6:	3308      	adds	r3, #8
 801c9c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c9ca:	6013      	str	r3, [r2, #0]
 801c9cc:	9800      	ldr	r0, [sp, #0]
 801c9ce:	b015      	add	sp, #84	; 0x54
 801c9d0:	ecbd 8b02 	vpop	{d8}
 801c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9d8:	4b94      	ldr	r3, [pc, #592]	; (801cc2c <_dtoa_r+0x304>)
 801c9da:	9300      	str	r3, [sp, #0]
 801c9dc:	3303      	adds	r3, #3
 801c9de:	e7f3      	b.n	801c9c8 <_dtoa_r+0xa0>
 801c9e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	ec51 0b17 	vmov	r0, r1, d7
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c9f0:	f7e4 f87a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c9f4:	4680      	mov	r8, r0
 801c9f6:	b158      	cbz	r0, 801ca10 <_dtoa_r+0xe8>
 801c9f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c9fa:	2301      	movs	r3, #1
 801c9fc:	6013      	str	r3, [r2, #0]
 801c9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	f000 8551 	beq.w	801d4a8 <_dtoa_r+0xb80>
 801ca06:	488b      	ldr	r0, [pc, #556]	; (801cc34 <_dtoa_r+0x30c>)
 801ca08:	6018      	str	r0, [r3, #0]
 801ca0a:	1e43      	subs	r3, r0, #1
 801ca0c:	9300      	str	r3, [sp, #0]
 801ca0e:	e7dd      	b.n	801c9cc <_dtoa_r+0xa4>
 801ca10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ca14:	aa12      	add	r2, sp, #72	; 0x48
 801ca16:	a913      	add	r1, sp, #76	; 0x4c
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f001 fad5 	bl	801dfc8 <__d2b>
 801ca1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ca22:	4683      	mov	fp, r0
 801ca24:	2d00      	cmp	r5, #0
 801ca26:	d07c      	beq.n	801cb22 <_dtoa_r+0x1fa>
 801ca28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ca2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ca36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ca3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ca3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ca42:	4b7d      	ldr	r3, [pc, #500]	; (801cc38 <_dtoa_r+0x310>)
 801ca44:	2200      	movs	r2, #0
 801ca46:	4630      	mov	r0, r6
 801ca48:	4639      	mov	r1, r7
 801ca4a:	f7e3 fc2d 	bl	80002a8 <__aeabi_dsub>
 801ca4e:	a36e      	add	r3, pc, #440	; (adr r3, 801cc08 <_dtoa_r+0x2e0>)
 801ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca54:	f7e3 fde0 	bl	8000618 <__aeabi_dmul>
 801ca58:	a36d      	add	r3, pc, #436	; (adr r3, 801cc10 <_dtoa_r+0x2e8>)
 801ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca5e:	f7e3 fc25 	bl	80002ac <__adddf3>
 801ca62:	4606      	mov	r6, r0
 801ca64:	4628      	mov	r0, r5
 801ca66:	460f      	mov	r7, r1
 801ca68:	f7e3 fd6c 	bl	8000544 <__aeabi_i2d>
 801ca6c:	a36a      	add	r3, pc, #424	; (adr r3, 801cc18 <_dtoa_r+0x2f0>)
 801ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca72:	f7e3 fdd1 	bl	8000618 <__aeabi_dmul>
 801ca76:	4602      	mov	r2, r0
 801ca78:	460b      	mov	r3, r1
 801ca7a:	4630      	mov	r0, r6
 801ca7c:	4639      	mov	r1, r7
 801ca7e:	f7e3 fc15 	bl	80002ac <__adddf3>
 801ca82:	4606      	mov	r6, r0
 801ca84:	460f      	mov	r7, r1
 801ca86:	f7e4 f877 	bl	8000b78 <__aeabi_d2iz>
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	4682      	mov	sl, r0
 801ca8e:	2300      	movs	r3, #0
 801ca90:	4630      	mov	r0, r6
 801ca92:	4639      	mov	r1, r7
 801ca94:	f7e4 f832 	bl	8000afc <__aeabi_dcmplt>
 801ca98:	b148      	cbz	r0, 801caae <_dtoa_r+0x186>
 801ca9a:	4650      	mov	r0, sl
 801ca9c:	f7e3 fd52 	bl	8000544 <__aeabi_i2d>
 801caa0:	4632      	mov	r2, r6
 801caa2:	463b      	mov	r3, r7
 801caa4:	f7e4 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 801caa8:	b908      	cbnz	r0, 801caae <_dtoa_r+0x186>
 801caaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801caae:	f1ba 0f16 	cmp.w	sl, #22
 801cab2:	d854      	bhi.n	801cb5e <_dtoa_r+0x236>
 801cab4:	4b61      	ldr	r3, [pc, #388]	; (801cc3c <_dtoa_r+0x314>)
 801cab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cabe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cac2:	f7e4 f81b 	bl	8000afc <__aeabi_dcmplt>
 801cac6:	2800      	cmp	r0, #0
 801cac8:	d04b      	beq.n	801cb62 <_dtoa_r+0x23a>
 801caca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cace:	2300      	movs	r3, #0
 801cad0:	930e      	str	r3, [sp, #56]	; 0x38
 801cad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cad4:	1b5d      	subs	r5, r3, r5
 801cad6:	1e6b      	subs	r3, r5, #1
 801cad8:	9304      	str	r3, [sp, #16]
 801cada:	bf43      	ittte	mi
 801cadc:	2300      	movmi	r3, #0
 801cade:	f1c5 0801 	rsbmi	r8, r5, #1
 801cae2:	9304      	strmi	r3, [sp, #16]
 801cae4:	f04f 0800 	movpl.w	r8, #0
 801cae8:	f1ba 0f00 	cmp.w	sl, #0
 801caec:	db3b      	blt.n	801cb66 <_dtoa_r+0x23e>
 801caee:	9b04      	ldr	r3, [sp, #16]
 801caf0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801caf4:	4453      	add	r3, sl
 801caf6:	9304      	str	r3, [sp, #16]
 801caf8:	2300      	movs	r3, #0
 801cafa:	9306      	str	r3, [sp, #24]
 801cafc:	9b05      	ldr	r3, [sp, #20]
 801cafe:	2b09      	cmp	r3, #9
 801cb00:	d869      	bhi.n	801cbd6 <_dtoa_r+0x2ae>
 801cb02:	2b05      	cmp	r3, #5
 801cb04:	bfc4      	itt	gt
 801cb06:	3b04      	subgt	r3, #4
 801cb08:	9305      	strgt	r3, [sp, #20]
 801cb0a:	9b05      	ldr	r3, [sp, #20]
 801cb0c:	f1a3 0302 	sub.w	r3, r3, #2
 801cb10:	bfcc      	ite	gt
 801cb12:	2500      	movgt	r5, #0
 801cb14:	2501      	movle	r5, #1
 801cb16:	2b03      	cmp	r3, #3
 801cb18:	d869      	bhi.n	801cbee <_dtoa_r+0x2c6>
 801cb1a:	e8df f003 	tbb	[pc, r3]
 801cb1e:	4e2c      	.short	0x4e2c
 801cb20:	5a4c      	.short	0x5a4c
 801cb22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801cb26:	441d      	add	r5, r3
 801cb28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801cb2c:	2b20      	cmp	r3, #32
 801cb2e:	bfc1      	itttt	gt
 801cb30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cb34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801cb38:	fa09 f303 	lslgt.w	r3, r9, r3
 801cb3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801cb40:	bfda      	itte	le
 801cb42:	f1c3 0320 	rsble	r3, r3, #32
 801cb46:	fa06 f003 	lslle.w	r0, r6, r3
 801cb4a:	4318      	orrgt	r0, r3
 801cb4c:	f7e3 fcea 	bl	8000524 <__aeabi_ui2d>
 801cb50:	2301      	movs	r3, #1
 801cb52:	4606      	mov	r6, r0
 801cb54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801cb58:	3d01      	subs	r5, #1
 801cb5a:	9310      	str	r3, [sp, #64]	; 0x40
 801cb5c:	e771      	b.n	801ca42 <_dtoa_r+0x11a>
 801cb5e:	2301      	movs	r3, #1
 801cb60:	e7b6      	b.n	801cad0 <_dtoa_r+0x1a8>
 801cb62:	900e      	str	r0, [sp, #56]	; 0x38
 801cb64:	e7b5      	b.n	801cad2 <_dtoa_r+0x1aa>
 801cb66:	f1ca 0300 	rsb	r3, sl, #0
 801cb6a:	9306      	str	r3, [sp, #24]
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	eba8 080a 	sub.w	r8, r8, sl
 801cb72:	930d      	str	r3, [sp, #52]	; 0x34
 801cb74:	e7c2      	b.n	801cafc <_dtoa_r+0x1d4>
 801cb76:	2300      	movs	r3, #0
 801cb78:	9308      	str	r3, [sp, #32]
 801cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	dc39      	bgt.n	801cbf4 <_dtoa_r+0x2cc>
 801cb80:	f04f 0901 	mov.w	r9, #1
 801cb84:	f8cd 9004 	str.w	r9, [sp, #4]
 801cb88:	464b      	mov	r3, r9
 801cb8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801cb8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cb90:	2200      	movs	r2, #0
 801cb92:	6042      	str	r2, [r0, #4]
 801cb94:	2204      	movs	r2, #4
 801cb96:	f102 0614 	add.w	r6, r2, #20
 801cb9a:	429e      	cmp	r6, r3
 801cb9c:	6841      	ldr	r1, [r0, #4]
 801cb9e:	d92f      	bls.n	801cc00 <_dtoa_r+0x2d8>
 801cba0:	4620      	mov	r0, r4
 801cba2:	f000 feef 	bl	801d984 <_Balloc>
 801cba6:	9000      	str	r0, [sp, #0]
 801cba8:	2800      	cmp	r0, #0
 801cbaa:	d14b      	bne.n	801cc44 <_dtoa_r+0x31c>
 801cbac:	4b24      	ldr	r3, [pc, #144]	; (801cc40 <_dtoa_r+0x318>)
 801cbae:	4602      	mov	r2, r0
 801cbb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cbb4:	e6d1      	b.n	801c95a <_dtoa_r+0x32>
 801cbb6:	2301      	movs	r3, #1
 801cbb8:	e7de      	b.n	801cb78 <_dtoa_r+0x250>
 801cbba:	2300      	movs	r3, #0
 801cbbc:	9308      	str	r3, [sp, #32]
 801cbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbc0:	eb0a 0903 	add.w	r9, sl, r3
 801cbc4:	f109 0301 	add.w	r3, r9, #1
 801cbc8:	2b01      	cmp	r3, #1
 801cbca:	9301      	str	r3, [sp, #4]
 801cbcc:	bfb8      	it	lt
 801cbce:	2301      	movlt	r3, #1
 801cbd0:	e7dd      	b.n	801cb8e <_dtoa_r+0x266>
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	e7f2      	b.n	801cbbc <_dtoa_r+0x294>
 801cbd6:	2501      	movs	r5, #1
 801cbd8:	2300      	movs	r3, #0
 801cbda:	9305      	str	r3, [sp, #20]
 801cbdc:	9508      	str	r5, [sp, #32]
 801cbde:	f04f 39ff 	mov.w	r9, #4294967295
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	f8cd 9004 	str.w	r9, [sp, #4]
 801cbe8:	2312      	movs	r3, #18
 801cbea:	9209      	str	r2, [sp, #36]	; 0x24
 801cbec:	e7cf      	b.n	801cb8e <_dtoa_r+0x266>
 801cbee:	2301      	movs	r3, #1
 801cbf0:	9308      	str	r3, [sp, #32]
 801cbf2:	e7f4      	b.n	801cbde <_dtoa_r+0x2b6>
 801cbf4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cbf8:	f8cd 9004 	str.w	r9, [sp, #4]
 801cbfc:	464b      	mov	r3, r9
 801cbfe:	e7c6      	b.n	801cb8e <_dtoa_r+0x266>
 801cc00:	3101      	adds	r1, #1
 801cc02:	6041      	str	r1, [r0, #4]
 801cc04:	0052      	lsls	r2, r2, #1
 801cc06:	e7c6      	b.n	801cb96 <_dtoa_r+0x26e>
 801cc08:	636f4361 	.word	0x636f4361
 801cc0c:	3fd287a7 	.word	0x3fd287a7
 801cc10:	8b60c8b3 	.word	0x8b60c8b3
 801cc14:	3fc68a28 	.word	0x3fc68a28
 801cc18:	509f79fb 	.word	0x509f79fb
 801cc1c:	3fd34413 	.word	0x3fd34413
 801cc20:	080203a4 	.word	0x080203a4
 801cc24:	08020566 	.word	0x08020566
 801cc28:	7ff00000 	.word	0x7ff00000
 801cc2c:	08020562 	.word	0x08020562
 801cc30:	08020559 	.word	0x08020559
 801cc34:	08020381 	.word	0x08020381
 801cc38:	3ff80000 	.word	0x3ff80000
 801cc3c:	080206c0 	.word	0x080206c0
 801cc40:	080205c5 	.word	0x080205c5
 801cc44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc46:	9a00      	ldr	r2, [sp, #0]
 801cc48:	601a      	str	r2, [r3, #0]
 801cc4a:	9b01      	ldr	r3, [sp, #4]
 801cc4c:	2b0e      	cmp	r3, #14
 801cc4e:	f200 80ad 	bhi.w	801cdac <_dtoa_r+0x484>
 801cc52:	2d00      	cmp	r5, #0
 801cc54:	f000 80aa 	beq.w	801cdac <_dtoa_r+0x484>
 801cc58:	f1ba 0f00 	cmp.w	sl, #0
 801cc5c:	dd36      	ble.n	801cccc <_dtoa_r+0x3a4>
 801cc5e:	4ac3      	ldr	r2, [pc, #780]	; (801cf6c <_dtoa_r+0x644>)
 801cc60:	f00a 030f 	and.w	r3, sl, #15
 801cc64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cc68:	ed93 7b00 	vldr	d7, [r3]
 801cc6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801cc70:	ea4f 172a 	mov.w	r7, sl, asr #4
 801cc74:	eeb0 8a47 	vmov.f32	s16, s14
 801cc78:	eef0 8a67 	vmov.f32	s17, s15
 801cc7c:	d016      	beq.n	801ccac <_dtoa_r+0x384>
 801cc7e:	4bbc      	ldr	r3, [pc, #752]	; (801cf70 <_dtoa_r+0x648>)
 801cc80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cc84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cc88:	f7e3 fdf0 	bl	800086c <__aeabi_ddiv>
 801cc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc90:	f007 070f 	and.w	r7, r7, #15
 801cc94:	2503      	movs	r5, #3
 801cc96:	4eb6      	ldr	r6, [pc, #728]	; (801cf70 <_dtoa_r+0x648>)
 801cc98:	b957      	cbnz	r7, 801ccb0 <_dtoa_r+0x388>
 801cc9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc9e:	ec53 2b18 	vmov	r2, r3, d8
 801cca2:	f7e3 fde3 	bl	800086c <__aeabi_ddiv>
 801cca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ccaa:	e029      	b.n	801cd00 <_dtoa_r+0x3d8>
 801ccac:	2502      	movs	r5, #2
 801ccae:	e7f2      	b.n	801cc96 <_dtoa_r+0x36e>
 801ccb0:	07f9      	lsls	r1, r7, #31
 801ccb2:	d508      	bpl.n	801ccc6 <_dtoa_r+0x39e>
 801ccb4:	ec51 0b18 	vmov	r0, r1, d8
 801ccb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ccbc:	f7e3 fcac 	bl	8000618 <__aeabi_dmul>
 801ccc0:	ec41 0b18 	vmov	d8, r0, r1
 801ccc4:	3501      	adds	r5, #1
 801ccc6:	107f      	asrs	r7, r7, #1
 801ccc8:	3608      	adds	r6, #8
 801ccca:	e7e5      	b.n	801cc98 <_dtoa_r+0x370>
 801cccc:	f000 80a6 	beq.w	801ce1c <_dtoa_r+0x4f4>
 801ccd0:	f1ca 0600 	rsb	r6, sl, #0
 801ccd4:	4ba5      	ldr	r3, [pc, #660]	; (801cf6c <_dtoa_r+0x644>)
 801ccd6:	4fa6      	ldr	r7, [pc, #664]	; (801cf70 <_dtoa_r+0x648>)
 801ccd8:	f006 020f 	and.w	r2, r6, #15
 801ccdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cce8:	f7e3 fc96 	bl	8000618 <__aeabi_dmul>
 801ccec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ccf0:	1136      	asrs	r6, r6, #4
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	2502      	movs	r5, #2
 801ccf6:	2e00      	cmp	r6, #0
 801ccf8:	f040 8085 	bne.w	801ce06 <_dtoa_r+0x4de>
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d1d2      	bne.n	801cca6 <_dtoa_r+0x37e>
 801cd00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	f000 808c 	beq.w	801ce20 <_dtoa_r+0x4f8>
 801cd08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cd0c:	4b99      	ldr	r3, [pc, #612]	; (801cf74 <_dtoa_r+0x64c>)
 801cd0e:	2200      	movs	r2, #0
 801cd10:	4630      	mov	r0, r6
 801cd12:	4639      	mov	r1, r7
 801cd14:	f7e3 fef2 	bl	8000afc <__aeabi_dcmplt>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	f000 8081 	beq.w	801ce20 <_dtoa_r+0x4f8>
 801cd1e:	9b01      	ldr	r3, [sp, #4]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d07d      	beq.n	801ce20 <_dtoa_r+0x4f8>
 801cd24:	f1b9 0f00 	cmp.w	r9, #0
 801cd28:	dd3c      	ble.n	801cda4 <_dtoa_r+0x47c>
 801cd2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cd2e:	9307      	str	r3, [sp, #28]
 801cd30:	2200      	movs	r2, #0
 801cd32:	4b91      	ldr	r3, [pc, #580]	; (801cf78 <_dtoa_r+0x650>)
 801cd34:	4630      	mov	r0, r6
 801cd36:	4639      	mov	r1, r7
 801cd38:	f7e3 fc6e 	bl	8000618 <__aeabi_dmul>
 801cd3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd40:	3501      	adds	r5, #1
 801cd42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801cd46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cd4a:	4628      	mov	r0, r5
 801cd4c:	f7e3 fbfa 	bl	8000544 <__aeabi_i2d>
 801cd50:	4632      	mov	r2, r6
 801cd52:	463b      	mov	r3, r7
 801cd54:	f7e3 fc60 	bl	8000618 <__aeabi_dmul>
 801cd58:	4b88      	ldr	r3, [pc, #544]	; (801cf7c <_dtoa_r+0x654>)
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	f7e3 faa6 	bl	80002ac <__adddf3>
 801cd60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801cd64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd68:	9303      	str	r3, [sp, #12]
 801cd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d15c      	bne.n	801ce2a <_dtoa_r+0x502>
 801cd70:	4b83      	ldr	r3, [pc, #524]	; (801cf80 <_dtoa_r+0x658>)
 801cd72:	2200      	movs	r2, #0
 801cd74:	4630      	mov	r0, r6
 801cd76:	4639      	mov	r1, r7
 801cd78:	f7e3 fa96 	bl	80002a8 <__aeabi_dsub>
 801cd7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cd80:	4606      	mov	r6, r0
 801cd82:	460f      	mov	r7, r1
 801cd84:	f7e3 fed8 	bl	8000b38 <__aeabi_dcmpgt>
 801cd88:	2800      	cmp	r0, #0
 801cd8a:	f040 8296 	bne.w	801d2ba <_dtoa_r+0x992>
 801cd8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801cd92:	4630      	mov	r0, r6
 801cd94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cd98:	4639      	mov	r1, r7
 801cd9a:	f7e3 feaf 	bl	8000afc <__aeabi_dcmplt>
 801cd9e:	2800      	cmp	r0, #0
 801cda0:	f040 8288 	bne.w	801d2b4 <_dtoa_r+0x98c>
 801cda4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cda8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cdac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	f2c0 8158 	blt.w	801d064 <_dtoa_r+0x73c>
 801cdb4:	f1ba 0f0e 	cmp.w	sl, #14
 801cdb8:	f300 8154 	bgt.w	801d064 <_dtoa_r+0x73c>
 801cdbc:	4b6b      	ldr	r3, [pc, #428]	; (801cf6c <_dtoa_r+0x644>)
 801cdbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cdc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	f280 80e3 	bge.w	801cf94 <_dtoa_r+0x66c>
 801cdce:	9b01      	ldr	r3, [sp, #4]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	f300 80df 	bgt.w	801cf94 <_dtoa_r+0x66c>
 801cdd6:	f040 826d 	bne.w	801d2b4 <_dtoa_r+0x98c>
 801cdda:	4b69      	ldr	r3, [pc, #420]	; (801cf80 <_dtoa_r+0x658>)
 801cddc:	2200      	movs	r2, #0
 801cdde:	4640      	mov	r0, r8
 801cde0:	4649      	mov	r1, r9
 801cde2:	f7e3 fc19 	bl	8000618 <__aeabi_dmul>
 801cde6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cdea:	f7e3 fe9b 	bl	8000b24 <__aeabi_dcmpge>
 801cdee:	9e01      	ldr	r6, [sp, #4]
 801cdf0:	4637      	mov	r7, r6
 801cdf2:	2800      	cmp	r0, #0
 801cdf4:	f040 8243 	bne.w	801d27e <_dtoa_r+0x956>
 801cdf8:	9d00      	ldr	r5, [sp, #0]
 801cdfa:	2331      	movs	r3, #49	; 0x31
 801cdfc:	f805 3b01 	strb.w	r3, [r5], #1
 801ce00:	f10a 0a01 	add.w	sl, sl, #1
 801ce04:	e23f      	b.n	801d286 <_dtoa_r+0x95e>
 801ce06:	07f2      	lsls	r2, r6, #31
 801ce08:	d505      	bpl.n	801ce16 <_dtoa_r+0x4ee>
 801ce0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ce0e:	f7e3 fc03 	bl	8000618 <__aeabi_dmul>
 801ce12:	3501      	adds	r5, #1
 801ce14:	2301      	movs	r3, #1
 801ce16:	1076      	asrs	r6, r6, #1
 801ce18:	3708      	adds	r7, #8
 801ce1a:	e76c      	b.n	801ccf6 <_dtoa_r+0x3ce>
 801ce1c:	2502      	movs	r5, #2
 801ce1e:	e76f      	b.n	801cd00 <_dtoa_r+0x3d8>
 801ce20:	9b01      	ldr	r3, [sp, #4]
 801ce22:	f8cd a01c 	str.w	sl, [sp, #28]
 801ce26:	930c      	str	r3, [sp, #48]	; 0x30
 801ce28:	e78d      	b.n	801cd46 <_dtoa_r+0x41e>
 801ce2a:	9900      	ldr	r1, [sp, #0]
 801ce2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ce2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce30:	4b4e      	ldr	r3, [pc, #312]	; (801cf6c <_dtoa_r+0x644>)
 801ce32:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce36:	4401      	add	r1, r0
 801ce38:	9102      	str	r1, [sp, #8]
 801ce3a:	9908      	ldr	r1, [sp, #32]
 801ce3c:	eeb0 8a47 	vmov.f32	s16, s14
 801ce40:	eef0 8a67 	vmov.f32	s17, s15
 801ce44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ce48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ce4c:	2900      	cmp	r1, #0
 801ce4e:	d045      	beq.n	801cedc <_dtoa_r+0x5b4>
 801ce50:	494c      	ldr	r1, [pc, #304]	; (801cf84 <_dtoa_r+0x65c>)
 801ce52:	2000      	movs	r0, #0
 801ce54:	f7e3 fd0a 	bl	800086c <__aeabi_ddiv>
 801ce58:	ec53 2b18 	vmov	r2, r3, d8
 801ce5c:	f7e3 fa24 	bl	80002a8 <__aeabi_dsub>
 801ce60:	9d00      	ldr	r5, [sp, #0]
 801ce62:	ec41 0b18 	vmov	d8, r0, r1
 801ce66:	4639      	mov	r1, r7
 801ce68:	4630      	mov	r0, r6
 801ce6a:	f7e3 fe85 	bl	8000b78 <__aeabi_d2iz>
 801ce6e:	900c      	str	r0, [sp, #48]	; 0x30
 801ce70:	f7e3 fb68 	bl	8000544 <__aeabi_i2d>
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4630      	mov	r0, r6
 801ce7a:	4639      	mov	r1, r7
 801ce7c:	f7e3 fa14 	bl	80002a8 <__aeabi_dsub>
 801ce80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce82:	3330      	adds	r3, #48	; 0x30
 801ce84:	f805 3b01 	strb.w	r3, [r5], #1
 801ce88:	ec53 2b18 	vmov	r2, r3, d8
 801ce8c:	4606      	mov	r6, r0
 801ce8e:	460f      	mov	r7, r1
 801ce90:	f7e3 fe34 	bl	8000afc <__aeabi_dcmplt>
 801ce94:	2800      	cmp	r0, #0
 801ce96:	d165      	bne.n	801cf64 <_dtoa_r+0x63c>
 801ce98:	4632      	mov	r2, r6
 801ce9a:	463b      	mov	r3, r7
 801ce9c:	4935      	ldr	r1, [pc, #212]	; (801cf74 <_dtoa_r+0x64c>)
 801ce9e:	2000      	movs	r0, #0
 801cea0:	f7e3 fa02 	bl	80002a8 <__aeabi_dsub>
 801cea4:	ec53 2b18 	vmov	r2, r3, d8
 801cea8:	f7e3 fe28 	bl	8000afc <__aeabi_dcmplt>
 801ceac:	2800      	cmp	r0, #0
 801ceae:	f040 80b9 	bne.w	801d024 <_dtoa_r+0x6fc>
 801ceb2:	9b02      	ldr	r3, [sp, #8]
 801ceb4:	429d      	cmp	r5, r3
 801ceb6:	f43f af75 	beq.w	801cda4 <_dtoa_r+0x47c>
 801ceba:	4b2f      	ldr	r3, [pc, #188]	; (801cf78 <_dtoa_r+0x650>)
 801cebc:	ec51 0b18 	vmov	r0, r1, d8
 801cec0:	2200      	movs	r2, #0
 801cec2:	f7e3 fba9 	bl	8000618 <__aeabi_dmul>
 801cec6:	4b2c      	ldr	r3, [pc, #176]	; (801cf78 <_dtoa_r+0x650>)
 801cec8:	ec41 0b18 	vmov	d8, r0, r1
 801cecc:	2200      	movs	r2, #0
 801cece:	4630      	mov	r0, r6
 801ced0:	4639      	mov	r1, r7
 801ced2:	f7e3 fba1 	bl	8000618 <__aeabi_dmul>
 801ced6:	4606      	mov	r6, r0
 801ced8:	460f      	mov	r7, r1
 801ceda:	e7c4      	b.n	801ce66 <_dtoa_r+0x53e>
 801cedc:	ec51 0b17 	vmov	r0, r1, d7
 801cee0:	f7e3 fb9a 	bl	8000618 <__aeabi_dmul>
 801cee4:	9b02      	ldr	r3, [sp, #8]
 801cee6:	9d00      	ldr	r5, [sp, #0]
 801cee8:	930c      	str	r3, [sp, #48]	; 0x30
 801ceea:	ec41 0b18 	vmov	d8, r0, r1
 801ceee:	4639      	mov	r1, r7
 801cef0:	4630      	mov	r0, r6
 801cef2:	f7e3 fe41 	bl	8000b78 <__aeabi_d2iz>
 801cef6:	9011      	str	r0, [sp, #68]	; 0x44
 801cef8:	f7e3 fb24 	bl	8000544 <__aeabi_i2d>
 801cefc:	4602      	mov	r2, r0
 801cefe:	460b      	mov	r3, r1
 801cf00:	4630      	mov	r0, r6
 801cf02:	4639      	mov	r1, r7
 801cf04:	f7e3 f9d0 	bl	80002a8 <__aeabi_dsub>
 801cf08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cf0a:	3330      	adds	r3, #48	; 0x30
 801cf0c:	f805 3b01 	strb.w	r3, [r5], #1
 801cf10:	9b02      	ldr	r3, [sp, #8]
 801cf12:	429d      	cmp	r5, r3
 801cf14:	4606      	mov	r6, r0
 801cf16:	460f      	mov	r7, r1
 801cf18:	f04f 0200 	mov.w	r2, #0
 801cf1c:	d134      	bne.n	801cf88 <_dtoa_r+0x660>
 801cf1e:	4b19      	ldr	r3, [pc, #100]	; (801cf84 <_dtoa_r+0x65c>)
 801cf20:	ec51 0b18 	vmov	r0, r1, d8
 801cf24:	f7e3 f9c2 	bl	80002ac <__adddf3>
 801cf28:	4602      	mov	r2, r0
 801cf2a:	460b      	mov	r3, r1
 801cf2c:	4630      	mov	r0, r6
 801cf2e:	4639      	mov	r1, r7
 801cf30:	f7e3 fe02 	bl	8000b38 <__aeabi_dcmpgt>
 801cf34:	2800      	cmp	r0, #0
 801cf36:	d175      	bne.n	801d024 <_dtoa_r+0x6fc>
 801cf38:	ec53 2b18 	vmov	r2, r3, d8
 801cf3c:	4911      	ldr	r1, [pc, #68]	; (801cf84 <_dtoa_r+0x65c>)
 801cf3e:	2000      	movs	r0, #0
 801cf40:	f7e3 f9b2 	bl	80002a8 <__aeabi_dsub>
 801cf44:	4602      	mov	r2, r0
 801cf46:	460b      	mov	r3, r1
 801cf48:	4630      	mov	r0, r6
 801cf4a:	4639      	mov	r1, r7
 801cf4c:	f7e3 fdd6 	bl	8000afc <__aeabi_dcmplt>
 801cf50:	2800      	cmp	r0, #0
 801cf52:	f43f af27 	beq.w	801cda4 <_dtoa_r+0x47c>
 801cf56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cf58:	1e6b      	subs	r3, r5, #1
 801cf5a:	930c      	str	r3, [sp, #48]	; 0x30
 801cf5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cf60:	2b30      	cmp	r3, #48	; 0x30
 801cf62:	d0f8      	beq.n	801cf56 <_dtoa_r+0x62e>
 801cf64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cf68:	e04a      	b.n	801d000 <_dtoa_r+0x6d8>
 801cf6a:	bf00      	nop
 801cf6c:	080206c0 	.word	0x080206c0
 801cf70:	08020698 	.word	0x08020698
 801cf74:	3ff00000 	.word	0x3ff00000
 801cf78:	40240000 	.word	0x40240000
 801cf7c:	401c0000 	.word	0x401c0000
 801cf80:	40140000 	.word	0x40140000
 801cf84:	3fe00000 	.word	0x3fe00000
 801cf88:	4baf      	ldr	r3, [pc, #700]	; (801d248 <_dtoa_r+0x920>)
 801cf8a:	f7e3 fb45 	bl	8000618 <__aeabi_dmul>
 801cf8e:	4606      	mov	r6, r0
 801cf90:	460f      	mov	r7, r1
 801cf92:	e7ac      	b.n	801ceee <_dtoa_r+0x5c6>
 801cf94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cf98:	9d00      	ldr	r5, [sp, #0]
 801cf9a:	4642      	mov	r2, r8
 801cf9c:	464b      	mov	r3, r9
 801cf9e:	4630      	mov	r0, r6
 801cfa0:	4639      	mov	r1, r7
 801cfa2:	f7e3 fc63 	bl	800086c <__aeabi_ddiv>
 801cfa6:	f7e3 fde7 	bl	8000b78 <__aeabi_d2iz>
 801cfaa:	9002      	str	r0, [sp, #8]
 801cfac:	f7e3 faca 	bl	8000544 <__aeabi_i2d>
 801cfb0:	4642      	mov	r2, r8
 801cfb2:	464b      	mov	r3, r9
 801cfb4:	f7e3 fb30 	bl	8000618 <__aeabi_dmul>
 801cfb8:	4602      	mov	r2, r0
 801cfba:	460b      	mov	r3, r1
 801cfbc:	4630      	mov	r0, r6
 801cfbe:	4639      	mov	r1, r7
 801cfc0:	f7e3 f972 	bl	80002a8 <__aeabi_dsub>
 801cfc4:	9e02      	ldr	r6, [sp, #8]
 801cfc6:	9f01      	ldr	r7, [sp, #4]
 801cfc8:	3630      	adds	r6, #48	; 0x30
 801cfca:	f805 6b01 	strb.w	r6, [r5], #1
 801cfce:	9e00      	ldr	r6, [sp, #0]
 801cfd0:	1bae      	subs	r6, r5, r6
 801cfd2:	42b7      	cmp	r7, r6
 801cfd4:	4602      	mov	r2, r0
 801cfd6:	460b      	mov	r3, r1
 801cfd8:	d137      	bne.n	801d04a <_dtoa_r+0x722>
 801cfda:	f7e3 f967 	bl	80002ac <__adddf3>
 801cfde:	4642      	mov	r2, r8
 801cfe0:	464b      	mov	r3, r9
 801cfe2:	4606      	mov	r6, r0
 801cfe4:	460f      	mov	r7, r1
 801cfe6:	f7e3 fda7 	bl	8000b38 <__aeabi_dcmpgt>
 801cfea:	b9c8      	cbnz	r0, 801d020 <_dtoa_r+0x6f8>
 801cfec:	4642      	mov	r2, r8
 801cfee:	464b      	mov	r3, r9
 801cff0:	4630      	mov	r0, r6
 801cff2:	4639      	mov	r1, r7
 801cff4:	f7e3 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 801cff8:	b110      	cbz	r0, 801d000 <_dtoa_r+0x6d8>
 801cffa:	9b02      	ldr	r3, [sp, #8]
 801cffc:	07d9      	lsls	r1, r3, #31
 801cffe:	d40f      	bmi.n	801d020 <_dtoa_r+0x6f8>
 801d000:	4620      	mov	r0, r4
 801d002:	4659      	mov	r1, fp
 801d004:	f000 fcfe 	bl	801da04 <_Bfree>
 801d008:	2300      	movs	r3, #0
 801d00a:	702b      	strb	r3, [r5, #0]
 801d00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d00e:	f10a 0001 	add.w	r0, sl, #1
 801d012:	6018      	str	r0, [r3, #0]
 801d014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d016:	2b00      	cmp	r3, #0
 801d018:	f43f acd8 	beq.w	801c9cc <_dtoa_r+0xa4>
 801d01c:	601d      	str	r5, [r3, #0]
 801d01e:	e4d5      	b.n	801c9cc <_dtoa_r+0xa4>
 801d020:	f8cd a01c 	str.w	sl, [sp, #28]
 801d024:	462b      	mov	r3, r5
 801d026:	461d      	mov	r5, r3
 801d028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d02c:	2a39      	cmp	r2, #57	; 0x39
 801d02e:	d108      	bne.n	801d042 <_dtoa_r+0x71a>
 801d030:	9a00      	ldr	r2, [sp, #0]
 801d032:	429a      	cmp	r2, r3
 801d034:	d1f7      	bne.n	801d026 <_dtoa_r+0x6fe>
 801d036:	9a07      	ldr	r2, [sp, #28]
 801d038:	9900      	ldr	r1, [sp, #0]
 801d03a:	3201      	adds	r2, #1
 801d03c:	9207      	str	r2, [sp, #28]
 801d03e:	2230      	movs	r2, #48	; 0x30
 801d040:	700a      	strb	r2, [r1, #0]
 801d042:	781a      	ldrb	r2, [r3, #0]
 801d044:	3201      	adds	r2, #1
 801d046:	701a      	strb	r2, [r3, #0]
 801d048:	e78c      	b.n	801cf64 <_dtoa_r+0x63c>
 801d04a:	4b7f      	ldr	r3, [pc, #508]	; (801d248 <_dtoa_r+0x920>)
 801d04c:	2200      	movs	r2, #0
 801d04e:	f7e3 fae3 	bl	8000618 <__aeabi_dmul>
 801d052:	2200      	movs	r2, #0
 801d054:	2300      	movs	r3, #0
 801d056:	4606      	mov	r6, r0
 801d058:	460f      	mov	r7, r1
 801d05a:	f7e3 fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 801d05e:	2800      	cmp	r0, #0
 801d060:	d09b      	beq.n	801cf9a <_dtoa_r+0x672>
 801d062:	e7cd      	b.n	801d000 <_dtoa_r+0x6d8>
 801d064:	9a08      	ldr	r2, [sp, #32]
 801d066:	2a00      	cmp	r2, #0
 801d068:	f000 80c4 	beq.w	801d1f4 <_dtoa_r+0x8cc>
 801d06c:	9a05      	ldr	r2, [sp, #20]
 801d06e:	2a01      	cmp	r2, #1
 801d070:	f300 80a8 	bgt.w	801d1c4 <_dtoa_r+0x89c>
 801d074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d076:	2a00      	cmp	r2, #0
 801d078:	f000 80a0 	beq.w	801d1bc <_dtoa_r+0x894>
 801d07c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d080:	9e06      	ldr	r6, [sp, #24]
 801d082:	4645      	mov	r5, r8
 801d084:	9a04      	ldr	r2, [sp, #16]
 801d086:	2101      	movs	r1, #1
 801d088:	441a      	add	r2, r3
 801d08a:	4620      	mov	r0, r4
 801d08c:	4498      	add	r8, r3
 801d08e:	9204      	str	r2, [sp, #16]
 801d090:	f000 fd74 	bl	801db7c <__i2b>
 801d094:	4607      	mov	r7, r0
 801d096:	2d00      	cmp	r5, #0
 801d098:	dd0b      	ble.n	801d0b2 <_dtoa_r+0x78a>
 801d09a:	9b04      	ldr	r3, [sp, #16]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	dd08      	ble.n	801d0b2 <_dtoa_r+0x78a>
 801d0a0:	42ab      	cmp	r3, r5
 801d0a2:	9a04      	ldr	r2, [sp, #16]
 801d0a4:	bfa8      	it	ge
 801d0a6:	462b      	movge	r3, r5
 801d0a8:	eba8 0803 	sub.w	r8, r8, r3
 801d0ac:	1aed      	subs	r5, r5, r3
 801d0ae:	1ad3      	subs	r3, r2, r3
 801d0b0:	9304      	str	r3, [sp, #16]
 801d0b2:	9b06      	ldr	r3, [sp, #24]
 801d0b4:	b1fb      	cbz	r3, 801d0f6 <_dtoa_r+0x7ce>
 801d0b6:	9b08      	ldr	r3, [sp, #32]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	f000 809f 	beq.w	801d1fc <_dtoa_r+0x8d4>
 801d0be:	2e00      	cmp	r6, #0
 801d0c0:	dd11      	ble.n	801d0e6 <_dtoa_r+0x7be>
 801d0c2:	4639      	mov	r1, r7
 801d0c4:	4632      	mov	r2, r6
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	f000 fe14 	bl	801dcf4 <__pow5mult>
 801d0cc:	465a      	mov	r2, fp
 801d0ce:	4601      	mov	r1, r0
 801d0d0:	4607      	mov	r7, r0
 801d0d2:	4620      	mov	r0, r4
 801d0d4:	f000 fd68 	bl	801dba8 <__multiply>
 801d0d8:	4659      	mov	r1, fp
 801d0da:	9007      	str	r0, [sp, #28]
 801d0dc:	4620      	mov	r0, r4
 801d0de:	f000 fc91 	bl	801da04 <_Bfree>
 801d0e2:	9b07      	ldr	r3, [sp, #28]
 801d0e4:	469b      	mov	fp, r3
 801d0e6:	9b06      	ldr	r3, [sp, #24]
 801d0e8:	1b9a      	subs	r2, r3, r6
 801d0ea:	d004      	beq.n	801d0f6 <_dtoa_r+0x7ce>
 801d0ec:	4659      	mov	r1, fp
 801d0ee:	4620      	mov	r0, r4
 801d0f0:	f000 fe00 	bl	801dcf4 <__pow5mult>
 801d0f4:	4683      	mov	fp, r0
 801d0f6:	2101      	movs	r1, #1
 801d0f8:	4620      	mov	r0, r4
 801d0fa:	f000 fd3f 	bl	801db7c <__i2b>
 801d0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d100:	2b00      	cmp	r3, #0
 801d102:	4606      	mov	r6, r0
 801d104:	dd7c      	ble.n	801d200 <_dtoa_r+0x8d8>
 801d106:	461a      	mov	r2, r3
 801d108:	4601      	mov	r1, r0
 801d10a:	4620      	mov	r0, r4
 801d10c:	f000 fdf2 	bl	801dcf4 <__pow5mult>
 801d110:	9b05      	ldr	r3, [sp, #20]
 801d112:	2b01      	cmp	r3, #1
 801d114:	4606      	mov	r6, r0
 801d116:	dd76      	ble.n	801d206 <_dtoa_r+0x8de>
 801d118:	2300      	movs	r3, #0
 801d11a:	9306      	str	r3, [sp, #24]
 801d11c:	6933      	ldr	r3, [r6, #16]
 801d11e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d122:	6918      	ldr	r0, [r3, #16]
 801d124:	f000 fcda 	bl	801dadc <__hi0bits>
 801d128:	f1c0 0020 	rsb	r0, r0, #32
 801d12c:	9b04      	ldr	r3, [sp, #16]
 801d12e:	4418      	add	r0, r3
 801d130:	f010 001f 	ands.w	r0, r0, #31
 801d134:	f000 8086 	beq.w	801d244 <_dtoa_r+0x91c>
 801d138:	f1c0 0320 	rsb	r3, r0, #32
 801d13c:	2b04      	cmp	r3, #4
 801d13e:	dd7f      	ble.n	801d240 <_dtoa_r+0x918>
 801d140:	f1c0 001c 	rsb	r0, r0, #28
 801d144:	9b04      	ldr	r3, [sp, #16]
 801d146:	4403      	add	r3, r0
 801d148:	4480      	add	r8, r0
 801d14a:	4405      	add	r5, r0
 801d14c:	9304      	str	r3, [sp, #16]
 801d14e:	f1b8 0f00 	cmp.w	r8, #0
 801d152:	dd05      	ble.n	801d160 <_dtoa_r+0x838>
 801d154:	4659      	mov	r1, fp
 801d156:	4642      	mov	r2, r8
 801d158:	4620      	mov	r0, r4
 801d15a:	f000 fe25 	bl	801dda8 <__lshift>
 801d15e:	4683      	mov	fp, r0
 801d160:	9b04      	ldr	r3, [sp, #16]
 801d162:	2b00      	cmp	r3, #0
 801d164:	dd05      	ble.n	801d172 <_dtoa_r+0x84a>
 801d166:	4631      	mov	r1, r6
 801d168:	461a      	mov	r2, r3
 801d16a:	4620      	mov	r0, r4
 801d16c:	f000 fe1c 	bl	801dda8 <__lshift>
 801d170:	4606      	mov	r6, r0
 801d172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d174:	2b00      	cmp	r3, #0
 801d176:	d069      	beq.n	801d24c <_dtoa_r+0x924>
 801d178:	4631      	mov	r1, r6
 801d17a:	4658      	mov	r0, fp
 801d17c:	f000 fe80 	bl	801de80 <__mcmp>
 801d180:	2800      	cmp	r0, #0
 801d182:	da63      	bge.n	801d24c <_dtoa_r+0x924>
 801d184:	2300      	movs	r3, #0
 801d186:	4659      	mov	r1, fp
 801d188:	220a      	movs	r2, #10
 801d18a:	4620      	mov	r0, r4
 801d18c:	f000 fc5c 	bl	801da48 <__multadd>
 801d190:	9b08      	ldr	r3, [sp, #32]
 801d192:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d196:	4683      	mov	fp, r0
 801d198:	2b00      	cmp	r3, #0
 801d19a:	f000 818f 	beq.w	801d4bc <_dtoa_r+0xb94>
 801d19e:	4639      	mov	r1, r7
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	220a      	movs	r2, #10
 801d1a4:	4620      	mov	r0, r4
 801d1a6:	f000 fc4f 	bl	801da48 <__multadd>
 801d1aa:	f1b9 0f00 	cmp.w	r9, #0
 801d1ae:	4607      	mov	r7, r0
 801d1b0:	f300 808e 	bgt.w	801d2d0 <_dtoa_r+0x9a8>
 801d1b4:	9b05      	ldr	r3, [sp, #20]
 801d1b6:	2b02      	cmp	r3, #2
 801d1b8:	dc50      	bgt.n	801d25c <_dtoa_r+0x934>
 801d1ba:	e089      	b.n	801d2d0 <_dtoa_r+0x9a8>
 801d1bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d1c2:	e75d      	b.n	801d080 <_dtoa_r+0x758>
 801d1c4:	9b01      	ldr	r3, [sp, #4]
 801d1c6:	1e5e      	subs	r6, r3, #1
 801d1c8:	9b06      	ldr	r3, [sp, #24]
 801d1ca:	42b3      	cmp	r3, r6
 801d1cc:	bfbf      	itttt	lt
 801d1ce:	9b06      	ldrlt	r3, [sp, #24]
 801d1d0:	9606      	strlt	r6, [sp, #24]
 801d1d2:	1af2      	sublt	r2, r6, r3
 801d1d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d1d6:	bfb6      	itet	lt
 801d1d8:	189b      	addlt	r3, r3, r2
 801d1da:	1b9e      	subge	r6, r3, r6
 801d1dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d1de:	9b01      	ldr	r3, [sp, #4]
 801d1e0:	bfb8      	it	lt
 801d1e2:	2600      	movlt	r6, #0
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	bfb5      	itete	lt
 801d1e8:	eba8 0503 	sublt.w	r5, r8, r3
 801d1ec:	9b01      	ldrge	r3, [sp, #4]
 801d1ee:	2300      	movlt	r3, #0
 801d1f0:	4645      	movge	r5, r8
 801d1f2:	e747      	b.n	801d084 <_dtoa_r+0x75c>
 801d1f4:	9e06      	ldr	r6, [sp, #24]
 801d1f6:	9f08      	ldr	r7, [sp, #32]
 801d1f8:	4645      	mov	r5, r8
 801d1fa:	e74c      	b.n	801d096 <_dtoa_r+0x76e>
 801d1fc:	9a06      	ldr	r2, [sp, #24]
 801d1fe:	e775      	b.n	801d0ec <_dtoa_r+0x7c4>
 801d200:	9b05      	ldr	r3, [sp, #20]
 801d202:	2b01      	cmp	r3, #1
 801d204:	dc18      	bgt.n	801d238 <_dtoa_r+0x910>
 801d206:	9b02      	ldr	r3, [sp, #8]
 801d208:	b9b3      	cbnz	r3, 801d238 <_dtoa_r+0x910>
 801d20a:	9b03      	ldr	r3, [sp, #12]
 801d20c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d210:	b9a3      	cbnz	r3, 801d23c <_dtoa_r+0x914>
 801d212:	9b03      	ldr	r3, [sp, #12]
 801d214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d218:	0d1b      	lsrs	r3, r3, #20
 801d21a:	051b      	lsls	r3, r3, #20
 801d21c:	b12b      	cbz	r3, 801d22a <_dtoa_r+0x902>
 801d21e:	9b04      	ldr	r3, [sp, #16]
 801d220:	3301      	adds	r3, #1
 801d222:	9304      	str	r3, [sp, #16]
 801d224:	f108 0801 	add.w	r8, r8, #1
 801d228:	2301      	movs	r3, #1
 801d22a:	9306      	str	r3, [sp, #24]
 801d22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d22e:	2b00      	cmp	r3, #0
 801d230:	f47f af74 	bne.w	801d11c <_dtoa_r+0x7f4>
 801d234:	2001      	movs	r0, #1
 801d236:	e779      	b.n	801d12c <_dtoa_r+0x804>
 801d238:	2300      	movs	r3, #0
 801d23a:	e7f6      	b.n	801d22a <_dtoa_r+0x902>
 801d23c:	9b02      	ldr	r3, [sp, #8]
 801d23e:	e7f4      	b.n	801d22a <_dtoa_r+0x902>
 801d240:	d085      	beq.n	801d14e <_dtoa_r+0x826>
 801d242:	4618      	mov	r0, r3
 801d244:	301c      	adds	r0, #28
 801d246:	e77d      	b.n	801d144 <_dtoa_r+0x81c>
 801d248:	40240000 	.word	0x40240000
 801d24c:	9b01      	ldr	r3, [sp, #4]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	dc38      	bgt.n	801d2c4 <_dtoa_r+0x99c>
 801d252:	9b05      	ldr	r3, [sp, #20]
 801d254:	2b02      	cmp	r3, #2
 801d256:	dd35      	ble.n	801d2c4 <_dtoa_r+0x99c>
 801d258:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d25c:	f1b9 0f00 	cmp.w	r9, #0
 801d260:	d10d      	bne.n	801d27e <_dtoa_r+0x956>
 801d262:	4631      	mov	r1, r6
 801d264:	464b      	mov	r3, r9
 801d266:	2205      	movs	r2, #5
 801d268:	4620      	mov	r0, r4
 801d26a:	f000 fbed 	bl	801da48 <__multadd>
 801d26e:	4601      	mov	r1, r0
 801d270:	4606      	mov	r6, r0
 801d272:	4658      	mov	r0, fp
 801d274:	f000 fe04 	bl	801de80 <__mcmp>
 801d278:	2800      	cmp	r0, #0
 801d27a:	f73f adbd 	bgt.w	801cdf8 <_dtoa_r+0x4d0>
 801d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d280:	9d00      	ldr	r5, [sp, #0]
 801d282:	ea6f 0a03 	mvn.w	sl, r3
 801d286:	f04f 0800 	mov.w	r8, #0
 801d28a:	4631      	mov	r1, r6
 801d28c:	4620      	mov	r0, r4
 801d28e:	f000 fbb9 	bl	801da04 <_Bfree>
 801d292:	2f00      	cmp	r7, #0
 801d294:	f43f aeb4 	beq.w	801d000 <_dtoa_r+0x6d8>
 801d298:	f1b8 0f00 	cmp.w	r8, #0
 801d29c:	d005      	beq.n	801d2aa <_dtoa_r+0x982>
 801d29e:	45b8      	cmp	r8, r7
 801d2a0:	d003      	beq.n	801d2aa <_dtoa_r+0x982>
 801d2a2:	4641      	mov	r1, r8
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	f000 fbad 	bl	801da04 <_Bfree>
 801d2aa:	4639      	mov	r1, r7
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	f000 fba9 	bl	801da04 <_Bfree>
 801d2b2:	e6a5      	b.n	801d000 <_dtoa_r+0x6d8>
 801d2b4:	2600      	movs	r6, #0
 801d2b6:	4637      	mov	r7, r6
 801d2b8:	e7e1      	b.n	801d27e <_dtoa_r+0x956>
 801d2ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d2bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d2c0:	4637      	mov	r7, r6
 801d2c2:	e599      	b.n	801cdf8 <_dtoa_r+0x4d0>
 801d2c4:	9b08      	ldr	r3, [sp, #32]
 801d2c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	f000 80fd 	beq.w	801d4ca <_dtoa_r+0xba2>
 801d2d0:	2d00      	cmp	r5, #0
 801d2d2:	dd05      	ble.n	801d2e0 <_dtoa_r+0x9b8>
 801d2d4:	4639      	mov	r1, r7
 801d2d6:	462a      	mov	r2, r5
 801d2d8:	4620      	mov	r0, r4
 801d2da:	f000 fd65 	bl	801dda8 <__lshift>
 801d2de:	4607      	mov	r7, r0
 801d2e0:	9b06      	ldr	r3, [sp, #24]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d05c      	beq.n	801d3a0 <_dtoa_r+0xa78>
 801d2e6:	6879      	ldr	r1, [r7, #4]
 801d2e8:	4620      	mov	r0, r4
 801d2ea:	f000 fb4b 	bl	801d984 <_Balloc>
 801d2ee:	4605      	mov	r5, r0
 801d2f0:	b928      	cbnz	r0, 801d2fe <_dtoa_r+0x9d6>
 801d2f2:	4b80      	ldr	r3, [pc, #512]	; (801d4f4 <_dtoa_r+0xbcc>)
 801d2f4:	4602      	mov	r2, r0
 801d2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d2fa:	f7ff bb2e 	b.w	801c95a <_dtoa_r+0x32>
 801d2fe:	693a      	ldr	r2, [r7, #16]
 801d300:	3202      	adds	r2, #2
 801d302:	0092      	lsls	r2, r2, #2
 801d304:	f107 010c 	add.w	r1, r7, #12
 801d308:	300c      	adds	r0, #12
 801d30a:	f7fe faa1 	bl	801b850 <memcpy>
 801d30e:	2201      	movs	r2, #1
 801d310:	4629      	mov	r1, r5
 801d312:	4620      	mov	r0, r4
 801d314:	f000 fd48 	bl	801dda8 <__lshift>
 801d318:	9b00      	ldr	r3, [sp, #0]
 801d31a:	3301      	adds	r3, #1
 801d31c:	9301      	str	r3, [sp, #4]
 801d31e:	9b00      	ldr	r3, [sp, #0]
 801d320:	444b      	add	r3, r9
 801d322:	9307      	str	r3, [sp, #28]
 801d324:	9b02      	ldr	r3, [sp, #8]
 801d326:	f003 0301 	and.w	r3, r3, #1
 801d32a:	46b8      	mov	r8, r7
 801d32c:	9306      	str	r3, [sp, #24]
 801d32e:	4607      	mov	r7, r0
 801d330:	9b01      	ldr	r3, [sp, #4]
 801d332:	4631      	mov	r1, r6
 801d334:	3b01      	subs	r3, #1
 801d336:	4658      	mov	r0, fp
 801d338:	9302      	str	r3, [sp, #8]
 801d33a:	f7ff fa67 	bl	801c80c <quorem>
 801d33e:	4603      	mov	r3, r0
 801d340:	3330      	adds	r3, #48	; 0x30
 801d342:	9004      	str	r0, [sp, #16]
 801d344:	4641      	mov	r1, r8
 801d346:	4658      	mov	r0, fp
 801d348:	9308      	str	r3, [sp, #32]
 801d34a:	f000 fd99 	bl	801de80 <__mcmp>
 801d34e:	463a      	mov	r2, r7
 801d350:	4681      	mov	r9, r0
 801d352:	4631      	mov	r1, r6
 801d354:	4620      	mov	r0, r4
 801d356:	f000 fdaf 	bl	801deb8 <__mdiff>
 801d35a:	68c2      	ldr	r2, [r0, #12]
 801d35c:	9b08      	ldr	r3, [sp, #32]
 801d35e:	4605      	mov	r5, r0
 801d360:	bb02      	cbnz	r2, 801d3a4 <_dtoa_r+0xa7c>
 801d362:	4601      	mov	r1, r0
 801d364:	4658      	mov	r0, fp
 801d366:	f000 fd8b 	bl	801de80 <__mcmp>
 801d36a:	9b08      	ldr	r3, [sp, #32]
 801d36c:	4602      	mov	r2, r0
 801d36e:	4629      	mov	r1, r5
 801d370:	4620      	mov	r0, r4
 801d372:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d376:	f000 fb45 	bl	801da04 <_Bfree>
 801d37a:	9b05      	ldr	r3, [sp, #20]
 801d37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d37e:	9d01      	ldr	r5, [sp, #4]
 801d380:	ea43 0102 	orr.w	r1, r3, r2
 801d384:	9b06      	ldr	r3, [sp, #24]
 801d386:	430b      	orrs	r3, r1
 801d388:	9b08      	ldr	r3, [sp, #32]
 801d38a:	d10d      	bne.n	801d3a8 <_dtoa_r+0xa80>
 801d38c:	2b39      	cmp	r3, #57	; 0x39
 801d38e:	d029      	beq.n	801d3e4 <_dtoa_r+0xabc>
 801d390:	f1b9 0f00 	cmp.w	r9, #0
 801d394:	dd01      	ble.n	801d39a <_dtoa_r+0xa72>
 801d396:	9b04      	ldr	r3, [sp, #16]
 801d398:	3331      	adds	r3, #49	; 0x31
 801d39a:	9a02      	ldr	r2, [sp, #8]
 801d39c:	7013      	strb	r3, [r2, #0]
 801d39e:	e774      	b.n	801d28a <_dtoa_r+0x962>
 801d3a0:	4638      	mov	r0, r7
 801d3a2:	e7b9      	b.n	801d318 <_dtoa_r+0x9f0>
 801d3a4:	2201      	movs	r2, #1
 801d3a6:	e7e2      	b.n	801d36e <_dtoa_r+0xa46>
 801d3a8:	f1b9 0f00 	cmp.w	r9, #0
 801d3ac:	db06      	blt.n	801d3bc <_dtoa_r+0xa94>
 801d3ae:	9905      	ldr	r1, [sp, #20]
 801d3b0:	ea41 0909 	orr.w	r9, r1, r9
 801d3b4:	9906      	ldr	r1, [sp, #24]
 801d3b6:	ea59 0101 	orrs.w	r1, r9, r1
 801d3ba:	d120      	bne.n	801d3fe <_dtoa_r+0xad6>
 801d3bc:	2a00      	cmp	r2, #0
 801d3be:	ddec      	ble.n	801d39a <_dtoa_r+0xa72>
 801d3c0:	4659      	mov	r1, fp
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	9301      	str	r3, [sp, #4]
 801d3c8:	f000 fcee 	bl	801dda8 <__lshift>
 801d3cc:	4631      	mov	r1, r6
 801d3ce:	4683      	mov	fp, r0
 801d3d0:	f000 fd56 	bl	801de80 <__mcmp>
 801d3d4:	2800      	cmp	r0, #0
 801d3d6:	9b01      	ldr	r3, [sp, #4]
 801d3d8:	dc02      	bgt.n	801d3e0 <_dtoa_r+0xab8>
 801d3da:	d1de      	bne.n	801d39a <_dtoa_r+0xa72>
 801d3dc:	07da      	lsls	r2, r3, #31
 801d3de:	d5dc      	bpl.n	801d39a <_dtoa_r+0xa72>
 801d3e0:	2b39      	cmp	r3, #57	; 0x39
 801d3e2:	d1d8      	bne.n	801d396 <_dtoa_r+0xa6e>
 801d3e4:	9a02      	ldr	r2, [sp, #8]
 801d3e6:	2339      	movs	r3, #57	; 0x39
 801d3e8:	7013      	strb	r3, [r2, #0]
 801d3ea:	462b      	mov	r3, r5
 801d3ec:	461d      	mov	r5, r3
 801d3ee:	3b01      	subs	r3, #1
 801d3f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d3f4:	2a39      	cmp	r2, #57	; 0x39
 801d3f6:	d050      	beq.n	801d49a <_dtoa_r+0xb72>
 801d3f8:	3201      	adds	r2, #1
 801d3fa:	701a      	strb	r2, [r3, #0]
 801d3fc:	e745      	b.n	801d28a <_dtoa_r+0x962>
 801d3fe:	2a00      	cmp	r2, #0
 801d400:	dd03      	ble.n	801d40a <_dtoa_r+0xae2>
 801d402:	2b39      	cmp	r3, #57	; 0x39
 801d404:	d0ee      	beq.n	801d3e4 <_dtoa_r+0xabc>
 801d406:	3301      	adds	r3, #1
 801d408:	e7c7      	b.n	801d39a <_dtoa_r+0xa72>
 801d40a:	9a01      	ldr	r2, [sp, #4]
 801d40c:	9907      	ldr	r1, [sp, #28]
 801d40e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d412:	428a      	cmp	r2, r1
 801d414:	d02a      	beq.n	801d46c <_dtoa_r+0xb44>
 801d416:	4659      	mov	r1, fp
 801d418:	2300      	movs	r3, #0
 801d41a:	220a      	movs	r2, #10
 801d41c:	4620      	mov	r0, r4
 801d41e:	f000 fb13 	bl	801da48 <__multadd>
 801d422:	45b8      	cmp	r8, r7
 801d424:	4683      	mov	fp, r0
 801d426:	f04f 0300 	mov.w	r3, #0
 801d42a:	f04f 020a 	mov.w	r2, #10
 801d42e:	4641      	mov	r1, r8
 801d430:	4620      	mov	r0, r4
 801d432:	d107      	bne.n	801d444 <_dtoa_r+0xb1c>
 801d434:	f000 fb08 	bl	801da48 <__multadd>
 801d438:	4680      	mov	r8, r0
 801d43a:	4607      	mov	r7, r0
 801d43c:	9b01      	ldr	r3, [sp, #4]
 801d43e:	3301      	adds	r3, #1
 801d440:	9301      	str	r3, [sp, #4]
 801d442:	e775      	b.n	801d330 <_dtoa_r+0xa08>
 801d444:	f000 fb00 	bl	801da48 <__multadd>
 801d448:	4639      	mov	r1, r7
 801d44a:	4680      	mov	r8, r0
 801d44c:	2300      	movs	r3, #0
 801d44e:	220a      	movs	r2, #10
 801d450:	4620      	mov	r0, r4
 801d452:	f000 faf9 	bl	801da48 <__multadd>
 801d456:	4607      	mov	r7, r0
 801d458:	e7f0      	b.n	801d43c <_dtoa_r+0xb14>
 801d45a:	f1b9 0f00 	cmp.w	r9, #0
 801d45e:	9a00      	ldr	r2, [sp, #0]
 801d460:	bfcc      	ite	gt
 801d462:	464d      	movgt	r5, r9
 801d464:	2501      	movle	r5, #1
 801d466:	4415      	add	r5, r2
 801d468:	f04f 0800 	mov.w	r8, #0
 801d46c:	4659      	mov	r1, fp
 801d46e:	2201      	movs	r2, #1
 801d470:	4620      	mov	r0, r4
 801d472:	9301      	str	r3, [sp, #4]
 801d474:	f000 fc98 	bl	801dda8 <__lshift>
 801d478:	4631      	mov	r1, r6
 801d47a:	4683      	mov	fp, r0
 801d47c:	f000 fd00 	bl	801de80 <__mcmp>
 801d480:	2800      	cmp	r0, #0
 801d482:	dcb2      	bgt.n	801d3ea <_dtoa_r+0xac2>
 801d484:	d102      	bne.n	801d48c <_dtoa_r+0xb64>
 801d486:	9b01      	ldr	r3, [sp, #4]
 801d488:	07db      	lsls	r3, r3, #31
 801d48a:	d4ae      	bmi.n	801d3ea <_dtoa_r+0xac2>
 801d48c:	462b      	mov	r3, r5
 801d48e:	461d      	mov	r5, r3
 801d490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d494:	2a30      	cmp	r2, #48	; 0x30
 801d496:	d0fa      	beq.n	801d48e <_dtoa_r+0xb66>
 801d498:	e6f7      	b.n	801d28a <_dtoa_r+0x962>
 801d49a:	9a00      	ldr	r2, [sp, #0]
 801d49c:	429a      	cmp	r2, r3
 801d49e:	d1a5      	bne.n	801d3ec <_dtoa_r+0xac4>
 801d4a0:	f10a 0a01 	add.w	sl, sl, #1
 801d4a4:	2331      	movs	r3, #49	; 0x31
 801d4a6:	e779      	b.n	801d39c <_dtoa_r+0xa74>
 801d4a8:	4b13      	ldr	r3, [pc, #76]	; (801d4f8 <_dtoa_r+0xbd0>)
 801d4aa:	f7ff baaf 	b.w	801ca0c <_dtoa_r+0xe4>
 801d4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	f47f aa86 	bne.w	801c9c2 <_dtoa_r+0x9a>
 801d4b6:	4b11      	ldr	r3, [pc, #68]	; (801d4fc <_dtoa_r+0xbd4>)
 801d4b8:	f7ff baa8 	b.w	801ca0c <_dtoa_r+0xe4>
 801d4bc:	f1b9 0f00 	cmp.w	r9, #0
 801d4c0:	dc03      	bgt.n	801d4ca <_dtoa_r+0xba2>
 801d4c2:	9b05      	ldr	r3, [sp, #20]
 801d4c4:	2b02      	cmp	r3, #2
 801d4c6:	f73f aec9 	bgt.w	801d25c <_dtoa_r+0x934>
 801d4ca:	9d00      	ldr	r5, [sp, #0]
 801d4cc:	4631      	mov	r1, r6
 801d4ce:	4658      	mov	r0, fp
 801d4d0:	f7ff f99c 	bl	801c80c <quorem>
 801d4d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d4d8:	f805 3b01 	strb.w	r3, [r5], #1
 801d4dc:	9a00      	ldr	r2, [sp, #0]
 801d4de:	1aaa      	subs	r2, r5, r2
 801d4e0:	4591      	cmp	r9, r2
 801d4e2:	ddba      	ble.n	801d45a <_dtoa_r+0xb32>
 801d4e4:	4659      	mov	r1, fp
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	220a      	movs	r2, #10
 801d4ea:	4620      	mov	r0, r4
 801d4ec:	f000 faac 	bl	801da48 <__multadd>
 801d4f0:	4683      	mov	fp, r0
 801d4f2:	e7eb      	b.n	801d4cc <_dtoa_r+0xba4>
 801d4f4:	080205c5 	.word	0x080205c5
 801d4f8:	08020380 	.word	0x08020380
 801d4fc:	08020559 	.word	0x08020559

0801d500 <__sflush_r>:
 801d500:	898a      	ldrh	r2, [r1, #12]
 801d502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d506:	4605      	mov	r5, r0
 801d508:	0710      	lsls	r0, r2, #28
 801d50a:	460c      	mov	r4, r1
 801d50c:	d458      	bmi.n	801d5c0 <__sflush_r+0xc0>
 801d50e:	684b      	ldr	r3, [r1, #4]
 801d510:	2b00      	cmp	r3, #0
 801d512:	dc05      	bgt.n	801d520 <__sflush_r+0x20>
 801d514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d516:	2b00      	cmp	r3, #0
 801d518:	dc02      	bgt.n	801d520 <__sflush_r+0x20>
 801d51a:	2000      	movs	r0, #0
 801d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d522:	2e00      	cmp	r6, #0
 801d524:	d0f9      	beq.n	801d51a <__sflush_r+0x1a>
 801d526:	2300      	movs	r3, #0
 801d528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d52c:	682f      	ldr	r7, [r5, #0]
 801d52e:	602b      	str	r3, [r5, #0]
 801d530:	d032      	beq.n	801d598 <__sflush_r+0x98>
 801d532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d534:	89a3      	ldrh	r3, [r4, #12]
 801d536:	075a      	lsls	r2, r3, #29
 801d538:	d505      	bpl.n	801d546 <__sflush_r+0x46>
 801d53a:	6863      	ldr	r3, [r4, #4]
 801d53c:	1ac0      	subs	r0, r0, r3
 801d53e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d540:	b10b      	cbz	r3, 801d546 <__sflush_r+0x46>
 801d542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d544:	1ac0      	subs	r0, r0, r3
 801d546:	2300      	movs	r3, #0
 801d548:	4602      	mov	r2, r0
 801d54a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d54c:	6a21      	ldr	r1, [r4, #32]
 801d54e:	4628      	mov	r0, r5
 801d550:	47b0      	blx	r6
 801d552:	1c43      	adds	r3, r0, #1
 801d554:	89a3      	ldrh	r3, [r4, #12]
 801d556:	d106      	bne.n	801d566 <__sflush_r+0x66>
 801d558:	6829      	ldr	r1, [r5, #0]
 801d55a:	291d      	cmp	r1, #29
 801d55c:	d82c      	bhi.n	801d5b8 <__sflush_r+0xb8>
 801d55e:	4a2a      	ldr	r2, [pc, #168]	; (801d608 <__sflush_r+0x108>)
 801d560:	40ca      	lsrs	r2, r1
 801d562:	07d6      	lsls	r6, r2, #31
 801d564:	d528      	bpl.n	801d5b8 <__sflush_r+0xb8>
 801d566:	2200      	movs	r2, #0
 801d568:	6062      	str	r2, [r4, #4]
 801d56a:	04d9      	lsls	r1, r3, #19
 801d56c:	6922      	ldr	r2, [r4, #16]
 801d56e:	6022      	str	r2, [r4, #0]
 801d570:	d504      	bpl.n	801d57c <__sflush_r+0x7c>
 801d572:	1c42      	adds	r2, r0, #1
 801d574:	d101      	bne.n	801d57a <__sflush_r+0x7a>
 801d576:	682b      	ldr	r3, [r5, #0]
 801d578:	b903      	cbnz	r3, 801d57c <__sflush_r+0x7c>
 801d57a:	6560      	str	r0, [r4, #84]	; 0x54
 801d57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d57e:	602f      	str	r7, [r5, #0]
 801d580:	2900      	cmp	r1, #0
 801d582:	d0ca      	beq.n	801d51a <__sflush_r+0x1a>
 801d584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d588:	4299      	cmp	r1, r3
 801d58a:	d002      	beq.n	801d592 <__sflush_r+0x92>
 801d58c:	4628      	mov	r0, r5
 801d58e:	f7fe f975 	bl	801b87c <_free_r>
 801d592:	2000      	movs	r0, #0
 801d594:	6360      	str	r0, [r4, #52]	; 0x34
 801d596:	e7c1      	b.n	801d51c <__sflush_r+0x1c>
 801d598:	6a21      	ldr	r1, [r4, #32]
 801d59a:	2301      	movs	r3, #1
 801d59c:	4628      	mov	r0, r5
 801d59e:	47b0      	blx	r6
 801d5a0:	1c41      	adds	r1, r0, #1
 801d5a2:	d1c7      	bne.n	801d534 <__sflush_r+0x34>
 801d5a4:	682b      	ldr	r3, [r5, #0]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d0c4      	beq.n	801d534 <__sflush_r+0x34>
 801d5aa:	2b1d      	cmp	r3, #29
 801d5ac:	d001      	beq.n	801d5b2 <__sflush_r+0xb2>
 801d5ae:	2b16      	cmp	r3, #22
 801d5b0:	d101      	bne.n	801d5b6 <__sflush_r+0xb6>
 801d5b2:	602f      	str	r7, [r5, #0]
 801d5b4:	e7b1      	b.n	801d51a <__sflush_r+0x1a>
 801d5b6:	89a3      	ldrh	r3, [r4, #12]
 801d5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5bc:	81a3      	strh	r3, [r4, #12]
 801d5be:	e7ad      	b.n	801d51c <__sflush_r+0x1c>
 801d5c0:	690f      	ldr	r7, [r1, #16]
 801d5c2:	2f00      	cmp	r7, #0
 801d5c4:	d0a9      	beq.n	801d51a <__sflush_r+0x1a>
 801d5c6:	0793      	lsls	r3, r2, #30
 801d5c8:	680e      	ldr	r6, [r1, #0]
 801d5ca:	bf08      	it	eq
 801d5cc:	694b      	ldreq	r3, [r1, #20]
 801d5ce:	600f      	str	r7, [r1, #0]
 801d5d0:	bf18      	it	ne
 801d5d2:	2300      	movne	r3, #0
 801d5d4:	eba6 0807 	sub.w	r8, r6, r7
 801d5d8:	608b      	str	r3, [r1, #8]
 801d5da:	f1b8 0f00 	cmp.w	r8, #0
 801d5de:	dd9c      	ble.n	801d51a <__sflush_r+0x1a>
 801d5e0:	6a21      	ldr	r1, [r4, #32]
 801d5e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d5e4:	4643      	mov	r3, r8
 801d5e6:	463a      	mov	r2, r7
 801d5e8:	4628      	mov	r0, r5
 801d5ea:	47b0      	blx	r6
 801d5ec:	2800      	cmp	r0, #0
 801d5ee:	dc06      	bgt.n	801d5fe <__sflush_r+0xfe>
 801d5f0:	89a3      	ldrh	r3, [r4, #12]
 801d5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5f6:	81a3      	strh	r3, [r4, #12]
 801d5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801d5fc:	e78e      	b.n	801d51c <__sflush_r+0x1c>
 801d5fe:	4407      	add	r7, r0
 801d600:	eba8 0800 	sub.w	r8, r8, r0
 801d604:	e7e9      	b.n	801d5da <__sflush_r+0xda>
 801d606:	bf00      	nop
 801d608:	20400001 	.word	0x20400001

0801d60c <_fflush_r>:
 801d60c:	b538      	push	{r3, r4, r5, lr}
 801d60e:	690b      	ldr	r3, [r1, #16]
 801d610:	4605      	mov	r5, r0
 801d612:	460c      	mov	r4, r1
 801d614:	b913      	cbnz	r3, 801d61c <_fflush_r+0x10>
 801d616:	2500      	movs	r5, #0
 801d618:	4628      	mov	r0, r5
 801d61a:	bd38      	pop	{r3, r4, r5, pc}
 801d61c:	b118      	cbz	r0, 801d626 <_fflush_r+0x1a>
 801d61e:	6983      	ldr	r3, [r0, #24]
 801d620:	b90b      	cbnz	r3, 801d626 <_fflush_r+0x1a>
 801d622:	f000 f887 	bl	801d734 <__sinit>
 801d626:	4b14      	ldr	r3, [pc, #80]	; (801d678 <_fflush_r+0x6c>)
 801d628:	429c      	cmp	r4, r3
 801d62a:	d11b      	bne.n	801d664 <_fflush_r+0x58>
 801d62c:	686c      	ldr	r4, [r5, #4]
 801d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d632:	2b00      	cmp	r3, #0
 801d634:	d0ef      	beq.n	801d616 <_fflush_r+0xa>
 801d636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d638:	07d0      	lsls	r0, r2, #31
 801d63a:	d404      	bmi.n	801d646 <_fflush_r+0x3a>
 801d63c:	0599      	lsls	r1, r3, #22
 801d63e:	d402      	bmi.n	801d646 <_fflush_r+0x3a>
 801d640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d642:	f000 f92c 	bl	801d89e <__retarget_lock_acquire_recursive>
 801d646:	4628      	mov	r0, r5
 801d648:	4621      	mov	r1, r4
 801d64a:	f7ff ff59 	bl	801d500 <__sflush_r>
 801d64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d650:	07da      	lsls	r2, r3, #31
 801d652:	4605      	mov	r5, r0
 801d654:	d4e0      	bmi.n	801d618 <_fflush_r+0xc>
 801d656:	89a3      	ldrh	r3, [r4, #12]
 801d658:	059b      	lsls	r3, r3, #22
 801d65a:	d4dd      	bmi.n	801d618 <_fflush_r+0xc>
 801d65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d65e:	f000 f91f 	bl	801d8a0 <__retarget_lock_release_recursive>
 801d662:	e7d9      	b.n	801d618 <_fflush_r+0xc>
 801d664:	4b05      	ldr	r3, [pc, #20]	; (801d67c <_fflush_r+0x70>)
 801d666:	429c      	cmp	r4, r3
 801d668:	d101      	bne.n	801d66e <_fflush_r+0x62>
 801d66a:	68ac      	ldr	r4, [r5, #8]
 801d66c:	e7df      	b.n	801d62e <_fflush_r+0x22>
 801d66e:	4b04      	ldr	r3, [pc, #16]	; (801d680 <_fflush_r+0x74>)
 801d670:	429c      	cmp	r4, r3
 801d672:	bf08      	it	eq
 801d674:	68ec      	ldreq	r4, [r5, #12]
 801d676:	e7da      	b.n	801d62e <_fflush_r+0x22>
 801d678:	080205f8 	.word	0x080205f8
 801d67c:	08020618 	.word	0x08020618
 801d680:	080205d8 	.word	0x080205d8

0801d684 <std>:
 801d684:	2300      	movs	r3, #0
 801d686:	b510      	push	{r4, lr}
 801d688:	4604      	mov	r4, r0
 801d68a:	e9c0 3300 	strd	r3, r3, [r0]
 801d68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d692:	6083      	str	r3, [r0, #8]
 801d694:	8181      	strh	r1, [r0, #12]
 801d696:	6643      	str	r3, [r0, #100]	; 0x64
 801d698:	81c2      	strh	r2, [r0, #14]
 801d69a:	6183      	str	r3, [r0, #24]
 801d69c:	4619      	mov	r1, r3
 801d69e:	2208      	movs	r2, #8
 801d6a0:	305c      	adds	r0, #92	; 0x5c
 801d6a2:	f7fe f8e3 	bl	801b86c <memset>
 801d6a6:	4b05      	ldr	r3, [pc, #20]	; (801d6bc <std+0x38>)
 801d6a8:	6263      	str	r3, [r4, #36]	; 0x24
 801d6aa:	4b05      	ldr	r3, [pc, #20]	; (801d6c0 <std+0x3c>)
 801d6ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801d6ae:	4b05      	ldr	r3, [pc, #20]	; (801d6c4 <std+0x40>)
 801d6b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d6b2:	4b05      	ldr	r3, [pc, #20]	; (801d6c8 <std+0x44>)
 801d6b4:	6224      	str	r4, [r4, #32]
 801d6b6:	6323      	str	r3, [r4, #48]	; 0x30
 801d6b8:	bd10      	pop	{r4, pc}
 801d6ba:	bf00      	nop
 801d6bc:	0801e609 	.word	0x0801e609
 801d6c0:	0801e62b 	.word	0x0801e62b
 801d6c4:	0801e663 	.word	0x0801e663
 801d6c8:	0801e687 	.word	0x0801e687

0801d6cc <_cleanup_r>:
 801d6cc:	4901      	ldr	r1, [pc, #4]	; (801d6d4 <_cleanup_r+0x8>)
 801d6ce:	f000 b8c1 	b.w	801d854 <_fwalk_reent>
 801d6d2:	bf00      	nop
 801d6d4:	0801d60d 	.word	0x0801d60d

0801d6d8 <__sfmoreglue>:
 801d6d8:	b570      	push	{r4, r5, r6, lr}
 801d6da:	1e4a      	subs	r2, r1, #1
 801d6dc:	2568      	movs	r5, #104	; 0x68
 801d6de:	4355      	muls	r5, r2
 801d6e0:	460e      	mov	r6, r1
 801d6e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d6e6:	f7fe f919 	bl	801b91c <_malloc_r>
 801d6ea:	4604      	mov	r4, r0
 801d6ec:	b140      	cbz	r0, 801d700 <__sfmoreglue+0x28>
 801d6ee:	2100      	movs	r1, #0
 801d6f0:	e9c0 1600 	strd	r1, r6, [r0]
 801d6f4:	300c      	adds	r0, #12
 801d6f6:	60a0      	str	r0, [r4, #8]
 801d6f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d6fc:	f7fe f8b6 	bl	801b86c <memset>
 801d700:	4620      	mov	r0, r4
 801d702:	bd70      	pop	{r4, r5, r6, pc}

0801d704 <__sfp_lock_acquire>:
 801d704:	4801      	ldr	r0, [pc, #4]	; (801d70c <__sfp_lock_acquire+0x8>)
 801d706:	f000 b8ca 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801d70a:	bf00      	nop
 801d70c:	2000ba14 	.word	0x2000ba14

0801d710 <__sfp_lock_release>:
 801d710:	4801      	ldr	r0, [pc, #4]	; (801d718 <__sfp_lock_release+0x8>)
 801d712:	f000 b8c5 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801d716:	bf00      	nop
 801d718:	2000ba14 	.word	0x2000ba14

0801d71c <__sinit_lock_acquire>:
 801d71c:	4801      	ldr	r0, [pc, #4]	; (801d724 <__sinit_lock_acquire+0x8>)
 801d71e:	f000 b8be 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801d722:	bf00      	nop
 801d724:	2000ba0f 	.word	0x2000ba0f

0801d728 <__sinit_lock_release>:
 801d728:	4801      	ldr	r0, [pc, #4]	; (801d730 <__sinit_lock_release+0x8>)
 801d72a:	f000 b8b9 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801d72e:	bf00      	nop
 801d730:	2000ba0f 	.word	0x2000ba0f

0801d734 <__sinit>:
 801d734:	b510      	push	{r4, lr}
 801d736:	4604      	mov	r4, r0
 801d738:	f7ff fff0 	bl	801d71c <__sinit_lock_acquire>
 801d73c:	69a3      	ldr	r3, [r4, #24]
 801d73e:	b11b      	cbz	r3, 801d748 <__sinit+0x14>
 801d740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d744:	f7ff bff0 	b.w	801d728 <__sinit_lock_release>
 801d748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d74c:	6523      	str	r3, [r4, #80]	; 0x50
 801d74e:	4b13      	ldr	r3, [pc, #76]	; (801d79c <__sinit+0x68>)
 801d750:	4a13      	ldr	r2, [pc, #76]	; (801d7a0 <__sinit+0x6c>)
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	62a2      	str	r2, [r4, #40]	; 0x28
 801d756:	42a3      	cmp	r3, r4
 801d758:	bf04      	itt	eq
 801d75a:	2301      	moveq	r3, #1
 801d75c:	61a3      	streq	r3, [r4, #24]
 801d75e:	4620      	mov	r0, r4
 801d760:	f000 f820 	bl	801d7a4 <__sfp>
 801d764:	6060      	str	r0, [r4, #4]
 801d766:	4620      	mov	r0, r4
 801d768:	f000 f81c 	bl	801d7a4 <__sfp>
 801d76c:	60a0      	str	r0, [r4, #8]
 801d76e:	4620      	mov	r0, r4
 801d770:	f000 f818 	bl	801d7a4 <__sfp>
 801d774:	2200      	movs	r2, #0
 801d776:	60e0      	str	r0, [r4, #12]
 801d778:	2104      	movs	r1, #4
 801d77a:	6860      	ldr	r0, [r4, #4]
 801d77c:	f7ff ff82 	bl	801d684 <std>
 801d780:	68a0      	ldr	r0, [r4, #8]
 801d782:	2201      	movs	r2, #1
 801d784:	2109      	movs	r1, #9
 801d786:	f7ff ff7d 	bl	801d684 <std>
 801d78a:	68e0      	ldr	r0, [r4, #12]
 801d78c:	2202      	movs	r2, #2
 801d78e:	2112      	movs	r1, #18
 801d790:	f7ff ff78 	bl	801d684 <std>
 801d794:	2301      	movs	r3, #1
 801d796:	61a3      	str	r3, [r4, #24]
 801d798:	e7d2      	b.n	801d740 <__sinit+0xc>
 801d79a:	bf00      	nop
 801d79c:	0802036c 	.word	0x0802036c
 801d7a0:	0801d6cd 	.word	0x0801d6cd

0801d7a4 <__sfp>:
 801d7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7a6:	4607      	mov	r7, r0
 801d7a8:	f7ff ffac 	bl	801d704 <__sfp_lock_acquire>
 801d7ac:	4b1e      	ldr	r3, [pc, #120]	; (801d828 <__sfp+0x84>)
 801d7ae:	681e      	ldr	r6, [r3, #0]
 801d7b0:	69b3      	ldr	r3, [r6, #24]
 801d7b2:	b913      	cbnz	r3, 801d7ba <__sfp+0x16>
 801d7b4:	4630      	mov	r0, r6
 801d7b6:	f7ff ffbd 	bl	801d734 <__sinit>
 801d7ba:	3648      	adds	r6, #72	; 0x48
 801d7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d7c0:	3b01      	subs	r3, #1
 801d7c2:	d503      	bpl.n	801d7cc <__sfp+0x28>
 801d7c4:	6833      	ldr	r3, [r6, #0]
 801d7c6:	b30b      	cbz	r3, 801d80c <__sfp+0x68>
 801d7c8:	6836      	ldr	r6, [r6, #0]
 801d7ca:	e7f7      	b.n	801d7bc <__sfp+0x18>
 801d7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d7d0:	b9d5      	cbnz	r5, 801d808 <__sfp+0x64>
 801d7d2:	4b16      	ldr	r3, [pc, #88]	; (801d82c <__sfp+0x88>)
 801d7d4:	60e3      	str	r3, [r4, #12]
 801d7d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d7da:	6665      	str	r5, [r4, #100]	; 0x64
 801d7dc:	f000 f85e 	bl	801d89c <__retarget_lock_init_recursive>
 801d7e0:	f7ff ff96 	bl	801d710 <__sfp_lock_release>
 801d7e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d7e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d7ec:	6025      	str	r5, [r4, #0]
 801d7ee:	61a5      	str	r5, [r4, #24]
 801d7f0:	2208      	movs	r2, #8
 801d7f2:	4629      	mov	r1, r5
 801d7f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d7f8:	f7fe f838 	bl	801b86c <memset>
 801d7fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d804:	4620      	mov	r0, r4
 801d806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d808:	3468      	adds	r4, #104	; 0x68
 801d80a:	e7d9      	b.n	801d7c0 <__sfp+0x1c>
 801d80c:	2104      	movs	r1, #4
 801d80e:	4638      	mov	r0, r7
 801d810:	f7ff ff62 	bl	801d6d8 <__sfmoreglue>
 801d814:	4604      	mov	r4, r0
 801d816:	6030      	str	r0, [r6, #0]
 801d818:	2800      	cmp	r0, #0
 801d81a:	d1d5      	bne.n	801d7c8 <__sfp+0x24>
 801d81c:	f7ff ff78 	bl	801d710 <__sfp_lock_release>
 801d820:	230c      	movs	r3, #12
 801d822:	603b      	str	r3, [r7, #0]
 801d824:	e7ee      	b.n	801d804 <__sfp+0x60>
 801d826:	bf00      	nop
 801d828:	0802036c 	.word	0x0802036c
 801d82c:	ffff0001 	.word	0xffff0001

0801d830 <fiprintf>:
 801d830:	b40e      	push	{r1, r2, r3}
 801d832:	b503      	push	{r0, r1, lr}
 801d834:	4601      	mov	r1, r0
 801d836:	ab03      	add	r3, sp, #12
 801d838:	4805      	ldr	r0, [pc, #20]	; (801d850 <fiprintf+0x20>)
 801d83a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d83e:	6800      	ldr	r0, [r0, #0]
 801d840:	9301      	str	r3, [sp, #4]
 801d842:	f000 fdb1 	bl	801e3a8 <_vfiprintf_r>
 801d846:	b002      	add	sp, #8
 801d848:	f85d eb04 	ldr.w	lr, [sp], #4
 801d84c:	b003      	add	sp, #12
 801d84e:	4770      	bx	lr
 801d850:	200001b0 	.word	0x200001b0

0801d854 <_fwalk_reent>:
 801d854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d858:	4606      	mov	r6, r0
 801d85a:	4688      	mov	r8, r1
 801d85c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d860:	2700      	movs	r7, #0
 801d862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d866:	f1b9 0901 	subs.w	r9, r9, #1
 801d86a:	d505      	bpl.n	801d878 <_fwalk_reent+0x24>
 801d86c:	6824      	ldr	r4, [r4, #0]
 801d86e:	2c00      	cmp	r4, #0
 801d870:	d1f7      	bne.n	801d862 <_fwalk_reent+0xe>
 801d872:	4638      	mov	r0, r7
 801d874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d878:	89ab      	ldrh	r3, [r5, #12]
 801d87a:	2b01      	cmp	r3, #1
 801d87c:	d907      	bls.n	801d88e <_fwalk_reent+0x3a>
 801d87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d882:	3301      	adds	r3, #1
 801d884:	d003      	beq.n	801d88e <_fwalk_reent+0x3a>
 801d886:	4629      	mov	r1, r5
 801d888:	4630      	mov	r0, r6
 801d88a:	47c0      	blx	r8
 801d88c:	4307      	orrs	r7, r0
 801d88e:	3568      	adds	r5, #104	; 0x68
 801d890:	e7e9      	b.n	801d866 <_fwalk_reent+0x12>
	...

0801d894 <_localeconv_r>:
 801d894:	4800      	ldr	r0, [pc, #0]	; (801d898 <_localeconv_r+0x4>)
 801d896:	4770      	bx	lr
 801d898:	20000304 	.word	0x20000304

0801d89c <__retarget_lock_init_recursive>:
 801d89c:	4770      	bx	lr

0801d89e <__retarget_lock_acquire_recursive>:
 801d89e:	4770      	bx	lr

0801d8a0 <__retarget_lock_release_recursive>:
 801d8a0:	4770      	bx	lr

0801d8a2 <__swhatbuf_r>:
 801d8a2:	b570      	push	{r4, r5, r6, lr}
 801d8a4:	460e      	mov	r6, r1
 801d8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8aa:	2900      	cmp	r1, #0
 801d8ac:	b096      	sub	sp, #88	; 0x58
 801d8ae:	4614      	mov	r4, r2
 801d8b0:	461d      	mov	r5, r3
 801d8b2:	da07      	bge.n	801d8c4 <__swhatbuf_r+0x22>
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	602b      	str	r3, [r5, #0]
 801d8b8:	89b3      	ldrh	r3, [r6, #12]
 801d8ba:	061a      	lsls	r2, r3, #24
 801d8bc:	d410      	bmi.n	801d8e0 <__swhatbuf_r+0x3e>
 801d8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8c2:	e00e      	b.n	801d8e2 <__swhatbuf_r+0x40>
 801d8c4:	466a      	mov	r2, sp
 801d8c6:	f000 ff0d 	bl	801e6e4 <_fstat_r>
 801d8ca:	2800      	cmp	r0, #0
 801d8cc:	dbf2      	blt.n	801d8b4 <__swhatbuf_r+0x12>
 801d8ce:	9a01      	ldr	r2, [sp, #4]
 801d8d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d8d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d8d8:	425a      	negs	r2, r3
 801d8da:	415a      	adcs	r2, r3
 801d8dc:	602a      	str	r2, [r5, #0]
 801d8de:	e7ee      	b.n	801d8be <__swhatbuf_r+0x1c>
 801d8e0:	2340      	movs	r3, #64	; 0x40
 801d8e2:	2000      	movs	r0, #0
 801d8e4:	6023      	str	r3, [r4, #0]
 801d8e6:	b016      	add	sp, #88	; 0x58
 801d8e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d8ec <__smakebuf_r>:
 801d8ec:	898b      	ldrh	r3, [r1, #12]
 801d8ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d8f0:	079d      	lsls	r5, r3, #30
 801d8f2:	4606      	mov	r6, r0
 801d8f4:	460c      	mov	r4, r1
 801d8f6:	d507      	bpl.n	801d908 <__smakebuf_r+0x1c>
 801d8f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d8fc:	6023      	str	r3, [r4, #0]
 801d8fe:	6123      	str	r3, [r4, #16]
 801d900:	2301      	movs	r3, #1
 801d902:	6163      	str	r3, [r4, #20]
 801d904:	b002      	add	sp, #8
 801d906:	bd70      	pop	{r4, r5, r6, pc}
 801d908:	ab01      	add	r3, sp, #4
 801d90a:	466a      	mov	r2, sp
 801d90c:	f7ff ffc9 	bl	801d8a2 <__swhatbuf_r>
 801d910:	9900      	ldr	r1, [sp, #0]
 801d912:	4605      	mov	r5, r0
 801d914:	4630      	mov	r0, r6
 801d916:	f7fe f801 	bl	801b91c <_malloc_r>
 801d91a:	b948      	cbnz	r0, 801d930 <__smakebuf_r+0x44>
 801d91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d920:	059a      	lsls	r2, r3, #22
 801d922:	d4ef      	bmi.n	801d904 <__smakebuf_r+0x18>
 801d924:	f023 0303 	bic.w	r3, r3, #3
 801d928:	f043 0302 	orr.w	r3, r3, #2
 801d92c:	81a3      	strh	r3, [r4, #12]
 801d92e:	e7e3      	b.n	801d8f8 <__smakebuf_r+0xc>
 801d930:	4b0d      	ldr	r3, [pc, #52]	; (801d968 <__smakebuf_r+0x7c>)
 801d932:	62b3      	str	r3, [r6, #40]	; 0x28
 801d934:	89a3      	ldrh	r3, [r4, #12]
 801d936:	6020      	str	r0, [r4, #0]
 801d938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d93c:	81a3      	strh	r3, [r4, #12]
 801d93e:	9b00      	ldr	r3, [sp, #0]
 801d940:	6163      	str	r3, [r4, #20]
 801d942:	9b01      	ldr	r3, [sp, #4]
 801d944:	6120      	str	r0, [r4, #16]
 801d946:	b15b      	cbz	r3, 801d960 <__smakebuf_r+0x74>
 801d948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d94c:	4630      	mov	r0, r6
 801d94e:	f000 fedb 	bl	801e708 <_isatty_r>
 801d952:	b128      	cbz	r0, 801d960 <__smakebuf_r+0x74>
 801d954:	89a3      	ldrh	r3, [r4, #12]
 801d956:	f023 0303 	bic.w	r3, r3, #3
 801d95a:	f043 0301 	orr.w	r3, r3, #1
 801d95e:	81a3      	strh	r3, [r4, #12]
 801d960:	89a0      	ldrh	r0, [r4, #12]
 801d962:	4305      	orrs	r5, r0
 801d964:	81a5      	strh	r5, [r4, #12]
 801d966:	e7cd      	b.n	801d904 <__smakebuf_r+0x18>
 801d968:	0801d6cd 	.word	0x0801d6cd

0801d96c <__malloc_lock>:
 801d96c:	4801      	ldr	r0, [pc, #4]	; (801d974 <__malloc_lock+0x8>)
 801d96e:	f7ff bf96 	b.w	801d89e <__retarget_lock_acquire_recursive>
 801d972:	bf00      	nop
 801d974:	2000ba10 	.word	0x2000ba10

0801d978 <__malloc_unlock>:
 801d978:	4801      	ldr	r0, [pc, #4]	; (801d980 <__malloc_unlock+0x8>)
 801d97a:	f7ff bf91 	b.w	801d8a0 <__retarget_lock_release_recursive>
 801d97e:	bf00      	nop
 801d980:	2000ba10 	.word	0x2000ba10

0801d984 <_Balloc>:
 801d984:	b570      	push	{r4, r5, r6, lr}
 801d986:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d988:	4604      	mov	r4, r0
 801d98a:	460d      	mov	r5, r1
 801d98c:	b976      	cbnz	r6, 801d9ac <_Balloc+0x28>
 801d98e:	2010      	movs	r0, #16
 801d990:	f7fd ff56 	bl	801b840 <malloc>
 801d994:	4602      	mov	r2, r0
 801d996:	6260      	str	r0, [r4, #36]	; 0x24
 801d998:	b920      	cbnz	r0, 801d9a4 <_Balloc+0x20>
 801d99a:	4b18      	ldr	r3, [pc, #96]	; (801d9fc <_Balloc+0x78>)
 801d99c:	4818      	ldr	r0, [pc, #96]	; (801da00 <_Balloc+0x7c>)
 801d99e:	2166      	movs	r1, #102	; 0x66
 801d9a0:	f7fe ff16 	bl	801c7d0 <__assert_func>
 801d9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9a8:	6006      	str	r6, [r0, #0]
 801d9aa:	60c6      	str	r6, [r0, #12]
 801d9ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d9ae:	68f3      	ldr	r3, [r6, #12]
 801d9b0:	b183      	cbz	r3, 801d9d4 <_Balloc+0x50>
 801d9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9b4:	68db      	ldr	r3, [r3, #12]
 801d9b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d9ba:	b9b8      	cbnz	r0, 801d9ec <_Balloc+0x68>
 801d9bc:	2101      	movs	r1, #1
 801d9be:	fa01 f605 	lsl.w	r6, r1, r5
 801d9c2:	1d72      	adds	r2, r6, #5
 801d9c4:	0092      	lsls	r2, r2, #2
 801d9c6:	4620      	mov	r0, r4
 801d9c8:	f000 fb5a 	bl	801e080 <_calloc_r>
 801d9cc:	b160      	cbz	r0, 801d9e8 <_Balloc+0x64>
 801d9ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d9d2:	e00e      	b.n	801d9f2 <_Balloc+0x6e>
 801d9d4:	2221      	movs	r2, #33	; 0x21
 801d9d6:	2104      	movs	r1, #4
 801d9d8:	4620      	mov	r0, r4
 801d9da:	f000 fb51 	bl	801e080 <_calloc_r>
 801d9de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9e0:	60f0      	str	r0, [r6, #12]
 801d9e2:	68db      	ldr	r3, [r3, #12]
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d1e4      	bne.n	801d9b2 <_Balloc+0x2e>
 801d9e8:	2000      	movs	r0, #0
 801d9ea:	bd70      	pop	{r4, r5, r6, pc}
 801d9ec:	6802      	ldr	r2, [r0, #0]
 801d9ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d9f8:	e7f7      	b.n	801d9ea <_Balloc+0x66>
 801d9fa:	bf00      	nop
 801d9fc:	080203a4 	.word	0x080203a4
 801da00:	08020638 	.word	0x08020638

0801da04 <_Bfree>:
 801da04:	b570      	push	{r4, r5, r6, lr}
 801da06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da08:	4605      	mov	r5, r0
 801da0a:	460c      	mov	r4, r1
 801da0c:	b976      	cbnz	r6, 801da2c <_Bfree+0x28>
 801da0e:	2010      	movs	r0, #16
 801da10:	f7fd ff16 	bl	801b840 <malloc>
 801da14:	4602      	mov	r2, r0
 801da16:	6268      	str	r0, [r5, #36]	; 0x24
 801da18:	b920      	cbnz	r0, 801da24 <_Bfree+0x20>
 801da1a:	4b09      	ldr	r3, [pc, #36]	; (801da40 <_Bfree+0x3c>)
 801da1c:	4809      	ldr	r0, [pc, #36]	; (801da44 <_Bfree+0x40>)
 801da1e:	218a      	movs	r1, #138	; 0x8a
 801da20:	f7fe fed6 	bl	801c7d0 <__assert_func>
 801da24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da28:	6006      	str	r6, [r0, #0]
 801da2a:	60c6      	str	r6, [r0, #12]
 801da2c:	b13c      	cbz	r4, 801da3e <_Bfree+0x3a>
 801da2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801da30:	6862      	ldr	r2, [r4, #4]
 801da32:	68db      	ldr	r3, [r3, #12]
 801da34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da38:	6021      	str	r1, [r4, #0]
 801da3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da3e:	bd70      	pop	{r4, r5, r6, pc}
 801da40:	080203a4 	.word	0x080203a4
 801da44:	08020638 	.word	0x08020638

0801da48 <__multadd>:
 801da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da4c:	690e      	ldr	r6, [r1, #16]
 801da4e:	4607      	mov	r7, r0
 801da50:	4698      	mov	r8, r3
 801da52:	460c      	mov	r4, r1
 801da54:	f101 0014 	add.w	r0, r1, #20
 801da58:	2300      	movs	r3, #0
 801da5a:	6805      	ldr	r5, [r0, #0]
 801da5c:	b2a9      	uxth	r1, r5
 801da5e:	fb02 8101 	mla	r1, r2, r1, r8
 801da62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801da66:	0c2d      	lsrs	r5, r5, #16
 801da68:	fb02 c505 	mla	r5, r2, r5, ip
 801da6c:	b289      	uxth	r1, r1
 801da6e:	3301      	adds	r3, #1
 801da70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801da74:	429e      	cmp	r6, r3
 801da76:	f840 1b04 	str.w	r1, [r0], #4
 801da7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801da7e:	dcec      	bgt.n	801da5a <__multadd+0x12>
 801da80:	f1b8 0f00 	cmp.w	r8, #0
 801da84:	d022      	beq.n	801dacc <__multadd+0x84>
 801da86:	68a3      	ldr	r3, [r4, #8]
 801da88:	42b3      	cmp	r3, r6
 801da8a:	dc19      	bgt.n	801dac0 <__multadd+0x78>
 801da8c:	6861      	ldr	r1, [r4, #4]
 801da8e:	4638      	mov	r0, r7
 801da90:	3101      	adds	r1, #1
 801da92:	f7ff ff77 	bl	801d984 <_Balloc>
 801da96:	4605      	mov	r5, r0
 801da98:	b928      	cbnz	r0, 801daa6 <__multadd+0x5e>
 801da9a:	4602      	mov	r2, r0
 801da9c:	4b0d      	ldr	r3, [pc, #52]	; (801dad4 <__multadd+0x8c>)
 801da9e:	480e      	ldr	r0, [pc, #56]	; (801dad8 <__multadd+0x90>)
 801daa0:	21b5      	movs	r1, #181	; 0xb5
 801daa2:	f7fe fe95 	bl	801c7d0 <__assert_func>
 801daa6:	6922      	ldr	r2, [r4, #16]
 801daa8:	3202      	adds	r2, #2
 801daaa:	f104 010c 	add.w	r1, r4, #12
 801daae:	0092      	lsls	r2, r2, #2
 801dab0:	300c      	adds	r0, #12
 801dab2:	f7fd fecd 	bl	801b850 <memcpy>
 801dab6:	4621      	mov	r1, r4
 801dab8:	4638      	mov	r0, r7
 801daba:	f7ff ffa3 	bl	801da04 <_Bfree>
 801dabe:	462c      	mov	r4, r5
 801dac0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801dac4:	3601      	adds	r6, #1
 801dac6:	f8c3 8014 	str.w	r8, [r3, #20]
 801daca:	6126      	str	r6, [r4, #16]
 801dacc:	4620      	mov	r0, r4
 801dace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dad2:	bf00      	nop
 801dad4:	080205c5 	.word	0x080205c5
 801dad8:	08020638 	.word	0x08020638

0801dadc <__hi0bits>:
 801dadc:	0c03      	lsrs	r3, r0, #16
 801dade:	041b      	lsls	r3, r3, #16
 801dae0:	b9d3      	cbnz	r3, 801db18 <__hi0bits+0x3c>
 801dae2:	0400      	lsls	r0, r0, #16
 801dae4:	2310      	movs	r3, #16
 801dae6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801daea:	bf04      	itt	eq
 801daec:	0200      	lsleq	r0, r0, #8
 801daee:	3308      	addeq	r3, #8
 801daf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801daf4:	bf04      	itt	eq
 801daf6:	0100      	lsleq	r0, r0, #4
 801daf8:	3304      	addeq	r3, #4
 801dafa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dafe:	bf04      	itt	eq
 801db00:	0080      	lsleq	r0, r0, #2
 801db02:	3302      	addeq	r3, #2
 801db04:	2800      	cmp	r0, #0
 801db06:	db05      	blt.n	801db14 <__hi0bits+0x38>
 801db08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801db0c:	f103 0301 	add.w	r3, r3, #1
 801db10:	bf08      	it	eq
 801db12:	2320      	moveq	r3, #32
 801db14:	4618      	mov	r0, r3
 801db16:	4770      	bx	lr
 801db18:	2300      	movs	r3, #0
 801db1a:	e7e4      	b.n	801dae6 <__hi0bits+0xa>

0801db1c <__lo0bits>:
 801db1c:	6803      	ldr	r3, [r0, #0]
 801db1e:	f013 0207 	ands.w	r2, r3, #7
 801db22:	4601      	mov	r1, r0
 801db24:	d00b      	beq.n	801db3e <__lo0bits+0x22>
 801db26:	07da      	lsls	r2, r3, #31
 801db28:	d424      	bmi.n	801db74 <__lo0bits+0x58>
 801db2a:	0798      	lsls	r0, r3, #30
 801db2c:	bf49      	itett	mi
 801db2e:	085b      	lsrmi	r3, r3, #1
 801db30:	089b      	lsrpl	r3, r3, #2
 801db32:	2001      	movmi	r0, #1
 801db34:	600b      	strmi	r3, [r1, #0]
 801db36:	bf5c      	itt	pl
 801db38:	600b      	strpl	r3, [r1, #0]
 801db3a:	2002      	movpl	r0, #2
 801db3c:	4770      	bx	lr
 801db3e:	b298      	uxth	r0, r3
 801db40:	b9b0      	cbnz	r0, 801db70 <__lo0bits+0x54>
 801db42:	0c1b      	lsrs	r3, r3, #16
 801db44:	2010      	movs	r0, #16
 801db46:	f013 0fff 	tst.w	r3, #255	; 0xff
 801db4a:	bf04      	itt	eq
 801db4c:	0a1b      	lsreq	r3, r3, #8
 801db4e:	3008      	addeq	r0, #8
 801db50:	071a      	lsls	r2, r3, #28
 801db52:	bf04      	itt	eq
 801db54:	091b      	lsreq	r3, r3, #4
 801db56:	3004      	addeq	r0, #4
 801db58:	079a      	lsls	r2, r3, #30
 801db5a:	bf04      	itt	eq
 801db5c:	089b      	lsreq	r3, r3, #2
 801db5e:	3002      	addeq	r0, #2
 801db60:	07da      	lsls	r2, r3, #31
 801db62:	d403      	bmi.n	801db6c <__lo0bits+0x50>
 801db64:	085b      	lsrs	r3, r3, #1
 801db66:	f100 0001 	add.w	r0, r0, #1
 801db6a:	d005      	beq.n	801db78 <__lo0bits+0x5c>
 801db6c:	600b      	str	r3, [r1, #0]
 801db6e:	4770      	bx	lr
 801db70:	4610      	mov	r0, r2
 801db72:	e7e8      	b.n	801db46 <__lo0bits+0x2a>
 801db74:	2000      	movs	r0, #0
 801db76:	4770      	bx	lr
 801db78:	2020      	movs	r0, #32
 801db7a:	4770      	bx	lr

0801db7c <__i2b>:
 801db7c:	b510      	push	{r4, lr}
 801db7e:	460c      	mov	r4, r1
 801db80:	2101      	movs	r1, #1
 801db82:	f7ff feff 	bl	801d984 <_Balloc>
 801db86:	4602      	mov	r2, r0
 801db88:	b928      	cbnz	r0, 801db96 <__i2b+0x1a>
 801db8a:	4b05      	ldr	r3, [pc, #20]	; (801dba0 <__i2b+0x24>)
 801db8c:	4805      	ldr	r0, [pc, #20]	; (801dba4 <__i2b+0x28>)
 801db8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801db92:	f7fe fe1d 	bl	801c7d0 <__assert_func>
 801db96:	2301      	movs	r3, #1
 801db98:	6144      	str	r4, [r0, #20]
 801db9a:	6103      	str	r3, [r0, #16]
 801db9c:	bd10      	pop	{r4, pc}
 801db9e:	bf00      	nop
 801dba0:	080205c5 	.word	0x080205c5
 801dba4:	08020638 	.word	0x08020638

0801dba8 <__multiply>:
 801dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbac:	4614      	mov	r4, r2
 801dbae:	690a      	ldr	r2, [r1, #16]
 801dbb0:	6923      	ldr	r3, [r4, #16]
 801dbb2:	429a      	cmp	r2, r3
 801dbb4:	bfb8      	it	lt
 801dbb6:	460b      	movlt	r3, r1
 801dbb8:	460d      	mov	r5, r1
 801dbba:	bfbc      	itt	lt
 801dbbc:	4625      	movlt	r5, r4
 801dbbe:	461c      	movlt	r4, r3
 801dbc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801dbc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801dbc8:	68ab      	ldr	r3, [r5, #8]
 801dbca:	6869      	ldr	r1, [r5, #4]
 801dbcc:	eb0a 0709 	add.w	r7, sl, r9
 801dbd0:	42bb      	cmp	r3, r7
 801dbd2:	b085      	sub	sp, #20
 801dbd4:	bfb8      	it	lt
 801dbd6:	3101      	addlt	r1, #1
 801dbd8:	f7ff fed4 	bl	801d984 <_Balloc>
 801dbdc:	b930      	cbnz	r0, 801dbec <__multiply+0x44>
 801dbde:	4602      	mov	r2, r0
 801dbe0:	4b42      	ldr	r3, [pc, #264]	; (801dcec <__multiply+0x144>)
 801dbe2:	4843      	ldr	r0, [pc, #268]	; (801dcf0 <__multiply+0x148>)
 801dbe4:	f240 115d 	movw	r1, #349	; 0x15d
 801dbe8:	f7fe fdf2 	bl	801c7d0 <__assert_func>
 801dbec:	f100 0614 	add.w	r6, r0, #20
 801dbf0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801dbf4:	4633      	mov	r3, r6
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	4543      	cmp	r3, r8
 801dbfa:	d31e      	bcc.n	801dc3a <__multiply+0x92>
 801dbfc:	f105 0c14 	add.w	ip, r5, #20
 801dc00:	f104 0314 	add.w	r3, r4, #20
 801dc04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801dc08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801dc0c:	9202      	str	r2, [sp, #8]
 801dc0e:	ebac 0205 	sub.w	r2, ip, r5
 801dc12:	3a15      	subs	r2, #21
 801dc14:	f022 0203 	bic.w	r2, r2, #3
 801dc18:	3204      	adds	r2, #4
 801dc1a:	f105 0115 	add.w	r1, r5, #21
 801dc1e:	458c      	cmp	ip, r1
 801dc20:	bf38      	it	cc
 801dc22:	2204      	movcc	r2, #4
 801dc24:	9201      	str	r2, [sp, #4]
 801dc26:	9a02      	ldr	r2, [sp, #8]
 801dc28:	9303      	str	r3, [sp, #12]
 801dc2a:	429a      	cmp	r2, r3
 801dc2c:	d808      	bhi.n	801dc40 <__multiply+0x98>
 801dc2e:	2f00      	cmp	r7, #0
 801dc30:	dc55      	bgt.n	801dcde <__multiply+0x136>
 801dc32:	6107      	str	r7, [r0, #16]
 801dc34:	b005      	add	sp, #20
 801dc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc3a:	f843 2b04 	str.w	r2, [r3], #4
 801dc3e:	e7db      	b.n	801dbf8 <__multiply+0x50>
 801dc40:	f8b3 a000 	ldrh.w	sl, [r3]
 801dc44:	f1ba 0f00 	cmp.w	sl, #0
 801dc48:	d020      	beq.n	801dc8c <__multiply+0xe4>
 801dc4a:	f105 0e14 	add.w	lr, r5, #20
 801dc4e:	46b1      	mov	r9, r6
 801dc50:	2200      	movs	r2, #0
 801dc52:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dc56:	f8d9 b000 	ldr.w	fp, [r9]
 801dc5a:	b2a1      	uxth	r1, r4
 801dc5c:	fa1f fb8b 	uxth.w	fp, fp
 801dc60:	fb0a b101 	mla	r1, sl, r1, fp
 801dc64:	4411      	add	r1, r2
 801dc66:	f8d9 2000 	ldr.w	r2, [r9]
 801dc6a:	0c24      	lsrs	r4, r4, #16
 801dc6c:	0c12      	lsrs	r2, r2, #16
 801dc6e:	fb0a 2404 	mla	r4, sl, r4, r2
 801dc72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dc76:	b289      	uxth	r1, r1
 801dc78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dc7c:	45f4      	cmp	ip, lr
 801dc7e:	f849 1b04 	str.w	r1, [r9], #4
 801dc82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dc86:	d8e4      	bhi.n	801dc52 <__multiply+0xaa>
 801dc88:	9901      	ldr	r1, [sp, #4]
 801dc8a:	5072      	str	r2, [r6, r1]
 801dc8c:	9a03      	ldr	r2, [sp, #12]
 801dc8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dc92:	3304      	adds	r3, #4
 801dc94:	f1b9 0f00 	cmp.w	r9, #0
 801dc98:	d01f      	beq.n	801dcda <__multiply+0x132>
 801dc9a:	6834      	ldr	r4, [r6, #0]
 801dc9c:	f105 0114 	add.w	r1, r5, #20
 801dca0:	46b6      	mov	lr, r6
 801dca2:	f04f 0a00 	mov.w	sl, #0
 801dca6:	880a      	ldrh	r2, [r1, #0]
 801dca8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801dcac:	fb09 b202 	mla	r2, r9, r2, fp
 801dcb0:	4492      	add	sl, r2
 801dcb2:	b2a4      	uxth	r4, r4
 801dcb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801dcb8:	f84e 4b04 	str.w	r4, [lr], #4
 801dcbc:	f851 4b04 	ldr.w	r4, [r1], #4
 801dcc0:	f8be 2000 	ldrh.w	r2, [lr]
 801dcc4:	0c24      	lsrs	r4, r4, #16
 801dcc6:	fb09 2404 	mla	r4, r9, r4, r2
 801dcca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801dcce:	458c      	cmp	ip, r1
 801dcd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dcd4:	d8e7      	bhi.n	801dca6 <__multiply+0xfe>
 801dcd6:	9a01      	ldr	r2, [sp, #4]
 801dcd8:	50b4      	str	r4, [r6, r2]
 801dcda:	3604      	adds	r6, #4
 801dcdc:	e7a3      	b.n	801dc26 <__multiply+0x7e>
 801dcde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d1a5      	bne.n	801dc32 <__multiply+0x8a>
 801dce6:	3f01      	subs	r7, #1
 801dce8:	e7a1      	b.n	801dc2e <__multiply+0x86>
 801dcea:	bf00      	nop
 801dcec:	080205c5 	.word	0x080205c5
 801dcf0:	08020638 	.word	0x08020638

0801dcf4 <__pow5mult>:
 801dcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcf8:	4615      	mov	r5, r2
 801dcfa:	f012 0203 	ands.w	r2, r2, #3
 801dcfe:	4606      	mov	r6, r0
 801dd00:	460f      	mov	r7, r1
 801dd02:	d007      	beq.n	801dd14 <__pow5mult+0x20>
 801dd04:	4c25      	ldr	r4, [pc, #148]	; (801dd9c <__pow5mult+0xa8>)
 801dd06:	3a01      	subs	r2, #1
 801dd08:	2300      	movs	r3, #0
 801dd0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd0e:	f7ff fe9b 	bl	801da48 <__multadd>
 801dd12:	4607      	mov	r7, r0
 801dd14:	10ad      	asrs	r5, r5, #2
 801dd16:	d03d      	beq.n	801dd94 <__pow5mult+0xa0>
 801dd18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dd1a:	b97c      	cbnz	r4, 801dd3c <__pow5mult+0x48>
 801dd1c:	2010      	movs	r0, #16
 801dd1e:	f7fd fd8f 	bl	801b840 <malloc>
 801dd22:	4602      	mov	r2, r0
 801dd24:	6270      	str	r0, [r6, #36]	; 0x24
 801dd26:	b928      	cbnz	r0, 801dd34 <__pow5mult+0x40>
 801dd28:	4b1d      	ldr	r3, [pc, #116]	; (801dda0 <__pow5mult+0xac>)
 801dd2a:	481e      	ldr	r0, [pc, #120]	; (801dda4 <__pow5mult+0xb0>)
 801dd2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dd30:	f7fe fd4e 	bl	801c7d0 <__assert_func>
 801dd34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dd38:	6004      	str	r4, [r0, #0]
 801dd3a:	60c4      	str	r4, [r0, #12]
 801dd3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dd40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dd44:	b94c      	cbnz	r4, 801dd5a <__pow5mult+0x66>
 801dd46:	f240 2171 	movw	r1, #625	; 0x271
 801dd4a:	4630      	mov	r0, r6
 801dd4c:	f7ff ff16 	bl	801db7c <__i2b>
 801dd50:	2300      	movs	r3, #0
 801dd52:	f8c8 0008 	str.w	r0, [r8, #8]
 801dd56:	4604      	mov	r4, r0
 801dd58:	6003      	str	r3, [r0, #0]
 801dd5a:	f04f 0900 	mov.w	r9, #0
 801dd5e:	07eb      	lsls	r3, r5, #31
 801dd60:	d50a      	bpl.n	801dd78 <__pow5mult+0x84>
 801dd62:	4639      	mov	r1, r7
 801dd64:	4622      	mov	r2, r4
 801dd66:	4630      	mov	r0, r6
 801dd68:	f7ff ff1e 	bl	801dba8 <__multiply>
 801dd6c:	4639      	mov	r1, r7
 801dd6e:	4680      	mov	r8, r0
 801dd70:	4630      	mov	r0, r6
 801dd72:	f7ff fe47 	bl	801da04 <_Bfree>
 801dd76:	4647      	mov	r7, r8
 801dd78:	106d      	asrs	r5, r5, #1
 801dd7a:	d00b      	beq.n	801dd94 <__pow5mult+0xa0>
 801dd7c:	6820      	ldr	r0, [r4, #0]
 801dd7e:	b938      	cbnz	r0, 801dd90 <__pow5mult+0x9c>
 801dd80:	4622      	mov	r2, r4
 801dd82:	4621      	mov	r1, r4
 801dd84:	4630      	mov	r0, r6
 801dd86:	f7ff ff0f 	bl	801dba8 <__multiply>
 801dd8a:	6020      	str	r0, [r4, #0]
 801dd8c:	f8c0 9000 	str.w	r9, [r0]
 801dd90:	4604      	mov	r4, r0
 801dd92:	e7e4      	b.n	801dd5e <__pow5mult+0x6a>
 801dd94:	4638      	mov	r0, r7
 801dd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd9a:	bf00      	nop
 801dd9c:	08020788 	.word	0x08020788
 801dda0:	080203a4 	.word	0x080203a4
 801dda4:	08020638 	.word	0x08020638

0801dda8 <__lshift>:
 801dda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddac:	460c      	mov	r4, r1
 801ddae:	6849      	ldr	r1, [r1, #4]
 801ddb0:	6923      	ldr	r3, [r4, #16]
 801ddb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ddb6:	68a3      	ldr	r3, [r4, #8]
 801ddb8:	4607      	mov	r7, r0
 801ddba:	4691      	mov	r9, r2
 801ddbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ddc0:	f108 0601 	add.w	r6, r8, #1
 801ddc4:	42b3      	cmp	r3, r6
 801ddc6:	db0b      	blt.n	801dde0 <__lshift+0x38>
 801ddc8:	4638      	mov	r0, r7
 801ddca:	f7ff fddb 	bl	801d984 <_Balloc>
 801ddce:	4605      	mov	r5, r0
 801ddd0:	b948      	cbnz	r0, 801dde6 <__lshift+0x3e>
 801ddd2:	4602      	mov	r2, r0
 801ddd4:	4b28      	ldr	r3, [pc, #160]	; (801de78 <__lshift+0xd0>)
 801ddd6:	4829      	ldr	r0, [pc, #164]	; (801de7c <__lshift+0xd4>)
 801ddd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dddc:	f7fe fcf8 	bl	801c7d0 <__assert_func>
 801dde0:	3101      	adds	r1, #1
 801dde2:	005b      	lsls	r3, r3, #1
 801dde4:	e7ee      	b.n	801ddc4 <__lshift+0x1c>
 801dde6:	2300      	movs	r3, #0
 801dde8:	f100 0114 	add.w	r1, r0, #20
 801ddec:	f100 0210 	add.w	r2, r0, #16
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	4553      	cmp	r3, sl
 801ddf4:	db33      	blt.n	801de5e <__lshift+0xb6>
 801ddf6:	6920      	ldr	r0, [r4, #16]
 801ddf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ddfc:	f104 0314 	add.w	r3, r4, #20
 801de00:	f019 091f 	ands.w	r9, r9, #31
 801de04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801de08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801de0c:	d02b      	beq.n	801de66 <__lshift+0xbe>
 801de0e:	f1c9 0e20 	rsb	lr, r9, #32
 801de12:	468a      	mov	sl, r1
 801de14:	2200      	movs	r2, #0
 801de16:	6818      	ldr	r0, [r3, #0]
 801de18:	fa00 f009 	lsl.w	r0, r0, r9
 801de1c:	4302      	orrs	r2, r0
 801de1e:	f84a 2b04 	str.w	r2, [sl], #4
 801de22:	f853 2b04 	ldr.w	r2, [r3], #4
 801de26:	459c      	cmp	ip, r3
 801de28:	fa22 f20e 	lsr.w	r2, r2, lr
 801de2c:	d8f3      	bhi.n	801de16 <__lshift+0x6e>
 801de2e:	ebac 0304 	sub.w	r3, ip, r4
 801de32:	3b15      	subs	r3, #21
 801de34:	f023 0303 	bic.w	r3, r3, #3
 801de38:	3304      	adds	r3, #4
 801de3a:	f104 0015 	add.w	r0, r4, #21
 801de3e:	4584      	cmp	ip, r0
 801de40:	bf38      	it	cc
 801de42:	2304      	movcc	r3, #4
 801de44:	50ca      	str	r2, [r1, r3]
 801de46:	b10a      	cbz	r2, 801de4c <__lshift+0xa4>
 801de48:	f108 0602 	add.w	r6, r8, #2
 801de4c:	3e01      	subs	r6, #1
 801de4e:	4638      	mov	r0, r7
 801de50:	612e      	str	r6, [r5, #16]
 801de52:	4621      	mov	r1, r4
 801de54:	f7ff fdd6 	bl	801da04 <_Bfree>
 801de58:	4628      	mov	r0, r5
 801de5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de5e:	f842 0f04 	str.w	r0, [r2, #4]!
 801de62:	3301      	adds	r3, #1
 801de64:	e7c5      	b.n	801ddf2 <__lshift+0x4a>
 801de66:	3904      	subs	r1, #4
 801de68:	f853 2b04 	ldr.w	r2, [r3], #4
 801de6c:	f841 2f04 	str.w	r2, [r1, #4]!
 801de70:	459c      	cmp	ip, r3
 801de72:	d8f9      	bhi.n	801de68 <__lshift+0xc0>
 801de74:	e7ea      	b.n	801de4c <__lshift+0xa4>
 801de76:	bf00      	nop
 801de78:	080205c5 	.word	0x080205c5
 801de7c:	08020638 	.word	0x08020638

0801de80 <__mcmp>:
 801de80:	b530      	push	{r4, r5, lr}
 801de82:	6902      	ldr	r2, [r0, #16]
 801de84:	690c      	ldr	r4, [r1, #16]
 801de86:	1b12      	subs	r2, r2, r4
 801de88:	d10e      	bne.n	801dea8 <__mcmp+0x28>
 801de8a:	f100 0314 	add.w	r3, r0, #20
 801de8e:	3114      	adds	r1, #20
 801de90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801de94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801de98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801de9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dea0:	42a5      	cmp	r5, r4
 801dea2:	d003      	beq.n	801deac <__mcmp+0x2c>
 801dea4:	d305      	bcc.n	801deb2 <__mcmp+0x32>
 801dea6:	2201      	movs	r2, #1
 801dea8:	4610      	mov	r0, r2
 801deaa:	bd30      	pop	{r4, r5, pc}
 801deac:	4283      	cmp	r3, r0
 801deae:	d3f3      	bcc.n	801de98 <__mcmp+0x18>
 801deb0:	e7fa      	b.n	801dea8 <__mcmp+0x28>
 801deb2:	f04f 32ff 	mov.w	r2, #4294967295
 801deb6:	e7f7      	b.n	801dea8 <__mcmp+0x28>

0801deb8 <__mdiff>:
 801deb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801debc:	460c      	mov	r4, r1
 801debe:	4606      	mov	r6, r0
 801dec0:	4611      	mov	r1, r2
 801dec2:	4620      	mov	r0, r4
 801dec4:	4617      	mov	r7, r2
 801dec6:	f7ff ffdb 	bl	801de80 <__mcmp>
 801deca:	1e05      	subs	r5, r0, #0
 801decc:	d110      	bne.n	801def0 <__mdiff+0x38>
 801dece:	4629      	mov	r1, r5
 801ded0:	4630      	mov	r0, r6
 801ded2:	f7ff fd57 	bl	801d984 <_Balloc>
 801ded6:	b930      	cbnz	r0, 801dee6 <__mdiff+0x2e>
 801ded8:	4b39      	ldr	r3, [pc, #228]	; (801dfc0 <__mdiff+0x108>)
 801deda:	4602      	mov	r2, r0
 801dedc:	f240 2132 	movw	r1, #562	; 0x232
 801dee0:	4838      	ldr	r0, [pc, #224]	; (801dfc4 <__mdiff+0x10c>)
 801dee2:	f7fe fc75 	bl	801c7d0 <__assert_func>
 801dee6:	2301      	movs	r3, #1
 801dee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801deec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def0:	bfa4      	itt	ge
 801def2:	463b      	movge	r3, r7
 801def4:	4627      	movge	r7, r4
 801def6:	4630      	mov	r0, r6
 801def8:	6879      	ldr	r1, [r7, #4]
 801defa:	bfa6      	itte	ge
 801defc:	461c      	movge	r4, r3
 801defe:	2500      	movge	r5, #0
 801df00:	2501      	movlt	r5, #1
 801df02:	f7ff fd3f 	bl	801d984 <_Balloc>
 801df06:	b920      	cbnz	r0, 801df12 <__mdiff+0x5a>
 801df08:	4b2d      	ldr	r3, [pc, #180]	; (801dfc0 <__mdiff+0x108>)
 801df0a:	4602      	mov	r2, r0
 801df0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801df10:	e7e6      	b.n	801dee0 <__mdiff+0x28>
 801df12:	693e      	ldr	r6, [r7, #16]
 801df14:	60c5      	str	r5, [r0, #12]
 801df16:	6925      	ldr	r5, [r4, #16]
 801df18:	f107 0114 	add.w	r1, r7, #20
 801df1c:	f104 0914 	add.w	r9, r4, #20
 801df20:	f100 0e14 	add.w	lr, r0, #20
 801df24:	f107 0210 	add.w	r2, r7, #16
 801df28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801df2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801df30:	46f2      	mov	sl, lr
 801df32:	2700      	movs	r7, #0
 801df34:	f859 3b04 	ldr.w	r3, [r9], #4
 801df38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801df3c:	fa1f f883 	uxth.w	r8, r3
 801df40:	fa17 f78b 	uxtah	r7, r7, fp
 801df44:	0c1b      	lsrs	r3, r3, #16
 801df46:	eba7 0808 	sub.w	r8, r7, r8
 801df4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801df4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801df52:	fa1f f888 	uxth.w	r8, r8
 801df56:	141f      	asrs	r7, r3, #16
 801df58:	454d      	cmp	r5, r9
 801df5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801df5e:	f84a 3b04 	str.w	r3, [sl], #4
 801df62:	d8e7      	bhi.n	801df34 <__mdiff+0x7c>
 801df64:	1b2b      	subs	r3, r5, r4
 801df66:	3b15      	subs	r3, #21
 801df68:	f023 0303 	bic.w	r3, r3, #3
 801df6c:	3304      	adds	r3, #4
 801df6e:	3415      	adds	r4, #21
 801df70:	42a5      	cmp	r5, r4
 801df72:	bf38      	it	cc
 801df74:	2304      	movcc	r3, #4
 801df76:	4419      	add	r1, r3
 801df78:	4473      	add	r3, lr
 801df7a:	469e      	mov	lr, r3
 801df7c:	460d      	mov	r5, r1
 801df7e:	4565      	cmp	r5, ip
 801df80:	d30e      	bcc.n	801dfa0 <__mdiff+0xe8>
 801df82:	f10c 0203 	add.w	r2, ip, #3
 801df86:	1a52      	subs	r2, r2, r1
 801df88:	f022 0203 	bic.w	r2, r2, #3
 801df8c:	3903      	subs	r1, #3
 801df8e:	458c      	cmp	ip, r1
 801df90:	bf38      	it	cc
 801df92:	2200      	movcc	r2, #0
 801df94:	441a      	add	r2, r3
 801df96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801df9a:	b17b      	cbz	r3, 801dfbc <__mdiff+0x104>
 801df9c:	6106      	str	r6, [r0, #16]
 801df9e:	e7a5      	b.n	801deec <__mdiff+0x34>
 801dfa0:	f855 8b04 	ldr.w	r8, [r5], #4
 801dfa4:	fa17 f488 	uxtah	r4, r7, r8
 801dfa8:	1422      	asrs	r2, r4, #16
 801dfaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801dfae:	b2a4      	uxth	r4, r4
 801dfb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801dfb4:	f84e 4b04 	str.w	r4, [lr], #4
 801dfb8:	1417      	asrs	r7, r2, #16
 801dfba:	e7e0      	b.n	801df7e <__mdiff+0xc6>
 801dfbc:	3e01      	subs	r6, #1
 801dfbe:	e7ea      	b.n	801df96 <__mdiff+0xde>
 801dfc0:	080205c5 	.word	0x080205c5
 801dfc4:	08020638 	.word	0x08020638

0801dfc8 <__d2b>:
 801dfc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dfcc:	4689      	mov	r9, r1
 801dfce:	2101      	movs	r1, #1
 801dfd0:	ec57 6b10 	vmov	r6, r7, d0
 801dfd4:	4690      	mov	r8, r2
 801dfd6:	f7ff fcd5 	bl	801d984 <_Balloc>
 801dfda:	4604      	mov	r4, r0
 801dfdc:	b930      	cbnz	r0, 801dfec <__d2b+0x24>
 801dfde:	4602      	mov	r2, r0
 801dfe0:	4b25      	ldr	r3, [pc, #148]	; (801e078 <__d2b+0xb0>)
 801dfe2:	4826      	ldr	r0, [pc, #152]	; (801e07c <__d2b+0xb4>)
 801dfe4:	f240 310a 	movw	r1, #778	; 0x30a
 801dfe8:	f7fe fbf2 	bl	801c7d0 <__assert_func>
 801dfec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dff4:	bb35      	cbnz	r5, 801e044 <__d2b+0x7c>
 801dff6:	2e00      	cmp	r6, #0
 801dff8:	9301      	str	r3, [sp, #4]
 801dffa:	d028      	beq.n	801e04e <__d2b+0x86>
 801dffc:	4668      	mov	r0, sp
 801dffe:	9600      	str	r6, [sp, #0]
 801e000:	f7ff fd8c 	bl	801db1c <__lo0bits>
 801e004:	9900      	ldr	r1, [sp, #0]
 801e006:	b300      	cbz	r0, 801e04a <__d2b+0x82>
 801e008:	9a01      	ldr	r2, [sp, #4]
 801e00a:	f1c0 0320 	rsb	r3, r0, #32
 801e00e:	fa02 f303 	lsl.w	r3, r2, r3
 801e012:	430b      	orrs	r3, r1
 801e014:	40c2      	lsrs	r2, r0
 801e016:	6163      	str	r3, [r4, #20]
 801e018:	9201      	str	r2, [sp, #4]
 801e01a:	9b01      	ldr	r3, [sp, #4]
 801e01c:	61a3      	str	r3, [r4, #24]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	bf14      	ite	ne
 801e022:	2202      	movne	r2, #2
 801e024:	2201      	moveq	r2, #1
 801e026:	6122      	str	r2, [r4, #16]
 801e028:	b1d5      	cbz	r5, 801e060 <__d2b+0x98>
 801e02a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e02e:	4405      	add	r5, r0
 801e030:	f8c9 5000 	str.w	r5, [r9]
 801e034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e038:	f8c8 0000 	str.w	r0, [r8]
 801e03c:	4620      	mov	r0, r4
 801e03e:	b003      	add	sp, #12
 801e040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e048:	e7d5      	b.n	801dff6 <__d2b+0x2e>
 801e04a:	6161      	str	r1, [r4, #20]
 801e04c:	e7e5      	b.n	801e01a <__d2b+0x52>
 801e04e:	a801      	add	r0, sp, #4
 801e050:	f7ff fd64 	bl	801db1c <__lo0bits>
 801e054:	9b01      	ldr	r3, [sp, #4]
 801e056:	6163      	str	r3, [r4, #20]
 801e058:	2201      	movs	r2, #1
 801e05a:	6122      	str	r2, [r4, #16]
 801e05c:	3020      	adds	r0, #32
 801e05e:	e7e3      	b.n	801e028 <__d2b+0x60>
 801e060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e068:	f8c9 0000 	str.w	r0, [r9]
 801e06c:	6918      	ldr	r0, [r3, #16]
 801e06e:	f7ff fd35 	bl	801dadc <__hi0bits>
 801e072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e076:	e7df      	b.n	801e038 <__d2b+0x70>
 801e078:	080205c5 	.word	0x080205c5
 801e07c:	08020638 	.word	0x08020638

0801e080 <_calloc_r>:
 801e080:	b513      	push	{r0, r1, r4, lr}
 801e082:	434a      	muls	r2, r1
 801e084:	4611      	mov	r1, r2
 801e086:	9201      	str	r2, [sp, #4]
 801e088:	f7fd fc48 	bl	801b91c <_malloc_r>
 801e08c:	4604      	mov	r4, r0
 801e08e:	b118      	cbz	r0, 801e098 <_calloc_r+0x18>
 801e090:	9a01      	ldr	r2, [sp, #4]
 801e092:	2100      	movs	r1, #0
 801e094:	f7fd fbea 	bl	801b86c <memset>
 801e098:	4620      	mov	r0, r4
 801e09a:	b002      	add	sp, #8
 801e09c:	bd10      	pop	{r4, pc}

0801e09e <__ssputs_r>:
 801e09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0a2:	688e      	ldr	r6, [r1, #8]
 801e0a4:	429e      	cmp	r6, r3
 801e0a6:	4682      	mov	sl, r0
 801e0a8:	460c      	mov	r4, r1
 801e0aa:	4690      	mov	r8, r2
 801e0ac:	461f      	mov	r7, r3
 801e0ae:	d838      	bhi.n	801e122 <__ssputs_r+0x84>
 801e0b0:	898a      	ldrh	r2, [r1, #12]
 801e0b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e0b6:	d032      	beq.n	801e11e <__ssputs_r+0x80>
 801e0b8:	6825      	ldr	r5, [r4, #0]
 801e0ba:	6909      	ldr	r1, [r1, #16]
 801e0bc:	eba5 0901 	sub.w	r9, r5, r1
 801e0c0:	6965      	ldr	r5, [r4, #20]
 801e0c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e0c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e0ca:	3301      	adds	r3, #1
 801e0cc:	444b      	add	r3, r9
 801e0ce:	106d      	asrs	r5, r5, #1
 801e0d0:	429d      	cmp	r5, r3
 801e0d2:	bf38      	it	cc
 801e0d4:	461d      	movcc	r5, r3
 801e0d6:	0553      	lsls	r3, r2, #21
 801e0d8:	d531      	bpl.n	801e13e <__ssputs_r+0xa0>
 801e0da:	4629      	mov	r1, r5
 801e0dc:	f7fd fc1e 	bl	801b91c <_malloc_r>
 801e0e0:	4606      	mov	r6, r0
 801e0e2:	b950      	cbnz	r0, 801e0fa <__ssputs_r+0x5c>
 801e0e4:	230c      	movs	r3, #12
 801e0e6:	f8ca 3000 	str.w	r3, [sl]
 801e0ea:	89a3      	ldrh	r3, [r4, #12]
 801e0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0f0:	81a3      	strh	r3, [r4, #12]
 801e0f2:	f04f 30ff 	mov.w	r0, #4294967295
 801e0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0fa:	6921      	ldr	r1, [r4, #16]
 801e0fc:	464a      	mov	r2, r9
 801e0fe:	f7fd fba7 	bl	801b850 <memcpy>
 801e102:	89a3      	ldrh	r3, [r4, #12]
 801e104:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e10c:	81a3      	strh	r3, [r4, #12]
 801e10e:	6126      	str	r6, [r4, #16]
 801e110:	6165      	str	r5, [r4, #20]
 801e112:	444e      	add	r6, r9
 801e114:	eba5 0509 	sub.w	r5, r5, r9
 801e118:	6026      	str	r6, [r4, #0]
 801e11a:	60a5      	str	r5, [r4, #8]
 801e11c:	463e      	mov	r6, r7
 801e11e:	42be      	cmp	r6, r7
 801e120:	d900      	bls.n	801e124 <__ssputs_r+0x86>
 801e122:	463e      	mov	r6, r7
 801e124:	4632      	mov	r2, r6
 801e126:	6820      	ldr	r0, [r4, #0]
 801e128:	4641      	mov	r1, r8
 801e12a:	f000 fb21 	bl	801e770 <memmove>
 801e12e:	68a3      	ldr	r3, [r4, #8]
 801e130:	6822      	ldr	r2, [r4, #0]
 801e132:	1b9b      	subs	r3, r3, r6
 801e134:	4432      	add	r2, r6
 801e136:	60a3      	str	r3, [r4, #8]
 801e138:	6022      	str	r2, [r4, #0]
 801e13a:	2000      	movs	r0, #0
 801e13c:	e7db      	b.n	801e0f6 <__ssputs_r+0x58>
 801e13e:	462a      	mov	r2, r5
 801e140:	f000 fb30 	bl	801e7a4 <_realloc_r>
 801e144:	4606      	mov	r6, r0
 801e146:	2800      	cmp	r0, #0
 801e148:	d1e1      	bne.n	801e10e <__ssputs_r+0x70>
 801e14a:	6921      	ldr	r1, [r4, #16]
 801e14c:	4650      	mov	r0, sl
 801e14e:	f7fd fb95 	bl	801b87c <_free_r>
 801e152:	e7c7      	b.n	801e0e4 <__ssputs_r+0x46>

0801e154 <_svfiprintf_r>:
 801e154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e158:	4698      	mov	r8, r3
 801e15a:	898b      	ldrh	r3, [r1, #12]
 801e15c:	061b      	lsls	r3, r3, #24
 801e15e:	b09d      	sub	sp, #116	; 0x74
 801e160:	4607      	mov	r7, r0
 801e162:	460d      	mov	r5, r1
 801e164:	4614      	mov	r4, r2
 801e166:	d50e      	bpl.n	801e186 <_svfiprintf_r+0x32>
 801e168:	690b      	ldr	r3, [r1, #16]
 801e16a:	b963      	cbnz	r3, 801e186 <_svfiprintf_r+0x32>
 801e16c:	2140      	movs	r1, #64	; 0x40
 801e16e:	f7fd fbd5 	bl	801b91c <_malloc_r>
 801e172:	6028      	str	r0, [r5, #0]
 801e174:	6128      	str	r0, [r5, #16]
 801e176:	b920      	cbnz	r0, 801e182 <_svfiprintf_r+0x2e>
 801e178:	230c      	movs	r3, #12
 801e17a:	603b      	str	r3, [r7, #0]
 801e17c:	f04f 30ff 	mov.w	r0, #4294967295
 801e180:	e0d1      	b.n	801e326 <_svfiprintf_r+0x1d2>
 801e182:	2340      	movs	r3, #64	; 0x40
 801e184:	616b      	str	r3, [r5, #20]
 801e186:	2300      	movs	r3, #0
 801e188:	9309      	str	r3, [sp, #36]	; 0x24
 801e18a:	2320      	movs	r3, #32
 801e18c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e190:	f8cd 800c 	str.w	r8, [sp, #12]
 801e194:	2330      	movs	r3, #48	; 0x30
 801e196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e340 <_svfiprintf_r+0x1ec>
 801e19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e19e:	f04f 0901 	mov.w	r9, #1
 801e1a2:	4623      	mov	r3, r4
 801e1a4:	469a      	mov	sl, r3
 801e1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e1aa:	b10a      	cbz	r2, 801e1b0 <_svfiprintf_r+0x5c>
 801e1ac:	2a25      	cmp	r2, #37	; 0x25
 801e1ae:	d1f9      	bne.n	801e1a4 <_svfiprintf_r+0x50>
 801e1b0:	ebba 0b04 	subs.w	fp, sl, r4
 801e1b4:	d00b      	beq.n	801e1ce <_svfiprintf_r+0x7a>
 801e1b6:	465b      	mov	r3, fp
 801e1b8:	4622      	mov	r2, r4
 801e1ba:	4629      	mov	r1, r5
 801e1bc:	4638      	mov	r0, r7
 801e1be:	f7ff ff6e 	bl	801e09e <__ssputs_r>
 801e1c2:	3001      	adds	r0, #1
 801e1c4:	f000 80aa 	beq.w	801e31c <_svfiprintf_r+0x1c8>
 801e1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1ca:	445a      	add	r2, fp
 801e1cc:	9209      	str	r2, [sp, #36]	; 0x24
 801e1ce:	f89a 3000 	ldrb.w	r3, [sl]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	f000 80a2 	beq.w	801e31c <_svfiprintf_r+0x1c8>
 801e1d8:	2300      	movs	r3, #0
 801e1da:	f04f 32ff 	mov.w	r2, #4294967295
 801e1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1e2:	f10a 0a01 	add.w	sl, sl, #1
 801e1e6:	9304      	str	r3, [sp, #16]
 801e1e8:	9307      	str	r3, [sp, #28]
 801e1ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e1ee:	931a      	str	r3, [sp, #104]	; 0x68
 801e1f0:	4654      	mov	r4, sl
 801e1f2:	2205      	movs	r2, #5
 801e1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1f8:	4851      	ldr	r0, [pc, #324]	; (801e340 <_svfiprintf_r+0x1ec>)
 801e1fa:	f7e2 f801 	bl	8000200 <memchr>
 801e1fe:	9a04      	ldr	r2, [sp, #16]
 801e200:	b9d8      	cbnz	r0, 801e23a <_svfiprintf_r+0xe6>
 801e202:	06d0      	lsls	r0, r2, #27
 801e204:	bf44      	itt	mi
 801e206:	2320      	movmi	r3, #32
 801e208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e20c:	0711      	lsls	r1, r2, #28
 801e20e:	bf44      	itt	mi
 801e210:	232b      	movmi	r3, #43	; 0x2b
 801e212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e216:	f89a 3000 	ldrb.w	r3, [sl]
 801e21a:	2b2a      	cmp	r3, #42	; 0x2a
 801e21c:	d015      	beq.n	801e24a <_svfiprintf_r+0xf6>
 801e21e:	9a07      	ldr	r2, [sp, #28]
 801e220:	4654      	mov	r4, sl
 801e222:	2000      	movs	r0, #0
 801e224:	f04f 0c0a 	mov.w	ip, #10
 801e228:	4621      	mov	r1, r4
 801e22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e22e:	3b30      	subs	r3, #48	; 0x30
 801e230:	2b09      	cmp	r3, #9
 801e232:	d94e      	bls.n	801e2d2 <_svfiprintf_r+0x17e>
 801e234:	b1b0      	cbz	r0, 801e264 <_svfiprintf_r+0x110>
 801e236:	9207      	str	r2, [sp, #28]
 801e238:	e014      	b.n	801e264 <_svfiprintf_r+0x110>
 801e23a:	eba0 0308 	sub.w	r3, r0, r8
 801e23e:	fa09 f303 	lsl.w	r3, r9, r3
 801e242:	4313      	orrs	r3, r2
 801e244:	9304      	str	r3, [sp, #16]
 801e246:	46a2      	mov	sl, r4
 801e248:	e7d2      	b.n	801e1f0 <_svfiprintf_r+0x9c>
 801e24a:	9b03      	ldr	r3, [sp, #12]
 801e24c:	1d19      	adds	r1, r3, #4
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	9103      	str	r1, [sp, #12]
 801e252:	2b00      	cmp	r3, #0
 801e254:	bfbb      	ittet	lt
 801e256:	425b      	neglt	r3, r3
 801e258:	f042 0202 	orrlt.w	r2, r2, #2
 801e25c:	9307      	strge	r3, [sp, #28]
 801e25e:	9307      	strlt	r3, [sp, #28]
 801e260:	bfb8      	it	lt
 801e262:	9204      	strlt	r2, [sp, #16]
 801e264:	7823      	ldrb	r3, [r4, #0]
 801e266:	2b2e      	cmp	r3, #46	; 0x2e
 801e268:	d10c      	bne.n	801e284 <_svfiprintf_r+0x130>
 801e26a:	7863      	ldrb	r3, [r4, #1]
 801e26c:	2b2a      	cmp	r3, #42	; 0x2a
 801e26e:	d135      	bne.n	801e2dc <_svfiprintf_r+0x188>
 801e270:	9b03      	ldr	r3, [sp, #12]
 801e272:	1d1a      	adds	r2, r3, #4
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	9203      	str	r2, [sp, #12]
 801e278:	2b00      	cmp	r3, #0
 801e27a:	bfb8      	it	lt
 801e27c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e280:	3402      	adds	r4, #2
 801e282:	9305      	str	r3, [sp, #20]
 801e284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e350 <_svfiprintf_r+0x1fc>
 801e288:	7821      	ldrb	r1, [r4, #0]
 801e28a:	2203      	movs	r2, #3
 801e28c:	4650      	mov	r0, sl
 801e28e:	f7e1 ffb7 	bl	8000200 <memchr>
 801e292:	b140      	cbz	r0, 801e2a6 <_svfiprintf_r+0x152>
 801e294:	2340      	movs	r3, #64	; 0x40
 801e296:	eba0 000a 	sub.w	r0, r0, sl
 801e29a:	fa03 f000 	lsl.w	r0, r3, r0
 801e29e:	9b04      	ldr	r3, [sp, #16]
 801e2a0:	4303      	orrs	r3, r0
 801e2a2:	3401      	adds	r4, #1
 801e2a4:	9304      	str	r3, [sp, #16]
 801e2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2aa:	4826      	ldr	r0, [pc, #152]	; (801e344 <_svfiprintf_r+0x1f0>)
 801e2ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e2b0:	2206      	movs	r2, #6
 801e2b2:	f7e1 ffa5 	bl	8000200 <memchr>
 801e2b6:	2800      	cmp	r0, #0
 801e2b8:	d038      	beq.n	801e32c <_svfiprintf_r+0x1d8>
 801e2ba:	4b23      	ldr	r3, [pc, #140]	; (801e348 <_svfiprintf_r+0x1f4>)
 801e2bc:	bb1b      	cbnz	r3, 801e306 <_svfiprintf_r+0x1b2>
 801e2be:	9b03      	ldr	r3, [sp, #12]
 801e2c0:	3307      	adds	r3, #7
 801e2c2:	f023 0307 	bic.w	r3, r3, #7
 801e2c6:	3308      	adds	r3, #8
 801e2c8:	9303      	str	r3, [sp, #12]
 801e2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2cc:	4433      	add	r3, r6
 801e2ce:	9309      	str	r3, [sp, #36]	; 0x24
 801e2d0:	e767      	b.n	801e1a2 <_svfiprintf_r+0x4e>
 801e2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e2d6:	460c      	mov	r4, r1
 801e2d8:	2001      	movs	r0, #1
 801e2da:	e7a5      	b.n	801e228 <_svfiprintf_r+0xd4>
 801e2dc:	2300      	movs	r3, #0
 801e2de:	3401      	adds	r4, #1
 801e2e0:	9305      	str	r3, [sp, #20]
 801e2e2:	4619      	mov	r1, r3
 801e2e4:	f04f 0c0a 	mov.w	ip, #10
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2ee:	3a30      	subs	r2, #48	; 0x30
 801e2f0:	2a09      	cmp	r2, #9
 801e2f2:	d903      	bls.n	801e2fc <_svfiprintf_r+0x1a8>
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d0c5      	beq.n	801e284 <_svfiprintf_r+0x130>
 801e2f8:	9105      	str	r1, [sp, #20]
 801e2fa:	e7c3      	b.n	801e284 <_svfiprintf_r+0x130>
 801e2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801e300:	4604      	mov	r4, r0
 801e302:	2301      	movs	r3, #1
 801e304:	e7f0      	b.n	801e2e8 <_svfiprintf_r+0x194>
 801e306:	ab03      	add	r3, sp, #12
 801e308:	9300      	str	r3, [sp, #0]
 801e30a:	462a      	mov	r2, r5
 801e30c:	4b0f      	ldr	r3, [pc, #60]	; (801e34c <_svfiprintf_r+0x1f8>)
 801e30e:	a904      	add	r1, sp, #16
 801e310:	4638      	mov	r0, r7
 801e312:	f7fd fbfd 	bl	801bb10 <_printf_float>
 801e316:	1c42      	adds	r2, r0, #1
 801e318:	4606      	mov	r6, r0
 801e31a:	d1d6      	bne.n	801e2ca <_svfiprintf_r+0x176>
 801e31c:	89ab      	ldrh	r3, [r5, #12]
 801e31e:	065b      	lsls	r3, r3, #25
 801e320:	f53f af2c 	bmi.w	801e17c <_svfiprintf_r+0x28>
 801e324:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e326:	b01d      	add	sp, #116	; 0x74
 801e328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e32c:	ab03      	add	r3, sp, #12
 801e32e:	9300      	str	r3, [sp, #0]
 801e330:	462a      	mov	r2, r5
 801e332:	4b06      	ldr	r3, [pc, #24]	; (801e34c <_svfiprintf_r+0x1f8>)
 801e334:	a904      	add	r1, sp, #16
 801e336:	4638      	mov	r0, r7
 801e338:	f7fd fe8e 	bl	801c058 <_printf_i>
 801e33c:	e7eb      	b.n	801e316 <_svfiprintf_r+0x1c2>
 801e33e:	bf00      	nop
 801e340:	08020794 	.word	0x08020794
 801e344:	0802079e 	.word	0x0802079e
 801e348:	0801bb11 	.word	0x0801bb11
 801e34c:	0801e09f 	.word	0x0801e09f
 801e350:	0802079a 	.word	0x0802079a

0801e354 <__sfputc_r>:
 801e354:	6893      	ldr	r3, [r2, #8]
 801e356:	3b01      	subs	r3, #1
 801e358:	2b00      	cmp	r3, #0
 801e35a:	b410      	push	{r4}
 801e35c:	6093      	str	r3, [r2, #8]
 801e35e:	da08      	bge.n	801e372 <__sfputc_r+0x1e>
 801e360:	6994      	ldr	r4, [r2, #24]
 801e362:	42a3      	cmp	r3, r4
 801e364:	db01      	blt.n	801e36a <__sfputc_r+0x16>
 801e366:	290a      	cmp	r1, #10
 801e368:	d103      	bne.n	801e372 <__sfputc_r+0x1e>
 801e36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e36e:	f7fe b96f 	b.w	801c650 <__swbuf_r>
 801e372:	6813      	ldr	r3, [r2, #0]
 801e374:	1c58      	adds	r0, r3, #1
 801e376:	6010      	str	r0, [r2, #0]
 801e378:	7019      	strb	r1, [r3, #0]
 801e37a:	4608      	mov	r0, r1
 801e37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e380:	4770      	bx	lr

0801e382 <__sfputs_r>:
 801e382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e384:	4606      	mov	r6, r0
 801e386:	460f      	mov	r7, r1
 801e388:	4614      	mov	r4, r2
 801e38a:	18d5      	adds	r5, r2, r3
 801e38c:	42ac      	cmp	r4, r5
 801e38e:	d101      	bne.n	801e394 <__sfputs_r+0x12>
 801e390:	2000      	movs	r0, #0
 801e392:	e007      	b.n	801e3a4 <__sfputs_r+0x22>
 801e394:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e398:	463a      	mov	r2, r7
 801e39a:	4630      	mov	r0, r6
 801e39c:	f7ff ffda 	bl	801e354 <__sfputc_r>
 801e3a0:	1c43      	adds	r3, r0, #1
 801e3a2:	d1f3      	bne.n	801e38c <__sfputs_r+0xa>
 801e3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e3a8 <_vfiprintf_r>:
 801e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ac:	460d      	mov	r5, r1
 801e3ae:	b09d      	sub	sp, #116	; 0x74
 801e3b0:	4614      	mov	r4, r2
 801e3b2:	4698      	mov	r8, r3
 801e3b4:	4606      	mov	r6, r0
 801e3b6:	b118      	cbz	r0, 801e3c0 <_vfiprintf_r+0x18>
 801e3b8:	6983      	ldr	r3, [r0, #24]
 801e3ba:	b90b      	cbnz	r3, 801e3c0 <_vfiprintf_r+0x18>
 801e3bc:	f7ff f9ba 	bl	801d734 <__sinit>
 801e3c0:	4b89      	ldr	r3, [pc, #548]	; (801e5e8 <_vfiprintf_r+0x240>)
 801e3c2:	429d      	cmp	r5, r3
 801e3c4:	d11b      	bne.n	801e3fe <_vfiprintf_r+0x56>
 801e3c6:	6875      	ldr	r5, [r6, #4]
 801e3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e3ca:	07d9      	lsls	r1, r3, #31
 801e3cc:	d405      	bmi.n	801e3da <_vfiprintf_r+0x32>
 801e3ce:	89ab      	ldrh	r3, [r5, #12]
 801e3d0:	059a      	lsls	r2, r3, #22
 801e3d2:	d402      	bmi.n	801e3da <_vfiprintf_r+0x32>
 801e3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e3d6:	f7ff fa62 	bl	801d89e <__retarget_lock_acquire_recursive>
 801e3da:	89ab      	ldrh	r3, [r5, #12]
 801e3dc:	071b      	lsls	r3, r3, #28
 801e3de:	d501      	bpl.n	801e3e4 <_vfiprintf_r+0x3c>
 801e3e0:	692b      	ldr	r3, [r5, #16]
 801e3e2:	b9eb      	cbnz	r3, 801e420 <_vfiprintf_r+0x78>
 801e3e4:	4629      	mov	r1, r5
 801e3e6:	4630      	mov	r0, r6
 801e3e8:	f7fe f984 	bl	801c6f4 <__swsetup_r>
 801e3ec:	b1c0      	cbz	r0, 801e420 <_vfiprintf_r+0x78>
 801e3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e3f0:	07dc      	lsls	r4, r3, #31
 801e3f2:	d50e      	bpl.n	801e412 <_vfiprintf_r+0x6a>
 801e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e3f8:	b01d      	add	sp, #116	; 0x74
 801e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3fe:	4b7b      	ldr	r3, [pc, #492]	; (801e5ec <_vfiprintf_r+0x244>)
 801e400:	429d      	cmp	r5, r3
 801e402:	d101      	bne.n	801e408 <_vfiprintf_r+0x60>
 801e404:	68b5      	ldr	r5, [r6, #8]
 801e406:	e7df      	b.n	801e3c8 <_vfiprintf_r+0x20>
 801e408:	4b79      	ldr	r3, [pc, #484]	; (801e5f0 <_vfiprintf_r+0x248>)
 801e40a:	429d      	cmp	r5, r3
 801e40c:	bf08      	it	eq
 801e40e:	68f5      	ldreq	r5, [r6, #12]
 801e410:	e7da      	b.n	801e3c8 <_vfiprintf_r+0x20>
 801e412:	89ab      	ldrh	r3, [r5, #12]
 801e414:	0598      	lsls	r0, r3, #22
 801e416:	d4ed      	bmi.n	801e3f4 <_vfiprintf_r+0x4c>
 801e418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e41a:	f7ff fa41 	bl	801d8a0 <__retarget_lock_release_recursive>
 801e41e:	e7e9      	b.n	801e3f4 <_vfiprintf_r+0x4c>
 801e420:	2300      	movs	r3, #0
 801e422:	9309      	str	r3, [sp, #36]	; 0x24
 801e424:	2320      	movs	r3, #32
 801e426:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e42a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e42e:	2330      	movs	r3, #48	; 0x30
 801e430:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e5f4 <_vfiprintf_r+0x24c>
 801e434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e438:	f04f 0901 	mov.w	r9, #1
 801e43c:	4623      	mov	r3, r4
 801e43e:	469a      	mov	sl, r3
 801e440:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e444:	b10a      	cbz	r2, 801e44a <_vfiprintf_r+0xa2>
 801e446:	2a25      	cmp	r2, #37	; 0x25
 801e448:	d1f9      	bne.n	801e43e <_vfiprintf_r+0x96>
 801e44a:	ebba 0b04 	subs.w	fp, sl, r4
 801e44e:	d00b      	beq.n	801e468 <_vfiprintf_r+0xc0>
 801e450:	465b      	mov	r3, fp
 801e452:	4622      	mov	r2, r4
 801e454:	4629      	mov	r1, r5
 801e456:	4630      	mov	r0, r6
 801e458:	f7ff ff93 	bl	801e382 <__sfputs_r>
 801e45c:	3001      	adds	r0, #1
 801e45e:	f000 80aa 	beq.w	801e5b6 <_vfiprintf_r+0x20e>
 801e462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e464:	445a      	add	r2, fp
 801e466:	9209      	str	r2, [sp, #36]	; 0x24
 801e468:	f89a 3000 	ldrb.w	r3, [sl]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	f000 80a2 	beq.w	801e5b6 <_vfiprintf_r+0x20e>
 801e472:	2300      	movs	r3, #0
 801e474:	f04f 32ff 	mov.w	r2, #4294967295
 801e478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e47c:	f10a 0a01 	add.w	sl, sl, #1
 801e480:	9304      	str	r3, [sp, #16]
 801e482:	9307      	str	r3, [sp, #28]
 801e484:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e488:	931a      	str	r3, [sp, #104]	; 0x68
 801e48a:	4654      	mov	r4, sl
 801e48c:	2205      	movs	r2, #5
 801e48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e492:	4858      	ldr	r0, [pc, #352]	; (801e5f4 <_vfiprintf_r+0x24c>)
 801e494:	f7e1 feb4 	bl	8000200 <memchr>
 801e498:	9a04      	ldr	r2, [sp, #16]
 801e49a:	b9d8      	cbnz	r0, 801e4d4 <_vfiprintf_r+0x12c>
 801e49c:	06d1      	lsls	r1, r2, #27
 801e49e:	bf44      	itt	mi
 801e4a0:	2320      	movmi	r3, #32
 801e4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4a6:	0713      	lsls	r3, r2, #28
 801e4a8:	bf44      	itt	mi
 801e4aa:	232b      	movmi	r3, #43	; 0x2b
 801e4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e4b0:	f89a 3000 	ldrb.w	r3, [sl]
 801e4b4:	2b2a      	cmp	r3, #42	; 0x2a
 801e4b6:	d015      	beq.n	801e4e4 <_vfiprintf_r+0x13c>
 801e4b8:	9a07      	ldr	r2, [sp, #28]
 801e4ba:	4654      	mov	r4, sl
 801e4bc:	2000      	movs	r0, #0
 801e4be:	f04f 0c0a 	mov.w	ip, #10
 801e4c2:	4621      	mov	r1, r4
 801e4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e4c8:	3b30      	subs	r3, #48	; 0x30
 801e4ca:	2b09      	cmp	r3, #9
 801e4cc:	d94e      	bls.n	801e56c <_vfiprintf_r+0x1c4>
 801e4ce:	b1b0      	cbz	r0, 801e4fe <_vfiprintf_r+0x156>
 801e4d0:	9207      	str	r2, [sp, #28]
 801e4d2:	e014      	b.n	801e4fe <_vfiprintf_r+0x156>
 801e4d4:	eba0 0308 	sub.w	r3, r0, r8
 801e4d8:	fa09 f303 	lsl.w	r3, r9, r3
 801e4dc:	4313      	orrs	r3, r2
 801e4de:	9304      	str	r3, [sp, #16]
 801e4e0:	46a2      	mov	sl, r4
 801e4e2:	e7d2      	b.n	801e48a <_vfiprintf_r+0xe2>
 801e4e4:	9b03      	ldr	r3, [sp, #12]
 801e4e6:	1d19      	adds	r1, r3, #4
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	9103      	str	r1, [sp, #12]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	bfbb      	ittet	lt
 801e4f0:	425b      	neglt	r3, r3
 801e4f2:	f042 0202 	orrlt.w	r2, r2, #2
 801e4f6:	9307      	strge	r3, [sp, #28]
 801e4f8:	9307      	strlt	r3, [sp, #28]
 801e4fa:	bfb8      	it	lt
 801e4fc:	9204      	strlt	r2, [sp, #16]
 801e4fe:	7823      	ldrb	r3, [r4, #0]
 801e500:	2b2e      	cmp	r3, #46	; 0x2e
 801e502:	d10c      	bne.n	801e51e <_vfiprintf_r+0x176>
 801e504:	7863      	ldrb	r3, [r4, #1]
 801e506:	2b2a      	cmp	r3, #42	; 0x2a
 801e508:	d135      	bne.n	801e576 <_vfiprintf_r+0x1ce>
 801e50a:	9b03      	ldr	r3, [sp, #12]
 801e50c:	1d1a      	adds	r2, r3, #4
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	9203      	str	r2, [sp, #12]
 801e512:	2b00      	cmp	r3, #0
 801e514:	bfb8      	it	lt
 801e516:	f04f 33ff 	movlt.w	r3, #4294967295
 801e51a:	3402      	adds	r4, #2
 801e51c:	9305      	str	r3, [sp, #20]
 801e51e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e604 <_vfiprintf_r+0x25c>
 801e522:	7821      	ldrb	r1, [r4, #0]
 801e524:	2203      	movs	r2, #3
 801e526:	4650      	mov	r0, sl
 801e528:	f7e1 fe6a 	bl	8000200 <memchr>
 801e52c:	b140      	cbz	r0, 801e540 <_vfiprintf_r+0x198>
 801e52e:	2340      	movs	r3, #64	; 0x40
 801e530:	eba0 000a 	sub.w	r0, r0, sl
 801e534:	fa03 f000 	lsl.w	r0, r3, r0
 801e538:	9b04      	ldr	r3, [sp, #16]
 801e53a:	4303      	orrs	r3, r0
 801e53c:	3401      	adds	r4, #1
 801e53e:	9304      	str	r3, [sp, #16]
 801e540:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e544:	482c      	ldr	r0, [pc, #176]	; (801e5f8 <_vfiprintf_r+0x250>)
 801e546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e54a:	2206      	movs	r2, #6
 801e54c:	f7e1 fe58 	bl	8000200 <memchr>
 801e550:	2800      	cmp	r0, #0
 801e552:	d03f      	beq.n	801e5d4 <_vfiprintf_r+0x22c>
 801e554:	4b29      	ldr	r3, [pc, #164]	; (801e5fc <_vfiprintf_r+0x254>)
 801e556:	bb1b      	cbnz	r3, 801e5a0 <_vfiprintf_r+0x1f8>
 801e558:	9b03      	ldr	r3, [sp, #12]
 801e55a:	3307      	adds	r3, #7
 801e55c:	f023 0307 	bic.w	r3, r3, #7
 801e560:	3308      	adds	r3, #8
 801e562:	9303      	str	r3, [sp, #12]
 801e564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e566:	443b      	add	r3, r7
 801e568:	9309      	str	r3, [sp, #36]	; 0x24
 801e56a:	e767      	b.n	801e43c <_vfiprintf_r+0x94>
 801e56c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e570:	460c      	mov	r4, r1
 801e572:	2001      	movs	r0, #1
 801e574:	e7a5      	b.n	801e4c2 <_vfiprintf_r+0x11a>
 801e576:	2300      	movs	r3, #0
 801e578:	3401      	adds	r4, #1
 801e57a:	9305      	str	r3, [sp, #20]
 801e57c:	4619      	mov	r1, r3
 801e57e:	f04f 0c0a 	mov.w	ip, #10
 801e582:	4620      	mov	r0, r4
 801e584:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e588:	3a30      	subs	r2, #48	; 0x30
 801e58a:	2a09      	cmp	r2, #9
 801e58c:	d903      	bls.n	801e596 <_vfiprintf_r+0x1ee>
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d0c5      	beq.n	801e51e <_vfiprintf_r+0x176>
 801e592:	9105      	str	r1, [sp, #20]
 801e594:	e7c3      	b.n	801e51e <_vfiprintf_r+0x176>
 801e596:	fb0c 2101 	mla	r1, ip, r1, r2
 801e59a:	4604      	mov	r4, r0
 801e59c:	2301      	movs	r3, #1
 801e59e:	e7f0      	b.n	801e582 <_vfiprintf_r+0x1da>
 801e5a0:	ab03      	add	r3, sp, #12
 801e5a2:	9300      	str	r3, [sp, #0]
 801e5a4:	462a      	mov	r2, r5
 801e5a6:	4b16      	ldr	r3, [pc, #88]	; (801e600 <_vfiprintf_r+0x258>)
 801e5a8:	a904      	add	r1, sp, #16
 801e5aa:	4630      	mov	r0, r6
 801e5ac:	f7fd fab0 	bl	801bb10 <_printf_float>
 801e5b0:	4607      	mov	r7, r0
 801e5b2:	1c78      	adds	r0, r7, #1
 801e5b4:	d1d6      	bne.n	801e564 <_vfiprintf_r+0x1bc>
 801e5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5b8:	07d9      	lsls	r1, r3, #31
 801e5ba:	d405      	bmi.n	801e5c8 <_vfiprintf_r+0x220>
 801e5bc:	89ab      	ldrh	r3, [r5, #12]
 801e5be:	059a      	lsls	r2, r3, #22
 801e5c0:	d402      	bmi.n	801e5c8 <_vfiprintf_r+0x220>
 801e5c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5c4:	f7ff f96c 	bl	801d8a0 <__retarget_lock_release_recursive>
 801e5c8:	89ab      	ldrh	r3, [r5, #12]
 801e5ca:	065b      	lsls	r3, r3, #25
 801e5cc:	f53f af12 	bmi.w	801e3f4 <_vfiprintf_r+0x4c>
 801e5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e5d2:	e711      	b.n	801e3f8 <_vfiprintf_r+0x50>
 801e5d4:	ab03      	add	r3, sp, #12
 801e5d6:	9300      	str	r3, [sp, #0]
 801e5d8:	462a      	mov	r2, r5
 801e5da:	4b09      	ldr	r3, [pc, #36]	; (801e600 <_vfiprintf_r+0x258>)
 801e5dc:	a904      	add	r1, sp, #16
 801e5de:	4630      	mov	r0, r6
 801e5e0:	f7fd fd3a 	bl	801c058 <_printf_i>
 801e5e4:	e7e4      	b.n	801e5b0 <_vfiprintf_r+0x208>
 801e5e6:	bf00      	nop
 801e5e8:	080205f8 	.word	0x080205f8
 801e5ec:	08020618 	.word	0x08020618
 801e5f0:	080205d8 	.word	0x080205d8
 801e5f4:	08020794 	.word	0x08020794
 801e5f8:	0802079e 	.word	0x0802079e
 801e5fc:	0801bb11 	.word	0x0801bb11
 801e600:	0801e383 	.word	0x0801e383
 801e604:	0802079a 	.word	0x0802079a

0801e608 <__sread>:
 801e608:	b510      	push	{r4, lr}
 801e60a:	460c      	mov	r4, r1
 801e60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e610:	f000 f8ee 	bl	801e7f0 <_read_r>
 801e614:	2800      	cmp	r0, #0
 801e616:	bfab      	itete	ge
 801e618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e61a:	89a3      	ldrhlt	r3, [r4, #12]
 801e61c:	181b      	addge	r3, r3, r0
 801e61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e622:	bfac      	ite	ge
 801e624:	6563      	strge	r3, [r4, #84]	; 0x54
 801e626:	81a3      	strhlt	r3, [r4, #12]
 801e628:	bd10      	pop	{r4, pc}

0801e62a <__swrite>:
 801e62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e62e:	461f      	mov	r7, r3
 801e630:	898b      	ldrh	r3, [r1, #12]
 801e632:	05db      	lsls	r3, r3, #23
 801e634:	4605      	mov	r5, r0
 801e636:	460c      	mov	r4, r1
 801e638:	4616      	mov	r6, r2
 801e63a:	d505      	bpl.n	801e648 <__swrite+0x1e>
 801e63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e640:	2302      	movs	r3, #2
 801e642:	2200      	movs	r2, #0
 801e644:	f000 f870 	bl	801e728 <_lseek_r>
 801e648:	89a3      	ldrh	r3, [r4, #12]
 801e64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e64e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e652:	81a3      	strh	r3, [r4, #12]
 801e654:	4632      	mov	r2, r6
 801e656:	463b      	mov	r3, r7
 801e658:	4628      	mov	r0, r5
 801e65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e65e:	f000 b817 	b.w	801e690 <_write_r>

0801e662 <__sseek>:
 801e662:	b510      	push	{r4, lr}
 801e664:	460c      	mov	r4, r1
 801e666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e66a:	f000 f85d 	bl	801e728 <_lseek_r>
 801e66e:	1c43      	adds	r3, r0, #1
 801e670:	89a3      	ldrh	r3, [r4, #12]
 801e672:	bf15      	itete	ne
 801e674:	6560      	strne	r0, [r4, #84]	; 0x54
 801e676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e67a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e67e:	81a3      	strheq	r3, [r4, #12]
 801e680:	bf18      	it	ne
 801e682:	81a3      	strhne	r3, [r4, #12]
 801e684:	bd10      	pop	{r4, pc}

0801e686 <__sclose>:
 801e686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e68a:	f000 b81b 	b.w	801e6c4 <_close_r>
	...

0801e690 <_write_r>:
 801e690:	b538      	push	{r3, r4, r5, lr}
 801e692:	4d07      	ldr	r5, [pc, #28]	; (801e6b0 <_write_r+0x20>)
 801e694:	4604      	mov	r4, r0
 801e696:	4608      	mov	r0, r1
 801e698:	4611      	mov	r1, r2
 801e69a:	2200      	movs	r2, #0
 801e69c:	602a      	str	r2, [r5, #0]
 801e69e:	461a      	mov	r2, r3
 801e6a0:	f7ea f9d6 	bl	8008a50 <_write>
 801e6a4:	1c43      	adds	r3, r0, #1
 801e6a6:	d102      	bne.n	801e6ae <_write_r+0x1e>
 801e6a8:	682b      	ldr	r3, [r5, #0]
 801e6aa:	b103      	cbz	r3, 801e6ae <_write_r+0x1e>
 801e6ac:	6023      	str	r3, [r4, #0]
 801e6ae:	bd38      	pop	{r3, r4, r5, pc}
 801e6b0:	2000ba18 	.word	0x2000ba18

0801e6b4 <abort>:
 801e6b4:	b508      	push	{r3, lr}
 801e6b6:	2006      	movs	r0, #6
 801e6b8:	f000 f900 	bl	801e8bc <raise>
 801e6bc:	2001      	movs	r0, #1
 801e6be:	f7f0 fb71 	bl	800eda4 <_exit>
	...

0801e6c4 <_close_r>:
 801e6c4:	b538      	push	{r3, r4, r5, lr}
 801e6c6:	4d06      	ldr	r5, [pc, #24]	; (801e6e0 <_close_r+0x1c>)
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	4604      	mov	r4, r0
 801e6cc:	4608      	mov	r0, r1
 801e6ce:	602b      	str	r3, [r5, #0]
 801e6d0:	f7f0 fb8f 	bl	800edf2 <_close>
 801e6d4:	1c43      	adds	r3, r0, #1
 801e6d6:	d102      	bne.n	801e6de <_close_r+0x1a>
 801e6d8:	682b      	ldr	r3, [r5, #0]
 801e6da:	b103      	cbz	r3, 801e6de <_close_r+0x1a>
 801e6dc:	6023      	str	r3, [r4, #0]
 801e6de:	bd38      	pop	{r3, r4, r5, pc}
 801e6e0:	2000ba18 	.word	0x2000ba18

0801e6e4 <_fstat_r>:
 801e6e4:	b538      	push	{r3, r4, r5, lr}
 801e6e6:	4d07      	ldr	r5, [pc, #28]	; (801e704 <_fstat_r+0x20>)
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	4604      	mov	r4, r0
 801e6ec:	4608      	mov	r0, r1
 801e6ee:	4611      	mov	r1, r2
 801e6f0:	602b      	str	r3, [r5, #0]
 801e6f2:	f7f0 fb8a 	bl	800ee0a <_fstat>
 801e6f6:	1c43      	adds	r3, r0, #1
 801e6f8:	d102      	bne.n	801e700 <_fstat_r+0x1c>
 801e6fa:	682b      	ldr	r3, [r5, #0]
 801e6fc:	b103      	cbz	r3, 801e700 <_fstat_r+0x1c>
 801e6fe:	6023      	str	r3, [r4, #0]
 801e700:	bd38      	pop	{r3, r4, r5, pc}
 801e702:	bf00      	nop
 801e704:	2000ba18 	.word	0x2000ba18

0801e708 <_isatty_r>:
 801e708:	b538      	push	{r3, r4, r5, lr}
 801e70a:	4d06      	ldr	r5, [pc, #24]	; (801e724 <_isatty_r+0x1c>)
 801e70c:	2300      	movs	r3, #0
 801e70e:	4604      	mov	r4, r0
 801e710:	4608      	mov	r0, r1
 801e712:	602b      	str	r3, [r5, #0]
 801e714:	f7f0 fb89 	bl	800ee2a <_isatty>
 801e718:	1c43      	adds	r3, r0, #1
 801e71a:	d102      	bne.n	801e722 <_isatty_r+0x1a>
 801e71c:	682b      	ldr	r3, [r5, #0]
 801e71e:	b103      	cbz	r3, 801e722 <_isatty_r+0x1a>
 801e720:	6023      	str	r3, [r4, #0]
 801e722:	bd38      	pop	{r3, r4, r5, pc}
 801e724:	2000ba18 	.word	0x2000ba18

0801e728 <_lseek_r>:
 801e728:	b538      	push	{r3, r4, r5, lr}
 801e72a:	4d07      	ldr	r5, [pc, #28]	; (801e748 <_lseek_r+0x20>)
 801e72c:	4604      	mov	r4, r0
 801e72e:	4608      	mov	r0, r1
 801e730:	4611      	mov	r1, r2
 801e732:	2200      	movs	r2, #0
 801e734:	602a      	str	r2, [r5, #0]
 801e736:	461a      	mov	r2, r3
 801e738:	f7f0 fb82 	bl	800ee40 <_lseek>
 801e73c:	1c43      	adds	r3, r0, #1
 801e73e:	d102      	bne.n	801e746 <_lseek_r+0x1e>
 801e740:	682b      	ldr	r3, [r5, #0]
 801e742:	b103      	cbz	r3, 801e746 <_lseek_r+0x1e>
 801e744:	6023      	str	r3, [r4, #0]
 801e746:	bd38      	pop	{r3, r4, r5, pc}
 801e748:	2000ba18 	.word	0x2000ba18

0801e74c <__ascii_mbtowc>:
 801e74c:	b082      	sub	sp, #8
 801e74e:	b901      	cbnz	r1, 801e752 <__ascii_mbtowc+0x6>
 801e750:	a901      	add	r1, sp, #4
 801e752:	b142      	cbz	r2, 801e766 <__ascii_mbtowc+0x1a>
 801e754:	b14b      	cbz	r3, 801e76a <__ascii_mbtowc+0x1e>
 801e756:	7813      	ldrb	r3, [r2, #0]
 801e758:	600b      	str	r3, [r1, #0]
 801e75a:	7812      	ldrb	r2, [r2, #0]
 801e75c:	1e10      	subs	r0, r2, #0
 801e75e:	bf18      	it	ne
 801e760:	2001      	movne	r0, #1
 801e762:	b002      	add	sp, #8
 801e764:	4770      	bx	lr
 801e766:	4610      	mov	r0, r2
 801e768:	e7fb      	b.n	801e762 <__ascii_mbtowc+0x16>
 801e76a:	f06f 0001 	mvn.w	r0, #1
 801e76e:	e7f8      	b.n	801e762 <__ascii_mbtowc+0x16>

0801e770 <memmove>:
 801e770:	4288      	cmp	r0, r1
 801e772:	b510      	push	{r4, lr}
 801e774:	eb01 0402 	add.w	r4, r1, r2
 801e778:	d902      	bls.n	801e780 <memmove+0x10>
 801e77a:	4284      	cmp	r4, r0
 801e77c:	4623      	mov	r3, r4
 801e77e:	d807      	bhi.n	801e790 <memmove+0x20>
 801e780:	1e43      	subs	r3, r0, #1
 801e782:	42a1      	cmp	r1, r4
 801e784:	d008      	beq.n	801e798 <memmove+0x28>
 801e786:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e78a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e78e:	e7f8      	b.n	801e782 <memmove+0x12>
 801e790:	4402      	add	r2, r0
 801e792:	4601      	mov	r1, r0
 801e794:	428a      	cmp	r2, r1
 801e796:	d100      	bne.n	801e79a <memmove+0x2a>
 801e798:	bd10      	pop	{r4, pc}
 801e79a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e79e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e7a2:	e7f7      	b.n	801e794 <memmove+0x24>

0801e7a4 <_realloc_r>:
 801e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7a6:	4607      	mov	r7, r0
 801e7a8:	4614      	mov	r4, r2
 801e7aa:	460e      	mov	r6, r1
 801e7ac:	b921      	cbnz	r1, 801e7b8 <_realloc_r+0x14>
 801e7ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e7b2:	4611      	mov	r1, r2
 801e7b4:	f7fd b8b2 	b.w	801b91c <_malloc_r>
 801e7b8:	b922      	cbnz	r2, 801e7c4 <_realloc_r+0x20>
 801e7ba:	f7fd f85f 	bl	801b87c <_free_r>
 801e7be:	4625      	mov	r5, r4
 801e7c0:	4628      	mov	r0, r5
 801e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7c4:	f000 f8ab 	bl	801e91e <_malloc_usable_size_r>
 801e7c8:	42a0      	cmp	r0, r4
 801e7ca:	d20f      	bcs.n	801e7ec <_realloc_r+0x48>
 801e7cc:	4621      	mov	r1, r4
 801e7ce:	4638      	mov	r0, r7
 801e7d0:	f7fd f8a4 	bl	801b91c <_malloc_r>
 801e7d4:	4605      	mov	r5, r0
 801e7d6:	2800      	cmp	r0, #0
 801e7d8:	d0f2      	beq.n	801e7c0 <_realloc_r+0x1c>
 801e7da:	4631      	mov	r1, r6
 801e7dc:	4622      	mov	r2, r4
 801e7de:	f7fd f837 	bl	801b850 <memcpy>
 801e7e2:	4631      	mov	r1, r6
 801e7e4:	4638      	mov	r0, r7
 801e7e6:	f7fd f849 	bl	801b87c <_free_r>
 801e7ea:	e7e9      	b.n	801e7c0 <_realloc_r+0x1c>
 801e7ec:	4635      	mov	r5, r6
 801e7ee:	e7e7      	b.n	801e7c0 <_realloc_r+0x1c>

0801e7f0 <_read_r>:
 801e7f0:	b538      	push	{r3, r4, r5, lr}
 801e7f2:	4d07      	ldr	r5, [pc, #28]	; (801e810 <_read_r+0x20>)
 801e7f4:	4604      	mov	r4, r0
 801e7f6:	4608      	mov	r0, r1
 801e7f8:	4611      	mov	r1, r2
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	602a      	str	r2, [r5, #0]
 801e7fe:	461a      	mov	r2, r3
 801e800:	f7f0 fada 	bl	800edb8 <_read>
 801e804:	1c43      	adds	r3, r0, #1
 801e806:	d102      	bne.n	801e80e <_read_r+0x1e>
 801e808:	682b      	ldr	r3, [r5, #0]
 801e80a:	b103      	cbz	r3, 801e80e <_read_r+0x1e>
 801e80c:	6023      	str	r3, [r4, #0]
 801e80e:	bd38      	pop	{r3, r4, r5, pc}
 801e810:	2000ba18 	.word	0x2000ba18

0801e814 <_init_signal_r>:
 801e814:	b538      	push	{r3, r4, r5, lr}
 801e816:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801e818:	4605      	mov	r5, r0
 801e81a:	b954      	cbnz	r4, 801e832 <_init_signal_r+0x1e>
 801e81c:	2180      	movs	r1, #128	; 0x80
 801e81e:	f7fd f87d 	bl	801b91c <_malloc_r>
 801e822:	6468      	str	r0, [r5, #68]	; 0x44
 801e824:	b138      	cbz	r0, 801e836 <_init_signal_r+0x22>
 801e826:	1f03      	subs	r3, r0, #4
 801e828:	307c      	adds	r0, #124	; 0x7c
 801e82a:	f843 4f04 	str.w	r4, [r3, #4]!
 801e82e:	4283      	cmp	r3, r0
 801e830:	d1fb      	bne.n	801e82a <_init_signal_r+0x16>
 801e832:	2000      	movs	r0, #0
 801e834:	bd38      	pop	{r3, r4, r5, pc}
 801e836:	f04f 30ff 	mov.w	r0, #4294967295
 801e83a:	e7fb      	b.n	801e834 <_init_signal_r+0x20>

0801e83c <_signal_r>:
 801e83c:	291f      	cmp	r1, #31
 801e83e:	b570      	push	{r4, r5, r6, lr}
 801e840:	4604      	mov	r4, r0
 801e842:	460d      	mov	r5, r1
 801e844:	4616      	mov	r6, r2
 801e846:	d904      	bls.n	801e852 <_signal_r+0x16>
 801e848:	2316      	movs	r3, #22
 801e84a:	6003      	str	r3, [r0, #0]
 801e84c:	f04f 30ff 	mov.w	r0, #4294967295
 801e850:	e006      	b.n	801e860 <_signal_r+0x24>
 801e852:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801e854:	b12b      	cbz	r3, 801e862 <_signal_r+0x26>
 801e856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e858:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e85c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 801e860:	bd70      	pop	{r4, r5, r6, pc}
 801e862:	f7ff ffd7 	bl	801e814 <_init_signal_r>
 801e866:	2800      	cmp	r0, #0
 801e868:	d0f5      	beq.n	801e856 <_signal_r+0x1a>
 801e86a:	e7ef      	b.n	801e84c <_signal_r+0x10>

0801e86c <_raise_r>:
 801e86c:	291f      	cmp	r1, #31
 801e86e:	b538      	push	{r3, r4, r5, lr}
 801e870:	4604      	mov	r4, r0
 801e872:	460d      	mov	r5, r1
 801e874:	d904      	bls.n	801e880 <_raise_r+0x14>
 801e876:	2316      	movs	r3, #22
 801e878:	6003      	str	r3, [r0, #0]
 801e87a:	f04f 30ff 	mov.w	r0, #4294967295
 801e87e:	bd38      	pop	{r3, r4, r5, pc}
 801e880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e882:	b112      	cbz	r2, 801e88a <_raise_r+0x1e>
 801e884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e888:	b94b      	cbnz	r3, 801e89e <_raise_r+0x32>
 801e88a:	4620      	mov	r0, r4
 801e88c:	f000 f838 	bl	801e900 <_getpid_r>
 801e890:	462a      	mov	r2, r5
 801e892:	4601      	mov	r1, r0
 801e894:	4620      	mov	r0, r4
 801e896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e89a:	f000 b81f 	b.w	801e8dc <_kill_r>
 801e89e:	2b01      	cmp	r3, #1
 801e8a0:	d00a      	beq.n	801e8b8 <_raise_r+0x4c>
 801e8a2:	1c59      	adds	r1, r3, #1
 801e8a4:	d103      	bne.n	801e8ae <_raise_r+0x42>
 801e8a6:	2316      	movs	r3, #22
 801e8a8:	6003      	str	r3, [r0, #0]
 801e8aa:	2001      	movs	r0, #1
 801e8ac:	e7e7      	b.n	801e87e <_raise_r+0x12>
 801e8ae:	2400      	movs	r4, #0
 801e8b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e8b4:	4628      	mov	r0, r5
 801e8b6:	4798      	blx	r3
 801e8b8:	2000      	movs	r0, #0
 801e8ba:	e7e0      	b.n	801e87e <_raise_r+0x12>

0801e8bc <raise>:
 801e8bc:	4b02      	ldr	r3, [pc, #8]	; (801e8c8 <raise+0xc>)
 801e8be:	4601      	mov	r1, r0
 801e8c0:	6818      	ldr	r0, [r3, #0]
 801e8c2:	f7ff bfd3 	b.w	801e86c <_raise_r>
 801e8c6:	bf00      	nop
 801e8c8:	200001b0 	.word	0x200001b0

0801e8cc <signal>:
 801e8cc:	4b02      	ldr	r3, [pc, #8]	; (801e8d8 <signal+0xc>)
 801e8ce:	460a      	mov	r2, r1
 801e8d0:	4601      	mov	r1, r0
 801e8d2:	6818      	ldr	r0, [r3, #0]
 801e8d4:	f7ff bfb2 	b.w	801e83c <_signal_r>
 801e8d8:	200001b0 	.word	0x200001b0

0801e8dc <_kill_r>:
 801e8dc:	b538      	push	{r3, r4, r5, lr}
 801e8de:	4d07      	ldr	r5, [pc, #28]	; (801e8fc <_kill_r+0x20>)
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	4604      	mov	r4, r0
 801e8e4:	4608      	mov	r0, r1
 801e8e6:	4611      	mov	r1, r2
 801e8e8:	602b      	str	r3, [r5, #0]
 801e8ea:	f7f0 fa4b 	bl	800ed84 <_kill>
 801e8ee:	1c43      	adds	r3, r0, #1
 801e8f0:	d102      	bne.n	801e8f8 <_kill_r+0x1c>
 801e8f2:	682b      	ldr	r3, [r5, #0]
 801e8f4:	b103      	cbz	r3, 801e8f8 <_kill_r+0x1c>
 801e8f6:	6023      	str	r3, [r4, #0]
 801e8f8:	bd38      	pop	{r3, r4, r5, pc}
 801e8fa:	bf00      	nop
 801e8fc:	2000ba18 	.word	0x2000ba18

0801e900 <_getpid_r>:
 801e900:	f7f0 ba38 	b.w	800ed74 <_getpid>

0801e904 <__ascii_wctomb>:
 801e904:	b149      	cbz	r1, 801e91a <__ascii_wctomb+0x16>
 801e906:	2aff      	cmp	r2, #255	; 0xff
 801e908:	bf85      	ittet	hi
 801e90a:	238a      	movhi	r3, #138	; 0x8a
 801e90c:	6003      	strhi	r3, [r0, #0]
 801e90e:	700a      	strbls	r2, [r1, #0]
 801e910:	f04f 30ff 	movhi.w	r0, #4294967295
 801e914:	bf98      	it	ls
 801e916:	2001      	movls	r0, #1
 801e918:	4770      	bx	lr
 801e91a:	4608      	mov	r0, r1
 801e91c:	4770      	bx	lr

0801e91e <_malloc_usable_size_r>:
 801e91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e922:	1f18      	subs	r0, r3, #4
 801e924:	2b00      	cmp	r3, #0
 801e926:	bfbc      	itt	lt
 801e928:	580b      	ldrlt	r3, [r1, r0]
 801e92a:	18c0      	addlt	r0, r0, r3
 801e92c:	4770      	bx	lr
	...

0801e930 <_init>:
 801e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e932:	bf00      	nop
 801e934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e936:	bc08      	pop	{r3}
 801e938:	469e      	mov	lr, r3
 801e93a:	4770      	bx	lr

0801e93c <_fini>:
 801e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e93e:	bf00      	nop
 801e940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e942:	bc08      	pop	{r3}
 801e944:	469e      	mov	lr, r3
 801e946:	4770      	bx	lr
