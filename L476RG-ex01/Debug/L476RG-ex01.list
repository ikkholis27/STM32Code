
L476RG-ex01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a5c  08005a5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a64  08005a64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d94  20000074  08005ae0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e08  08005ae0  00022e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c53  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002615  00000000  00000000  00032cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00035310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028575  00000000  00000000  00037248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eae  00000000  00000000  0005f7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f695e  00000000  00000000  0007066b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c9c  00000000  00000000  0016701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800560c 	.word	0x0800560c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800560c 	.word	0x0800560c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_write>:
static void MX_UART4_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
 {
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b086      	sub	sp, #24
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e009      	b.n	80005ec <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc9 	bl	8000578 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf1      	blt.n	80005d8 <_write+0x12>
	 }
	 HAL_Delay(500);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f000 ff80 	bl	80014fc <HAL_Delay>
	 return len;
 80005fc:	687b      	ldr	r3, [r7, #4]
 }
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <hard_reset_mdm>:
	ptr1[len]= '\r';
	ptr1[len+1]= '\n';
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr1, len+2, timeout);
}

void hard_reset_mdm(){
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 fa23 	bl	8001a5c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f000 ff6f 	bl	80014fc <HAL_Delay>
	  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f001 fa19 	bl	8001a5c <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <ATCOMMAND>:
//	}
//}

///////////////////// MODEM FUNCTION
void ATCOMMAND(char *command, char* res)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
//	char respond[120] = {0};
//	char *ptr= strstr(respond,res);
//	while(ptr == NULL){
	memset(buffer,0,1100);
 800063a:	f240 424c 	movw	r2, #1100	; 0x44c
 800063e:	2100      	movs	r1, #0
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <ATCOMMAND+0x50>)
 8000642:	f003 fe4b 	bl	80042dc <memset>
	HAL_UART_Transmit(&huart1,(uint8_t *)command,strlen(command),0xff);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff fdc2 	bl	80001d0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	23ff      	movs	r3, #255	; 0xff
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <ATCOMMAND+0x54>)
 8000656:	f003 f8b1 	bl	80037bc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t *)buffer,1100,500);
 800065a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800065e:	f240 424c 	movw	r2, #1100	; 0x44c
 8000662:	4907      	ldr	r1, [pc, #28]	; (8000680 <ATCOMMAND+0x50>)
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <ATCOMMAND+0x54>)
 8000666:	f003 f93d 	bl	80038e4 <HAL_UART_Receive>
//	ptr = strstr(respond,res);
//	}
//	printf("%s\r\n",respond);
	printf(buffer);
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <ATCOMMAND+0x50>)
 800066c:	f003 fe3e 	bl	80042ec <iprintf>
	printf("\r\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <ATCOMMAND+0x58>)
 8000672:	f003 fec1 	bl	80043f8 <puts>

}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20001780 	.word	0x20001780
 8000684:	200016f8 	.word	0x200016f8
 8000688:	08005634 	.word	0x08005634

0800068c <ATCOMMANDLong>:

void ATCOMMANDLong(char *command, char* res)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]

//	char *ptr= strstr(respond,res);
//	while(ptr == NULL){
	memset(buffer,0,1100);
 8000696:	f240 424c 	movw	r2, #1100	; 0x44c
 800069a:	2100      	movs	r1, #0
 800069c:	480f      	ldr	r0, [pc, #60]	; (80006dc <ATCOMMANDLong+0x50>)
 800069e:	f003 fe1d 	bl	80042dc <memset>
	HAL_UART_Transmit(&huart1,(uint8_t *)command,strlen(command),0xff);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fd94 	bl	80001d0 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <ATCOMMANDLong+0x54>)
 80006b2:	f003 f883 	bl	80037bc <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1,(uint8_t *)buffer,1100,2000);
 80006b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006ba:	f240 424c 	movw	r2, #1100	; 0x44c
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <ATCOMMANDLong+0x50>)
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <ATCOMMANDLong+0x54>)
 80006c2:	f003 f90f 	bl	80038e4 <HAL_UART_Receive>
//	ptr = strstr(respond,res);
//	}
	printf(buffer);
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <ATCOMMANDLong+0x50>)
 80006c8:	f003 fe10 	bl	80042ec <iprintf>
	printf("\r\n");
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <ATCOMMANDLong+0x58>)
 80006ce:	f003 fe93 	bl	80043f8 <puts>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20001780 	.word	0x20001780
 80006e0:	200016f8 	.word	0x200016f8
 80006e4:	08005634 	.word	0x08005634

080006e8 <NBIOT_setup>:
	osDelay(1000);

	printf("NBIOT done\r\n");
}
void NBIOT_setup(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0a2      	sub	sp, #136	; 0x88
 80006ec:	af00      	add	r7, sp, #0
	printf("\r\nNBIOT setup\r\n");
 80006ee:	485d      	ldr	r0, [pc, #372]	; (8000864 <NBIOT_setup+0x17c>)
 80006f0:	f003 fe82 	bl	80043f8 <puts>

	char at[]="AT\r\n";
 80006f4:	4a5c      	ldr	r2, [pc, #368]	; (8000868 <NBIOT_setup+0x180>)
 80006f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fe:	6018      	str	r0, [r3, #0]
 8000700:	3304      	adds	r3, #4
 8000702:	7019      	strb	r1, [r3, #0]
	char at_cmp[] = "OK";
 8000704:	4a59      	ldr	r2, [pc, #356]	; (800086c <NBIOT_setup+0x184>)
 8000706:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	8019      	strh	r1, [r3, #0]
 8000710:	3302      	adds	r3, #2
 8000712:	0c12      	lsrs	r2, r2, #16
 8000714:	701a      	strb	r2, [r3, #0]
	ATCOMMAND(at,at_cmp);
 8000716:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800071a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff85 	bl	8000630 <ATCOMMAND>

//	char ate[]="ATE0\r\n";
//	char ate_cmp[] = "OK";
//	ATCOMMAND(ate,ate_cmp);

	char cpin[]="AT+CPIN?\r\n";
 8000726:	4a52      	ldr	r2, [pc, #328]	; (8000870 <NBIOT_setup+0x188>)
 8000728:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800072c:	ca07      	ldmia	r2, {r0, r1, r2}
 800072e:	c303      	stmia	r3!, {r0, r1}
 8000730:	801a      	strh	r2, [r3, #0]
 8000732:	3302      	adds	r3, #2
 8000734:	0c12      	lsrs	r2, r2, #16
 8000736:	701a      	strb	r2, [r3, #0]
	char cpin_cmp[] = "+CPIN:";
 8000738:	4a4e      	ldr	r2, [pc, #312]	; (8000874 <NBIOT_setup+0x18c>)
 800073a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800073e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000742:	6018      	str	r0, [r3, #0]
 8000744:	3304      	adds	r3, #4
 8000746:	8019      	strh	r1, [r3, #0]
 8000748:	3302      	adds	r3, #2
 800074a:	0c0a      	lsrs	r2, r1, #16
 800074c:	701a      	strb	r2, [r3, #0]
	ATCOMMAND(cpin,cpin_cmp);
 800074e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000752:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff69 	bl	8000630 <ATCOMMAND>

	char csq[]="AT+CSQ\r\n";
 800075e:	4a46      	ldr	r2, [pc, #280]	; (8000878 <NBIOT_setup+0x190>)
 8000760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000764:	ca07      	ldmia	r2, {r0, r1, r2}
 8000766:	c303      	stmia	r3!, {r0, r1}
 8000768:	701a      	strb	r2, [r3, #0]
	char csq_cmp[] = "+CSQ:";
 800076a:	4a44      	ldr	r2, [pc, #272]	; (800087c <NBIOT_setup+0x194>)
 800076c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000774:	6018      	str	r0, [r3, #0]
 8000776:	3304      	adds	r3, #4
 8000778:	8019      	strh	r1, [r3, #0]
	ATCOMMAND(csq,csq_cmp);
 800077a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800077e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff53 	bl	8000630 <ATCOMMAND>

	char creg[]="AT+CREG?\r\n";
 800078a:	4a3d      	ldr	r2, [pc, #244]	; (8000880 <NBIOT_setup+0x198>)
 800078c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000790:	ca07      	ldmia	r2, {r0, r1, r2}
 8000792:	c303      	stmia	r3!, {r0, r1}
 8000794:	801a      	strh	r2, [r3, #0]
 8000796:	3302      	adds	r3, #2
 8000798:	0c12      	lsrs	r2, r2, #16
 800079a:	701a      	strb	r2, [r3, #0]
	char creg_cmp[] = "+CREG";
 800079c:	4a39      	ldr	r2, [pc, #228]	; (8000884 <NBIOT_setup+0x19c>)
 800079e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	3304      	adds	r3, #4
 80007aa:	8019      	strh	r1, [r3, #0]
	ATCOMMAND(creg,creg_cmp);
 80007ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff3a 	bl	8000630 <ATCOMMAND>

	char cgreg[]="AT+CGREG?\r\n";
 80007bc:	4a32      	ldr	r2, [pc, #200]	; (8000888 <NBIOT_setup+0x1a0>)
 80007be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char cgreg_cmp[] = "+CGREG";
 80007c8:	4a30      	ldr	r2, [pc, #192]	; (800088c <NBIOT_setup+0x1a4>)
 80007ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d2:	6018      	str	r0, [r3, #0]
 80007d4:	3304      	adds	r3, #4
 80007d6:	8019      	strh	r1, [r3, #0]
 80007d8:	3302      	adds	r3, #2
 80007da:	0c0a      	lsrs	r2, r1, #16
 80007dc:	701a      	strb	r2, [r3, #0]
	ATCOMMAND(cgreg,cgreg_cmp);
 80007de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80007e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff21 	bl	8000630 <ATCOMMAND>

//	char cgatt1[]="AT+CGATT=1\r\n";
//	char cgatt1_cmp[] = "+CGATT";
//	ATCOMMAND(cgatt1,cgatt1_cmp);

	char cgatt[]="AT+CGATT?\r\n";
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <NBIOT_setup+0x1a8>)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char cgatt_cmp[] = "+CGATT:";
 80007fa:	4a26      	ldr	r2, [pc, #152]	; (8000894 <NBIOT_setup+0x1ac>)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	e883 0003 	stmia.w	r3, {r0, r1}
	ATCOMMAND(cgatt,cgatt_cmp);
 8000808:	f107 0218 	add.w	r2, r7, #24
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff0c 	bl	8000630 <ATCOMMAND>

	char cops[]="AT+COPS?\r\n";
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <NBIOT_setup+0x1b0>)
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000820:	c303      	stmia	r3!, {r0, r1}
 8000822:	801a      	strh	r2, [r3, #0]
 8000824:	3302      	adds	r3, #2
 8000826:	0c12      	lsrs	r2, r2, #16
 8000828:	701a      	strb	r2, [r3, #0]
	char cops_cmp[] = "+COPS:";
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <NBIOT_setup+0x1b4>)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000832:	6018      	str	r0, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	8019      	strh	r1, [r3, #0]
 8000838:	3302      	adds	r3, #2
 800083a:	0c0a      	lsrs	r2, r1, #16
 800083c:	701a      	strb	r2, [r3, #0]
	ATCOMMAND(cops,cops_cmp);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fef2 	bl	8000630 <ATCOMMAND>

	bearer_config();
 800084c:	f000 f82a 	bl	80008a4 <bearer_config>

	http_request();
 8000850:	f000 f8ca 	bl	80009e8 <http_request>

	printf("NBIOT done\r\n");
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <NBIOT_setup+0x1b8>)
 8000856:	f003 fdcf 	bl	80043f8 <puts>
}
 800085a:	bf00      	nop
 800085c:	3788      	adds	r7, #136	; 0x88
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08005710 	.word	0x08005710
 8000868:	08005670 	.word	0x08005670
 800086c:	08005720 	.word	0x08005720
 8000870:	08005724 	.word	0x08005724
 8000874:	08005730 	.word	0x08005730
 8000878:	08005738 	.word	0x08005738
 800087c:	08005744 	.word	0x08005744
 8000880:	0800574c 	.word	0x0800574c
 8000884:	08005758 	.word	0x08005758
 8000888:	08005760 	.word	0x08005760
 800088c:	0800576c 	.word	0x0800576c
 8000890:	08005774 	.word	0x08005774
 8000894:	08005780 	.word	0x08005780
 8000898:	08005788 	.word	0x08005788
 800089c:	08005794 	.word	0x08005794
 80008a0:	08005664 	.word	0x08005664

080008a4 <bearer_config>:
*/
	printf("NBIOT done\r\n");
}

void bearer_config(void)
{
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b0a0      	sub	sp, #128	; 0x80
 80008a8:	af00      	add	r7, sp, #0
	printf("\r\nBearer setup\r\n");
 80008aa:	4846      	ldr	r0, [pc, #280]	; (80009c4 <bearer_config+0x120>)
 80008ac:	f003 fda4 	bl	80043f8 <puts>

	memset(uart4_at,0,20);
 80008b0:	2214      	movs	r2, #20
 80008b2:	2100      	movs	r1, #0
 80008b4:	4844      	ldr	r0, [pc, #272]	; (80009c8 <bearer_config+0x124>)
 80008b6:	f003 fd11 	bl	80042dc <memset>
//	char at[]="AT\r\n";
////	ATCOMMAND_IT(at);
//	ATCOMMAND(at,at);
//	HAL_Delay(1000);

	char cgatt[]="AT+CGATT?\r\n";
 80008ba:	4a44      	ldr	r2, [pc, #272]	; (80009cc <bearer_config+0x128>)
 80008bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	ATCOMMAND_IT(cgatt);
	ATCOMMAND(cgatt,cgatt);
 80008c6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80008ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fead 	bl	8000630 <ATCOMMAND>
	HAL_Delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008da:	f000 fe0f 	bl	80014fc <HAL_Delay>

	char csq[]="AT+SAPBR=0,1\r\n";
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <bearer_config+0x12c>)
 80008e0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80008e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e6:	c407      	stmia	r4!, {r0, r1, r2}
 80008e8:	8023      	strh	r3, [r4, #0]
 80008ea:	3402      	adds	r4, #2
 80008ec:	0c1b      	lsrs	r3, r3, #16
 80008ee:	7023      	strb	r3, [r4, #0]
//	ATCOMMAND_IT(csq);
	ATCOMMAND(csq,csq);
 80008f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe98 	bl	8000630 <ATCOMMAND>
	HAL_Delay(500);
 8000900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000904:	f000 fdfa 	bl	80014fc <HAL_Delay>

	char ate[]="AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n";
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <bearer_config+0x130>)
 800090a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//	ATCOMMAND_IT(ate);
	ATCOMMAND(ate,ate);
 800091c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe82 	bl	8000630 <ATCOMMAND>
	HAL_Delay(500);
 800092c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000930:	f000 fde4 	bl	80014fc <HAL_Delay>

	char cpin[]="AT+SAPBR=3,1,\"APN\",\"nb1internet\"\r\n";
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <bearer_config+0x134>)
 8000936:	f107 0420 	add.w	r4, r7, #32
 800093a:	461d      	mov	r5, r3
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	8022      	strh	r2, [r4, #0]
 800094a:	3402      	adds	r4, #2
 800094c:	0c1b      	lsrs	r3, r3, #16
 800094e:	7023      	strb	r3, [r4, #0]
//	ATCOMMAND_IT(cpin);
	ATCOMMAND(cpin,cpin);
 8000950:	f107 0220 	add.w	r2, r7, #32
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe68 	bl	8000630 <ATCOMMAND>
	HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f000 fdca 	bl	80014fc <HAL_Delay>

	char creg[]="AT+SAPBR=1,1\r\n";
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <bearer_config+0x138>)
 800096a:	f107 0410 	add.w	r4, r7, #16
 800096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000970:	c407      	stmia	r4!, {r0, r1, r2}
 8000972:	8023      	strh	r3, [r4, #0]
 8000974:	3402      	adds	r4, #2
 8000976:	0c1b      	lsrs	r3, r3, #16
 8000978:	7023      	strb	r3, [r4, #0]
//	ATCOMMAND_IT(creg);
//	ATCOMMAND(creg,creg);
	ATCOMMANDLong(creg,creg);
 800097a:	f107 0210 	add.w	r2, r7, #16
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe81 	bl	800068c <ATCOMMANDLong>
	HAL_Delay(500);
 800098a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098e:	f000 fdb5 	bl	80014fc <HAL_Delay>

	char cgreg[]="AT+SAPBR=2,1\r\n";
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <bearer_config+0x13c>)
 8000994:	463c      	mov	r4, r7
 8000996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000998:	c407      	stmia	r4!, {r0, r1, r2}
 800099a:	8023      	strh	r3, [r4, #0]
 800099c:	3402      	adds	r4, #2
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	7023      	strb	r3, [r4, #0]
//	ATCOMMAND_IT(cgreg);
//	ATCOMMAND(cgreg,cgreg);
	ATCOMMANDLong(cgreg,cgreg);
 80009a2:	463a      	mov	r2, r7
 80009a4:	463b      	mov	r3, r7
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe6f 	bl	800068c <ATCOMMANDLong>
	HAL_Delay(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b2:	f000 fda3 	bl	80014fc <HAL_Delay>

	printf("Bearer Config done\r\n");
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <bearer_config+0x140>)
 80009b8:	f003 fd1e 	bl	80043f8 <puts>
}
 80009bc:	bf00      	nop
 80009be:	3780      	adds	r7, #128	; 0x80
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bdb0      	pop	{r4, r5, r7, pc}
 80009c4:	080057a8 	.word	0x080057a8
 80009c8:	20001274 	.word	0x20001274
 80009cc:	08005774 	.word	0x08005774
 80009d0:	080057cc 	.word	0x080057cc
 80009d4:	080057dc 	.word	0x080057dc
 80009d8:	080057fc 	.word	0x080057fc
 80009dc:	08005820 	.word	0x08005820
 80009e0:	08005830 	.word	0x08005830
 80009e4:	080057b8 	.word	0x080057b8

080009e8 <http_request>:

void http_request(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b0ac      	sub	sp, #176	; 0xb0
 80009ec:	af00      	add	r7, sp, #0
	printf("\r\nHTTP Request\r\n");
 80009ee:	4842      	ldr	r0, [pc, #264]	; (8000af8 <http_request+0x110>)
 80009f0:	f003 fd02 	bl	80043f8 <puts>

	memset(uart4_at,0,20);
 80009f4:	2214      	movs	r2, #20
 80009f6:	2100      	movs	r1, #0
 80009f8:	4840      	ldr	r0, [pc, #256]	; (8000afc <http_request+0x114>)
 80009fa:	f003 fc6f 	bl	80042dc <memset>
//	char at_cmp[] = "OK";
////	ATCOMMAND_IT(at);
//	ATCOMMAND(at,at);
//	HAL_Delay(1000);

	char cgatt[]="AT+HTTPINIT\r\n";
 80009fe:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <http_request+0x118>)
 8000a00:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a06:	c407      	stmia	r4!, {r0, r1, r2}
 8000a08:	8023      	strh	r3, [r4, #0]
	char cgatt_cmp[] = "+CGATT:";
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <http_request+0x11c>)
 8000a0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a14:	e883 0003 	stmia.w	r3, {r0, r1}
//	ATCOMMAND_IT(cgatt);
	ATCOMMAND(cgatt,cgatt);
 8000a18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000a1c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe04 	bl	8000630 <ATCOMMAND>
	HAL_Delay(500);
 8000a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2c:	f000 fd66 	bl	80014fc <HAL_Delay>

	char ate[]="AT+HTTPPARA=\"CID\",1\r\n";
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <http_request+0x120>)
 8000a32:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000a36:	461d      	mov	r5, r3
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a40:	6020      	str	r0, [r4, #0]
 8000a42:	3404      	adds	r4, #4
 8000a44:	8021      	strh	r1, [r4, #0]
//	ATCOMMAND_IT(ate);
	ATCOMMAND(ate,ate);
 8000a46:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000a4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fded 	bl	8000630 <ATCOMMAND>
	HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f000 fd4f 	bl	80014fc <HAL_Delay>

	char cpin[]="AT+HTTPPARA=\"URL\",\"www.flexisolve.com/bs/index.php/sensor/testing\"\r\n";
 8000a5e:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <http_request+0x124>)
 8000a60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a64:	4611      	mov	r1, r2
 8000a66:	2245      	movs	r2, #69	; 0x45
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fc29 	bl	80042c0 <memcpy>
//	ATCOMMAND_IT(cpin);
	ATCOMMANDLong(cpin,cpin);
 8000a6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe07 	bl	800068c <ATCOMMANDLong>
//	HAL_Delay(500);

	char csq[]="AT+HTTPACTION=0\r\n";
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <http_request+0x128>)
 8000a80:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	682b      	ldr	r3, [r5, #0]
 8000a8c:	8023      	strh	r3, [r4, #0]
//	ATCOMMAND_IT(csq);
	ATCOMMANDLong(csq,csq);
 8000a8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fdf7 	bl	800068c <ATCOMMANDLong>
	HAL_Delay(3000);
 8000a9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aa2:	f000 fd2b 	bl	80014fc <HAL_Delay>

//	sprintf(uart4_at,"AT+HTTPREAD");
	char creg[]="AT+HTTPREAD\r\n";
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <http_request+0x12c>)
 8000aa8:	f107 0414 	add.w	r4, r7, #20
 8000aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aae:	c407      	stmia	r4!, {r0, r1, r2}
 8000ab0:	8023      	strh	r3, [r4, #0]
//	ATCOMMAND_IT(creg);
	ATCOMMANDLong(creg,creg);
 8000ab2:	f107 0214 	add.w	r2, r7, #20
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fde5 	bl	800068c <ATCOMMANDLong>
	HAL_Delay(2000);
 8000ac2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ac6:	f000 fd19 	bl	80014fc <HAL_Delay>

	char cgreg[]="AT+HTTPTERM\r\n";
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <http_request+0x130>)
 8000acc:	1d3c      	adds	r4, r7, #4
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ad2:	8023      	strh	r3, [r4, #0]
	//	ATCOMMAND_IT(cgreg);
	ATCOMMAND(cgreg,cgreg);
 8000ad4:	1d3a      	adds	r2, r7, #4
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fda8 	bl	8000630 <ATCOMMAND>
	HAL_Delay(1000);
 8000ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae4:	f000 fd0a 	bl	80014fc <HAL_Delay>

	printf("HTTP REQ done\r\n");
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <http_request+0x134>)
 8000aea:	f003 fc85 	bl	80043f8 <puts>
}
 8000aee:	bf00      	nop
 8000af0:	37b0      	adds	r7, #176	; 0xb0
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08005840 	.word	0x08005840
 8000afc:	20001274 	.word	0x20001274
 8000b00:	08005860 	.word	0x08005860
 8000b04:	08005780 	.word	0x08005780
 8000b08:	08005870 	.word	0x08005870
 8000b0c:	08005888 	.word	0x08005888
 8000b10:	080058d0 	.word	0x080058d0
 8000b14:	080058e4 	.word	0x080058e4
 8000b18:	080058f4 	.word	0x080058f4
 8000b1c:	08005850 	.word	0x08005850

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fcb1 	bl	800148a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f8c6 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2c:	f000 f9f0 	bl	8000f10 <MX_GPIO_Init>
  MX_UART4_Init();
 8000b30:	f000 f94e 	bl	8000dd0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000b34:	f000 f97c 	bl	8000e30 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b38:	f000 f9b2 	bl	8000ea0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if(debug==1) printf("START\r\n please wait Modem Starting in 10s\r\n");
 8000b3c:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <main+0x168>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d102      	bne.n	8000b4a <main+0x2a>
 8000b44:	4851      	ldr	r0, [pc, #324]	; (8000c8c <main+0x16c>)
 8000b46:	f003 fc57 	bl	80043f8 <puts>
//  HAL_UART_Transmit(&huart4, "START\r\n",7,10);
  hard_reset_mdm();
 8000b4a:	f7ff fd5c 	bl	8000606 <hard_reset_mdm>
  HAL_UART_Receive(&huart1,buffer_mdm,1100,10000);
 8000b4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b52:	f240 424c 	movw	r2, #1100	; 0x44c
 8000b56:	494e      	ldr	r1, [pc, #312]	; (8000c90 <main+0x170>)
 8000b58:	484e      	ldr	r0, [pc, #312]	; (8000c94 <main+0x174>)
 8000b5a:	f002 fec3 	bl	80038e4 <HAL_UART_Receive>
  printf(buffer_mdm);
 8000b5e:	484c      	ldr	r0, [pc, #304]	; (8000c90 <main+0x170>)
 8000b60:	f003 fbc4 	bl	80042ec <iprintf>
  HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f000 fcc8 	bl	80014fc <HAL_Delay>
  memset(buffer_mdm,0,1100);
 8000b6c:	f240 424c 	movw	r2, #1100	; 0x44c
 8000b70:	2100      	movs	r1, #0
 8000b72:	4847      	ldr	r0, [pc, #284]	; (8000c90 <main+0x170>)
 8000b74:	f003 fbb2 	bl	80042dc <memset>
  //enable uart interrupt
//  HAL_UART_Receive_IT(&huart1,(uint8_t *)uart1_buf,1);
//  HAL_UART_Receive_IT(&huart3,(uint8_t *)uart3_buf,1);
//  HAL_UART_Receive_IT(&huart4,(uint8_t *)uart4_buf,1);
//  HAL_UART_Receive_IT(&huart5,(uint8_t *)uart5_buf,1);
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b78:	2120      	movs	r1, #32
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 ff85 	bl	8001a8c <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b86:	f000 fcb9 	bl	80014fc <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 ff7c 	bl	8001a8c <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	f000 fcb0 	bl	80014fc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 ff73 	bl	8001a8c <HAL_GPIO_TogglePin>
//		  printf(buffer);
//		  memset(buffer,0,1100);
//		  rxavailable=0;
//	  }
//	  else {
	  memset(uart4_at,0,20);
 8000ba6:	2214      	movs	r2, #20
 8000ba8:	2100      	movs	r1, #0
 8000baa:	483b      	ldr	r0, [pc, #236]	; (8000c98 <main+0x178>)
 8000bac:	f003 fb96 	bl	80042dc <memset>
	  sprintf(uart4_at,"AT+CPSI?\r\n");
 8000bb0:	493a      	ldr	r1, [pc, #232]	; (8000c9c <main+0x17c>)
 8000bb2:	4839      	ldr	r0, [pc, #228]	; (8000c98 <main+0x178>)
 8000bb4:	f003 fc28 	bl	8004408 <siprintf>
//	  HAL_Delay(500);
//	  printf((uint8_t *)uart4_at);
//	  HAL_Delay(500);
//	  sprintf(uart4_at,"AT+CPSI?");
//	  HAL_UART_Transmit(&huart1, "AT+CPSI?\r\n",10,10);
	  memset(buffer,0,1100);
 8000bb8:	f240 424c 	movw	r2, #1100	; 0x44c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4838      	ldr	r0, [pc, #224]	; (8000ca0 <main+0x180>)
 8000bc0:	f003 fb8c 	bl	80042dc <memset>
	  if(HAL_UART_Transmit(&huart1, uart4_at,10,100)==HAL_OK){
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	220a      	movs	r2, #10
 8000bc8:	4933      	ldr	r1, [pc, #204]	; (8000c98 <main+0x178>)
 8000bca:	4832      	ldr	r0, [pc, #200]	; (8000c94 <main+0x174>)
 8000bcc:	f002 fdf6 	bl	80037bc <HAL_UART_Transmit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <main+0xce>
		  bugint = HAL_UART_Receive(&huart1,buffer,1100,2000);
 8000bd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bda:	f240 424c 	movw	r2, #1100	; 0x44c
 8000bde:	4930      	ldr	r1, [pc, #192]	; (8000ca0 <main+0x180>)
 8000be0:	482c      	ldr	r0, [pc, #176]	; (8000c94 <main+0x174>)
 8000be2:	f002 fe7f 	bl	80038e4 <HAL_UART_Receive>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x184>)
 8000bec:	601a      	str	r2, [r3, #0]
	  }
	  printf(buffer);
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <main+0x180>)
 8000bf0:	f003 fb7c 	bl	80042ec <iprintf>
	  HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f000 fc80 	bl	80014fc <HAL_Delay>
	  memset(buffer,0,1100);
 8000bfc:	f240 424c 	movw	r2, #1100	; 0x44c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <main+0x180>)
 8000c04:	f003 fb6a 	bl	80042dc <memset>
	  if(cnt1==0) NBIOT_setup();
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <main+0x188>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <main+0xf6>
 8000c10:	f7ff fd6a 	bl	80006e8 <NBIOT_setup>
 8000c14:	e00f      	b.n	8000c36 <main+0x116>
	  else {
		  printf("%d",cnt1);
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0x188>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4823      	ldr	r0, [pc, #140]	; (8000cac <main+0x18c>)
 8000c1e:	f003 fb65 	bl	80042ec <iprintf>
		 http_request();
 8000c22:	f7ff fee1 	bl	80009e8 <http_request>
		 if(cnt1>=5) cnt1=-1;
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <main+0x188>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	dd03      	ble.n	8000c36 <main+0x116>
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <main+0x188>)
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	601a      	str	r2, [r3, #0]
	  }
	  cnt1++;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <main+0x188>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <main+0x188>)
 8000c3e:	6013      	str	r3, [r2, #0]
//	  bearer_config();
//	  HAL_Delay(500);
	  HAL_UART_Transmit(&huart3, "AT\r\n",4,10);
 8000c40:	230a      	movs	r3, #10
 8000c42:	2204      	movs	r2, #4
 8000c44:	491a      	ldr	r1, [pc, #104]	; (8000cb0 <main+0x190>)
 8000c46:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <main+0x194>)
 8000c48:	f002 fdb8 	bl	80037bc <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart3,buffer,1100,3000);
 8000c4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c50:	f240 424c 	movw	r2, #1100	; 0x44c
 8000c54:	4912      	ldr	r1, [pc, #72]	; (8000ca0 <main+0x180>)
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <main+0x194>)
 8000c58:	f002 fe44 	bl	80038e4 <HAL_UART_Receive>
	  printf(buffer);
 8000c5c:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <main+0x180>)
 8000c5e:	f003 fb45 	bl	80042ec <iprintf>
	  HAL_Delay(500);
 8000c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c66:	f000 fc49 	bl	80014fc <HAL_Delay>
	  memset(buffer,0,1100);
 8000c6a:	f240 424c 	movw	r2, #1100	; 0x44c
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <main+0x180>)
 8000c72:	f003 fb33 	bl	80042dc <memset>
//	  HAL_UART_Transmit(&huart4, "AT\r\n",4,10);
//	  HAL_UART_Receive(&huart4,buffer,1100,1000);
//	  printf(buffer);
//	  HAL_Delay(500);
//	  memset(buffer,0,1100);
	  HAL_Delay(500);
 8000c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7a:	f000 fc3f 	bl	80014fc <HAL_Delay>
////	  HAL_UART_Transmit(&huart2, "AT2\r\n",5,10);
//	  HAL_UART_Transmit(&huart3, "AT\r\n",4,10);
//	  HAL_UART_Transmit(&huart4, "AT4\r\n",5,10);
//	  HAL_UART_Transmit(&huart5, "AT5\r\n",5,10);
//	  HAL_UART_Transmit(&hlpuart1, "ATLP\r\n",6,10);
	  HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fc3b 	bl	80014fc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c86:	e789      	b.n	8000b9c <main+0x7c>
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	08005904 	.word	0x08005904
 8000c90:	2000295c 	.word	0x2000295c
 8000c94:	200016f8 	.word	0x200016f8
 8000c98:	20001274 	.word	0x20001274
 8000c9c:	08005930 	.word	0x08005930
 8000ca0:	20001780 	.word	0x20001780
 8000ca4:	20002954 	.word	0x20002954
 8000ca8:	20000090 	.word	0x20000090
 8000cac:	0800593c 	.word	0x0800593c
 8000cb0:	08005670 	.word	0x08005670
 8000cb4:	200004fc 	.word	0x200004fc

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0b8      	sub	sp, #224	; 0xe0
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc2:	2244      	movs	r2, #68	; 0x44
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fb08 	bl	80042dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2288      	movs	r2, #136	; 0x88
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fafa 	bl	80042dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ce8:	f000 feea 	bl	8001ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <SystemClock_Config+0x114>)
 8000cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <SystemClock_Config+0x114>)
 8000cf4:	f023 0318 	bic.w	r3, r3, #24
 8000cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000d2c:	2324      	movs	r3, #36	; 0x24
 8000d2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d32:	2307      	movs	r3, #7
 8000d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 ff2d 	bl	8001ba8 <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d54:	f000 f954 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 faf9 	bl	8002374 <HAL_RCC_ClockConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d88:	f000 f93a 	bl	8001000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000d8c:	230d      	movs	r3, #13
 8000d8e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fd20 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000daa:	f000 f929 	bl	8001000 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000db2:	f000 fea3 	bl	8001afc <HAL_PWREx_ControlVoltageScaling>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000dbc:	f000 f920 	bl	8001000 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dc0:	f001 fffa 	bl	8002db8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dc4:	bf00      	nop
 8000dc6:	37e0      	adds	r7, #224	; 0xe0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_UART4_Init+0x58>)
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <MX_UART4_Init+0x5c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_UART4_Init+0x58>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_UART4_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_UART4_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_UART4_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_UART4_Init+0x58>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_UART4_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_UART4_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_UART4_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_UART4_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_UART4_Init+0x58>)
 8000e14:	f002 fc84 	bl	8003720 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e1e:	f000 f8ef 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200028bc 	.word	0x200028bc
 8000e2c:	40004c00 	.word	0x40004c00

08000e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <MX_USART1_UART_Init+0x6c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e80:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART1_UART_Init+0x68>)
 8000e84:	f002 fc4c 	bl	8003720 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8000e8e:	f000 f8b7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200016f8 	.word	0x200016f8
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <MX_USART3_UART_Init+0x6c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ede:	2230      	movs	r2, #48	; 0x30
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USART3_UART_Init+0x68>)
 8000ef4:	f002 fc14 	bl	8003720 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 8000efe:	f000 f87f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200004fc 	.word	0x200004fc
 8000f0c:	40004800 	.word	0x40004800

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_GPIO_Init+0xc4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|PWRKEY_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2160      	movs	r1, #96	; 0x60
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f000 fd65 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PWRKEY_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PWRKEY_Pin;
 8000f92:	2360      	movs	r3, #96	; 0x60
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f000 fbac 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_GPIO_Init+0xc8>)
 8000fc6:	f000 fb9f 	bl	8001708 <HAL_GPIO_Init>

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fee:	f000 fa65 	bl	80014bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40000400 	.word	0x40000400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	; 0x60
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x44>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	; 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_UART_MspInit+0x13c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d129      	bne.n	80010ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_UART_MspInit+0x140>)
 800107c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a40      	ldr	r2, [pc, #256]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HAL_UART_MspInit+0x140>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a6:	2303      	movs	r3, #3
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010b6:	2308      	movs	r3, #8
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fb20 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c8:	e05d      	b.n	8001186 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a32      	ldr	r2, [pc, #200]	; (8001198 <HAL_UART_MspInit+0x144>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d12a      	bne.n	800112a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6613      	str	r3, [r2, #96]	; 0x60
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a28      	ldr	r2, [pc, #160]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_UART_MspInit+0x140>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001104:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001116:	2307      	movs	r3, #7
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 faf0 	bl	8001708 <HAL_GPIO_Init>
}
 8001128:	e02d      	b.n	8001186 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_UART_MspInit+0x148>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d128      	bne.n	8001186 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <HAL_UART_MspInit+0x140>)
 800113a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0x140>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_UART_MspInit+0x140>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_UART_MspInit+0x140>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001164:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001176:	2307      	movs	r3, #7
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <HAL_UART_MspInit+0x14c>)
 8001182:	f000 fac1 	bl	8001708 <HAL_GPIO_Init>
}
 8001186:	bf00      	nop
 8001188:	3738      	adds	r7, #56	; 0x38
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004c00 	.word	0x40004c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40013800 	.word	0x40013800
 800119c:	40004800 	.word	0x40004800
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	201d      	movs	r0, #29
 80011ba:	f000 fa7b 	bl	80016b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011be:	201d      	movs	r0, #29
 80011c0:	f000 fa94 	bl	80016ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_InitTick+0x9c>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_InitTick+0x9c>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	6593      	str	r3, [r2, #88]	; 0x58
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_InitTick+0x9c>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011dc:	f107 0210 	add.w	r2, r7, #16
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fa6a 	bl	80026c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ec:	f001 fa3c 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80011f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_InitTick+0xa0>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	0c9b      	lsrs	r3, r3, #18
 80011fc:	3b01      	subs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_InitTick+0xa4>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <HAL_InitTick+0xa8>)
 8001204:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_InitTick+0xa4>)
 8001208:	f240 32e7 	movw	r2, #999	; 0x3e7
 800120c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_InitTick+0xa4>)
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_InitTick+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_InitTick+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_InitTick+0xa4>)
 8001222:	f001 ffab 	bl	800317c <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d104      	bne.n	8001236 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <HAL_InitTick+0xa4>)
 800122e:	f002 f807 	bl	8003240 <HAL_TIM_Base_Start_IT>
 8001232:	4603      	mov	r3, r0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	431bde83 	.word	0x431bde83
 8001248:	20002da8 	.word	0x20002da8
 800124c:	40000400 	.word	0x40000400

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM3_IRQHandler+0x10>)
 80012ae:	f002 f837 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20002da8 	.word	0x20002da8

080012bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131e:	605a      	str	r2, [r3, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_isatty>:

int _isatty(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f002 ff6c 	bl	800426c <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20018000 	.word	0x20018000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	20000094 	.word	0x20000094
 80013c8:	20002e08 	.word	0x20002e08

080013cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <SystemInit+0x64>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <SystemInit+0x64>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <SystemInit+0x68>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a13      	ldr	r2, [pc, #76]	; (8001434 <SystemInit+0x68>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <SystemInit+0x68>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SystemInit+0x68>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <SystemInit+0x68>)
 80013f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001400:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <SystemInit+0x68>)
 8001404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001408:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <SystemInit+0x68>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <SystemInit+0x68>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <SystemInit+0x68>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SystemInit+0x64>)
 800141e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001422:	609a      	str	r2, [r3, #8]
#endif
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	40021000 	.word	0x40021000

08001438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff ffc6 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001440:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001442:	e003      	b.n	800144c <LoopCopyDataInit>

08001444 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001446:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001448:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800144a:	3104      	adds	r1, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <LoopForever+0xa>)
	ldr	r3, =_edata
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001450:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001452:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001454:	d3f6      	bcc.n	8001444 <CopyDataInit>
	ldr	r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001458:	e002      	b.n	8001460 <LoopFillZerobss>

0800145a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800145a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800145c:	f842 3b04 	str.w	r3, [r2], #4

08001460 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LoopForever+0x16>)
	cmp	r2, r3
 8001462:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001464:	d3f9      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 ff07 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146a:	f7ff fb59 	bl	8000b20 <main>

0800146e <LoopForever>:

LoopForever:
    b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001470:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001474:	08005a6c 	.word	0x08005a6c
	ldr	r0, =_sdata
 8001478:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800147c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001480:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001484:	20002e08 	.word	0x20002e08

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>

0800148a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f902 	bl	800169e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149a:	2005      	movs	r0, #5
 800149c:	f7ff fe82 	bl	80011a4 <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	e001      	b.n	80014b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ac:	f7ff fdae 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20002df4 	.word	0x20002df4

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20002df4 	.word	0x20002df4

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000000c 	.word	0x2000000c

08001544 <__NVIC_SetPriorityGrouping>:
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff4c 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c6:	f7ff ff61 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	6978      	ldr	r0, [r7, #20]
 80016d2:	f7ff ffb1 	bl	8001638 <NVIC_EncodePriority>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff80 	bl	80015e4 <__NVIC_SetPriority>
}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff54 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e17f      	b.n	8001a18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8171 	beq.w	8001a12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d00b      	beq.n	8001750 <HAL_GPIO_Init+0x48>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001744:	2b11      	cmp	r3, #17
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d118      	bne.n	80017f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x128>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	6939      	ldr	r1, [r7, #16]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80ac 	beq.w	8001a12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	4a5e      	ldr	r2, [pc, #376]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6613      	str	r3, [r2, #96]	; 0x60
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d2:	4a5a      	ldr	r2, [pc, #360]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x242>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4f      	ldr	r2, [pc, #316]	; (8001a40 <HAL_GPIO_Init+0x338>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x23e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x33c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x23a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x340>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x236>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x344>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x232>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x348>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x22e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x34c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x22a>
 800192e:	2306      	movs	r3, #6
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x244>
 8001932:	2307      	movs	r3, #7
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x244>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x244>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x244>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x244>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x244>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x244>
 800194a:	2300      	movs	r3, #0
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195c:	4937      	ldr	r1, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x334>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_GPIO_Init+0x350>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_GPIO_Init+0x350>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_GPIO_Init+0x350>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_GPIO_Init+0x350>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_GPIO_Init+0x350>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_GPIO_Init+0x350>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_GPIO_Init+0x350>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_GPIO_Init+0x350>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f ae78 	bne.w	8001718 <HAL_GPIO_Init+0x10>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	48001400 	.word	0x48001400
 8001a54:	48001800 	.word	0x48001800
 8001a58:	40010400 	.word	0x40010400

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43d9      	mvns	r1, r3
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	400b      	ands	r3, r1
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40007000 	.word	0x40007000

08001ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000

08001afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0a:	d130      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b18:	d038      	beq.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b22:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2232      	movs	r2, #50	; 0x32
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b40:	e002      	b.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	d102      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f2      	bne.n	8001b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b68:	d110      	bne.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e00f      	b.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d007      	beq.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e3d4      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bba:	4ba1      	ldr	r3, [pc, #644]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc4:	4b9e      	ldr	r3, [pc, #632]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e4 	beq.w	8001da4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4a>
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	f040 808b 	bne.w	8001d00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 8087 	bne.w	8001d00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf2:	4b93      	ldr	r3, [pc, #588]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e3ac      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_RCC_OscConfig+0x7c>
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c22:	e005      	b.n	8001c30 <HAL_RCC_OscConfig+0x88>
 8001c24:	4b86      	ldr	r3, [pc, #536]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d223      	bcs.n	8001c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fd73 	bl	8002724 <RCC_SetFlashLatencyFromMSIRange>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e38d      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b7d      	ldr	r3, [pc, #500]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7c      	ldr	r2, [pc, #496]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4977      	ldr	r1, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	4972      	ldr	r1, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e025      	b.n	8001cc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7c:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	496a      	ldr	r1, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4965      	ldr	r1, [pc, #404]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fd33 	bl	8002724 <RCC_SetFlashLatencyFromMSIRange>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e34d      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc8:	f000 fc36 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b5c      	ldr	r3, [pc, #368]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	495a      	ldr	r1, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x29c>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x2a0>)
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCC_OscConfig+0x2a4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fa59 	bl	80011a4 <HAL_InitTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d052      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	e331      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d032      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fbe6 	bl	80014e4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fbe2 	bl	80014e4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e31a      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	493b      	ldr	r1, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	4936      	ldr	r1, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e01a      	b.n	8001da4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fbb3 	bl	80014e4 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d82:	f7ff fbaf 	bl	80014e4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e2e7      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x1da>
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d074      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x21a>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d10e      	bne.n	8001dda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d064      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d160      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e2c4      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x24a>
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e01d      	b.n	8001e2e <HAL_RCC_OscConfig+0x286>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x26e>
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x286>
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_RCC_OscConfig+0x298>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff fb55 	bl	80014e4 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3c:	e011      	b.n	8001e62 <HAL_RCC_OscConfig+0x2ba>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	0800597c 	.word	0x0800597c
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fb48 	bl	80014e4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e280      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e62:	4baf      	ldr	r3, [pc, #700]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2a8>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff fb38 	bl	80014e4 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff fb34 	bl	80014e4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e26c      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	4ba5      	ldr	r3, [pc, #660]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2d0>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d060      	beq.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x310>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d116      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	4b99      	ldr	r3, [pc, #612]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x328>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e249      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b93      	ldr	r3, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	4990      	ldr	r1, [pc, #576]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee4:	e040      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d023      	beq.n	8001f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eee:	4b8c      	ldr	r3, [pc, #560]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a8b      	ldr	r2, [pc, #556]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff faf3 	bl	80014e4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff faef 	bl	80014e4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e227      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f14:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b7f      	ldr	r3, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	497c      	ldr	r1, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e018      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a79      	ldr	r2, [pc, #484]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff facf 	bl	80014e4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff facb 	bl	80014e4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e203      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f5c:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03c      	beq.n	8001fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff faaa 	bl	80014e4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff faa6 	bl	80014e4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1de      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa6:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ef      	beq.n	8001f94 <HAL_RCC_OscConfig+0x3ec>
 8001fb4:	e01b      	b.n	8001fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fa8d 	bl	80014e4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fa89 	bl	80014e4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1c1      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ef      	bne.n	8001fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a6 	beq.w	8002148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002000:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002024:	2301      	movs	r3, #1
 8002026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_OscConfig+0x57c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d118      	bne.n	8002066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <HAL_RCC_OscConfig+0x57c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <HAL_RCC_OscConfig+0x57c>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002040:	f7ff fa50 	bl	80014e4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7ff fa4c 	bl	80014e4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e184      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x57c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0x4d8>
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207e:	e024      	b.n	80020ca <HAL_RCC_OscConfig+0x522>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b05      	cmp	r3, #5
 8002086:	d110      	bne.n	80020aa <HAL_RCC_OscConfig+0x502>
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	4a24      	ldr	r2, [pc, #144]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	4a20      	ldr	r2, [pc, #128]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a8:	e00f      	b.n	80020ca <HAL_RCC_OscConfig+0x522>
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020c2:	f023 0304 	bic.w	r3, r3, #4
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fa07 	bl	80014e4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fa03 	bl	80014e4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e139      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x578>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0ed      	beq.n	80020da <HAL_RCC_OscConfig+0x532>
 80020fe:	e01a      	b.n	8002136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f9f0 	bl	80014e4 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002106:	e00f      	b.n	8002128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff f9ec 	bl	80014e4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d906      	bls.n	8002128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e122      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002128:	4b90      	ldr	r3, [pc, #576]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e8      	bne.n	8002108 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8108 	beq.w	8002362 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	2b02      	cmp	r3, #2
 8002158:	f040 80d0 	bne.w	80022fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800215c:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
 800216e:	d130      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	3b01      	subs	r3, #1
 800217c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d127      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d11f      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219c:	2a07      	cmp	r2, #7
 800219e:	bf14      	ite	ne
 80021a0:	2201      	movne	r2, #1
 80021a2:	2200      	moveq	r2, #0
 80021a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d113      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	3b01      	subs	r3, #1
 80021cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d06e      	beq.n	80022b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d069      	beq.n	80022ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021d8:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021e4:	4b61      	ldr	r3, [pc, #388]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b7      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f4:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002200:	f7ff f970 	bl	80014e4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f96c 	bl	80014e4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0a4      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221a:	4b54      	ldr	r3, [pc, #336]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	4b51      	ldr	r3, [pc, #324]	; (8002370 <HAL_RCC_OscConfig+0x7c8>)
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002236:	3a01      	subs	r2, #1
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002240:	0212      	lsls	r2, r2, #8
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002248:	0852      	lsrs	r2, r2, #1
 800224a:	3a01      	subs	r2, #1
 800224c:	0552      	lsls	r2, r2, #21
 800224e:	4311      	orrs	r1, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002254:	0852      	lsrs	r2, r2, #1
 8002256:	3a01      	subs	r2, #1
 8002258:	0652      	lsls	r2, r2, #25
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002260:	0912      	lsrs	r2, r2, #4
 8002262:	0452      	lsls	r2, r2, #17
 8002264:	430a      	orrs	r2, r1
 8002266:	4941      	ldr	r1, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002284:	f7ff f92e 	bl	80014e4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff f92a 	bl	80014e4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e062      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022aa:	e05a      	b.n	8002362 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e059      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d152      	bne.n	8002362 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d4:	f7ff f906 	bl	80014e4 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff f902 	bl	80014e4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e03a      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x734>
 80022fa:	e032      	b.n	8002362 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d02d      	beq.n	800235e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002320:	f023 0303 	bic.w	r3, r3, #3
 8002324:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 800232c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f8d5 	bl	80014e4 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7ff f8d1 	bl	80014e4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e009      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x7c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x796>
 800235c:	e001      	b.n	8002362 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	f99d808c 	.word	0xf99d808c

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0c8      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4961      	ldr	r1, [pc, #388]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b0      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d04c      	beq.n	800245e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023cc:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d121      	bne.n	800241c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e09e      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d115      	bne.n	800241c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e092      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fc:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e086      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e07e      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	493f      	ldr	r1, [pc, #252]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242e:	f7ff f859 	bl	80014e4 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002434:	e00a      	b.n	800244c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002436:	f7ff f855 	bl	80014e4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e066      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 020c 	and.w	r2, r3, #12
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	429a      	cmp	r2, r3
 800245c:	d1eb      	bne.n	8002436 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	492c      	ldr	r1, [pc, #176]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4924      	ldr	r1, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_ClockConfig+0x1b0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e036      	b.n	800251a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4918      	ldr	r1, [pc, #96]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4910      	ldr	r1, [pc, #64]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ea:	f000 f825 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_ClockConfig+0x1b4>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490c      	ldr	r1, [pc, #48]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fe48 	bl	80011a4 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	72fb      	strb	r3, [r7, #11]

  return status;
 8002518:	7afb      	ldrb	r3, [r7, #11]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	0800597c 	.word	0x0800597c
 8002530:	20000004 	.word	0x20000004
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002550:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x34>
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d121      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d11e      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002594:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_GetSysClockFreq+0x110>)
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	e004      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_RCC_GetSysClockFreq+0x114>)
 80025be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d134      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0xa6>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xac>
 80025dc:	e005      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_GetSysClockFreq+0x110>)
 80025e0:	617b      	str	r3, [r7, #20]
      break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_GetSysClockFreq+0x114>)
 80025e6:	617b      	str	r3, [r7, #20]
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	617b      	str	r3, [r7, #20]
      break;
 80025ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	3301      	adds	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	fb02 f203 	mul.w	r2, r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	0e5b      	lsrs	r3, r3, #25
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	3301      	adds	r3, #1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002630:	69bb      	ldr	r3, [r7, #24]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	08005994 	.word	0x08005994
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200

08002650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	0800598c 	.word	0x0800598c

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002698:	f7ff ffda 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	0800598c 	.word	0x0800598c

080026c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	220f      	movs	r2, #15
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_GetClockConfig+0x5c>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RCC_GetClockConfig+0x5c>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_GetClockConfig+0x5c>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_RCC_GetClockConfig+0x5c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	08db      	lsrs	r3, r3, #3
 80026fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCC_GetClockConfig+0x60>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0207 	and.w	r2, r3, #7
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40022000 	.word	0x40022000

08002724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800273c:	f7ff f9d0 	bl	8001ae0 <HAL_PWREx_GetVoltageRange>
 8002740:	6178      	str	r0, [r7, #20]
 8002742:	e014      	b.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800275c:	f7ff f9c0 	bl	8001ae0 <HAL_PWREx_GetVoltageRange>
 8002760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002774:	d10b      	bne.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d919      	bls.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2ba0      	cmp	r3, #160	; 0xa0
 8002780:	d902      	bls.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002782:	2302      	movs	r3, #2
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	e013      	b.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002788:	2301      	movs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e010      	b.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d902      	bls.n	800279a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002794:	2303      	movs	r3, #3
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e00a      	b.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d102      	bne.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027a0:	2302      	movs	r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	e004      	b.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d101      	bne.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0207 	bic.w	r2, r3, #7
 80027b8:	4909      	ldr	r1, [pc, #36]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40022000 	.word	0x40022000

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f0:	2300      	movs	r3, #0
 80027f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d041      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002804:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002808:	d02a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800280a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800280e:	d824      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800281a:	d81e      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002824:	d010      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002826:	e018      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002828:	4b86      	ldr	r3, [pc, #536]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a85      	ldr	r2, [pc, #532]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002834:	e015      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f000 facb 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002846:	e00c      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3320      	adds	r3, #32
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fbb6 	bl	8002fc0 <RCCEx_PLLSAI2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002858:	e003      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	74fb      	strb	r3, [r7, #19]
      break;
 800285e:	e000      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002868:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002876:	4973      	ldr	r1, [pc, #460]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800287e:	e001      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d041      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002894:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002898:	d02a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800289a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800289e:	d824      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028a4:	d008      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028aa:	d81e      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b4:	d010      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028b6:	e018      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b8:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a61      	ldr	r2, [pc, #388]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c4:	e015      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fa83 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3320      	adds	r3, #32
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fb6e 	bl	8002fc0 <RCCEx_PLLSAI2_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	74fb      	strb	r3, [r7, #19]
      break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f8:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002906:	494f      	ldr	r1, [pc, #316]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800290e:	e001      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a0 	beq.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002954:	2301      	movs	r3, #1
 8002956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002964:	f7fe fdbe 	bl	80014e4 <HAL_GetTick>
 8002968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800296a:	e009      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe fdba 	bl	80014e4 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	74fb      	strb	r3, [r7, #19]
        break;
 800297e:	e005      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d15c      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01f      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d019      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fd79 	bl	80014e4 <HAL_GetTick>
 80029f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	e00b      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fd75 	bl	80014e4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a0c:	e006      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ec      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a32:	4904      	ldr	r1, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a3a:	e009      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
 8002a40:	e006      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a50:	7c7b      	ldrb	r3, [r7, #17]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a9d      	ldr	r2, [pc, #628]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6e:	4b98      	ldr	r3, [pc, #608]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 0203 	bic.w	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	4994      	ldr	r1, [pc, #592]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a90:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 020c 	bic.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	498c      	ldr	r1, [pc, #560]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab2:	4b87      	ldr	r3, [pc, #540]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4983      	ldr	r1, [pc, #524]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	497b      	ldr	r1, [pc, #492]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	4972      	ldr	r1, [pc, #456]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b18:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	496a      	ldr	r1, [pc, #424]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	4961      	ldr	r1, [pc, #388]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b5c:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	4959      	ldr	r1, [pc, #356]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7e:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	4950      	ldr	r1, [pc, #320]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	4948      	ldr	r1, [pc, #288]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	493f      	ldr	r1, [pc, #252]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d028      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	4937      	ldr	r1, [pc, #220]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0e:	60d3      	str	r3, [r2, #12]
 8002c10:	e011      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f8d8 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d028      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	491f      	ldr	r1, [pc, #124]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6c:	60d3      	str	r3, [r2, #12]
 8002c6e:	e011      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f8a9 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02b      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a02      	ldr	r2, [pc, #8]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f877 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d12:	4928      	ldr	r1, [pc, #160]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f854 	bl	8002dd8 <RCCEx_PLLSAI1_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d014      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	74bb      	strb	r3, [r7, #18]
 8002d3e:	e011      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3320      	adds	r3, #32
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f935 	bl	8002fc0 <RCCEx_PLLSAI2_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	4904      	ldr	r1, [pc, #16]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002daa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002de6:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0203 	and.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
       ||
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
       ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d047      	beq.n	8002eae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e044      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d018      	beq.n	8002e5e <RCCEx_PLLSAI1_Config+0x86>
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d825      	bhi.n	8002e7c <RCCEx_PLLSAI1_Config+0xa4>
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d002      	beq.n	8002e3a <RCCEx_PLLSAI1_Config+0x62>
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d009      	beq.n	8002e4c <RCCEx_PLLSAI1_Config+0x74>
 8002e38:	e020      	b.n	8002e7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e3a:	4b60      	ldr	r3, [pc, #384]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11d      	bne.n	8002e82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4a:	e01a      	b.n	8002e82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e4c:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5c:	e013      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e6a:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e7a:	e006      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e004      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e82:	bf00      	nop
 8002e84:	e002      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	4944      	ldr	r1, [pc, #272]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d17d      	bne.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fb10 	bl	80014e4 <HAL_GetTick>
 8002ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ec6:	e009      	b.n	8002edc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec8:	f7fe fb0c 	bl	80014e4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d902      	bls.n	8002edc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eda:	e005      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002edc:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ef      	bne.n	8002ec8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d160      	bne.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	0211      	lsls	r1, r2, #8
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	0912      	lsrs	r2, r2, #4
 8002f0c:	0452      	lsls	r2, r2, #17
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	492a      	ldr	r1, [pc, #168]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]
 8002f16:	e027      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d112      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1e:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	0211      	lsls	r1, r2, #8
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6912      	ldr	r2, [r2, #16]
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0552      	lsls	r2, r2, #21
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	491f      	ldr	r1, [pc, #124]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	610b      	str	r3, [r1, #16]
 8002f42:	e011      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	0211      	lsls	r1, r2, #8
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6952      	ldr	r2, [r2, #20]
 8002f5a:	0852      	lsrs	r2, r2, #1
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0652      	lsls	r2, r2, #25
 8002f60:	430a      	orrs	r2, r1
 8002f62:	4916      	ldr	r1, [pc, #88]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fab6 	bl	80014e4 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f7a:	e009      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f7c:	f7fe fab2 	bl	80014e4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d902      	bls.n	8002f90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f8e:	e005      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4904      	ldr	r1, [pc, #16]	; (8002fbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fce:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d10d      	bne.n	8003006 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
       ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
       ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d047      	beq.n	8003096 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e044      	b.n	8003096 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d018      	beq.n	8003046 <RCCEx_PLLSAI2_Config+0x86>
 8003014:	2b03      	cmp	r3, #3
 8003016:	d825      	bhi.n	8003064 <RCCEx_PLLSAI2_Config+0xa4>
 8003018:	2b01      	cmp	r3, #1
 800301a:	d002      	beq.n	8003022 <RCCEx_PLLSAI2_Config+0x62>
 800301c:	2b02      	cmp	r3, #2
 800301e:	d009      	beq.n	8003034 <RCCEx_PLLSAI2_Config+0x74>
 8003020:	e020      	b.n	8003064 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003022:	4b55      	ldr	r3, [pc, #340]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11d      	bne.n	800306a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003032:	e01a      	b.n	800306a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e013      	b.n	800306e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003062:	e006      	b.n	8003072 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e004      	b.n	8003074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003072:	bf00      	nop
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800307a:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6819      	ldr	r1, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	430b      	orrs	r3, r1
 8003090:	4939      	ldr	r1, [pc, #228]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d167      	bne.n	800316c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a35      	ldr	r2, [pc, #212]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe fa1c 	bl	80014e4 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ae:	e009      	b.n	80030c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030b0:	f7fe fa18 	bl	80014e4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d902      	bls.n	80030c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	73fb      	strb	r3, [r7, #15]
        break;
 80030c2:	e005      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ef      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d14a      	bne.n	800316c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	0211      	lsls	r1, r2, #8
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	0912      	lsrs	r2, r2, #4
 80030f4:	0452      	lsls	r2, r2, #17
 80030f6:	430a      	orrs	r2, r1
 80030f8:	491f      	ldr	r1, [pc, #124]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	614b      	str	r3, [r1, #20]
 80030fe:	e011      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003108:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6892      	ldr	r2, [r2, #8]
 8003110:	0211      	lsls	r1, r2, #8
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6912      	ldr	r2, [r2, #16]
 8003116:	0852      	lsrs	r2, r2, #1
 8003118:	3a01      	subs	r2, #1
 800311a:	0652      	lsls	r2, r2, #25
 800311c:	430a      	orrs	r2, r1
 800311e:	4916      	ldr	r1, [pc, #88]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	4313      	orrs	r3, r2
 8003122:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe f9d8 	bl	80014e4 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003136:	e009      	b.n	800314c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003138:	f7fe f9d4 	bl	80014e4 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d902      	bls.n	800314c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	73fb      	strb	r3, [r7, #15]
          break;
 800314a:	e005      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ef      	beq.n	8003138 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e049      	b.n	8003222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f841 	bl	800322a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 f9f8 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d001      	beq.n	8003258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e04f      	b.n	80032f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <HAL_TIM_Base_Start_IT+0xc4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d018      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_TIM_Base_Start_IT+0xc8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1e      	ldr	r2, [pc, #120]	; (800330c <HAL_TIM_Base_Start_IT+0xcc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <HAL_TIM_Base_Start_IT+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_TIM_Base_Start_IT+0xd4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_Base_Start_IT+0x76>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_TIM_Base_Start_IT+0xd8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d115      	bne.n	80032e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_TIM_Base_Start_IT+0xdc>)
 80032be:	4013      	ands	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d015      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0xb4>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ce:	d011      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	e008      	b.n	80032f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e000      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40013400 	.word	0x40013400
 8003318:	40014000 	.word	0x40014000
 800331c:	00010007 	.word	0x00010007

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f905 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8f7 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f908 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8db 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8cd 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8de 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8b1 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8a3 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8b4 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f887 	bl	8003572 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f879 	bl	800355e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f88a 	bl	8003586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fd9c 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f914 	bl	80036f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f907 	bl	800370c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d10e      	bne.n	800352a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d107      	bne.n	800352a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f838 	bl	800359a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d10e      	bne.n	8003556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d107      	bne.n	8003556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f06f 0220 	mvn.w	r2, #32
 800354e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8c7 	bl	80036e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d00f      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <TIM_Base_SetConfig+0x118>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <TIM_Base_SetConfig+0x11c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <TIM_Base_SetConfig+0x120>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3a      	ldr	r2, [pc, #232]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01f      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d01b      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <TIM_Base_SetConfig+0x118>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d017      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <TIM_Base_SetConfig+0x11c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <TIM_Base_SetConfig+0x120>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00f      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <TIM_Base_SetConfig+0x128>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <TIM_Base_SetConfig+0x12c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_Base_SetConfig+0x9a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_Base_SetConfig+0x130>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d108      	bne.n	800365c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <TIM_Base_SetConfig+0x114>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <TIM_Base_SetConfig+0x124>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <TIM_Base_SetConfig+0x128>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <TIM_Base_SetConfig+0x12c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0xf8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <TIM_Base_SetConfig+0x130>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40013400 	.word	0x40013400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e040      	b.n	80037b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fc86 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f992 	bl	8003a88 <UART_SetConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fc10 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fc97 	bl	80040e0 <UART_CheckIdleState>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	f040 8082 	bne.w	80038da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Transmit+0x26>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07a      	b.n	80038dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x38>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e073      	b.n	80038dc <HAL_UART_Transmit+0x120>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2221      	movs	r2, #33	; 0x21
 8003808:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380a:	f7fd fe6b 	bl	80014e4 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d108      	bne.n	800383c <HAL_UART_Transmit+0x80>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e003      	b.n	8003844 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800384c:	e02d      	b.n	80038aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fc8a 	bl	8004172 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e039      	b.n	80038dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800387a:	b292      	uxth	r2, r2
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	3302      	adds	r3, #2
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e008      	b.n	8003898 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b292      	uxth	r2, r2
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3301      	adds	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1cb      	bne.n	800384e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc56 	bl	8004172 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e005      	b.n	80038dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	f040 80bf 	bne.w	8003a7c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_Receive+0x26>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0b7      	b.n	8003a7e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_UART_Receive+0x38>
 8003918:	2302      	movs	r3, #2
 800391a:	e0b0      	b.n	8003a7e <HAL_UART_Receive+0x19a>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2222      	movs	r2, #34	; 0x22
 8003930:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003938:	f7fd fdd4 	bl	80014e4 <HAL_GetTick>
 800393c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003956:	d10e      	bne.n	8003976 <HAL_UART_Receive+0x92>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_UART_Receive+0x88>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800396a:	e02d      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003974:	e028      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_UART_Receive+0xb6>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <HAL_UART_Receive+0xac>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398e:	e01b      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	227f      	movs	r2, #127	; 0x7f
 8003994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003998:	e016      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a2:	d10d      	bne.n	80039c0 <HAL_UART_Receive+0xdc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <HAL_UART_Receive+0xd2>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	227f      	movs	r2, #127	; 0x7f
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b4:	e008      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	223f      	movs	r2, #63	; 0x3f
 80039ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039be:	e003      	b.n	80039c8 <HAL_UART_Receive+0xe4>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d8:	d108      	bne.n	80039ec <HAL_UART_Receive+0x108>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d104      	bne.n	80039ec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e003      	b.n	80039f4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039fc:	e033      	b.n	8003a66 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2120      	movs	r1, #32
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fbb2 	bl	8004172 <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e032      	b.n	8003a7e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	8a7b      	ldrh	r3, [r7, #18]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	3302      	adds	r3, #2
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e00d      	b.n	8003a54 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	8a7b      	ldrh	r3, [r7, #18]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4013      	ands	r3, r2
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1c5      	bne.n	80039fe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b5b0      	push	{r4, r5, r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4bad      	ldr	r3, [pc, #692]	; (8003d68 <UART_SetConfig+0x2e0>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	69f9      	ldr	r1, [r7, #28]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4aa2      	ldr	r2, [pc, #648]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a99      	ldr	r2, [pc, #612]	; (8003d70 <UART_SetConfig+0x2e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d121      	bne.n	8003b52 <UART_SetConfig+0xca>
 8003b0e:	4b99      	ldr	r3, [pc, #612]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d817      	bhi.n	8003b4c <UART_SetConfig+0xc4>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <UART_SetConfig+0x9c>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b41 	.word	0x08003b41
 8003b2c:	08003b3b 	.word	0x08003b3b
 8003b30:	08003b47 	.word	0x08003b47
 8003b34:	2301      	movs	r3, #1
 8003b36:	76fb      	strb	r3, [r7, #27]
 8003b38:	e0e7      	b.n	8003d0a <UART_SetConfig+0x282>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	76fb      	strb	r3, [r7, #27]
 8003b3e:	e0e4      	b.n	8003d0a <UART_SetConfig+0x282>
 8003b40:	2304      	movs	r3, #4
 8003b42:	76fb      	strb	r3, [r7, #27]
 8003b44:	e0e1      	b.n	8003d0a <UART_SetConfig+0x282>
 8003b46:	2308      	movs	r3, #8
 8003b48:	76fb      	strb	r3, [r7, #27]
 8003b4a:	e0de      	b.n	8003d0a <UART_SetConfig+0x282>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	76fb      	strb	r3, [r7, #27]
 8003b50:	e0db      	b.n	8003d0a <UART_SetConfig+0x282>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a88      	ldr	r2, [pc, #544]	; (8003d78 <UART_SetConfig+0x2f0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d132      	bne.n	8003bc2 <UART_SetConfig+0x13a>
 8003b5c:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d828      	bhi.n	8003bbc <UART_SetConfig+0x134>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0xe8>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003bbd 	.word	0x08003bbd
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bb1 	.word	0x08003bb1
 8003b84:	08003bbd 	.word	0x08003bbd
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003bbd 	.word	0x08003bbd
 8003b90:	08003bab 	.word	0x08003bab
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bbd 	.word	0x08003bbd
 8003ba0:	08003bb7 	.word	0x08003bb7
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	76fb      	strb	r3, [r7, #27]
 8003ba8:	e0af      	b.n	8003d0a <UART_SetConfig+0x282>
 8003baa:	2302      	movs	r3, #2
 8003bac:	76fb      	strb	r3, [r7, #27]
 8003bae:	e0ac      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	76fb      	strb	r3, [r7, #27]
 8003bb4:	e0a9      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	76fb      	strb	r3, [r7, #27]
 8003bba:	e0a6      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e0a3      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6d      	ldr	r2, [pc, #436]	; (8003d7c <UART_SetConfig+0x2f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d120      	bne.n	8003c0e <UART_SetConfig+0x186>
 8003bcc:	4b69      	ldr	r3, [pc, #420]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bd6:	2b30      	cmp	r3, #48	; 0x30
 8003bd8:	d013      	beq.n	8003c02 <UART_SetConfig+0x17a>
 8003bda:	2b30      	cmp	r3, #48	; 0x30
 8003bdc:	d814      	bhi.n	8003c08 <UART_SetConfig+0x180>
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d009      	beq.n	8003bf6 <UART_SetConfig+0x16e>
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d810      	bhi.n	8003c08 <UART_SetConfig+0x180>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <UART_SetConfig+0x168>
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d006      	beq.n	8003bfc <UART_SetConfig+0x174>
 8003bee:	e00b      	b.n	8003c08 <UART_SetConfig+0x180>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e089      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	76fb      	strb	r3, [r7, #27]
 8003bfa:	e086      	b.n	8003d0a <UART_SetConfig+0x282>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e083      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c02:	2308      	movs	r3, #8
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e080      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	e07d      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <UART_SetConfig+0x2f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d120      	bne.n	8003c5a <UART_SetConfig+0x1d2>
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c22:	2bc0      	cmp	r3, #192	; 0xc0
 8003c24:	d013      	beq.n	8003c4e <UART_SetConfig+0x1c6>
 8003c26:	2bc0      	cmp	r3, #192	; 0xc0
 8003c28:	d814      	bhi.n	8003c54 <UART_SetConfig+0x1cc>
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d009      	beq.n	8003c42 <UART_SetConfig+0x1ba>
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d810      	bhi.n	8003c54 <UART_SetConfig+0x1cc>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <UART_SetConfig+0x1b4>
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d006      	beq.n	8003c48 <UART_SetConfig+0x1c0>
 8003c3a:	e00b      	b.n	8003c54 <UART_SetConfig+0x1cc>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	76fb      	strb	r3, [r7, #27]
 8003c40:	e063      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c42:	2302      	movs	r3, #2
 8003c44:	76fb      	strb	r3, [r7, #27]
 8003c46:	e060      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e05d      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	76fb      	strb	r3, [r7, #27]
 8003c52:	e05a      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c54:	2310      	movs	r3, #16
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	e057      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a49      	ldr	r2, [pc, #292]	; (8003d84 <UART_SetConfig+0x2fc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d125      	bne.n	8003cb0 <UART_SetConfig+0x228>
 8003c64:	4b43      	ldr	r3, [pc, #268]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c72:	d017      	beq.n	8003ca4 <UART_SetConfig+0x21c>
 8003c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c78:	d817      	bhi.n	8003caa <UART_SetConfig+0x222>
 8003c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7e:	d00b      	beq.n	8003c98 <UART_SetConfig+0x210>
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d811      	bhi.n	8003caa <UART_SetConfig+0x222>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <UART_SetConfig+0x20a>
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d006      	beq.n	8003c9e <UART_SetConfig+0x216>
 8003c90:	e00b      	b.n	8003caa <UART_SetConfig+0x222>
 8003c92:	2300      	movs	r3, #0
 8003c94:	76fb      	strb	r3, [r7, #27]
 8003c96:	e038      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e035      	b.n	8003d0a <UART_SetConfig+0x282>
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	76fb      	strb	r3, [r7, #27]
 8003ca2:	e032      	b.n	8003d0a <UART_SetConfig+0x282>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e02f      	b.n	8003d0a <UART_SetConfig+0x282>
 8003caa:	2310      	movs	r3, #16
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e02c      	b.n	8003d0a <UART_SetConfig+0x282>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d125      	bne.n	8003d06 <UART_SetConfig+0x27e>
 8003cba:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc8:	d017      	beq.n	8003cfa <UART_SetConfig+0x272>
 8003cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cce:	d817      	bhi.n	8003d00 <UART_SetConfig+0x278>
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	d00b      	beq.n	8003cee <UART_SetConfig+0x266>
 8003cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cda:	d811      	bhi.n	8003d00 <UART_SetConfig+0x278>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <UART_SetConfig+0x260>
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce4:	d006      	beq.n	8003cf4 <UART_SetConfig+0x26c>
 8003ce6:	e00b      	b.n	8003d00 <UART_SetConfig+0x278>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e00d      	b.n	8003d0a <UART_SetConfig+0x282>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e00a      	b.n	8003d0a <UART_SetConfig+0x282>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e007      	b.n	8003d0a <UART_SetConfig+0x282>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	76fb      	strb	r3, [r7, #27]
 8003cfe:	e004      	b.n	8003d0a <UART_SetConfig+0x282>
 8003d00:	2310      	movs	r3, #16
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e001      	b.n	8003d0a <UART_SetConfig+0x282>
 8003d06:	2310      	movs	r3, #16
 8003d08:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	f040 8087 	bne.w	8003e24 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d16:	7efb      	ldrb	r3, [r7, #27]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d837      	bhi.n	8003d8c <UART_SetConfig+0x304>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0x29c>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003d51 	.word	0x08003d51
 8003d30:	08003d8d 	.word	0x08003d8d
 8003d34:	08003d57 	.word	0x08003d57
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003d8d 	.word	0x08003d8d
 8003d44:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d48:	f7fe fc8e 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003d4c:	6178      	str	r0, [r7, #20]
        break;
 8003d4e:	e022      	b.n	8003d96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x300>)
 8003d52:	617b      	str	r3, [r7, #20]
        break;
 8003d54:	e01f      	b.n	8003d96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7fe fbef 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003d5a:	6178      	str	r0, [r7, #20]
        break;
 8003d5c:	e01b      	b.n	8003d96 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d62:	617b      	str	r3, [r7, #20]
        break;
 8003d64:	e017      	b.n	8003d96 <UART_SetConfig+0x30e>
 8003d66:	bf00      	nop
 8003d68:	efff69f3 	.word	0xefff69f3
 8003d6c:	40008000 	.word	0x40008000
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40004800 	.word	0x40004800
 8003d80:	40004c00 	.word	0x40004c00
 8003d84:	40005000 	.word	0x40005000
 8003d88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	76bb      	strb	r3, [r7, #26]
        break;
 8003d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80f1 	beq.w	8003f80 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d305      	bcc.n	8003dba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d902      	bls.n	8003dc0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	76bb      	strb	r3, [r7, #26]
 8003dbe:	e0df      	b.n	8003f80 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	020b      	lsls	r3, r1, #8
 8003dd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dd6:	0202      	lsls	r2, r0, #8
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6849      	ldr	r1, [r1, #4]
 8003ddc:	0849      	lsrs	r1, r1, #1
 8003dde:	4608      	mov	r0, r1
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	1814      	adds	r4, r2, r0
 8003de6:	eb43 0501 	adc.w	r5, r3, r1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	4620      	mov	r0, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	f7fc fa42 	bl	8000280 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0a:	d308      	bcc.n	8003e1e <UART_SetConfig+0x396>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d204      	bcs.n	8003e1e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	e0b0      	b.n	8003f80 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	76bb      	strb	r3, [r7, #26]
 8003e22:	e0ad      	b.n	8003f80 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d15c      	bne.n	8003ee8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003e2e:	7efb      	ldrb	r3, [r7, #27]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d828      	bhi.n	8003e86 <UART_SetConfig+0x3fe>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x3b4>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fc02 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003e64:	6178      	str	r0, [r7, #20]
        break;
 8003e66:	e013      	b.n	8003e90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe fc14 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	6178      	str	r0, [r7, #20]
        break;
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <UART_SetConfig+0x510>)
 8003e72:	617b      	str	r3, [r7, #20]
        break;
 8003e74:	e00c      	b.n	8003e90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fe fb5f 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003e7a:	6178      	str	r0, [r7, #20]
        break;
 8003e7c:	e008      	b.n	8003e90 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	617b      	str	r3, [r7, #20]
        break;
 8003e84:	e004      	b.n	8003e90 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d074      	beq.n	8003f80 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005a      	lsls	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	441a      	add	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b0f      	cmp	r3, #15
 8003eb2:	d916      	bls.n	8003ee2 <UART_SetConfig+0x45a>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eba:	d212      	bcs.n	8003ee2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	89fa      	ldrh	r2, [r7, #14]
 8003ede:	60da      	str	r2, [r3, #12]
 8003ee0:	e04e      	b.n	8003f80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	76bb      	strb	r3, [r7, #26]
 8003ee6:	e04b      	b.n	8003f80 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee8:	7efb      	ldrb	r3, [r7, #27]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d827      	bhi.n	8003f3e <UART_SetConfig+0x4b6>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x46c>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe fba6 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	6178      	str	r0, [r7, #20]
        break;
 8003f1e:	e013      	b.n	8003f48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe fbb8 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8003f24:	6178      	str	r0, [r7, #20]
        break;
 8003f26:	e00f      	b.n	8003f48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <UART_SetConfig+0x510>)
 8003f2a:	617b      	str	r3, [r7, #20]
        break;
 8003f2c:	e00c      	b.n	8003f48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fb03 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003f32:	6178      	str	r0, [r7, #20]
        break;
 8003f34:	e008      	b.n	8003f48 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	617b      	str	r3, [r7, #20]
        break;
 8003f3c:	e004      	b.n	8003f48 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	76bb      	strb	r3, [r7, #26]
        break;
 8003f46:	bf00      	nop
    }

    if (pclk != 0U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085a      	lsrs	r2, r3, #1
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d908      	bls.n	8003f7c <UART_SetConfig+0x4f4>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d204      	bcs.n	8003f7c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	e001      	b.n	8003f80 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bdb0      	pop	{r4, r5, r7, pc}
 8003f96:	bf00      	nop
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fd f9f8 	bl	80014e4 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d10e      	bne.n	8004122 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f82d 	bl	8004172 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e023      	b.n	800416a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d10e      	bne.n	800414e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f817 	bl	8004172 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00d      	b.n	800416a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004182:	e05e      	b.n	8004242 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d05a      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fd f9aa 	bl	80014e4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d11b      	bne.n	80041da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e043      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02c      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f6:	d124      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004200:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004210:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00f      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	429a      	cmp	r2, r3
 800425e:	d091      	beq.n	8004184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <__errno>:
 800426c:	4b01      	ldr	r3, [pc, #4]	; (8004274 <__errno+0x8>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000010 	.word	0x20000010

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	4d0d      	ldr	r5, [pc, #52]	; (80042b0 <__libc_init_array+0x38>)
 800427c:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <__libc_init_array+0x3c>)
 800427e:	1b64      	subs	r4, r4, r5
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	2600      	movs	r6, #0
 8004284:	42a6      	cmp	r6, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	4d0b      	ldr	r5, [pc, #44]	; (80042b8 <__libc_init_array+0x40>)
 800428a:	4c0c      	ldr	r4, [pc, #48]	; (80042bc <__libc_init_array+0x44>)
 800428c:	f001 f9be 	bl	800560c <_init>
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	2600      	movs	r6, #0
 8004296:	42a6      	cmp	r6, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a0:	4798      	blx	r3
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042aa:	4798      	blx	r3
 80042ac:	3601      	adds	r6, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	08005a64 	.word	0x08005a64
 80042b4:	08005a64 	.word	0x08005a64
 80042b8:	08005a64 	.word	0x08005a64
 80042bc:	08005a68 	.word	0x08005a68

080042c0 <memcpy>:
 80042c0:	440a      	add	r2, r1
 80042c2:	4291      	cmp	r1, r2
 80042c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042c8:	d100      	bne.n	80042cc <memcpy+0xc>
 80042ca:	4770      	bx	lr
 80042cc:	b510      	push	{r4, lr}
 80042ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042d6:	4291      	cmp	r1, r2
 80042d8:	d1f9      	bne.n	80042ce <memcpy+0xe>
 80042da:	bd10      	pop	{r4, pc}

080042dc <memset>:
 80042dc:	4402      	add	r2, r0
 80042de:	4603      	mov	r3, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d100      	bne.n	80042e6 <memset+0xa>
 80042e4:	4770      	bx	lr
 80042e6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ea:	e7f9      	b.n	80042e0 <memset+0x4>

080042ec <iprintf>:
 80042ec:	b40f      	push	{r0, r1, r2, r3}
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <iprintf+0x2c>)
 80042f0:	b513      	push	{r0, r1, r4, lr}
 80042f2:	681c      	ldr	r4, [r3, #0]
 80042f4:	b124      	cbz	r4, 8004300 <iprintf+0x14>
 80042f6:	69a3      	ldr	r3, [r4, #24]
 80042f8:	b913      	cbnz	r3, 8004300 <iprintf+0x14>
 80042fa:	4620      	mov	r0, r4
 80042fc:	f000 fa7e 	bl	80047fc <__sinit>
 8004300:	ab05      	add	r3, sp, #20
 8004302:	9a04      	ldr	r2, [sp, #16]
 8004304:	68a1      	ldr	r1, [r4, #8]
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fdab 	bl	8004e64 <_vfiprintf_r>
 800430e:	b002      	add	sp, #8
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004314:	b004      	add	sp, #16
 8004316:	4770      	bx	lr
 8004318:	20000010 	.word	0x20000010

0800431c <_puts_r>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	460e      	mov	r6, r1
 8004320:	4605      	mov	r5, r0
 8004322:	b118      	cbz	r0, 800432c <_puts_r+0x10>
 8004324:	6983      	ldr	r3, [r0, #24]
 8004326:	b90b      	cbnz	r3, 800432c <_puts_r+0x10>
 8004328:	f000 fa68 	bl	80047fc <__sinit>
 800432c:	69ab      	ldr	r3, [r5, #24]
 800432e:	68ac      	ldr	r4, [r5, #8]
 8004330:	b913      	cbnz	r3, 8004338 <_puts_r+0x1c>
 8004332:	4628      	mov	r0, r5
 8004334:	f000 fa62 	bl	80047fc <__sinit>
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <_puts_r+0xd0>)
 800433a:	429c      	cmp	r4, r3
 800433c:	d120      	bne.n	8004380 <_puts_r+0x64>
 800433e:	686c      	ldr	r4, [r5, #4]
 8004340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004342:	07db      	lsls	r3, r3, #31
 8004344:	d405      	bmi.n	8004352 <_puts_r+0x36>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	0598      	lsls	r0, r3, #22
 800434a:	d402      	bmi.n	8004352 <_puts_r+0x36>
 800434c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800434e:	f000 faf3 	bl	8004938 <__retarget_lock_acquire_recursive>
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	0719      	lsls	r1, r3, #28
 8004356:	d51d      	bpl.n	8004394 <_puts_r+0x78>
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	b1db      	cbz	r3, 8004394 <_puts_r+0x78>
 800435c:	3e01      	subs	r6, #1
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004364:	3b01      	subs	r3, #1
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	bb39      	cbnz	r1, 80043ba <_puts_r+0x9e>
 800436a:	2b00      	cmp	r3, #0
 800436c:	da38      	bge.n	80043e0 <_puts_r+0xc4>
 800436e:	4622      	mov	r2, r4
 8004370:	210a      	movs	r1, #10
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f868 	bl	8004448 <__swbuf_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d011      	beq.n	80043a0 <_puts_r+0x84>
 800437c:	250a      	movs	r5, #10
 800437e:	e011      	b.n	80043a4 <_puts_r+0x88>
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <_puts_r+0xd4>)
 8004382:	429c      	cmp	r4, r3
 8004384:	d101      	bne.n	800438a <_puts_r+0x6e>
 8004386:	68ac      	ldr	r4, [r5, #8]
 8004388:	e7da      	b.n	8004340 <_puts_r+0x24>
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <_puts_r+0xd8>)
 800438c:	429c      	cmp	r4, r3
 800438e:	bf08      	it	eq
 8004390:	68ec      	ldreq	r4, [r5, #12]
 8004392:	e7d5      	b.n	8004340 <_puts_r+0x24>
 8004394:	4621      	mov	r1, r4
 8004396:	4628      	mov	r0, r5
 8004398:	f000 f8a8 	bl	80044ec <__swsetup_r>
 800439c:	2800      	cmp	r0, #0
 800439e:	d0dd      	beq.n	800435c <_puts_r+0x40>
 80043a0:	f04f 35ff 	mov.w	r5, #4294967295
 80043a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043a6:	07da      	lsls	r2, r3, #31
 80043a8:	d405      	bmi.n	80043b6 <_puts_r+0x9a>
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	059b      	lsls	r3, r3, #22
 80043ae:	d402      	bmi.n	80043b6 <_puts_r+0x9a>
 80043b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043b2:	f000 fac2 	bl	800493a <__retarget_lock_release_recursive>
 80043b6:	4628      	mov	r0, r5
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da04      	bge.n	80043c8 <_puts_r+0xac>
 80043be:	69a2      	ldr	r2, [r4, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	dc06      	bgt.n	80043d2 <_puts_r+0xb6>
 80043c4:	290a      	cmp	r1, #10
 80043c6:	d004      	beq.n	80043d2 <_puts_r+0xb6>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	6022      	str	r2, [r4, #0]
 80043ce:	7019      	strb	r1, [r3, #0]
 80043d0:	e7c5      	b.n	800435e <_puts_r+0x42>
 80043d2:	4622      	mov	r2, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f837 	bl	8004448 <__swbuf_r>
 80043da:	3001      	adds	r0, #1
 80043dc:	d1bf      	bne.n	800435e <_puts_r+0x42>
 80043de:	e7df      	b.n	80043a0 <_puts_r+0x84>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	250a      	movs	r5, #10
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	6022      	str	r2, [r4, #0]
 80043e8:	701d      	strb	r5, [r3, #0]
 80043ea:	e7db      	b.n	80043a4 <_puts_r+0x88>
 80043ec:	080059e8 	.word	0x080059e8
 80043f0:	08005a08 	.word	0x08005a08
 80043f4:	080059c8 	.word	0x080059c8

080043f8 <puts>:
 80043f8:	4b02      	ldr	r3, [pc, #8]	; (8004404 <puts+0xc>)
 80043fa:	4601      	mov	r1, r0
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f7ff bf8d 	b.w	800431c <_puts_r>
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	; 0x70
 800440e:	ab1d      	add	r3, sp, #116	; 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	; (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f000 fbf0 	bl	8004c10 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	; 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000010 	.word	0x20000010
 8004444:	ffff0208 	.word	0xffff0208

08004448 <__swbuf_r>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	460e      	mov	r6, r1
 800444c:	4614      	mov	r4, r2
 800444e:	4605      	mov	r5, r0
 8004450:	b118      	cbz	r0, 800445a <__swbuf_r+0x12>
 8004452:	6983      	ldr	r3, [r0, #24]
 8004454:	b90b      	cbnz	r3, 800445a <__swbuf_r+0x12>
 8004456:	f000 f9d1 	bl	80047fc <__sinit>
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <__swbuf_r+0x98>)
 800445c:	429c      	cmp	r4, r3
 800445e:	d12b      	bne.n	80044b8 <__swbuf_r+0x70>
 8004460:	686c      	ldr	r4, [r5, #4]
 8004462:	69a3      	ldr	r3, [r4, #24]
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	071a      	lsls	r2, r3, #28
 800446a:	d52f      	bpl.n	80044cc <__swbuf_r+0x84>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	b36b      	cbz	r3, 80044cc <__swbuf_r+0x84>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	1ac0      	subs	r0, r0, r3
 8004476:	6963      	ldr	r3, [r4, #20]
 8004478:	b2f6      	uxtb	r6, r6
 800447a:	4283      	cmp	r3, r0
 800447c:	4637      	mov	r7, r6
 800447e:	dc04      	bgt.n	800448a <__swbuf_r+0x42>
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f000 f926 	bl	80046d4 <_fflush_r>
 8004488:	bb30      	cbnz	r0, 80044d8 <__swbuf_r+0x90>
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	3b01      	subs	r3, #1
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	701e      	strb	r6, [r3, #0]
 8004498:	6963      	ldr	r3, [r4, #20]
 800449a:	3001      	adds	r0, #1
 800449c:	4283      	cmp	r3, r0
 800449e:	d004      	beq.n	80044aa <__swbuf_r+0x62>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d506      	bpl.n	80044b4 <__swbuf_r+0x6c>
 80044a6:	2e0a      	cmp	r6, #10
 80044a8:	d104      	bne.n	80044b4 <__swbuf_r+0x6c>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 f911 	bl	80046d4 <_fflush_r>
 80044b2:	b988      	cbnz	r0, 80044d8 <__swbuf_r+0x90>
 80044b4:	4638      	mov	r0, r7
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <__swbuf_r+0x9c>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d101      	bne.n	80044c2 <__swbuf_r+0x7a>
 80044be:	68ac      	ldr	r4, [r5, #8]
 80044c0:	e7cf      	b.n	8004462 <__swbuf_r+0x1a>
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <__swbuf_r+0xa0>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	bf08      	it	eq
 80044c8:	68ec      	ldreq	r4, [r5, #12]
 80044ca:	e7ca      	b.n	8004462 <__swbuf_r+0x1a>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 f80c 	bl	80044ec <__swsetup_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d0cb      	beq.n	8004470 <__swbuf_r+0x28>
 80044d8:	f04f 37ff 	mov.w	r7, #4294967295
 80044dc:	e7ea      	b.n	80044b4 <__swbuf_r+0x6c>
 80044de:	bf00      	nop
 80044e0:	080059e8 	.word	0x080059e8
 80044e4:	08005a08 	.word	0x08005a08
 80044e8:	080059c8 	.word	0x080059c8

080044ec <__swsetup_r>:
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <__swsetup_r+0xcc>)
 80044ee:	b570      	push	{r4, r5, r6, lr}
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	4606      	mov	r6, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	b125      	cbz	r5, 8004502 <__swsetup_r+0x16>
 80044f8:	69ab      	ldr	r3, [r5, #24]
 80044fa:	b913      	cbnz	r3, 8004502 <__swsetup_r+0x16>
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f97d 	bl	80047fc <__sinit>
 8004502:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <__swsetup_r+0xd0>)
 8004504:	429c      	cmp	r4, r3
 8004506:	d10f      	bne.n	8004528 <__swsetup_r+0x3c>
 8004508:	686c      	ldr	r4, [r5, #4]
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004510:	0719      	lsls	r1, r3, #28
 8004512:	d42c      	bmi.n	800456e <__swsetup_r+0x82>
 8004514:	06dd      	lsls	r5, r3, #27
 8004516:	d411      	bmi.n	800453c <__swsetup_r+0x50>
 8004518:	2309      	movs	r3, #9
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	f04f 30ff 	mov.w	r0, #4294967295
 8004526:	e03e      	b.n	80045a6 <__swsetup_r+0xba>
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <__swsetup_r+0xd4>)
 800452a:	429c      	cmp	r4, r3
 800452c:	d101      	bne.n	8004532 <__swsetup_r+0x46>
 800452e:	68ac      	ldr	r4, [r5, #8]
 8004530:	e7eb      	b.n	800450a <__swsetup_r+0x1e>
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <__swsetup_r+0xd8>)
 8004534:	429c      	cmp	r4, r3
 8004536:	bf08      	it	eq
 8004538:	68ec      	ldreq	r4, [r5, #12]
 800453a:	e7e6      	b.n	800450a <__swsetup_r+0x1e>
 800453c:	0758      	lsls	r0, r3, #29
 800453e:	d512      	bpl.n	8004566 <__swsetup_r+0x7a>
 8004540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004542:	b141      	cbz	r1, 8004556 <__swsetup_r+0x6a>
 8004544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <__swsetup_r+0x66>
 800454c:	4630      	mov	r0, r6
 800454e:	f000 fa59 	bl	8004a04 <_free_r>
 8004552:	2300      	movs	r3, #0
 8004554:	6363      	str	r3, [r4, #52]	; 0x34
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	6063      	str	r3, [r4, #4]
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	b94b      	cbnz	r3, 8004586 <__swsetup_r+0x9a>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	d003      	beq.n	8004586 <__swsetup_r+0x9a>
 800457e:	4621      	mov	r1, r4
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f9ff 	bl	8004984 <__smakebuf_r>
 8004586:	89a0      	ldrh	r0, [r4, #12]
 8004588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800458c:	f010 0301 	ands.w	r3, r0, #1
 8004590:	d00a      	beq.n	80045a8 <__swsetup_r+0xbc>
 8004592:	2300      	movs	r3, #0
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	6963      	ldr	r3, [r4, #20]
 8004598:	425b      	negs	r3, r3
 800459a:	61a3      	str	r3, [r4, #24]
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	b943      	cbnz	r3, 80045b2 <__swsetup_r+0xc6>
 80045a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045a4:	d1ba      	bne.n	800451c <__swsetup_r+0x30>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	0781      	lsls	r1, r0, #30
 80045aa:	bf58      	it	pl
 80045ac:	6963      	ldrpl	r3, [r4, #20]
 80045ae:	60a3      	str	r3, [r4, #8]
 80045b0:	e7f4      	b.n	800459c <__swsetup_r+0xb0>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e7f7      	b.n	80045a6 <__swsetup_r+0xba>
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010
 80045bc:	080059e8 	.word	0x080059e8
 80045c0:	08005a08 	.word	0x08005a08
 80045c4:	080059c8 	.word	0x080059c8

080045c8 <__sflush_r>:
 80045c8:	898a      	ldrh	r2, [r1, #12]
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	0710      	lsls	r0, r2, #28
 80045d2:	460c      	mov	r4, r1
 80045d4:	d458      	bmi.n	8004688 <__sflush_r+0xc0>
 80045d6:	684b      	ldr	r3, [r1, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dc05      	bgt.n	80045e8 <__sflush_r+0x20>
 80045dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dc02      	bgt.n	80045e8 <__sflush_r+0x20>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ea:	2e00      	cmp	r6, #0
 80045ec:	d0f9      	beq.n	80045e2 <__sflush_r+0x1a>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045f4:	682f      	ldr	r7, [r5, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	d032      	beq.n	8004660 <__sflush_r+0x98>
 80045fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	075a      	lsls	r2, r3, #29
 8004600:	d505      	bpl.n	800460e <__sflush_r+0x46>
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	1ac0      	subs	r0, r0, r3
 8004606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004608:	b10b      	cbz	r3, 800460e <__sflush_r+0x46>
 800460a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	2300      	movs	r3, #0
 8004610:	4602      	mov	r2, r0
 8004612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004614:	6a21      	ldr	r1, [r4, #32]
 8004616:	4628      	mov	r0, r5
 8004618:	47b0      	blx	r6
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	d106      	bne.n	800462e <__sflush_r+0x66>
 8004620:	6829      	ldr	r1, [r5, #0]
 8004622:	291d      	cmp	r1, #29
 8004624:	d82c      	bhi.n	8004680 <__sflush_r+0xb8>
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <__sflush_r+0x108>)
 8004628:	40ca      	lsrs	r2, r1
 800462a:	07d6      	lsls	r6, r2, #31
 800462c:	d528      	bpl.n	8004680 <__sflush_r+0xb8>
 800462e:	2200      	movs	r2, #0
 8004630:	6062      	str	r2, [r4, #4]
 8004632:	04d9      	lsls	r1, r3, #19
 8004634:	6922      	ldr	r2, [r4, #16]
 8004636:	6022      	str	r2, [r4, #0]
 8004638:	d504      	bpl.n	8004644 <__sflush_r+0x7c>
 800463a:	1c42      	adds	r2, r0, #1
 800463c:	d101      	bne.n	8004642 <__sflush_r+0x7a>
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	b903      	cbnz	r3, 8004644 <__sflush_r+0x7c>
 8004642:	6560      	str	r0, [r4, #84]	; 0x54
 8004644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004646:	602f      	str	r7, [r5, #0]
 8004648:	2900      	cmp	r1, #0
 800464a:	d0ca      	beq.n	80045e2 <__sflush_r+0x1a>
 800464c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004650:	4299      	cmp	r1, r3
 8004652:	d002      	beq.n	800465a <__sflush_r+0x92>
 8004654:	4628      	mov	r0, r5
 8004656:	f000 f9d5 	bl	8004a04 <_free_r>
 800465a:	2000      	movs	r0, #0
 800465c:	6360      	str	r0, [r4, #52]	; 0x34
 800465e:	e7c1      	b.n	80045e4 <__sflush_r+0x1c>
 8004660:	6a21      	ldr	r1, [r4, #32]
 8004662:	2301      	movs	r3, #1
 8004664:	4628      	mov	r0, r5
 8004666:	47b0      	blx	r6
 8004668:	1c41      	adds	r1, r0, #1
 800466a:	d1c7      	bne.n	80045fc <__sflush_r+0x34>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0c4      	beq.n	80045fc <__sflush_r+0x34>
 8004672:	2b1d      	cmp	r3, #29
 8004674:	d001      	beq.n	800467a <__sflush_r+0xb2>
 8004676:	2b16      	cmp	r3, #22
 8004678:	d101      	bne.n	800467e <__sflush_r+0xb6>
 800467a:	602f      	str	r7, [r5, #0]
 800467c:	e7b1      	b.n	80045e2 <__sflush_r+0x1a>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	e7ad      	b.n	80045e4 <__sflush_r+0x1c>
 8004688:	690f      	ldr	r7, [r1, #16]
 800468a:	2f00      	cmp	r7, #0
 800468c:	d0a9      	beq.n	80045e2 <__sflush_r+0x1a>
 800468e:	0793      	lsls	r3, r2, #30
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	bf08      	it	eq
 8004694:	694b      	ldreq	r3, [r1, #20]
 8004696:	600f      	str	r7, [r1, #0]
 8004698:	bf18      	it	ne
 800469a:	2300      	movne	r3, #0
 800469c:	eba6 0807 	sub.w	r8, r6, r7
 80046a0:	608b      	str	r3, [r1, #8]
 80046a2:	f1b8 0f00 	cmp.w	r8, #0
 80046a6:	dd9c      	ble.n	80045e2 <__sflush_r+0x1a>
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046ac:	4643      	mov	r3, r8
 80046ae:	463a      	mov	r2, r7
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b0      	blx	r6
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dc06      	bgt.n	80046c6 <__sflush_r+0xfe>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	e78e      	b.n	80045e4 <__sflush_r+0x1c>
 80046c6:	4407      	add	r7, r0
 80046c8:	eba8 0800 	sub.w	r8, r8, r0
 80046cc:	e7e9      	b.n	80046a2 <__sflush_r+0xda>
 80046ce:	bf00      	nop
 80046d0:	20400001 	.word	0x20400001

080046d4 <_fflush_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	690b      	ldr	r3, [r1, #16]
 80046d8:	4605      	mov	r5, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	b913      	cbnz	r3, 80046e4 <_fflush_r+0x10>
 80046de:	2500      	movs	r5, #0
 80046e0:	4628      	mov	r0, r5
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	b118      	cbz	r0, 80046ee <_fflush_r+0x1a>
 80046e6:	6983      	ldr	r3, [r0, #24]
 80046e8:	b90b      	cbnz	r3, 80046ee <_fflush_r+0x1a>
 80046ea:	f000 f887 	bl	80047fc <__sinit>
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <_fflush_r+0x6c>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d11b      	bne.n	800472c <_fflush_r+0x58>
 80046f4:	686c      	ldr	r4, [r5, #4]
 80046f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <_fflush_r+0xa>
 80046fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004700:	07d0      	lsls	r0, r2, #31
 8004702:	d404      	bmi.n	800470e <_fflush_r+0x3a>
 8004704:	0599      	lsls	r1, r3, #22
 8004706:	d402      	bmi.n	800470e <_fflush_r+0x3a>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f915 	bl	8004938 <__retarget_lock_acquire_recursive>
 800470e:	4628      	mov	r0, r5
 8004710:	4621      	mov	r1, r4
 8004712:	f7ff ff59 	bl	80045c8 <__sflush_r>
 8004716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004718:	07da      	lsls	r2, r3, #31
 800471a:	4605      	mov	r5, r0
 800471c:	d4e0      	bmi.n	80046e0 <_fflush_r+0xc>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	059b      	lsls	r3, r3, #22
 8004722:	d4dd      	bmi.n	80046e0 <_fflush_r+0xc>
 8004724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004726:	f000 f908 	bl	800493a <__retarget_lock_release_recursive>
 800472a:	e7d9      	b.n	80046e0 <_fflush_r+0xc>
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <_fflush_r+0x70>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d101      	bne.n	8004736 <_fflush_r+0x62>
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	e7df      	b.n	80046f6 <_fflush_r+0x22>
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <_fflush_r+0x74>)
 8004738:	429c      	cmp	r4, r3
 800473a:	bf08      	it	eq
 800473c:	68ec      	ldreq	r4, [r5, #12]
 800473e:	e7da      	b.n	80046f6 <_fflush_r+0x22>
 8004740:	080059e8 	.word	0x080059e8
 8004744:	08005a08 	.word	0x08005a08
 8004748:	080059c8 	.word	0x080059c8

0800474c <std>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	e9c0 3300 	strd	r3, r3, [r0]
 8004756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475a:	6083      	str	r3, [r0, #8]
 800475c:	8181      	strh	r1, [r0, #12]
 800475e:	6643      	str	r3, [r0, #100]	; 0x64
 8004760:	81c2      	strh	r2, [r0, #14]
 8004762:	6183      	str	r3, [r0, #24]
 8004764:	4619      	mov	r1, r3
 8004766:	2208      	movs	r2, #8
 8004768:	305c      	adds	r0, #92	; 0x5c
 800476a:	f7ff fdb7 	bl	80042dc <memset>
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std+0x38>)
 8004770:	6263      	str	r3, [r4, #36]	; 0x24
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std+0x3c>)
 8004774:	62a3      	str	r3, [r4, #40]	; 0x28
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std+0x40>)
 8004778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <std+0x44>)
 800477c:	6224      	str	r4, [r4, #32]
 800477e:	6323      	str	r3, [r4, #48]	; 0x30
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	0800540d 	.word	0x0800540d
 8004788:	0800542f 	.word	0x0800542f
 800478c:	08005467 	.word	0x08005467
 8004790:	0800548b 	.word	0x0800548b

08004794 <_cleanup_r>:
 8004794:	4901      	ldr	r1, [pc, #4]	; (800479c <_cleanup_r+0x8>)
 8004796:	f000 b8af 	b.w	80048f8 <_fwalk_reent>
 800479a:	bf00      	nop
 800479c:	080046d5 	.word	0x080046d5

080047a0 <__sfmoreglue>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	1e4a      	subs	r2, r1, #1
 80047a4:	2568      	movs	r5, #104	; 0x68
 80047a6:	4355      	muls	r5, r2
 80047a8:	460e      	mov	r6, r1
 80047aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047ae:	f000 f979 	bl	8004aa4 <_malloc_r>
 80047b2:	4604      	mov	r4, r0
 80047b4:	b140      	cbz	r0, 80047c8 <__sfmoreglue+0x28>
 80047b6:	2100      	movs	r1, #0
 80047b8:	e9c0 1600 	strd	r1, r6, [r0]
 80047bc:	300c      	adds	r0, #12
 80047be:	60a0      	str	r0, [r4, #8]
 80047c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047c4:	f7ff fd8a 	bl	80042dc <memset>
 80047c8:	4620      	mov	r0, r4
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <__sfp_lock_acquire>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__sfp_lock_acquire+0x8>)
 80047ce:	f000 b8b3 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20002e00 	.word	0x20002e00

080047d8 <__sfp_lock_release>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__sfp_lock_release+0x8>)
 80047da:	f000 b8ae 	b.w	800493a <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20002e00 	.word	0x20002e00

080047e4 <__sinit_lock_acquire>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__sinit_lock_acquire+0x8>)
 80047e6:	f000 b8a7 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	20002dfb 	.word	0x20002dfb

080047f0 <__sinit_lock_release>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__sinit_lock_release+0x8>)
 80047f2:	f000 b8a2 	b.w	800493a <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	20002dfb 	.word	0x20002dfb

080047fc <__sinit>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	f7ff fff0 	bl	80047e4 <__sinit_lock_acquire>
 8004804:	69a3      	ldr	r3, [r4, #24]
 8004806:	b11b      	cbz	r3, 8004810 <__sinit+0x14>
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f7ff bff0 	b.w	80047f0 <__sinit_lock_release>
 8004810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004814:	6523      	str	r3, [r4, #80]	; 0x50
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <__sinit+0x68>)
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <__sinit+0x6c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62a2      	str	r2, [r4, #40]	; 0x28
 800481e:	42a3      	cmp	r3, r4
 8004820:	bf04      	itt	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	61a3      	streq	r3, [r4, #24]
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f820 	bl	800486c <__sfp>
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f81c 	bl	800486c <__sfp>
 8004834:	60a0      	str	r0, [r4, #8]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f818 	bl	800486c <__sfp>
 800483c:	2200      	movs	r2, #0
 800483e:	60e0      	str	r0, [r4, #12]
 8004840:	2104      	movs	r1, #4
 8004842:	6860      	ldr	r0, [r4, #4]
 8004844:	f7ff ff82 	bl	800474c <std>
 8004848:	68a0      	ldr	r0, [r4, #8]
 800484a:	2201      	movs	r2, #1
 800484c:	2109      	movs	r1, #9
 800484e:	f7ff ff7d 	bl	800474c <std>
 8004852:	68e0      	ldr	r0, [r4, #12]
 8004854:	2202      	movs	r2, #2
 8004856:	2112      	movs	r1, #18
 8004858:	f7ff ff78 	bl	800474c <std>
 800485c:	2301      	movs	r3, #1
 800485e:	61a3      	str	r3, [r4, #24]
 8004860:	e7d2      	b.n	8004808 <__sinit+0xc>
 8004862:	bf00      	nop
 8004864:	080059c4 	.word	0x080059c4
 8004868:	08004795 	.word	0x08004795

0800486c <__sfp>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	4607      	mov	r7, r0
 8004870:	f7ff ffac 	bl	80047cc <__sfp_lock_acquire>
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <__sfp+0x84>)
 8004876:	681e      	ldr	r6, [r3, #0]
 8004878:	69b3      	ldr	r3, [r6, #24]
 800487a:	b913      	cbnz	r3, 8004882 <__sfp+0x16>
 800487c:	4630      	mov	r0, r6
 800487e:	f7ff ffbd 	bl	80047fc <__sinit>
 8004882:	3648      	adds	r6, #72	; 0x48
 8004884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004888:	3b01      	subs	r3, #1
 800488a:	d503      	bpl.n	8004894 <__sfp+0x28>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	b30b      	cbz	r3, 80048d4 <__sfp+0x68>
 8004890:	6836      	ldr	r6, [r6, #0]
 8004892:	e7f7      	b.n	8004884 <__sfp+0x18>
 8004894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004898:	b9d5      	cbnz	r5, 80048d0 <__sfp+0x64>
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <__sfp+0x88>)
 800489c:	60e3      	str	r3, [r4, #12]
 800489e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048a2:	6665      	str	r5, [r4, #100]	; 0x64
 80048a4:	f000 f847 	bl	8004936 <__retarget_lock_init_recursive>
 80048a8:	f7ff ff96 	bl	80047d8 <__sfp_lock_release>
 80048ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048b4:	6025      	str	r5, [r4, #0]
 80048b6:	61a5      	str	r5, [r4, #24]
 80048b8:	2208      	movs	r2, #8
 80048ba:	4629      	mov	r1, r5
 80048bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048c0:	f7ff fd0c 	bl	80042dc <memset>
 80048c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048cc:	4620      	mov	r0, r4
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	3468      	adds	r4, #104	; 0x68
 80048d2:	e7d9      	b.n	8004888 <__sfp+0x1c>
 80048d4:	2104      	movs	r1, #4
 80048d6:	4638      	mov	r0, r7
 80048d8:	f7ff ff62 	bl	80047a0 <__sfmoreglue>
 80048dc:	4604      	mov	r4, r0
 80048de:	6030      	str	r0, [r6, #0]
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d1d5      	bne.n	8004890 <__sfp+0x24>
 80048e4:	f7ff ff78 	bl	80047d8 <__sfp_lock_release>
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	e7ee      	b.n	80048cc <__sfp+0x60>
 80048ee:	bf00      	nop
 80048f0:	080059c4 	.word	0x080059c4
 80048f4:	ffff0001 	.word	0xffff0001

080048f8 <_fwalk_reent>:
 80048f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048fc:	4606      	mov	r6, r0
 80048fe:	4688      	mov	r8, r1
 8004900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004904:	2700      	movs	r7, #0
 8004906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800490a:	f1b9 0901 	subs.w	r9, r9, #1
 800490e:	d505      	bpl.n	800491c <_fwalk_reent+0x24>
 8004910:	6824      	ldr	r4, [r4, #0]
 8004912:	2c00      	cmp	r4, #0
 8004914:	d1f7      	bne.n	8004906 <_fwalk_reent+0xe>
 8004916:	4638      	mov	r0, r7
 8004918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491c:	89ab      	ldrh	r3, [r5, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d907      	bls.n	8004932 <_fwalk_reent+0x3a>
 8004922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004926:	3301      	adds	r3, #1
 8004928:	d003      	beq.n	8004932 <_fwalk_reent+0x3a>
 800492a:	4629      	mov	r1, r5
 800492c:	4630      	mov	r0, r6
 800492e:	47c0      	blx	r8
 8004930:	4307      	orrs	r7, r0
 8004932:	3568      	adds	r5, #104	; 0x68
 8004934:	e7e9      	b.n	800490a <_fwalk_reent+0x12>

08004936 <__retarget_lock_init_recursive>:
 8004936:	4770      	bx	lr

08004938 <__retarget_lock_acquire_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_release_recursive>:
 800493a:	4770      	bx	lr

0800493c <__swhatbuf_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	460e      	mov	r6, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2900      	cmp	r1, #0
 8004946:	b096      	sub	sp, #88	; 0x58
 8004948:	4614      	mov	r4, r2
 800494a:	461d      	mov	r5, r3
 800494c:	da07      	bge.n	800495e <__swhatbuf_r+0x22>
 800494e:	2300      	movs	r3, #0
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	89b3      	ldrh	r3, [r6, #12]
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	d410      	bmi.n	800497a <__swhatbuf_r+0x3e>
 8004958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495c:	e00e      	b.n	800497c <__swhatbuf_r+0x40>
 800495e:	466a      	mov	r2, sp
 8004960:	f000 fdba 	bl	80054d8 <_fstat_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	dbf2      	blt.n	800494e <__swhatbuf_r+0x12>
 8004968:	9a01      	ldr	r2, [sp, #4]
 800496a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800496e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004972:	425a      	negs	r2, r3
 8004974:	415a      	adcs	r2, r3
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	e7ee      	b.n	8004958 <__swhatbuf_r+0x1c>
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	2000      	movs	r0, #0
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	b016      	add	sp, #88	; 0x58
 8004982:	bd70      	pop	{r4, r5, r6, pc}

08004984 <__smakebuf_r>:
 8004984:	898b      	ldrh	r3, [r1, #12]
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	079d      	lsls	r5, r3, #30
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	d507      	bpl.n	80049a0 <__smakebuf_r+0x1c>
 8004990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2301      	movs	r3, #1
 800499a:	6163      	str	r3, [r4, #20]
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	ab01      	add	r3, sp, #4
 80049a2:	466a      	mov	r2, sp
 80049a4:	f7ff ffca 	bl	800493c <__swhatbuf_r>
 80049a8:	9900      	ldr	r1, [sp, #0]
 80049aa:	4605      	mov	r5, r0
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f879 	bl	8004aa4 <_malloc_r>
 80049b2:	b948      	cbnz	r0, 80049c8 <__smakebuf_r+0x44>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d4ef      	bmi.n	800499c <__smakebuf_r+0x18>
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7e3      	b.n	8004990 <__smakebuf_r+0xc>
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <__smakebuf_r+0x7c>)
 80049ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	6163      	str	r3, [r4, #20]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	6120      	str	r0, [r4, #16]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x74>
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 fd89 	bl	80054fc <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x74>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a0      	ldrh	r0, [r4, #12]
 80049fa:	4305      	orrs	r5, r0
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cd      	b.n	800499c <__smakebuf_r+0x18>
 8004a00:	08004795 	.word	0x08004795

08004a04 <_free_r>:
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d048      	beq.n	8004a9c <_free_r+0x98>
 8004a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0e:	9001      	str	r0, [sp, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f1a1 0404 	sub.w	r4, r1, #4
 8004a16:	bfb8      	it	lt
 8004a18:	18e4      	addlt	r4, r4, r3
 8004a1a:	f000 fdab 	bl	8005574 <__malloc_lock>
 8004a1e:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <_free_r+0x9c>)
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	4615      	mov	r5, r2
 8004a26:	b933      	cbnz	r3, 8004a36 <_free_r+0x32>
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	6014      	str	r4, [r2, #0]
 8004a2c:	b003      	add	sp, #12
 8004a2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a32:	f000 bda5 	b.w	8005580 <__malloc_unlock>
 8004a36:	42a3      	cmp	r3, r4
 8004a38:	d90b      	bls.n	8004a52 <_free_r+0x4e>
 8004a3a:	6821      	ldr	r1, [r4, #0]
 8004a3c:	1862      	adds	r2, r4, r1
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	bf04      	itt	eq
 8004a42:	681a      	ldreq	r2, [r3, #0]
 8004a44:	685b      	ldreq	r3, [r3, #4]
 8004a46:	6063      	str	r3, [r4, #4]
 8004a48:	bf04      	itt	eq
 8004a4a:	1852      	addeq	r2, r2, r1
 8004a4c:	6022      	streq	r2, [r4, #0]
 8004a4e:	602c      	str	r4, [r5, #0]
 8004a50:	e7ec      	b.n	8004a2c <_free_r+0x28>
 8004a52:	461a      	mov	r2, r3
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b10b      	cbz	r3, 8004a5c <_free_r+0x58>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d9fa      	bls.n	8004a52 <_free_r+0x4e>
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	1855      	adds	r5, r2, r1
 8004a60:	42a5      	cmp	r5, r4
 8004a62:	d10b      	bne.n	8004a7c <_free_r+0x78>
 8004a64:	6824      	ldr	r4, [r4, #0]
 8004a66:	4421      	add	r1, r4
 8004a68:	1854      	adds	r4, r2, r1
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	d1dd      	bne.n	8004a2c <_free_r+0x28>
 8004a70:	681c      	ldr	r4, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	4421      	add	r1, r4
 8004a78:	6011      	str	r1, [r2, #0]
 8004a7a:	e7d7      	b.n	8004a2c <_free_r+0x28>
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x80>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	6003      	str	r3, [r0, #0]
 8004a82:	e7d3      	b.n	8004a2c <_free_r+0x28>
 8004a84:	6825      	ldr	r5, [r4, #0]
 8004a86:	1961      	adds	r1, r4, r5
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf04      	itt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	bf04      	itt	eq
 8004a94:	1949      	addeq	r1, r1, r5
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	6054      	str	r4, [r2, #4]
 8004a9a:	e7c7      	b.n	8004a2c <_free_r+0x28>
 8004a9c:	b003      	add	sp, #12
 8004a9e:	bd30      	pop	{r4, r5, pc}
 8004aa0:	20000098 	.word	0x20000098

08004aa4 <_malloc_r>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	1ccd      	adds	r5, r1, #3
 8004aa8:	f025 0503 	bic.w	r5, r5, #3
 8004aac:	3508      	adds	r5, #8
 8004aae:	2d0c      	cmp	r5, #12
 8004ab0:	bf38      	it	cc
 8004ab2:	250c      	movcc	r5, #12
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	db01      	blt.n	8004abe <_malloc_r+0x1a>
 8004aba:	42a9      	cmp	r1, r5
 8004abc:	d903      	bls.n	8004ac6 <_malloc_r+0x22>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac6:	f000 fd55 	bl	8005574 <__malloc_lock>
 8004aca:	4921      	ldr	r1, [pc, #132]	; (8004b50 <_malloc_r+0xac>)
 8004acc:	680a      	ldr	r2, [r1, #0]
 8004ace:	4614      	mov	r4, r2
 8004ad0:	b99c      	cbnz	r4, 8004afa <_malloc_r+0x56>
 8004ad2:	4f20      	ldr	r7, [pc, #128]	; (8004b54 <_malloc_r+0xb0>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b923      	cbnz	r3, 8004ae2 <_malloc_r+0x3e>
 8004ad8:	4621      	mov	r1, r4
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 fc86 	bl	80053ec <_sbrk_r>
 8004ae0:	6038      	str	r0, [r7, #0]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 fc81 	bl	80053ec <_sbrk_r>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	d123      	bne.n	8004b36 <_malloc_r+0x92>
 8004aee:	230c      	movs	r3, #12
 8004af0:	6033      	str	r3, [r6, #0]
 8004af2:	4630      	mov	r0, r6
 8004af4:	f000 fd44 	bl	8005580 <__malloc_unlock>
 8004af8:	e7e3      	b.n	8004ac2 <_malloc_r+0x1e>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	1b5b      	subs	r3, r3, r5
 8004afe:	d417      	bmi.n	8004b30 <_malloc_r+0x8c>
 8004b00:	2b0b      	cmp	r3, #11
 8004b02:	d903      	bls.n	8004b0c <_malloc_r+0x68>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	441c      	add	r4, r3
 8004b08:	6025      	str	r5, [r4, #0]
 8004b0a:	e004      	b.n	8004b16 <_malloc_r+0x72>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	42a2      	cmp	r2, r4
 8004b10:	bf0c      	ite	eq
 8004b12:	600b      	streq	r3, [r1, #0]
 8004b14:	6053      	strne	r3, [r2, #4]
 8004b16:	4630      	mov	r0, r6
 8004b18:	f000 fd32 	bl	8005580 <__malloc_unlock>
 8004b1c:	f104 000b 	add.w	r0, r4, #11
 8004b20:	1d23      	adds	r3, r4, #4
 8004b22:	f020 0007 	bic.w	r0, r0, #7
 8004b26:	1ac2      	subs	r2, r0, r3
 8004b28:	d0cc      	beq.n	8004ac4 <_malloc_r+0x20>
 8004b2a:	1a1b      	subs	r3, r3, r0
 8004b2c:	50a3      	str	r3, [r4, r2]
 8004b2e:	e7c9      	b.n	8004ac4 <_malloc_r+0x20>
 8004b30:	4622      	mov	r2, r4
 8004b32:	6864      	ldr	r4, [r4, #4]
 8004b34:	e7cc      	b.n	8004ad0 <_malloc_r+0x2c>
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d0e3      	beq.n	8004b08 <_malloc_r+0x64>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fc52 	bl	80053ec <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1dd      	bne.n	8004b08 <_malloc_r+0x64>
 8004b4c:	e7cf      	b.n	8004aee <_malloc_r+0x4a>
 8004b4e:	bf00      	nop
 8004b50:	20000098 	.word	0x20000098
 8004b54:	2000009c 	.word	0x2000009c

08004b58 <__ssputs_r>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	688e      	ldr	r6, [r1, #8]
 8004b5e:	429e      	cmp	r6, r3
 8004b60:	4682      	mov	sl, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4690      	mov	r8, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	d838      	bhi.n	8004bdc <__ssputs_r+0x84>
 8004b6a:	898a      	ldrh	r2, [r1, #12]
 8004b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b70:	d032      	beq.n	8004bd8 <__ssputs_r+0x80>
 8004b72:	6825      	ldr	r5, [r4, #0]
 8004b74:	6909      	ldr	r1, [r1, #16]
 8004b76:	eba5 0901 	sub.w	r9, r5, r1
 8004b7a:	6965      	ldr	r5, [r4, #20]
 8004b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b84:	3301      	adds	r3, #1
 8004b86:	444b      	add	r3, r9
 8004b88:	106d      	asrs	r5, r5, #1
 8004b8a:	429d      	cmp	r5, r3
 8004b8c:	bf38      	it	cc
 8004b8e:	461d      	movcc	r5, r3
 8004b90:	0553      	lsls	r3, r2, #21
 8004b92:	d531      	bpl.n	8004bf8 <__ssputs_r+0xa0>
 8004b94:	4629      	mov	r1, r5
 8004b96:	f7ff ff85 	bl	8004aa4 <_malloc_r>
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	b950      	cbnz	r0, 8004bb4 <__ssputs_r+0x5c>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	f8ca 3000 	str.w	r3, [sl]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	6921      	ldr	r1, [r4, #16]
 8004bb6:	464a      	mov	r2, r9
 8004bb8:	f7ff fb82 	bl	80042c0 <memcpy>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	6126      	str	r6, [r4, #16]
 8004bca:	6165      	str	r5, [r4, #20]
 8004bcc:	444e      	add	r6, r9
 8004bce:	eba5 0509 	sub.w	r5, r5, r9
 8004bd2:	6026      	str	r6, [r4, #0]
 8004bd4:	60a5      	str	r5, [r4, #8]
 8004bd6:	463e      	mov	r6, r7
 8004bd8:	42be      	cmp	r6, r7
 8004bda:	d900      	bls.n	8004bde <__ssputs_r+0x86>
 8004bdc:	463e      	mov	r6, r7
 8004bde:	4632      	mov	r2, r6
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	4641      	mov	r1, r8
 8004be4:	f000 fcac 	bl	8005540 <memmove>
 8004be8:	68a3      	ldr	r3, [r4, #8]
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	1b9b      	subs	r3, r3, r6
 8004bee:	4432      	add	r2, r6
 8004bf0:	60a3      	str	r3, [r4, #8]
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7db      	b.n	8004bb0 <__ssputs_r+0x58>
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	f000 fcc7 	bl	800558c <_realloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d1e1      	bne.n	8004bc8 <__ssputs_r+0x70>
 8004c04:	6921      	ldr	r1, [r4, #16]
 8004c06:	4650      	mov	r0, sl
 8004c08:	f7ff fefc 	bl	8004a04 <_free_r>
 8004c0c:	e7c7      	b.n	8004b9e <__ssputs_r+0x46>
	...

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4698      	mov	r8, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	460d      	mov	r5, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	d50e      	bpl.n	8004c42 <_svfiprintf_r+0x32>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b963      	cbnz	r3, 8004c42 <_svfiprintf_r+0x32>
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f7ff ff3b 	bl	8004aa4 <_malloc_r>
 8004c2e:	6028      	str	r0, [r5, #0]
 8004c30:	6128      	str	r0, [r5, #16]
 8004c32:	b920      	cbnz	r0, 8004c3e <_svfiprintf_r+0x2e>
 8004c34:	230c      	movs	r3, #12
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e0d1      	b.n	8004de2 <_svfiprintf_r+0x1d2>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	616b      	str	r3, [r5, #20]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	2320      	movs	r3, #32
 8004c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c50:	2330      	movs	r3, #48	; 0x30
 8004c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dfc <_svfiprintf_r+0x1ec>
 8004c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5a:	f04f 0901 	mov.w	r9, #1
 8004c5e:	4623      	mov	r3, r4
 8004c60:	469a      	mov	sl, r3
 8004c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c66:	b10a      	cbz	r2, 8004c6c <_svfiprintf_r+0x5c>
 8004c68:	2a25      	cmp	r2, #37	; 0x25
 8004c6a:	d1f9      	bne.n	8004c60 <_svfiprintf_r+0x50>
 8004c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c70:	d00b      	beq.n	8004c8a <_svfiprintf_r+0x7a>
 8004c72:	465b      	mov	r3, fp
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f7ff ff6d 	bl	8004b58 <__ssputs_r>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f000 80aa 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c86:	445a      	add	r2, fp
 8004c88:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80a2 	beq.w	8004dd8 <_svfiprintf_r+0x1c8>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c9e:	f10a 0a01 	add.w	sl, sl, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	9307      	str	r3, [sp, #28]
 8004ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004caa:	931a      	str	r3, [sp, #104]	; 0x68
 8004cac:	4654      	mov	r4, sl
 8004cae:	2205      	movs	r2, #5
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	4851      	ldr	r0, [pc, #324]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004cb6:	f7fb fa93 	bl	80001e0 <memchr>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	b9d8      	cbnz	r0, 8004cf6 <_svfiprintf_r+0xe6>
 8004cbe:	06d0      	lsls	r0, r2, #27
 8004cc0:	bf44      	itt	mi
 8004cc2:	2320      	movmi	r3, #32
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc8:	0711      	lsls	r1, r2, #28
 8004cca:	bf44      	itt	mi
 8004ccc:	232b      	movmi	r3, #43	; 0x2b
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd8:	d015      	beq.n	8004d06 <_svfiprintf_r+0xf6>
 8004cda:	9a07      	ldr	r2, [sp, #28]
 8004cdc:	4654      	mov	r4, sl
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f04f 0c0a 	mov.w	ip, #10
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cea:	3b30      	subs	r3, #48	; 0x30
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d94e      	bls.n	8004d8e <_svfiprintf_r+0x17e>
 8004cf0:	b1b0      	cbz	r0, 8004d20 <_svfiprintf_r+0x110>
 8004cf2:	9207      	str	r2, [sp, #28]
 8004cf4:	e014      	b.n	8004d20 <_svfiprintf_r+0x110>
 8004cf6:	eba0 0308 	sub.w	r3, r0, r8
 8004cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	9304      	str	r3, [sp, #16]
 8004d02:	46a2      	mov	sl, r4
 8004d04:	e7d2      	b.n	8004cac <_svfiprintf_r+0x9c>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9103      	str	r1, [sp, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bfbb      	ittet	lt
 8004d12:	425b      	neglt	r3, r3
 8004d14:	f042 0202 	orrlt.w	r2, r2, #2
 8004d18:	9307      	strge	r3, [sp, #28]
 8004d1a:	9307      	strlt	r3, [sp, #28]
 8004d1c:	bfb8      	it	lt
 8004d1e:	9204      	strlt	r2, [sp, #16]
 8004d20:	7823      	ldrb	r3, [r4, #0]
 8004d22:	2b2e      	cmp	r3, #46	; 0x2e
 8004d24:	d10c      	bne.n	8004d40 <_svfiprintf_r+0x130>
 8004d26:	7863      	ldrb	r3, [r4, #1]
 8004d28:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2a:	d135      	bne.n	8004d98 <_svfiprintf_r+0x188>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d1a      	adds	r2, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9203      	str	r2, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfb8      	it	lt
 8004d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d3c:	3402      	adds	r4, #2
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e0c <_svfiprintf_r+0x1fc>
 8004d44:	7821      	ldrb	r1, [r4, #0]
 8004d46:	2203      	movs	r2, #3
 8004d48:	4650      	mov	r0, sl
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	b140      	cbz	r0, 8004d62 <_svfiprintf_r+0x152>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	eba0 000a 	sub.w	r0, r0, sl
 8004d56:	fa03 f000 	lsl.w	r0, r3, r0
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	4303      	orrs	r3, r0
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <_svfiprintf_r+0x1f0>)
 8004d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6c:	2206      	movs	r2, #6
 8004d6e:	f7fb fa37 	bl	80001e0 <memchr>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d038      	beq.n	8004de8 <_svfiprintf_r+0x1d8>
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <_svfiprintf_r+0x1f4>)
 8004d78:	bb1b      	cbnz	r3, 8004dc2 <_svfiprintf_r+0x1b2>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	f023 0307 	bic.w	r3, r3, #7
 8004d82:	3308      	adds	r3, #8
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	4433      	add	r3, r6
 8004d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8c:	e767      	b.n	8004c5e <_svfiprintf_r+0x4e>
 8004d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d92:	460c      	mov	r4, r1
 8004d94:	2001      	movs	r0, #1
 8004d96:	e7a5      	b.n	8004ce4 <_svfiprintf_r+0xd4>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	3401      	adds	r4, #1
 8004d9c:	9305      	str	r3, [sp, #20]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0c0a 	mov.w	ip, #10
 8004da4:	4620      	mov	r0, r4
 8004da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004daa:	3a30      	subs	r2, #48	; 0x30
 8004dac:	2a09      	cmp	r2, #9
 8004dae:	d903      	bls.n	8004db8 <_svfiprintf_r+0x1a8>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0c5      	beq.n	8004d40 <_svfiprintf_r+0x130>
 8004db4:	9105      	str	r1, [sp, #20]
 8004db6:	e7c3      	b.n	8004d40 <_svfiprintf_r+0x130>
 8004db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e7f0      	b.n	8004da4 <_svfiprintf_r+0x194>
 8004dc2:	ab03      	add	r3, sp, #12
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004dca:	a904      	add	r1, sp, #16
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f3af 8000 	nop.w
 8004dd2:	1c42      	adds	r2, r0, #1
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	d1d6      	bne.n	8004d86 <_svfiprintf_r+0x176>
 8004dd8:	89ab      	ldrh	r3, [r5, #12]
 8004dda:	065b      	lsls	r3, r3, #25
 8004ddc:	f53f af2c 	bmi.w	8004c38 <_svfiprintf_r+0x28>
 8004de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de2:	b01d      	add	sp, #116	; 0x74
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	462a      	mov	r2, r5
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <_svfiprintf_r+0x1f8>)
 8004df0:	a904      	add	r1, sp, #16
 8004df2:	4638      	mov	r0, r7
 8004df4:	f000 f9d4 	bl	80051a0 <_printf_i>
 8004df8:	e7eb      	b.n	8004dd2 <_svfiprintf_r+0x1c2>
 8004dfa:	bf00      	nop
 8004dfc:	08005a28 	.word	0x08005a28
 8004e00:	08005a32 	.word	0x08005a32
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b59 	.word	0x08004b59
 8004e0c:	08005a2e 	.word	0x08005a2e

08004e10 <__sfputc_r>:
 8004e10:	6893      	ldr	r3, [r2, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	b410      	push	{r4}
 8004e18:	6093      	str	r3, [r2, #8]
 8004e1a:	da08      	bge.n	8004e2e <__sfputc_r+0x1e>
 8004e1c:	6994      	ldr	r4, [r2, #24]
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	db01      	blt.n	8004e26 <__sfputc_r+0x16>
 8004e22:	290a      	cmp	r1, #10
 8004e24:	d103      	bne.n	8004e2e <__sfputc_r+0x1e>
 8004e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2a:	f7ff bb0d 	b.w	8004448 <__swbuf_r>
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	1c58      	adds	r0, r3, #1
 8004e32:	6010      	str	r0, [r2, #0]
 8004e34:	7019      	strb	r1, [r3, #0]
 8004e36:	4608      	mov	r0, r1
 8004e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <__sfputs_r>:
 8004e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e40:	4606      	mov	r6, r0
 8004e42:	460f      	mov	r7, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	18d5      	adds	r5, r2, r3
 8004e48:	42ac      	cmp	r4, r5
 8004e4a:	d101      	bne.n	8004e50 <__sfputs_r+0x12>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e007      	b.n	8004e60 <__sfputs_r+0x22>
 8004e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e54:	463a      	mov	r2, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff ffda 	bl	8004e10 <__sfputc_r>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d1f3      	bne.n	8004e48 <__sfputs_r+0xa>
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e64 <_vfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	460d      	mov	r5, r1
 8004e6a:	b09d      	sub	sp, #116	; 0x74
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	4698      	mov	r8, r3
 8004e70:	4606      	mov	r6, r0
 8004e72:	b118      	cbz	r0, 8004e7c <_vfiprintf_r+0x18>
 8004e74:	6983      	ldr	r3, [r0, #24]
 8004e76:	b90b      	cbnz	r3, 8004e7c <_vfiprintf_r+0x18>
 8004e78:	f7ff fcc0 	bl	80047fc <__sinit>
 8004e7c:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <_vfiprintf_r+0x240>)
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	d11b      	bne.n	8004eba <_vfiprintf_r+0x56>
 8004e82:	6875      	ldr	r5, [r6, #4]
 8004e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x32>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x32>
 8004e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e92:	f7ff fd51 	bl	8004938 <__retarget_lock_acquire_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	d501      	bpl.n	8004ea0 <_vfiprintf_r+0x3c>
 8004e9c:	692b      	ldr	r3, [r5, #16]
 8004e9e:	b9eb      	cbnz	r3, 8004edc <_vfiprintf_r+0x78>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff fb22 	bl	80044ec <__swsetup_r>
 8004ea8:	b1c0      	cbz	r0, 8004edc <_vfiprintf_r+0x78>
 8004eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eac:	07dc      	lsls	r4, r3, #31
 8004eae:	d50e      	bpl.n	8004ece <_vfiprintf_r+0x6a>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	b01d      	add	sp, #116	; 0x74
 8004eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eba:	4b7b      	ldr	r3, [pc, #492]	; (80050a8 <_vfiprintf_r+0x244>)
 8004ebc:	429d      	cmp	r5, r3
 8004ebe:	d101      	bne.n	8004ec4 <_vfiprintf_r+0x60>
 8004ec0:	68b5      	ldr	r5, [r6, #8]
 8004ec2:	e7df      	b.n	8004e84 <_vfiprintf_r+0x20>
 8004ec4:	4b79      	ldr	r3, [pc, #484]	; (80050ac <_vfiprintf_r+0x248>)
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	bf08      	it	eq
 8004eca:	68f5      	ldreq	r5, [r6, #12]
 8004ecc:	e7da      	b.n	8004e84 <_vfiprintf_r+0x20>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	0598      	lsls	r0, r3, #22
 8004ed2:	d4ed      	bmi.n	8004eb0 <_vfiprintf_r+0x4c>
 8004ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ed6:	f7ff fd30 	bl	800493a <__retarget_lock_release_recursive>
 8004eda:	e7e9      	b.n	8004eb0 <_vfiprintf_r+0x4c>
 8004edc:	2300      	movs	r3, #0
 8004ede:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eea:	2330      	movs	r3, #48	; 0x30
 8004eec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050b0 <_vfiprintf_r+0x24c>
 8004ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef4:	f04f 0901 	mov.w	r9, #1
 8004ef8:	4623      	mov	r3, r4
 8004efa:	469a      	mov	sl, r3
 8004efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f00:	b10a      	cbz	r2, 8004f06 <_vfiprintf_r+0xa2>
 8004f02:	2a25      	cmp	r2, #37	; 0x25
 8004f04:	d1f9      	bne.n	8004efa <_vfiprintf_r+0x96>
 8004f06:	ebba 0b04 	subs.w	fp, sl, r4
 8004f0a:	d00b      	beq.n	8004f24 <_vfiprintf_r+0xc0>
 8004f0c:	465b      	mov	r3, fp
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff ff93 	bl	8004e3e <__sfputs_r>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f000 80aa 	beq.w	8005072 <_vfiprintf_r+0x20e>
 8004f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f20:	445a      	add	r2, fp
 8004f22:	9209      	str	r2, [sp, #36]	; 0x24
 8004f24:	f89a 3000 	ldrb.w	r3, [sl]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80a2 	beq.w	8005072 <_vfiprintf_r+0x20e>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f38:	f10a 0a01 	add.w	sl, sl, #1
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f44:	931a      	str	r3, [sp, #104]	; 0x68
 8004f46:	4654      	mov	r4, sl
 8004f48:	2205      	movs	r2, #5
 8004f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4e:	4858      	ldr	r0, [pc, #352]	; (80050b0 <_vfiprintf_r+0x24c>)
 8004f50:	f7fb f946 	bl	80001e0 <memchr>
 8004f54:	9a04      	ldr	r2, [sp, #16]
 8004f56:	b9d8      	cbnz	r0, 8004f90 <_vfiprintf_r+0x12c>
 8004f58:	06d1      	lsls	r1, r2, #27
 8004f5a:	bf44      	itt	mi
 8004f5c:	2320      	movmi	r3, #32
 8004f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f62:	0713      	lsls	r3, r2, #28
 8004f64:	bf44      	itt	mi
 8004f66:	232b      	movmi	r3, #43	; 0x2b
 8004f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f70:	2b2a      	cmp	r3, #42	; 0x2a
 8004f72:	d015      	beq.n	8004fa0 <_vfiprintf_r+0x13c>
 8004f74:	9a07      	ldr	r2, [sp, #28]
 8004f76:	4654      	mov	r4, sl
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f04f 0c0a 	mov.w	ip, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f84:	3b30      	subs	r3, #48	; 0x30
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	d94e      	bls.n	8005028 <_vfiprintf_r+0x1c4>
 8004f8a:	b1b0      	cbz	r0, 8004fba <_vfiprintf_r+0x156>
 8004f8c:	9207      	str	r2, [sp, #28]
 8004f8e:	e014      	b.n	8004fba <_vfiprintf_r+0x156>
 8004f90:	eba0 0308 	sub.w	r3, r0, r8
 8004f94:	fa09 f303 	lsl.w	r3, r9, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	46a2      	mov	sl, r4
 8004f9e:	e7d2      	b.n	8004f46 <_vfiprintf_r+0xe2>
 8004fa0:	9b03      	ldr	r3, [sp, #12]
 8004fa2:	1d19      	adds	r1, r3, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	9103      	str	r1, [sp, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bfbb      	ittet	lt
 8004fac:	425b      	neglt	r3, r3
 8004fae:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb2:	9307      	strge	r3, [sp, #28]
 8004fb4:	9307      	strlt	r3, [sp, #28]
 8004fb6:	bfb8      	it	lt
 8004fb8:	9204      	strlt	r2, [sp, #16]
 8004fba:	7823      	ldrb	r3, [r4, #0]
 8004fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fbe:	d10c      	bne.n	8004fda <_vfiprintf_r+0x176>
 8004fc0:	7863      	ldrb	r3, [r4, #1]
 8004fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc4:	d135      	bne.n	8005032 <_vfiprintf_r+0x1ce>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	9203      	str	r2, [sp, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd6:	3402      	adds	r4, #2
 8004fd8:	9305      	str	r3, [sp, #20]
 8004fda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050c0 <_vfiprintf_r+0x25c>
 8004fde:	7821      	ldrb	r1, [r4, #0]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	f7fb f8fc 	bl	80001e0 <memchr>
 8004fe8:	b140      	cbz	r0, 8004ffc <_vfiprintf_r+0x198>
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	eba0 000a 	sub.w	r0, r0, sl
 8004ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff4:	9b04      	ldr	r3, [sp, #16]
 8004ff6:	4303      	orrs	r3, r0
 8004ff8:	3401      	adds	r4, #1
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005000:	482c      	ldr	r0, [pc, #176]	; (80050b4 <_vfiprintf_r+0x250>)
 8005002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005006:	2206      	movs	r2, #6
 8005008:	f7fb f8ea 	bl	80001e0 <memchr>
 800500c:	2800      	cmp	r0, #0
 800500e:	d03f      	beq.n	8005090 <_vfiprintf_r+0x22c>
 8005010:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <_vfiprintf_r+0x254>)
 8005012:	bb1b      	cbnz	r3, 800505c <_vfiprintf_r+0x1f8>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	3307      	adds	r3, #7
 8005018:	f023 0307 	bic.w	r3, r3, #7
 800501c:	3308      	adds	r3, #8
 800501e:	9303      	str	r3, [sp, #12]
 8005020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005022:	443b      	add	r3, r7
 8005024:	9309      	str	r3, [sp, #36]	; 0x24
 8005026:	e767      	b.n	8004ef8 <_vfiprintf_r+0x94>
 8005028:	fb0c 3202 	mla	r2, ip, r2, r3
 800502c:	460c      	mov	r4, r1
 800502e:	2001      	movs	r0, #1
 8005030:	e7a5      	b.n	8004f7e <_vfiprintf_r+0x11a>
 8005032:	2300      	movs	r3, #0
 8005034:	3401      	adds	r4, #1
 8005036:	9305      	str	r3, [sp, #20]
 8005038:	4619      	mov	r1, r3
 800503a:	f04f 0c0a 	mov.w	ip, #10
 800503e:	4620      	mov	r0, r4
 8005040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005044:	3a30      	subs	r2, #48	; 0x30
 8005046:	2a09      	cmp	r2, #9
 8005048:	d903      	bls.n	8005052 <_vfiprintf_r+0x1ee>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0c5      	beq.n	8004fda <_vfiprintf_r+0x176>
 800504e:	9105      	str	r1, [sp, #20]
 8005050:	e7c3      	b.n	8004fda <_vfiprintf_r+0x176>
 8005052:	fb0c 2101 	mla	r1, ip, r1, r2
 8005056:	4604      	mov	r4, r0
 8005058:	2301      	movs	r3, #1
 800505a:	e7f0      	b.n	800503e <_vfiprintf_r+0x1da>
 800505c:	ab03      	add	r3, sp, #12
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	462a      	mov	r2, r5
 8005062:	4b16      	ldr	r3, [pc, #88]	; (80050bc <_vfiprintf_r+0x258>)
 8005064:	a904      	add	r1, sp, #16
 8005066:	4630      	mov	r0, r6
 8005068:	f3af 8000 	nop.w
 800506c:	4607      	mov	r7, r0
 800506e:	1c78      	adds	r0, r7, #1
 8005070:	d1d6      	bne.n	8005020 <_vfiprintf_r+0x1bc>
 8005072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	d405      	bmi.n	8005084 <_vfiprintf_r+0x220>
 8005078:	89ab      	ldrh	r3, [r5, #12]
 800507a:	059a      	lsls	r2, r3, #22
 800507c:	d402      	bmi.n	8005084 <_vfiprintf_r+0x220>
 800507e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005080:	f7ff fc5b 	bl	800493a <__retarget_lock_release_recursive>
 8005084:	89ab      	ldrh	r3, [r5, #12]
 8005086:	065b      	lsls	r3, r3, #25
 8005088:	f53f af12 	bmi.w	8004eb0 <_vfiprintf_r+0x4c>
 800508c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800508e:	e711      	b.n	8004eb4 <_vfiprintf_r+0x50>
 8005090:	ab03      	add	r3, sp, #12
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	462a      	mov	r2, r5
 8005096:	4b09      	ldr	r3, [pc, #36]	; (80050bc <_vfiprintf_r+0x258>)
 8005098:	a904      	add	r1, sp, #16
 800509a:	4630      	mov	r0, r6
 800509c:	f000 f880 	bl	80051a0 <_printf_i>
 80050a0:	e7e4      	b.n	800506c <_vfiprintf_r+0x208>
 80050a2:	bf00      	nop
 80050a4:	080059e8 	.word	0x080059e8
 80050a8:	08005a08 	.word	0x08005a08
 80050ac:	080059c8 	.word	0x080059c8
 80050b0:	08005a28 	.word	0x08005a28
 80050b4:	08005a32 	.word	0x08005a32
 80050b8:	00000000 	.word	0x00000000
 80050bc:	08004e3f 	.word	0x08004e3f
 80050c0:	08005a2e 	.word	0x08005a2e

080050c4 <_printf_common>:
 80050c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	4616      	mov	r6, r2
 80050ca:	4699      	mov	r9, r3
 80050cc:	688a      	ldr	r2, [r1, #8]
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bfb8      	it	lt
 80050d8:	4613      	movlt	r3, r2
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050e0:	4607      	mov	r7, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	b10a      	cbz	r2, 80050ea <_printf_common+0x26>
 80050e6:	3301      	adds	r3, #1
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	0699      	lsls	r1, r3, #26
 80050ee:	bf42      	ittt	mi
 80050f0:	6833      	ldrmi	r3, [r6, #0]
 80050f2:	3302      	addmi	r3, #2
 80050f4:	6033      	strmi	r3, [r6, #0]
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	f015 0506 	ands.w	r5, r5, #6
 80050fc:	d106      	bne.n	800510c <_printf_common+0x48>
 80050fe:	f104 0a19 	add.w	sl, r4, #25
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	6832      	ldr	r2, [r6, #0]
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	42ab      	cmp	r3, r5
 800510a:	dc26      	bgt.n	800515a <_printf_common+0x96>
 800510c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005110:	1e13      	subs	r3, r2, #0
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	bf18      	it	ne
 8005116:	2301      	movne	r3, #1
 8005118:	0692      	lsls	r2, r2, #26
 800511a:	d42b      	bmi.n	8005174 <_printf_common+0xb0>
 800511c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d01e      	beq.n	8005168 <_printf_common+0xa4>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	68e5      	ldr	r5, [r4, #12]
 800512e:	6832      	ldr	r2, [r6, #0]
 8005130:	f003 0306 	and.w	r3, r3, #6
 8005134:	2b04      	cmp	r3, #4
 8005136:	bf08      	it	eq
 8005138:	1aad      	subeq	r5, r5, r2
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	6922      	ldr	r2, [r4, #16]
 800513e:	bf0c      	ite	eq
 8005140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005144:	2500      	movne	r5, #0
 8005146:	4293      	cmp	r3, r2
 8005148:	bfc4      	itt	gt
 800514a:	1a9b      	subgt	r3, r3, r2
 800514c:	18ed      	addgt	r5, r5, r3
 800514e:	2600      	movs	r6, #0
 8005150:	341a      	adds	r4, #26
 8005152:	42b5      	cmp	r5, r6
 8005154:	d11a      	bne.n	800518c <_printf_common+0xc8>
 8005156:	2000      	movs	r0, #0
 8005158:	e008      	b.n	800516c <_printf_common+0xa8>
 800515a:	2301      	movs	r3, #1
 800515c:	4652      	mov	r2, sl
 800515e:	4649      	mov	r1, r9
 8005160:	4638      	mov	r0, r7
 8005162:	47c0      	blx	r8
 8005164:	3001      	adds	r0, #1
 8005166:	d103      	bne.n	8005170 <_printf_common+0xac>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	3501      	adds	r5, #1
 8005172:	e7c6      	b.n	8005102 <_printf_common+0x3e>
 8005174:	18e1      	adds	r1, r4, r3
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	2030      	movs	r0, #48	; 0x30
 800517a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800517e:	4422      	add	r2, r4
 8005180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005188:	3302      	adds	r3, #2
 800518a:	e7c7      	b.n	800511c <_printf_common+0x58>
 800518c:	2301      	movs	r3, #1
 800518e:	4622      	mov	r2, r4
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d0e6      	beq.n	8005168 <_printf_common+0xa4>
 800519a:	3601      	adds	r6, #1
 800519c:	e7d9      	b.n	8005152 <_printf_common+0x8e>
	...

080051a0 <_printf_i>:
 80051a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	4691      	mov	r9, r2
 80051a8:	7e27      	ldrb	r7, [r4, #24]
 80051aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051ac:	2f78      	cmp	r7, #120	; 0x78
 80051ae:	4680      	mov	r8, r0
 80051b0:	469a      	mov	sl, r3
 80051b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b6:	d807      	bhi.n	80051c8 <_printf_i+0x28>
 80051b8:	2f62      	cmp	r7, #98	; 0x62
 80051ba:	d80a      	bhi.n	80051d2 <_printf_i+0x32>
 80051bc:	2f00      	cmp	r7, #0
 80051be:	f000 80d8 	beq.w	8005372 <_printf_i+0x1d2>
 80051c2:	2f58      	cmp	r7, #88	; 0x58
 80051c4:	f000 80a3 	beq.w	800530e <_printf_i+0x16e>
 80051c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051d0:	e03a      	b.n	8005248 <_printf_i+0xa8>
 80051d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051d6:	2b15      	cmp	r3, #21
 80051d8:	d8f6      	bhi.n	80051c8 <_printf_i+0x28>
 80051da:	a001      	add	r0, pc, #4	; (adr r0, 80051e0 <_printf_i+0x40>)
 80051dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051e0:	08005239 	.word	0x08005239
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	080051c9 	.word	0x080051c9
 80051ec:	080051c9 	.word	0x080051c9
 80051f0:	080051c9 	.word	0x080051c9
 80051f4:	080051c9 	.word	0x080051c9
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	080051c9 	.word	0x080051c9
 8005200:	080051c9 	.word	0x080051c9
 8005204:	080051c9 	.word	0x080051c9
 8005208:	080051c9 	.word	0x080051c9
 800520c:	08005359 	.word	0x08005359
 8005210:	0800527d 	.word	0x0800527d
 8005214:	0800533b 	.word	0x0800533b
 8005218:	080051c9 	.word	0x080051c9
 800521c:	080051c9 	.word	0x080051c9
 8005220:	0800537b 	.word	0x0800537b
 8005224:	080051c9 	.word	0x080051c9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051c9 	.word	0x080051c9
 8005230:	080051c9 	.word	0x080051c9
 8005234:	08005343 	.word	0x08005343
 8005238:	680b      	ldr	r3, [r1, #0]
 800523a:	1d1a      	adds	r2, r3, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	600a      	str	r2, [r1, #0]
 8005240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005248:	2301      	movs	r3, #1
 800524a:	e0a3      	b.n	8005394 <_printf_i+0x1f4>
 800524c:	6825      	ldr	r5, [r4, #0]
 800524e:	6808      	ldr	r0, [r1, #0]
 8005250:	062e      	lsls	r6, r5, #24
 8005252:	f100 0304 	add.w	r3, r0, #4
 8005256:	d50a      	bpl.n	800526e <_printf_i+0xce>
 8005258:	6805      	ldr	r5, [r0, #0]
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	2d00      	cmp	r5, #0
 800525e:	da03      	bge.n	8005268 <_printf_i+0xc8>
 8005260:	232d      	movs	r3, #45	; 0x2d
 8005262:	426d      	negs	r5, r5
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	485e      	ldr	r0, [pc, #376]	; (80053e4 <_printf_i+0x244>)
 800526a:	230a      	movs	r3, #10
 800526c:	e019      	b.n	80052a2 <_printf_i+0x102>
 800526e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005272:	6805      	ldr	r5, [r0, #0]
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	bf18      	it	ne
 8005278:	b22d      	sxthne	r5, r5
 800527a:	e7ef      	b.n	800525c <_printf_i+0xbc>
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	1d18      	adds	r0, r3, #4
 8005282:	6008      	str	r0, [r1, #0]
 8005284:	0628      	lsls	r0, r5, #24
 8005286:	d501      	bpl.n	800528c <_printf_i+0xec>
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	e002      	b.n	8005292 <_printf_i+0xf2>
 800528c:	0669      	lsls	r1, r5, #25
 800528e:	d5fb      	bpl.n	8005288 <_printf_i+0xe8>
 8005290:	881d      	ldrh	r5, [r3, #0]
 8005292:	4854      	ldr	r0, [pc, #336]	; (80053e4 <_printf_i+0x244>)
 8005294:	2f6f      	cmp	r7, #111	; 0x6f
 8005296:	bf0c      	ite	eq
 8005298:	2308      	moveq	r3, #8
 800529a:	230a      	movne	r3, #10
 800529c:	2100      	movs	r1, #0
 800529e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a2:	6866      	ldr	r6, [r4, #4]
 80052a4:	60a6      	str	r6, [r4, #8]
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	bfa2      	ittt	ge
 80052aa:	6821      	ldrge	r1, [r4, #0]
 80052ac:	f021 0104 	bicge.w	r1, r1, #4
 80052b0:	6021      	strge	r1, [r4, #0]
 80052b2:	b90d      	cbnz	r5, 80052b8 <_printf_i+0x118>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	d04d      	beq.n	8005354 <_printf_i+0x1b4>
 80052b8:	4616      	mov	r6, r2
 80052ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80052be:	fb03 5711 	mls	r7, r3, r1, r5
 80052c2:	5dc7      	ldrb	r7, [r0, r7]
 80052c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052c8:	462f      	mov	r7, r5
 80052ca:	42bb      	cmp	r3, r7
 80052cc:	460d      	mov	r5, r1
 80052ce:	d9f4      	bls.n	80052ba <_printf_i+0x11a>
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10b      	bne.n	80052ec <_printf_i+0x14c>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07df      	lsls	r7, r3, #31
 80052d8:	d508      	bpl.n	80052ec <_printf_i+0x14c>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6861      	ldr	r1, [r4, #4]
 80052de:	4299      	cmp	r1, r3
 80052e0:	bfde      	ittt	le
 80052e2:	2330      	movle	r3, #48	; 0x30
 80052e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ec:	1b92      	subs	r2, r2, r6
 80052ee:	6122      	str	r2, [r4, #16]
 80052f0:	f8cd a000 	str.w	sl, [sp]
 80052f4:	464b      	mov	r3, r9
 80052f6:	aa03      	add	r2, sp, #12
 80052f8:	4621      	mov	r1, r4
 80052fa:	4640      	mov	r0, r8
 80052fc:	f7ff fee2 	bl	80050c4 <_printf_common>
 8005300:	3001      	adds	r0, #1
 8005302:	d14c      	bne.n	800539e <_printf_i+0x1fe>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b004      	add	sp, #16
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	4835      	ldr	r0, [pc, #212]	; (80053e4 <_printf_i+0x244>)
 8005310:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	680e      	ldr	r6, [r1, #0]
 8005318:	061f      	lsls	r7, r3, #24
 800531a:	f856 5b04 	ldr.w	r5, [r6], #4
 800531e:	600e      	str	r6, [r1, #0]
 8005320:	d514      	bpl.n	800534c <_printf_i+0x1ac>
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	bf44      	itt	mi
 8005326:	f043 0320 	orrmi.w	r3, r3, #32
 800532a:	6023      	strmi	r3, [r4, #0]
 800532c:	b91d      	cbnz	r5, 8005336 <_printf_i+0x196>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	f023 0320 	bic.w	r3, r3, #32
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	2310      	movs	r3, #16
 8005338:	e7b0      	b.n	800529c <_printf_i+0xfc>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	2378      	movs	r3, #120	; 0x78
 8005344:	4828      	ldr	r0, [pc, #160]	; (80053e8 <_printf_i+0x248>)
 8005346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800534a:	e7e3      	b.n	8005314 <_printf_i+0x174>
 800534c:	065e      	lsls	r6, r3, #25
 800534e:	bf48      	it	mi
 8005350:	b2ad      	uxthmi	r5, r5
 8005352:	e7e6      	b.n	8005322 <_printf_i+0x182>
 8005354:	4616      	mov	r6, r2
 8005356:	e7bb      	b.n	80052d0 <_printf_i+0x130>
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	6826      	ldr	r6, [r4, #0]
 800535c:	6960      	ldr	r0, [r4, #20]
 800535e:	1d1d      	adds	r5, r3, #4
 8005360:	600d      	str	r5, [r1, #0]
 8005362:	0635      	lsls	r5, r6, #24
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	d501      	bpl.n	800536c <_printf_i+0x1cc>
 8005368:	6018      	str	r0, [r3, #0]
 800536a:	e002      	b.n	8005372 <_printf_i+0x1d2>
 800536c:	0671      	lsls	r1, r6, #25
 800536e:	d5fb      	bpl.n	8005368 <_printf_i+0x1c8>
 8005370:	8018      	strh	r0, [r3, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	4616      	mov	r6, r2
 8005378:	e7ba      	b.n	80052f0 <_printf_i+0x150>
 800537a:	680b      	ldr	r3, [r1, #0]
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	600a      	str	r2, [r1, #0]
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	6862      	ldr	r2, [r4, #4]
 8005384:	2100      	movs	r1, #0
 8005386:	4630      	mov	r0, r6
 8005388:	f7fa ff2a 	bl	80001e0 <memchr>
 800538c:	b108      	cbz	r0, 8005392 <_printf_i+0x1f2>
 800538e:	1b80      	subs	r0, r0, r6
 8005390:	6060      	str	r0, [r4, #4]
 8005392:	6863      	ldr	r3, [r4, #4]
 8005394:	6123      	str	r3, [r4, #16]
 8005396:	2300      	movs	r3, #0
 8005398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539c:	e7a8      	b.n	80052f0 <_printf_i+0x150>
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	4632      	mov	r2, r6
 80053a2:	4649      	mov	r1, r9
 80053a4:	4640      	mov	r0, r8
 80053a6:	47d0      	blx	sl
 80053a8:	3001      	adds	r0, #1
 80053aa:	d0ab      	beq.n	8005304 <_printf_i+0x164>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	079b      	lsls	r3, r3, #30
 80053b0:	d413      	bmi.n	80053da <_printf_i+0x23a>
 80053b2:	68e0      	ldr	r0, [r4, #12]
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	4298      	cmp	r0, r3
 80053b8:	bfb8      	it	lt
 80053ba:	4618      	movlt	r0, r3
 80053bc:	e7a4      	b.n	8005308 <_printf_i+0x168>
 80053be:	2301      	movs	r3, #1
 80053c0:	4632      	mov	r2, r6
 80053c2:	4649      	mov	r1, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	47d0      	blx	sl
 80053c8:	3001      	adds	r0, #1
 80053ca:	d09b      	beq.n	8005304 <_printf_i+0x164>
 80053cc:	3501      	adds	r5, #1
 80053ce:	68e3      	ldr	r3, [r4, #12]
 80053d0:	9903      	ldr	r1, [sp, #12]
 80053d2:	1a5b      	subs	r3, r3, r1
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	dcf2      	bgt.n	80053be <_printf_i+0x21e>
 80053d8:	e7eb      	b.n	80053b2 <_printf_i+0x212>
 80053da:	2500      	movs	r5, #0
 80053dc:	f104 0619 	add.w	r6, r4, #25
 80053e0:	e7f5      	b.n	80053ce <_printf_i+0x22e>
 80053e2:	bf00      	nop
 80053e4:	08005a39 	.word	0x08005a39
 80053e8:	08005a4a 	.word	0x08005a4a

080053ec <_sbrk_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d06      	ldr	r5, [pc, #24]	; (8005408 <_sbrk_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fb ffb2 	bl	8001360 <_sbrk>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_sbrk_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_sbrk_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20002e04 	.word	0x20002e04

0800540c <__sread>:
 800540c:	b510      	push	{r4, lr}
 800540e:	460c      	mov	r4, r1
 8005410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005414:	f000 f8e0 	bl	80055d8 <_read_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	bfab      	itete	ge
 800541c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800541e:	89a3      	ldrhlt	r3, [r4, #12]
 8005420:	181b      	addge	r3, r3, r0
 8005422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005426:	bfac      	ite	ge
 8005428:	6563      	strge	r3, [r4, #84]	; 0x54
 800542a:	81a3      	strhlt	r3, [r4, #12]
 800542c:	bd10      	pop	{r4, pc}

0800542e <__swrite>:
 800542e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005432:	461f      	mov	r7, r3
 8005434:	898b      	ldrh	r3, [r1, #12]
 8005436:	05db      	lsls	r3, r3, #23
 8005438:	4605      	mov	r5, r0
 800543a:	460c      	mov	r4, r1
 800543c:	4616      	mov	r6, r2
 800543e:	d505      	bpl.n	800544c <__swrite+0x1e>
 8005440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005444:	2302      	movs	r3, #2
 8005446:	2200      	movs	r2, #0
 8005448:	f000 f868 	bl	800551c <_lseek_r>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	4632      	mov	r2, r6
 800545a:	463b      	mov	r3, r7
 800545c:	4628      	mov	r0, r5
 800545e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005462:	f000 b817 	b.w	8005494 <_write_r>

08005466 <__sseek>:
 8005466:	b510      	push	{r4, lr}
 8005468:	460c      	mov	r4, r1
 800546a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546e:	f000 f855 	bl	800551c <_lseek_r>
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	bf15      	itete	ne
 8005478:	6560      	strne	r0, [r4, #84]	; 0x54
 800547a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800547e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005482:	81a3      	strheq	r3, [r4, #12]
 8005484:	bf18      	it	ne
 8005486:	81a3      	strhne	r3, [r4, #12]
 8005488:	bd10      	pop	{r4, pc}

0800548a <__sclose>:
 800548a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548e:	f000 b813 	b.w	80054b8 <_close_r>
	...

08005494 <_write_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d07      	ldr	r5, [pc, #28]	; (80054b4 <_write_r+0x20>)
 8005498:	4604      	mov	r4, r0
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	602a      	str	r2, [r5, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7fb f88f 	bl	80005c6 <_write>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_write_r+0x1e>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_write_r+0x1e>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	20002e04 	.word	0x20002e04

080054b8 <_close_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4d06      	ldr	r5, [pc, #24]	; (80054d4 <_close_r+0x1c>)
 80054bc:	2300      	movs	r3, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	602b      	str	r3, [r5, #0]
 80054c4:	f7fb ff17 	bl	80012f6 <_close>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_close_r+0x1a>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_close_r+0x1a>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	20002e04 	.word	0x20002e04

080054d8 <_fstat_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_fstat_r+0x20>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	602b      	str	r3, [r5, #0]
 80054e6:	f7fb ff12 	bl	800130e <_fstat>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	d102      	bne.n	80054f4 <_fstat_r+0x1c>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	b103      	cbz	r3, 80054f4 <_fstat_r+0x1c>
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	bd38      	pop	{r3, r4, r5, pc}
 80054f6:	bf00      	nop
 80054f8:	20002e04 	.word	0x20002e04

080054fc <_isatty_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	; (8005518 <_isatty_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb ff11 	bl	800132e <_isatty>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_isatty_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_isatty_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20002e04 	.word	0x20002e04

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	; (800553c <_lseek_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb ff0a 	bl	8001344 <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20002e04 	.word	0x20002e04

08005540 <memmove>:
 8005540:	4288      	cmp	r0, r1
 8005542:	b510      	push	{r4, lr}
 8005544:	eb01 0402 	add.w	r4, r1, r2
 8005548:	d902      	bls.n	8005550 <memmove+0x10>
 800554a:	4284      	cmp	r4, r0
 800554c:	4623      	mov	r3, r4
 800554e:	d807      	bhi.n	8005560 <memmove+0x20>
 8005550:	1e43      	subs	r3, r0, #1
 8005552:	42a1      	cmp	r1, r4
 8005554:	d008      	beq.n	8005568 <memmove+0x28>
 8005556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0x12>
 8005560:	4402      	add	r2, r0
 8005562:	4601      	mov	r1, r0
 8005564:	428a      	cmp	r2, r1
 8005566:	d100      	bne.n	800556a <memmove+0x2a>
 8005568:	bd10      	pop	{r4, pc}
 800556a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800556e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005572:	e7f7      	b.n	8005564 <memmove+0x24>

08005574 <__malloc_lock>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__malloc_lock+0x8>)
 8005576:	f7ff b9df 	b.w	8004938 <__retarget_lock_acquire_recursive>
 800557a:	bf00      	nop
 800557c:	20002dfc 	.word	0x20002dfc

08005580 <__malloc_unlock>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__malloc_unlock+0x8>)
 8005582:	f7ff b9da 	b.w	800493a <__retarget_lock_release_recursive>
 8005586:	bf00      	nop
 8005588:	20002dfc 	.word	0x20002dfc

0800558c <_realloc_r>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	4607      	mov	r7, r0
 8005590:	4614      	mov	r4, r2
 8005592:	460e      	mov	r6, r1
 8005594:	b921      	cbnz	r1, 80055a0 <_realloc_r+0x14>
 8005596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800559a:	4611      	mov	r1, r2
 800559c:	f7ff ba82 	b.w	8004aa4 <_malloc_r>
 80055a0:	b922      	cbnz	r2, 80055ac <_realloc_r+0x20>
 80055a2:	f7ff fa2f 	bl	8004a04 <_free_r>
 80055a6:	4625      	mov	r5, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ac:	f000 f826 	bl	80055fc <_malloc_usable_size_r>
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d20f      	bcs.n	80055d4 <_realloc_r+0x48>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4638      	mov	r0, r7
 80055b8:	f7ff fa74 	bl	8004aa4 <_malloc_r>
 80055bc:	4605      	mov	r5, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d0f2      	beq.n	80055a8 <_realloc_r+0x1c>
 80055c2:	4631      	mov	r1, r6
 80055c4:	4622      	mov	r2, r4
 80055c6:	f7fe fe7b 	bl	80042c0 <memcpy>
 80055ca:	4631      	mov	r1, r6
 80055cc:	4638      	mov	r0, r7
 80055ce:	f7ff fa19 	bl	8004a04 <_free_r>
 80055d2:	e7e9      	b.n	80055a8 <_realloc_r+0x1c>
 80055d4:	4635      	mov	r5, r6
 80055d6:	e7e7      	b.n	80055a8 <_realloc_r+0x1c>

080055d8 <_read_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d07      	ldr	r5, [pc, #28]	; (80055f8 <_read_r+0x20>)
 80055dc:	4604      	mov	r4, r0
 80055de:	4608      	mov	r0, r1
 80055e0:	4611      	mov	r1, r2
 80055e2:	2200      	movs	r2, #0
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fb fe68 	bl	80012bc <_read>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_read_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_read_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20002e04 	.word	0x20002e04

080055fc <_malloc_usable_size_r>:
 80055fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005600:	1f18      	subs	r0, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	bfbc      	itt	lt
 8005606:	580b      	ldrlt	r3, [r1, r0]
 8005608:	18c0      	addlt	r0, r0, r3
 800560a:	4770      	bx	lr

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
